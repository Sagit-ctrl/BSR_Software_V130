
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b29c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  0800b35c  0800b35c  0001b35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf84  0800bf84  0001bf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf8c  0800bf8c  0001bf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf90  0800bf90  0001bf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e0  20000000  0800bf94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000177c  200002e0  0800c274  000202e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001a5c  0800c274  00021a5c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030872  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009d50  00000000  00000000  00050bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f10  00000000  00000000  0005a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ce1  00000000  00000000  0005c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00012053  00000000  00000000  0005e501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00044051  00000000  00000000  00070554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a440d  00000000  00000000  000b45a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005fe0  00000000  00000000  001589b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000117db  00000000  00000000  0015e994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000011f  00000000  00000000  0017016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e0 	.word	0x200002e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b344 	.word	0x0800b344

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e4 	.word	0x200002e4
 8000104:	0800b344 	.word	0x0800b344

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f84c 	bl	800050c <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4699      	mov	r9, r3
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	469c      	mov	ip, r3
 800048a:	0413      	lsls	r3, r2, #16
 800048c:	4647      	mov	r7, r8
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	001d      	movs	r5, r3
 8000492:	000e      	movs	r6, r1
 8000494:	4661      	mov	r1, ip
 8000496:	0404      	lsls	r4, r0, #16
 8000498:	0c24      	lsrs	r4, r4, #16
 800049a:	b580      	push	{r7, lr}
 800049c:	0007      	movs	r7, r0
 800049e:	0c10      	lsrs	r0, r2, #16
 80004a0:	434b      	muls	r3, r1
 80004a2:	4365      	muls	r5, r4
 80004a4:	4341      	muls	r1, r0
 80004a6:	4360      	muls	r0, r4
 80004a8:	0c2c      	lsrs	r4, r5, #16
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	1820      	adds	r0, r4, r0
 80004ae:	468c      	mov	ip, r1
 80004b0:	4283      	cmp	r3, r0
 80004b2:	d903      	bls.n	80004bc <__aeabi_lmul+0x3c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	025b      	lsls	r3, r3, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	44c4      	add	ip, r8
 80004bc:	4649      	mov	r1, r9
 80004be:	4379      	muls	r1, r7
 80004c0:	4356      	muls	r6, r2
 80004c2:	0c03      	lsrs	r3, r0, #16
 80004c4:	042d      	lsls	r5, r5, #16
 80004c6:	0c2d      	lsrs	r5, r5, #16
 80004c8:	1989      	adds	r1, r1, r6
 80004ca:	4463      	add	r3, ip
 80004cc:	0400      	lsls	r0, r0, #16
 80004ce:	1940      	adds	r0, r0, r5
 80004d0:	18c9      	adds	r1, r1, r3
 80004d2:	bcc0      	pop	{r6, r7}
 80004d4:	46b9      	mov	r9, r7
 80004d6:	46b0      	mov	r8, r6
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_f2uiz>:
 80004dc:	219e      	movs	r1, #158	; 0x9e
 80004de:	b510      	push	{r4, lr}
 80004e0:	05c9      	lsls	r1, r1, #23
 80004e2:	1c04      	adds	r4, r0, #0
 80004e4:	f001 fcb6 	bl	8001e54 <__aeabi_fcmpge>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d103      	bne.n	80004f4 <__aeabi_f2uiz+0x18>
 80004ec:	1c20      	adds	r0, r4, #0
 80004ee:	f000 fd67 	bl	8000fc0 <__aeabi_f2iz>
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	219e      	movs	r1, #158	; 0x9e
 80004f6:	1c20      	adds	r0, r4, #0
 80004f8:	05c9      	lsls	r1, r1, #23
 80004fa:	f000 fbc1 	bl	8000c80 <__aeabi_fsub>
 80004fe:	f000 fd5f 	bl	8000fc0 <__aeabi_f2iz>
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	061b      	lsls	r3, r3, #24
 8000506:	469c      	mov	ip, r3
 8000508:	4460      	add	r0, ip
 800050a:	e7f2      	b.n	80004f2 <__aeabi_f2uiz+0x16>

0800050c <__udivmoddi4>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	4657      	mov	r7, sl
 8000510:	464e      	mov	r6, r9
 8000512:	4645      	mov	r5, r8
 8000514:	46de      	mov	lr, fp
 8000516:	b5e0      	push	{r5, r6, r7, lr}
 8000518:	0004      	movs	r4, r0
 800051a:	000d      	movs	r5, r1
 800051c:	4692      	mov	sl, r2
 800051e:	4699      	mov	r9, r3
 8000520:	b083      	sub	sp, #12
 8000522:	428b      	cmp	r3, r1
 8000524:	d830      	bhi.n	8000588 <__udivmoddi4+0x7c>
 8000526:	d02d      	beq.n	8000584 <__udivmoddi4+0x78>
 8000528:	4649      	mov	r1, r9
 800052a:	4650      	mov	r0, sl
 800052c:	f001 fcba 	bl	8001ea4 <__clzdi2>
 8000530:	0029      	movs	r1, r5
 8000532:	0006      	movs	r6, r0
 8000534:	0020      	movs	r0, r4
 8000536:	f001 fcb5 	bl	8001ea4 <__clzdi2>
 800053a:	1a33      	subs	r3, r6, r0
 800053c:	4698      	mov	r8, r3
 800053e:	3b20      	subs	r3, #32
 8000540:	d434      	bmi.n	80005ac <__udivmoddi4+0xa0>
 8000542:	469b      	mov	fp, r3
 8000544:	4653      	mov	r3, sl
 8000546:	465a      	mov	r2, fp
 8000548:	4093      	lsls	r3, r2
 800054a:	4642      	mov	r2, r8
 800054c:	001f      	movs	r7, r3
 800054e:	4653      	mov	r3, sl
 8000550:	4093      	lsls	r3, r2
 8000552:	001e      	movs	r6, r3
 8000554:	42af      	cmp	r7, r5
 8000556:	d83b      	bhi.n	80005d0 <__udivmoddi4+0xc4>
 8000558:	42af      	cmp	r7, r5
 800055a:	d100      	bne.n	800055e <__udivmoddi4+0x52>
 800055c:	e079      	b.n	8000652 <__udivmoddi4+0x146>
 800055e:	465b      	mov	r3, fp
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5e>
 8000568:	e076      	b.n	8000658 <__udivmoddi4+0x14c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	465a      	mov	r2, fp
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4642      	mov	r2, r8
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e029      	b.n	80005d8 <__udivmoddi4+0xcc>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9cf      	bls.n	8000528 <__udivmoddi4+0x1c>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8e>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b003      	add	sp, #12
 80005a0:	bcf0      	pop	{r4, r5, r6, r7}
 80005a2:	46bb      	mov	fp, r7
 80005a4:	46b2      	mov	sl, r6
 80005a6:	46a9      	mov	r9, r5
 80005a8:	46a0      	mov	r8, r4
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	4642      	mov	r2, r8
 80005ae:	469b      	mov	fp, r3
 80005b0:	2320      	movs	r3, #32
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	4652      	mov	r2, sl
 80005b6:	40da      	lsrs	r2, r3
 80005b8:	4641      	mov	r1, r8
 80005ba:	0013      	movs	r3, r2
 80005bc:	464a      	mov	r2, r9
 80005be:	408a      	lsls	r2, r1
 80005c0:	0017      	movs	r7, r2
 80005c2:	4642      	mov	r2, r8
 80005c4:	431f      	orrs	r7, r3
 80005c6:	4653      	mov	r3, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	001e      	movs	r6, r3
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d9c3      	bls.n	8000558 <__udivmoddi4+0x4c>
 80005d0:	2200      	movs	r2, #0
 80005d2:	2300      	movs	r3, #0
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	4643      	mov	r3, r8
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0d8      	beq.n	8000590 <__udivmoddi4+0x84>
 80005de:	07fb      	lsls	r3, r7, #31
 80005e0:	0872      	lsrs	r2, r6, #1
 80005e2:	431a      	orrs	r2, r3
 80005e4:	4646      	mov	r6, r8
 80005e6:	087b      	lsrs	r3, r7, #1
 80005e8:	e00e      	b.n	8000608 <__udivmoddi4+0xfc>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d101      	bne.n	80005f2 <__udivmoddi4+0xe6>
 80005ee:	42a2      	cmp	r2, r4
 80005f0:	d80c      	bhi.n	800060c <__udivmoddi4+0x100>
 80005f2:	1aa4      	subs	r4, r4, r2
 80005f4:	419d      	sbcs	r5, r3
 80005f6:	2001      	movs	r0, #1
 80005f8:	1924      	adds	r4, r4, r4
 80005fa:	416d      	adcs	r5, r5
 80005fc:	2100      	movs	r1, #0
 80005fe:	3e01      	subs	r6, #1
 8000600:	1824      	adds	r4, r4, r0
 8000602:	414d      	adcs	r5, r1
 8000604:	2e00      	cmp	r6, #0
 8000606:	d006      	beq.n	8000616 <__udivmoddi4+0x10a>
 8000608:	42ab      	cmp	r3, r5
 800060a:	d9ee      	bls.n	80005ea <__udivmoddi4+0xde>
 800060c:	3e01      	subs	r6, #1
 800060e:	1924      	adds	r4, r4, r4
 8000610:	416d      	adcs	r5, r5
 8000612:	2e00      	cmp	r6, #0
 8000614:	d1f8      	bne.n	8000608 <__udivmoddi4+0xfc>
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	465b      	mov	r3, fp
 800061c:	1900      	adds	r0, r0, r4
 800061e:	4169      	adcs	r1, r5
 8000620:	2b00      	cmp	r3, #0
 8000622:	db24      	blt.n	800066e <__udivmoddi4+0x162>
 8000624:	002b      	movs	r3, r5
 8000626:	465a      	mov	r2, fp
 8000628:	4644      	mov	r4, r8
 800062a:	40d3      	lsrs	r3, r2
 800062c:	002a      	movs	r2, r5
 800062e:	40e2      	lsrs	r2, r4
 8000630:	001c      	movs	r4, r3
 8000632:	465b      	mov	r3, fp
 8000634:	0015      	movs	r5, r2
 8000636:	2b00      	cmp	r3, #0
 8000638:	db2a      	blt.n	8000690 <__udivmoddi4+0x184>
 800063a:	0026      	movs	r6, r4
 800063c:	409e      	lsls	r6, r3
 800063e:	0033      	movs	r3, r6
 8000640:	0026      	movs	r6, r4
 8000642:	4647      	mov	r7, r8
 8000644:	40be      	lsls	r6, r7
 8000646:	0032      	movs	r2, r6
 8000648:	1a80      	subs	r0, r0, r2
 800064a:	4199      	sbcs	r1, r3
 800064c:	9000      	str	r0, [sp, #0]
 800064e:	9101      	str	r1, [sp, #4]
 8000650:	e79e      	b.n	8000590 <__udivmoddi4+0x84>
 8000652:	42a3      	cmp	r3, r4
 8000654:	d8bc      	bhi.n	80005d0 <__udivmoddi4+0xc4>
 8000656:	e782      	b.n	800055e <__udivmoddi4+0x52>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	2100      	movs	r1, #0
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	9100      	str	r1, [sp, #0]
 8000664:	9201      	str	r2, [sp, #4]
 8000666:	2201      	movs	r2, #1
 8000668:	40da      	lsrs	r2, r3
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	e785      	b.n	800057a <__udivmoddi4+0x6e>
 800066e:	4642      	mov	r2, r8
 8000670:	2320      	movs	r3, #32
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	002a      	movs	r2, r5
 8000676:	4646      	mov	r6, r8
 8000678:	409a      	lsls	r2, r3
 800067a:	0023      	movs	r3, r4
 800067c:	40f3      	lsrs	r3, r6
 800067e:	4644      	mov	r4, r8
 8000680:	4313      	orrs	r3, r2
 8000682:	002a      	movs	r2, r5
 8000684:	40e2      	lsrs	r2, r4
 8000686:	001c      	movs	r4, r3
 8000688:	465b      	mov	r3, fp
 800068a:	0015      	movs	r5, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	dad4      	bge.n	800063a <__udivmoddi4+0x12e>
 8000690:	4642      	mov	r2, r8
 8000692:	002f      	movs	r7, r5
 8000694:	2320      	movs	r3, #32
 8000696:	0026      	movs	r6, r4
 8000698:	4097      	lsls	r7, r2
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	40de      	lsrs	r6, r3
 800069e:	003b      	movs	r3, r7
 80006a0:	4333      	orrs	r3, r6
 80006a2:	e7cd      	b.n	8000640 <__udivmoddi4+0x134>

080006a4 <__aeabi_fadd>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	4647      	mov	r7, r8
 80006a8:	46ce      	mov	lr, r9
 80006aa:	024a      	lsls	r2, r1, #9
 80006ac:	0243      	lsls	r3, r0, #9
 80006ae:	0045      	lsls	r5, r0, #1
 80006b0:	0fc4      	lsrs	r4, r0, #31
 80006b2:	0a50      	lsrs	r0, r2, #9
 80006b4:	4680      	mov	r8, r0
 80006b6:	0048      	lsls	r0, r1, #1
 80006b8:	0a5b      	lsrs	r3, r3, #9
 80006ba:	0e00      	lsrs	r0, r0, #24
 80006bc:	0992      	lsrs	r2, r2, #6
 80006be:	4694      	mov	ip, r2
 80006c0:	b580      	push	{r7, lr}
 80006c2:	001e      	movs	r6, r3
 80006c4:	4681      	mov	r9, r0
 80006c6:	0002      	movs	r2, r0
 80006c8:	0e2d      	lsrs	r5, r5, #24
 80006ca:	00df      	lsls	r7, r3, #3
 80006cc:	0fc9      	lsrs	r1, r1, #31
 80006ce:	428c      	cmp	r4, r1
 80006d0:	d024      	beq.n	800071c <__aeabi_fadd+0x78>
 80006d2:	1a28      	subs	r0, r5, r0
 80006d4:	2800      	cmp	r0, #0
 80006d6:	dd0e      	ble.n	80006f6 <__aeabi_fadd+0x52>
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d13e      	bne.n	800075a <__aeabi_fadd+0xb6>
 80006dc:	4662      	mov	r2, ip
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x40>
 80006e2:	e0fd      	b.n	80008e0 <__aeabi_fadd+0x23c>
 80006e4:	1e42      	subs	r2, r0, #1
 80006e6:	2801      	cmp	r0, #1
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x48>
 80006ea:	e137      	b.n	800095c <__aeabi_fadd+0x2b8>
 80006ec:	28ff      	cmp	r0, #255	; 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x4e>
 80006f0:	e0a9      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80006f2:	0010      	movs	r0, r2
 80006f4:	e039      	b.n	800076a <__aeabi_fadd+0xc6>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d063      	beq.n	80007c2 <__aeabi_fadd+0x11e>
 80006fa:	464b      	mov	r3, r9
 80006fc:	1b52      	subs	r2, r2, r5
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x60>
 8000702:	e0e0      	b.n	80008c6 <__aeabi_fadd+0x222>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x66>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_fadd+0x204>
 800070a:	1e53      	subs	r3, r2, #1
 800070c:	2a01      	cmp	r2, #1
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x6e>
 8000710:	e155      	b.n	80009be <__aeabi_fadd+0x31a>
 8000712:	2aff      	cmp	r2, #255	; 0xff
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x74>
 8000716:	e094      	b.n	8000842 <__aeabi_fadd+0x19e>
 8000718:	001a      	movs	r2, r3
 800071a:	e0d9      	b.n	80008d0 <__aeabi_fadd+0x22c>
 800071c:	1a2a      	subs	r2, r5, r0
 800071e:	2a00      	cmp	r2, #0
 8000720:	dc00      	bgt.n	8000724 <__aeabi_fadd+0x80>
 8000722:	e099      	b.n	8000858 <__aeabi_fadd+0x1b4>
 8000724:	2800      	cmp	r0, #0
 8000726:	d062      	beq.n	80007ee <__aeabi_fadd+0x14a>
 8000728:	2dff      	cmp	r5, #255	; 0xff
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x8a>
 800072c:	e08b      	b.n	8000846 <__aeabi_fadd+0x1a2>
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	4661      	mov	r1, ip
 8000732:	04db      	lsls	r3, r3, #19
 8000734:	4319      	orrs	r1, r3
 8000736:	468c      	mov	ip, r1
 8000738:	2a1b      	cmp	r2, #27
 800073a:	dc00      	bgt.n	800073e <__aeabi_fadd+0x9a>
 800073c:	e0d2      	b.n	80008e4 <__aeabi_fadd+0x240>
 800073e:	2301      	movs	r3, #1
 8000740:	19db      	adds	r3, r3, r7
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d56a      	bpl.n	800081c <__aeabi_fadd+0x178>
 8000746:	3501      	adds	r5, #1
 8000748:	2dff      	cmp	r5, #255	; 0xff
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x160>
 800074c:	2201      	movs	r2, #1
 800074e:	49a3      	ldr	r1, [pc, #652]	; (80009dc <__aeabi_fadd+0x338>)
 8000750:	401a      	ands	r2, r3
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	400b      	ands	r3, r1
 8000756:	4313      	orrs	r3, r2
 8000758:	e01c      	b.n	8000794 <__aeabi_fadd+0xf0>
 800075a:	2dff      	cmp	r5, #255	; 0xff
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0xbc>
 800075e:	e072      	b.n	8000846 <__aeabi_fadd+0x1a2>
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	4662      	mov	r2, ip
 8000764:	04db      	lsls	r3, r3, #19
 8000766:	431a      	orrs	r2, r3
 8000768:	4694      	mov	ip, r2
 800076a:	281b      	cmp	r0, #27
 800076c:	dc00      	bgt.n	8000770 <__aeabi_fadd+0xcc>
 800076e:	e090      	b.n	8000892 <__aeabi_fadd+0x1ee>
 8000770:	2301      	movs	r3, #1
 8000772:	1afb      	subs	r3, r7, r3
 8000774:	015a      	lsls	r2, r3, #5
 8000776:	d551      	bpl.n	800081c <__aeabi_fadd+0x178>
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	099e      	lsrs	r6, r3, #6
 800077c:	0030      	movs	r0, r6
 800077e:	f001 fb73 	bl	8001e68 <__clzsi2>
 8000782:	0033      	movs	r3, r6
 8000784:	3805      	subs	r0, #5
 8000786:	4083      	lsls	r3, r0
 8000788:	4285      	cmp	r5, r0
 800078a:	dc00      	bgt.n	800078e <__aeabi_fadd+0xea>
 800078c:	e075      	b.n	800087a <__aeabi_fadd+0x1d6>
 800078e:	4a94      	ldr	r2, [pc, #592]	; (80009e0 <__aeabi_fadd+0x33c>)
 8000790:	1a2d      	subs	r5, r5, r0
 8000792:	4013      	ands	r3, r2
 8000794:	075a      	lsls	r2, r3, #29
 8000796:	d004      	beq.n	80007a2 <__aeabi_fadd+0xfe>
 8000798:	220f      	movs	r2, #15
 800079a:	401a      	ands	r2, r3
 800079c:	2a04      	cmp	r2, #4
 800079e:	d000      	beq.n	80007a2 <__aeabi_fadd+0xfe>
 80007a0:	3304      	adds	r3, #4
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d53c      	bpl.n	8000820 <__aeabi_fadd+0x17c>
 80007a6:	1c68      	adds	r0, r5, #1
 80007a8:	2dfe      	cmp	r5, #254	; 0xfe
 80007aa:	d02b      	beq.n	8000804 <__aeabi_fadd+0x160>
 80007ac:	019b      	lsls	r3, r3, #6
 80007ae:	0a5e      	lsrs	r6, r3, #9
 80007b0:	b2c0      	uxtb	r0, r0
 80007b2:	05c0      	lsls	r0, r0, #23
 80007b4:	4330      	orrs	r0, r6
 80007b6:	07e4      	lsls	r4, r4, #31
 80007b8:	4320      	orrs	r0, r4
 80007ba:	bcc0      	pop	{r6, r7}
 80007bc:	46b9      	mov	r9, r7
 80007be:	46b0      	mov	r8, r6
 80007c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c2:	20fe      	movs	r0, #254	; 0xfe
 80007c4:	1c6a      	adds	r2, r5, #1
 80007c6:	4210      	tst	r0, r2
 80007c8:	d172      	bne.n	80008b0 <__aeabi_fadd+0x20c>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fadd+0x12c>
 80007ce:	e0ae      	b.n	800092e <__aeabi_fadd+0x28a>
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0x132>
 80007d4:	e0ec      	b.n	80009b0 <__aeabi_fadd+0x30c>
 80007d6:	4663      	mov	r3, ip
 80007d8:	2000      	movs	r0, #0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0e9      	beq.n	80007b2 <__aeabi_fadd+0x10e>
 80007de:	1afb      	subs	r3, r7, r3
 80007e0:	015a      	lsls	r2, r3, #5
 80007e2:	d400      	bmi.n	80007e6 <__aeabi_fadd+0x142>
 80007e4:	e0f3      	b.n	80009ce <__aeabi_fadd+0x32a>
 80007e6:	4663      	mov	r3, ip
 80007e8:	000c      	movs	r4, r1
 80007ea:	1bdb      	subs	r3, r3, r7
 80007ec:	e7d2      	b.n	8000794 <__aeabi_fadd+0xf0>
 80007ee:	4661      	mov	r1, ip
 80007f0:	2900      	cmp	r1, #0
 80007f2:	d05b      	beq.n	80008ac <__aeabi_fadd+0x208>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x158>
 80007fa:	e0a7      	b.n	800094c <__aeabi_fadd+0x2a8>
 80007fc:	2aff      	cmp	r2, #255	; 0xff
 80007fe:	d022      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 8000800:	000a      	movs	r2, r1
 8000802:	e799      	b.n	8000738 <__aeabi_fadd+0x94>
 8000804:	20ff      	movs	r0, #255	; 0xff
 8000806:	2600      	movs	r6, #0
 8000808:	e7d3      	b.n	80007b2 <__aeabi_fadd+0x10e>
 800080a:	21fe      	movs	r1, #254	; 0xfe
 800080c:	1c6a      	adds	r2, r5, #1
 800080e:	4211      	tst	r1, r2
 8000810:	d073      	beq.n	80008fa <__aeabi_fadd+0x256>
 8000812:	2aff      	cmp	r2, #255	; 0xff
 8000814:	d0f6      	beq.n	8000804 <__aeabi_fadd+0x160>
 8000816:	0015      	movs	r5, r2
 8000818:	4467      	add	r7, ip
 800081a:	087b      	lsrs	r3, r7, #1
 800081c:	075a      	lsls	r2, r3, #29
 800081e:	d1bb      	bne.n	8000798 <__aeabi_fadd+0xf4>
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	2dff      	cmp	r5, #255	; 0xff
 8000824:	d00f      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 8000826:	025b      	lsls	r3, r3, #9
 8000828:	0a5e      	lsrs	r6, r3, #9
 800082a:	b2e8      	uxtb	r0, r5
 800082c:	e7c1      	b.n	80007b2 <__aeabi_fadd+0x10e>
 800082e:	4662      	mov	r2, ip
 8000830:	2a00      	cmp	r2, #0
 8000832:	d008      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	03d2      	lsls	r2, r2, #15
 8000838:	4213      	tst	r3, r2
 800083a:	d004      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 800083c:	4640      	mov	r0, r8
 800083e:	4210      	tst	r0, r2
 8000840:	d101      	bne.n	8000846 <__aeabi_fadd+0x1a2>
 8000842:	000c      	movs	r4, r1
 8000844:	4643      	mov	r3, r8
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0dc      	beq.n	8000804 <__aeabi_fadd+0x160>
 800084a:	2680      	movs	r6, #128	; 0x80
 800084c:	03f6      	lsls	r6, r6, #15
 800084e:	431e      	orrs	r6, r3
 8000850:	0276      	lsls	r6, r6, #9
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	0a76      	lsrs	r6, r6, #9
 8000856:	e7ac      	b.n	80007b2 <__aeabi_fadd+0x10e>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d0d6      	beq.n	800080a <__aeabi_fadd+0x166>
 800085c:	1b42      	subs	r2, r0, r5
 800085e:	2d00      	cmp	r5, #0
 8000860:	d05c      	beq.n	800091c <__aeabi_fadd+0x278>
 8000862:	28ff      	cmp	r0, #255	; 0xff
 8000864:	d0ee      	beq.n	8000844 <__aeabi_fadd+0x1a0>
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	04db      	lsls	r3, r3, #19
 800086a:	431f      	orrs	r7, r3
 800086c:	2a1b      	cmp	r2, #27
 800086e:	dc00      	bgt.n	8000872 <__aeabi_fadd+0x1ce>
 8000870:	e082      	b.n	8000978 <__aeabi_fadd+0x2d4>
 8000872:	2301      	movs	r3, #1
 8000874:	464d      	mov	r5, r9
 8000876:	4463      	add	r3, ip
 8000878:	e763      	b.n	8000742 <__aeabi_fadd+0x9e>
 800087a:	2220      	movs	r2, #32
 800087c:	1b40      	subs	r0, r0, r5
 800087e:	3001      	adds	r0, #1
 8000880:	1a12      	subs	r2, r2, r0
 8000882:	0019      	movs	r1, r3
 8000884:	4093      	lsls	r3, r2
 8000886:	40c1      	lsrs	r1, r0
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	4193      	sbcs	r3, r2
 800088c:	2500      	movs	r5, #0
 800088e:	430b      	orrs	r3, r1
 8000890:	e780      	b.n	8000794 <__aeabi_fadd+0xf0>
 8000892:	2320      	movs	r3, #32
 8000894:	4661      	mov	r1, ip
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	4099      	lsls	r1, r3
 800089a:	4662      	mov	r2, ip
 800089c:	000b      	movs	r3, r1
 800089e:	40c2      	lsrs	r2, r0
 80008a0:	1e59      	subs	r1, r3, #1
 80008a2:	418b      	sbcs	r3, r1
 80008a4:	4313      	orrs	r3, r2
 80008a6:	e764      	b.n	8000772 <__aeabi_fadd+0xce>
 80008a8:	000c      	movs	r4, r1
 80008aa:	4643      	mov	r3, r8
 80008ac:	0015      	movs	r5, r2
 80008ae:	e7b8      	b.n	8000822 <__aeabi_fadd+0x17e>
 80008b0:	4663      	mov	r3, ip
 80008b2:	1afe      	subs	r6, r7, r3
 80008b4:	0173      	lsls	r3, r6, #5
 80008b6:	d445      	bmi.n	8000944 <__aeabi_fadd+0x2a0>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fadd+0x21a>
 80008bc:	e75e      	b.n	800077c <__aeabi_fadd+0xd8>
 80008be:	2400      	movs	r4, #0
 80008c0:	2000      	movs	r0, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	e775      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d0bb      	beq.n	8000842 <__aeabi_fadd+0x19e>
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	04db      	lsls	r3, r3, #19
 80008ce:	431f      	orrs	r7, r3
 80008d0:	2a1b      	cmp	r2, #27
 80008d2:	dd47      	ble.n	8000964 <__aeabi_fadd+0x2c0>
 80008d4:	2301      	movs	r3, #1
 80008d6:	4662      	mov	r2, ip
 80008d8:	000c      	movs	r4, r1
 80008da:	464d      	mov	r5, r9
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	e749      	b.n	8000774 <__aeabi_fadd+0xd0>
 80008e0:	0005      	movs	r5, r0
 80008e2:	e79e      	b.n	8000822 <__aeabi_fadd+0x17e>
 80008e4:	4661      	mov	r1, ip
 80008e6:	2320      	movs	r3, #32
 80008e8:	40d1      	lsrs	r1, r2
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	4193      	sbcs	r3, r2
 80008f6:	430b      	orrs	r3, r1
 80008f8:	e722      	b.n	8000740 <__aeabi_fadd+0x9c>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d146      	bne.n	800098c <__aeabi_fadd+0x2e8>
 80008fe:	2f00      	cmp	r7, #0
 8000900:	d062      	beq.n	80009c8 <__aeabi_fadd+0x324>
 8000902:	4663      	mov	r3, ip
 8000904:	2000      	movs	r0, #0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x268>
 800090a:	e752      	b.n	80007b2 <__aeabi_fadd+0x10e>
 800090c:	003b      	movs	r3, r7
 800090e:	4463      	add	r3, ip
 8000910:	015a      	lsls	r2, r3, #5
 8000912:	d583      	bpl.n	800081c <__aeabi_fadd+0x178>
 8000914:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <__aeabi_fadd+0x33c>)
 8000916:	3501      	adds	r5, #1
 8000918:	4013      	ands	r3, r2
 800091a:	e77f      	b.n	800081c <__aeabi_fadd+0x178>
 800091c:	2f00      	cmp	r7, #0
 800091e:	d0c4      	beq.n	80008aa <__aeabi_fadd+0x206>
 8000920:	1e53      	subs	r3, r2, #1
 8000922:	2a01      	cmp	r2, #1
 8000924:	d012      	beq.n	800094c <__aeabi_fadd+0x2a8>
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d08c      	beq.n	8000844 <__aeabi_fadd+0x1a0>
 800092a:	001a      	movs	r2, r3
 800092c:	e79e      	b.n	800086c <__aeabi_fadd+0x1c8>
 800092e:	2f00      	cmp	r7, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x290>
 8000932:	e77c      	b.n	800082e <__aeabi_fadd+0x18a>
 8000934:	4663      	mov	r3, ip
 8000936:	2b00      	cmp	r3, #0
 8000938:	d183      	bne.n	8000842 <__aeabi_fadd+0x19e>
 800093a:	2680      	movs	r6, #128	; 0x80
 800093c:	2400      	movs	r4, #0
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	03f6      	lsls	r6, r6, #15
 8000942:	e736      	b.n	80007b2 <__aeabi_fadd+0x10e>
 8000944:	4663      	mov	r3, ip
 8000946:	000c      	movs	r4, r1
 8000948:	1bde      	subs	r6, r3, r7
 800094a:	e717      	b.n	800077c <__aeabi_fadd+0xd8>
 800094c:	003b      	movs	r3, r7
 800094e:	4463      	add	r3, ip
 8000950:	2501      	movs	r5, #1
 8000952:	015a      	lsls	r2, r3, #5
 8000954:	d400      	bmi.n	8000958 <__aeabi_fadd+0x2b4>
 8000956:	e761      	b.n	800081c <__aeabi_fadd+0x178>
 8000958:	2502      	movs	r5, #2
 800095a:	e6f7      	b.n	800074c <__aeabi_fadd+0xa8>
 800095c:	4663      	mov	r3, ip
 800095e:	2501      	movs	r5, #1
 8000960:	1afb      	subs	r3, r7, r3
 8000962:	e707      	b.n	8000774 <__aeabi_fadd+0xd0>
 8000964:	2320      	movs	r3, #32
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	0038      	movs	r0, r7
 800096a:	409f      	lsls	r7, r3
 800096c:	003b      	movs	r3, r7
 800096e:	40d0      	lsrs	r0, r2
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	4193      	sbcs	r3, r2
 8000974:	4303      	orrs	r3, r0
 8000976:	e7ae      	b.n	80008d6 <__aeabi_fadd+0x232>
 8000978:	2320      	movs	r3, #32
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	0039      	movs	r1, r7
 800097e:	409f      	lsls	r7, r3
 8000980:	003b      	movs	r3, r7
 8000982:	40d1      	lsrs	r1, r2
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	4193      	sbcs	r3, r2
 8000988:	430b      	orrs	r3, r1
 800098a:	e773      	b.n	8000874 <__aeabi_fadd+0x1d0>
 800098c:	2f00      	cmp	r7, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fadd+0x2ee>
 8000990:	e758      	b.n	8000844 <__aeabi_fadd+0x1a0>
 8000992:	4662      	mov	r2, ip
 8000994:	2a00      	cmp	r2, #0
 8000996:	d100      	bne.n	800099a <__aeabi_fadd+0x2f6>
 8000998:	e755      	b.n	8000846 <__aeabi_fadd+0x1a2>
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	03d2      	lsls	r2, r2, #15
 800099e:	4213      	tst	r3, r2
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x300>
 80009a2:	e750      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80009a4:	4641      	mov	r1, r8
 80009a6:	4211      	tst	r1, r2
 80009a8:	d000      	beq.n	80009ac <__aeabi_fadd+0x308>
 80009aa:	e74c      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80009ac:	4643      	mov	r3, r8
 80009ae:	e74a      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80009b0:	4663      	mov	r3, ip
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d083      	beq.n	80008be <__aeabi_fadd+0x21a>
 80009b6:	000c      	movs	r4, r1
 80009b8:	4646      	mov	r6, r8
 80009ba:	2000      	movs	r0, #0
 80009bc:	e6f9      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80009be:	4663      	mov	r3, ip
 80009c0:	000c      	movs	r4, r1
 80009c2:	1bdb      	subs	r3, r3, r7
 80009c4:	3501      	adds	r5, #1
 80009c6:	e6d5      	b.n	8000774 <__aeabi_fadd+0xd0>
 80009c8:	4646      	mov	r6, r8
 80009ca:	2000      	movs	r0, #0
 80009cc:	e6f1      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fadd+0x330>
 80009d2:	e723      	b.n	800081c <__aeabi_fadd+0x178>
 80009d4:	2400      	movs	r4, #0
 80009d6:	2600      	movs	r6, #0
 80009d8:	e6eb      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	7dffffff 	.word	0x7dffffff
 80009e0:	fbffffff 	.word	0xfbffffff

080009e4 <__aeabi_fmul>:
 80009e4:	0243      	lsls	r3, r0, #9
 80009e6:	0a5b      	lsrs	r3, r3, #9
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	464f      	mov	r7, r9
 80009ec:	4646      	mov	r6, r8
 80009ee:	4699      	mov	r9, r3
 80009f0:	46d6      	mov	lr, sl
 80009f2:	0fc3      	lsrs	r3, r0, #31
 80009f4:	0045      	lsls	r5, r0, #1
 80009f6:	4698      	mov	r8, r3
 80009f8:	b5c0      	push	{r6, r7, lr}
 80009fa:	464b      	mov	r3, r9
 80009fc:	1c0f      	adds	r7, r1, #0
 80009fe:	0e2d      	lsrs	r5, r5, #24
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fmul+0x20>
 8000a02:	e0cb      	b.n	8000b9c <__aeabi_fmul+0x1b8>
 8000a04:	2dff      	cmp	r5, #255	; 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fmul+0x26>
 8000a08:	e0cf      	b.n	8000baa <__aeabi_fmul+0x1c6>
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	431a      	orrs	r2, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	4691      	mov	r9, r2
 8000a16:	2600      	movs	r6, #0
 8000a18:	469a      	mov	sl, r3
 8000a1a:	3d7f      	subs	r5, #127	; 0x7f
 8000a1c:	027c      	lsls	r4, r7, #9
 8000a1e:	007b      	lsls	r3, r7, #1
 8000a20:	0a64      	lsrs	r4, r4, #9
 8000a22:	0e1b      	lsrs	r3, r3, #24
 8000a24:	0fff      	lsrs	r7, r7, #31
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fmul+0x48>
 8000a2a:	e0a9      	b.n	8000b80 <__aeabi_fmul+0x19c>
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	d011      	beq.n	8000a54 <__aeabi_fmul+0x70>
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	00e4      	lsls	r4, r4, #3
 8000a34:	04d2      	lsls	r2, r2, #19
 8000a36:	4314      	orrs	r4, r2
 8000a38:	4642      	mov	r2, r8
 8000a3a:	3b7f      	subs	r3, #127	; 0x7f
 8000a3c:	195b      	adds	r3, r3, r5
 8000a3e:	407a      	eors	r2, r7
 8000a40:	2000      	movs	r0, #0
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	1c5d      	adds	r5, r3, #1
 8000a46:	2e0a      	cmp	r6, #10
 8000a48:	dd13      	ble.n	8000a72 <__aeabi_fmul+0x8e>
 8000a4a:	003a      	movs	r2, r7
 8000a4c:	2e0b      	cmp	r6, #11
 8000a4e:	d047      	beq.n	8000ae0 <__aeabi_fmul+0xfc>
 8000a50:	4647      	mov	r7, r8
 8000a52:	e03f      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000a54:	002b      	movs	r3, r5
 8000a56:	33ff      	adds	r3, #255	; 0xff
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d11e      	bne.n	8000a9a <__aeabi_fmul+0xb6>
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4316      	orrs	r6, r2
 8000a60:	4642      	mov	r2, r8
 8000a62:	3501      	adds	r5, #1
 8000a64:	407a      	eors	r2, r7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	35ff      	adds	r5, #255	; 0xff
 8000a6a:	2e0a      	cmp	r6, #10
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x8c>
 8000a6e:	e0e4      	b.n	8000c3a <__aeabi_fmul+0x256>
 8000a70:	2002      	movs	r0, #2
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	dc1c      	bgt.n	8000ab0 <__aeabi_fmul+0xcc>
 8000a76:	3e01      	subs	r6, #1
 8000a78:	2e01      	cmp	r6, #1
 8000a7a:	d842      	bhi.n	8000b02 <__aeabi_fmul+0x11e>
 8000a7c:	2802      	cmp	r0, #2
 8000a7e:	d03d      	beq.n	8000afc <__aeabi_fmul+0x118>
 8000a80:	2801      	cmp	r0, #1
 8000a82:	d166      	bne.n	8000b52 <__aeabi_fmul+0x16e>
 8000a84:	2000      	movs	r0, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	05c0      	lsls	r0, r0, #23
 8000a8a:	4308      	orrs	r0, r1
 8000a8c:	07d2      	lsls	r2, r2, #31
 8000a8e:	4310      	orrs	r0, r2
 8000a90:	bce0      	pop	{r5, r6, r7}
 8000a92:	46ba      	mov	sl, r7
 8000a94:	46b1      	mov	r9, r6
 8000a96:	46a8      	mov	r8, r5
 8000a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	4316      	orrs	r6, r2
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	3501      	adds	r5, #1
 8000aa2:	407a      	eors	r2, r7
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	35ff      	adds	r5, #255	; 0xff
 8000aa8:	2e0a      	cmp	r6, #10
 8000aaa:	dd00      	ble.n	8000aae <__aeabi_fmul+0xca>
 8000aac:	e0e4      	b.n	8000c78 <__aeabi_fmul+0x294>
 8000aae:	2003      	movs	r0, #3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	26a6      	movs	r6, #166	; 0xa6
 8000ab6:	00f6      	lsls	r6, r6, #3
 8000ab8:	4231      	tst	r1, r6
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_fmul+0xee>
 8000abc:	2690      	movs	r6, #144	; 0x90
 8000abe:	00b6      	lsls	r6, r6, #2
 8000ac0:	4231      	tst	r1, r6
 8000ac2:	d116      	bne.n	8000af2 <__aeabi_fmul+0x10e>
 8000ac4:	3eb9      	subs	r6, #185	; 0xb9
 8000ac6:	3eff      	subs	r6, #255	; 0xff
 8000ac8:	420e      	tst	r6, r1
 8000aca:	d01a      	beq.n	8000b02 <__aeabi_fmul+0x11e>
 8000acc:	46a1      	mov	r9, r4
 8000ace:	4682      	mov	sl, r0
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000ad2:	0017      	movs	r7, r2
 8000ad4:	4653      	mov	r3, sl
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00f      	beq.n	8000afc <__aeabi_fmul+0x118>
 8000adc:	464c      	mov	r4, r9
 8000ade:	4650      	mov	r0, sl
 8000ae0:	2803      	cmp	r0, #3
 8000ae2:	d1cd      	bne.n	8000a80 <__aeabi_fmul+0x9c>
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	03c9      	lsls	r1, r1, #15
 8000ae8:	4321      	orrs	r1, r4
 8000aea:	0249      	lsls	r1, r1, #9
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	0a49      	lsrs	r1, r1, #9
 8000af0:	e7ca      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	2200      	movs	r2, #0
 8000af6:	20ff      	movs	r0, #255	; 0xff
 8000af8:	03c9      	lsls	r1, r1, #15
 8000afa:	e7c5      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000afc:	20ff      	movs	r0, #255	; 0xff
 8000afe:	2100      	movs	r1, #0
 8000b00:	e7c2      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	4649      	mov	r1, r9
 8000b06:	0424      	lsls	r4, r4, #16
 8000b08:	0c24      	lsrs	r4, r4, #16
 8000b0a:	0027      	movs	r7, r4
 8000b0c:	0c0e      	lsrs	r6, r1, #16
 8000b0e:	0409      	lsls	r1, r1, #16
 8000b10:	0c09      	lsrs	r1, r1, #16
 8000b12:	4374      	muls	r4, r6
 8000b14:	434f      	muls	r7, r1
 8000b16:	4346      	muls	r6, r0
 8000b18:	4348      	muls	r0, r1
 8000b1a:	0c39      	lsrs	r1, r7, #16
 8000b1c:	1900      	adds	r0, r0, r4
 8000b1e:	1809      	adds	r1, r1, r0
 8000b20:	428c      	cmp	r4, r1
 8000b22:	d903      	bls.n	8000b2c <__aeabi_fmul+0x148>
 8000b24:	2080      	movs	r0, #128	; 0x80
 8000b26:	0240      	lsls	r0, r0, #9
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4466      	add	r6, ip
 8000b2c:	043f      	lsls	r7, r7, #16
 8000b2e:	0408      	lsls	r0, r1, #16
 8000b30:	0c3f      	lsrs	r7, r7, #16
 8000b32:	19c0      	adds	r0, r0, r7
 8000b34:	0184      	lsls	r4, r0, #6
 8000b36:	1e67      	subs	r7, r4, #1
 8000b38:	41bc      	sbcs	r4, r7
 8000b3a:	0c09      	lsrs	r1, r1, #16
 8000b3c:	0e80      	lsrs	r0, r0, #26
 8000b3e:	1989      	adds	r1, r1, r6
 8000b40:	4304      	orrs	r4, r0
 8000b42:	0189      	lsls	r1, r1, #6
 8000b44:	430c      	orrs	r4, r1
 8000b46:	0109      	lsls	r1, r1, #4
 8000b48:	d571      	bpl.n	8000c2e <__aeabi_fmul+0x24a>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	0861      	lsrs	r1, r4, #1
 8000b4e:	401c      	ands	r4, r3
 8000b50:	430c      	orrs	r4, r1
 8000b52:	002b      	movs	r3, r5
 8000b54:	337f      	adds	r3, #127	; 0x7f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dd51      	ble.n	8000bfe <__aeabi_fmul+0x21a>
 8000b5a:	0761      	lsls	r1, r4, #29
 8000b5c:	d004      	beq.n	8000b68 <__aeabi_fmul+0x184>
 8000b5e:	210f      	movs	r1, #15
 8000b60:	4021      	ands	r1, r4
 8000b62:	2904      	cmp	r1, #4
 8000b64:	d000      	beq.n	8000b68 <__aeabi_fmul+0x184>
 8000b66:	3404      	adds	r4, #4
 8000b68:	0121      	lsls	r1, r4, #4
 8000b6a:	d503      	bpl.n	8000b74 <__aeabi_fmul+0x190>
 8000b6c:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <__aeabi_fmul+0x298>)
 8000b6e:	401c      	ands	r4, r3
 8000b70:	002b      	movs	r3, r5
 8000b72:	3380      	adds	r3, #128	; 0x80
 8000b74:	2bfe      	cmp	r3, #254	; 0xfe
 8000b76:	dcc1      	bgt.n	8000afc <__aeabi_fmul+0x118>
 8000b78:	01a1      	lsls	r1, r4, #6
 8000b7a:	0a49      	lsrs	r1, r1, #9
 8000b7c:	b2d8      	uxtb	r0, r3
 8000b7e:	e783      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d12c      	bne.n	8000bde <__aeabi_fmul+0x1fa>
 8000b84:	2301      	movs	r3, #1
 8000b86:	4642      	mov	r2, r8
 8000b88:	431e      	orrs	r6, r3
 8000b8a:	002b      	movs	r3, r5
 8000b8c:	407a      	eors	r2, r7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	1c5d      	adds	r5, r3, #1
 8000b94:	2e0a      	cmp	r6, #10
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_fmul+0x1b6>
 8000b98:	e757      	b.n	8000a4a <__aeabi_fmul+0x66>
 8000b9a:	e76a      	b.n	8000a72 <__aeabi_fmul+0x8e>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d110      	bne.n	8000bc2 <__aeabi_fmul+0x1de>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2604      	movs	r6, #4
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	e738      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <__aeabi_fmul+0x1d4>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	2608      	movs	r6, #8
 8000bb2:	25ff      	movs	r5, #255	; 0xff
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e731      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	260c      	movs	r6, #12
 8000bbc:	25ff      	movs	r5, #255	; 0xff
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	e72c      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	f001 f950 	bl	8001e68 <__clzsi2>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	1f43      	subs	r3, r0, #5
 8000bcc:	2576      	movs	r5, #118	; 0x76
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	426d      	negs	r5, r5
 8000bd4:	4691      	mov	r9, r2
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	1a2d      	subs	r5, r5, r0
 8000bdc:	e71e      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bde:	0020      	movs	r0, r4
 8000be0:	f001 f942 	bl	8001e68 <__clzsi2>
 8000be4:	4642      	mov	r2, r8
 8000be6:	1f43      	subs	r3, r0, #5
 8000be8:	409c      	lsls	r4, r3
 8000bea:	1a2b      	subs	r3, r5, r0
 8000bec:	3b76      	subs	r3, #118	; 0x76
 8000bee:	407a      	eors	r2, r7
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	1c5d      	adds	r5, r3, #1
 8000bf6:	2e0a      	cmp	r6, #10
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_fmul+0x218>
 8000bfa:	e726      	b.n	8000a4a <__aeabi_fmul+0x66>
 8000bfc:	e739      	b.n	8000a72 <__aeabi_fmul+0x8e>
 8000bfe:	2101      	movs	r1, #1
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x224>
 8000c06:	e73d      	b.n	8000a84 <__aeabi_fmul+0xa0>
 8000c08:	359e      	adds	r5, #158	; 0x9e
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	40ac      	lsls	r4, r5
 8000c0e:	40d9      	lsrs	r1, r3
 8000c10:	1e63      	subs	r3, r4, #1
 8000c12:	419c      	sbcs	r4, r3
 8000c14:	4321      	orrs	r1, r4
 8000c16:	074b      	lsls	r3, r1, #29
 8000c18:	d004      	beq.n	8000c24 <__aeabi_fmul+0x240>
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fmul+0x240>
 8000c22:	3104      	adds	r1, #4
 8000c24:	014b      	lsls	r3, r1, #5
 8000c26:	d504      	bpl.n	8000c32 <__aeabi_fmul+0x24e>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	e72c      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c2e:	001d      	movs	r5, r3
 8000c30:	e78f      	b.n	8000b52 <__aeabi_fmul+0x16e>
 8000c32:	0189      	lsls	r1, r1, #6
 8000c34:	2000      	movs	r0, #0
 8000c36:	0a49      	lsrs	r1, r1, #9
 8000c38:	e726      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	2e0f      	cmp	r6, #15
 8000c3e:	d10c      	bne.n	8000c5a <__aeabi_fmul+0x276>
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	464b      	mov	r3, r9
 8000c44:	03c9      	lsls	r1, r1, #15
 8000c46:	420b      	tst	r3, r1
 8000c48:	d00d      	beq.n	8000c66 <__aeabi_fmul+0x282>
 8000c4a:	420c      	tst	r4, r1
 8000c4c:	d10b      	bne.n	8000c66 <__aeabi_fmul+0x282>
 8000c4e:	4321      	orrs	r1, r4
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	003a      	movs	r2, r7
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	0a49      	lsrs	r1, r1, #9
 8000c58:	e716      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c5a:	2e0b      	cmp	r6, #11
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fmul+0x27c>
 8000c5e:	e6f7      	b.n	8000a50 <__aeabi_fmul+0x6c>
 8000c60:	46a1      	mov	r9, r4
 8000c62:	469a      	mov	sl, r3
 8000c64:	e736      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	464b      	mov	r3, r9
 8000c6a:	03c9      	lsls	r1, r1, #15
 8000c6c:	4319      	orrs	r1, r3
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	4642      	mov	r2, r8
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	0a49      	lsrs	r1, r1, #9
 8000c76:	e707      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e7df      	b.n	8000c3c <__aeabi_fmul+0x258>
 8000c7c:	f7ffffff 	.word	0xf7ffffff

08000c80 <__aeabi_fsub>:
 8000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c82:	46c6      	mov	lr, r8
 8000c84:	0243      	lsls	r3, r0, #9
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	0045      	lsls	r5, r0, #1
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	0fc4      	lsrs	r4, r0, #31
 8000c8e:	0248      	lsls	r0, r1, #9
 8000c90:	004f      	lsls	r7, r1, #1
 8000c92:	4694      	mov	ip, r2
 8000c94:	0a42      	lsrs	r2, r0, #9
 8000c96:	001e      	movs	r6, r3
 8000c98:	4690      	mov	r8, r2
 8000c9a:	b500      	push	{lr}
 8000c9c:	0e2d      	lsrs	r5, r5, #24
 8000c9e:	0e3f      	lsrs	r7, r7, #24
 8000ca0:	0fc9      	lsrs	r1, r1, #31
 8000ca2:	0980      	lsrs	r0, r0, #6
 8000ca4:	2fff      	cmp	r7, #255	; 0xff
 8000ca6:	d059      	beq.n	8000d5c <__aeabi_fsub+0xdc>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4051      	eors	r1, r2
 8000cac:	428c      	cmp	r4, r1
 8000cae:	d039      	beq.n	8000d24 <__aeabi_fsub+0xa4>
 8000cb0:	1bea      	subs	r2, r5, r7
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	dd58      	ble.n	8000d68 <__aeabi_fsub+0xe8>
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d068      	beq.n	8000d8c <__aeabi_fsub+0x10c>
 8000cba:	2dff      	cmp	r5, #255	; 0xff
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x40>
 8000cbe:	e0d1      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	04db      	lsls	r3, r3, #19
 8000cc4:	4318      	orrs	r0, r3
 8000cc6:	2a1b      	cmp	r2, #27
 8000cc8:	dc00      	bgt.n	8000ccc <__aeabi_fsub+0x4c>
 8000cca:	e0e3      	b.n	8000e94 <__aeabi_fsub+0x214>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4662      	mov	r2, ip
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	015a      	lsls	r2, r3, #5
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fsub+0x58>
 8000cd6:	e0ac      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	099e      	lsrs	r6, r3, #6
 8000cdc:	0030      	movs	r0, r6
 8000cde:	f001 f8c3 	bl	8001e68 <__clzsi2>
 8000ce2:	0033      	movs	r3, r6
 8000ce4:	3805      	subs	r0, #5
 8000ce6:	4083      	lsls	r3, r0
 8000ce8:	4285      	cmp	r5, r0
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_fsub+0x6e>
 8000cec:	e0c6      	b.n	8000e7c <__aeabi_fsub+0x1fc>
 8000cee:	4ab2      	ldr	r2, [pc, #712]	; (8000fb8 <__aeabi_fsub+0x338>)
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	075a      	lsls	r2, r3, #29
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_fsub+0x82>
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	2a04      	cmp	r2, #4
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_fsub+0x82>
 8000d00:	3304      	adds	r3, #4
 8000d02:	015a      	lsls	r2, r3, #5
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_fsub+0x88>
 8000d06:	e097      	b.n	8000e38 <__aeabi_fsub+0x1b8>
 8000d08:	1c6a      	adds	r2, r5, #1
 8000d0a:	2dfe      	cmp	r5, #254	; 0xfe
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x90>
 8000d0e:	e084      	b.n	8000e1a <__aeabi_fsub+0x19a>
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	0a5e      	lsrs	r6, r3, #9
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	05d0      	lsls	r0, r2, #23
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	07e4      	lsls	r4, r4, #31
 8000d1c:	4320      	orrs	r0, r4
 8000d1e:	bc80      	pop	{r7}
 8000d20:	46b8      	mov	r8, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	1bea      	subs	r2, r5, r7
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	dd41      	ble.n	8000dae <__aeabi_fsub+0x12e>
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d06b      	beq.n	8000e06 <__aeabi_fsub+0x186>
 8000d2e:	2dff      	cmp	r5, #255	; 0xff
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0xb4>
 8000d32:	e097      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	04db      	lsls	r3, r3, #19
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2a1b      	cmp	r2, #27
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_fsub+0xc0>
 8000d3e:	e0cc      	b.n	8000eda <__aeabi_fsub+0x25a>
 8000d40:	2301      	movs	r3, #1
 8000d42:	4463      	add	r3, ip
 8000d44:	015a      	lsls	r2, r3, #5
 8000d46:	d574      	bpl.n	8000e32 <__aeabi_fsub+0x1b2>
 8000d48:	3501      	adds	r5, #1
 8000d4a:	2dff      	cmp	r5, #255	; 0xff
 8000d4c:	d065      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000d4e:	2201      	movs	r2, #1
 8000d50:	499a      	ldr	r1, [pc, #616]	; (8000fbc <__aeabi_fsub+0x33c>)
 8000d52:	401a      	ands	r2, r3
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	400b      	ands	r3, r1
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e7cb      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d01f      	beq.n	8000da0 <__aeabi_fsub+0x120>
 8000d60:	428c      	cmp	r4, r1
 8000d62:	d022      	beq.n	8000daa <__aeabi_fsub+0x12a>
 8000d64:	002a      	movs	r2, r5
 8000d66:	3aff      	subs	r2, #255	; 0xff
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d035      	beq.n	8000dd8 <__aeabi_fsub+0x158>
 8000d6c:	1b7a      	subs	r2, r7, r5
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fsub+0xf4>
 8000d72:	e099      	b.n	8000ea8 <__aeabi_fsub+0x228>
 8000d74:	4663      	mov	r3, ip
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0xfc>
 8000d7a:	e0dd      	b.n	8000f38 <__aeabi_fsub+0x2b8>
 8000d7c:	1e53      	subs	r3, r2, #1
 8000d7e:	2a01      	cmp	r2, #1
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x104>
 8000d82:	e105      	b.n	8000f90 <__aeabi_fsub+0x310>
 8000d84:	2aff      	cmp	r2, #255	; 0xff
 8000d86:	d06b      	beq.n	8000e60 <__aeabi_fsub+0x1e0>
 8000d88:	001a      	movs	r2, r3
 8000d8a:	e094      	b.n	8000eb6 <__aeabi_fsub+0x236>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d073      	beq.n	8000e78 <__aeabi_fsub+0x1f8>
 8000d90:	1e51      	subs	r1, r2, #1
 8000d92:	2a01      	cmp	r2, #1
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x118>
 8000d96:	e0df      	b.n	8000f58 <__aeabi_fsub+0x2d8>
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d063      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	e792      	b.n	8000cc6 <__aeabi_fsub+0x46>
 8000da0:	2201      	movs	r2, #1
 8000da2:	4051      	eors	r1, r2
 8000da4:	42a1      	cmp	r1, r4
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0x12a>
 8000da8:	e782      	b.n	8000cb0 <__aeabi_fsub+0x30>
 8000daa:	002a      	movs	r2, r5
 8000dac:	3aff      	subs	r2, #255	; 0xff
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d036      	beq.n	8000e20 <__aeabi_fsub+0x1a0>
 8000db2:	1b7a      	subs	r2, r7, r5
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x13a>
 8000db8:	e0aa      	b.n	8000f10 <__aeabi_fsub+0x290>
 8000dba:	2fff      	cmp	r7, #255	; 0xff
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x140>
 8000dbe:	e0da      	b.n	8000f76 <__aeabi_fsub+0x2f6>
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	04db      	lsls	r3, r3, #19
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	468c      	mov	ip, r1
 8000dca:	2a1b      	cmp	r2, #27
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_fsub+0x150>
 8000dce:	e0d4      	b.n	8000f7a <__aeabi_fsub+0x2fa>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	003d      	movs	r5, r7
 8000dd4:	181b      	adds	r3, r3, r0
 8000dd6:	e7b5      	b.n	8000d44 <__aeabi_fsub+0xc4>
 8000dd8:	27fe      	movs	r7, #254	; 0xfe
 8000dda:	1c6a      	adds	r2, r5, #1
 8000ddc:	4217      	tst	r7, r2
 8000dde:	d171      	bne.n	8000ec4 <__aeabi_fsub+0x244>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d000      	beq.n	8000de6 <__aeabi_fsub+0x166>
 8000de4:	e09e      	b.n	8000f24 <__aeabi_fsub+0x2a4>
 8000de6:	4663      	mov	r3, ip
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x16e>
 8000dec:	e0d5      	b.n	8000f9a <__aeabi_fsub+0x31a>
 8000dee:	2200      	movs	r2, #0
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fsub+0x176>
 8000df4:	e78f      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000df6:	1a1b      	subs	r3, r3, r0
 8000df8:	015e      	lsls	r6, r3, #5
 8000dfa:	d400      	bmi.n	8000dfe <__aeabi_fsub+0x17e>
 8000dfc:	e0d6      	b.n	8000fac <__aeabi_fsub+0x32c>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	000c      	movs	r4, r1
 8000e02:	1ac3      	subs	r3, r0, r3
 8000e04:	e776      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d036      	beq.n	8000e78 <__aeabi_fsub+0x1f8>
 8000e0a:	1e51      	subs	r1, r2, #1
 8000e0c:	2a01      	cmp	r2, #1
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_fsub+0x192>
 8000e10:	e09a      	b.n	8000f48 <__aeabi_fsub+0x2c8>
 8000e12:	2aff      	cmp	r2, #255	; 0xff
 8000e14:	d026      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e16:	000a      	movs	r2, r1
 8000e18:	e78f      	b.n	8000d3a <__aeabi_fsub+0xba>
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e77a      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e20:	27fe      	movs	r7, #254	; 0xfe
 8000e22:	1c6a      	adds	r2, r5, #1
 8000e24:	4217      	tst	r7, r2
 8000e26:	d062      	beq.n	8000eee <__aeabi_fsub+0x26e>
 8000e28:	2aff      	cmp	r2, #255	; 0xff
 8000e2a:	d0f6      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	4460      	add	r0, ip
 8000e30:	0843      	lsrs	r3, r0, #1
 8000e32:	075a      	lsls	r2, r3, #29
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fsub+0x1b8>
 8000e36:	e75f      	b.n	8000cf8 <__aeabi_fsub+0x78>
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	2dff      	cmp	r5, #255	; 0xff
 8000e3c:	d012      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	0a5e      	lsrs	r6, r3, #9
 8000e42:	b2ea      	uxtb	r2, r5
 8000e44:	e767      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e46:	4662      	mov	r2, ip
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x1ce>
 8000e4c:	e093      	b.n	8000f76 <__aeabi_fsub+0x2f6>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d008      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	03d2      	lsls	r2, r2, #15
 8000e56:	4213      	tst	r3, r2
 8000e58:	d004      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e5a:	4640      	mov	r0, r8
 8000e5c:	4210      	tst	r0, r2
 8000e5e:	d101      	bne.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e60:	000c      	movs	r4, r1
 8000e62:	4643      	mov	r3, r8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0d8      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000e68:	2680      	movs	r6, #128	; 0x80
 8000e6a:	03f6      	lsls	r6, r6, #15
 8000e6c:	431e      	orrs	r6, r3
 8000e6e:	0276      	lsls	r6, r6, #9
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	0a76      	lsrs	r6, r6, #9
 8000e74:	e74f      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e76:	4643      	mov	r3, r8
 8000e78:	0015      	movs	r5, r2
 8000e7a:	e7de      	b.n	8000e3a <__aeabi_fsub+0x1ba>
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	3001      	adds	r0, #1
 8000e82:	1a12      	subs	r2, r2, r0
 8000e84:	0019      	movs	r1, r3
 8000e86:	4093      	lsls	r3, r2
 8000e88:	40c1      	lsrs	r1, r0
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	4193      	sbcs	r3, r2
 8000e8e:	2500      	movs	r5, #0
 8000e90:	430b      	orrs	r3, r1
 8000e92:	e72f      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000e94:	2320      	movs	r3, #32
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	0001      	movs	r1, r0
 8000e9a:	4098      	lsls	r0, r3
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	40d1      	lsrs	r1, r2
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	4193      	sbcs	r3, r2
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	e712      	b.n	8000cce <__aeabi_fsub+0x4e>
 8000ea8:	2fff      	cmp	r7, #255	; 0xff
 8000eaa:	d0d9      	beq.n	8000e60 <__aeabi_fsub+0x1e0>
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	4664      	mov	r4, ip
 8000eb0:	04db      	lsls	r3, r3, #19
 8000eb2:	431c      	orrs	r4, r3
 8000eb4:	46a4      	mov	ip, r4
 8000eb6:	2a1b      	cmp	r2, #27
 8000eb8:	dd52      	ble.n	8000f60 <__aeabi_fsub+0x2e0>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	003d      	movs	r5, r7
 8000ec0:	1ac3      	subs	r3, r0, r3
 8000ec2:	e706      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	1a1e      	subs	r6, r3, r0
 8000ec8:	0173      	lsls	r3, r6, #5
 8000eca:	d439      	bmi.n	8000f40 <__aeabi_fsub+0x2c0>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_fsub+0x252>
 8000ed0:	e704      	b.n	8000cdc <__aeabi_fsub+0x5c>
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	e71d      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000eda:	2320      	movs	r3, #32
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	0001      	movs	r1, r0
 8000ee0:	4098      	lsls	r0, r3
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	40d1      	lsrs	r1, r2
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	4193      	sbcs	r3, r2
 8000eea:	430b      	orrs	r3, r1
 8000eec:	e729      	b.n	8000d42 <__aeabi_fsub+0xc2>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d1a9      	bne.n	8000e46 <__aeabi_fsub+0x1c6>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d056      	beq.n	8000fa6 <__aeabi_fsub+0x326>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x280>
 8000efe:	e70a      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000f00:	0003      	movs	r3, r0
 8000f02:	4463      	add	r3, ip
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	d594      	bpl.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <__aeabi_fsub+0x338>)
 8000f0a:	3501      	adds	r5, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	e790      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f10:	4663      	mov	r3, ip
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0af      	beq.n	8000e76 <__aeabi_fsub+0x1f6>
 8000f16:	1e53      	subs	r3, r2, #1
 8000f18:	2a01      	cmp	r2, #1
 8000f1a:	d015      	beq.n	8000f48 <__aeabi_fsub+0x2c8>
 8000f1c:	2aff      	cmp	r2, #255	; 0xff
 8000f1e:	d02a      	beq.n	8000f76 <__aeabi_fsub+0x2f6>
 8000f20:	001a      	movs	r2, r3
 8000f22:	e752      	b.n	8000dca <__aeabi_fsub+0x14a>
 8000f24:	4662      	mov	r2, ip
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d191      	bne.n	8000e4e <__aeabi_fsub+0x1ce>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d198      	bne.n	8000e60 <__aeabi_fsub+0x1e0>
 8000f2e:	2680      	movs	r6, #128	; 0x80
 8000f30:	2400      	movs	r4, #0
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	03f6      	lsls	r6, r6, #15
 8000f36:	e6ee      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000f38:	000c      	movs	r4, r1
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	0015      	movs	r5, r2
 8000f3e:	e77c      	b.n	8000e3a <__aeabi_fsub+0x1ba>
 8000f40:	4663      	mov	r3, ip
 8000f42:	000c      	movs	r4, r1
 8000f44:	1ac6      	subs	r6, r0, r3
 8000f46:	e6c9      	b.n	8000cdc <__aeabi_fsub+0x5c>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4463      	add	r3, ip
 8000f4c:	2501      	movs	r5, #1
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_fsub+0x2d4>
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f54:	2502      	movs	r5, #2
 8000f56:	e6fa      	b.n	8000d4e <__aeabi_fsub+0xce>
 8000f58:	4663      	mov	r3, ip
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	e6b8      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000f60:	4664      	mov	r4, ip
 8000f62:	2320      	movs	r3, #32
 8000f64:	40d4      	lsrs	r4, r2
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	4193      	sbcs	r3, r2
 8000f72:	4323      	orrs	r3, r4
 8000f74:	e7a2      	b.n	8000ebc <__aeabi_fsub+0x23c>
 8000f76:	4643      	mov	r3, r8
 8000f78:	e774      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000f7a:	4661      	mov	r1, ip
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	40d1      	lsrs	r1, r2
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	4662      	mov	r2, ip
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	4193      	sbcs	r3, r2
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	e720      	b.n	8000dd2 <__aeabi_fsub+0x152>
 8000f90:	4663      	mov	r3, ip
 8000f92:	000c      	movs	r4, r1
 8000f94:	2501      	movs	r5, #1
 8000f96:	1ac3      	subs	r3, r0, r3
 8000f98:	e69b      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d099      	beq.n	8000ed2 <__aeabi_fsub+0x252>
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	4646      	mov	r6, r8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	e6b7      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fa6:	4646      	mov	r6, r8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	e6b4      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x332>
 8000fb0:	e73f      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2600      	movs	r6, #0
 8000fb6:	e6ae      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fb8:	fbffffff 	.word	0xfbffffff
 8000fbc:	7dffffff 	.word	0x7dffffff

08000fc0 <__aeabi_f2iz>:
 8000fc0:	0241      	lsls	r1, r0, #9
 8000fc2:	0042      	lsls	r2, r0, #1
 8000fc4:	0fc3      	lsrs	r3, r0, #31
 8000fc6:	0a49      	lsrs	r1, r1, #9
 8000fc8:	2000      	movs	r0, #0
 8000fca:	0e12      	lsrs	r2, r2, #24
 8000fcc:	2a7e      	cmp	r2, #126	; 0x7e
 8000fce:	dd03      	ble.n	8000fd8 <__aeabi_f2iz+0x18>
 8000fd0:	2a9d      	cmp	r2, #157	; 0x9d
 8000fd2:	dd02      	ble.n	8000fda <__aeabi_f2iz+0x1a>
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <__aeabi_f2iz+0x3c>)
 8000fd6:	1898      	adds	r0, r3, r2
 8000fd8:	4770      	bx	lr
 8000fda:	2080      	movs	r0, #128	; 0x80
 8000fdc:	0400      	lsls	r0, r0, #16
 8000fde:	4301      	orrs	r1, r0
 8000fe0:	2a95      	cmp	r2, #149	; 0x95
 8000fe2:	dc07      	bgt.n	8000ff4 <__aeabi_f2iz+0x34>
 8000fe4:	2096      	movs	r0, #150	; 0x96
 8000fe6:	1a82      	subs	r2, r0, r2
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	4248      	negs	r0, r1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f3      	bne.n	8000fd8 <__aeabi_f2iz+0x18>
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	e7f1      	b.n	8000fd8 <__aeabi_f2iz+0x18>
 8000ff4:	3a96      	subs	r2, #150	; 0x96
 8000ff6:	4091      	lsls	r1, r2
 8000ff8:	e7f7      	b.n	8000fea <__aeabi_f2iz+0x2a>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	7fffffff 	.word	0x7fffffff

08001000 <__aeabi_dadd>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	464f      	mov	r7, r9
 8001004:	4646      	mov	r6, r8
 8001006:	46d6      	mov	lr, sl
 8001008:	0004      	movs	r4, r0
 800100a:	b5c0      	push	{r6, r7, lr}
 800100c:	001f      	movs	r7, r3
 800100e:	030b      	lsls	r3, r1, #12
 8001010:	0010      	movs	r0, r2
 8001012:	004e      	lsls	r6, r1, #1
 8001014:	0a5b      	lsrs	r3, r3, #9
 8001016:	0fcd      	lsrs	r5, r1, #31
 8001018:	0f61      	lsrs	r1, r4, #29
 800101a:	007a      	lsls	r2, r7, #1
 800101c:	4319      	orrs	r1, r3
 800101e:	00e3      	lsls	r3, r4, #3
 8001020:	033c      	lsls	r4, r7, #12
 8001022:	0fff      	lsrs	r7, r7, #31
 8001024:	46bc      	mov	ip, r7
 8001026:	0a64      	lsrs	r4, r4, #9
 8001028:	0f47      	lsrs	r7, r0, #29
 800102a:	4327      	orrs	r7, r4
 800102c:	0d76      	lsrs	r6, r6, #21
 800102e:	0d52      	lsrs	r2, r2, #21
 8001030:	00c0      	lsls	r0, r0, #3
 8001032:	46b9      	mov	r9, r7
 8001034:	4680      	mov	r8, r0
 8001036:	1ab7      	subs	r7, r6, r2
 8001038:	4565      	cmp	r5, ip
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x3e>
 800103c:	e09b      	b.n	8001176 <__aeabi_dadd+0x176>
 800103e:	2f00      	cmp	r7, #0
 8001040:	dc00      	bgt.n	8001044 <__aeabi_dadd+0x44>
 8001042:	e084      	b.n	800114e <__aeabi_dadd+0x14e>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d100      	bne.n	800104a <__aeabi_dadd+0x4a>
 8001048:	e0be      	b.n	80011c8 <__aeabi_dadd+0x1c8>
 800104a:	4ac8      	ldr	r2, [pc, #800]	; (800136c <__aeabi_dadd+0x36c>)
 800104c:	4296      	cmp	r6, r2
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x52>
 8001050:	e124      	b.n	800129c <__aeabi_dadd+0x29c>
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	464c      	mov	r4, r9
 8001056:	0412      	lsls	r2, r2, #16
 8001058:	4314      	orrs	r4, r2
 800105a:	46a1      	mov	r9, r4
 800105c:	2f38      	cmp	r7, #56	; 0x38
 800105e:	dd00      	ble.n	8001062 <__aeabi_dadd+0x62>
 8001060:	e167      	b.n	8001332 <__aeabi_dadd+0x332>
 8001062:	2f1f      	cmp	r7, #31
 8001064:	dd00      	ble.n	8001068 <__aeabi_dadd+0x68>
 8001066:	e1d6      	b.n	8001416 <__aeabi_dadd+0x416>
 8001068:	2220      	movs	r2, #32
 800106a:	464c      	mov	r4, r9
 800106c:	1bd2      	subs	r2, r2, r7
 800106e:	4094      	lsls	r4, r2
 8001070:	46a2      	mov	sl, r4
 8001072:	4644      	mov	r4, r8
 8001074:	40fc      	lsrs	r4, r7
 8001076:	0020      	movs	r0, r4
 8001078:	4654      	mov	r4, sl
 800107a:	4304      	orrs	r4, r0
 800107c:	4640      	mov	r0, r8
 800107e:	4090      	lsls	r0, r2
 8001080:	1e42      	subs	r2, r0, #1
 8001082:	4190      	sbcs	r0, r2
 8001084:	464a      	mov	r2, r9
 8001086:	40fa      	lsrs	r2, r7
 8001088:	4304      	orrs	r4, r0
 800108a:	1a89      	subs	r1, r1, r2
 800108c:	1b1c      	subs	r4, r3, r4
 800108e:	42a3      	cmp	r3, r4
 8001090:	4192      	sbcs	r2, r2
 8001092:	4252      	negs	r2, r2
 8001094:	1a8b      	subs	r3, r1, r2
 8001096:	469a      	mov	sl, r3
 8001098:	4653      	mov	r3, sl
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	d400      	bmi.n	80010a0 <__aeabi_dadd+0xa0>
 800109e:	e0d4      	b.n	800124a <__aeabi_dadd+0x24a>
 80010a0:	4653      	mov	r3, sl
 80010a2:	025a      	lsls	r2, r3, #9
 80010a4:	0a53      	lsrs	r3, r2, #9
 80010a6:	469a      	mov	sl, r3
 80010a8:	4653      	mov	r3, sl
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0xb0>
 80010ae:	e104      	b.n	80012ba <__aeabi_dadd+0x2ba>
 80010b0:	4650      	mov	r0, sl
 80010b2:	f000 fed9 	bl	8001e68 <__clzsi2>
 80010b6:	0003      	movs	r3, r0
 80010b8:	3b08      	subs	r3, #8
 80010ba:	2220      	movs	r2, #32
 80010bc:	0020      	movs	r0, r4
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	4651      	mov	r1, sl
 80010c2:	40d0      	lsrs	r0, r2
 80010c4:	4099      	lsls	r1, r3
 80010c6:	0002      	movs	r2, r0
 80010c8:	409c      	lsls	r4, r3
 80010ca:	430a      	orrs	r2, r1
 80010cc:	42b3      	cmp	r3, r6
 80010ce:	da00      	bge.n	80010d2 <__aeabi_dadd+0xd2>
 80010d0:	e102      	b.n	80012d8 <__aeabi_dadd+0x2d8>
 80010d2:	1b9b      	subs	r3, r3, r6
 80010d4:	1c59      	adds	r1, r3, #1
 80010d6:	291f      	cmp	r1, #31
 80010d8:	dd00      	ble.n	80010dc <__aeabi_dadd+0xdc>
 80010da:	e0a7      	b.n	800122c <__aeabi_dadd+0x22c>
 80010dc:	2320      	movs	r3, #32
 80010de:	0010      	movs	r0, r2
 80010e0:	0026      	movs	r6, r4
 80010e2:	1a5b      	subs	r3, r3, r1
 80010e4:	409c      	lsls	r4, r3
 80010e6:	4098      	lsls	r0, r3
 80010e8:	40ce      	lsrs	r6, r1
 80010ea:	40ca      	lsrs	r2, r1
 80010ec:	1e63      	subs	r3, r4, #1
 80010ee:	419c      	sbcs	r4, r3
 80010f0:	4330      	orrs	r0, r6
 80010f2:	4692      	mov	sl, r2
 80010f4:	2600      	movs	r6, #0
 80010f6:	4304      	orrs	r4, r0
 80010f8:	0763      	lsls	r3, r4, #29
 80010fa:	d009      	beq.n	8001110 <__aeabi_dadd+0x110>
 80010fc:	230f      	movs	r3, #15
 80010fe:	4023      	ands	r3, r4
 8001100:	2b04      	cmp	r3, #4
 8001102:	d005      	beq.n	8001110 <__aeabi_dadd+0x110>
 8001104:	1d23      	adds	r3, r4, #4
 8001106:	42a3      	cmp	r3, r4
 8001108:	41a4      	sbcs	r4, r4
 800110a:	4264      	negs	r4, r4
 800110c:	44a2      	add	sl, r4
 800110e:	001c      	movs	r4, r3
 8001110:	4653      	mov	r3, sl
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	d400      	bmi.n	8001118 <__aeabi_dadd+0x118>
 8001116:	e09b      	b.n	8001250 <__aeabi_dadd+0x250>
 8001118:	4b94      	ldr	r3, [pc, #592]	; (800136c <__aeabi_dadd+0x36c>)
 800111a:	3601      	adds	r6, #1
 800111c:	429e      	cmp	r6, r3
 800111e:	d100      	bne.n	8001122 <__aeabi_dadd+0x122>
 8001120:	e0b8      	b.n	8001294 <__aeabi_dadd+0x294>
 8001122:	4653      	mov	r3, sl
 8001124:	4992      	ldr	r1, [pc, #584]	; (8001370 <__aeabi_dadd+0x370>)
 8001126:	08e4      	lsrs	r4, r4, #3
 8001128:	400b      	ands	r3, r1
 800112a:	0019      	movs	r1, r3
 800112c:	075b      	lsls	r3, r3, #29
 800112e:	4323      	orrs	r3, r4
 8001130:	0572      	lsls	r2, r6, #21
 8001132:	024c      	lsls	r4, r1, #9
 8001134:	0b24      	lsrs	r4, r4, #12
 8001136:	0d52      	lsrs	r2, r2, #21
 8001138:	0512      	lsls	r2, r2, #20
 800113a:	07ed      	lsls	r5, r5, #31
 800113c:	4322      	orrs	r2, r4
 800113e:	432a      	orrs	r2, r5
 8001140:	0018      	movs	r0, r3
 8001142:	0011      	movs	r1, r2
 8001144:	bce0      	pop	{r5, r6, r7}
 8001146:	46ba      	mov	sl, r7
 8001148:	46b1      	mov	r9, r6
 800114a:	46a8      	mov	r8, r5
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114e:	2f00      	cmp	r7, #0
 8001150:	d048      	beq.n	80011e4 <__aeabi_dadd+0x1e4>
 8001152:	1b97      	subs	r7, r2, r6
 8001154:	2e00      	cmp	r6, #0
 8001156:	d000      	beq.n	800115a <__aeabi_dadd+0x15a>
 8001158:	e10e      	b.n	8001378 <__aeabi_dadd+0x378>
 800115a:	000c      	movs	r4, r1
 800115c:	431c      	orrs	r4, r3
 800115e:	d100      	bne.n	8001162 <__aeabi_dadd+0x162>
 8001160:	e1b7      	b.n	80014d2 <__aeabi_dadd+0x4d2>
 8001162:	1e7c      	subs	r4, r7, #1
 8001164:	2f01      	cmp	r7, #1
 8001166:	d100      	bne.n	800116a <__aeabi_dadd+0x16a>
 8001168:	e226      	b.n	80015b8 <__aeabi_dadd+0x5b8>
 800116a:	4d80      	ldr	r5, [pc, #512]	; (800136c <__aeabi_dadd+0x36c>)
 800116c:	42af      	cmp	r7, r5
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x172>
 8001170:	e1d5      	b.n	800151e <__aeabi_dadd+0x51e>
 8001172:	0027      	movs	r7, r4
 8001174:	e107      	b.n	8001386 <__aeabi_dadd+0x386>
 8001176:	2f00      	cmp	r7, #0
 8001178:	dc00      	bgt.n	800117c <__aeabi_dadd+0x17c>
 800117a:	e0b2      	b.n	80012e2 <__aeabi_dadd+0x2e2>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d047      	beq.n	8001210 <__aeabi_dadd+0x210>
 8001180:	4a7a      	ldr	r2, [pc, #488]	; (800136c <__aeabi_dadd+0x36c>)
 8001182:	4296      	cmp	r6, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x188>
 8001186:	e089      	b.n	800129c <__aeabi_dadd+0x29c>
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	464c      	mov	r4, r9
 800118c:	0412      	lsls	r2, r2, #16
 800118e:	4314      	orrs	r4, r2
 8001190:	46a1      	mov	r9, r4
 8001192:	2f38      	cmp	r7, #56	; 0x38
 8001194:	dc6b      	bgt.n	800126e <__aeabi_dadd+0x26e>
 8001196:	2f1f      	cmp	r7, #31
 8001198:	dc00      	bgt.n	800119c <__aeabi_dadd+0x19c>
 800119a:	e16e      	b.n	800147a <__aeabi_dadd+0x47a>
 800119c:	003a      	movs	r2, r7
 800119e:	4648      	mov	r0, r9
 80011a0:	3a20      	subs	r2, #32
 80011a2:	40d0      	lsrs	r0, r2
 80011a4:	4684      	mov	ip, r0
 80011a6:	2f20      	cmp	r7, #32
 80011a8:	d007      	beq.n	80011ba <__aeabi_dadd+0x1ba>
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	4648      	mov	r0, r9
 80011ae:	1bd2      	subs	r2, r2, r7
 80011b0:	4090      	lsls	r0, r2
 80011b2:	0002      	movs	r2, r0
 80011b4:	4640      	mov	r0, r8
 80011b6:	4310      	orrs	r0, r2
 80011b8:	4680      	mov	r8, r0
 80011ba:	4640      	mov	r0, r8
 80011bc:	1e42      	subs	r2, r0, #1
 80011be:	4190      	sbcs	r0, r2
 80011c0:	4662      	mov	r2, ip
 80011c2:	0004      	movs	r4, r0
 80011c4:	4314      	orrs	r4, r2
 80011c6:	e057      	b.n	8001278 <__aeabi_dadd+0x278>
 80011c8:	464a      	mov	r2, r9
 80011ca:	4302      	orrs	r2, r0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x1d0>
 80011ce:	e103      	b.n	80013d8 <__aeabi_dadd+0x3d8>
 80011d0:	1e7a      	subs	r2, r7, #1
 80011d2:	2f01      	cmp	r7, #1
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x1d8>
 80011d6:	e193      	b.n	8001500 <__aeabi_dadd+0x500>
 80011d8:	4c64      	ldr	r4, [pc, #400]	; (800136c <__aeabi_dadd+0x36c>)
 80011da:	42a7      	cmp	r7, r4
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dadd+0x1e0>
 80011de:	e18a      	b.n	80014f6 <__aeabi_dadd+0x4f6>
 80011e0:	0017      	movs	r7, r2
 80011e2:	e73b      	b.n	800105c <__aeabi_dadd+0x5c>
 80011e4:	4c63      	ldr	r4, [pc, #396]	; (8001374 <__aeabi_dadd+0x374>)
 80011e6:	1c72      	adds	r2, r6, #1
 80011e8:	4222      	tst	r2, r4
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x1ee>
 80011ec:	e0e0      	b.n	80013b0 <__aeabi_dadd+0x3b0>
 80011ee:	000a      	movs	r2, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_dadd+0x1f8>
 80011f6:	e174      	b.n	80014e2 <__aeabi_dadd+0x4e2>
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x1fe>
 80011fc:	e1d0      	b.n	80015a0 <__aeabi_dadd+0x5a0>
 80011fe:	464a      	mov	r2, r9
 8001200:	4302      	orrs	r2, r0
 8001202:	d000      	beq.n	8001206 <__aeabi_dadd+0x206>
 8001204:	e1e3      	b.n	80015ce <__aeabi_dadd+0x5ce>
 8001206:	074a      	lsls	r2, r1, #29
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	4313      	orrs	r3, r2
 800120c:	08c9      	lsrs	r1, r1, #3
 800120e:	e029      	b.n	8001264 <__aeabi_dadd+0x264>
 8001210:	464a      	mov	r2, r9
 8001212:	4302      	orrs	r2, r0
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x218>
 8001216:	e17d      	b.n	8001514 <__aeabi_dadd+0x514>
 8001218:	1e7a      	subs	r2, r7, #1
 800121a:	2f01      	cmp	r7, #1
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x220>
 800121e:	e0e0      	b.n	80013e2 <__aeabi_dadd+0x3e2>
 8001220:	4c52      	ldr	r4, [pc, #328]	; (800136c <__aeabi_dadd+0x36c>)
 8001222:	42a7      	cmp	r7, r4
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x228>
 8001226:	e166      	b.n	80014f6 <__aeabi_dadd+0x4f6>
 8001228:	0017      	movs	r7, r2
 800122a:	e7b2      	b.n	8001192 <__aeabi_dadd+0x192>
 800122c:	0010      	movs	r0, r2
 800122e:	3b1f      	subs	r3, #31
 8001230:	40d8      	lsrs	r0, r3
 8001232:	2920      	cmp	r1, #32
 8001234:	d003      	beq.n	800123e <__aeabi_dadd+0x23e>
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	409a      	lsls	r2, r3
 800123c:	4314      	orrs	r4, r2
 800123e:	1e63      	subs	r3, r4, #1
 8001240:	419c      	sbcs	r4, r3
 8001242:	2300      	movs	r3, #0
 8001244:	2600      	movs	r6, #0
 8001246:	469a      	mov	sl, r3
 8001248:	4304      	orrs	r4, r0
 800124a:	0763      	lsls	r3, r4, #29
 800124c:	d000      	beq.n	8001250 <__aeabi_dadd+0x250>
 800124e:	e755      	b.n	80010fc <__aeabi_dadd+0xfc>
 8001250:	4652      	mov	r2, sl
 8001252:	08e3      	lsrs	r3, r4, #3
 8001254:	0752      	lsls	r2, r2, #29
 8001256:	4313      	orrs	r3, r2
 8001258:	4652      	mov	r2, sl
 800125a:	0037      	movs	r7, r6
 800125c:	08d1      	lsrs	r1, r2, #3
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <__aeabi_dadd+0x36c>)
 8001260:	4297      	cmp	r7, r2
 8001262:	d01f      	beq.n	80012a4 <__aeabi_dadd+0x2a4>
 8001264:	0309      	lsls	r1, r1, #12
 8001266:	057a      	lsls	r2, r7, #21
 8001268:	0b0c      	lsrs	r4, r1, #12
 800126a:	0d52      	lsrs	r2, r2, #21
 800126c:	e764      	b.n	8001138 <__aeabi_dadd+0x138>
 800126e:	4642      	mov	r2, r8
 8001270:	464c      	mov	r4, r9
 8001272:	4314      	orrs	r4, r2
 8001274:	1e62      	subs	r2, r4, #1
 8001276:	4194      	sbcs	r4, r2
 8001278:	18e4      	adds	r4, r4, r3
 800127a:	429c      	cmp	r4, r3
 800127c:	4192      	sbcs	r2, r2
 800127e:	4252      	negs	r2, r2
 8001280:	4692      	mov	sl, r2
 8001282:	448a      	add	sl, r1
 8001284:	4653      	mov	r3, sl
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	d5df      	bpl.n	800124a <__aeabi_dadd+0x24a>
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <__aeabi_dadd+0x36c>)
 800128c:	3601      	adds	r6, #1
 800128e:	429e      	cmp	r6, r3
 8001290:	d000      	beq.n	8001294 <__aeabi_dadd+0x294>
 8001292:	e0b3      	b.n	80013fc <__aeabi_dadd+0x3fc>
 8001294:	0032      	movs	r2, r6
 8001296:	2400      	movs	r4, #0
 8001298:	2300      	movs	r3, #0
 800129a:	e74d      	b.n	8001138 <__aeabi_dadd+0x138>
 800129c:	074a      	lsls	r2, r1, #29
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	08c9      	lsrs	r1, r1, #3
 80012a4:	001a      	movs	r2, r3
 80012a6:	430a      	orrs	r2, r1
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x2ac>
 80012aa:	e200      	b.n	80016ae <__aeabi_dadd+0x6ae>
 80012ac:	2480      	movs	r4, #128	; 0x80
 80012ae:	0324      	lsls	r4, r4, #12
 80012b0:	430c      	orrs	r4, r1
 80012b2:	0324      	lsls	r4, r4, #12
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <__aeabi_dadd+0x36c>)
 80012b6:	0b24      	lsrs	r4, r4, #12
 80012b8:	e73e      	b.n	8001138 <__aeabi_dadd+0x138>
 80012ba:	0020      	movs	r0, r4
 80012bc:	f000 fdd4 	bl	8001e68 <__clzsi2>
 80012c0:	0003      	movs	r3, r0
 80012c2:	3318      	adds	r3, #24
 80012c4:	2b1f      	cmp	r3, #31
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_dadd+0x2ca>
 80012c8:	e6f7      	b.n	80010ba <__aeabi_dadd+0xba>
 80012ca:	0022      	movs	r2, r4
 80012cc:	3808      	subs	r0, #8
 80012ce:	4082      	lsls	r2, r0
 80012d0:	2400      	movs	r4, #0
 80012d2:	42b3      	cmp	r3, r6
 80012d4:	db00      	blt.n	80012d8 <__aeabi_dadd+0x2d8>
 80012d6:	e6fc      	b.n	80010d2 <__aeabi_dadd+0xd2>
 80012d8:	1af6      	subs	r6, r6, r3
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <__aeabi_dadd+0x370>)
 80012dc:	401a      	ands	r2, r3
 80012de:	4692      	mov	sl, r2
 80012e0:	e70a      	b.n	80010f8 <__aeabi_dadd+0xf8>
 80012e2:	2f00      	cmp	r7, #0
 80012e4:	d02b      	beq.n	800133e <__aeabi_dadd+0x33e>
 80012e6:	1b97      	subs	r7, r2, r6
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x2ee>
 80012ec:	e0b8      	b.n	8001460 <__aeabi_dadd+0x460>
 80012ee:	4c1f      	ldr	r4, [pc, #124]	; (800136c <__aeabi_dadd+0x36c>)
 80012f0:	42a2      	cmp	r2, r4
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x2f6>
 80012f4:	e11c      	b.n	8001530 <__aeabi_dadd+0x530>
 80012f6:	2480      	movs	r4, #128	; 0x80
 80012f8:	0424      	lsls	r4, r4, #16
 80012fa:	4321      	orrs	r1, r4
 80012fc:	2f38      	cmp	r7, #56	; 0x38
 80012fe:	dd00      	ble.n	8001302 <__aeabi_dadd+0x302>
 8001300:	e11e      	b.n	8001540 <__aeabi_dadd+0x540>
 8001302:	2f1f      	cmp	r7, #31
 8001304:	dd00      	ble.n	8001308 <__aeabi_dadd+0x308>
 8001306:	e19e      	b.n	8001646 <__aeabi_dadd+0x646>
 8001308:	2620      	movs	r6, #32
 800130a:	000c      	movs	r4, r1
 800130c:	1bf6      	subs	r6, r6, r7
 800130e:	0018      	movs	r0, r3
 8001310:	40b3      	lsls	r3, r6
 8001312:	40b4      	lsls	r4, r6
 8001314:	40f8      	lsrs	r0, r7
 8001316:	1e5e      	subs	r6, r3, #1
 8001318:	41b3      	sbcs	r3, r6
 800131a:	40f9      	lsrs	r1, r7
 800131c:	4304      	orrs	r4, r0
 800131e:	431c      	orrs	r4, r3
 8001320:	4489      	add	r9, r1
 8001322:	4444      	add	r4, r8
 8001324:	4544      	cmp	r4, r8
 8001326:	419b      	sbcs	r3, r3
 8001328:	425b      	negs	r3, r3
 800132a:	444b      	add	r3, r9
 800132c:	469a      	mov	sl, r3
 800132e:	0016      	movs	r6, r2
 8001330:	e7a8      	b.n	8001284 <__aeabi_dadd+0x284>
 8001332:	4642      	mov	r2, r8
 8001334:	464c      	mov	r4, r9
 8001336:	4314      	orrs	r4, r2
 8001338:	1e62      	subs	r2, r4, #1
 800133a:	4194      	sbcs	r4, r2
 800133c:	e6a6      	b.n	800108c <__aeabi_dadd+0x8c>
 800133e:	4c0d      	ldr	r4, [pc, #52]	; (8001374 <__aeabi_dadd+0x374>)
 8001340:	1c72      	adds	r2, r6, #1
 8001342:	4222      	tst	r2, r4
 8001344:	d000      	beq.n	8001348 <__aeabi_dadd+0x348>
 8001346:	e0a8      	b.n	800149a <__aeabi_dadd+0x49a>
 8001348:	000a      	movs	r2, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	2e00      	cmp	r6, #0
 800134e:	d000      	beq.n	8001352 <__aeabi_dadd+0x352>
 8001350:	e10a      	b.n	8001568 <__aeabi_dadd+0x568>
 8001352:	2a00      	cmp	r2, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x358>
 8001356:	e15e      	b.n	8001616 <__aeabi_dadd+0x616>
 8001358:	464a      	mov	r2, r9
 800135a:	4302      	orrs	r2, r0
 800135c:	d000      	beq.n	8001360 <__aeabi_dadd+0x360>
 800135e:	e161      	b.n	8001624 <__aeabi_dadd+0x624>
 8001360:	074a      	lsls	r2, r1, #29
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	4313      	orrs	r3, r2
 8001366:	08c9      	lsrs	r1, r1, #3
 8001368:	e77c      	b.n	8001264 <__aeabi_dadd+0x264>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	000007ff 	.word	0x000007ff
 8001370:	ff7fffff 	.word	0xff7fffff
 8001374:	000007fe 	.word	0x000007fe
 8001378:	4ccf      	ldr	r4, [pc, #828]	; (80016b8 <__aeabi_dadd+0x6b8>)
 800137a:	42a2      	cmp	r2, r4
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x380>
 800137e:	e0ce      	b.n	800151e <__aeabi_dadd+0x51e>
 8001380:	2480      	movs	r4, #128	; 0x80
 8001382:	0424      	lsls	r4, r4, #16
 8001384:	4321      	orrs	r1, r4
 8001386:	2f38      	cmp	r7, #56	; 0x38
 8001388:	dc5b      	bgt.n	8001442 <__aeabi_dadd+0x442>
 800138a:	2f1f      	cmp	r7, #31
 800138c:	dd00      	ble.n	8001390 <__aeabi_dadd+0x390>
 800138e:	e0dc      	b.n	800154a <__aeabi_dadd+0x54a>
 8001390:	2520      	movs	r5, #32
 8001392:	000c      	movs	r4, r1
 8001394:	1bed      	subs	r5, r5, r7
 8001396:	001e      	movs	r6, r3
 8001398:	40ab      	lsls	r3, r5
 800139a:	40ac      	lsls	r4, r5
 800139c:	40fe      	lsrs	r6, r7
 800139e:	1e5d      	subs	r5, r3, #1
 80013a0:	41ab      	sbcs	r3, r5
 80013a2:	4334      	orrs	r4, r6
 80013a4:	40f9      	lsrs	r1, r7
 80013a6:	431c      	orrs	r4, r3
 80013a8:	464b      	mov	r3, r9
 80013aa:	1a5b      	subs	r3, r3, r1
 80013ac:	4699      	mov	r9, r3
 80013ae:	e04c      	b.n	800144a <__aeabi_dadd+0x44a>
 80013b0:	464a      	mov	r2, r9
 80013b2:	1a1c      	subs	r4, r3, r0
 80013b4:	1a88      	subs	r0, r1, r2
 80013b6:	42a3      	cmp	r3, r4
 80013b8:	4192      	sbcs	r2, r2
 80013ba:	4252      	negs	r2, r2
 80013bc:	4692      	mov	sl, r2
 80013be:	0002      	movs	r2, r0
 80013c0:	4650      	mov	r0, sl
 80013c2:	1a12      	subs	r2, r2, r0
 80013c4:	4692      	mov	sl, r2
 80013c6:	0212      	lsls	r2, r2, #8
 80013c8:	d478      	bmi.n	80014bc <__aeabi_dadd+0x4bc>
 80013ca:	4653      	mov	r3, sl
 80013cc:	4323      	orrs	r3, r4
 80013ce:	d000      	beq.n	80013d2 <__aeabi_dadd+0x3d2>
 80013d0:	e66a      	b.n	80010a8 <__aeabi_dadd+0xa8>
 80013d2:	2100      	movs	r1, #0
 80013d4:	2500      	movs	r5, #0
 80013d6:	e745      	b.n	8001264 <__aeabi_dadd+0x264>
 80013d8:	074a      	lsls	r2, r1, #29
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	4313      	orrs	r3, r2
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	e73d      	b.n	800125e <__aeabi_dadd+0x25e>
 80013e2:	181c      	adds	r4, r3, r0
 80013e4:	429c      	cmp	r4, r3
 80013e6:	419b      	sbcs	r3, r3
 80013e8:	4449      	add	r1, r9
 80013ea:	468a      	mov	sl, r1
 80013ec:	425b      	negs	r3, r3
 80013ee:	449a      	add	sl, r3
 80013f0:	4653      	mov	r3, sl
 80013f2:	2601      	movs	r6, #1
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x3fa>
 80013f8:	e727      	b.n	800124a <__aeabi_dadd+0x24a>
 80013fa:	2602      	movs	r6, #2
 80013fc:	4652      	mov	r2, sl
 80013fe:	4baf      	ldr	r3, [pc, #700]	; (80016bc <__aeabi_dadd+0x6bc>)
 8001400:	2101      	movs	r1, #1
 8001402:	401a      	ands	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	4021      	ands	r1, r4
 8001408:	0862      	lsrs	r2, r4, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	07dc      	lsls	r4, r3, #31
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	469a      	mov	sl, r3
 8001412:	4314      	orrs	r4, r2
 8001414:	e670      	b.n	80010f8 <__aeabi_dadd+0xf8>
 8001416:	003a      	movs	r2, r7
 8001418:	464c      	mov	r4, r9
 800141a:	3a20      	subs	r2, #32
 800141c:	40d4      	lsrs	r4, r2
 800141e:	46a4      	mov	ip, r4
 8001420:	2f20      	cmp	r7, #32
 8001422:	d007      	beq.n	8001434 <__aeabi_dadd+0x434>
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	4648      	mov	r0, r9
 8001428:	1bd2      	subs	r2, r2, r7
 800142a:	4090      	lsls	r0, r2
 800142c:	0002      	movs	r2, r0
 800142e:	4640      	mov	r0, r8
 8001430:	4310      	orrs	r0, r2
 8001432:	4680      	mov	r8, r0
 8001434:	4640      	mov	r0, r8
 8001436:	1e42      	subs	r2, r0, #1
 8001438:	4190      	sbcs	r0, r2
 800143a:	4662      	mov	r2, ip
 800143c:	0004      	movs	r4, r0
 800143e:	4314      	orrs	r4, r2
 8001440:	e624      	b.n	800108c <__aeabi_dadd+0x8c>
 8001442:	4319      	orrs	r1, r3
 8001444:	000c      	movs	r4, r1
 8001446:	1e63      	subs	r3, r4, #1
 8001448:	419c      	sbcs	r4, r3
 800144a:	4643      	mov	r3, r8
 800144c:	1b1c      	subs	r4, r3, r4
 800144e:	45a0      	cmp	r8, r4
 8001450:	419b      	sbcs	r3, r3
 8001452:	4649      	mov	r1, r9
 8001454:	425b      	negs	r3, r3
 8001456:	1acb      	subs	r3, r1, r3
 8001458:	469a      	mov	sl, r3
 800145a:	4665      	mov	r5, ip
 800145c:	0016      	movs	r6, r2
 800145e:	e61b      	b.n	8001098 <__aeabi_dadd+0x98>
 8001460:	000c      	movs	r4, r1
 8001462:	431c      	orrs	r4, r3
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x468>
 8001466:	e0c7      	b.n	80015f8 <__aeabi_dadd+0x5f8>
 8001468:	1e7c      	subs	r4, r7, #1
 800146a:	2f01      	cmp	r7, #1
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x470>
 800146e:	e0f9      	b.n	8001664 <__aeabi_dadd+0x664>
 8001470:	4e91      	ldr	r6, [pc, #580]	; (80016b8 <__aeabi_dadd+0x6b8>)
 8001472:	42b7      	cmp	r7, r6
 8001474:	d05c      	beq.n	8001530 <__aeabi_dadd+0x530>
 8001476:	0027      	movs	r7, r4
 8001478:	e740      	b.n	80012fc <__aeabi_dadd+0x2fc>
 800147a:	2220      	movs	r2, #32
 800147c:	464c      	mov	r4, r9
 800147e:	4640      	mov	r0, r8
 8001480:	1bd2      	subs	r2, r2, r7
 8001482:	4094      	lsls	r4, r2
 8001484:	40f8      	lsrs	r0, r7
 8001486:	4304      	orrs	r4, r0
 8001488:	4640      	mov	r0, r8
 800148a:	4090      	lsls	r0, r2
 800148c:	1e42      	subs	r2, r0, #1
 800148e:	4190      	sbcs	r0, r2
 8001490:	464a      	mov	r2, r9
 8001492:	40fa      	lsrs	r2, r7
 8001494:	4304      	orrs	r4, r0
 8001496:	1889      	adds	r1, r1, r2
 8001498:	e6ee      	b.n	8001278 <__aeabi_dadd+0x278>
 800149a:	4c87      	ldr	r4, [pc, #540]	; (80016b8 <__aeabi_dadd+0x6b8>)
 800149c:	42a2      	cmp	r2, r4
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x4a2>
 80014a0:	e6f9      	b.n	8001296 <__aeabi_dadd+0x296>
 80014a2:	1818      	adds	r0, r3, r0
 80014a4:	4298      	cmp	r0, r3
 80014a6:	419b      	sbcs	r3, r3
 80014a8:	4449      	add	r1, r9
 80014aa:	425b      	negs	r3, r3
 80014ac:	18cb      	adds	r3, r1, r3
 80014ae:	07dc      	lsls	r4, r3, #31
 80014b0:	0840      	lsrs	r0, r0, #1
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	469a      	mov	sl, r3
 80014b6:	0016      	movs	r6, r2
 80014b8:	4304      	orrs	r4, r0
 80014ba:	e6c6      	b.n	800124a <__aeabi_dadd+0x24a>
 80014bc:	4642      	mov	r2, r8
 80014be:	1ad4      	subs	r4, r2, r3
 80014c0:	45a0      	cmp	r8, r4
 80014c2:	4180      	sbcs	r0, r0
 80014c4:	464b      	mov	r3, r9
 80014c6:	4240      	negs	r0, r0
 80014c8:	1a59      	subs	r1, r3, r1
 80014ca:	1a0b      	subs	r3, r1, r0
 80014cc:	469a      	mov	sl, r3
 80014ce:	4665      	mov	r5, ip
 80014d0:	e5ea      	b.n	80010a8 <__aeabi_dadd+0xa8>
 80014d2:	464b      	mov	r3, r9
 80014d4:	464a      	mov	r2, r9
 80014d6:	08c0      	lsrs	r0, r0, #3
 80014d8:	075b      	lsls	r3, r3, #29
 80014da:	4665      	mov	r5, ip
 80014dc:	4303      	orrs	r3, r0
 80014de:	08d1      	lsrs	r1, r2, #3
 80014e0:	e6bd      	b.n	800125e <__aeabi_dadd+0x25e>
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d000      	beq.n	80014e8 <__aeabi_dadd+0x4e8>
 80014e6:	e08e      	b.n	8001606 <__aeabi_dadd+0x606>
 80014e8:	464b      	mov	r3, r9
 80014ea:	4303      	orrs	r3, r0
 80014ec:	d117      	bne.n	800151e <__aeabi_dadd+0x51e>
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	2500      	movs	r5, #0
 80014f2:	0309      	lsls	r1, r1, #12
 80014f4:	e6da      	b.n	80012ac <__aeabi_dadd+0x2ac>
 80014f6:	074a      	lsls	r2, r1, #29
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	08c9      	lsrs	r1, r1, #3
 80014fe:	e6d1      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001500:	1a1c      	subs	r4, r3, r0
 8001502:	464a      	mov	r2, r9
 8001504:	42a3      	cmp	r3, r4
 8001506:	419b      	sbcs	r3, r3
 8001508:	1a89      	subs	r1, r1, r2
 800150a:	425b      	negs	r3, r3
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	469a      	mov	sl, r3
 8001510:	2601      	movs	r6, #1
 8001512:	e5c1      	b.n	8001098 <__aeabi_dadd+0x98>
 8001514:	074a      	lsls	r2, r1, #29
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	4313      	orrs	r3, r2
 800151a:	08c9      	lsrs	r1, r1, #3
 800151c:	e69f      	b.n	800125e <__aeabi_dadd+0x25e>
 800151e:	4643      	mov	r3, r8
 8001520:	08d8      	lsrs	r0, r3, #3
 8001522:	464b      	mov	r3, r9
 8001524:	464a      	mov	r2, r9
 8001526:	075b      	lsls	r3, r3, #29
 8001528:	4665      	mov	r5, ip
 800152a:	4303      	orrs	r3, r0
 800152c:	08d1      	lsrs	r1, r2, #3
 800152e:	e6b9      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001530:	4643      	mov	r3, r8
 8001532:	08d8      	lsrs	r0, r3, #3
 8001534:	464b      	mov	r3, r9
 8001536:	464a      	mov	r2, r9
 8001538:	075b      	lsls	r3, r3, #29
 800153a:	4303      	orrs	r3, r0
 800153c:	08d1      	lsrs	r1, r2, #3
 800153e:	e6b1      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001540:	4319      	orrs	r1, r3
 8001542:	000c      	movs	r4, r1
 8001544:	1e63      	subs	r3, r4, #1
 8001546:	419c      	sbcs	r4, r3
 8001548:	e6eb      	b.n	8001322 <__aeabi_dadd+0x322>
 800154a:	003c      	movs	r4, r7
 800154c:	000d      	movs	r5, r1
 800154e:	3c20      	subs	r4, #32
 8001550:	40e5      	lsrs	r5, r4
 8001552:	2f20      	cmp	r7, #32
 8001554:	d003      	beq.n	800155e <__aeabi_dadd+0x55e>
 8001556:	2440      	movs	r4, #64	; 0x40
 8001558:	1be4      	subs	r4, r4, r7
 800155a:	40a1      	lsls	r1, r4
 800155c:	430b      	orrs	r3, r1
 800155e:	001c      	movs	r4, r3
 8001560:	1e63      	subs	r3, r4, #1
 8001562:	419c      	sbcs	r4, r3
 8001564:	432c      	orrs	r4, r5
 8001566:	e770      	b.n	800144a <__aeabi_dadd+0x44a>
 8001568:	2a00      	cmp	r2, #0
 800156a:	d0e1      	beq.n	8001530 <__aeabi_dadd+0x530>
 800156c:	464a      	mov	r2, r9
 800156e:	4302      	orrs	r2, r0
 8001570:	d0c1      	beq.n	80014f6 <__aeabi_dadd+0x4f6>
 8001572:	074a      	lsls	r2, r1, #29
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	4313      	orrs	r3, r2
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	08c9      	lsrs	r1, r1, #3
 800157c:	0312      	lsls	r2, r2, #12
 800157e:	4211      	tst	r1, r2
 8001580:	d008      	beq.n	8001594 <__aeabi_dadd+0x594>
 8001582:	4648      	mov	r0, r9
 8001584:	08c4      	lsrs	r4, r0, #3
 8001586:	4214      	tst	r4, r2
 8001588:	d104      	bne.n	8001594 <__aeabi_dadd+0x594>
 800158a:	4643      	mov	r3, r8
 800158c:	0021      	movs	r1, r4
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	0742      	lsls	r2, r0, #29
 8001592:	4313      	orrs	r3, r2
 8001594:	0f5a      	lsrs	r2, r3, #29
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	0752      	lsls	r2, r2, #29
 800159a:	08db      	lsrs	r3, r3, #3
 800159c:	4313      	orrs	r3, r2
 800159e:	e681      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 80015a0:	464b      	mov	r3, r9
 80015a2:	4303      	orrs	r3, r0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x5a8>
 80015a6:	e714      	b.n	80013d2 <__aeabi_dadd+0x3d2>
 80015a8:	464b      	mov	r3, r9
 80015aa:	464a      	mov	r2, r9
 80015ac:	08c0      	lsrs	r0, r0, #3
 80015ae:	075b      	lsls	r3, r3, #29
 80015b0:	4665      	mov	r5, ip
 80015b2:	4303      	orrs	r3, r0
 80015b4:	08d1      	lsrs	r1, r2, #3
 80015b6:	e655      	b.n	8001264 <__aeabi_dadd+0x264>
 80015b8:	1ac4      	subs	r4, r0, r3
 80015ba:	45a0      	cmp	r8, r4
 80015bc:	4180      	sbcs	r0, r0
 80015be:	464b      	mov	r3, r9
 80015c0:	4240      	negs	r0, r0
 80015c2:	1a59      	subs	r1, r3, r1
 80015c4:	1a0b      	subs	r3, r1, r0
 80015c6:	469a      	mov	sl, r3
 80015c8:	4665      	mov	r5, ip
 80015ca:	2601      	movs	r6, #1
 80015cc:	e564      	b.n	8001098 <__aeabi_dadd+0x98>
 80015ce:	1a1c      	subs	r4, r3, r0
 80015d0:	464a      	mov	r2, r9
 80015d2:	42a3      	cmp	r3, r4
 80015d4:	4180      	sbcs	r0, r0
 80015d6:	1a8a      	subs	r2, r1, r2
 80015d8:	4240      	negs	r0, r0
 80015da:	1a12      	subs	r2, r2, r0
 80015dc:	4692      	mov	sl, r2
 80015de:	0212      	lsls	r2, r2, #8
 80015e0:	d549      	bpl.n	8001676 <__aeabi_dadd+0x676>
 80015e2:	4642      	mov	r2, r8
 80015e4:	1ad4      	subs	r4, r2, r3
 80015e6:	45a0      	cmp	r8, r4
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	464b      	mov	r3, r9
 80015ec:	4240      	negs	r0, r0
 80015ee:	1a59      	subs	r1, r3, r1
 80015f0:	1a0b      	subs	r3, r1, r0
 80015f2:	469a      	mov	sl, r3
 80015f4:	4665      	mov	r5, ip
 80015f6:	e57f      	b.n	80010f8 <__aeabi_dadd+0xf8>
 80015f8:	464b      	mov	r3, r9
 80015fa:	464a      	mov	r2, r9
 80015fc:	08c0      	lsrs	r0, r0, #3
 80015fe:	075b      	lsls	r3, r3, #29
 8001600:	4303      	orrs	r3, r0
 8001602:	08d1      	lsrs	r1, r2, #3
 8001604:	e62b      	b.n	800125e <__aeabi_dadd+0x25e>
 8001606:	464a      	mov	r2, r9
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	4302      	orrs	r2, r0
 800160c:	d138      	bne.n	8001680 <__aeabi_dadd+0x680>
 800160e:	074a      	lsls	r2, r1, #29
 8001610:	4313      	orrs	r3, r2
 8001612:	08c9      	lsrs	r1, r1, #3
 8001614:	e646      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001616:	464b      	mov	r3, r9
 8001618:	464a      	mov	r2, r9
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	075b      	lsls	r3, r3, #29
 800161e:	4303      	orrs	r3, r0
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	e61f      	b.n	8001264 <__aeabi_dadd+0x264>
 8001624:	181c      	adds	r4, r3, r0
 8001626:	429c      	cmp	r4, r3
 8001628:	419b      	sbcs	r3, r3
 800162a:	4449      	add	r1, r9
 800162c:	468a      	mov	sl, r1
 800162e:	425b      	negs	r3, r3
 8001630:	449a      	add	sl, r3
 8001632:	4653      	mov	r3, sl
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	d400      	bmi.n	800163a <__aeabi_dadd+0x63a>
 8001638:	e607      	b.n	800124a <__aeabi_dadd+0x24a>
 800163a:	4652      	mov	r2, sl
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <__aeabi_dadd+0x6bc>)
 800163e:	2601      	movs	r6, #1
 8001640:	401a      	ands	r2, r3
 8001642:	4692      	mov	sl, r2
 8001644:	e601      	b.n	800124a <__aeabi_dadd+0x24a>
 8001646:	003c      	movs	r4, r7
 8001648:	000e      	movs	r6, r1
 800164a:	3c20      	subs	r4, #32
 800164c:	40e6      	lsrs	r6, r4
 800164e:	2f20      	cmp	r7, #32
 8001650:	d003      	beq.n	800165a <__aeabi_dadd+0x65a>
 8001652:	2440      	movs	r4, #64	; 0x40
 8001654:	1be4      	subs	r4, r4, r7
 8001656:	40a1      	lsls	r1, r4
 8001658:	430b      	orrs	r3, r1
 800165a:	001c      	movs	r4, r3
 800165c:	1e63      	subs	r3, r4, #1
 800165e:	419c      	sbcs	r4, r3
 8001660:	4334      	orrs	r4, r6
 8001662:	e65e      	b.n	8001322 <__aeabi_dadd+0x322>
 8001664:	4443      	add	r3, r8
 8001666:	4283      	cmp	r3, r0
 8001668:	4180      	sbcs	r0, r0
 800166a:	4449      	add	r1, r9
 800166c:	468a      	mov	sl, r1
 800166e:	4240      	negs	r0, r0
 8001670:	001c      	movs	r4, r3
 8001672:	4482      	add	sl, r0
 8001674:	e6bc      	b.n	80013f0 <__aeabi_dadd+0x3f0>
 8001676:	4653      	mov	r3, sl
 8001678:	4323      	orrs	r3, r4
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x67e>
 800167c:	e6a9      	b.n	80013d2 <__aeabi_dadd+0x3d2>
 800167e:	e5e4      	b.n	800124a <__aeabi_dadd+0x24a>
 8001680:	074a      	lsls	r2, r1, #29
 8001682:	4313      	orrs	r3, r2
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	0312      	lsls	r2, r2, #12
 800168a:	4211      	tst	r1, r2
 800168c:	d009      	beq.n	80016a2 <__aeabi_dadd+0x6a2>
 800168e:	4648      	mov	r0, r9
 8001690:	08c4      	lsrs	r4, r0, #3
 8001692:	4214      	tst	r4, r2
 8001694:	d105      	bne.n	80016a2 <__aeabi_dadd+0x6a2>
 8001696:	4643      	mov	r3, r8
 8001698:	4665      	mov	r5, ip
 800169a:	0021      	movs	r1, r4
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	0742      	lsls	r2, r0, #29
 80016a0:	4313      	orrs	r3, r2
 80016a2:	0f5a      	lsrs	r2, r3, #29
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	0752      	lsls	r2, r2, #29
 80016aa:	4313      	orrs	r3, r2
 80016ac:	e5fa      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 80016ae:	2300      	movs	r3, #0
 80016b0:	4a01      	ldr	r2, [pc, #4]	; (80016b8 <__aeabi_dadd+0x6b8>)
 80016b2:	001c      	movs	r4, r3
 80016b4:	e540      	b.n	8001138 <__aeabi_dadd+0x138>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	ff7fffff 	.word	0xff7fffff

080016c0 <__aeabi_ddiv>:
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	4657      	mov	r7, sl
 80016c4:	464e      	mov	r6, r9
 80016c6:	4645      	mov	r5, r8
 80016c8:	46de      	mov	lr, fp
 80016ca:	b5e0      	push	{r5, r6, r7, lr}
 80016cc:	030c      	lsls	r4, r1, #12
 80016ce:	001f      	movs	r7, r3
 80016d0:	004b      	lsls	r3, r1, #1
 80016d2:	4681      	mov	r9, r0
 80016d4:	4692      	mov	sl, r2
 80016d6:	0005      	movs	r5, r0
 80016d8:	b085      	sub	sp, #20
 80016da:	0b24      	lsrs	r4, r4, #12
 80016dc:	0d5b      	lsrs	r3, r3, #21
 80016de:	0fce      	lsrs	r6, r1, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x26>
 80016e4:	e152      	b.n	800198c <__aeabi_ddiv+0x2cc>
 80016e6:	4ad2      	ldr	r2, [pc, #840]	; (8001a30 <__aeabi_ddiv+0x370>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x2e>
 80016ec:	e16e      	b.n	80019cc <__aeabi_ddiv+0x30c>
 80016ee:	0f42      	lsrs	r2, r0, #29
 80016f0:	00e4      	lsls	r4, r4, #3
 80016f2:	4314      	orrs	r4, r2
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	0412      	lsls	r2, r2, #16
 80016f8:	4322      	orrs	r2, r4
 80016fa:	4690      	mov	r8, r2
 80016fc:	4acd      	ldr	r2, [pc, #820]	; (8001a34 <__aeabi_ddiv+0x374>)
 80016fe:	00c5      	lsls	r5, r0, #3
 8001700:	4693      	mov	fp, r2
 8001702:	449b      	add	fp, r3
 8001704:	2300      	movs	r3, #0
 8001706:	4699      	mov	r9, r3
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	033c      	lsls	r4, r7, #12
 800170c:	007b      	lsls	r3, r7, #1
 800170e:	4650      	mov	r0, sl
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	0fff      	lsrs	r7, r7, #31
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <__aeabi_ddiv+0x5c>
 800171a:	e11a      	b.n	8001952 <__aeabi_ddiv+0x292>
 800171c:	4ac4      	ldr	r2, [pc, #784]	; (8001a30 <__aeabi_ddiv+0x370>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x64>
 8001722:	e15e      	b.n	80019e2 <__aeabi_ddiv+0x322>
 8001724:	0f42      	lsrs	r2, r0, #29
 8001726:	00e4      	lsls	r4, r4, #3
 8001728:	4322      	orrs	r2, r4
 800172a:	2480      	movs	r4, #128	; 0x80
 800172c:	0424      	lsls	r4, r4, #16
 800172e:	4314      	orrs	r4, r2
 8001730:	4ac0      	ldr	r2, [pc, #768]	; (8001a34 <__aeabi_ddiv+0x374>)
 8001732:	00c1      	lsls	r1, r0, #3
 8001734:	4694      	mov	ip, r2
 8001736:	465a      	mov	r2, fp
 8001738:	4463      	add	r3, ip
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	469b      	mov	fp, r3
 800173e:	2000      	movs	r0, #0
 8001740:	0033      	movs	r3, r6
 8001742:	407b      	eors	r3, r7
 8001744:	469a      	mov	sl, r3
 8001746:	464b      	mov	r3, r9
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d827      	bhi.n	800179c <__aeabi_ddiv+0xdc>
 800174c:	4aba      	ldr	r2, [pc, #744]	; (8001a38 <__aeabi_ddiv+0x378>)
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	58d3      	ldr	r3, [r2, r3]
 8001752:	469f      	mov	pc, r3
 8001754:	46b2      	mov	sl, r6
 8001756:	9b00      	ldr	r3, [sp, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d016      	beq.n	800178a <__aeabi_ddiv+0xca>
 800175c:	2b03      	cmp	r3, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_ddiv+0xa2>
 8001760:	e287      	b.n	8001c72 <__aeabi_ddiv+0x5b2>
 8001762:	2b01      	cmp	r3, #1
 8001764:	d000      	beq.n	8001768 <__aeabi_ddiv+0xa8>
 8001766:	e0d5      	b.n	8001914 <__aeabi_ddiv+0x254>
 8001768:	2300      	movs	r3, #0
 800176a:	2200      	movs	r2, #0
 800176c:	2500      	movs	r5, #0
 800176e:	051b      	lsls	r3, r3, #20
 8001770:	4313      	orrs	r3, r2
 8001772:	4652      	mov	r2, sl
 8001774:	07d2      	lsls	r2, r2, #31
 8001776:	4313      	orrs	r3, r2
 8001778:	0028      	movs	r0, r5
 800177a:	0019      	movs	r1, r3
 800177c:	b005      	add	sp, #20
 800177e:	bcf0      	pop	{r4, r5, r6, r7}
 8001780:	46bb      	mov	fp, r7
 8001782:	46b2      	mov	sl, r6
 8001784:	46a9      	mov	r9, r5
 8001786:	46a0      	mov	r8, r4
 8001788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178a:	2200      	movs	r2, #0
 800178c:	2500      	movs	r5, #0
 800178e:	4ba8      	ldr	r3, [pc, #672]	; (8001a30 <__aeabi_ddiv+0x370>)
 8001790:	e7ed      	b.n	800176e <__aeabi_ddiv+0xae>
 8001792:	46ba      	mov	sl, r7
 8001794:	46a0      	mov	r8, r4
 8001796:	000d      	movs	r5, r1
 8001798:	9000      	str	r0, [sp, #0]
 800179a:	e7dc      	b.n	8001756 <__aeabi_ddiv+0x96>
 800179c:	4544      	cmp	r4, r8
 800179e:	d200      	bcs.n	80017a2 <__aeabi_ddiv+0xe2>
 80017a0:	e1c4      	b.n	8001b2c <__aeabi_ddiv+0x46c>
 80017a2:	d100      	bne.n	80017a6 <__aeabi_ddiv+0xe6>
 80017a4:	e1bf      	b.n	8001b26 <__aeabi_ddiv+0x466>
 80017a6:	2301      	movs	r3, #1
 80017a8:	425b      	negs	r3, r3
 80017aa:	469c      	mov	ip, r3
 80017ac:	002e      	movs	r6, r5
 80017ae:	4640      	mov	r0, r8
 80017b0:	2500      	movs	r5, #0
 80017b2:	44e3      	add	fp, ip
 80017b4:	0223      	lsls	r3, r4, #8
 80017b6:	0e0c      	lsrs	r4, r1, #24
 80017b8:	431c      	orrs	r4, r3
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	4699      	mov	r9, r3
 80017be:	0423      	lsls	r3, r4, #16
 80017c0:	020a      	lsls	r2, r1, #8
 80017c2:	0c1f      	lsrs	r7, r3, #16
 80017c4:	4649      	mov	r1, r9
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	9701      	str	r7, [sp, #4]
 80017ca:	f7fe fd49 	bl	8000260 <__aeabi_uidivmod>
 80017ce:	0002      	movs	r2, r0
 80017d0:	437a      	muls	r2, r7
 80017d2:	040b      	lsls	r3, r1, #16
 80017d4:	0c31      	lsrs	r1, r6, #16
 80017d6:	4680      	mov	r8, r0
 80017d8:	4319      	orrs	r1, r3
 80017da:	428a      	cmp	r2, r1
 80017dc:	d907      	bls.n	80017ee <__aeabi_ddiv+0x12e>
 80017de:	2301      	movs	r3, #1
 80017e0:	425b      	negs	r3, r3
 80017e2:	469c      	mov	ip, r3
 80017e4:	1909      	adds	r1, r1, r4
 80017e6:	44e0      	add	r8, ip
 80017e8:	428c      	cmp	r4, r1
 80017ea:	d800      	bhi.n	80017ee <__aeabi_ddiv+0x12e>
 80017ec:	e201      	b.n	8001bf2 <__aeabi_ddiv+0x532>
 80017ee:	1a88      	subs	r0, r1, r2
 80017f0:	4649      	mov	r1, r9
 80017f2:	f7fe fd35 	bl	8000260 <__aeabi_uidivmod>
 80017f6:	9a01      	ldr	r2, [sp, #4]
 80017f8:	0436      	lsls	r6, r6, #16
 80017fa:	4342      	muls	r2, r0
 80017fc:	0409      	lsls	r1, r1, #16
 80017fe:	0c36      	lsrs	r6, r6, #16
 8001800:	0003      	movs	r3, r0
 8001802:	430e      	orrs	r6, r1
 8001804:	42b2      	cmp	r2, r6
 8001806:	d904      	bls.n	8001812 <__aeabi_ddiv+0x152>
 8001808:	1936      	adds	r6, r6, r4
 800180a:	3b01      	subs	r3, #1
 800180c:	42b4      	cmp	r4, r6
 800180e:	d800      	bhi.n	8001812 <__aeabi_ddiv+0x152>
 8001810:	e1e9      	b.n	8001be6 <__aeabi_ddiv+0x526>
 8001812:	1ab0      	subs	r0, r6, r2
 8001814:	4642      	mov	r2, r8
 8001816:	9e00      	ldr	r6, [sp, #0]
 8001818:	0412      	lsls	r2, r2, #16
 800181a:	431a      	orrs	r2, r3
 800181c:	0c33      	lsrs	r3, r6, #16
 800181e:	001f      	movs	r7, r3
 8001820:	0c11      	lsrs	r1, r2, #16
 8001822:	4690      	mov	r8, r2
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	0413      	lsls	r3, r2, #16
 8001828:	0432      	lsls	r2, r6, #16
 800182a:	0c16      	lsrs	r6, r2, #16
 800182c:	0032      	movs	r2, r6
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	435a      	muls	r2, r3
 8001832:	9603      	str	r6, [sp, #12]
 8001834:	437b      	muls	r3, r7
 8001836:	434e      	muls	r6, r1
 8001838:	4379      	muls	r1, r7
 800183a:	0c17      	lsrs	r7, r2, #16
 800183c:	46bc      	mov	ip, r7
 800183e:	199b      	adds	r3, r3, r6
 8001840:	4463      	add	r3, ip
 8001842:	429e      	cmp	r6, r3
 8001844:	d903      	bls.n	800184e <__aeabi_ddiv+0x18e>
 8001846:	2680      	movs	r6, #128	; 0x80
 8001848:	0276      	lsls	r6, r6, #9
 800184a:	46b4      	mov	ip, r6
 800184c:	4461      	add	r1, ip
 800184e:	0c1e      	lsrs	r6, r3, #16
 8001850:	1871      	adds	r1, r6, r1
 8001852:	0416      	lsls	r6, r2, #16
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	0c36      	lsrs	r6, r6, #16
 8001858:	199e      	adds	r6, r3, r6
 800185a:	4288      	cmp	r0, r1
 800185c:	d302      	bcc.n	8001864 <__aeabi_ddiv+0x1a4>
 800185e:	d112      	bne.n	8001886 <__aeabi_ddiv+0x1c6>
 8001860:	42b5      	cmp	r5, r6
 8001862:	d210      	bcs.n	8001886 <__aeabi_ddiv+0x1c6>
 8001864:	4643      	mov	r3, r8
 8001866:	1e5a      	subs	r2, r3, #1
 8001868:	9b00      	ldr	r3, [sp, #0]
 800186a:	469c      	mov	ip, r3
 800186c:	4465      	add	r5, ip
 800186e:	001f      	movs	r7, r3
 8001870:	429d      	cmp	r5, r3
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	191b      	adds	r3, r3, r4
 8001878:	18c0      	adds	r0, r0, r3
 800187a:	4284      	cmp	r4, r0
 800187c:	d200      	bcs.n	8001880 <__aeabi_ddiv+0x1c0>
 800187e:	e19e      	b.n	8001bbe <__aeabi_ddiv+0x4fe>
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x1c4>
 8001882:	e199      	b.n	8001bb8 <__aeabi_ddiv+0x4f8>
 8001884:	4690      	mov	r8, r2
 8001886:	1bae      	subs	r6, r5, r6
 8001888:	42b5      	cmp	r5, r6
 800188a:	41ad      	sbcs	r5, r5
 800188c:	1a40      	subs	r0, r0, r1
 800188e:	426d      	negs	r5, r5
 8001890:	1b40      	subs	r0, r0, r5
 8001892:	4284      	cmp	r4, r0
 8001894:	d100      	bne.n	8001898 <__aeabi_ddiv+0x1d8>
 8001896:	e1d2      	b.n	8001c3e <__aeabi_ddiv+0x57e>
 8001898:	4649      	mov	r1, r9
 800189a:	f7fe fce1 	bl	8000260 <__aeabi_uidivmod>
 800189e:	9a01      	ldr	r2, [sp, #4]
 80018a0:	040b      	lsls	r3, r1, #16
 80018a2:	4342      	muls	r2, r0
 80018a4:	0c31      	lsrs	r1, r6, #16
 80018a6:	0005      	movs	r5, r0
 80018a8:	4319      	orrs	r1, r3
 80018aa:	428a      	cmp	r2, r1
 80018ac:	d900      	bls.n	80018b0 <__aeabi_ddiv+0x1f0>
 80018ae:	e16c      	b.n	8001b8a <__aeabi_ddiv+0x4ca>
 80018b0:	1a88      	subs	r0, r1, r2
 80018b2:	4649      	mov	r1, r9
 80018b4:	f7fe fcd4 	bl	8000260 <__aeabi_uidivmod>
 80018b8:	9a01      	ldr	r2, [sp, #4]
 80018ba:	0436      	lsls	r6, r6, #16
 80018bc:	4342      	muls	r2, r0
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	0c36      	lsrs	r6, r6, #16
 80018c2:	0003      	movs	r3, r0
 80018c4:	430e      	orrs	r6, r1
 80018c6:	42b2      	cmp	r2, r6
 80018c8:	d900      	bls.n	80018cc <__aeabi_ddiv+0x20c>
 80018ca:	e153      	b.n	8001b74 <__aeabi_ddiv+0x4b4>
 80018cc:	9803      	ldr	r0, [sp, #12]
 80018ce:	1ab6      	subs	r6, r6, r2
 80018d0:	0002      	movs	r2, r0
 80018d2:	042d      	lsls	r5, r5, #16
 80018d4:	431d      	orrs	r5, r3
 80018d6:	9f02      	ldr	r7, [sp, #8]
 80018d8:	042b      	lsls	r3, r5, #16
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	435a      	muls	r2, r3
 80018de:	437b      	muls	r3, r7
 80018e0:	469c      	mov	ip, r3
 80018e2:	0c29      	lsrs	r1, r5, #16
 80018e4:	4348      	muls	r0, r1
 80018e6:	0c13      	lsrs	r3, r2, #16
 80018e8:	4484      	add	ip, r0
 80018ea:	4463      	add	r3, ip
 80018ec:	4379      	muls	r1, r7
 80018ee:	4298      	cmp	r0, r3
 80018f0:	d903      	bls.n	80018fa <__aeabi_ddiv+0x23a>
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	0240      	lsls	r0, r0, #9
 80018f6:	4684      	mov	ip, r0
 80018f8:	4461      	add	r1, ip
 80018fa:	0c18      	lsrs	r0, r3, #16
 80018fc:	0412      	lsls	r2, r2, #16
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	0c12      	lsrs	r2, r2, #16
 8001902:	1840      	adds	r0, r0, r1
 8001904:	189b      	adds	r3, r3, r2
 8001906:	4286      	cmp	r6, r0
 8001908:	d200      	bcs.n	800190c <__aeabi_ddiv+0x24c>
 800190a:	e100      	b.n	8001b0e <__aeabi_ddiv+0x44e>
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0x250>
 800190e:	e0fb      	b.n	8001b08 <__aeabi_ddiv+0x448>
 8001910:	2301      	movs	r3, #1
 8001912:	431d      	orrs	r5, r3
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <__aeabi_ddiv+0x37c>)
 8001916:	445b      	add	r3, fp
 8001918:	2b00      	cmp	r3, #0
 800191a:	dc00      	bgt.n	800191e <__aeabi_ddiv+0x25e>
 800191c:	e0aa      	b.n	8001a74 <__aeabi_ddiv+0x3b4>
 800191e:	076a      	lsls	r2, r5, #29
 8001920:	d000      	beq.n	8001924 <__aeabi_ddiv+0x264>
 8001922:	e13d      	b.n	8001ba0 <__aeabi_ddiv+0x4e0>
 8001924:	08e9      	lsrs	r1, r5, #3
 8001926:	4642      	mov	r2, r8
 8001928:	01d2      	lsls	r2, r2, #7
 800192a:	d506      	bpl.n	800193a <__aeabi_ddiv+0x27a>
 800192c:	4642      	mov	r2, r8
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <__aeabi_ddiv+0x380>)
 8001930:	401a      	ands	r2, r3
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	4690      	mov	r8, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	445b      	add	r3, fp
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <__aeabi_ddiv+0x384>)
 800193c:	4293      	cmp	r3, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_ddiv+0x282>
 8001940:	e723      	b.n	800178a <__aeabi_ddiv+0xca>
 8001942:	4642      	mov	r2, r8
 8001944:	055b      	lsls	r3, r3, #21
 8001946:	0755      	lsls	r5, r2, #29
 8001948:	0252      	lsls	r2, r2, #9
 800194a:	430d      	orrs	r5, r1
 800194c:	0b12      	lsrs	r2, r2, #12
 800194e:	0d5b      	lsrs	r3, r3, #21
 8001950:	e70d      	b.n	800176e <__aeabi_ddiv+0xae>
 8001952:	4651      	mov	r1, sl
 8001954:	4321      	orrs	r1, r4
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0x29a>
 8001958:	e07c      	b.n	8001a54 <__aeabi_ddiv+0x394>
 800195a:	2c00      	cmp	r4, #0
 800195c:	d100      	bne.n	8001960 <__aeabi_ddiv+0x2a0>
 800195e:	e0fb      	b.n	8001b58 <__aeabi_ddiv+0x498>
 8001960:	0020      	movs	r0, r4
 8001962:	f000 fa81 	bl	8001e68 <__clzsi2>
 8001966:	0002      	movs	r2, r0
 8001968:	3a0b      	subs	r2, #11
 800196a:	231d      	movs	r3, #29
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	4652      	mov	r2, sl
 8001970:	0001      	movs	r1, r0
 8001972:	40da      	lsrs	r2, r3
 8001974:	4653      	mov	r3, sl
 8001976:	3908      	subs	r1, #8
 8001978:	408b      	lsls	r3, r1
 800197a:	408c      	lsls	r4, r1
 800197c:	0019      	movs	r1, r3
 800197e:	4314      	orrs	r4, r2
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <__aeabi_ddiv+0x388>)
 8001982:	4458      	add	r0, fp
 8001984:	469b      	mov	fp, r3
 8001986:	4483      	add	fp, r0
 8001988:	2000      	movs	r0, #0
 800198a:	e6d9      	b.n	8001740 <__aeabi_ddiv+0x80>
 800198c:	0003      	movs	r3, r0
 800198e:	4323      	orrs	r3, r4
 8001990:	4698      	mov	r8, r3
 8001992:	d044      	beq.n	8001a1e <__aeabi_ddiv+0x35e>
 8001994:	2c00      	cmp	r4, #0
 8001996:	d100      	bne.n	800199a <__aeabi_ddiv+0x2da>
 8001998:	e0cf      	b.n	8001b3a <__aeabi_ddiv+0x47a>
 800199a:	0020      	movs	r0, r4
 800199c:	f000 fa64 	bl	8001e68 <__clzsi2>
 80019a0:	0001      	movs	r1, r0
 80019a2:	0002      	movs	r2, r0
 80019a4:	390b      	subs	r1, #11
 80019a6:	231d      	movs	r3, #29
 80019a8:	1a5b      	subs	r3, r3, r1
 80019aa:	4649      	mov	r1, r9
 80019ac:	0010      	movs	r0, r2
 80019ae:	40d9      	lsrs	r1, r3
 80019b0:	3808      	subs	r0, #8
 80019b2:	4084      	lsls	r4, r0
 80019b4:	000b      	movs	r3, r1
 80019b6:	464d      	mov	r5, r9
 80019b8:	4323      	orrs	r3, r4
 80019ba:	4698      	mov	r8, r3
 80019bc:	4085      	lsls	r5, r0
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <__aeabi_ddiv+0x38c>)
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	469b      	mov	fp, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	4699      	mov	r9, r3
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	e69e      	b.n	800170a <__aeabi_ddiv+0x4a>
 80019cc:	0002      	movs	r2, r0
 80019ce:	4322      	orrs	r2, r4
 80019d0:	4690      	mov	r8, r2
 80019d2:	d11d      	bne.n	8001a10 <__aeabi_ddiv+0x350>
 80019d4:	2208      	movs	r2, #8
 80019d6:	469b      	mov	fp, r3
 80019d8:	2302      	movs	r3, #2
 80019da:	2500      	movs	r5, #0
 80019dc:	4691      	mov	r9, r2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	e693      	b.n	800170a <__aeabi_ddiv+0x4a>
 80019e2:	4651      	mov	r1, sl
 80019e4:	4321      	orrs	r1, r4
 80019e6:	d109      	bne.n	80019fc <__aeabi_ddiv+0x33c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	464a      	mov	r2, r9
 80019ec:	431a      	orrs	r2, r3
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <__aeabi_ddiv+0x390>)
 80019f0:	4691      	mov	r9, r2
 80019f2:	469c      	mov	ip, r3
 80019f4:	2400      	movs	r4, #0
 80019f6:	2002      	movs	r0, #2
 80019f8:	44e3      	add	fp, ip
 80019fa:	e6a1      	b.n	8001740 <__aeabi_ddiv+0x80>
 80019fc:	2303      	movs	r3, #3
 80019fe:	464a      	mov	r2, r9
 8001a00:	431a      	orrs	r2, r3
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <__aeabi_ddiv+0x390>)
 8001a04:	4691      	mov	r9, r2
 8001a06:	469c      	mov	ip, r3
 8001a08:	4651      	mov	r1, sl
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	44e3      	add	fp, ip
 8001a0e:	e697      	b.n	8001740 <__aeabi_ddiv+0x80>
 8001a10:	220c      	movs	r2, #12
 8001a12:	469b      	mov	fp, r3
 8001a14:	2303      	movs	r3, #3
 8001a16:	46a0      	mov	r8, r4
 8001a18:	4691      	mov	r9, r2
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	e675      	b.n	800170a <__aeabi_ddiv+0x4a>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	4699      	mov	r9, r3
 8001a22:	2300      	movs	r3, #0
 8001a24:	469b      	mov	fp, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	2500      	movs	r5, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	e66d      	b.n	800170a <__aeabi_ddiv+0x4a>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	000007ff 	.word	0x000007ff
 8001a34:	fffffc01 	.word	0xfffffc01
 8001a38:	0800b728 	.word	0x0800b728
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	feffffff 	.word	0xfeffffff
 8001a44:	000007fe 	.word	0x000007fe
 8001a48:	000003f3 	.word	0x000003f3
 8001a4c:	fffffc0d 	.word	0xfffffc0d
 8001a50:	fffff801 	.word	0xfffff801
 8001a54:	464a      	mov	r2, r9
 8001a56:	2301      	movs	r3, #1
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	4691      	mov	r9, r2
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2001      	movs	r0, #1
 8001a60:	e66e      	b.n	8001740 <__aeabi_ddiv+0x80>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	469a      	mov	sl, r3
 8001a68:	2500      	movs	r5, #0
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001a6c:	0312      	lsls	r2, r2, #12
 8001a6e:	e67e      	b.n	800176e <__aeabi_ddiv+0xae>
 8001a70:	2501      	movs	r5, #1
 8001a72:	426d      	negs	r5, r5
 8001a74:	2201      	movs	r2, #1
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	2a38      	cmp	r2, #56	; 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_ddiv+0x3be>
 8001a7c:	e674      	b.n	8001768 <__aeabi_ddiv+0xa8>
 8001a7e:	2a1f      	cmp	r2, #31
 8001a80:	dc00      	bgt.n	8001a84 <__aeabi_ddiv+0x3c4>
 8001a82:	e0bd      	b.n	8001c00 <__aeabi_ddiv+0x540>
 8001a84:	211f      	movs	r1, #31
 8001a86:	4249      	negs	r1, r1
 8001a88:	1acb      	subs	r3, r1, r3
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	000b      	movs	r3, r1
 8001a90:	2a20      	cmp	r2, #32
 8001a92:	d004      	beq.n	8001a9e <__aeabi_ddiv+0x3de>
 8001a94:	4641      	mov	r1, r8
 8001a96:	4a7e      	ldr	r2, [pc, #504]	; (8001c90 <__aeabi_ddiv+0x5d0>)
 8001a98:	445a      	add	r2, fp
 8001a9a:	4091      	lsls	r1, r2
 8001a9c:	430d      	orrs	r5, r1
 8001a9e:	0029      	movs	r1, r5
 8001aa0:	1e4a      	subs	r2, r1, #1
 8001aa2:	4191      	sbcs	r1, r2
 8001aa4:	4319      	orrs	r1, r3
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	001d      	movs	r5, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	400d      	ands	r5, r1
 8001aae:	420b      	tst	r3, r1
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_ddiv+0x3f4>
 8001ab2:	e0d0      	b.n	8001c56 <__aeabi_ddiv+0x596>
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	400a      	ands	r2, r1
 8001aba:	2a04      	cmp	r2, #4
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_ddiv+0x400>
 8001abe:	e0c7      	b.n	8001c50 <__aeabi_ddiv+0x590>
 8001ac0:	1d0a      	adds	r2, r1, #4
 8001ac2:	428a      	cmp	r2, r1
 8001ac4:	4189      	sbcs	r1, r1
 8001ac6:	4249      	negs	r1, r1
 8001ac8:	185b      	adds	r3, r3, r1
 8001aca:	0011      	movs	r1, r2
 8001acc:	021a      	lsls	r2, r3, #8
 8001ace:	d400      	bmi.n	8001ad2 <__aeabi_ddiv+0x412>
 8001ad0:	e0be      	b.n	8001c50 <__aeabi_ddiv+0x590>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	e649      	b.n	800176e <__aeabi_ddiv+0xae>
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	4643      	mov	r3, r8
 8001ade:	0312      	lsls	r2, r2, #12
 8001ae0:	4213      	tst	r3, r2
 8001ae2:	d008      	beq.n	8001af6 <__aeabi_ddiv+0x436>
 8001ae4:	4214      	tst	r4, r2
 8001ae6:	d106      	bne.n	8001af6 <__aeabi_ddiv+0x436>
 8001ae8:	4322      	orrs	r2, r4
 8001aea:	0312      	lsls	r2, r2, #12
 8001aec:	46ba      	mov	sl, r7
 8001aee:	000d      	movs	r5, r1
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001af2:	0b12      	lsrs	r2, r2, #12
 8001af4:	e63b      	b.n	800176e <__aeabi_ddiv+0xae>
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4643      	mov	r3, r8
 8001afa:	0312      	lsls	r2, r2, #12
 8001afc:	431a      	orrs	r2, r3
 8001afe:	0312      	lsls	r2, r2, #12
 8001b00:	46b2      	mov	sl, r6
 8001b02:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001b04:	0b12      	lsrs	r2, r2, #12
 8001b06:	e632      	b.n	800176e <__aeabi_ddiv+0xae>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x44e>
 8001b0c:	e702      	b.n	8001914 <__aeabi_ddiv+0x254>
 8001b0e:	19a6      	adds	r6, r4, r6
 8001b10:	1e6a      	subs	r2, r5, #1
 8001b12:	42a6      	cmp	r6, r4
 8001b14:	d200      	bcs.n	8001b18 <__aeabi_ddiv+0x458>
 8001b16:	e089      	b.n	8001c2c <__aeabi_ddiv+0x56c>
 8001b18:	4286      	cmp	r6, r0
 8001b1a:	d200      	bcs.n	8001b1e <__aeabi_ddiv+0x45e>
 8001b1c:	e09f      	b.n	8001c5e <__aeabi_ddiv+0x59e>
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_ddiv+0x462>
 8001b20:	e0af      	b.n	8001c82 <__aeabi_ddiv+0x5c2>
 8001b22:	0015      	movs	r5, r2
 8001b24:	e6f4      	b.n	8001910 <__aeabi_ddiv+0x250>
 8001b26:	42a9      	cmp	r1, r5
 8001b28:	d900      	bls.n	8001b2c <__aeabi_ddiv+0x46c>
 8001b2a:	e63c      	b.n	80017a6 <__aeabi_ddiv+0xe6>
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	07de      	lsls	r6, r3, #31
 8001b30:	0858      	lsrs	r0, r3, #1
 8001b32:	086b      	lsrs	r3, r5, #1
 8001b34:	431e      	orrs	r6, r3
 8001b36:	07ed      	lsls	r5, r5, #31
 8001b38:	e63c      	b.n	80017b4 <__aeabi_ddiv+0xf4>
 8001b3a:	f000 f995 	bl	8001e68 <__clzsi2>
 8001b3e:	0001      	movs	r1, r0
 8001b40:	0002      	movs	r2, r0
 8001b42:	3115      	adds	r1, #21
 8001b44:	3220      	adds	r2, #32
 8001b46:	291c      	cmp	r1, #28
 8001b48:	dc00      	bgt.n	8001b4c <__aeabi_ddiv+0x48c>
 8001b4a:	e72c      	b.n	80019a6 <__aeabi_ddiv+0x2e6>
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	3808      	subs	r0, #8
 8001b50:	4083      	lsls	r3, r0
 8001b52:	2500      	movs	r5, #0
 8001b54:	4698      	mov	r8, r3
 8001b56:	e732      	b.n	80019be <__aeabi_ddiv+0x2fe>
 8001b58:	f000 f986 	bl	8001e68 <__clzsi2>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	001a      	movs	r2, r3
 8001b60:	3215      	adds	r2, #21
 8001b62:	3020      	adds	r0, #32
 8001b64:	2a1c      	cmp	r2, #28
 8001b66:	dc00      	bgt.n	8001b6a <__aeabi_ddiv+0x4aa>
 8001b68:	e6ff      	b.n	800196a <__aeabi_ddiv+0x2aa>
 8001b6a:	4654      	mov	r4, sl
 8001b6c:	3b08      	subs	r3, #8
 8001b6e:	2100      	movs	r1, #0
 8001b70:	409c      	lsls	r4, r3
 8001b72:	e705      	b.n	8001980 <__aeabi_ddiv+0x2c0>
 8001b74:	1936      	adds	r6, r6, r4
 8001b76:	3b01      	subs	r3, #1
 8001b78:	42b4      	cmp	r4, r6
 8001b7a:	d900      	bls.n	8001b7e <__aeabi_ddiv+0x4be>
 8001b7c:	e6a6      	b.n	80018cc <__aeabi_ddiv+0x20c>
 8001b7e:	42b2      	cmp	r2, r6
 8001b80:	d800      	bhi.n	8001b84 <__aeabi_ddiv+0x4c4>
 8001b82:	e6a3      	b.n	80018cc <__aeabi_ddiv+0x20c>
 8001b84:	1e83      	subs	r3, r0, #2
 8001b86:	1936      	adds	r6, r6, r4
 8001b88:	e6a0      	b.n	80018cc <__aeabi_ddiv+0x20c>
 8001b8a:	1909      	adds	r1, r1, r4
 8001b8c:	3d01      	subs	r5, #1
 8001b8e:	428c      	cmp	r4, r1
 8001b90:	d900      	bls.n	8001b94 <__aeabi_ddiv+0x4d4>
 8001b92:	e68d      	b.n	80018b0 <__aeabi_ddiv+0x1f0>
 8001b94:	428a      	cmp	r2, r1
 8001b96:	d800      	bhi.n	8001b9a <__aeabi_ddiv+0x4da>
 8001b98:	e68a      	b.n	80018b0 <__aeabi_ddiv+0x1f0>
 8001b9a:	1e85      	subs	r5, r0, #2
 8001b9c:	1909      	adds	r1, r1, r4
 8001b9e:	e687      	b.n	80018b0 <__aeabi_ddiv+0x1f0>
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	402a      	ands	r2, r5
 8001ba4:	2a04      	cmp	r2, #4
 8001ba6:	d100      	bne.n	8001baa <__aeabi_ddiv+0x4ea>
 8001ba8:	e6bc      	b.n	8001924 <__aeabi_ddiv+0x264>
 8001baa:	1d29      	adds	r1, r5, #4
 8001bac:	42a9      	cmp	r1, r5
 8001bae:	41ad      	sbcs	r5, r5
 8001bb0:	426d      	negs	r5, r5
 8001bb2:	08c9      	lsrs	r1, r1, #3
 8001bb4:	44a8      	add	r8, r5
 8001bb6:	e6b6      	b.n	8001926 <__aeabi_ddiv+0x266>
 8001bb8:	42af      	cmp	r7, r5
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x4fe>
 8001bbc:	e662      	b.n	8001884 <__aeabi_ddiv+0x1c4>
 8001bbe:	4281      	cmp	r1, r0
 8001bc0:	d804      	bhi.n	8001bcc <__aeabi_ddiv+0x50c>
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_ddiv+0x506>
 8001bc4:	e65e      	b.n	8001884 <__aeabi_ddiv+0x1c4>
 8001bc6:	42ae      	cmp	r6, r5
 8001bc8:	d800      	bhi.n	8001bcc <__aeabi_ddiv+0x50c>
 8001bca:	e65b      	b.n	8001884 <__aeabi_ddiv+0x1c4>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	425b      	negs	r3, r3
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	44e0      	add	r8, ip
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	4465      	add	r5, ip
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	425b      	negs	r3, r3
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	18c0      	adds	r0, r0, r3
 8001be4:	e64f      	b.n	8001886 <__aeabi_ddiv+0x1c6>
 8001be6:	42b2      	cmp	r2, r6
 8001be8:	d800      	bhi.n	8001bec <__aeabi_ddiv+0x52c>
 8001bea:	e612      	b.n	8001812 <__aeabi_ddiv+0x152>
 8001bec:	1e83      	subs	r3, r0, #2
 8001bee:	1936      	adds	r6, r6, r4
 8001bf0:	e60f      	b.n	8001812 <__aeabi_ddiv+0x152>
 8001bf2:	428a      	cmp	r2, r1
 8001bf4:	d800      	bhi.n	8001bf8 <__aeabi_ddiv+0x538>
 8001bf6:	e5fa      	b.n	80017ee <__aeabi_ddiv+0x12e>
 8001bf8:	1e83      	subs	r3, r0, #2
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	1909      	adds	r1, r1, r4
 8001bfe:	e5f6      	b.n	80017ee <__aeabi_ddiv+0x12e>
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <__aeabi_ddiv+0x5d4>)
 8001c02:	0028      	movs	r0, r5
 8001c04:	445b      	add	r3, fp
 8001c06:	4641      	mov	r1, r8
 8001c08:	409d      	lsls	r5, r3
 8001c0a:	4099      	lsls	r1, r3
 8001c0c:	40d0      	lsrs	r0, r2
 8001c0e:	1e6b      	subs	r3, r5, #1
 8001c10:	419d      	sbcs	r5, r3
 8001c12:	4643      	mov	r3, r8
 8001c14:	4301      	orrs	r1, r0
 8001c16:	4329      	orrs	r1, r5
 8001c18:	40d3      	lsrs	r3, r2
 8001c1a:	074a      	lsls	r2, r1, #29
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x560>
 8001c1e:	e755      	b.n	8001acc <__aeabi_ddiv+0x40c>
 8001c20:	220f      	movs	r2, #15
 8001c22:	400a      	ands	r2, r1
 8001c24:	2a04      	cmp	r2, #4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_ddiv+0x56a>
 8001c28:	e74a      	b.n	8001ac0 <__aeabi_ddiv+0x400>
 8001c2a:	e74f      	b.n	8001acc <__aeabi_ddiv+0x40c>
 8001c2c:	0015      	movs	r5, r2
 8001c2e:	4286      	cmp	r6, r0
 8001c30:	d000      	beq.n	8001c34 <__aeabi_ddiv+0x574>
 8001c32:	e66d      	b.n	8001910 <__aeabi_ddiv+0x250>
 8001c34:	9a00      	ldr	r2, [sp, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d000      	beq.n	8001c3c <__aeabi_ddiv+0x57c>
 8001c3a:	e669      	b.n	8001910 <__aeabi_ddiv+0x250>
 8001c3c:	e66a      	b.n	8001914 <__aeabi_ddiv+0x254>
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <__aeabi_ddiv+0x5d8>)
 8001c40:	445b      	add	r3, fp
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_ddiv+0x588>
 8001c46:	e713      	b.n	8001a70 <__aeabi_ddiv+0x3b0>
 8001c48:	2501      	movs	r5, #1
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	44a8      	add	r8, r5
 8001c4e:	e66a      	b.n	8001926 <__aeabi_ddiv+0x266>
 8001c50:	075d      	lsls	r5, r3, #29
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	0b1a      	lsrs	r2, r3, #12
 8001c56:	08c9      	lsrs	r1, r1, #3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	430d      	orrs	r5, r1
 8001c5c:	e587      	b.n	800176e <__aeabi_ddiv+0xae>
 8001c5e:	9900      	ldr	r1, [sp, #0]
 8001c60:	3d02      	subs	r5, #2
 8001c62:	004a      	lsls	r2, r1, #1
 8001c64:	428a      	cmp	r2, r1
 8001c66:	41bf      	sbcs	r7, r7
 8001c68:	427f      	negs	r7, r7
 8001c6a:	193f      	adds	r7, r7, r4
 8001c6c:	19f6      	adds	r6, r6, r7
 8001c6e:	9200      	str	r2, [sp, #0]
 8001c70:	e7dd      	b.n	8001c2e <__aeabi_ddiv+0x56e>
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	4643      	mov	r3, r8
 8001c76:	0312      	lsls	r2, r2, #12
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	0312      	lsls	r2, r2, #12
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001c7e:	0b12      	lsrs	r2, r2, #12
 8001c80:	e575      	b.n	800176e <__aeabi_ddiv+0xae>
 8001c82:	9900      	ldr	r1, [sp, #0]
 8001c84:	4299      	cmp	r1, r3
 8001c86:	d3ea      	bcc.n	8001c5e <__aeabi_ddiv+0x59e>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	e7d3      	b.n	8001c34 <__aeabi_ddiv+0x574>
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	0000043e 	.word	0x0000043e
 8001c94:	0000041e 	.word	0x0000041e
 8001c98:	000003ff 	.word	0x000003ff

08001c9c <__aeabi_ui2d>:
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	1e04      	subs	r4, r0, #0
 8001ca0:	d010      	beq.n	8001cc4 <__aeabi_ui2d+0x28>
 8001ca2:	f000 f8e1 	bl	8001e68 <__clzsi2>
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <__aeabi_ui2d+0x48>)
 8001ca8:	1a1b      	subs	r3, r3, r0
 8001caa:	280a      	cmp	r0, #10
 8001cac:	dc11      	bgt.n	8001cd2 <__aeabi_ui2d+0x36>
 8001cae:	220b      	movs	r2, #11
 8001cb0:	0021      	movs	r1, r4
 8001cb2:	1a12      	subs	r2, r2, r0
 8001cb4:	40d1      	lsrs	r1, r2
 8001cb6:	3015      	adds	r0, #21
 8001cb8:	030a      	lsls	r2, r1, #12
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	4084      	lsls	r4, r0
 8001cbe:	0b12      	lsrs	r2, r2, #12
 8001cc0:	0d5b      	lsrs	r3, r3, #21
 8001cc2:	e001      	b.n	8001cc8 <__aeabi_ui2d+0x2c>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	051b      	lsls	r3, r3, #20
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	0020      	movs	r0, r4
 8001cce:	0019      	movs	r1, r3
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	0022      	movs	r2, r4
 8001cd4:	380b      	subs	r0, #11
 8001cd6:	4082      	lsls	r2, r0
 8001cd8:	055b      	lsls	r3, r3, #21
 8001cda:	0312      	lsls	r2, r2, #12
 8001cdc:	2400      	movs	r4, #0
 8001cde:	0b12      	lsrs	r2, r2, #12
 8001ce0:	0d5b      	lsrs	r3, r3, #21
 8001ce2:	e7f1      	b.n	8001cc8 <__aeabi_ui2d+0x2c>
 8001ce4:	0000041e 	.word	0x0000041e

08001ce8 <__aeabi_d2f>:
 8001ce8:	0002      	movs	r2, r0
 8001cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cec:	004b      	lsls	r3, r1, #1
 8001cee:	030d      	lsls	r5, r1, #12
 8001cf0:	0f40      	lsrs	r0, r0, #29
 8001cf2:	0d5b      	lsrs	r3, r3, #21
 8001cf4:	0fcc      	lsrs	r4, r1, #31
 8001cf6:	0a6d      	lsrs	r5, r5, #9
 8001cf8:	493a      	ldr	r1, [pc, #232]	; (8001de4 <__aeabi_d2f+0xfc>)
 8001cfa:	4305      	orrs	r5, r0
 8001cfc:	1c58      	adds	r0, r3, #1
 8001cfe:	00d7      	lsls	r7, r2, #3
 8001d00:	4208      	tst	r0, r1
 8001d02:	d00a      	beq.n	8001d1a <__aeabi_d2f+0x32>
 8001d04:	4938      	ldr	r1, [pc, #224]	; (8001de8 <__aeabi_d2f+0x100>)
 8001d06:	1859      	adds	r1, r3, r1
 8001d08:	29fe      	cmp	r1, #254	; 0xfe
 8001d0a:	dd16      	ble.n	8001d3a <__aeabi_d2f+0x52>
 8001d0c:	20ff      	movs	r0, #255	; 0xff
 8001d0e:	2200      	movs	r2, #0
 8001d10:	05c0      	lsls	r0, r0, #23
 8001d12:	4310      	orrs	r0, r2
 8001d14:	07e4      	lsls	r4, r4, #31
 8001d16:	4320      	orrs	r0, r4
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <__aeabi_d2f+0x44>
 8001d1e:	433d      	orrs	r5, r7
 8001d20:	d026      	beq.n	8001d70 <__aeabi_d2f+0x88>
 8001d22:	2205      	movs	r2, #5
 8001d24:	0192      	lsls	r2, r2, #6
 8001d26:	0a52      	lsrs	r2, r2, #9
 8001d28:	b2d8      	uxtb	r0, r3
 8001d2a:	e7f1      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d2c:	432f      	orrs	r7, r5
 8001d2e:	d0ed      	beq.n	8001d0c <__aeabi_d2f+0x24>
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	03d2      	lsls	r2, r2, #15
 8001d34:	20ff      	movs	r0, #255	; 0xff
 8001d36:	432a      	orrs	r2, r5
 8001d38:	e7ea      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	dd1b      	ble.n	8001d76 <__aeabi_d2f+0x8e>
 8001d3e:	0192      	lsls	r2, r2, #6
 8001d40:	1e50      	subs	r0, r2, #1
 8001d42:	4182      	sbcs	r2, r0
 8001d44:	00ed      	lsls	r5, r5, #3
 8001d46:	0f7f      	lsrs	r7, r7, #29
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	433a      	orrs	r2, r7
 8001d4c:	0753      	lsls	r3, r2, #29
 8001d4e:	d047      	beq.n	8001de0 <__aeabi_d2f+0xf8>
 8001d50:	230f      	movs	r3, #15
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_d2f+0x72>
 8001d58:	3204      	adds	r2, #4
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	04db      	lsls	r3, r3, #19
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d03e      	beq.n	8001de0 <__aeabi_d2f+0xf8>
 8001d62:	1c48      	adds	r0, r1, #1
 8001d64:	29fe      	cmp	r1, #254	; 0xfe
 8001d66:	d0d1      	beq.n	8001d0c <__aeabi_d2f+0x24>
 8001d68:	0192      	lsls	r2, r2, #6
 8001d6a:	0a52      	lsrs	r2, r2, #9
 8001d6c:	b2c0      	uxtb	r0, r0
 8001d6e:	e7cf      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d70:	2000      	movs	r0, #0
 8001d72:	2200      	movs	r2, #0
 8001d74:	e7cc      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d76:	000a      	movs	r2, r1
 8001d78:	3217      	adds	r2, #23
 8001d7a:	db2f      	blt.n	8001ddc <__aeabi_d2f+0xf4>
 8001d7c:	2680      	movs	r6, #128	; 0x80
 8001d7e:	0436      	lsls	r6, r6, #16
 8001d80:	432e      	orrs	r6, r5
 8001d82:	251e      	movs	r5, #30
 8001d84:	1a6d      	subs	r5, r5, r1
 8001d86:	2d1f      	cmp	r5, #31
 8001d88:	dd11      	ble.n	8001dae <__aeabi_d2f+0xc6>
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	1a52      	subs	r2, r2, r1
 8001d90:	0031      	movs	r1, r6
 8001d92:	40d1      	lsrs	r1, r2
 8001d94:	2d20      	cmp	r5, #32
 8001d96:	d004      	beq.n	8001da2 <__aeabi_d2f+0xba>
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <__aeabi_d2f+0x104>)
 8001d9a:	4694      	mov	ip, r2
 8001d9c:	4463      	add	r3, ip
 8001d9e:	409e      	lsls	r6, r3
 8001da0:	4337      	orrs	r7, r6
 8001da2:	003a      	movs	r2, r7
 8001da4:	1e53      	subs	r3, r2, #1
 8001da6:	419a      	sbcs	r2, r3
 8001da8:	430a      	orrs	r2, r1
 8001daa:	2100      	movs	r1, #0
 8001dac:	e7ce      	b.n	8001d4c <__aeabi_d2f+0x64>
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <__aeabi_d2f+0x108>)
 8001db0:	0038      	movs	r0, r7
 8001db2:	4694      	mov	ip, r2
 8001db4:	4463      	add	r3, ip
 8001db6:	4098      	lsls	r0, r3
 8001db8:	003a      	movs	r2, r7
 8001dba:	1e41      	subs	r1, r0, #1
 8001dbc:	4188      	sbcs	r0, r1
 8001dbe:	409e      	lsls	r6, r3
 8001dc0:	40ea      	lsrs	r2, r5
 8001dc2:	4330      	orrs	r0, r6
 8001dc4:	4302      	orrs	r2, r0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	0753      	lsls	r3, r2, #29
 8001dca:	d1c1      	bne.n	8001d50 <__aeabi_d2f+0x68>
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0013      	movs	r3, r2
 8001dd0:	04c9      	lsls	r1, r1, #19
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	420a      	tst	r2, r1
 8001dd8:	d1c6      	bne.n	8001d68 <__aeabi_d2f+0x80>
 8001dda:	e7a3      	b.n	8001d24 <__aeabi_d2f+0x3c>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e7a0      	b.n	8001d22 <__aeabi_d2f+0x3a>
 8001de0:	000b      	movs	r3, r1
 8001de2:	e79f      	b.n	8001d24 <__aeabi_d2f+0x3c>
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	fffffc80 	.word	0xfffffc80
 8001dec:	fffffca2 	.word	0xfffffca2
 8001df0:	fffffc82 	.word	0xfffffc82

08001df4 <__aeabi_cfrcmple>:
 8001df4:	4684      	mov	ip, r0
 8001df6:	0008      	movs	r0, r1
 8001df8:	4661      	mov	r1, ip
 8001dfa:	e7ff      	b.n	8001dfc <__aeabi_cfcmpeq>

08001dfc <__aeabi_cfcmpeq>:
 8001dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001dfe:	f000 f8c9 	bl	8001f94 <__lesf2>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d401      	bmi.n	8001e0a <__aeabi_cfcmpeq+0xe>
 8001e06:	2100      	movs	r1, #0
 8001e08:	42c8      	cmn	r0, r1
 8001e0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001e0c <__aeabi_fcmpeq>:
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	f000 f855 	bl	8001ebc <__eqsf2>
 8001e12:	4240      	negs	r0, r0
 8001e14:	3001      	adds	r0, #1
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <__aeabi_fcmplt>:
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	f000 f8bb 	bl	8001f94 <__lesf2>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	db01      	blt.n	8001e26 <__aeabi_fcmplt+0xe>
 8001e22:	2000      	movs	r0, #0
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	2001      	movs	r0, #1
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)

08001e2c <__aeabi_fcmple>:
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	f000 f8b1 	bl	8001f94 <__lesf2>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	dd01      	ble.n	8001e3a <__aeabi_fcmple+0xe>
 8001e36:	2000      	movs	r0, #0
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)

08001e40 <__aeabi_fcmpgt>:
 8001e40:	b510      	push	{r4, lr}
 8001e42:	f000 f861 	bl	8001f08 <__gesf2>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	dc01      	bgt.n	8001e4e <__aeabi_fcmpgt+0xe>
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	bd10      	pop	{r4, pc}
 8001e4e:	2001      	movs	r0, #1
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)

08001e54 <__aeabi_fcmpge>:
 8001e54:	b510      	push	{r4, lr}
 8001e56:	f000 f857 	bl	8001f08 <__gesf2>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	da01      	bge.n	8001e62 <__aeabi_fcmpge+0xe>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	2001      	movs	r0, #1
 8001e64:	bd10      	pop	{r4, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)

08001e68 <__clzsi2>:
 8001e68:	211c      	movs	r1, #28
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	4298      	cmp	r0, r3
 8001e70:	d301      	bcc.n	8001e76 <__clzsi2+0xe>
 8001e72:	0c00      	lsrs	r0, r0, #16
 8001e74:	3910      	subs	r1, #16
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	4298      	cmp	r0, r3
 8001e7a:	d301      	bcc.n	8001e80 <__clzsi2+0x18>
 8001e7c:	0a00      	lsrs	r0, r0, #8
 8001e7e:	3908      	subs	r1, #8
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	4298      	cmp	r0, r3
 8001e84:	d301      	bcc.n	8001e8a <__clzsi2+0x22>
 8001e86:	0900      	lsrs	r0, r0, #4
 8001e88:	3904      	subs	r1, #4
 8001e8a:	a202      	add	r2, pc, #8	; (adr r2, 8001e94 <__clzsi2+0x2c>)
 8001e8c:	5c10      	ldrb	r0, [r2, r0]
 8001e8e:	1840      	adds	r0, r0, r1
 8001e90:	4770      	bx	lr
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	02020304 	.word	0x02020304
 8001e98:	01010101 	.word	0x01010101
	...

08001ea4 <__clzdi2>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	2900      	cmp	r1, #0
 8001ea8:	d103      	bne.n	8001eb2 <__clzdi2+0xe>
 8001eaa:	f7ff ffdd 	bl	8001e68 <__clzsi2>
 8001eae:	3020      	adds	r0, #32
 8001eb0:	e002      	b.n	8001eb8 <__clzdi2+0x14>
 8001eb2:	0008      	movs	r0, r1
 8001eb4:	f7ff ffd8 	bl	8001e68 <__clzsi2>
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)

08001ebc <__eqsf2>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	0042      	lsls	r2, r0, #1
 8001ec0:	0245      	lsls	r5, r0, #9
 8001ec2:	024e      	lsls	r6, r1, #9
 8001ec4:	004c      	lsls	r4, r1, #1
 8001ec6:	0fc3      	lsrs	r3, r0, #31
 8001ec8:	0a6d      	lsrs	r5, r5, #9
 8001eca:	2001      	movs	r0, #1
 8001ecc:	0e12      	lsrs	r2, r2, #24
 8001ece:	0a76      	lsrs	r6, r6, #9
 8001ed0:	0e24      	lsrs	r4, r4, #24
 8001ed2:	0fc9      	lsrs	r1, r1, #31
 8001ed4:	2aff      	cmp	r2, #255	; 0xff
 8001ed6:	d006      	beq.n	8001ee6 <__eqsf2+0x2a>
 8001ed8:	2cff      	cmp	r4, #255	; 0xff
 8001eda:	d003      	beq.n	8001ee4 <__eqsf2+0x28>
 8001edc:	42a2      	cmp	r2, r4
 8001ede:	d101      	bne.n	8001ee4 <__eqsf2+0x28>
 8001ee0:	42b5      	cmp	r5, r6
 8001ee2:	d006      	beq.n	8001ef2 <__eqsf2+0x36>
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d1fc      	bne.n	8001ee4 <__eqsf2+0x28>
 8001eea:	2cff      	cmp	r4, #255	; 0xff
 8001eec:	d1fa      	bne.n	8001ee4 <__eqsf2+0x28>
 8001eee:	2e00      	cmp	r6, #0
 8001ef0:	d1f8      	bne.n	8001ee4 <__eqsf2+0x28>
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d006      	beq.n	8001f04 <__eqsf2+0x48>
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d1f3      	bne.n	8001ee4 <__eqsf2+0x28>
 8001efc:	0028      	movs	r0, r5
 8001efe:	1e43      	subs	r3, r0, #1
 8001f00:	4198      	sbcs	r0, r3
 8001f02:	e7ef      	b.n	8001ee4 <__eqsf2+0x28>
 8001f04:	2000      	movs	r0, #0
 8001f06:	e7ed      	b.n	8001ee4 <__eqsf2+0x28>

08001f08 <__gesf2>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	0042      	lsls	r2, r0, #1
 8001f0c:	0245      	lsls	r5, r0, #9
 8001f0e:	024e      	lsls	r6, r1, #9
 8001f10:	004c      	lsls	r4, r1, #1
 8001f12:	0fc3      	lsrs	r3, r0, #31
 8001f14:	0a6d      	lsrs	r5, r5, #9
 8001f16:	0e12      	lsrs	r2, r2, #24
 8001f18:	0a76      	lsrs	r6, r6, #9
 8001f1a:	0e24      	lsrs	r4, r4, #24
 8001f1c:	0fc8      	lsrs	r0, r1, #31
 8001f1e:	2aff      	cmp	r2, #255	; 0xff
 8001f20:	d01b      	beq.n	8001f5a <__gesf2+0x52>
 8001f22:	2cff      	cmp	r4, #255	; 0xff
 8001f24:	d00e      	beq.n	8001f44 <__gesf2+0x3c>
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	d11b      	bne.n	8001f62 <__gesf2+0x5a>
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d101      	bne.n	8001f32 <__gesf2+0x2a>
 8001f2e:	2e00      	cmp	r6, #0
 8001f30:	d01c      	beq.n	8001f6c <__gesf2+0x64>
 8001f32:	2d00      	cmp	r5, #0
 8001f34:	d00c      	beq.n	8001f50 <__gesf2+0x48>
 8001f36:	4283      	cmp	r3, r0
 8001f38:	d01c      	beq.n	8001f74 <__gesf2+0x6c>
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	1e58      	subs	r0, r3, #1
 8001f3e:	4008      	ands	r0, r1
 8001f40:	3801      	subs	r0, #1
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	2e00      	cmp	r6, #0
 8001f46:	d122      	bne.n	8001f8e <__gesf2+0x86>
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d1f4      	bne.n	8001f36 <__gesf2+0x2e>
 8001f4c:	2d00      	cmp	r5, #0
 8001f4e:	d1f2      	bne.n	8001f36 <__gesf2+0x2e>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d1f6      	bne.n	8001f42 <__gesf2+0x3a>
 8001f54:	2001      	movs	r0, #1
 8001f56:	4240      	negs	r0, r0
 8001f58:	e7f3      	b.n	8001f42 <__gesf2+0x3a>
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	d117      	bne.n	8001f8e <__gesf2+0x86>
 8001f5e:	2cff      	cmp	r4, #255	; 0xff
 8001f60:	d0f0      	beq.n	8001f44 <__gesf2+0x3c>
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	d1e7      	bne.n	8001f36 <__gesf2+0x2e>
 8001f66:	2e00      	cmp	r6, #0
 8001f68:	d1e5      	bne.n	8001f36 <__gesf2+0x2e>
 8001f6a:	e7e6      	b.n	8001f3a <__gesf2+0x32>
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	2d00      	cmp	r5, #0
 8001f70:	d0e7      	beq.n	8001f42 <__gesf2+0x3a>
 8001f72:	e7e2      	b.n	8001f3a <__gesf2+0x32>
 8001f74:	42a2      	cmp	r2, r4
 8001f76:	dc05      	bgt.n	8001f84 <__gesf2+0x7c>
 8001f78:	dbea      	blt.n	8001f50 <__gesf2+0x48>
 8001f7a:	42b5      	cmp	r5, r6
 8001f7c:	d802      	bhi.n	8001f84 <__gesf2+0x7c>
 8001f7e:	d3e7      	bcc.n	8001f50 <__gesf2+0x48>
 8001f80:	2000      	movs	r0, #0
 8001f82:	e7de      	b.n	8001f42 <__gesf2+0x3a>
 8001f84:	4243      	negs	r3, r0
 8001f86:	4158      	adcs	r0, r3
 8001f88:	0040      	lsls	r0, r0, #1
 8001f8a:	3801      	subs	r0, #1
 8001f8c:	e7d9      	b.n	8001f42 <__gesf2+0x3a>
 8001f8e:	2002      	movs	r0, #2
 8001f90:	4240      	negs	r0, r0
 8001f92:	e7d6      	b.n	8001f42 <__gesf2+0x3a>

08001f94 <__lesf2>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	0042      	lsls	r2, r0, #1
 8001f98:	0245      	lsls	r5, r0, #9
 8001f9a:	024e      	lsls	r6, r1, #9
 8001f9c:	004c      	lsls	r4, r1, #1
 8001f9e:	0fc3      	lsrs	r3, r0, #31
 8001fa0:	0a6d      	lsrs	r5, r5, #9
 8001fa2:	0e12      	lsrs	r2, r2, #24
 8001fa4:	0a76      	lsrs	r6, r6, #9
 8001fa6:	0e24      	lsrs	r4, r4, #24
 8001fa8:	0fc8      	lsrs	r0, r1, #31
 8001faa:	2aff      	cmp	r2, #255	; 0xff
 8001fac:	d00b      	beq.n	8001fc6 <__lesf2+0x32>
 8001fae:	2cff      	cmp	r4, #255	; 0xff
 8001fb0:	d00d      	beq.n	8001fce <__lesf2+0x3a>
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d11f      	bne.n	8001ff6 <__lesf2+0x62>
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	d116      	bne.n	8001fe8 <__lesf2+0x54>
 8001fba:	2e00      	cmp	r6, #0
 8001fbc:	d114      	bne.n	8001fe8 <__lesf2+0x54>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	d010      	beq.n	8001fe6 <__lesf2+0x52>
 8001fc4:	e009      	b.n	8001fda <__lesf2+0x46>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d10c      	bne.n	8001fe4 <__lesf2+0x50>
 8001fca:	2cff      	cmp	r4, #255	; 0xff
 8001fcc:	d113      	bne.n	8001ff6 <__lesf2+0x62>
 8001fce:	2e00      	cmp	r6, #0
 8001fd0:	d108      	bne.n	8001fe4 <__lesf2+0x50>
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d008      	beq.n	8001fe8 <__lesf2+0x54>
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	d012      	beq.n	8002000 <__lesf2+0x6c>
 8001fda:	2102      	movs	r1, #2
 8001fdc:	1e58      	subs	r0, r3, #1
 8001fde:	4008      	ands	r0, r1
 8001fe0:	3801      	subs	r0, #1
 8001fe2:	e000      	b.n	8001fe6 <__lesf2+0x52>
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d1f4      	bne.n	8001fd6 <__lesf2+0x42>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d1fa      	bne.n	8001fe6 <__lesf2+0x52>
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	4240      	negs	r0, r0
 8001ff4:	e7f7      	b.n	8001fe6 <__lesf2+0x52>
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d1ed      	bne.n	8001fd6 <__lesf2+0x42>
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d1eb      	bne.n	8001fd6 <__lesf2+0x42>
 8001ffe:	e7ec      	b.n	8001fda <__lesf2+0x46>
 8002000:	42a2      	cmp	r2, r4
 8002002:	dc05      	bgt.n	8002010 <__lesf2+0x7c>
 8002004:	dbf2      	blt.n	8001fec <__lesf2+0x58>
 8002006:	42b5      	cmp	r5, r6
 8002008:	d802      	bhi.n	8002010 <__lesf2+0x7c>
 800200a:	d3ef      	bcc.n	8001fec <__lesf2+0x58>
 800200c:	2000      	movs	r0, #0
 800200e:	e7ea      	b.n	8001fe6 <__lesf2+0x52>
 8002010:	4243      	negs	r3, r0
 8002012:	4158      	adcs	r0, r3
 8002014:	0040      	lsls	r0, r0, #1
 8002016:	3801      	subs	r0, #1
 8002018:	e7e5      	b.n	8001fe6 <__lesf2+0x52>
 800201a:	46c0      	nop			; (mov r8, r8)

0800201c <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800201c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800201e:	f000 f967 	bl	80022f0 <SystemApp_Init>
//  SubghzApp_Init();
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8002022:	bd10      	pop	{r4, pc}

08002024 <Error_Handler>:
		Error_Handler();
	}
}

void Error_Handler(void)
{
 8002024:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002026:	b672      	cpsid	i
	__disable_irq();
	MX_GPIO_Init();
 8002028:	f007 f9cc 	bl	80093c4 <MX_GPIO_Init>
	while (1){}
 800202c:	e7fe      	b.n	800202c <Error_Handler+0x8>
	...

08002030 <SystemClock_Config_MSI>:
{
 8002030:	b530      	push	{r4, r5, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002032:	2414      	movs	r4, #20
{
 8002034:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	2238      	movs	r2, #56	; 0x38
 8002038:	2100      	movs	r1, #0
 800203a:	a80e      	add	r0, sp, #56	; 0x38
 800203c:	f008 fcfc 	bl	800aa38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	0022      	movs	r2, r4
 8002042:	2100      	movs	r1, #0
 8002044:	4668      	mov	r0, sp
 8002046:	f008 fcf7 	bl	800aa38 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204a:	2224      	movs	r2, #36	; 0x24
 800204c:	2100      	movs	r1, #0
 800204e:	a805      	add	r0, sp, #20
 8002050:	f008 fcf2 	bl	800aa38 <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	491f      	ldr	r1, [pc, #124]	; (80020d4 <SystemClock_Config_MSI+0xa4>)
 8002058:	4d1f      	ldr	r5, [pc, #124]	; (80020d8 <SystemClock_Config_MSI+0xa8>)
 800205a:	680a      	ldr	r2, [r1, #0]
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	402a      	ands	r2, r5
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
	HAL_PWR_EnableBkUpAccess();
 8002064:	f001 fcb8 	bl	80039d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002068:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <SystemClock_Config_MSI+0xac>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206a:	a80e      	add	r0, sp, #56	; 0x38
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800206c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800206e:	402b      	ands	r3, r5
 8002070:	6513      	str	r3, [r2, #80]	; 0x50
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002078:	22c0      	movs	r2, #192	; 0xc0
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800207a:	3bff      	subs	r3, #255	; 0xff
 800207c:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800207e:	2300      	movs	r3, #0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002080:	0212      	lsls	r2, r2, #8
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002082:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002084:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002086:	9217      	str	r2, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002088:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208a:	f001 fd9b 	bl	8003bc4 <HAL_RCC_OscConfig>
 800208e:	1e01      	subs	r1, r0, #0
 8002090:	d001      	beq.n	8002096 <SystemClock_Config_MSI+0x66>
		Error_Handler();
 8002092:	f7ff ffc7 	bl	8002024 <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002096:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002098:	9001      	str	r0, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209a:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800209c:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209e:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020a0:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	9300      	str	r3, [sp, #0]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020a4:	f002 f818 	bl	80040d8 <HAL_RCC_ClockConfig>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1f2      	bne.n	8002092 <SystemClock_Config_MSI+0x62>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80020ac:	23ab      	movs	r3, #171	; 0xab
 80020ae:	9305      	str	r3, [sp, #20]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	031b      	lsls	r3, r3, #12
 80020b4:	930c      	str	r3, [sp, #48]	; 0x30
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80020b6:	2304      	movs	r3, #4
 80020b8:	9308      	str	r3, [sp, #32]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020ba:	2380      	movs	r3, #128	; 0x80
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020bc:	9007      	str	r0, [sp, #28]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020be:	900a      	str	r0, [sp, #40]	; 0x28
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020c0:	025b      	lsls	r3, r3, #9
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c2:	a805      	add	r0, sp, #20
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020c4:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c6:	f002 f8f5 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d1e1      	bne.n	8002092 <SystemClock_Config_MSI+0x62>
}
 80020ce:	b01d      	add	sp, #116	; 0x74
 80020d0:	bd30      	pop	{r4, r5, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40007000 	.word	0x40007000
 80020d8:	ffffe7ff 	.word	0xffffe7ff
 80020dc:	40021000 	.word	0x40021000

080020e0 <main>:
{
 80020e0:	b510      	push	{r4, lr}
	HAL_Init();
 80020e2:	f000 fcf1 	bl	8002ac8 <HAL_Init>
		SystemClock_Config_MSI();
 80020e6:	f7ff ffa3 	bl	8002030 <SystemClock_Config_MSI>
	MX_SubGHz_Phy_Init();
 80020ea:	f7ff ff97 	bl	800201c <MX_SubGHz_Phy_Init>
	Main_Task();
 80020ee:	f005 fbf1 	bl	80078d4 <Main_Task>
}
 80020f2:	2000      	movs	r0, #0
 80020f4:	bd10      	pop	{r4, pc}
	...

080020f8 <HAL_RTC_MspInit>:
    Error_Handler();
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	0004      	movs	r4, r0
 80020fc:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	2238      	movs	r2, #56	; 0x38
 8002100:	2100      	movs	r1, #0
 8002102:	4668      	mov	r0, sp
 8002104:	f008 fc98 	bl	800aa38 <memset>
  if (rtcHandle->Instance == RTC)
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RTC_MspInit+0x50>)
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d118      	bne.n	8002142 <HAL_RTC_MspInit+0x4a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002110:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002112:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002114:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002116:	33fc      	adds	r3, #252	; 0xfc
 8002118:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211a:	f001 fd53 	bl	8003bc4 <HAL_RCC_OscConfig>
 800211e:	2800      	cmp	r0, #0
 8002120:	d001      	beq.n	8002126 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8002122:	f7ff ff7f 	bl	8002024 <Error_Handler>
    }
    __HAL_RCC_RTC_ENABLE();
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_RTC_MspInit+0x54>)
 800212a:	02db      	lsls	r3, r3, #11
 800212c:	6d11      	ldr	r1, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800212e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002130:	430b      	orrs	r3, r1
 8002132:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	0011      	movs	r1, r2
 8002138:	f001 f868 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800213c:	2002      	movs	r0, #2
 800213e:	f001 f88f 	bl	8003260 <HAL_NVIC_EnableIRQ>
  }
}
 8002142:	b00e      	add	sp, #56	; 0x38
 8002144:	bd10      	pop	{r4, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40002800 	.word	0x40002800
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_MspInit>:
#include "sys_debug.h"

#define ENABLE_FAST_WAKEUP
void HAL_MspInit(void)
{
	__HAL_RCC_PWR_CLK_ENABLE();
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_MspInit+0x28>)
 8002154:	055b      	lsls	r3, r3, #21
 8002156:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002158:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 800215a:	430b      	orrs	r3, r1
 800215c:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_DisablePVD();
 800215e:	f001 fc45 	bl	80039ec <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 8002162:	f001 fcd3 	bl	8003b0c <HAL_PWREx_EnableUltraLowPower>
	__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002166:	2308      	movs	r3, #8
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_MspInit+0x2c>)
 800216a:	6811      	ldr	r1, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6013      	str	r3, [r2, #0]
	DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

	#ifdef ENABLE_FAST_WAKEUP
		HAL_PWREx_EnableFastWakeUp();
 8002170:	f001 fcb8 	bl	8003ae4 <HAL_PWREx_EnableFastWakeUp>
	#else
		HAL_PWREx_DisableFastWakeUp();
	#endif
}
 8002174:	bd10      	pop	{r4, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	40021000 	.word	0x40021000
 800217c:	40022000 	.word	0x40022000

08002180 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_usart1_tx;
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart2_tx;
extern UART_HandleTypeDef huart2;

void NMI_Handler(void){ while (1){}}
 8002180:	e7fe      	b.n	8002180 <NMI_Handler>

08002182 <HardFault_Handler>:
void HardFault_Handler(void){ while (1){}}
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler>

08002184 <SVC_Handler>:
void MemManage_Handler(void){ while (1){}}
void BusFault_Handler(void){ while (1){}}
void UsageFault_Handler(void){ while (1){}}
void SVC_Handler(void){}
 8002184:	4770      	bx	lr

08002186 <PendSV_Handler>:
 8002186:	4770      	bx	lr

08002188 <SysTick_Handler>:
void DebugMon_Handler(void){}
void PendSV_Handler(void){}
void SysTick_Handler(void)
{
 8002188:	b510      	push	{r4, lr}
	RtCountSystick_u32++;
 800218a:	4a03      	ldr	r2, [pc, #12]	; (8002198 <SysTick_Handler+0x10>)
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	6013      	str	r3, [r2, #0]
	HAL_IncTick();
 8002192:	f000 fcad 	bl	8002af0 <HAL_IncTick>
}
 8002196:	bd10      	pop	{r4, pc}
 8002198:	200015e8 	.word	0x200015e8

0800219c <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 800219c:	b510      	push	{r4, lr}
	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_0);
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <EXTI0_1_IRQHandler+0x10>)
 80021a0:	f001 f932 	bl	8003408 <HAL_EXTI_IRQHandler>
		HAL_EXTI_IRQHandler(&H_EXTI_1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <EXTI0_1_IRQHandler+0x14>)
 80021a6:	f001 f92f 	bl	8003408 <HAL_EXTI_IRQHandler>
	#endif
}
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	20000398 	.word	0x20000398
 80021b0:	20000390 	.word	0x20000390

080021b4 <EXTI2_3_IRQHandler>:
 80021b4:	4770      	bx	lr
	...

080021b8 <EXTI4_15_IRQHandler>:
		HAL_EXTI_IRQHandler(&H_EXTI_3);
	#endif
}

void EXTI4_15_IRQHandler(void)
{
 80021b8:	b510      	push	{r4, lr}
	HAL_EXTI_IRQHandler(&H_EXTI_4);
 80021ba:	4819      	ldr	r0, [pc, #100]	; (8002220 <EXTI4_15_IRQHandler+0x68>)
 80021bc:	f001 f924 	bl	8003408 <HAL_EXTI_IRQHandler>
	#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
		HAL_EXTI_IRQHandler(&H_EXTI_10);
	#endif

	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_13);
 80021c0:	4818      	ldr	r0, [pc, #96]	; (8002224 <EXTI4_15_IRQHandler+0x6c>)
 80021c2:	f001 f921 	bl	8003408 <HAL_EXTI_IRQHandler>
	#endif

	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 80021c6:	2010      	movs	r0, #16
 80021c8:	f001 fb8a 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 80021cc:	2020      	movs	r0, #32
 80021ce:	f001 fb87 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 80021d2:	2040      	movs	r0, #64	; 0x40
 80021d4:	f001 fb84 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 80021d8:	2080      	movs	r0, #128	; 0x80
 80021da:	f001 fb81 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 80021de:	2080      	movs	r0, #128	; 0x80
 80021e0:	0040      	lsls	r0, r0, #1
 80021e2:	f001 fb7d 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 80021e6:	2080      	movs	r0, #128	; 0x80
 80021e8:	0080      	lsls	r0, r0, #2
 80021ea:	f001 fb79 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 80021ee:	2080      	movs	r0, #128	; 0x80
 80021f0:	00c0      	lsls	r0, r0, #3
 80021f2:	f001 fb75 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 80021f6:	2080      	movs	r0, #128	; 0x80
 80021f8:	0100      	lsls	r0, r0, #4
 80021fa:	f001 fb71 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 80021fe:	2080      	movs	r0, #128	; 0x80
 8002200:	0140      	lsls	r0, r0, #5
 8002202:	f001 fb6d 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8002206:	2080      	movs	r0, #128	; 0x80
 8002208:	0180      	lsls	r0, r0, #6
 800220a:	f001 fb69 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800220e:	2080      	movs	r0, #128	; 0x80
 8002210:	01c0      	lsls	r0, r0, #7
 8002212:	f001 fb65 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8002216:	2080      	movs	r0, #128	; 0x80
 8002218:	0200      	lsls	r0, r0, #8
 800221a:	f001 fb61 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
}
 800221e:	bd10      	pop	{r4, pc}
 8002220:	20000388 	.word	0x20000388
 8002224:	200003a0 	.word	0x200003a0

08002228 <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler(void)
{
 8002228:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <DMA1_Channel2_3_IRQHandler+0xc>)
 800222c:	f001 f893 	bl	8003356 <HAL_DMA_IRQHandler>
}
 8002230:	bd10      	pop	{r4, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20001440 	.word	0x20001440

08002238 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002238:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800223a:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 800223c:	f001 f88b 	bl	8003356 <HAL_DMA_IRQHandler>
}
 8002240:	bd10      	pop	{r4, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	200013f8 	.word	0x200013f8

08002248 <USART1_IRQHandler>:
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
		sUartDebug.Length_u16 = 0;
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
	#else
		uint8_t	TempRecieve_u8 = 0;
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <USART1_IRQHandler+0x30>)
{
 800224a:	b570      	push	{r4, r5, r6, lr}
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 800224c:	6803      	ldr	r3, [r0, #0]
 800224e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <USART1_IRQHandler+0x34>)
 8002252:	889a      	ldrh	r2, [r3, #4]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	1c55      	adds	r5, r2, #1
 8002258:	809d      	strh	r5, [r3, #4]
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 800225a:	548c      	strb	r4, [r1, r2]
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
		sUartDebug.Length_u16 = 0;
 800225c:	2196      	movs	r1, #150	; 0x96
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
 800225e:	889a      	ldrh	r2, [r3, #4]
		sUartDebug.Length_u16 = 0;
 8002260:	00c9      	lsls	r1, r1, #3
 8002262:	428a      	cmp	r2, r1
 8002264:	4189      	sbcs	r1, r1
 8002266:	400a      	ands	r2, r1
 8002268:	809a      	strh	r2, [r3, #4]
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
 800226a:	2201      	movs	r2, #1
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <USART1_IRQHandler+0x38>)
 800226e:	3302      	adds	r3, #2
 8002270:	77da      	strb	r2, [r3, #31]
	#endif
	HAL_UART_IRQHandler(&huart1);
 8002272:	f002 ff0b 	bl	800508c <HAL_UART_IRQHandler>
}
 8002276:	bd70      	pop	{r4, r5, r6, pc}
 8002278:	2000150c 	.word	0x2000150c
 800227c:	20000160 	.word	0x20000160
 8002280:	20000024 	.word	0x20000024

08002284 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002284:	b510      	push	{r4, lr}
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
		sUartDebug.Length_u16 = 0;
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
	#else
	#endif
	HAL_UART_IRQHandler(&huart2);
 8002286:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART2_IRQHandler+0xc>)
 8002288:	f002 ff00 	bl	800508c <HAL_UART_IRQHandler>
}
 800228c:	bd10      	pop	{r4, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20001488 	.word	0x20001488

08002294 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8002294:	b510      	push	{r4, lr}
	HAL_RTC_AlarmIRQHandler(&hrtc);
 8002296:	4802      	ldr	r0, [pc, #8]	; (80022a0 <RTC_IRQHandler+0xc>)
 8002298:	f002 f94a 	bl	8004530 <HAL_RTC_AlarmIRQHandler>
}
 800229c:	bd10      	pop	{r4, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	200002fc 	.word	0x200002fc

080022a4 <tiny_snprintf_like.constprop.0>:
void UTIL_ADV_TRACE_PostSendHook(void)
{
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80022a4:	b40c      	push	{r2, r3}
 80022a6:	b507      	push	{r0, r1, r2, lr}
{
	va_list vaArgs;
	va_start(vaArgs, strFormat);
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022a8:	2110      	movs	r1, #16
	va_start(vaArgs, strFormat);
 80022aa:	ab05      	add	r3, sp, #20
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <tiny_snprintf_like.constprop.0+0x18>)
	va_start(vaArgs, strFormat);
 80022ae:	9301      	str	r3, [sp, #4]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022b0:	f008 fa2c 	bl	800a70c <tiny_vsnprintf_like>
	va_end(vaArgs);
}
 80022b4:	b003      	add	sp, #12
 80022b6:	bc08      	pop	{r3}
 80022b8:	b002      	add	sp, #8
 80022ba:	4718      	bx	r3
 80022bc:	0800b768 	.word	0x0800b768

080022c0 <TimestampNow>:
{
 80022c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80022c2:	0004      	movs	r4, r0
	SysTime_t curtime = SysTimeGet();
 80022c4:	ae02      	add	r6, sp, #8
 80022c6:	0030      	movs	r0, r6
{
 80022c8:	000d      	movs	r5, r1
	SysTime_t curtime = SysTimeGet();
 80022ca:	f008 f9f7 	bl	800a6bc <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80022ce:	2104      	movs	r1, #4
 80022d0:	5e73      	ldrsh	r3, [r6, r1]
 80022d2:	0020      	movs	r0, r4
 80022d4:	2110      	movs	r1, #16
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <TimestampNow+0x2c>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	9b02      	ldr	r3, [sp, #8]
 80022dc:	f7ff ffe2 	bl	80022a4 <tiny_snprintf_like.constprop.0>
	*size = strlen((char *)buff);
 80022e0:	0020      	movs	r0, r4
 80022e2:	f7fd ff11 	bl	8000108 <strlen>
 80022e6:	8028      	strh	r0, [r5, #0]
}
 80022e8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	0800b768 	.word	0x0800b768

080022f0 <SystemApp_Init>:
{
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2501      	movs	r5, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	2602      	movs	r6, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2704      	movs	r7, #4
{
 80022f8:	b08b      	sub	sp, #44	; 0x2c
	UTIL_TIMER_Init();
 80022fa:	f007 fe17 	bl	8009f2c <UTIL_TIMER_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	220c      	movs	r2, #12
 8002300:	2100      	movs	r1, #0
 8002302:	a807      	add	r0, sp, #28
 8002304:	f008 fb98 	bl	800aa38 <memset>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002308:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4c2c      	ldr	r4, [pc, #176]	; (80023bc <SystemApp_Init+0xcc>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	a905      	add	r1, sp, #20
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	432b      	orrs	r3, r5
 8002314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	402b      	ands	r3, r5
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002322:	4333      	orrs	r3, r6
 8002324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002326:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002328:	4033      	ands	r3, r6
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002330:	433b      	orrs	r3, r7
 8002332:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002336:	403b      	ands	r3, r7
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800233c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800233e:	4313      	orrs	r3, r2
 8002340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002344:	4013      	ands	r3, r2
 8002346:	9304      	str	r3, [sp, #16]
 8002348:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234a:	2303      	movs	r3, #3
 800234c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <SystemApp_Init+0xd0>)
 8002350:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f001 f96d 	bl	8003630 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <SystemApp_Init+0xd4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	a905      	add	r1, sp, #20
 800235a:	481b      	ldr	r0, [pc, #108]	; (80023c8 <SystemApp_Init+0xd8>)
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 800235c:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f001 f967 	bl	8003630 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002362:	a905      	add	r1, sp, #20
 8002364:	4819      	ldr	r0, [pc, #100]	; (80023cc <SystemApp_Init+0xdc>)
 8002366:	f001 f963 	bl	8003630 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800236a:	a905      	add	r1, sp, #20
 800236c:	4818      	ldr	r0, [pc, #96]	; (80023d0 <SystemApp_Init+0xe0>)
 800236e:	f001 f95f 	bl	8003630 <HAL_GPIO_Init>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8002372:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8002374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002376:	43ab      	bics	r3, r5
 8002378:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 800237a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800237c:	43b3      	bics	r3, r6
 800237e:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8002380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002382:	43bb      	bics	r3, r7
 8002384:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8002386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002388:	4393      	bics	r3, r2
 800238a:	62e3      	str	r3, [r4, #44]	; 0x2c
	DBG_Disable();
 800238c:	f000 f83e 	bl	800240c <DBG_Disable>
	DBG_ProbesInit();
 8002390:	f000 f840 	bl	8002414 <DBG_ProbesInit>
	UTIL_ADV_TRACE_Init();
 8002394:	f008 f876 	bl	800a484 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002398:	480e      	ldr	r0, [pc, #56]	; (80023d4 <SystemApp_Init+0xe4>)
 800239a:	f008 f88d 	bl	800a4b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800239e:	0030      	movs	r0, r6
 80023a0:	f008 f890 	bl	800a4c4 <UTIL_ADV_TRACE_SetVerboseLevel>
	Sx_Board_Bus_Init();
 80023a4:	f000 fb18 	bl	80029d8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
	Sx_Board_IoInit();
 80023a8:	f000 f966 	bl	8002678 <CMWX1ZZABZ0XX_RADIO_IoInit>
	UTIL_LPM_Init();
 80023ac:	f007 fad2 	bl	8009954 <UTIL_LPM_Init>
		UTIL_LPM_SetStopMode( UTIL_LPM_DISABLE );
 80023b0:	0028      	movs	r0, r5
 80023b2:	f007 faa1 	bl	80098f8 <UTIL_LPM_SetStopMode>
}
 80023b6:	b00b      	add	sp, #44	; 0x2c
 80023b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	40021000 	.word	0x40021000
 80023c0:	00009fff 	.word	0x00009fff
 80023c4:	0000ffff 	.word	0x0000ffff
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000800 	.word	0x50000800
 80023d0:	50001c00 	.word	0x50001c00
 80023d4:	080022c1 	.word	0x080022c1

080023d8 <UTIL_ADV_TRACE_PreSendHook>:
{
 80023d8:	b510      	push	{r4, lr}
	UTIL_LPM_SetStopMode(UTIL_LPM_DISABLE);
 80023da:	2001      	movs	r0, #1
 80023dc:	f007 fa8c 	bl	80098f8 <UTIL_LPM_SetStopMode>
}
 80023e0:	bd10      	pop	{r4, pc}

080023e2 <UTIL_ADV_TRACE_PostSendHook>:
{
 80023e2:	b510      	push	{r4, lr}
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f007 fa87 	bl	80098f8 <UTIL_LPM_SetStopMode>
}
 80023ea:	bd10      	pop	{r4, pc}

080023ec <DBG_ConfigForLpm.part.0>:
		#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
	#endif /* DEBUGGER_OFF */

	if (enable_dbg == 1)
	{
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	4a06      	ldr	r2, [pc, #24]	; (8002408 <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 80023f0:	b510      	push	{r4, lr}
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023f2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80023f4:	03db      	lsls	r3, r3, #15
 80023f6:	430b      	orrs	r3, r1
 80023f8:	6353      	str	r3, [r2, #52]	; 0x34

		HAL_DBGMCU_EnableDBGSleepMode();
 80023fa:	f000 fbad 	bl	8002b58 <HAL_DBGMCU_EnableDBGSleepMode>
		HAL_DBGMCU_EnableDBGStopMode();
 80023fe:	f000 fbbb 	bl	8002b78 <HAL_DBGMCU_EnableDBGStopMode>
		HAL_DBGMCU_EnableDBGStandbyMode();
 8002402:	f000 fbc9 	bl	8002b98 <HAL_DBGMCU_EnableDBGStandbyMode>
		HAL_DBGMCU_DisableDBGSleepMode();
		HAL_DBGMCU_DisableDBGStopMode();
		HAL_DBGMCU_DisableDBGStandbyMode();
		__HAL_RCC_DBGMCU_CLK_DISABLE();
	}
}
 8002406:	bd10      	pop	{r4, pc}
 8002408:	40021000 	.word	0x40021000

0800240c <DBG_Disable>:
{
 800240c:	b510      	push	{r4, lr}
 800240e:	f7ff ffed 	bl	80023ec <DBG_ConfigForLpm.part.0>
}
 8002412:	bd10      	pop	{r4, pc}

08002414 <DBG_ProbesInit>:
		HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);

	#elif !defined (PROBE_PINS_ENABLED)
		#error "PROBE_PINS_ENABLED not defined or out of range <0,1>"
	#endif /* PROBE_PINS_ENABLED */
}
 8002414:	4770      	bx	lr
	...

08002418 <vcom_Init>:

static void (*TxCpltCallback)(void *);
static void (*RxCpltCallback)(uint8_t *rxChar, uint16_t size, uint8_t error);

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002418:	b510      	push	{r4, lr}
	TxCpltCallback = cb;
 800241a:	4b03      	ldr	r3, [pc, #12]	; (8002428 <vcom_Init+0x10>)
 800241c:	6018      	str	r0, [r3, #0]
	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
		MX_USART2_UART_Init();
	#else
		MX_USART1_UART_Init();
 800241e:	f007 f893 	bl	8009548 <MX_USART1_UART_Init>
	#endif
	return UTIL_ADV_TRACE_OK;
}
 8002422:	2000      	movs	r0, #0
 8002424:	bd10      	pop	{r4, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	20000320 	.word	0x20000320

0800242c <vcom_DeInit>:
	HAL_UART_MspDeInit(&huart1);
	__HAL_RCC_USART2_FORCE_RESET();
	__HAL_RCC_USART2_RELEASE_RESET();
	HAL_UART_MspDeInit(&huart2);
#else
	__HAL_RCC_USART1_FORCE_RESET();
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <vcom_DeInit+0x20>)
 8002430:	01d2      	lsls	r2, r2, #7
 8002432:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 8002434:	b510      	push	{r4, lr}
	__HAL_RCC_USART1_FORCE_RESET();
 8002436:	430a      	orrs	r2, r1
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_USART1_RELEASE_RESET();
 800243a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800243c:	4904      	ldr	r1, [pc, #16]	; (8002450 <vcom_DeInit+0x24>)
	HAL_UART_MspDeInit(&huart1);
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <vcom_DeInit+0x28>)
	__HAL_RCC_USART1_RELEASE_RESET();
 8002440:	400a      	ands	r2, r1
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_UART_MspDeInit(&huart1);
 8002444:	f007 f918 	bl	8009678 <HAL_UART_MspDeInit>
#endif
	return UTIL_ADV_TRACE_OK;
}
 8002448:	2000      	movs	r0, #0
 800244a:	bd10      	pop	{r4, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	ffffbfff 	.word	0xffffbfff
 8002454:	2000150c 	.word	0x2000150c

08002458 <vcom_Trace_DMA>:
{
	#ifdef DEVICE_TYPE_STATION
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
		HAL_UART_Transmit(&huart2, p_data, size, 1000);
	#else
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8002458:	23fa      	movs	r3, #250	; 0xfa
{
 800245a:	b510      	push	{r4, lr}
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 800245c:	4c06      	ldr	r4, [pc, #24]	; (8002478 <vcom_Trace_DMA+0x20>)
{
 800245e:	000a      	movs	r2, r1
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8002460:	0001      	movs	r1, r0
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	0020      	movs	r0, r4
 8002466:	f003 f975 	bl	8005754 <HAL_UART_Transmit>
	#endif
	TxCpltCallback(NULL);
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <vcom_Trace_DMA+0x24>)
 800246c:	2000      	movs	r0, #0
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4798      	blx	r3
	return UTIL_ADV_TRACE_OK;
}
 8002472:	2000      	movs	r0, #0
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	2000150c 	.word	0x2000150c
 800247c:	20000320 	.word	0x20000320

08002480 <vcom_ReceiveInit>:
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
		HAL_UART_Receive_IT(&huart2, &charRx, 1);
	#else
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002480:	2280      	movs	r2, #128	; 0x80
{
 8002482:	b510      	push	{r4, lr}
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002484:	4808      	ldr	r0, [pc, #32]	; (80024a8 <vcom_ReceiveInit+0x28>)
 8002486:	0252      	lsls	r2, r2, #9
 8002488:	6803      	ldr	r3, [r0, #0]
 800248a:	69d9      	ldr	r1, [r3, #28]
 800248c:	4211      	tst	r1, r2
 800248e:	d1fc      	bne.n	800248a <vcom_ReceiveInit+0xa>
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	69d9      	ldr	r1, [r3, #28]
 8002496:	4211      	tst	r1, r2
 8002498:	d0fc      	beq.n	8002494 <vcom_ReceiveInit+0x14>
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <vcom_ReceiveInit+0x2c>)
 800249c:	2201      	movs	r2, #1
 800249e:	3104      	adds	r1, #4
 80024a0:	f003 fa7c 	bl	800599c <HAL_UART_Receive_IT>
	#endif

	return UTIL_ADV_TRACE_OK;
}
 80024a4:	2000      	movs	r0, #0
 80024a6:	bd10      	pop	{r4, pc}
 80024a8:	2000150c 	.word	0x2000150c
 80024ac:	20000320 	.word	0x20000320

080024b0 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
}
 80024b0:	4770      	bx	lr
	...

080024b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80024b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ba:	490e      	ldr	r1, [pc, #56]	; (80024f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <LoopForever+0xe>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d0:	4c0b      	ldr	r4, [pc, #44]	; (8002500 <LoopForever+0x16>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024de:	f000 faa3 	bl	8002a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e2:	f008 fab7 	bl	800aa54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e6:	f7ff fdfb 	bl	80020e0 <main>

080024ea <LoopForever>:

LoopForever:
    b LoopForever
 80024ea:	e7fe      	b.n	80024ea <LoopForever>
   ldr   r0, =_estack
 80024ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80024f8:	0800bf94 	.word	0x0800bf94
  ldr r2, =_sbss
 80024fc:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002500:	20001a5c 	.word	0x20001a5c

08002504 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_COMP_IRQHandler>
	...

08002508 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <_sbrk+0x2c>)
{
 800250a:	0003      	movs	r3, r0
	if (heap_end == 0)
 800250c:	6811      	ldr	r1, [r2, #0]
{
 800250e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002510:	2900      	cmp	r1, #0
 8002512:	d101      	bne.n	8002518 <_sbrk+0x10>
		heap_end = &end;
 8002514:	4908      	ldr	r1, [pc, #32]	; (8002538 <_sbrk+0x30>)
 8002516:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002518:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800251a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800251c:	18c3      	adds	r3, r0, r3
 800251e:	428b      	cmp	r3, r1
 8002520:	d906      	bls.n	8002530 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002522:	f008 fa91 	bl	800aa48 <__errno>
 8002526:	230c      	movs	r3, #12
 8002528:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800252a:	2001      	movs	r0, #1
 800252c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800252e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002530:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002532:	e7fc      	b.n	800252e <_sbrk+0x26>
 8002534:	20000328 	.word	0x20000328
 8002538:	20001a60 	.word	0x20001a60

0800253c <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800253c:	23fa      	movs	r3, #250	; 0xfa
{
 800253e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002540:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002542:	009b      	lsls	r3, r3, #2
{
 8002544:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <BSP_SPI1_SendRecv+0x28>)
 800254a:	0013      	movs	r3, r2
 800254c:	000a      	movs	r2, r1
 800254e:	0029      	movs	r1, r5
 8002550:	f002 fc02 	bl	8004d58 <HAL_SPI_TransmitReceive>
 8002554:	2800      	cmp	r0, #0
 8002556:	d101      	bne.n	800255c <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 8002558:	0020      	movs	r0, r4
  }
  return ret;
}
 800255a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800255c:	2006      	movs	r0, #6
 800255e:	4240      	negs	r0, r0
  return ret;
 8002560:	e7fb      	b.n	800255a <BSP_SPI1_SendRecv+0x1e>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	20000330 	.word	0x20000330

08002568 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <MX_SPI1_Init+0x54>)
{
 800256a:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 800256c:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800256e:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002570:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002576:	33fc      	adds	r3, #252	; 0xfc
 8002578:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800257a:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800257c:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800257e:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002580:	6145      	str	r5, [r0, #20]
{
 8002582:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002584:	f001 fe86 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002588:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 800258a:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 800258c:	490d      	ldr	r1, [pc, #52]	; (80025c4 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 800258e:	4290      	cmp	r0, r2
 8002590:	d80d      	bhi.n	80025ae <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002592:	2300      	movs	r3, #0
 8002594:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002596:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002598:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800259a:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800259c:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 800259e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80025a0:	0020      	movs	r0, r4
 80025a2:	f002 fb71 	bl	8004c88 <HAL_SPI_Init>
 80025a6:	1e43      	subs	r3, r0, #1
 80025a8:	4198      	sbcs	r0, r3
  return ret;
 80025aa:	b2c0      	uxtb	r0, r0
}
 80025ac:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 80025ae:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 80025b0:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 80025b2:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d0ec      	beq.n	8002592 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80025b8:	0840      	lsrs	r0, r0, #1
 80025ba:	e7e8      	b.n	800258e <MX_SPI1_Init+0x26>
 80025bc:	40013000 	.word	0x40013000
 80025c0:	00989680 	.word	0x00989680
 80025c4:	0800b36c 	.word	0x0800b36c

080025c8 <BSP_SPI1_Init>:
{
 80025c8:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 80025ca:	4d1b      	ldr	r5, [pc, #108]	; (8002638 <BSP_SPI1_Init+0x70>)
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80025ce:	0028      	movs	r0, r5
{
 80025d0:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 80025d2:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80025d4:	f002 fd12 	bl	8004ffc <HAL_SPI_GetState>
 80025d8:	1e04      	subs	r4, r0, #0
 80025da:	d002      	beq.n	80025e2 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80025dc:	2000      	movs	r0, #0
}
 80025de:	b007      	add	sp, #28
 80025e0:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <BSP_SPI1_Init+0x78>)
 80025e6:	015b      	lsls	r3, r3, #5
 80025e8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80025ea:	430b      	orrs	r3, r1
 80025ec:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80025f2:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80025f4:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	3301      	adds	r3, #1
 80025fa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80025fc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80025fe:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002600:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002602:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002604:	f001 f814 	bl	8003630 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002608:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800260a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800260c:	a901      	add	r1, sp, #4
 800260e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002610:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002612:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002614:	f001 f80c 	bl	8003630 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002618:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800261a:	480a      	ldr	r0, [pc, #40]	; (8002644 <BSP_SPI1_Init+0x7c>)
 800261c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800261e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002620:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002622:	f001 f805 	bl	8003630 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002626:	0028      	movs	r0, r5
 8002628:	f7ff ff9e 	bl	8002568 <MX_SPI1_Init>
 800262c:	2800      	cmp	r0, #0
 800262e:	d0d5      	beq.n	80025dc <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002630:	2008      	movs	r0, #8
 8002632:	4240      	negs	r0, r0
  return ret;
 8002634:	e7d3      	b.n	80025de <BSP_SPI1_Init+0x16>
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000330 	.word	0x20000330
 800263c:	40013000 	.word	0x40013000
 8002640:	40021000 	.word	0x40021000
 8002644:	50000400 	.word	0x50000400

08002648 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8002648:	2005      	movs	r0, #5
 800264a:	4770      	bx	lr

0800264c <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 800264c:	0002      	movs	r2, r0
 800264e:	b510      	push	{r4, lr}

  if (state == SET)
 8002650:	2801      	cmp	r0, #1
 8002652:	d109      	bne.n	8002668 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	20a0      	movs	r0, #160	; 0xa0
 8002658:	0149      	lsls	r1, r1, #5
 800265a:	05c0      	lsls	r0, r0, #23
 800265c:	f001 f932 	bl	80038c4 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8002660:	2005      	movs	r0, #5
 8002662:	f000 fa57 	bl	8002b14 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8002666:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	20a0      	movs	r0, #160	; 0xa0
 800266c:	2200      	movs	r2, #0
 800266e:	0149      	lsls	r1, r1, #5
 8002670:	05c0      	lsls	r0, r0, #23
 8002672:	f001 f927 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8002676:	e7f6      	b.n	8002666 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08002678 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8002678:	2300      	movs	r3, #0
{
 800267a:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800267c:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 800267e:	2204      	movs	r2, #4
{
 8002680:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002682:	4c65      	ldr	r4, [pc, #404]	; (8002818 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8002684:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002688:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800268a:	433b      	orrs	r3, r7
 800268c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800268e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002690:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002692:	403b      	ands	r3, r7
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 800269a:	4e60      	ldr	r6, [pc, #384]	; (800281c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800269c:	433b      	orrs	r3, r7
 800269e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026a2:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80026a4:	403b      	ands	r3, r7
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 80026aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026ac:	433b      	orrs	r3, r7
 80026ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026b2:	403b      	ands	r3, r7
 80026b4:	9303      	str	r3, [sp, #12]
 80026b6:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80026b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026ba:	4313      	orrs	r3, r2
 80026bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80026c0:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80026c2:	4013      	ands	r3, r2
 80026c4:	9304      	str	r3, [sp, #16]
 80026c6:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026c8:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026ca:	0001      	movs	r1, r0
 80026cc:	4854      	ldr	r0, [pc, #336]	; (8002820 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026ce:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026d0:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 80026d2:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026d4:	f000 ffac 	bl	8003630 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026d8:	4b52      	ldr	r3, [pc, #328]	; (8002824 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026da:	a80c      	add	r0, sp, #48	; 0x30
 80026dc:	0001      	movs	r1, r0
 80026de:	4850      	ldr	r0, [pc, #320]	; (8002820 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026e0:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026e2:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026e4:	f000 ffa4 	bl	8003630 <HAL_GPIO_Init>
 80026e8:	a80c      	add	r0, sp, #48	; 0x30
 80026ea:	0001      	movs	r1, r0
 80026ec:	484c      	ldr	r0, [pc, #304]	; (8002820 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026ee:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026f0:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026f2:	f000 ff9d 	bl	8003630 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026f6:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026f8:	a80c      	add	r0, sp, #48	; 0x30
 80026fa:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026fc:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026fe:	484a      	ldr	r0, [pc, #296]	; (8002828 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002700:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002702:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002704:	f000 ff94 	bl	8003630 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800270a:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800270c:	433b      	orrs	r3, r7
 800270e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002714:	403b      	ands	r3, r7
 8002716:	9309      	str	r3, [sp, #36]	; 0x24
 8002718:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800271a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800271c:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800271e:	432b      	orrs	r3, r5
 8002720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002724:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002726:	402b      	ands	r3, r5
 8002728:	930a      	str	r3, [sp, #40]	; 0x28
 800272a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800272c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800272e:	432b      	orrs	r3, r5
 8002730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002732:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002736:	402b      	ands	r3, r5
 8002738:	930b      	str	r3, [sp, #44]	; 0x2c
 800273a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 800273c:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800273e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002740:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002742:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002744:	3380      	adds	r3, #128	; 0x80
 8002746:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800274a:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800274c:	f000 ff70 	bl	8003630 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002750:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002752:	a811      	add	r0, sp, #68	; 0x44
 8002754:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002756:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002758:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800275a:	3340      	adds	r3, #64	; 0x40
 800275c:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800275e:	f000 ff67 	bl	8003630 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002762:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002764:	a811      	add	r0, sp, #68	; 0x44
 8002766:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002768:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800276a:	482d      	ldr	r0, [pc, #180]	; (8002820 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800276c:	3308      	adds	r3, #8
 800276e:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002770:	f000 ff5e 	bl	8003630 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002774:	2080      	movs	r0, #128	; 0x80
 8002776:	0200      	lsls	r0, r0, #8
 8002778:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 800277c:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 800277e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002780:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8002782:	432b      	orrs	r3, r5
 8002784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002788:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 800278a:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800278c:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 800278e:	9305      	str	r3, [sp, #20]
 8002790:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002792:	f000 ff4d 	bl	8003630 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	002a      	movs	r2, r5
 800279a:	0030      	movs	r0, r6
 800279c:	0209      	lsls	r1, r1, #8
 800279e:	f001 f891 	bl	80038c4 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80027a2:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 80027a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80027a6:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 80027a8:	432b      	orrs	r3, r5
 80027aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80027ae:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 80027b0:	402b      	ands	r3, r5
 80027b2:	9306      	str	r3, [sp, #24]
 80027b4:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 80027b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027b8:	432b      	orrs	r3, r5
 80027ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027be:	402b      	ands	r3, r5
 80027c0:	9307      	str	r3, [sp, #28]
 80027c2:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80027c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027c6:	4313      	orrs	r3, r2
 80027c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027cc:	4013      	ands	r3, r2
 80027ce:	9308      	str	r3, [sp, #32]
 80027d0:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80027d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027d4:	4313      	orrs	r3, r2
 80027d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027da:	0014      	movs	r4, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	9311      	str	r3, [sp, #68]	; 0x44
 80027e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80027e6:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 80027e8:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80027ea:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80027ec:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80027ee:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80027f2:	f000 ff1d 	bl	8003630 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80027f6:	0030      	movs	r0, r6
 80027f8:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80027fa:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80027fc:	f000 ff18 	bl	8003630 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002800:	a90c      	add	r1, sp, #48	; 0x30
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8002804:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002806:	f000 ff13 	bl	8003630 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 800280c:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 800280e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002810:	f000 ff0e 	bl	8003630 <HAL_GPIO_Init>
}
 8002814:	b017      	add	sp, #92	; 0x5c
 8002816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	10110000 	.word	0x10110000
 8002820:	50000400 	.word	0x50000400
 8002824:	10310000 	.word	0x10310000
 8002828:	50000800 	.word	0x50000800

0800282c <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 800282c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 800282e:	2608      	movs	r6, #8
{
 8002830:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8002832:	0032      	movs	r2, r6
 8002834:	2100      	movs	r1, #0
 8002836:	a803      	add	r0, sp, #12
 8002838:	f008 f8fe 	bl	800aa38 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 800283c:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 800283e:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002840:	4c22      	ldr	r4, [pc, #136]	; (80028cc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002842:	4f23      	ldr	r7, [pc, #140]	; (80028d0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002844:	4669      	mov	r1, sp
 8002846:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8002848:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 800284a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800284c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800284e:	f000 feef 	bl	8003630 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002854:	4669      	mov	r1, sp
 8002856:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002858:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800285a:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800285c:	f000 fee8 	bl	8003630 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002860:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002862:	4669      	mov	r1, sp
 8002864:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002866:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002868:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800286a:	f000 fee1 	bl	8003630 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 800286e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002870:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002872:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002874:	4818      	ldr	r0, [pc, #96]	; (80028d8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002876:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002878:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800287a:	f000 fed9 	bl	8003630 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800287e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002880:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002882:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002884:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002886:	05ed      	lsls	r5, r5, #23
 8002888:	0028      	movs	r0, r5
 800288a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800288e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002890:	f000 fece 	bl	8003630 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002894:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002896:	0028      	movs	r0, r5
 8002898:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800289a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800289c:	f000 fec8 	bl	8003630 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80028a0:	0020      	movs	r0, r4
 80028a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80028a4:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80028a6:	f000 fec3 	bl	8003630 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80028aa:	0039      	movs	r1, r7
 80028ac:	0028      	movs	r0, r5
 80028ae:	2200      	movs	r2, #0
 80028b0:	f001 f808 	bl	80038c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80028b4:	0028      	movs	r0, r5
 80028b6:	2200      	movs	r2, #0
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	f001 f803 	bl	80038c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80028be:	2200      	movs	r2, #0
 80028c0:	0031      	movs	r1, r6
 80028c2:	0020      	movs	r0, r4
 80028c4:	f000 fffe 	bl	80038c4 <HAL_GPIO_WritePin>
}
 80028c8:	b00b      	add	sp, #44	; 0x2c
 80028ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028cc:	50000400 	.word	0x50000400
 80028d0:	10110000 	.word	0x10110000
 80028d4:	10310000 	.word	0x10310000
 80028d8:	50000800 	.word	0x50000800

080028dc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 80028dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028de:	9000      	str	r0, [sp, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e0:	f3ef 8310 	mrs	r3, PRIMASK
 80028e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80028e6:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80028e8:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80028ea:	4e11      	ldr	r6, [pc, #68]	; (8002930 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 80028ec:	4d11      	ldr	r5, [pc, #68]	; (8002934 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 80028ee:	00e3      	lsls	r3, r4, #3
 80028f0:	18f6      	adds	r6, r6, r3
 80028f2:	00a7      	lsls	r7, r4, #2
 80028f4:	5979      	ldr	r1, [r7, r5]
 80028f6:	0030      	movs	r0, r6
 80028f8:	f000 fd7f 	bl	80033fa <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80028fc:	9b00      	ldr	r3, [sp, #0]
 80028fe:	2100      	movs	r1, #0
 8002900:	59da      	ldr	r2, [r3, r7]
 8002902:	0030      	movs	r0, r6
 8002904:	f000 fd72 	bl	80033ec <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8002908:	002b      	movs	r3, r5
 800290a:	3310      	adds	r3, #16
 800290c:	56e6      	ldrsb	r6, [r4, r3]
 800290e:	3514      	adds	r5, #20
 8002910:	2200      	movs	r2, #0
 8002912:	0030      	movs	r0, r6
 8002914:	5979      	ldr	r1, [r7, r5]
 8002916:	f000 fc79 	bl	800320c <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800291a:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800291c:	0030      	movs	r0, r6
 800291e:	f000 fc9f 	bl	8003260 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002922:	2c04      	cmp	r4, #4
 8002924:	d1e1      	bne.n	80028ea <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	20000388 	.word	0x20000388
 8002934:	0800b38c 	.word	0x0800b38c

08002938 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8002938:	2000      	movs	r0, #0
 800293a:	4770      	bx	lr

0800293c <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 800293c:	3801      	subs	r0, #1
{
 800293e:	b510      	push	{r4, lr}
  switch (state)
 8002940:	2803      	cmp	r0, #3
 8002942:	d811      	bhi.n	8002968 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8002944:	f7fd fbf2 	bl	800012c <__gnu_thumb1_case_uqi>
 8002948:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 800294c:	20a0      	movs	r0, #160	; 0xa0
 800294e:	2201      	movs	r2, #1
 8002950:	2102      	movs	r1, #2
 8002952:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002954:	f000 ffb6 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8002958:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800295a:	2201      	movs	r2, #1
 800295c:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8002960:	e7f8      	b.n	8002954 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8002962:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002964:	2102      	movs	r1, #2
 8002966:	e7fa      	b.n	800295e <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8002968:	20a0      	movs	r0, #160	; 0xa0
 800296a:	2200      	movs	r2, #0
 800296c:	2102      	movs	r1, #2
 800296e:	05c0      	lsls	r0, r0, #23
 8002970:	f000 ffa8 	bl	80038c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	2104      	movs	r1, #4
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 800297a:	f000 ffa3 	bl	80038c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	e7f0      	b.n	8002964 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	50000800 	.word	0x50000800

08002988 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8002988:	2001      	movs	r0, #1
 800298a:	4770      	bx	lr

0800298c <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 800298c:	b530      	push	{r4, r5, lr}
 800298e:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8002990:	220c      	movs	r2, #12
 8002992:	2100      	movs	r1, #0
 8002994:	a803      	add	r0, sp, #12
 8002996:	f008 f84f 	bl	800aa38 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 800299c:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800299e:	4d0d      	ldr	r5, [pc, #52]	; (80029d4 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 80029a0:	a901      	add	r1, sp, #4
 80029a2:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 80029a4:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80029a8:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029aa:	f000 fe41 	bl	8003630 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80029ae:	2200      	movs	r2, #0
 80029b0:	0021      	movs	r1, r4
 80029b2:	0028      	movs	r0, r5
 80029b4:	f000 ff86 	bl	80038c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80029b8:	0020      	movs	r0, r4
 80029ba:	f000 f8ab 	bl	8002b14 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029c0:	0028      	movs	r0, r5
 80029c2:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 80029c4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029c6:	f000 fe33 	bl	8003630 <HAL_GPIO_Init>
  HAL_Delay(6);
 80029ca:	2006      	movs	r0, #6
 80029cc:	f000 f8a2 	bl	8002b14 <HAL_Delay>
}
 80029d0:	b007      	add	sp, #28
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	50000800 	.word	0x50000800

080029d8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 80029d8:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80029da:	f7ff fdf5 	bl	80025c8 <BSP_SPI1_Init>
}
 80029de:	bd10      	pop	{r4, pc}

080029e0 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 80029e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80029e2:	240e      	movs	r4, #14
{
 80029e4:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80029e6:	446c      	add	r4, sp
{
 80029e8:	80d8      	strh	r0, [r3, #6]
 80029ea:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80029ec:	2201      	movs	r2, #1
 80029ee:	0021      	movs	r1, r4
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff fda3 	bl	800253c <BSP_SPI1_SendRecv>
  return rxData;
 80029f6:	8820      	ldrh	r0, [r4, #0]
}
 80029f8:	b004      	add	sp, #16
 80029fa:	bd10      	pop	{r4, pc}

080029fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 80029fc:	0002      	movs	r2, r0
 80029fe:	b510      	push	{r4, lr}
  if (state == 0)
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d106      	bne.n	8002a12 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	20a0      	movs	r0, #160	; 0xa0
 8002a08:	0209      	lsls	r1, r1, #8
 8002a0a:	05c0      	lsls	r0, r0, #23
 8002a0c:	f000 ff5a 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8002a10:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002a12:	2201      	movs	r2, #1
 8002a14:	e7f6      	b.n	8002a04 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08002a18 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8002a18:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4801      	ldr	r0, [pc, #4]	; (8002a24 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8002a1e:	f000 ff4b 	bl	80038b8 <HAL_GPIO_ReadPin>
}
 8002a22:	bd10      	pop	{r4, pc}
 8002a24:	50000400 	.word	0x50000400

08002a28 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <SystemInit+0x44>)
 8002a2c:	0052      	lsls	r2, r2, #1
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	490e      	ldr	r1, [pc, #56]	; (8002a70 <SystemInit+0x48>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	490d      	ldr	r1, [pc, #52]	; (8002a74 <SystemInit+0x4c>)
 8002a40:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a42:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002a44:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	438a      	bics	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <SystemInit+0x50>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	4909      	ldr	r1, [pc, #36]	; (8002a7c <SystemInit+0x54>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <SystemInit+0x58>)
 8002a64:	0512      	lsls	r2, r2, #20
 8002a66:	609a      	str	r2, [r3, #8]
#endif
}
 8002a68:	4770      	bx	lr
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	88ff400c 	.word	0x88ff400c
 8002a74:	fef6fff6 	.word	0xfef6fff6
 8002a78:	fffbffff 	.word	0xfffbffff
 8002a7c:	ff02ffff 	.word	0xff02ffff
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a88:	20fa      	movs	r0, #250	; 0xfa
 8002a8a:	4e0d      	ldr	r6, [pc, #52]	; (8002ac0 <HAL_InitTick+0x3c>)
 8002a8c:	0080      	lsls	r0, r0, #2
 8002a8e:	7831      	ldrb	r1, [r6, #0]
 8002a90:	f7fd fb60 	bl	8000154 <__udivsi3>
 8002a94:	4c0b      	ldr	r4, [pc, #44]	; (8002ac4 <HAL_InitTick+0x40>)
 8002a96:	0001      	movs	r1, r0
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	f7fd fb5b 	bl	8000154 <__udivsi3>
 8002a9e:	f000 fbfb 	bl	8003298 <HAL_SYSTICK_Config>
 8002aa2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa6:	2c00      	cmp	r4, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	2d03      	cmp	r5, #3
 8002aac:	d806      	bhi.n	8002abc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aae:	3802      	subs	r0, #2
 8002ab0:	0022      	movs	r2, r4
 8002ab2:	0029      	movs	r1, r5
 8002ab4:	f000 fbaa 	bl	800320c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab8:	0020      	movs	r0, r4
 8002aba:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002abc:	bd70      	pop	{r4, r5, r6, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	2302      	movs	r3, #2
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_Init+0x24>)
{
 8002acc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ace:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	f7ff ffd5 	bl	8002a84 <HAL_InitTick>
 8002ada:	1e04      	subs	r4, r0, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_Init+0x1e>
    HAL_MspInit();
 8002ade:	f7ff fb37 	bl	8002150 <HAL_MspInit>
}
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002ae6:	2401      	movs	r4, #1
 8002ae8:	e7fb      	b.n	8002ae2 <HAL_Init+0x1a>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_IncTick+0x10>)
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_IncTick+0x14>)
 8002af4:	6811      	ldr	r1, [r2, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	185b      	adds	r3, r3, r1
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	4770      	bx	lr
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	200003a8 	.word	0x200003a8
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b08:	4b01      	ldr	r3, [pc, #4]	; (8002b10 <HAL_GetTick+0x8>)
 8002b0a:	6818      	ldr	r0, [r3, #0]
}
 8002b0c:	4770      	bx	lr
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	200003a8 	.word	0x200003a8

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff fff6 	bl	8002b08 <HAL_GetTick>
 8002b1c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1e:	1c63      	adds	r3, r4, #1
 8002b20:	d002      	beq.n	8002b28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_Delay+0x20>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	1b40      	subs	r0, r0, r5
 8002b2e:	42a0      	cmp	r0, r4
 8002b30:	d3fa      	bcc.n	8002b28 <HAL_Delay+0x14>
  {
  }
}
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002b38:	2102      	movs	r1, #2
 8002b3a:	4a02      	ldr	r2, [pc, #8]	; (8002b44 <HAL_SuspendTick+0xc>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	438b      	bics	r3, r1
 8002b40:	6013      	str	r3, [r2, #0]
}
 8002b42:	4770      	bx	lr
 8002b44:	e000e010 	.word	0xe000e010

08002b48 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	4a02      	ldr	r2, [pc, #8]	; (8002b54 <HAL_ResumeTick+0xc>)
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	4770      	bx	lr
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4a02      	ldr	r2, [pc, #8]	; (8002b64 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002b5c:	6851      	ldr	r1, [r2, #4]
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	6053      	str	r3, [r2, #4]
}
 8002b62:	4770      	bx	lr
 8002b64:	40015800 	.word	0x40015800

08002b68 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4a02      	ldr	r2, [pc, #8]	; (8002b74 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002b6c:	6853      	ldr	r3, [r2, #4]
 8002b6e:	438b      	bics	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]
}
 8002b72:	4770      	bx	lr
 8002b74:	40015800 	.word	0x40015800

08002b78 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b78:	2302      	movs	r3, #2
 8002b7a:	4a02      	ldr	r2, [pc, #8]	; (8002b84 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002b7c:	6851      	ldr	r1, [r2, #4]
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6053      	str	r3, [r2, #4]
}
 8002b82:	4770      	bx	lr
 8002b84:	40015800 	.word	0x40015800

08002b88 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4a02      	ldr	r2, [pc, #8]	; (8002b94 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002b8c:	6853      	ldr	r3, [r2, #4]
 8002b8e:	438b      	bics	r3, r1
 8002b90:	6053      	str	r3, [r2, #4]
}
 8002b92:	4770      	bx	lr
 8002b94:	40015800 	.word	0x40015800

08002b98 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b98:	2304      	movs	r3, #4
 8002b9a:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002b9c:	6851      	ldr	r1, [r2, #4]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6053      	str	r3, [r2, #4]
}
 8002ba2:	4770      	bx	lr
 8002ba4:	40015800 	.word	0x40015800

08002ba8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ba8:	2104      	movs	r1, #4
 8002baa:	4a02      	ldr	r2, [pc, #8]	; (8002bb4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002bac:	6853      	ldr	r3, [r2, #4]
 8002bae:	438b      	bics	r3, r1
 8002bb0:	6053      	str	r3, [r2, #4]
}
 8002bb2:	4770      	bx	lr
 8002bb4:	40015800 	.word	0x40015800

08002bb8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <ADC_DelayMicroSecond+0x24>)
{
 8002bba:	b513      	push	{r0, r1, r4, lr}
 8002bbc:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <ADC_DelayMicroSecond+0x28>)
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	f7fd fac7 	bl	8000154 <__udivsi3>
 8002bc6:	4344      	muls	r4, r0
 8002bc8:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d100      	bne.n	8002bd2 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8002bd0:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002bd2:	9b01      	ldr	r3, [sp, #4]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	e7f7      	b.n	8002bca <ADC_DelayMicroSecond+0x12>
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	000f4240 	.word	0x000f4240

08002be4 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002be4:	2103      	movs	r1, #3
 8002be6:	6803      	ldr	r3, [r0, #0]
{
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bec:	6898      	ldr	r0, [r3, #8]
 8002bee:	4008      	ands	r0, r1
 8002bf0:	2801      	cmp	r0, #1
 8002bf2:	d001      	beq.n	8002bf8 <ADC_Disable+0x14>
  return HAL_OK;
 8002bf4:	2000      	movs	r0, #0
}
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4202      	tst	r2, r0
 8002bfc:	d0fa      	beq.n	8002bf4 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002bfe:	2205      	movs	r2, #5
 8002c00:	689d      	ldr	r5, [r3, #8]
 8002c02:	4015      	ands	r5, r2
 8002c04:	2d01      	cmp	r5, #1
 8002c06:	d119      	bne.n	8002c3c <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8002c08:	6898      	ldr	r0, [r3, #8]
 8002c0a:	3a03      	subs	r2, #3
 8002c0c:	4302      	orrs	r2, r0
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002c12:	f7ff ff79 	bl	8002b08 <HAL_GetTick>
 8002c16:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	422b      	tst	r3, r5
 8002c1e:	d0e9      	beq.n	8002bf4 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c20:	f7ff ff72 	bl	8002b08 <HAL_GetTick>
 8002c24:	1b80      	subs	r0, r0, r6
 8002c26:	280a      	cmp	r0, #10
 8002c28:	d9f6      	bls.n	8002c18 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002c2e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c30:	4313      	orrs	r3, r2
 8002c32:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c36:	432b      	orrs	r3, r5
 8002c38:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002c3a:	e7dc      	b.n	8002bf6 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c40:	4313      	orrs	r3, r2
 8002c42:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c46:	4303      	orrs	r3, r0
 8002c48:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002c4a:	e7d4      	b.n	8002bf6 <ADC_Disable+0x12>

08002c4c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	6803      	ldr	r3, [r0, #0]
{
 8002c50:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c52:	689a      	ldr	r2, [r3, #8]
{
 8002c54:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c56:	400a      	ands	r2, r1
 8002c58:	2a01      	cmp	r2, #1
 8002c5a:	d104      	bne.n	8002c66 <ADC_Enable+0x1a>
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	4211      	tst	r1, r2
 8002c60:	d001      	beq.n	8002c66 <ADC_Enable+0x1a>
  return HAL_OK;
 8002c62:	2000      	movs	r0, #0
}
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <ADC_Enable+0x6c>)
 8002c6a:	4211      	tst	r1, r2
 8002c6c:	d008      	beq.n	8002c80 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6e:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c74:	4313      	orrs	r3, r2
 8002c76:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c7a:	4303      	orrs	r3, r0
 8002c7c:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002c7e:	e7f1      	b.n	8002c64 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8002c80:	2501      	movs	r5, #1
 8002c82:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002c84:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8002c86:	432a      	orrs	r2, r5
 8002c88:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002c8a:	f7ff ff95 	bl	8002bb8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002c8e:	f7ff ff3b 	bl	8002b08 <HAL_GetTick>
 8002c92:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	422b      	tst	r3, r5
 8002c9a:	d1e2      	bne.n	8002c62 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c9c:	f7ff ff34 	bl	8002b08 <HAL_GetTick>
 8002ca0:	1b80      	subs	r0, r0, r6
 8002ca2:	280a      	cmp	r0, #10
 8002ca4:	d9f6      	bls.n	8002c94 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cac:	4313      	orrs	r3, r2
 8002cae:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cb2:	432b      	orrs	r3, r5
 8002cb4:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002cb6:	e7d5      	b.n	8002c64 <ADC_Enable+0x18>
 8002cb8:	80000017 	.word	0x80000017

08002cbc <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	6803      	ldr	r3, [r0, #0]
{
 8002cc0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cc2:	6899      	ldr	r1, [r3, #8]
{
 8002cc4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cc6:	4211      	tst	r1, r2
 8002cc8:	d101      	bne.n	8002cce <ADC_ConversionStop+0x12>
  return HAL_OK;
 8002cca:	2000      	movs	r0, #0
}
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	4211      	tst	r1, r2
 8002cd2:	d006      	beq.n	8002ce2 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002cd4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cd6:	0792      	lsls	r2, r2, #30
 8002cd8:	d403      	bmi.n	8002ce2 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002cda:	2210      	movs	r2, #16
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002ce2:	f7ff ff11 	bl	8002b08 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002ce6:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8002ce8:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4233      	tst	r3, r6
 8002cf0:	d0eb      	beq.n	8002cca <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002cf2:	f7ff ff09 	bl	8002b08 <HAL_GetTick>
 8002cf6:	1b40      	subs	r0, r0, r5
 8002cf8:	280a      	cmp	r0, #10
 8002cfa:	d9f6      	bls.n	8002cea <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002d02:	4313      	orrs	r3, r2
 8002d04:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d08:	4303      	orrs	r3, r0
 8002d0a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002d0c:	e7de      	b.n	8002ccc <ADC_ConversionStop+0x10>
	...

08002d10 <HAL_ADC_Init>:
{
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002d14:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002d16:	2c00      	cmp	r4, #0
 8002d18:	d018      	beq.n	8002d4c <HAL_ADC_Init+0x3c>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002d20:	0022      	movs	r2, r4
 8002d22:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002d24:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002d26:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002d28:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002d2a:	f006 faf9 	bl	8009320 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002d2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d30:	06db      	lsls	r3, r3, #27
 8002d32:	d403      	bmi.n	8002d3c <HAL_ADC_Init+0x2c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002d38:	0752      	lsls	r2, r2, #29
 8002d3a:	d508      	bpl.n	8002d4e <HAL_ADC_Init+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002d40:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	4313      	orrs	r3, r2
 8002d44:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002d46:	2300      	movs	r3, #0
 8002d48:	3450      	adds	r4, #80	; 0x50
 8002d4a:	7023      	strb	r3, [r4, #0]
}
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002d50:	4a55      	ldr	r2, [pc, #340]	; (8002ea8 <HAL_ADC_Init+0x198>)
 8002d52:	4011      	ands	r1, r2
 8002d54:	3206      	adds	r2, #6
 8002d56:	32ff      	adds	r2, #255	; 0xff
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	4011      	ands	r1, r2
 8002d62:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_ADC_Init+0x19c>)
 8002d64:	2901      	cmp	r1, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_ADC_Init+0x5e>
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	4208      	tst	r0, r1
 8002d6c:	d119      	bne.n	8002da2 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002d6e:	2580      	movs	r5, #128	; 0x80
 8002d70:	6861      	ldr	r1, [r4, #4]
 8002d72:	05ed      	lsls	r5, r5, #23
 8002d74:	0048      	lsls	r0, r1, #1
 8002d76:	0840      	lsrs	r0, r0, #1
 8002d78:	42a8      	cmp	r0, r5
 8002d7a:	d003      	beq.n	8002d84 <HAL_ADC_Init+0x74>
 8002d7c:	2080      	movs	r0, #128	; 0x80
 8002d7e:	0600      	lsls	r0, r0, #24
 8002d80:	4281      	cmp	r1, r0
 8002d82:	d176      	bne.n	8002e72 <HAL_ADC_Init+0x162>
 8002d84:	6918      	ldr	r0, [r3, #16]
 8002d86:	0080      	lsls	r0, r0, #2
 8002d88:	0880      	lsrs	r0, r0, #2
 8002d8a:	6118      	str	r0, [r3, #16]
 8002d8c:	6918      	ldr	r0, [r3, #16]
 8002d8e:	4301      	orrs	r1, r0
 8002d90:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002d92:	2018      	movs	r0, #24
 8002d94:	68d9      	ldr	r1, [r3, #12]
 8002d96:	4381      	bics	r1, r0
 8002d98:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	68a0      	ldr	r0, [r4, #8]
 8002d9e:	4301      	orrs	r1, r0
 8002da0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002da2:	6811      	ldr	r1, [r2, #0]
 8002da4:	4842      	ldr	r0, [pc, #264]	; (8002eb0 <HAL_ADC_Init+0x1a0>)
 8002da6:	4001      	ands	r1, r0
 8002da8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dac:	6810      	ldr	r0, [r2, #0]
 8002dae:	0649      	lsls	r1, r1, #25
 8002db0:	4301      	orrs	r1, r0
 8002db2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	0552      	lsls	r2, r2, #21
 8002dba:	4211      	tst	r1, r2
 8002dbc:	d102      	bne.n	8002dc4 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	493b      	ldr	r1, [pc, #236]	; (8002eb4 <HAL_ADC_Init+0x1a4>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dc8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002dca:	400a      	ands	r2, r1
 8002dcc:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dce:	1c62      	adds	r2, r4, #1
 8002dd0:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dd2:	68e2      	ldr	r2, [r4, #12]
 8002dd4:	68d8      	ldr	r0, [r3, #12]
 8002dd6:	432a      	orrs	r2, r5
 8002dd8:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002dda:	69a0      	ldr	r0, [r4, #24]
 8002ddc:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dde:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002de0:	69e0      	ldr	r0, [r4, #28]
 8002de2:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002de4:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002de6:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002de8:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002dea:	0020      	movs	r0, r4
 8002dec:	302c      	adds	r0, #44	; 0x2c
 8002dee:	7800      	ldrb	r0, [r0, #0]
 8002df0:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002df2:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002df4:	6920      	ldr	r0, [r4, #16]
 8002df6:	3802      	subs	r0, #2
 8002df8:	4245      	negs	r5, r0
 8002dfa:	4168      	adcs	r0, r5
 8002dfc:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dfe:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e00:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e02:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e06:	30ff      	adds	r0, #255	; 0xff
 8002e08:	4282      	cmp	r2, r0
 8002e0a:	d004      	beq.n	8002e16 <HAL_ADC_Init+0x106>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002e0c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002e0e:	68d8      	ldr	r0, [r3, #12]
 8002e10:	432a      	orrs	r2, r5
 8002e12:	4302      	orrs	r2, r0
 8002e14:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e16:	1ca2      	adds	r2, r4, #2
 8002e18:	7fd2      	ldrb	r2, [r2, #31]
 8002e1a:	2a01      	cmp	r2, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_ADC_Init+0x11c>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e1e:	2900      	cmp	r1, #0
 8002e20:	d133      	bne.n	8002e8a <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	68d9      	ldr	r1, [r3, #12]
 8002e26:	0252      	lsls	r2, r2, #9
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002e2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e2e:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002e30:	2901      	cmp	r1, #1
 8002e32:	d132      	bne.n	8002e9a <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e34:	4820      	ldr	r0, [pc, #128]	; (8002eb8 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e36:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e38:	4002      	ands	r2, r0
 8002e3a:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e3e:	6918      	ldr	r0, [r3, #16]
 8002e40:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8002e42:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002e44:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e46:	4302      	orrs	r2, r0
 8002e48:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e50:	2107      	movs	r1, #7
 8002e52:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e56:	438a      	bics	r2, r1
 8002e58:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002e62:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002e64:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002e66:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e68:	439a      	bics	r2, r3
 8002e6a:	3b02      	subs	r3, #2
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002e70:	e76c      	b.n	8002d4c <HAL_ADC_Init+0x3c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002e72:	6918      	ldr	r0, [r3, #16]
 8002e74:	4d11      	ldr	r5, [pc, #68]	; (8002ebc <HAL_ADC_Init+0x1ac>)
 8002e76:	0080      	lsls	r0, r0, #2
 8002e78:	0880      	lsrs	r0, r0, #2
 8002e7a:	6118      	str	r0, [r3, #16]
 8002e7c:	6810      	ldr	r0, [r2, #0]
 8002e7e:	4028      	ands	r0, r5
 8002e80:	6010      	str	r0, [r2, #0]
 8002e82:	6810      	ldr	r0, [r2, #0]
 8002e84:	4301      	orrs	r1, r0
 8002e86:	6011      	str	r1, [r2, #0]
 8002e88:	e783      	b.n	8002d92 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8a:	2120      	movs	r1, #32
 8002e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e8e:	4301      	orrs	r1, r0
 8002e90:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002e94:	430a      	orrs	r2, r1
 8002e96:	65a2      	str	r2, [r4, #88]	; 0x58
 8002e98:	e7c8      	b.n	8002e2c <HAL_ADC_Init+0x11c>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	420a      	tst	r2, r1
 8002e9e:	d0d7      	beq.n	8002e50 <HAL_ADC_Init+0x140>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	611a      	str	r2, [r3, #16]
 8002ea6:	e7d3      	b.n	8002e50 <HAL_ADC_Init+0x140>
 8002ea8:	fffffefd 	.word	0xfffffefd
 8002eac:	40012708 	.word	0x40012708
 8002eb0:	fdffffff 	.word	0xfdffffff
 8002eb4:	fffe0219 	.word	0xfffe0219
 8002eb8:	fffffc03 	.word	0xfffffc03
 8002ebc:	ffc3ffff 	.word	0xffc3ffff

08002ec0 <HAL_ADC_DeInit>:
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002ec4:	2501      	movs	r5, #1
  if(hadc == NULL)
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d011      	beq.n	8002eee <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002eca:	2302      	movs	r3, #2
 8002ecc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ed2:	f7ff fef3 	bl	8002cbc <ADC_ConversionStop>
 8002ed6:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8002ed8:	d137      	bne.n	8002f4a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8002eda:	0020      	movs	r0, r4
 8002edc:	f7ff fe82 	bl	8002be4 <ADC_Disable>
 8002ee0:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8002ee2:	2801      	cmp	r0, #1
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002ee6:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	3450      	adds	r4, #80	; 0x50
 8002eec:	7023      	strb	r3, [r4, #0]
}
 8002eee:	0028      	movs	r0, r5
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	4915      	ldr	r1, [pc, #84]	; (8002f50 <HAL_ADC_DeInit+0x90>)
 8002efa:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8002efc:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8002efe:	400a      	ands	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8002f04:	4914      	ldr	r1, [pc, #80]	; (8002f58 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8002f06:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4912      	ldr	r1, [pc, #72]	; (8002f5c <HAL_ADC_DeInit+0x9c>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	4911      	ldr	r1, [pc, #68]	; (8002f60 <HAL_ADC_DeInit+0xa0>)
 8002f1a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8002f1c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8002f1e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	438a      	bics	r2, r1
 8002f24:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_ADC_DeInit+0xa4>)
 8002f2a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002f2c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8002f2e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002f30:	33b4      	adds	r3, #180	; 0xb4
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	438a      	bics	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	438a      	bics	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8002f3e:	f006 fa19 	bl	8009374 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f42:	2300      	movs	r3, #0
 8002f44:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8002f46:	6563      	str	r3, [r4, #84]	; 0x54
 8002f48:	e7ce      	b.n	8002ee8 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8002f4a:	2801      	cmp	r0, #1
 8002f4c:	d0cb      	beq.n	8002ee6 <HAL_ADC_DeInit+0x26>
 8002f4e:	e7d2      	b.n	8002ef6 <HAL_ADC_DeInit+0x36>
 8002f50:	fffff760 	.word	0xfffff760
 8002f54:	0000089f 	.word	0x0000089f
 8002f58:	efffffff 	.word	0xefffffff
 8002f5c:	833e0200 	.word	0x833e0200
 8002f60:	3ffffc02 	.word	0x3ffffc02
 8002f64:	f000f000 	.word	0xf000f000

08002f68 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f68:	6803      	ldr	r3, [r0, #0]
{
 8002f6a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f6c:	689b      	ldr	r3, [r3, #8]
{
 8002f6e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8002f70:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f72:	075b      	lsls	r3, r3, #29
 8002f74:	d41a      	bmi.n	8002fac <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8002f76:	0025      	movs	r5, r4
 8002f78:	3550      	adds	r5, #80	; 0x50
 8002f7a:	782b      	ldrb	r3, [r5, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d015      	beq.n	8002fac <HAL_ADC_Start+0x44>
 8002f80:	2301      	movs	r3, #1
 8002f82:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f84:	69e3      	ldr	r3, [r4, #28]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d111      	bne.n	8002fae <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002f8e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002f90:	401a      	ands	r2, r3
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f98:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002f9c:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002f9e:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	3a18      	subs	r2, #24
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002fae:	0020      	movs	r0, r4
 8002fb0:	f7ff fe4c 	bl	8002c4c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d0e8      	beq.n	8002f8a <HAL_ADC_Start+0x22>
 8002fb8:	e7f8      	b.n	8002fac <HAL_ADC_Start+0x44>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	fffff0fe 	.word	0xfffff0fe

08002fc0 <HAL_ADC_Stop>:
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002fc2:	0006      	movs	r6, r0
 8002fc4:	3650      	adds	r6, #80	; 0x50
 8002fc6:	7833      	ldrb	r3, [r6, #0]
{
 8002fc8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002fca:	2002      	movs	r0, #2
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d012      	beq.n	8002ff6 <HAL_ADC_Stop+0x36>
 8002fd0:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fd2:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8002fd4:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fd6:	f7ff fe71 	bl	8002cbc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002fde:	0020      	movs	r0, r4
 8002fe0:	f7ff fe00 	bl	8002be4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	d104      	bne.n	8002ff2 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fea:	4a03      	ldr	r2, [pc, #12]	; (8002ff8 <HAL_ADC_Stop+0x38>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	431d      	orrs	r5, r3
 8002ff0:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	7033      	strb	r3, [r6, #0]
}
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	fffffefe 	.word	0xfffffefe

08002ffc <HAL_ADC_PollForConversion>:
{
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ffe:	6946      	ldr	r6, [r0, #20]
{
 8003000:	0004      	movs	r4, r0
 8003002:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003004:	2e08      	cmp	r6, #8
 8003006:	d00d      	beq.n	8003024 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003008:	6803      	ldr	r3, [r0, #0]
 800300a:	2001      	movs	r0, #1
 800300c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800300e:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003010:	4203      	tst	r3, r0
 8003012:	d007      	beq.n	8003024 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003014:	2320      	movs	r3, #32
 8003016:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003018:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301a:	4313      	orrs	r3, r2
 800301c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800301e:	2300      	movs	r3, #0
 8003020:	7023      	strb	r3, [r4, #0]
}
 8003022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003024:	f7ff fd70 	bl	8002b08 <HAL_GetTick>
 8003028:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4216      	tst	r6, r2
 8003030:	d025      	beq.n	800307e <HAL_ADC_PollForConversion+0x82>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	430a      	orrs	r2, r1
 800303a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800303c:	22c0      	movs	r2, #192	; 0xc0
 800303e:	68d9      	ldr	r1, [r3, #12]
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	4211      	tst	r1, r2
 8003044:	d114      	bne.n	8003070 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003046:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003048:	7fd2      	ldrb	r2, [r2, #31]
 800304a:	2a00      	cmp	r2, #0
 800304c:	d110      	bne.n	8003070 <HAL_ADC_PollForConversion+0x74>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	0712      	lsls	r2, r2, #28
 8003052:	d50d      	bpl.n	8003070 <HAL_ADC_PollForConversion+0x74>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	0752      	lsls	r2, r2, #29
 8003058:	d424      	bmi.n	80030a4 <HAL_ADC_PollForConversion+0xa8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800305a:	210c      	movs	r1, #12
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	438a      	bics	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003062:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_ADC_PollForConversion+0xbc>)
 8003066:	4011      	ands	r1, r2
 8003068:	3204      	adds	r2, #4
 800306a:	32ff      	adds	r2, #255	; 0xff
 800306c:	430a      	orrs	r2, r1
 800306e:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8003070:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003072:	69a2      	ldr	r2, [r4, #24]
 8003074:	4282      	cmp	r2, r0
 8003076:	d1d4      	bne.n	8003022 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003078:	220c      	movs	r2, #12
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e7d1      	b.n	8003022 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800307e:	1c6a      	adds	r2, r5, #1
 8003080:	d0d4      	beq.n	800302c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003082:	2d00      	cmp	r5, #0
 8003084:	d108      	bne.n	8003098 <HAL_ADC_PollForConversion+0x9c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003086:	2304      	movs	r3, #4
 8003088:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800308a:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800308c:	4313      	orrs	r3, r2
 800308e:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8003090:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003092:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8003094:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003096:	e7c4      	b.n	8003022 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003098:	f7ff fd36 	bl	8002b08 <HAL_GetTick>
 800309c:	1bc0      	subs	r0, r0, r7
 800309e:	42a8      	cmp	r0, r5
 80030a0:	d9c3      	bls.n	800302a <HAL_ADC_PollForConversion+0x2e>
 80030a2:	e7f0      	b.n	8003086 <HAL_ADC_PollForConversion+0x8a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a4:	2220      	movs	r2, #32
 80030a6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80030a8:	430a      	orrs	r2, r1
 80030aa:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	2201      	movs	r2, #1
 80030ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030b0:	430a      	orrs	r2, r1
 80030b2:	65a2      	str	r2, [r4, #88]	; 0x58
 80030b4:	e7dc      	b.n	8003070 <HAL_ADC_PollForConversion+0x74>
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	fffffefe 	.word	0xfffffefe

080030bc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80030bc:	6803      	ldr	r3, [r0, #0]
 80030be:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_ADC_ConfigChannel>:
{
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80030c6:	0004      	movs	r4, r0
 80030c8:	3450      	adds	r4, #80	; 0x50
 80030ca:	7822      	ldrb	r2, [r4, #0]
{
 80030cc:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80030ce:	2002      	movs	r0, #2
 80030d0:	2a01      	cmp	r2, #1
 80030d2:	d00b      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x28>
 80030d4:	3801      	subs	r0, #1
 80030d6:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	6895      	ldr	r5, [r2, #8]
 80030dc:	076d      	lsls	r5, r5, #29
 80030de:	d506      	bpl.n	80030ee <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e0:	2220      	movs	r2, #32
 80030e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030e4:	430a      	orrs	r2, r1
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80030e8:	2300      	movs	r3, #0
 80030ea:	7023      	strb	r3, [r4, #0]
}
 80030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	2680      	movs	r6, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80030f2:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 80030f4:	4f19      	ldr	r7, [pc, #100]	; (800315c <HAL_ADC_ConfigChannel+0x98>)
 80030f6:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80030f8:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80030fa:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80030fc:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80030fe:	402b      	ands	r3, r5
 8003100:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 8003102:	42b9      	cmp	r1, r7
 8003104:	d018      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003106:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003108:	4301      	orrs	r1, r0
 800310a:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_ADC_ConfigChannel+0x9c>)
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003118:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800311a:	430b      	orrs	r3, r1
 800311c:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800311e:	f7ff fd4b 	bl	8002bb8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003122:	4235      	tst	r5, r6
 8003124:	d005      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_ADC_ConfigChannel+0x9c>)
 800312a:	03db      	lsls	r3, r3, #15
 800312c:	6811      	ldr	r1, [r2, #0]
 800312e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003130:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003132:	2000      	movs	r0, #0
 8003134:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003136:	e7d9      	b.n	80030ec <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003138:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800313a:	4381      	bics	r1, r0
 800313c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_ADC_ConfigChannel+0x9c>)
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <HAL_ADC_ConfigChannel+0xa0>)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	400b      	ands	r3, r1
 800314a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800314c:	4235      	tst	r5, r6
 800314e:	d0f0      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003150:	4a03      	ldr	r2, [pc, #12]	; (8003160 <HAL_ADC_ConfigChannel+0x9c>)
 8003152:	4905      	ldr	r1, [pc, #20]	; (8003168 <HAL_ADC_ConfigChannel+0xa4>)
 8003154:	6813      	ldr	r3, [r2, #0]
 8003156:	400b      	ands	r3, r1
 8003158:	e7ea      	b.n	8003130 <HAL_ADC_ConfigChannel+0x6c>
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	00001001 	.word	0x00001001
 8003160:	40012708 	.word	0x40012708
 8003164:	ff7fffff 	.word	0xff7fffff
 8003168:	ffbfffff 	.word	0xffbfffff

0800316c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800316e:	0005      	movs	r5, r0
 8003170:	3550      	adds	r5, #80	; 0x50
 8003172:	782b      	ldrb	r3, [r5, #0]
{
 8003174:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003176:	2002      	movs	r0, #2
 8003178:	2b01      	cmp	r3, #1
 800317a:	d043      	beq.n	8003204 <HAL_ADCEx_Calibration_Start+0x98>
 800317c:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800317e:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8003180:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	6898      	ldr	r0, [r3, #8]
 8003186:	4010      	ands	r0, r2
 8003188:	2801      	cmp	r0, #1
 800318a:	d109      	bne.n	80031a0 <HAL_ADCEx_Calibration_Start+0x34>
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4202      	tst	r2, r0
 8003190:	d006      	beq.n	80031a0 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003192:	2320      	movs	r3, #32
 8003194:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003196:	4313      	orrs	r3, r2
 8003198:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319a:	2300      	movs	r3, #0
 800319c:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800319e:	e031      	b.n	8003204 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 80031a0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80031a2:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_ADCEx_Calibration_Start+0x9c>)
 80031a4:	4011      	ands	r1, r2
 80031a6:	3206      	adds	r2, #6
 80031a8:	32ff      	adds	r2, #255	; 0xff
 80031aa:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031ac:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80031ae:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031b0:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	438a      	bics	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	0612      	lsls	r2, r2, #24
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80031c2:	f7ff fca1 	bl	8002b08 <HAL_GetTick>
 80031c6:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	db0b      	blt.n	80031e8 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031d0:	2103      	movs	r1, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031d2:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031d4:	400e      	ands	r6, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031d6:	4316      	orrs	r6, r2
 80031d8:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	2301      	movs	r3, #1
 80031dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031de:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80031e0:	438a      	bics	r2, r1
 80031e2:	4313      	orrs	r3, r2
 80031e4:	6563      	str	r3, [r4, #84]	; 0x54
 80031e6:	e7d8      	b.n	800319a <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031e8:	f7ff fc8e 	bl	8002b08 <HAL_GetTick>
 80031ec:	1bc0      	subs	r0, r0, r7
 80031ee:	280a      	cmp	r0, #10
 80031f0:	d9ea      	bls.n	80031c8 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80031f2:	2312      	movs	r3, #18
 80031f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80031f6:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80031f8:	439a      	bics	r2, r3
 80031fa:	3b02      	subs	r3, #2
 80031fc:	4313      	orrs	r3, r2
 80031fe:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003200:	2300      	movs	r3, #0
 8003202:	702b      	strb	r3, [r5, #0]
}
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	fffffefd 	.word	0xfffffefd

0800320c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800320c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800320e:	25ff      	movs	r5, #255	; 0xff
 8003210:	2403      	movs	r4, #3
 8003212:	002a      	movs	r2, r5
 8003214:	4004      	ands	r4, r0
 8003216:	00e4      	lsls	r4, r4, #3
 8003218:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800321a:	0189      	lsls	r1, r1, #6
 800321c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800321e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003220:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003222:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003224:	2800      	cmp	r0, #0
 8003226:	db0a      	blt.n	800323e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003228:	24c0      	movs	r4, #192	; 0xc0
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_NVIC_SetPriority+0x4c>)
 800322c:	0880      	lsrs	r0, r0, #2
 800322e:	0080      	lsls	r0, r0, #2
 8003230:	18c0      	adds	r0, r0, r3
 8003232:	00a4      	lsls	r4, r4, #2
 8003234:	5903      	ldr	r3, [r0, r4]
 8003236:	4013      	ands	r3, r2
 8003238:	430b      	orrs	r3, r1
 800323a:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800323c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800323e:	200f      	movs	r0, #15
 8003240:	4003      	ands	r3, r0
 8003242:	3b08      	subs	r3, #8
 8003244:	4805      	ldr	r0, [pc, #20]	; (800325c <HAL_NVIC_SetPriority+0x50>)
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	181b      	adds	r3, r3, r0
 800324c:	69d8      	ldr	r0, [r3, #28]
 800324e:	4002      	ands	r2, r0
 8003250:	430a      	orrs	r2, r1
 8003252:	61da      	str	r2, [r3, #28]
 8003254:	e7f2      	b.n	800323c <HAL_NVIC_SetPriority+0x30>
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003260:	2800      	cmp	r0, #0
 8003262:	db05      	blt.n	8003270 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003264:	231f      	movs	r3, #31
 8003266:	4018      	ands	r0, r3
 8003268:	3b1e      	subs	r3, #30
 800326a:	4083      	lsls	r3, r0
 800326c:	4a01      	ldr	r2, [pc, #4]	; (8003274 <HAL_NVIC_EnableIRQ+0x14>)
 800326e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003270:	4770      	bx	lr
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	e000e100 	.word	0xe000e100

08003278 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003278:	2800      	cmp	r0, #0
 800327a:	db09      	blt.n	8003290 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327c:	231f      	movs	r3, #31
 800327e:	4018      	ands	r0, r3
 8003280:	3b1e      	subs	r3, #30
 8003282:	4083      	lsls	r3, r0
 8003284:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_NVIC_DisableIRQ+0x1c>)
 8003286:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003288:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800328c:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003290:	4770      	bx	lr
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	e000e104 	.word	0xe000e104

08003298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	1e43      	subs	r3, r0, #1
 800329c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d20d      	bcs.n	80032c0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a8:	4807      	ldr	r0, [pc, #28]	; (80032c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ac:	6a03      	ldr	r3, [r0, #32]
 80032ae:	0609      	lsls	r1, r1, #24
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80032c0:	4770      	bx	lr
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	e000e010 	.word	0xe000e010
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032cc:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	1d84      	adds	r4, r0, #6
 80032d0:	7fe2      	ldrb	r2, [r4, #31]
{
 80032d2:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d4:	2a02      	cmp	r2, #2
 80032d6:	d006      	beq.n	80032e6 <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	2204      	movs	r2, #4
 80032da:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 80032dc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80032de:	2200      	movs	r2, #0
 80032e0:	3305      	adds	r3, #5
 80032e2:	77da      	strb	r2, [r3, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80032e4:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e6:	6802      	ldr	r2, [r0, #0]
 80032e8:	200e      	movs	r0, #14
 80032ea:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032ec:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ee:	4381      	bics	r1, r0
 80032f0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80032f2:	2101      	movs	r1, #1
 80032f4:	6810      	ldr	r0, [r2, #0]
 80032f6:	4388      	bics	r0, r1
 80032f8:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032fe:	402a      	ands	r2, r5
 8003300:	000d      	movs	r5, r1
 8003302:	4095      	lsls	r5, r2
 8003304:	6045      	str	r5, [r0, #4]
    return status;
 8003306:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003308:	77e1      	strb	r1, [r4, #31]
    return status;
 800330a:	e7e8      	b.n	80032de <HAL_DMA_Abort+0x12>

0800330c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800330c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800330e:	1d84      	adds	r4, r0, #6
 8003310:	7fe3      	ldrb	r3, [r4, #31]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003316:	2304      	movs	r3, #4
 8003318:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800331a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800331c:	0018      	movs	r0, r3
 800331e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003320:	210e      	movs	r1, #14
 8003322:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003324:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	438a      	bics	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800332c:	2201      	movs	r2, #1
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	4391      	bics	r1, r2
 8003332:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003336:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003338:	402b      	ands	r3, r5
 800333a:	0015      	movs	r5, r2
 800333c:	409d      	lsls	r5, r3
 800333e:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003340:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003342:	2400      	movs	r4, #0
 8003344:	1d43      	adds	r3, r0, #5
 8003346:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8003348:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800334c:	42a2      	cmp	r2, r4
 800334e:	d0e5      	beq.n	800331c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003350:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	0023      	movs	r3, r4
 8003354:	e7e2      	b.n	800331c <HAL_DMA_Abort_IT+0x10>

08003356 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003358:	261c      	movs	r6, #28
 800335a:	2704      	movs	r7, #4
 800335c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800335e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003360:	4032      	ands	r2, r6
 8003362:	003e      	movs	r6, r7
 8003364:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003366:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003368:	6803      	ldr	r3, [r0, #0]
 800336a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800336c:	4235      	tst	r5, r6
 800336e:	d00d      	beq.n	800338c <HAL_DMA_IRQHandler+0x36>
 8003370:	423c      	tst	r4, r7
 8003372:	d00b      	beq.n	800338c <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	0692      	lsls	r2, r2, #26
 8003378:	d402      	bmi.n	8003380 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	43ba      	bics	r2, r7
 800337e:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003380:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003382:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003384:	2b00      	cmp	r3, #0
 8003386:	d019      	beq.n	80033bc <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003388:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800338a:	e017      	b.n	80033bc <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800338c:	2702      	movs	r7, #2
 800338e:	003e      	movs	r6, r7
 8003390:	4096      	lsls	r6, r2
 8003392:	4235      	tst	r5, r6
 8003394:	d013      	beq.n	80033be <HAL_DMA_IRQHandler+0x68>
 8003396:	423c      	tst	r4, r7
 8003398:	d011      	beq.n	80033be <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	0692      	lsls	r2, r2, #26
 800339e:	d406      	bmi.n	80033ae <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a0:	240a      	movs	r4, #10
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	43a2      	bics	r2, r4
 80033a6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80033a8:	2201      	movs	r2, #1
 80033aa:	1d83      	adds	r3, r0, #6
 80033ac:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80033ae:	2200      	movs	r2, #0
 80033b0:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033b2:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80033b4:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80033b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d1e5      	bne.n	8003388 <HAL_DMA_IRQHandler+0x32>
}
 80033bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80033be:	2608      	movs	r6, #8
 80033c0:	0037      	movs	r7, r6
 80033c2:	4097      	lsls	r7, r2
 80033c4:	423d      	tst	r5, r7
 80033c6:	d0f9      	beq.n	80033bc <HAL_DMA_IRQHandler+0x66>
 80033c8:	4234      	tst	r4, r6
 80033ca:	d0f7      	beq.n	80033bc <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033cc:	250e      	movs	r5, #14
 80033ce:	681c      	ldr	r4, [r3, #0]
 80033d0:	43ac      	bics	r4, r5
 80033d2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033d4:	2301      	movs	r3, #1
 80033d6:	001c      	movs	r4, r3
 80033d8:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80033da:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033dc:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033de:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80033e0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80033e2:	2200      	movs	r2, #0
 80033e4:	1d43      	adds	r3, r0, #5
 80033e6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80033e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033ea:	e7e5      	b.n	80033b8 <HAL_DMA_IRQHandler+0x62>

080033ec <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80033ec:	0003      	movs	r3, r0
 80033ee:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80033f0:	d101      	bne.n	80033f6 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80033f2:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80033f4:	4770      	bx	lr
      status = HAL_ERROR;
 80033f6:	2001      	movs	r0, #1
 80033f8:	e7fc      	b.n	80033f4 <HAL_EXTI_RegisterCallback+0x8>

080033fa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80033fa:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 80033fc:	2001      	movs	r0, #1
  if (hexti == NULL)
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003402:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003404:	6019      	str	r1, [r3, #0]
  }
}
 8003406:	4770      	bx	lr

08003408 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003408:	231f      	movs	r3, #31
 800340a:	6802      	ldr	r2, [r0, #0]
{
 800340c:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800340e:	401a      	ands	r2, r3
 8003410:	3b1e      	subs	r3, #30
 8003412:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <HAL_EXTI_IRQHandler+0x20>)
 8003416:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8003418:	420b      	tst	r3, r1
 800341a:	d004      	beq.n	8003426 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800341c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800341e:	6843      	ldr	r3, [r0, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d000      	beq.n	8003426 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003424:	4798      	blx	r3
    }
  }
}
 8003426:	bd10      	pop	{r4, pc}
 8003428:	40010400 	.word	0x40010400

0800342c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <FLASH_SetErrorCode+0xa4>)
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	6990      	ldr	r0, [r2, #24]
 8003432:	0049      	lsls	r1, r1, #1
 8003434:	0003      	movs	r3, r0
{
 8003436:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003438:	400b      	ands	r3, r1
 800343a:	4208      	tst	r0, r1
 800343c:	d005      	beq.n	800344a <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800343e:	2302      	movs	r3, #2
 8003440:	4824      	ldr	r0, [pc, #144]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
 8003442:	6944      	ldr	r4, [r0, #20]
 8003444:	4323      	orrs	r3, r4
 8003446:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003448:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800344a:	2080      	movs	r0, #128	; 0x80
 800344c:	6991      	ldr	r1, [r2, #24]
 800344e:	0080      	lsls	r0, r0, #2
 8003450:	4201      	tst	r1, r0
 8003452:	d005      	beq.n	8003460 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003454:	2101      	movs	r1, #1
 8003456:	4c1f      	ldr	r4, [pc, #124]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8003458:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800345a:	6965      	ldr	r5, [r4, #20]
 800345c:	4329      	orrs	r1, r5
 800345e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003460:	2080      	movs	r0, #128	; 0x80
 8003462:	6991      	ldr	r1, [r2, #24]
 8003464:	00c0      	lsls	r0, r0, #3
 8003466:	4201      	tst	r1, r0
 8003468:	d005      	beq.n	8003476 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800346a:	2108      	movs	r1, #8
 800346c:	4c19      	ldr	r4, [pc, #100]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 800346e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003470:	6965      	ldr	r5, [r4, #20]
 8003472:	4329      	orrs	r1, r5
 8003474:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003476:	2080      	movs	r0, #128	; 0x80
 8003478:	6991      	ldr	r1, [r2, #24]
 800347a:	0100      	lsls	r0, r0, #4
 800347c:	4201      	tst	r1, r0
 800347e:	d005      	beq.n	800348c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003480:	2104      	movs	r1, #4
 8003482:	4c14      	ldr	r4, [pc, #80]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003484:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003486:	6965      	ldr	r5, [r4, #20]
 8003488:	4329      	orrs	r1, r5
 800348a:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800348c:	2080      	movs	r0, #128	; 0x80
 800348e:	6991      	ldr	r1, [r2, #24]
 8003490:	0180      	lsls	r0, r0, #6
 8003492:	4201      	tst	r1, r0
 8003494:	d005      	beq.n	80034a2 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003496:	2110      	movs	r1, #16
 8003498:	4c0e      	ldr	r4, [pc, #56]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800349a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800349c:	6965      	ldr	r5, [r4, #20]
 800349e:	4329      	orrs	r1, r5
 80034a0:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80034a2:	6991      	ldr	r1, [r2, #24]
 80034a4:	0389      	lsls	r1, r1, #14
 80034a6:	d505      	bpl.n	80034b4 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80034a8:	2020      	movs	r0, #32
 80034aa:	4c0a      	ldr	r4, [pc, #40]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80034ac:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80034ae:	6961      	ldr	r1, [r4, #20]
 80034b0:	4301      	orrs	r1, r0
 80034b2:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80034b4:	2080      	movs	r0, #128	; 0x80
 80034b6:	6991      	ldr	r1, [r2, #24]
 80034b8:	0240      	lsls	r0, r0, #9
 80034ba:	4201      	tst	r1, r0
 80034bc:	d005      	beq.n	80034ca <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	4c04      	ldr	r4, [pc, #16]	; (80034d4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80034c2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80034c4:	6965      	ldr	r5, [r4, #20]
 80034c6:	4329      	orrs	r1, r5
 80034c8:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034ca:	6193      	str	r3, [r2, #24]
}  
 80034cc:	bd30      	pop	{r4, r5, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	40022000 	.word	0x40022000
 80034d4:	200003ac 	.word	0x200003ac

080034d8 <HAL_FLASH_Unlock>:
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80034d8:	2201      	movs	r2, #1
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_FLASH_Unlock+0x50>)
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	4211      	tst	r1, r2
 80034e0:	d106      	bne.n	80034f0 <HAL_FLASH_Unlock+0x18>
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	0008      	movs	r0, r1
 80034e8:	4010      	ands	r0, r2
 80034ea:	4211      	tst	r1, r2
 80034ec:	d10e      	bne.n	800350c <HAL_FLASH_Unlock+0x34>
}
 80034ee:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80034f4:	b672      	cpsid	i
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <HAL_FLASH_Unlock+0x54>)
 80034f8:	60d8      	str	r0, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80034fa:	480d      	ldr	r0, [pc, #52]	; (8003530 <HAL_FLASH_Unlock+0x58>)
 80034fc:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fe:	f381 8810 	msr	PRIMASK, r1
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003502:	6859      	ldr	r1, [r3, #4]
      return HAL_ERROR;
 8003504:	0010      	movs	r0, r2
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003506:	4211      	tst	r1, r2
 8003508:	d0eb      	beq.n	80034e2 <HAL_FLASH_Unlock+0xa>
 800350a:	e7f0      	b.n	80034ee <HAL_FLASH_Unlock+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003510:	b672      	cpsid	i
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <HAL_FLASH_Unlock+0x5c>)
 8003514:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <HAL_FLASH_Unlock+0x60>)
 8003518:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	f382 8810 	msr	PRIMASK, r2
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800351e:	6858      	ldr	r0, [r3, #4]
 8003520:	0780      	lsls	r0, r0, #30
      return HAL_ERROR;
 8003522:	0fc0      	lsrs	r0, r0, #31
 8003524:	e7e3      	b.n	80034ee <HAL_FLASH_Unlock+0x16>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	40022000 	.word	0x40022000
 800352c:	89abcdef 	.word	0x89abcdef
 8003530:	02030405 	.word	0x02030405
 8003534:	8c9daebf 	.word	0x8c9daebf
 8003538:	13141516 	.word	0x13141516

0800353c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800353c:	2202      	movs	r2, #2
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_FLASH_Lock+0x18>)
}
 8003540:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003548:	2201      	movs	r2, #1
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
}
 8003550:	4770      	bx	lr
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	40022000 	.word	0x40022000

08003558 <FLASH_WaitForLastOperation>:
{
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff fad4 	bl	8002b08 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003560:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8003562:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <FLASH_WaitForLastOperation+0x70>)
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	4232      	tst	r2, r6
 800356a:	d121      	bne.n	80035b0 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800356c:	2202      	movs	r2, #2
 800356e:	6999      	ldr	r1, [r3, #24]
 8003570:	4211      	tst	r1, r2
 8003572:	d000      	beq.n	8003576 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003574:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	05d2      	lsls	r2, r2, #23
 800357a:	d415      	bmi.n	80035a8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800357c:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800357e:	0592      	lsls	r2, r2, #22
 8003580:	d412      	bmi.n	80035a8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003582:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003584:	0552      	lsls	r2, r2, #21
 8003586:	d40f      	bmi.n	80035a8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003588:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800358a:	0512      	lsls	r2, r2, #20
 800358c:	d40c      	bmi.n	80035a8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800358e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003590:	0492      	lsls	r2, r2, #18
 8003592:	d409      	bmi.n	80035a8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0008      	movs	r0, r1
 800359a:	0292      	lsls	r2, r2, #10
 800359c:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800359e:	4211      	tst	r1, r2
 80035a0:	d102      	bne.n	80035a8 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80035a2:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80035a4:	03db      	lsls	r3, r3, #15
 80035a6:	d508      	bpl.n	80035ba <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80035a8:	f7ff ff40 	bl	800342c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035ac:	2001      	movs	r0, #1
 80035ae:	e004      	b.n	80035ba <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80035b0:	1c62      	adds	r2, r4, #1
 80035b2:	d0d8      	beq.n	8003566 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035b4:	2c00      	cmp	r4, #0
 80035b6:	d101      	bne.n	80035bc <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 80035b8:	2003      	movs	r0, #3
}
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035bc:	f7ff faa4 	bl	8002b08 <HAL_GetTick>
 80035c0:	1b40      	subs	r0, r0, r5
 80035c2:	42a0      	cmp	r0, r4
 80035c4:	d9ce      	bls.n	8003564 <FLASH_WaitForLastOperation+0xc>
 80035c6:	e7f7      	b.n	80035b8 <FLASH_WaitForLastOperation+0x60>
 80035c8:	40022000 	.word	0x40022000

080035cc <HAL_FLASH_Program>:
{
 80035cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 80035ce:	4c0b      	ldr	r4, [pc, #44]	; (80035fc <HAL_FLASH_Program+0x30>)
{
 80035d0:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 80035d2:	7c23      	ldrb	r3, [r4, #16]
{
 80035d4:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 80035d6:	2002      	movs	r0, #2
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d00d      	beq.n	80035f8 <HAL_FLASH_Program+0x2c>
 80035dc:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035de:	4808      	ldr	r0, [pc, #32]	; (8003600 <HAL_FLASH_Program+0x34>)
  __HAL_LOCK(&pFlash);
 80035e0:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035e2:	f7ff ffb9 	bl	8003558 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_FLASH_Program+0x28>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035ea:	6160      	str	r0, [r4, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035ec:	4804      	ldr	r0, [pc, #16]	; (8003600 <HAL_FLASH_Program+0x34>)
    *(__IO uint32_t *)Address = Data;
 80035ee:	602e      	str	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035f0:	f7ff ffb2 	bl	8003558 <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 80035f4:	2300      	movs	r3, #0
 80035f6:	7423      	strb	r3, [r4, #16]
}
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	200003ac 	.word	0x200003ac
 8003600:	0000c350 	.word	0x0000c350

08003604 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003604:	2100      	movs	r1, #0

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003606:	2280      	movs	r2, #128	; 0x80
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <FLASH_PageErase+0x24>)
{
 800360a:	b510      	push	{r4, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800360c:	6159      	str	r1, [r3, #20]
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <FLASH_PageErase+0x28>)
 8003610:	0092      	lsls	r2, r2, #2
 8003612:	685c      	ldr	r4, [r3, #4]
 8003614:	4322      	orrs	r2, r4
 8003616:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003618:	2208      	movs	r2, #8
 800361a:	685c      	ldr	r4, [r3, #4]
 800361c:	4322      	orrs	r2, r4
 800361e:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8003620:	237f      	movs	r3, #127	; 0x7f
 8003622:	4398      	bics	r0, r3
 8003624:	6001      	str	r1, [r0, #0]
}
 8003626:	bd10      	pop	{r4, pc}
 8003628:	200003ac 	.word	0x200003ac
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003630:	4a59      	ldr	r2, [pc, #356]	; (8003798 <HAL_GPIO_Init+0x168>)
{
 8003632:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003634:	1882      	adds	r2, r0, r2
 8003636:	1e54      	subs	r4, r2, #1
 8003638:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800363a:	2300      	movs	r3, #0
{
 800363c:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800363e:	3205      	adds	r2, #5
{
 8003640:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003642:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003644:	9a02      	ldr	r2, [sp, #8]
 8003646:	6814      	ldr	r4, [r2, #0]
 8003648:	0022      	movs	r2, r4
 800364a:	40da      	lsrs	r2, r3
 800364c:	d101      	bne.n	8003652 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800364e:	b007      	add	sp, #28
 8003650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003652:	2201      	movs	r2, #1
 8003654:	0025      	movs	r5, r4
 8003656:	409a      	lsls	r2, r3
 8003658:	4015      	ands	r5, r2
 800365a:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 800365c:	4214      	tst	r4, r2
 800365e:	d100      	bne.n	8003662 <HAL_GPIO_Init+0x32>
 8003660:	e098      	b.n	8003794 <HAL_GPIO_Init+0x164>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003662:	9902      	ldr	r1, [sp, #8]
 8003664:	2510      	movs	r5, #16
 8003666:	684c      	ldr	r4, [r1, #4]
 8003668:	005f      	lsls	r7, r3, #1
 800366a:	0026      	movs	r6, r4
 800366c:	43ae      	bics	r6, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800366e:	3d0d      	subs	r5, #13
 8003670:	40bd      	lsls	r5, r7
 8003672:	43e9      	mvns	r1, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003674:	1e75      	subs	r5, r6, #1
 8003676:	46b4      	mov	ip, r6
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003678:	9103      	str	r1, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800367a:	2d01      	cmp	r5, #1
 800367c:	d80d      	bhi.n	800369a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 800367e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003680:	9903      	ldr	r1, [sp, #12]
 8003682:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003684:	9902      	ldr	r1, [sp, #8]
 8003686:	68cd      	ldr	r5, [r1, #12]
 8003688:	40bd      	lsls	r5, r7
 800368a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800368c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800368e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003690:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003692:	0922      	lsrs	r2, r4, #4
 8003694:	409a      	lsls	r2, r3
 8003696:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003698:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800369a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800369c:	9a03      	ldr	r2, [sp, #12]
 800369e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a0:	9a02      	ldr	r2, [sp, #8]
 80036a2:	6892      	ldr	r2, [r2, #8]
 80036a4:	40ba      	lsls	r2, r7
 80036a6:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80036a8:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036aa:	4662      	mov	r2, ip
 80036ac:	2a02      	cmp	r2, #2
 80036ae:	d110      	bne.n	80036d2 <HAL_GPIO_Init+0xa2>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036b0:	2507      	movs	r5, #7
 80036b2:	210f      	movs	r1, #15
 80036b4:	401d      	ands	r5, r3
 80036b6:	00ad      	lsls	r5, r5, #2
 80036b8:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	0092      	lsls	r2, r2, #2
 80036be:	1882      	adds	r2, r0, r2
 80036c0:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036c2:	438e      	bics	r6, r1
 80036c4:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80036c6:	9902      	ldr	r1, [sp, #8]
 80036c8:	690e      	ldr	r6, [r1, #16]
 80036ca:	4661      	mov	r1, ip
 80036cc:	40ae      	lsls	r6, r5
 80036ce:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80036d0:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80036d2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d4:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d6:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d8:	402a      	ands	r2, r5
 80036da:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036dc:	0022      	movs	r2, r4
 80036de:	4032      	ands	r2, r6
 80036e0:	40ba      	lsls	r2, r7
 80036e2:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 80036e4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036e6:	00e2      	lsls	r2, r4, #3
 80036e8:	d554      	bpl.n	8003794 <HAL_GPIO_Init+0x164>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2701      	movs	r7, #1
 80036ec:	4d2b      	ldr	r5, [pc, #172]	; (800379c <HAL_GPIO_Init+0x16c>)
 80036ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80036f0:	433a      	orrs	r2, r7
 80036f2:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <HAL_GPIO_Init+0x170>)
 80036f6:	089d      	lsrs	r5, r3, #2
 80036f8:	00ad      	lsls	r5, r5, #2
 80036fa:	18ad      	adds	r5, r5, r2
 80036fc:	68aa      	ldr	r2, [r5, #8]
 80036fe:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003700:	001a      	movs	r2, r3
 8003702:	4032      	ands	r2, r6
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	9203      	str	r2, [sp, #12]
 8003708:	220f      	movs	r2, #15
 800370a:	9903      	ldr	r1, [sp, #12]
 800370c:	408a      	lsls	r2, r1
 800370e:	4661      	mov	r1, ip
 8003710:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003712:	22a0      	movs	r2, #160	; 0xa0
 8003714:	05d2      	lsls	r2, r2, #23
 8003716:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003718:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800371a:	2200      	movs	r2, #0
 800371c:	4560      	cmp	r0, ip
 800371e:	d011      	beq.n	8003744 <HAL_GPIO_Init+0x114>
 8003720:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <HAL_GPIO_Init+0x174>)
 8003722:	4694      	mov	ip, r2
 8003724:	003a      	movs	r2, r7
 8003726:	4560      	cmp	r0, ip
 8003728:	d00c      	beq.n	8003744 <HAL_GPIO_Init+0x114>
 800372a:	4f1f      	ldr	r7, [pc, #124]	; (80037a8 <HAL_GPIO_Init+0x178>)
 800372c:	1892      	adds	r2, r2, r2
 800372e:	42b8      	cmp	r0, r7
 8003730:	d008      	beq.n	8003744 <HAL_GPIO_Init+0x114>
 8003732:	4f1e      	ldr	r7, [pc, #120]	; (80037ac <HAL_GPIO_Init+0x17c>)
 8003734:	0032      	movs	r2, r6
 8003736:	42b8      	cmp	r0, r7
 8003738:	d004      	beq.n	8003744 <HAL_GPIO_Init+0x114>
 800373a:	4e1d      	ldr	r6, [pc, #116]	; (80037b0 <HAL_GPIO_Init+0x180>)
 800373c:	3201      	adds	r2, #1
 800373e:	42b0      	cmp	r0, r6
 8003740:	d000      	beq.n	8003744 <HAL_GPIO_Init+0x114>
 8003742:	9a05      	ldr	r2, [sp, #20]
 8003744:	9903      	ldr	r1, [sp, #12]
 8003746:	408a      	lsls	r2, r1
 8003748:	9904      	ldr	r1, [sp, #16]
 800374a:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 800374c:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800374e:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8003750:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_GPIO_Init+0x184>)
        temp &= ~((uint32_t)iocurrent);
 8003754:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8003756:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8003758:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375a:	03e1      	lsls	r1, r4, #15
 800375c:	d401      	bmi.n	8003762 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 800375e:	003e      	movs	r6, r7
 8003760:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003762:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003764:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8003766:	9e01      	ldr	r6, [sp, #4]
 8003768:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800376a:	03a1      	lsls	r1, r4, #14
 800376c:	d401      	bmi.n	8003772 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 800376e:	003e      	movs	r6, r7
 8003770:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8003772:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003774:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8003776:	9e01      	ldr	r6, [sp, #4]
 8003778:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800377a:	02e1      	lsls	r1, r4, #11
 800377c:	d401      	bmi.n	8003782 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 800377e:	003e      	movs	r6, r7
 8003780:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8003782:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8003784:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003786:	9f01      	ldr	r7, [sp, #4]
 8003788:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800378a:	02a4      	lsls	r4, r4, #10
 800378c:	d401      	bmi.n	8003792 <HAL_GPIO_Init+0x162>
        temp &= ~((uint32_t)iocurrent);
 800378e:	402e      	ands	r6, r5
 8003790:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8003792:	60d7      	str	r7, [r2, #12]
    position++;
 8003794:	3301      	adds	r3, #1
 8003796:	e755      	b.n	8003644 <HAL_GPIO_Init+0x14>
 8003798:	afffe400 	.word	0xafffe400
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010000 	.word	0x40010000
 80037a4:	50000400 	.word	0x50000400
 80037a8:	50000800 	.word	0x50000800
 80037ac:	50000c00 	.word	0x50000c00
 80037b0:	50001000 	.word	0x50001000
 80037b4:	40010400 	.word	0x40010400

080037b8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037b8:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037ba:	4a38      	ldr	r2, [pc, #224]	; (800389c <HAL_GPIO_DeInit+0xe4>)
{
 80037bc:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037be:	1882      	adds	r2, r0, r2
{
 80037c0:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037c2:	1e51      	subs	r1, r2, #1
 80037c4:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 80037c6:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037c8:	3205      	adds	r2, #5
 80037ca:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 80037cc:	9a02      	ldr	r2, [sp, #8]
 80037ce:	40da      	lsrs	r2, r3
 80037d0:	d101      	bne.n	80037d6 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 80037d2:	b007      	add	sp, #28
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80037d6:	2701      	movs	r7, #1
 80037d8:	003a      	movs	r2, r7
 80037da:	409a      	lsls	r2, r3
 80037dc:	9c02      	ldr	r4, [sp, #8]
 80037de:	9201      	str	r2, [sp, #4]
 80037e0:	4014      	ands	r4, r2
    if (iocurrent)
 80037e2:	9901      	ldr	r1, [sp, #4]
 80037e4:	9a02      	ldr	r2, [sp, #8]
 80037e6:	420a      	tst	r2, r1
 80037e8:	d056      	beq.n	8003898 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80037ea:	4a2d      	ldr	r2, [pc, #180]	; (80038a0 <HAL_GPIO_DeInit+0xe8>)
 80037ec:	0899      	lsrs	r1, r3, #2
 80037ee:	0089      	lsls	r1, r1, #2
 80037f0:	1889      	adds	r1, r1, r2
 80037f2:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80037f4:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80037f6:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80037f8:	2203      	movs	r2, #3
 80037fa:	4015      	ands	r5, r2
 80037fc:	00ad      	lsls	r5, r5, #2
 80037fe:	320c      	adds	r2, #12
 8003800:	40aa      	lsls	r2, r5
 8003802:	9203      	str	r2, [sp, #12]
 8003804:	4032      	ands	r2, r6
 8003806:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003808:	22a0      	movs	r2, #160	; 0xa0
 800380a:	05d2      	lsls	r2, r2, #23
 800380c:	4694      	mov	ip, r2
 800380e:	2200      	movs	r2, #0
 8003810:	4560      	cmp	r0, ip
 8003812:	d011      	beq.n	8003838 <HAL_GPIO_DeInit+0x80>
 8003814:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <HAL_GPIO_DeInit+0xec>)
 8003816:	4694      	mov	ip, r2
 8003818:	003a      	movs	r2, r7
 800381a:	4560      	cmp	r0, ip
 800381c:	d00c      	beq.n	8003838 <HAL_GPIO_DeInit+0x80>
 800381e:	4f22      	ldr	r7, [pc, #136]	; (80038a8 <HAL_GPIO_DeInit+0xf0>)
 8003820:	1892      	adds	r2, r2, r2
 8003822:	42b8      	cmp	r0, r7
 8003824:	d008      	beq.n	8003838 <HAL_GPIO_DeInit+0x80>
 8003826:	4f21      	ldr	r7, [pc, #132]	; (80038ac <HAL_GPIO_DeInit+0xf4>)
 8003828:	3201      	adds	r2, #1
 800382a:	42b8      	cmp	r0, r7
 800382c:	d004      	beq.n	8003838 <HAL_GPIO_DeInit+0x80>
 800382e:	4e20      	ldr	r6, [pc, #128]	; (80038b0 <HAL_GPIO_DeInit+0xf8>)
 8003830:	3201      	adds	r2, #1
 8003832:	42b0      	cmp	r0, r6
 8003834:	d000      	beq.n	8003838 <HAL_GPIO_DeInit+0x80>
 8003836:	9a05      	ldr	r2, [sp, #20]
 8003838:	40aa      	lsls	r2, r5
 800383a:	9d04      	ldr	r5, [sp, #16]
 800383c:	42aa      	cmp	r2, r5
 800383e:	d110      	bne.n	8003862 <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003840:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_GPIO_DeInit+0xfc>)
 8003842:	6815      	ldr	r5, [r2, #0]
 8003844:	43a5      	bics	r5, r4
 8003846:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003848:	6855      	ldr	r5, [r2, #4]
 800384a:	43a5      	bics	r5, r4
 800384c:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800384e:	6895      	ldr	r5, [r2, #8]
 8003850:	43a5      	bics	r5, r4
 8003852:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003854:	68d5      	ldr	r5, [r2, #12]
 8003856:	43a5      	bics	r5, r4
 8003858:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800385a:	688a      	ldr	r2, [r1, #8]
 800385c:	9c03      	ldr	r4, [sp, #12]
 800385e:	43a2      	bics	r2, r4
 8003860:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003862:	2103      	movs	r1, #3
 8003864:	005c      	lsls	r4, r3, #1
 8003866:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003868:	2407      	movs	r4, #7
 800386a:	260f      	movs	r6, #15
 800386c:	401c      	ands	r4, r3
 800386e:	00a4      	lsls	r4, r4, #2
 8003870:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003872:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003874:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003876:	430a      	orrs	r2, r1
 8003878:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	1882      	adds	r2, r0, r2
 8003880:	6a15      	ldr	r5, [r2, #32]
 8003882:	43b5      	bics	r5, r6
 8003884:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003886:	68c2      	ldr	r2, [r0, #12]
 8003888:	438a      	bics	r2, r1
 800388a:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800388c:	6842      	ldr	r2, [r0, #4]
 800388e:	43a2      	bics	r2, r4
 8003890:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003892:	6882      	ldr	r2, [r0, #8]
 8003894:	438a      	bics	r2, r1
 8003896:	6082      	str	r2, [r0, #8]
    position++;
 8003898:	3301      	adds	r3, #1
 800389a:	e797      	b.n	80037cc <HAL_GPIO_DeInit+0x14>
 800389c:	afffe400 	.word	0xafffe400
 80038a0:	40010000 	.word	0x40010000
 80038a4:	50000400 	.word	0x50000400
 80038a8:	50000800 	.word	0x50000800
 80038ac:	50000c00 	.word	0x50000c00
 80038b0:	50001000 	.word	0x50001000
 80038b4:	40010400 	.word	0x40010400

080038b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b8:	6900      	ldr	r0, [r0, #16]
 80038ba:	4008      	ands	r0, r1
 80038bc:	1e43      	subs	r3, r0, #1
 80038be:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80038c0:	b2c0      	uxtb	r0, r0
}
 80038c2:	4770      	bx	lr

080038c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c4:	2a00      	cmp	r2, #0
 80038c6:	d001      	beq.n	80038cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80038ca:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80038cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80038ce:	e7fc      	b.n	80038ca <HAL_GPIO_WritePin+0x6>

080038d0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038d0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d2:	0013      	movs	r3, r2
 80038d4:	400b      	ands	r3, r1
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	4391      	bics	r1, r2
 80038da:	430b      	orrs	r3, r1
 80038dc:	6183      	str	r3, [r0, #24]
}
 80038de:	4770      	bx	lr

080038e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80038e2:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	4210      	tst	r0, r2
 80038e8:	d002      	beq.n	80038f0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ec:	f003 fc98 	bl	8007220 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	40010400 	.word	0x40010400

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80038fe:	2c00      	cmp	r4, #0
 8003900:	d03f      	beq.n	8003982 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003902:	0025      	movs	r5, r4
 8003904:	3541      	adds	r5, #65	; 0x41
 8003906:	782b      	ldrb	r3, [r5, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390e:	0023      	movs	r3, r4
 8003910:	3340      	adds	r3, #64	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003912:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003914:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003916:	f005 fdc9 	bl	80094ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800391a:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800391e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003920:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003922:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003924:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003926:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003928:	438a      	bics	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800392c:	491a      	ldr	r1, [pc, #104]	; (8003998 <HAL_I2C_Init+0xa0>)
 800392e:	6862      	ldr	r2, [r4, #4]
 8003930:	400a      	ands	r2, r1
 8003932:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	4919      	ldr	r1, [pc, #100]	; (800399c <HAL_I2C_Init+0xa4>)
 8003938:	400a      	ands	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800393c:	2801      	cmp	r0, #1
 800393e:	d121      	bne.n	8003984 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	0212      	lsls	r2, r2, #8
 8003944:	4332      	orrs	r2, r6
 8003946:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003948:	6858      	ldr	r0, [r3, #4]
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <HAL_I2C_Init+0xa8>)
 800394c:	4302      	orrs	r2, r0
 800394e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003950:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003952:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003954:	400a      	ands	r2, r1
 8003956:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003958:	6961      	ldr	r1, [r4, #20]
 800395a:	6922      	ldr	r2, [r4, #16]
 800395c:	430a      	orrs	r2, r1
 800395e:	69a1      	ldr	r1, [r4, #24]
 8003960:	0209      	lsls	r1, r1, #8
 8003962:	430a      	orrs	r2, r1
 8003964:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003966:	6a21      	ldr	r1, [r4, #32]
 8003968:	69e2      	ldr	r2, [r4, #28]
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800396e:	2201      	movs	r2, #1
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003976:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800397a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800397c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	3442      	adds	r4, #66	; 0x42
 8003980:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003982:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003984:	2284      	movs	r2, #132	; 0x84
 8003986:	0212      	lsls	r2, r2, #8
 8003988:	4332      	orrs	r2, r6
 800398a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800398c:	2802      	cmp	r0, #2
 800398e:	d1db      	bne.n	8003948 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e7d7      	b.n	8003948 <HAL_I2C_Init+0x50>
 8003998:	f0ffffff 	.word	0xf0ffffff
 800399c:	ffff7fff 	.word	0xffff7fff
 80039a0:	02008000 	.word	0x02008000

080039a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80039aa:	2c00      	cmp	r4, #0
 80039ac:	d013      	beq.n	80039d6 <HAL_I2C_DeInit+0x32>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ae:	0025      	movs	r5, r4
 80039b0:	2324      	movs	r3, #36	; 0x24
 80039b2:	3541      	adds	r5, #65	; 0x41
 80039b4:	702b      	strb	r3, [r5, #0]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	4383      	bics	r3, r0
 80039bc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039be:	0020      	movs	r0, r4
 80039c0:	f005 fda4 	bl	800950c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 80039cc:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	6320      	str	r0, [r4, #48]	; 0x30

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80039d0:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 80039d4:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80039d6:	bd70      	pop	{r4, r5, r6, pc}

080039d8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_PWR_EnableBkUpAccess+0x10>)
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	6811      	ldr	r1, [r2, #0]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	4770      	bx	lr
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80039ec:	2110      	movs	r1, #16
 80039ee:	4a02      	ldr	r2, [pc, #8]	; (80039f8 <HAL_PWR_DisablePVD+0xc>)
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	438b      	bics	r3, r1
 80039f4:	6013      	str	r3, [r2, #0]
}
 80039f6:	4770      	bx	lr
 80039f8:	40007000 	.word	0x40007000

080039fc <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <HAL_PWR_EnterSLEEPMode+0x60>)
{
 80039fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a00:	681e      	ldr	r6, [r3, #0]
{
 8003a02:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a04:	2080      	movs	r0, #128	; 0x80
 8003a06:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a08:	2701      	movs	r7, #1
 8003a0a:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a0c:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a0e:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a10:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a12:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003a14:	4206      	tst	r6, r0
 8003a16:	d005      	beq.n	8003a24 <HAL_PWR_EnterSLEEPMode+0x28>
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	4e11      	ldr	r6, [pc, #68]	; (8003a64 <HAL_PWR_EnterSLEEPMode+0x68>)
 8003a20:	4030      	ands	r0, r6
 8003a22:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a24:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003a26:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a28:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003a2a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003a2c:	4d0e      	ldr	r5, [pc, #56]	; (8003a68 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003a2e:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003a30:	6928      	ldr	r0, [r5, #16]
 8003a32:	3601      	adds	r6, #1
 8003a34:	43b0      	bics	r0, r6
 8003a36:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003a38:	2901      	cmp	r1, #1
 8003a3a:	d10b      	bne.n	8003a54 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003a3c:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003a3e:	2c00      	cmp	r4, #0
 8003a40:	d006      	beq.n	8003a50 <HAL_PWR_EnterSLEEPMode+0x54>
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003a50:	46c0      	nop			; (mov r8, r8)

}
 8003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003a54:	bf40      	sev
    __WFE();
 8003a56:	bf20      	wfe
    __WFE();
 8003a58:	bf20      	wfe
 8003a5a:	e7f0      	b.n	8003a3e <HAL_PWR_EnterSLEEPMode+0x42>
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	40010000 	.word	0x40010000
 8003a64:	fffffdff 	.word	0xfffffdff
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_PWR_EnterSTOPMode+0x68>)
{
 8003a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a70:	681e      	ldr	r6, [r3, #0]
{
 8003a72:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a74:	2080      	movs	r0, #128	; 0x80
 8003a76:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a78:	2701      	movs	r7, #1
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a7c:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a7e:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a80:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a82:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003a84:	4206      	tst	r6, r0
 8003a86:	d005      	beq.n	8003a94 <HAL_PWR_EnterSTOPMode+0x28>
 8003a88:	2a00      	cmp	r2, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	4e13      	ldr	r6, [pc, #76]	; (8003adc <HAL_PWR_EnterSTOPMode+0x70>)
 8003a90:	4030      	ands	r0, r6
 8003a92:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a94:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003a96:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a98:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003a9a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003a9c:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 8003a9e:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003aa0:	480f      	ldr	r0, [pc, #60]	; (8003ae0 <HAL_PWR_EnterSTOPMode+0x74>)
 8003aa2:	6906      	ldr	r6, [r0, #16]
 8003aa4:	4335      	orrs	r5, r6
 8003aa6:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003aa8:	2901      	cmp	r1, #1
 8003aaa:	d10e      	bne.n	8003aca <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003aac:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003aae:	2504      	movs	r5, #4
 8003ab0:	6901      	ldr	r1, [r0, #16]
 8003ab2:	43a9      	bics	r1, r5
 8003ab4:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d006      	beq.n	8003ac8 <HAL_PWR_EnterSTOPMode+0x5c>
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d004      	beq.n	8003ac8 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
  }
}
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003aca:	bf40      	sev
    __WFE();
 8003acc:	bf20      	wfe
    __WFE();
 8003ace:	bf20      	wfe
 8003ad0:	e7ed      	b.n	8003aae <HAL_PWR_EnterSTOPMode+0x42>
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	fffffdff 	.word	0xfffffdff
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	6811      	ldr	r1, [r2, #0]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	4770      	bx	lr
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_PWREx_DisableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_DisableFastWakeUp(void)
{
  /* Disable the fast wake up */
  CLEAR_BIT(PWR->CR, PWR_CR_FWU);
 8003af8:	4a02      	ldr	r2, [pc, #8]	; (8003b04 <HAL_PWREx_DisableFastWakeUp+0xc>)
 8003afa:	4903      	ldr	r1, [pc, #12]	; (8003b08 <HAL_PWREx_DisableFastWakeUp+0x10>)
 8003afc:	6813      	ldr	r3, [r2, #0]
 8003afe:	400b      	ands	r3, r1
 8003b00:	6013      	str	r3, [r2, #0]
}
 8003b02:	4770      	bx	lr
 8003b04:	40007000 	.word	0x40007000
 8003b08:	fffffbff 	.word	0xfffffbff

08003b0c <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	6811      	ldr	r1, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	4770      	bx	lr
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	40007000 	.word	0x40007000

08003b20 <HAL_PWREx_DisableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_DisableUltraLowPower(void)
{
  /* Disable the Ultra Low Power mode */
  CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003b20:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <HAL_PWREx_DisableUltraLowPower+0xc>)
 8003b22:	4903      	ldr	r1, [pc, #12]	; (8003b30 <HAL_PWREx_DisableUltraLowPower+0x10>)
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	400b      	ands	r3, r1
 8003b28:	6013      	str	r3, [r2, #0]
}
 8003b2a:	4770      	bx	lr
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	fffffdff 	.word	0xfffffdff

08003b34 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b34:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003b3a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b3c:	4022      	ands	r2, r4
 8003b3e:	2a08      	cmp	r2, #8
 8003b40:	d031      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x72>
 8003b42:	2a0c      	cmp	r2, #12
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_GetSysClockFreq+0x26>
 8003b46:	2a04      	cmp	r2, #4
 8003b48:	d125      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b4a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b4e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003b50:	17c0      	asrs	r0, r0, #31
 8003b52:	4018      	ands	r0, r3
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x80>)
 8003b56:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b5a:	02a2      	lsls	r2, r4, #10
 8003b5c:	4816      	ldr	r0, [pc, #88]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x84>)
 8003b5e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b60:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b62:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b64:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b66:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b68:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b6c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6e:	4211      	tst	r1, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x88>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	f7fc fc82 	bl	8000480 <__aeabi_lmul>
 8003b7c:	0022      	movs	r2, r4
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f7fc fc5e 	bl	8000440 <__aeabi_uldivmod>
 8003b84:	e7e8      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2310      	movs	r3, #16
 8003b8a:	421a      	tst	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003b90:	e7f0      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x80>)
 8003b94:	e7ee      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b96:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b98:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b9a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4098      	lsls	r0, r3
      break;
 8003ba4:	e7d8      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x88>)
 8003ba8:	e7d6      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x24>
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	ff48e500 	.word	0xff48e500
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	0800b3b0 	.word	0x0800b3b0
 8003bbc:	007a1200 	.word	0x007a1200
 8003bc0:	003d0900 	.word	0x003d0900

08003bc4 <HAL_RCC_OscConfig>:
{
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	0005      	movs	r5, r0
 8003bc8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d059      	beq.n	8003c82 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bce:	230c      	movs	r3, #12
 8003bd0:	4cb8      	ldr	r4, [pc, #736]	; (8003eb4 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	025b      	lsls	r3, r3, #9
 8003bde:	0019      	movs	r1, r3
 8003be0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	07d2      	lsls	r2, r2, #31
 8003be4:	d441      	bmi.n	8003c6a <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	682b      	ldr	r3, [r5, #0]
 8003be8:	079b      	lsls	r3, r3, #30
 8003bea:	d500      	bpl.n	8003bee <HAL_RCC_OscConfig+0x2a>
 8003bec:	e08a      	b.n	8003d04 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	06db      	lsls	r3, r3, #27
 8003bf2:	d528      	bpl.n	8003c46 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf4:	2e00      	cmp	r6, #0
 8003bf6:	d000      	beq.n	8003bfa <HAL_RCC_OscConfig+0x36>
 8003bf8:	e0e3      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	059b      	lsls	r3, r3, #22
 8003bfe:	d502      	bpl.n	8003c06 <HAL_RCC_OscConfig+0x42>
 8003c00:	69eb      	ldr	r3, [r5, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d03d      	beq.n	8003c82 <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c06:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c08:	6862      	ldr	r2, [r4, #4]
 8003c0a:	49ab      	ldr	r1, [pc, #684]	; (8003eb8 <HAL_RCC_OscConfig+0x2f4>)
 8003c0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c0e:	400a      	ands	r2, r1
 8003c10:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	3301      	adds	r3, #1
 8003c16:	023f      	lsls	r7, r7, #8
 8003c18:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c1c:	6861      	ldr	r1, [r4, #4]
 8003c1e:	6a2a      	ldr	r2, [r5, #32]
 8003c20:	0209      	lsls	r1, r1, #8
 8003c22:	0a09      	lsrs	r1, r1, #8
 8003c24:	0612      	lsls	r2, r2, #24
 8003c26:	430a      	orrs	r2, r1
 8003c28:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c2a:	68e1      	ldr	r1, [r4, #12]
 8003c2c:	48a3      	ldr	r0, [pc, #652]	; (8003ebc <HAL_RCC_OscConfig+0x2f8>)
 8003c2e:	060b      	lsls	r3, r1, #24
 8003c30:	0f1b      	lsrs	r3, r3, #28
 8003c32:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c34:	4aa2      	ldr	r2, [pc, #648]	; (8003ec0 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c36:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8003c38:	4ba2      	ldr	r3, [pc, #648]	; (8003ec4 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c3a:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	f7fe ff21 	bl	8002a84 <HAL_InitTick>
        if(status != HAL_OK)
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d134      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	d500      	bpl.n	8003c4e <HAL_RCC_OscConfig+0x8a>
 8003c4c:	e0f0      	b.n	8003e30 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	075b      	lsls	r3, r3, #29
 8003c52:	d500      	bpl.n	8003c56 <HAL_RCC_OscConfig+0x92>
 8003c54:	e112      	b.n	8003e7c <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	069b      	lsls	r3, r3, #26
 8003c5a:	d500      	bpl.n	8003c5e <HAL_RCC_OscConfig+0x9a>
 8003c5c:	e197      	b.n	8003f8e <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d000      	beq.n	8003c66 <HAL_RCC_OscConfig+0xa2>
 8003c64:	e1c6      	b.n	8003ff4 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8003c66:	2000      	movs	r0, #0
 8003c68:	e022      	b.n	8003cb0 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c6a:	2e08      	cmp	r6, #8
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c6e:	2e0c      	cmp	r6, #12
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_OscConfig+0xc2>
 8003c72:	2f00      	cmp	r7, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	039b      	lsls	r3, r3, #14
 8003c7a:	d5b4      	bpl.n	8003be6 <HAL_RCC_OscConfig+0x22>
 8003c7c:	686b      	ldr	r3, [r5, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1b1      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
 8003c84:	e014      	b.n	8003cb0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c86:	686a      	ldr	r2, [r5, #4]
 8003c88:	428a      	cmp	r2, r1
 8003c8a:	d113      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xf0>
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c92:	f7fe ff39 	bl	8002b08 <HAL_GetTick>
 8003c96:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	0292      	lsls	r2, r2, #10
 8003c9e:	4213      	tst	r3, r2
 8003ca0:	d1a1      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca2:	f7fe ff31 	bl	8002b08 <HAL_GetTick>
 8003ca6:	9b00      	ldr	r3, [sp, #0]
 8003ca8:	1ac0      	subs	r0, r0, r3
 8003caa:	2864      	cmp	r0, #100	; 0x64
 8003cac:	d9f4      	bls.n	8003c98 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8003cae:	2003      	movs	r0, #3
}
 8003cb0:	b005      	add	sp, #20
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb4:	21a0      	movs	r1, #160	; 0xa0
 8003cb6:	02c9      	lsls	r1, r1, #11
 8003cb8:	428a      	cmp	r2, r1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x104>
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	6821      	ldr	r1, [r4, #0]
 8003cc0:	02d2      	lsls	r2, r2, #11
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	6022      	str	r2, [r4, #0]
 8003cc6:	e7e1      	b.n	8003c8c <HAL_RCC_OscConfig+0xc8>
 8003cc8:	6821      	ldr	r1, [r4, #0]
 8003cca:	487f      	ldr	r0, [pc, #508]	; (8003ec8 <HAL_RCC_OscConfig+0x304>)
 8003ccc:	4001      	ands	r1, r0
 8003cce:	6021      	str	r1, [r4, #0]
 8003cd0:	6821      	ldr	r1, [r4, #0]
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	9303      	str	r3, [sp, #12]
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	497c      	ldr	r1, [pc, #496]	; (8003ecc <HAL_RCC_OscConfig+0x308>)
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	400b      	ands	r3, r1
 8003cde:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	d1d6      	bne.n	8003c92 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8003ce4:	f7fe ff10 	bl	8002b08 <HAL_GetTick>
 8003ce8:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	0292      	lsls	r2, r2, #10
 8003cf0:	4213      	tst	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x132>
 8003cf4:	e777      	b.n	8003be6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf6:	f7fe ff07 	bl	8002b08 <HAL_GetTick>
 8003cfa:	9b00      	ldr	r3, [sp, #0]
 8003cfc:	1ac0      	subs	r0, r0, r3
 8003cfe:	2864      	cmp	r0, #100	; 0x64
 8003d00:	d9f3      	bls.n	8003cea <HAL_RCC_OscConfig+0x126>
 8003d02:	e7d4      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d04:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003d06:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d08:	4213      	tst	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d0c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003d0e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d10:	4311      	orrs	r1, r2
 8003d12:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d14:	2e04      	cmp	r6, #4
 8003d16:	d003      	beq.n	8003d20 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d18:	2e0c      	cmp	r6, #12
 8003d1a:	d124      	bne.n	8003d66 <HAL_RCC_OscConfig+0x1a2>
 8003d1c:	2f00      	cmp	r7, #0
 8003d1e:	d122      	bne.n	8003d66 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	0752      	lsls	r2, r2, #29
 8003d24:	d501      	bpl.n	8003d2a <HAL_RCC_OscConfig+0x166>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ab      	beq.n	8003c82 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	692a      	ldr	r2, [r5, #16]
 8003d2e:	4868      	ldr	r0, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x30c>)
 8003d30:	0212      	lsls	r2, r2, #8
 8003d32:	4001      	ands	r1, r0
 8003d34:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d36:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d42:	f7ff fef7 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	4a5c      	ldr	r2, [pc, #368]	; (8003ebc <HAL_RCC_OscConfig+0x2f8>)
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	0f1b      	lsrs	r3, r3, #28
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	495b      	ldr	r1, [pc, #364]	; (8003ec0 <HAL_RCC_OscConfig+0x2fc>)
 8003d52:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8003d54:	4b5b      	ldr	r3, [pc, #364]	; (8003ec4 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d56:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f7fe fe93 	bl	8002a84 <HAL_InitTick>
      if(status != HAL_OK)
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d100      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1a0>
 8003d62:	e744      	b.n	8003bee <HAL_RCC_OscConfig+0x2a>
 8003d64:	e7a4      	b.n	8003cb0 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d019      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d6a:	2109      	movs	r1, #9
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	438a      	bics	r2, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d74:	f7fe fec8 	bl	8002b08 <HAL_GetTick>
 8003d78:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	4213      	tst	r3, r2
 8003d80:	d007      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	692b      	ldr	r3, [r5, #16]
 8003d86:	4952      	ldr	r1, [pc, #328]	; (8003ed0 <HAL_RCC_OscConfig+0x30c>)
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	e72d      	b.n	8003bee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fe feb9 	bl	8002b08 <HAL_GetTick>
 8003d96:	1bc0      	subs	r0, r0, r7
 8003d98:	2802      	cmp	r0, #2
 8003d9a:	d9ee      	bls.n	8003d7a <HAL_RCC_OscConfig+0x1b6>
 8003d9c:	e787      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8003d9e:	2201      	movs	r2, #1
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	4393      	bics	r3, r2
 8003da4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003da6:	f7fe feaf 	bl	8002b08 <HAL_GetTick>
 8003daa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dac:	2204      	movs	r2, #4
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	4213      	tst	r3, r2
 8003db2:	d100      	bne.n	8003db6 <HAL_RCC_OscConfig+0x1f2>
 8003db4:	e71b      	b.n	8003bee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fe fea7 	bl	8002b08 <HAL_GetTick>
 8003dba:	1bc0      	subs	r0, r0, r7
 8003dbc:	2802      	cmp	r0, #2
 8003dbe:	d9f5      	bls.n	8003dac <HAL_RCC_OscConfig+0x1e8>
 8003dc0:	e775      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dc2:	69eb      	ldr	r3, [r5, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fe99 	bl	8002b08 <HAL_GetTick>
 8003dd6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	4213      	tst	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de2:	6863      	ldr	r3, [r4, #4]
 8003de4:	4a34      	ldr	r2, [pc, #208]	; (8003eb8 <HAL_RCC_OscConfig+0x2f4>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003dea:	4313      	orrs	r3, r2
 8003dec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	6a2b      	ldr	r3, [r5, #32]
 8003df2:	0212      	lsls	r2, r2, #8
 8003df4:	061b      	lsls	r3, r3, #24
 8003df6:	0a12      	lsrs	r2, r2, #8
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	6063      	str	r3, [r4, #4]
 8003dfc:	e723      	b.n	8003c46 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dfe:	f7fe fe83 	bl	8002b08 <HAL_GetTick>
 8003e02:	1bc0      	subs	r0, r0, r7
 8003e04:	2802      	cmp	r0, #2
 8003e06:	d9e7      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x214>
 8003e08:	e751      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <HAL_RCC_OscConfig+0x310>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e12:	f7fe fe79 	bl	8002b08 <HAL_GetTick>
 8003e16:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	4213      	tst	r3, r2
 8003e20:	d100      	bne.n	8003e24 <HAL_RCC_OscConfig+0x260>
 8003e22:	e710      	b.n	8003c46 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e24:	f7fe fe70 	bl	8002b08 <HAL_GetTick>
 8003e28:	1bc0      	subs	r0, r0, r7
 8003e2a:	2802      	cmp	r0, #2
 8003e2c:	d9f4      	bls.n	8003e18 <HAL_RCC_OscConfig+0x254>
 8003e2e:	e73e      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e30:	696a      	ldr	r2, [r5, #20]
 8003e32:	2301      	movs	r3, #1
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d010      	beq.n	8003e5a <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8003e38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fe63 	bl	8002b08 <HAL_GetTick>
 8003e42:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e44:	2202      	movs	r2, #2
 8003e46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e48:	4213      	tst	r3, r2
 8003e4a:	d000      	beq.n	8003e4e <HAL_RCC_OscConfig+0x28a>
 8003e4c:	e6ff      	b.n	8003c4e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4e:	f7fe fe5b 	bl	8002b08 <HAL_GetTick>
 8003e52:	1bc0      	subs	r0, r0, r7
 8003e54:	2802      	cmp	r0, #2
 8003e56:	d9f5      	bls.n	8003e44 <HAL_RCC_OscConfig+0x280>
 8003e58:	e729      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 8003e5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e5c:	439a      	bics	r2, r3
 8003e5e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e60:	f7fe fe52 	bl	8002b08 <HAL_GetTick>
 8003e64:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e66:	2202      	movs	r2, #2
 8003e68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e6a:	4213      	tst	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <HAL_RCC_OscConfig+0x2ac>
 8003e6e:	e6ee      	b.n	8003c4e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fe fe4a 	bl	8002b08 <HAL_GetTick>
 8003e74:	1bc0      	subs	r0, r0, r7
 8003e76:	2802      	cmp	r0, #2
 8003e78:	d9f5      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2a2>
 8003e7a:	e718      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e82:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003e84:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	421a      	tst	r2, r3
 8003e88:	d104      	bne.n	8003e94 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003e90:	2301      	movs	r3, #1
 8003e92:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	4f10      	ldr	r7, [pc, #64]	; (8003ed8 <HAL_RCC_OscConfig+0x314>)
 8003e98:	0052      	lsls	r2, r2, #1
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4213      	tst	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	68ab      	ldr	r3, [r5, #8]
 8003ea4:	0052      	lsls	r2, r2, #1
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d12c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x340>
 8003eaa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003eac:	4313      	orrs	r3, r2
 8003eae:	6523      	str	r3, [r4, #80]	; 0x50
 8003eb0:	e04d      	b.n	8003f4e <HAL_RCC_OscConfig+0x38a>
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	ffff1fff 	.word	0xffff1fff
 8003ebc:	0800b3b9 	.word	0x0800b3b9
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000008 	.word	0x20000008
 8003ec8:	fffeffff 	.word	0xfffeffff
 8003ecc:	fffbffff 	.word	0xfffbffff
 8003ed0:	ffffe0ff 	.word	0xffffe0ff
 8003ed4:	fffffeff 	.word	0xfffffeff
 8003ed8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	0052      	lsls	r2, r2, #1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003ee6:	f7fe fe0f 	bl	8002b08 <HAL_GetTick>
 8003eea:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	4213      	tst	r3, r2
 8003ef4:	d1d4      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fe fe07 	bl	8002b08 <HAL_GetTick>
 8003efa:	9b01      	ldr	r3, [sp, #4]
 8003efc:	1ac0      	subs	r0, r0, r3
 8003efe:	2864      	cmp	r0, #100	; 0x64
 8003f00:	d9f4      	bls.n	8003eec <HAL_RCC_OscConfig+0x328>
 8003f02:	e6d4      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <HAL_RCC_OscConfig+0x372>
 8003f08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f0a:	4a6b      	ldr	r2, [pc, #428]	; (80040b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	6523      	str	r3, [r4, #80]	; 0x50
 8003f10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f12:	4a6a      	ldr	r2, [pc, #424]	; (80040bc <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f18:	f7fe fdf6 	bl	8002b08 <HAL_GetTick>
 8003f1c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f22:	0092      	lsls	r2, r2, #2
 8003f24:	4213      	tst	r3, r2
 8003f26:	d01a      	beq.n	8003f5e <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fdee 	bl	8002b08 <HAL_GetTick>
 8003f2c:	4b64      	ldr	r3, [pc, #400]	; (80040c0 <HAL_RCC_OscConfig+0x4fc>)
 8003f2e:	1bc0      	subs	r0, r0, r7
 8003f30:	4298      	cmp	r0, r3
 8003f32:	d9f4      	bls.n	8003f1e <HAL_RCC_OscConfig+0x35a>
 8003f34:	e6bb      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f36:	21a0      	movs	r1, #160	; 0xa0
 8003f38:	00c9      	lsls	r1, r1, #3
 8003f3a:	428b      	cmp	r3, r1
 8003f3c:	d118      	bne.n	8003f70 <HAL_RCC_OscConfig+0x3ac>
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6523      	str	r3, [r4, #80]	; 0x50
 8003f48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f4e:	f7fe fddb 	bl	8002b08 <HAL_GetTick>
 8003f52:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f58:	0092      	lsls	r2, r2, #2
 8003f5a:	4213      	tst	r3, r2
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8003f5e:	9b00      	ldr	r3, [sp, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d000      	beq.n	8003f66 <HAL_RCC_OscConfig+0x3a2>
 8003f64:	e677      	b.n	8003c56 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f68:	4a56      	ldr	r2, [pc, #344]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f6e:	e672      	b.n	8003c56 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f72:	4a51      	ldr	r2, [pc, #324]	; (80040b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	6523      	str	r3, [r4, #80]	; 0x50
 8003f78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f7a:	4a50      	ldr	r2, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x4f8>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	e796      	b.n	8003eae <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fdc2 	bl	8002b08 <HAL_GetTick>
 8003f84:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <HAL_RCC_OscConfig+0x4fc>)
 8003f86:	1bc0      	subs	r0, r0, r7
 8003f88:	4298      	cmp	r0, r3
 8003f8a:	d9e3      	bls.n	8003f54 <HAL_RCC_OscConfig+0x390>
 8003f8c:	e68f      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f8e:	69aa      	ldr	r2, [r5, #24]
 8003f90:	2101      	movs	r1, #1
 8003f92:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <HAL_RCC_OscConfig+0x504>)
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d018      	beq.n	8003fca <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8003f98:	68a2      	ldr	r2, [r4, #8]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	60a2      	str	r2, [r4, #8]
 8003f9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	6362      	str	r2, [r4, #52]	; 0x34
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	6a19      	ldr	r1, [r3, #32]
 8003fa8:	0192      	lsls	r2, r2, #6
 8003faa:	430a      	orrs	r2, r1
 8003fac:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003fae:	f7fe fdab 	bl	8002b08 <HAL_GetTick>
 8003fb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	68a3      	ldr	r3, [r4, #8]
 8003fb8:	4213      	tst	r3, r2
 8003fba:	d000      	beq.n	8003fbe <HAL_RCC_OscConfig+0x3fa>
 8003fbc:	e64f      	b.n	8003c5e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fbe:	f7fe fda3 	bl	8002b08 <HAL_GetTick>
 8003fc2:	1bc0      	subs	r0, r0, r7
 8003fc4:	2802      	cmp	r0, #2
 8003fc6:	d9f5      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x3f0>
 8003fc8:	e671      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8003fca:	68a2      	ldr	r2, [r4, #8]
 8003fcc:	438a      	bics	r2, r1
 8003fce:	60a2      	str	r2, [r4, #8]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	493e      	ldr	r1, [pc, #248]	; (80040cc <HAL_RCC_OscConfig+0x508>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fd96 	bl	8002b08 <HAL_GetTick>
 8003fdc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fde:	2202      	movs	r2, #2
 8003fe0:	68a3      	ldr	r3, [r4, #8]
 8003fe2:	4213      	tst	r3, r2
 8003fe4:	d100      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x424>
 8003fe6:	e63a      	b.n	8003c5e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fe8:	f7fe fd8e 	bl	8002b08 <HAL_GetTick>
 8003fec:	1bc0      	subs	r0, r0, r7
 8003fee:	2802      	cmp	r0, #2
 8003ff0:	d9f5      	bls.n	8003fde <HAL_RCC_OscConfig+0x41a>
 8003ff2:	e65c      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff4:	2e0c      	cmp	r6, #12
 8003ff6:	d043      	beq.n	8004080 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff8:	4a35      	ldr	r2, [pc, #212]	; (80040d0 <HAL_RCC_OscConfig+0x50c>)
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d12e      	bne.n	800405c <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004000:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004002:	4013      	ands	r3, r2
 8004004:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004006:	f7fe fd7f 	bl	8002b08 <HAL_GetTick>
 800400a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800400c:	04bf      	lsls	r7, r7, #18
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	423b      	tst	r3, r7
 8004012:	d11d      	bne.n	8004050 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004014:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004018:	68e2      	ldr	r2, [r4, #12]
 800401a:	430b      	orrs	r3, r1
 800401c:	492d      	ldr	r1, [pc, #180]	; (80040d4 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800401e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004020:	400a      	ands	r2, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004026:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004028:	4313      	orrs	r3, r2
 800402a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	045b      	lsls	r3, r3, #17
 8004032:	4313      	orrs	r3, r2
 8004034:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004036:	f7fe fd67 	bl	8002b08 <HAL_GetTick>
 800403a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	4233      	tst	r3, r6
 8004040:	d000      	beq.n	8004044 <HAL_RCC_OscConfig+0x480>
 8004042:	e610      	b.n	8003c66 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fd60 	bl	8002b08 <HAL_GetTick>
 8004048:	1b40      	subs	r0, r0, r5
 800404a:	2802      	cmp	r0, #2
 800404c:	d9f6      	bls.n	800403c <HAL_RCC_OscConfig+0x478>
 800404e:	e62e      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe fd5a 	bl	8002b08 <HAL_GetTick>
 8004054:	1b80      	subs	r0, r0, r6
 8004056:	2802      	cmp	r0, #2
 8004058:	d9d9      	bls.n	800400e <HAL_RCC_OscConfig+0x44a>
 800405a:	e628      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 800405c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800405e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004060:	4013      	ands	r3, r2
 8004062:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004064:	f7fe fd50 	bl	8002b08 <HAL_GetTick>
 8004068:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800406a:	04b6      	lsls	r6, r6, #18
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	4233      	tst	r3, r6
 8004070:	d100      	bne.n	8004074 <HAL_RCC_OscConfig+0x4b0>
 8004072:	e5f8      	b.n	8003c66 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe fd48 	bl	8002b08 <HAL_GetTick>
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	2802      	cmp	r0, #2
 800407c:	d9f6      	bls.n	800406c <HAL_RCC_OscConfig+0x4a8>
 800407e:	e616      	b.n	8003cae <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8004080:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004082:	2b01      	cmp	r3, #1
 8004084:	d100      	bne.n	8004088 <HAL_RCC_OscConfig+0x4c4>
 8004086:	e613      	b.n	8003cb0 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004088:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800408a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800408e:	0252      	lsls	r2, r2, #9
 8004090:	401a      	ands	r2, r3
 8004092:	428a      	cmp	r2, r1
 8004094:	d000      	beq.n	8004098 <HAL_RCC_OscConfig+0x4d4>
 8004096:	e5f4      	b.n	8003c82 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004098:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800409c:	0392      	lsls	r2, r2, #14
 800409e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	428a      	cmp	r2, r1
 80040a2:	d000      	beq.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
 80040a4:	e5ed      	b.n	8003c82 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80040a6:	22c0      	movs	r2, #192	; 0xc0
 80040a8:	0412      	lsls	r2, r2, #16
 80040aa:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d100      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4f0>
 80040b2:	e5d8      	b.n	8003c66 <HAL_RCC_OscConfig+0xa2>
 80040b4:	e5e5      	b.n	8003c82 <HAL_RCC_OscConfig+0xbe>
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	fffffeff 	.word	0xfffffeff
 80040bc:	fffffbff 	.word	0xfffffbff
 80040c0:	00001388 	.word	0x00001388
 80040c4:	efffffff 	.word	0xefffffff
 80040c8:	40010000 	.word	0x40010000
 80040cc:	ffffdfff 	.word	0xffffdfff
 80040d0:	feffffff 	.word	0xfeffffff
 80040d4:	ff02ffff 	.word	0xff02ffff

080040d8 <HAL_RCC_ClockConfig>:
{
 80040d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040da:	1e04      	subs	r4, r0, #0
 80040dc:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80040e0:	2001      	movs	r0, #1
}
 80040e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	2501      	movs	r5, #1
 80040e6:	4e5b      	ldr	r6, [pc, #364]	; (8004254 <HAL_RCC_ClockConfig+0x17c>)
 80040e8:	9a01      	ldr	r2, [sp, #4]
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	402b      	ands	r3, r5
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d331      	bcc.n	8004156 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	0793      	lsls	r3, r2, #30
 80040f6:	d443      	bmi.n	8004180 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f8:	07d2      	lsls	r2, r2, #31
 80040fa:	d449      	bmi.n	8004190 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	2501      	movs	r5, #1
 80040fe:	6833      	ldr	r3, [r6, #0]
 8004100:	9a01      	ldr	r2, [sp, #4]
 8004102:	402b      	ands	r3, r5
 8004104:	4293      	cmp	r3, r2
 8004106:	d909      	bls.n	800411c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	43ab      	bics	r3, r5
 800410c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800410e:	f7fe fcfb 	bl	8002b08 <HAL_GetTick>
 8004112:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004114:	6833      	ldr	r3, [r6, #0]
 8004116:	422b      	tst	r3, r5
 8004118:	d000      	beq.n	800411c <HAL_RCC_ClockConfig+0x44>
 800411a:	e08c      	b.n	8004236 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	4d4e      	ldr	r5, [pc, #312]	; (8004258 <HAL_RCC_ClockConfig+0x180>)
 8004120:	0753      	lsls	r3, r2, #29
 8004122:	d500      	bpl.n	8004126 <HAL_RCC_ClockConfig+0x4e>
 8004124:	e08f      	b.n	8004246 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004126:	0712      	lsls	r2, r2, #28
 8004128:	d506      	bpl.n	8004138 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800412a:	68ea      	ldr	r2, [r5, #12]
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	494b      	ldr	r1, [pc, #300]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	400a      	ands	r2, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004138:	f7ff fcfc 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 800413c:	68eb      	ldr	r3, [r5, #12]
 800413e:	4a48      	ldr	r2, [pc, #288]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	0f1b      	lsrs	r3, r3, #28
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	4947      	ldr	r1, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x18c>)
 8004148:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800414c:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f7fe fc98 	bl	8002a84 <HAL_InitTick>
  if(status != HAL_OK)
 8004154:	e7c5      	b.n	80040e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	6833      	ldr	r3, [r6, #0]
 8004158:	9a01      	ldr	r2, [sp, #4]
 800415a:	43ab      	bics	r3, r5
 800415c:	4313      	orrs	r3, r2
 800415e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004160:	f7fe fcd2 	bl	8002b08 <HAL_GetTick>
 8004164:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	6833      	ldr	r3, [r6, #0]
 8004168:	9a01      	ldr	r2, [sp, #4]
 800416a:	402b      	ands	r3, r5
 800416c:	4293      	cmp	r3, r2
 800416e:	d0c0      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fe fcca 	bl	8002b08 <HAL_GetTick>
 8004174:	4b3d      	ldr	r3, [pc, #244]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 8004176:	1bc0      	subs	r0, r0, r7
 8004178:	4298      	cmp	r0, r3
 800417a:	d9f4      	bls.n	8004166 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800417c:	2003      	movs	r0, #3
 800417e:	e7b0      	b.n	80040e2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	20f0      	movs	r0, #240	; 0xf0
 8004182:	4935      	ldr	r1, [pc, #212]	; (8004258 <HAL_RCC_ClockConfig+0x180>)
 8004184:	68cb      	ldr	r3, [r1, #12]
 8004186:	4383      	bics	r3, r0
 8004188:	68a0      	ldr	r0, [r4, #8]
 800418a:	4303      	orrs	r3, r0
 800418c:	60cb      	str	r3, [r1, #12]
 800418e:	e7b3      	b.n	80040f8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004190:	4d31      	ldr	r5, [pc, #196]	; (8004258 <HAL_RCC_ClockConfig+0x180>)
 8004192:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004194:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	2a02      	cmp	r2, #2
 8004198:	d118      	bne.n	80041cc <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800419a:	039b      	lsls	r3, r3, #14
 800419c:	d5a0      	bpl.n	80040e0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	2103      	movs	r1, #3
 80041a0:	68eb      	ldr	r3, [r5, #12]
 80041a2:	438b      	bics	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80041a8:	f7fe fcae 	bl	8002b08 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ac:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80041ae:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d118      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b4:	220c      	movs	r2, #12
 80041b6:	68eb      	ldr	r3, [r5, #12]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d09e      	beq.n	80040fc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041be:	f7fe fca3 	bl	8002b08 <HAL_GetTick>
 80041c2:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 80041c4:	1bc0      	subs	r0, r0, r7
 80041c6:	4298      	cmp	r0, r3
 80041c8:	d9f4      	bls.n	80041b4 <HAL_RCC_ClockConfig+0xdc>
 80041ca:	e7d7      	b.n	800417c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041cc:	2a03      	cmp	r2, #3
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	d4e4      	bmi.n	800419e <HAL_RCC_ClockConfig+0xc6>
 80041d4:	e784      	b.n	80040e0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041d6:	2a01      	cmp	r2, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041da:	075b      	lsls	r3, r3, #29
 80041dc:	d4df      	bmi.n	800419e <HAL_RCC_ClockConfig+0xc6>
 80041de:	e77f      	b.n	80040e0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041e0:	059b      	lsls	r3, r3, #22
 80041e2:	d4dc      	bmi.n	800419e <HAL_RCC_ClockConfig+0xc6>
 80041e4:	e77c      	b.n	80040e0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d10b      	bne.n	8004202 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ea:	220c      	movs	r2, #12
 80041ec:	68eb      	ldr	r3, [r5, #12]
 80041ee:	4013      	ands	r3, r2
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d083      	beq.n	80040fc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7fe fc88 	bl	8002b08 <HAL_GetTick>
 80041f8:	4b1c      	ldr	r3, [pc, #112]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 80041fa:	1bc0      	subs	r0, r0, r7
 80041fc:	4298      	cmp	r0, r3
 80041fe:	d9f4      	bls.n	80041ea <HAL_RCC_ClockConfig+0x112>
 8004200:	e7bc      	b.n	800417c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004202:	2b01      	cmp	r3, #1
 8004204:	d011      	beq.n	800422a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004206:	220c      	movs	r2, #12
 8004208:	68eb      	ldr	r3, [r5, #12]
 800420a:	4213      	tst	r3, r2
 800420c:	d100      	bne.n	8004210 <HAL_RCC_ClockConfig+0x138>
 800420e:	e775      	b.n	80040fc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fe fc7a 	bl	8002b08 <HAL_GetTick>
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 8004216:	1bc0      	subs	r0, r0, r7
 8004218:	4298      	cmp	r0, r3
 800421a:	d9f4      	bls.n	8004206 <HAL_RCC_ClockConfig+0x12e>
 800421c:	e7ae      	b.n	800417c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421e:	f7fe fc73 	bl	8002b08 <HAL_GetTick>
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 8004224:	1bc0      	subs	r0, r0, r7
 8004226:	4298      	cmp	r0, r3
 8004228:	d8a8      	bhi.n	800417c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800422a:	220c      	movs	r2, #12
 800422c:	68eb      	ldr	r3, [r5, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b04      	cmp	r3, #4
 8004232:	d1f4      	bne.n	800421e <HAL_RCC_ClockConfig+0x146>
 8004234:	e762      	b.n	80040fc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004236:	f7fe fc67 	bl	8002b08 <HAL_GetTick>
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 800423c:	1bc0      	subs	r0, r0, r7
 800423e:	4298      	cmp	r0, r3
 8004240:	d800      	bhi.n	8004244 <HAL_RCC_ClockConfig+0x16c>
 8004242:	e767      	b.n	8004114 <HAL_RCC_ClockConfig+0x3c>
 8004244:	e79a      	b.n	800417c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004246:	68eb      	ldr	r3, [r5, #12]
 8004248:	4909      	ldr	r1, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x198>)
 800424a:	400b      	ands	r3, r1
 800424c:	68e1      	ldr	r1, [r4, #12]
 800424e:	430b      	orrs	r3, r1
 8004250:	60eb      	str	r3, [r5, #12]
 8004252:	e768      	b.n	8004126 <HAL_RCC_ClockConfig+0x4e>
 8004254:	40022000 	.word	0x40022000
 8004258:	40021000 	.word	0x40021000
 800425c:	ffffc7ff 	.word	0xffffc7ff
 8004260:	0800b3b9 	.word	0x0800b3b9
 8004264:	20000000 	.word	0x20000000
 8004268:	20000008 	.word	0x20000008
 800426c:	00001388 	.word	0x00001388
 8004270:	fffff8ff 	.word	0xfffff8ff

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4905      	ldr	r1, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800427c:	055b      	lsls	r3, r3, #21
 800427e:	0f5b      	lsrs	r3, r3, #29
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	6810      	ldr	r0, [r2, #0]
 8004284:	40d8      	lsrs	r0, r3
}
 8004286:	4770      	bx	lr
 8004288:	40021000 	.word	0x40021000
 800428c:	20000000 	.word	0x20000000
 8004290:	0800b3c9 	.word	0x0800b3c9

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4905      	ldr	r1, [pc, #20]	; (80042b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800429c:	049b      	lsls	r3, r3, #18
 800429e:	0f5b      	lsrs	r3, r3, #29
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	6810      	ldr	r0, [r2, #0]
 80042a4:	40d8      	lsrs	r0, r3
}
 80042a6:	4770      	bx	lr
 80042a8:	40021000 	.word	0x40021000
 80042ac:	20000000 	.word	0x20000000
 80042b0:	0800b3c9 	.word	0x0800b3c9

080042b4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b4:	6803      	ldr	r3, [r0, #0]
{
 80042b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	d53d      	bpl.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80042c0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c2:	4c5f      	ldr	r4, [pc, #380]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80042c4:	055b      	lsls	r3, r3, #21
 80042c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80042c8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ca:	421a      	tst	r2, r3
 80042cc:	d104      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042d0:	4313      	orrs	r3, r2
 80042d2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	2780      	movs	r7, #128	; 0x80
 80042da:	4e5a      	ldr	r6, [pc, #360]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80042dc:	007f      	lsls	r7, r7, #1
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	423b      	tst	r3, r7
 80042e2:	d06c      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042e4:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80042e6:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042e8:	0001      	movs	r1, r0
 80042ea:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042ec:	4042      	eors	r2, r0
 80042ee:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042f0:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042f2:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042f4:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042f6:	4202      	tst	r2, r0
 80042f8:	d000      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
 80042fa:	e071      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80042fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042fe:	0010      	movs	r0, r2
 8004300:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004302:	421a      	tst	r2, r3
 8004304:	d000      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004306:	e074      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004308:	6869      	ldr	r1, [r5, #4]
 800430a:	23c0      	movs	r3, #192	; 0xc0
 800430c:	000a      	movs	r2, r1
 800430e:	029b      	lsls	r3, r3, #10
 8004310:	401a      	ands	r2, r3
 8004312:	429a      	cmp	r2, r3
 8004314:	d107      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	484b      	ldr	r0, [pc, #300]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800431a:	4003      	ands	r3, r0
 800431c:	20c0      	movs	r0, #192	; 0xc0
 800431e:	0380      	lsls	r0, r0, #14
 8004320:	4001      	ands	r1, r0
 8004322:	430b      	orrs	r3, r1
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004328:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800432a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800432e:	2b01      	cmp	r3, #1
 8004330:	d103      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004334:	4a45      	ldr	r2, [pc, #276]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004336:	4013      	ands	r3, r2
 8004338:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	07da      	lsls	r2, r3, #31
 800433e:	d506      	bpl.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004340:	2003      	movs	r0, #3
 8004342:	493f      	ldr	r1, [pc, #252]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004344:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004346:	4382      	bics	r2, r0
 8004348:	68a8      	ldr	r0, [r5, #8]
 800434a:	4302      	orrs	r2, r0
 800434c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800434e:	079a      	lsls	r2, r3, #30
 8004350:	d506      	bpl.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004352:	200c      	movs	r0, #12
 8004354:	493a      	ldr	r1, [pc, #232]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004356:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004358:	4382      	bics	r2, r0
 800435a:	68e8      	ldr	r0, [r5, #12]
 800435c:	4302      	orrs	r2, r0
 800435e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004360:	075a      	lsls	r2, r3, #29
 8004362:	d506      	bpl.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004364:	4936      	ldr	r1, [pc, #216]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004366:	483a      	ldr	r0, [pc, #232]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004368:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800436a:	4002      	ands	r2, r0
 800436c:	6928      	ldr	r0, [r5, #16]
 800436e:	4302      	orrs	r2, r0
 8004370:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004372:	071a      	lsls	r2, r3, #28
 8004374:	d506      	bpl.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004376:	4932      	ldr	r1, [pc, #200]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004378:	4836      	ldr	r0, [pc, #216]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800437a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800437c:	4002      	ands	r2, r0
 800437e:	6968      	ldr	r0, [r5, #20]
 8004380:	4302      	orrs	r2, r0
 8004382:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004384:	05da      	lsls	r2, r3, #23
 8004386:	d506      	bpl.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004388:	492d      	ldr	r1, [pc, #180]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800438a:	4833      	ldr	r0, [pc, #204]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800438e:	4002      	ands	r2, r0
 8004390:	69a8      	ldr	r0, [r5, #24]
 8004392:	4302      	orrs	r2, r0
 8004394:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004396:	065a      	lsls	r2, r3, #25
 8004398:	d506      	bpl.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439a:	4929      	ldr	r1, [pc, #164]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800439c:	482f      	ldr	r0, [pc, #188]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800439e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80043a0:	4002      	ands	r2, r0
 80043a2:	6a28      	ldr	r0, [r5, #32]
 80043a4:	4302      	orrs	r2, r0
 80043a6:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80043a8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	d517      	bpl.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043ae:	4a24      	ldr	r2, [pc, #144]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80043b0:	492b      	ldr	r1, [pc, #172]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043b4:	400b      	ands	r3, r1
 80043b6:	69e9      	ldr	r1, [r5, #28]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043be:	6833      	ldr	r3, [r6, #0]
 80043c0:	433b      	orrs	r3, r7
 80043c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043c4:	f7fe fba0 	bl	8002b08 <HAL_GetTick>
 80043c8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	6833      	ldr	r3, [r6, #0]
 80043cc:	423b      	tst	r3, r7
 80043ce:	d189      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fe fb9a 	bl	8002b08 <HAL_GetTick>
 80043d4:	9b01      	ldr	r3, [sp, #4]
 80043d6:	1ac0      	subs	r0, r0, r3
 80043d8:	2864      	cmp	r0, #100	; 0x64
 80043da:	d9f6      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 80043dc:	2003      	movs	r0, #3
}
 80043de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80043e0:	4299      	cmp	r1, r3
 80043e2:	d000      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80043e4:	e78a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043e6:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80043e8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043ea:	0392      	lsls	r2, r2, #14
 80043ec:	d400      	bmi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043ee:	e785      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
 80043f0:	e7f5      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80043f2:	4288      	cmp	r0, r1
 80043f4:	d100      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80043f6:	e787      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	069b      	lsls	r3, r3, #26
 80043fc:	d400      	bmi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80043fe:	e783      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004400:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004402:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004404:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004406:	0309      	lsls	r1, r1, #12
 8004408:	4301      	orrs	r1, r0
 800440a:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004410:	4814      	ldr	r0, [pc, #80]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004412:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004414:	4001      	ands	r1, r0
 8004416:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004418:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800441a:	05db      	lsls	r3, r3, #23
 800441c:	d400      	bmi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800441e:	e773      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8004420:	f7fe fb72 	bl	8002b08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004424:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004426:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004428:	00bf      	lsls	r7, r7, #2
 800442a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800442c:	423b      	tst	r3, r7
 800442e:	d000      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004430:	e76a      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe fb69 	bl	8002b08 <HAL_GetTick>
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004438:	1b80      	subs	r0, r0, r6
 800443a:	4298      	cmp	r0, r3
 800443c:	d9f5      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x176>
 800443e:	e7cd      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
 8004448:	ffcfffff 	.word	0xffcfffff
 800444c:	efffffff 	.word	0xefffffff
 8004450:	fffff3ff 	.word	0xfffff3ff
 8004454:	ffffcfff 	.word	0xffffcfff
 8004458:	fffcffff 	.word	0xfffcffff
 800445c:	fbffffff 	.word	0xfbffffff
 8004460:	fff3ffff 	.word	0xfff3ffff
 8004464:	fff7ffff 	.word	0xfff7ffff
 8004468:	00001388 	.word	0x00001388

0800446c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800446c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800446e:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004470:	1c45      	adds	r5, r0, #1
 8004472:	7feb      	ldrb	r3, [r5, #31]
{
 8004474:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004476:	0038      	movs	r0, r7
 8004478:	2b01      	cmp	r3, #1
 800447a:	d027      	beq.n	80044cc <HAL_RTC_DeactivateAlarm+0x60>
 800447c:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004480:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8004482:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004484:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
 800448a:	3a77      	subs	r2, #119	; 0x77
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800448e:	32ad      	adds	r2, #173	; 0xad
 8004490:	4291      	cmp	r1, r2
 8004492:	d12a      	bne.n	80044ea <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4922      	ldr	r1, [pc, #136]	; (8004520 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004498:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800449a:	400a      	ands	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4920      	ldr	r1, [pc, #128]	; (8004524 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044a2:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80044a4:	400a      	ands	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80044a8:	f7fe fb2e 	bl	8002b08 <HAL_GetTick>
 80044ac:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80044ae:	2201      	movs	r2, #1
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	401a      	ands	r2, r3
 80044b6:	9201      	str	r2, [sp, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	4213      	tst	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044be:	22ff      	movs	r2, #255	; 0xff
 80044c0:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044c2:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80044c6:	2301      	movs	r3, #1
 80044c8:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80044ca:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80044cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044ce:	f7fe fb1b 	bl	8002b08 <HAL_GetTick>
 80044d2:	9b00      	ldr	r3, [sp, #0]
 80044d4:	1ac0      	subs	r0, r0, r3
 80044d6:	42b8      	cmp	r0, r7
 80044d8:	d9e9      	bls.n	80044ae <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044da:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044dc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e2:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 80044e8:	e7f0      	b.n	80044cc <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	490e      	ldr	r1, [pc, #56]	; (8004528 <HAL_RTC_DeactivateAlarm+0xbc>)
 80044ee:	400a      	ands	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	490d      	ldr	r1, [pc, #52]	; (800452c <HAL_RTC_DeactivateAlarm+0xc0>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80044fa:	f7fe fb05 	bl	8002b08 <HAL_GetTick>
 80044fe:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	001a      	movs	r2, r3
 8004506:	403a      	ands	r2, r7
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	423b      	tst	r3, r7
 800450c:	d1d7      	bne.n	80044be <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800450e:	f7fe fafb 	bl	8002b08 <HAL_GetTick>
 8004512:	9b00      	ldr	r3, [sp, #0]
 8004514:	1ac0      	subs	r0, r0, r3
 8004516:	23fa      	movs	r3, #250	; 0xfa
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4298      	cmp	r0, r3
 800451c:	d9f0      	bls.n	8004500 <HAL_RTC_DeactivateAlarm+0x94>
 800451e:	e7dc      	b.n	80044da <HAL_RTC_DeactivateAlarm+0x6e>
 8004520:	fffffeff 	.word	0xfffffeff
 8004524:	ffffefff 	.word	0xffffefff
 8004528:	fffffdff 	.word	0xfffffdff
 800452c:	ffffdfff 	.word	0xffffdfff

08004530 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004530:	6803      	ldr	r3, [r0, #0]
{
 8004532:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004534:	689a      	ldr	r2, [r3, #8]
{
 8004536:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004538:	04d2      	lsls	r2, r2, #19
 800453a:	d50a      	bpl.n	8004552 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	05db      	lsls	r3, r3, #23
 8004540:	d507      	bpl.n	8004552 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004542:	f005 fbd1 	bl	8009ce8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_RTC_AlarmIRQHandler+0x54>)
 800454a:	68ca      	ldr	r2, [r1, #12]
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	4313      	orrs	r3, r2
 8004550:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	0492      	lsls	r2, r2, #18
 8004558:	d50b      	bpl.n	8004572 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	059b      	lsls	r3, r3, #22
 800455e:	d508      	bpl.n	8004572 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004560:	0020      	movs	r0, r4
 8004562:	f000 faf9 	bl	8004b58 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RTC_AlarmIRQHandler+0x58>)
 800456a:	68ca      	ldr	r2, [r1, #12]
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	4313      	orrs	r3, r2
 8004570:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8004576:	0292      	lsls	r2, r2, #10
 8004578:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800457a:	2301      	movs	r3, #1
 800457c:	3402      	adds	r4, #2
 800457e:	77e3      	strb	r3, [r4, #31]
}
 8004580:	bd10      	pop	{r4, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	fffffe7f 	.word	0xfffffe7f
 8004588:	fffffd7f 	.word	0xfffffd7f
 800458c:	40010400 	.word	0x40010400

08004590 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004590:	21a0      	movs	r1, #160	; 0xa0
 8004592:	6802      	ldr	r2, [r0, #0]
{
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004596:	68d3      	ldr	r3, [r2, #12]
{
 8004598:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800459a:	438b      	bics	r3, r1
 800459c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800459e:	f7fe fab3 	bl	8002b08 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045a2:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80045a4:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045a6:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045a8:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4233      	tst	r3, r6
 80045b0:	d001      	beq.n	80045b6 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80045b2:	2000      	movs	r0, #0
}
 80045b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045b6:	f7fe faa7 	bl	8002b08 <HAL_GetTick>
 80045ba:	1b40      	subs	r0, r0, r5
 80045bc:	42b8      	cmp	r0, r7
 80045be:	d9f4      	bls.n	80045aa <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80045c0:	2003      	movs	r0, #3
 80045c2:	e7f7      	b.n	80045b4 <HAL_RTC_WaitForSynchro+0x24>

080045c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045c6:	2640      	movs	r6, #64	; 0x40
 80045c8:	6803      	ldr	r3, [r0, #0]
{
 80045ca:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	4232      	tst	r2, r6
 80045d0:	d001      	beq.n	80045d6 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80045d2:	2000      	movs	r0, #0
}
 80045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045d6:	2201      	movs	r2, #1
 80045d8:	4252      	negs	r2, r2
 80045da:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80045dc:	f7fe fa94 	bl	8002b08 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045e0:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80045e2:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045e4:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4233      	tst	r3, r6
 80045ec:	d1f1      	bne.n	80045d2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045ee:	f7fe fa8b 	bl	8002b08 <HAL_GetTick>
 80045f2:	1b40      	subs	r0, r0, r5
 80045f4:	42b8      	cmp	r0, r7
 80045f6:	d9f6      	bls.n	80045e6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80045f8:	2003      	movs	r0, #3
 80045fa:	e7eb      	b.n	80045d4 <RTC_EnterInitMode+0x10>

080045fc <HAL_RTC_Init>:
{
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004600:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004602:	2800      	cmp	r0, #0
 8004604:	d01a      	beq.n	800463c <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004606:	1c86      	adds	r6, r0, #2
 8004608:	7ff3      	ldrb	r3, [r6, #31]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004610:	1943      	adds	r3, r0, r5
 8004612:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004614:	f7fd fd70 	bl	80020f8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004618:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800461a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800461c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800461e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004620:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004622:	625a      	str	r2, [r3, #36]	; 0x24
 8004624:	3a77      	subs	r2, #119	; 0x77
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004628:	f7ff ffcc 	bl	80045c4 <RTC_EnterInitMode>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	1e05      	subs	r5, r0, #0
 8004630:	d006      	beq.n	8004640 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004632:	22ff      	movs	r2, #255	; 0xff
 8004634:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004636:	2304      	movs	r3, #4
 8004638:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800463a:	2501      	movs	r5, #1
}
 800463c:	0028      	movs	r0, r5
 800463e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	491b      	ldr	r1, [pc, #108]	; (80046b0 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004644:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004646:	400a      	ands	r2, r1
 8004648:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	6899      	ldr	r1, [r3, #8]
 800464e:	4302      	orrs	r2, r0
 8004650:	69a0      	ldr	r0, [r4, #24]
 8004652:	4302      	orrs	r2, r0
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004658:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800465a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800465c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800465e:	68a2      	ldr	r2, [r4, #8]
 8004660:	6919      	ldr	r1, [r3, #16]
 8004662:	0412      	lsls	r2, r2, #16
 8004664:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004666:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004668:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	438a      	bics	r2, r1
 800466e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004670:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004672:	397d      	subs	r1, #125	; 0x7d
 8004674:	438a      	bics	r2, r1
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004678:	69e2      	ldr	r2, [r4, #28]
 800467a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800467c:	4302      	orrs	r2, r0
 800467e:	430a      	orrs	r2, r1
 8004680:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	069b      	lsls	r3, r3, #26
 8004686:	d40c      	bmi.n	80046a2 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004688:	0020      	movs	r0, r4
 800468a:	f7ff ff81 	bl	8004590 <HAL_RTC_WaitForSynchro>
 800468e:	2800      	cmp	r0, #0
 8004690:	d007      	beq.n	80046a2 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004692:	22ff      	movs	r2, #255	; 0xff
 8004694:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004696:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800469a:	2304      	movs	r3, #4
 800469c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800469e:	77e5      	strb	r5, [r4, #31]
 80046a0:	e7cb      	b.n	800463a <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80046a8:	2301      	movs	r3, #1
 80046aa:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80046ac:	e7c6      	b.n	800463c <HAL_RTC_Init+0x40>
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	ff8fffbf 	.word	0xff8fffbf

080046b4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80046b4:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80046b6:	2809      	cmp	r0, #9
 80046b8:	d803      	bhi.n	80046c2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4318      	orrs	r0, r3
 80046be:	b2c0      	uxtb	r0, r0
}
 80046c0:	4770      	bx	lr
    Param -= 10U;
 80046c2:	380a      	subs	r0, #10
    bcdhigh++;
 80046c4:	3301      	adds	r3, #1
    Param -= 10U;
 80046c6:	b2c0      	uxtb	r0, r0
 80046c8:	e7f5      	b.n	80046b6 <RTC_ByteToBcd2+0x2>
	...

080046cc <HAL_RTC_SetTime>:
{
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80046ce:	1c43      	adds	r3, r0, #1
{
 80046d0:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80046d2:	9301      	str	r3, [sp, #4]
{
 80046d4:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80046d6:	7fd9      	ldrb	r1, [r3, #31]
 80046d8:	2302      	movs	r3, #2
{
 80046da:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80046dc:	001f      	movs	r7, r3
 80046de:	2901      	cmp	r1, #1
 80046e0:	d036      	beq.n	8004750 <HAL_RTC_SetTime+0x84>
 80046e2:	2101      	movs	r1, #1
 80046e4:	1840      	adds	r0, r0, r1
 80046e6:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046e8:	18e9      	adds	r1, r5, r3
 80046ea:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046ec:	682f      	ldr	r7, [r5, #0]
 80046ee:	7820      	ldrb	r0, [r4, #0]
 80046f0:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046f2:	9102      	str	r1, [sp, #8]
 80046f4:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	d12d      	bne.n	8004756 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	0011      	movs	r1, r2
 80046fe:	4019      	ands	r1, r3
 8004700:	421a      	tst	r2, r3
 8004702:	d100      	bne.n	8004706 <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8004704:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004706:	f7ff ffd5 	bl	80046b4 <RTC_ByteToBcd2>
 800470a:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800470c:	0030      	movs	r0, r6
 800470e:	f7ff ffd1 	bl	80046b4 <RTC_ByteToBcd2>
 8004712:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004714:	78a0      	ldrb	r0, [r4, #2]
 8004716:	f7ff ffcd 	bl	80046b4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800471a:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800471c:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800471e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004720:	4303      	orrs	r3, r0
 8004722:	0412      	lsls	r2, r2, #16
 8004724:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004726:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004728:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800472a:	23ca      	movs	r3, #202	; 0xca
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	3b77      	subs	r3, #119	; 0x77
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004732:	0028      	movs	r0, r5
 8004734:	f7ff ff46 	bl	80045c4 <RTC_EnterInitMode>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	1e07      	subs	r7, r0, #0
 800473c:	d019      	beq.n	8004772 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800473e:	22ff      	movs	r2, #255	; 0xff
 8004740:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004742:	2304      	movs	r3, #4
 8004744:	9a02      	ldr	r2, [sp, #8]
 8004746:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004748:	2300      	movs	r3, #0
 800474a:	9a01      	ldr	r2, [sp, #4]
 800474c:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 800474e:	2701      	movs	r7, #1
}
 8004750:	0038      	movs	r0, r7
 8004752:	b005      	add	sp, #20
 8004754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	0011      	movs	r1, r2
 800475a:	4019      	ands	r1, r3
 800475c:	421a      	tst	r2, r3
 800475e:	d100      	bne.n	8004762 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004760:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8004762:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004764:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004766:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004768:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800476a:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800476c:	78e3      	ldrb	r3, [r4, #3]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	e7da      	b.n	8004728 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004772:	4a16      	ldr	r2, [pc, #88]	; (80047cc <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004774:	4916      	ldr	r1, [pc, #88]	; (80047d0 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004776:	4016      	ands	r6, r2
 8004778:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800477a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800477c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800477e:	400a      	ands	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004782:	68e2      	ldr	r2, [r4, #12]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	4302      	orrs	r2, r0
 8004788:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800478a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800478c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	438a      	bics	r2, r1
 8004792:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	069b      	lsls	r3, r3, #26
 8004798:	d40d      	bmi.n	80047b6 <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800479a:	0028      	movs	r0, r5
 800479c:	f7ff fef8 	bl	8004590 <HAL_RTC_WaitForSynchro>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047aa:	2304      	movs	r3, #4
 80047ac:	9a02      	ldr	r2, [sp, #8]
 80047ae:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80047b0:	9b01      	ldr	r3, [sp, #4]
 80047b2:	77df      	strb	r7, [r3, #31]
 80047b4:	e7cb      	b.n	800474e <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80047bc:	2301      	movs	r3, #1
 80047be:	9a02      	ldr	r2, [sp, #8]
 80047c0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80047c2:	2300      	movs	r3, #0
 80047c4:	9a01      	ldr	r2, [sp, #4]
 80047c6:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 80047c8:	e7c2      	b.n	8004750 <HAL_RTC_SetTime+0x84>
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	007f7f7f 	.word	0x007f7f7f
 80047d0:	fffbffff 	.word	0xfffbffff

080047d4 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 80047d4:	2302      	movs	r3, #2
{
 80047d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80047d8:	1c47      	adds	r7, r0, #1
{
 80047da:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80047dc:	7ff9      	ldrb	r1, [r7, #31]
{
 80047de:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80047e0:	001d      	movs	r5, r3
{
 80047e2:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80047e4:	2901      	cmp	r1, #1
 80047e6:	d036      	beq.n	8004856 <HAL_RTC_SetDate+0x82>
 80047e8:	2101      	movs	r1, #1
 80047ea:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ec:	18c1      	adds	r1, r0, r3
 80047ee:	77cb      	strb	r3, [r1, #31]
 80047f0:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 80047f2:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80047f4:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 80047f6:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047f8:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80047fa:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 80047fc:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d14c      	bne.n	800489c <HAL_RTC_SetDate+0xc8>
 8004802:	3210      	adds	r2, #16
 8004804:	4213      	tst	r3, r2
 8004806:	d002      	beq.n	800480e <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004808:	4393      	bics	r3, r2
 800480a:	330a      	adds	r3, #10
 800480c:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800480e:	f7ff ff51 	bl	80046b4 <RTC_ByteToBcd2>
 8004812:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004814:	7870      	ldrb	r0, [r6, #1]
 8004816:	f7ff ff4d 	bl	80046b4 <RTC_ByteToBcd2>
 800481a:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800481c:	0028      	movs	r0, r5
 800481e:	f7ff ff49 	bl	80046b4 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	9a02      	ldr	r2, [sp, #8]
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	4310      	orrs	r0, r2
 800482a:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800482c:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800482e:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004830:	22ca      	movs	r2, #202	; 0xca
 8004832:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004834:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
 8004838:	3a77      	subs	r2, #119	; 0x77
 800483a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800483c:	f7ff fec2 	bl	80045c4 <RTC_EnterInitMode>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	1e05      	subs	r5, r0, #0
 8004844:	d00a      	beq.n	800485c <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004846:	22ff      	movs	r2, #255	; 0xff
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800484a:	2304      	movs	r3, #4
 800484c:	9a01      	ldr	r2, [sp, #4]
 800484e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004854:	2501      	movs	r5, #1
}
 8004856:	0028      	movs	r0, r5
 8004858:	b005      	add	sp, #20
 800485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800485c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800485e:	4a13      	ldr	r2, [pc, #76]	; (80048ac <HAL_RTC_SetDate+0xd8>)
 8004860:	4032      	ands	r2, r6
 8004862:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	438a      	bics	r2, r1
 8004868:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	069b      	lsls	r3, r3, #26
 800486e:	d40c      	bmi.n	800488a <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004870:	0020      	movs	r0, r4
 8004872:	f7ff fe8d 	bl	8004590 <HAL_RTC_WaitForSynchro>
 8004876:	2800      	cmp	r0, #0
 8004878:	d007      	beq.n	800488a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800487a:	22ff      	movs	r2, #255	; 0xff
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004880:	2304      	movs	r3, #4
 8004882:	9a01      	ldr	r2, [sp, #4]
 8004884:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004886:	77fd      	strb	r5, [r7, #31]
 8004888:	e7e4      	b.n	8004854 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004890:	2301      	movs	r3, #1
 8004892:	9a01      	ldr	r2, [sp, #4]
 8004894:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004896:	2300      	movs	r3, #0
 8004898:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800489a:	e7dc      	b.n	8004856 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800489c:	9a02      	ldr	r2, [sp, #8]
 800489e:	0400      	lsls	r0, r0, #16
 80048a0:	4310      	orrs	r0, r2
 80048a2:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->Month) << 8U) | \
 80048a4:	021e      	lsls	r6, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80048a6:	4306      	orrs	r6, r0
 80048a8:	e7c2      	b.n	8004830 <HAL_RTC_SetDate+0x5c>
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	00ffff3f 	.word	0x00ffff3f

080048b0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80048b0:	2302      	movs	r3, #2
{
 80048b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80048b6:	1c41      	adds	r1, r0, #1
 80048b8:	7fce      	ldrb	r6, [r1, #31]
{
 80048ba:	0004      	movs	r4, r0
 80048bc:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80048be:	0018      	movs	r0, r3
 80048c0:	2e01      	cmp	r6, #1
 80048c2:	d100      	bne.n	80048c6 <HAL_RTC_SetAlarm_IT+0x16>
 80048c4:	e097      	b.n	80049f6 <HAL_RTC_SetAlarm_IT+0x146>
 80048c6:	3801      	subs	r0, #1
 80048c8:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048ca:	18e1      	adds	r1, r4, r3
 80048cc:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80048ce:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048d0:	6826      	ldr	r6, [r4, #0]
 80048d2:	9101      	str	r1, [sp, #4]
 80048d4:	7828      	ldrb	r0, [r5, #0]
 80048d6:	78af      	ldrb	r7, [r5, #2]
 80048d8:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80048da:	2a00      	cmp	r2, #0
 80048dc:	d165      	bne.n	80049aa <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048de:	68b2      	ldr	r2, [r6, #8]
 80048e0:	0011      	movs	r1, r2
 80048e2:	4019      	ands	r1, r3
 80048e4:	421a      	tst	r2, r3
 80048e6:	d100      	bne.n	80048ea <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048e8:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80048ea:	f7ff fee3 	bl	80046b4 <RTC_ByteToBcd2>
 80048ee:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048f0:	9801      	ldr	r0, [sp, #4]
 80048f2:	f7ff fedf 	bl	80046b4 <RTC_ByteToBcd2>
 80048f6:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80048f8:	0038      	movs	r0, r7
 80048fa:	f7ff fedb 	bl	80046b4 <RTC_ByteToBcd2>
 80048fe:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004900:	1c6b      	adds	r3, r5, #1
 8004902:	7fd8      	ldrb	r0, [r3, #31]
 8004904:	f7ff fed6 	bl	80046b4 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004908:	696a      	ldr	r2, [r5, #20]
 800490a:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800490c:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800490e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004910:	78ea      	ldrb	r2, [r5, #3]
 8004912:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004914:	4313      	orrs	r3, r2
 8004916:	431f      	orrs	r7, r3
 8004918:	9b02      	ldr	r3, [sp, #8]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004922:	431f      	orrs	r7, r3
 8004924:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004926:	69ab      	ldr	r3, [r5, #24]
 8004928:	686a      	ldr	r2, [r5, #4]
 800492a:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492c:	23ca      	movs	r3, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800492e:	9201      	str	r2, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004930:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004932:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004934:	3b77      	subs	r3, #119	; 0x77
 8004936:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004938:	33ad      	adds	r3, #173	; 0xad
 800493a:	429a      	cmp	r2, r3
 800493c:	d15d      	bne.n	80049fa <HAL_RTC_SetAlarm_IT+0x14a>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800493e:	68b3      	ldr	r3, [r6, #8]
 8004940:	4a42      	ldr	r2, [pc, #264]	; (8004a4c <HAL_RTC_SetAlarm_IT+0x19c>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004942:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004944:	4013      	ands	r3, r2
 8004946:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004948:	68f2      	ldr	r2, [r6, #12]
 800494a:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HAL_RTC_SetAlarm_IT+0x1a0>)
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	4313      	orrs	r3, r2
 8004950:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004952:	f7fe f8d9 	bl	8002b08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004956:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004958:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800495a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	0011      	movs	r1, r2
 8004962:	4029      	ands	r1, r5
 8004964:	9103      	str	r1, [sp, #12]
 8004966:	422a      	tst	r2, r5
 8004968:	d036      	beq.n	80049d8 <HAL_RTC_SetAlarm_IT+0x128>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800496a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800496c:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800496e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	6899      	ldr	r1, [r3, #8]
 8004974:	0052      	lsls	r2, r2, #1
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	6899      	ldr	r1, [r3, #8]
 800497e:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004980:	430a      	orrs	r2, r1
 8004982:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <HAL_RTC_SetAlarm_IT+0x1a4>)
 8004988:	0292      	lsls	r2, r2, #10
 800498a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800498c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800498e:	4311      	orrs	r1, r2
 8004990:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004992:	6899      	ldr	r1, [r3, #8]
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800499e:	3afe      	subs	r2, #254	; 0xfe
 80049a0:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80049a2:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80049a4:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80049a6:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80049a8:	e025      	b.n	80049f6 <HAL_RTC_SetAlarm_IT+0x146>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049aa:	68b2      	ldr	r2, [r6, #8]
 80049ac:	0011      	movs	r1, r2
 80049ae:	4019      	ands	r1, r3
 80049b0:	421a      	tst	r2, r3
 80049b2:	d100      	bne.n	80049b6 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049b4:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049b6:	69eb      	ldr	r3, [r5, #28]
 80049b8:	696a      	ldr	r2, [r5, #20]
 80049ba:	0400      	lsls	r0, r0, #16
 80049bc:	4313      	orrs	r3, r2
 80049be:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80049c0:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049c2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80049c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049c6:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80049c8:	78eb      	ldrb	r3, [r5, #3]
 80049ca:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049cc:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80049ce:	1c6b      	adds	r3, r5, #1
 80049d0:	7fdb      	ldrb	r3, [r3, #31]
 80049d2:	061b      	lsls	r3, r3, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049d4:	431f      	orrs	r7, r3
 80049d6:	e7a6      	b.n	8004926 <HAL_RTC_SetAlarm_IT+0x76>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049d8:	f7fe f896 	bl	8002b08 <HAL_GetTick>
 80049dc:	9b02      	ldr	r3, [sp, #8]
 80049de:	1ac0      	subs	r0, r0, r3
 80049e0:	42b0      	cmp	r0, r6
 80049e2:	d9bb      	bls.n	800495c <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e4:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ec:	1ca3      	adds	r3, r4, #2
 80049ee:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	3401      	adds	r4, #1
 80049f4:	77e3      	strb	r3, [r4, #31]
}
 80049f6:	b005      	add	sp, #20
 80049f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80049fa:	68b3      	ldr	r3, [r6, #8]
 80049fc:	4a16      	ldr	r2, [pc, #88]	; (8004a58 <HAL_RTC_SetAlarm_IT+0x1a8>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049fe:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004a00:	4013      	ands	r3, r2
 8004a02:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004a04:	68f2      	ldr	r2, [r6, #12]
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x1ac>)
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004a0e:	f7fe f87b 	bl	8002b08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a12:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004a14:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a16:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	0011      	movs	r1, r2
 8004a1e:	4029      	ands	r1, r5
 8004a20:	9103      	str	r1, [sp, #12]
 8004a22:	422a      	tst	r2, r5
 8004a24:	d00b      	beq.n	8004a3e <HAL_RTC_SetAlarm_IT+0x18e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a26:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004a28:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a2a:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	6899      	ldr	r1, [r3, #8]
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	6899      	ldr	r1, [r3, #8]
 8004a3a:	0192      	lsls	r2, r2, #6
 8004a3c:	e7a0      	b.n	8004980 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a3e:	f7fe f863 	bl	8002b08 <HAL_GetTick>
 8004a42:	9b02      	ldr	r3, [sp, #8]
 8004a44:	1ac0      	subs	r0, r0, r3
 8004a46:	42b0      	cmp	r0, r6
 8004a48:	d9e6      	bls.n	8004a18 <HAL_RTC_SetAlarm_IT+0x168>
 8004a4a:	e7cb      	b.n	80049e4 <HAL_RTC_SetAlarm_IT+0x134>
 8004a4c:	fffffeff 	.word	0xfffffeff
 8004a50:	fffffe7f 	.word	0xfffffe7f
 8004a54:	40010400 	.word	0x40010400
 8004a58:	fffffdff 	.word	0xfffffdff
 8004a5c:	fffffd7f 	.word	0xfffffd7f

08004a60 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004a60:	0902      	lsrs	r2, r0, #4
{
 8004a62:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004a64:	200a      	movs	r0, #10
 8004a66:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004a68:	220f      	movs	r2, #15
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	18c0      	adds	r0, r0, r3
 8004a6e:	b2c0      	uxtb	r0, r0
}
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_RTC_GetTime>:
{
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a78:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a7a:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a7c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004a7e:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a80:	690b      	ldr	r3, [r1, #16]
 8004a82:	045b      	lsls	r3, r3, #17
 8004a84:	0c5b      	lsrs	r3, r3, #17
 8004a86:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a88:	680b      	ldr	r3, [r1, #0]
 8004a8a:	490e      	ldr	r1, [pc, #56]	; (8004ac4 <HAL_RTC_GetTime+0x50>)
 8004a8c:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a8e:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004a90:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004a92:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004a94:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a96:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004a98:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004a9a:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a9c:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004a9e:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004aa0:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004aa2:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004aa8:	f7ff ffda 	bl	8004a60 <RTC_Bcd2ToByte>
 8004aac:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004aae:	0030      	movs	r0, r6
 8004ab0:	f7ff ffd6 	bl	8004a60 <RTC_Bcd2ToByte>
 8004ab4:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ab6:	0028      	movs	r0, r5
 8004ab8:	f7ff ffd2 	bl	8004a60 <RTC_Bcd2ToByte>
 8004abc:	70a0      	strb	r0, [r4, #2]
}
 8004abe:	2000      	movs	r0, #0
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	007f7f7f 	.word	0x007f7f7f

08004ac8 <HAL_RTC_GetDate>:
{
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004acc:	6803      	ldr	r3, [r0, #0]
 8004ace:	490e      	ldr	r1, [pc, #56]	; (8004b08 <HAL_RTC_GetDate+0x40>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004ad4:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ad6:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ad8:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ada:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004adc:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ade:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004ae0:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ae2:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ae4:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ae6:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004aec:	f7ff ffb8 	bl	8004a60 <RTC_Bcd2ToByte>
 8004af0:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004af2:	0028      	movs	r0, r5
 8004af4:	f7ff ffb4 	bl	8004a60 <RTC_Bcd2ToByte>
 8004af8:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004afa:	0030      	movs	r0, r6
 8004afc:	f7ff ffb0 	bl	8004a60 <RTC_Bcd2ToByte>
 8004b00:	70a0      	strb	r0, [r4, #2]
}
 8004b02:	2000      	movs	r0, #0
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	00ffff3f 	.word	0x00ffff3f

08004b0c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b0c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004b0e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b10:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004b12:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004b14:	600a      	str	r2, [r1, #0]
}
 8004b16:	4770      	bx	lr

08004b18 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b18:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004b1a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b1c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004b1e:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004b20:	6808      	ldr	r0, [r1, #0]
}
 8004b22:	4770      	bx	lr

08004b24 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b24:	2202      	movs	r2, #2
{
 8004b26:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004b28:	1c41      	adds	r1, r0, #1
 8004b2a:	7fcc      	ldrb	r4, [r1, #31]
{
 8004b2c:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8004b2e:	0010      	movs	r0, r2
 8004b30:	2c01      	cmp	r4, #1
 8004b32:	d010      	beq.n	8004b56 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b34:	1898      	adds	r0, r3, r2
 8004b36:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	32c8      	adds	r2, #200	; 0xc8
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b3e:	3a77      	subs	r2, #119	; 0x77
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004b42:	689c      	ldr	r4, [r3, #8]
 8004b44:	3a33      	subs	r2, #51	; 0x33
 8004b46:	4322      	orrs	r2, r4
 8004b48:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b52:	2000      	movs	r0, #0
 8004b54:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <HAL_RTCEx_AlarmBEventCallback>:
 8004b58:	4770      	bx	lr
	...

08004b5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b5e:	001f      	movs	r7, r3
 8004b60:	b085      	sub	sp, #20
 8004b62:	000e      	movs	r6, r1
 8004b64:	9201      	str	r2, [sp, #4]
 8004b66:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b68:	f7fd ffce 	bl	8002b08 <HAL_GetTick>
 8004b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b6e:	19dd      	adds	r5, r3, r7
 8004b70:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004b72:	f7fd ffc9 	bl	8002b08 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b76:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 8004b78:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	015b      	lsls	r3, r3, #5
 8004b7e:	0d1b      	lsrs	r3, r3, #20
 8004b80:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b82:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004b84:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b86:	6893      	ldr	r3, [r2, #8]
 8004b88:	4033      	ands	r3, r6
 8004b8a:	1b9b      	subs	r3, r3, r6
 8004b8c:	4259      	negs	r1, r3
 8004b8e:	414b      	adcs	r3, r1
 8004b90:	9901      	ldr	r1, [sp, #4]
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d101      	bne.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004b96:	2000      	movs	r0, #0
 8004b98:	e032      	b.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	1c7b      	adds	r3, r7, #1
 8004b9c:	d0f3      	beq.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b9e:	f7fd ffb3 	bl	8002b08 <HAL_GetTick>
 8004ba2:	9b00      	ldr	r3, [sp, #0]
 8004ba4:	1ac0      	subs	r0, r0, r3
 8004ba6:	42a8      	cmp	r0, r5
 8004ba8:	d32c      	bcc.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004baa:	21e0      	movs	r1, #224	; 0xe0
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	438a      	bics	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb4:	2282      	movs	r2, #130	; 0x82
 8004bb6:	6861      	ldr	r1, [r4, #4]
 8004bb8:	0052      	lsls	r2, r2, #1
 8004bba:	4291      	cmp	r1, r2
 8004bbc:	d10c      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x7c>
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	68a2      	ldr	r2, [r4, #8]
 8004bc2:	0209      	lsls	r1, r1, #8
 8004bc4:	428a      	cmp	r2, r1
 8004bc6:	d003      	beq.n	8004bd0 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	00c9      	lsls	r1, r1, #3
 8004bcc:	428a      	cmp	r2, r1
 8004bce:	d103      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd8:	2180      	movs	r1, #128	; 0x80
 8004bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004bdc:	0189      	lsls	r1, r1, #6
 8004bde:	428a      	cmp	r2, r1
 8004be0:	d106      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	480c      	ldr	r0, [pc, #48]	; (8004c18 <SPI_WaitFlagStateUntilTimeout+0xbc>)
 8004be6:	4001      	ands	r1, r0
 8004be8:	6019      	str	r1, [r3, #0]
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	0023      	movs	r3, r4
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	3351      	adds	r3, #81	; 0x51
 8004bf6:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004bf8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004bfc:	3450      	adds	r4, #80	; 0x50
 8004bfe:	7023      	strb	r3, [r4, #0]
}
 8004c00:	b005      	add	sp, #20
 8004c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004c04:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004c06:	1e5a      	subs	r2, r3, #1
 8004c08:	4193      	sbcs	r3, r2
 8004c0a:	425b      	negs	r3, r3
 8004c0c:	401d      	ands	r5, r3
      count--;
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	e7b6      	b.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0x26>
 8004c14:	20000000 	.word	0x20000000
 8004c18:	ffffdfff 	.word	0xffffdfff

08004c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <SPI_EndRxTxTransaction+0x60>)
{
 8004c20:	0004      	movs	r4, r0
 8004c22:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	4916      	ldr	r1, [pc, #88]	; (8004c80 <SPI_EndRxTxTransaction+0x64>)
{
 8004c28:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c2a:	f7fb fa93 	bl	8000154 <__udivsi3>
 8004c2e:	23fa      	movs	r3, #250	; 0xfa
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4343      	muls	r3, r0
 8004c34:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c36:	2382      	movs	r3, #130	; 0x82
 8004c38:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c3a:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d10f      	bne.n	8004c62 <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c42:	002b      	movs	r3, r5
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	0020      	movs	r0, r4
 8004c4a:	9600      	str	r6, [sp, #0]
 8004c4c:	f7ff ff86 	bl	8004b5c <SPI_WaitFlagStateUntilTimeout>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d010      	beq.n	8004c76 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c54:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004c56:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c58:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d006      	beq.n	8004c76 <SPI_EndRxTxTransaction+0x5a>
      count--;
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	4213      	tst	r3, r2
 8004c74:	d1f5      	bne.n	8004c62 <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8004c76:	2000      	movs	r0, #0
 8004c78:	e7f1      	b.n	8004c5e <SPI_EndRxTxTransaction+0x42>
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	016e3600 	.word	0x016e3600

08004c84 <HAL_SPI_MspInit>:
}
 8004c84:	4770      	bx	lr
	...

08004c88 <HAL_SPI_Init>:
{
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004c8c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004c8e:	2c00      	cmp	r4, #0
 8004c90:	d05a      	beq.n	8004d48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d158      	bne.n	8004d4a <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c98:	2282      	movs	r2, #130	; 0x82
 8004c9a:	6861      	ldr	r1, [r4, #4]
 8004c9c:	0052      	lsls	r2, r2, #1
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	d000      	beq.n	8004ca4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca2:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ca4:	0025      	movs	r5, r4
 8004ca6:	3551      	adds	r5, #81	; 0x51
 8004ca8:	782b      	ldrb	r3, [r5, #0]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8004cb0:	0023      	movs	r3, r4
 8004cb2:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8004cb4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004cb6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004cb8:	f7ff ffe4 	bl	8004c84 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cbc:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 8004cbe:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc0:	2682      	movs	r6, #130	; 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cc2:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc4:	2784      	movs	r7, #132	; 0x84
  __HAL_SPI_DISABLE(hspi);
 8004cc6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc8:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 8004cca:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ccc:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 8004cce:	4393      	bics	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	69a2      	ldr	r2, [r4, #24]
 8004cd6:	4033      	ands	r3, r6
 8004cd8:	68a6      	ldr	r6, [r4, #8]
 8004cda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004cdc:	403e      	ands	r6, r7
 8004cde:	2780      	movs	r7, #128	; 0x80
 8004ce0:	4333      	orrs	r3, r6
 8004ce2:	68e6      	ldr	r6, [r4, #12]
 8004ce4:	013f      	lsls	r7, r7, #4
 8004ce6:	403e      	ands	r6, r7
 8004ce8:	2702      	movs	r7, #2
 8004cea:	4333      	orrs	r3, r6
 8004cec:	6926      	ldr	r6, [r4, #16]
 8004cee:	403e      	ands	r6, r7
 8004cf0:	4333      	orrs	r3, r6
 8004cf2:	6966      	ldr	r6, [r4, #20]
 8004cf4:	3f01      	subs	r7, #1
 8004cf6:	403e      	ands	r6, r7
 8004cf8:	4333      	orrs	r3, r6
 8004cfa:	2680      	movs	r6, #128	; 0x80
 8004cfc:	00b6      	lsls	r6, r6, #2
 8004cfe:	4016      	ands	r6, r2
 8004d00:	4333      	orrs	r3, r6
 8004d02:	69e6      	ldr	r6, [r4, #28]
 8004d04:	3737      	adds	r7, #55	; 0x37
 8004d06:	403e      	ands	r6, r7
 8004d08:	4333      	orrs	r3, r6
 8004d0a:	6a26      	ldr	r6, [r4, #32]
 8004d0c:	3748      	adds	r7, #72	; 0x48
 8004d0e:	403e      	ands	r6, r7
 8004d10:	4333      	orrs	r3, r6
 8004d12:	2680      	movs	r6, #128	; 0x80
 8004d14:	0007      	movs	r7, r0
 8004d16:	01b6      	lsls	r6, r6, #6
 8004d18:	4037      	ands	r7, r6
 8004d1a:	433b      	orrs	r3, r7
 8004d1c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d1e:	2304      	movs	r3, #4
 8004d20:	2710      	movs	r7, #16
 8004d22:	0c12      	lsrs	r2, r2, #16
 8004d24:	401a      	ands	r2, r3
 8004d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d28:	403b      	ands	r3, r7
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2e:	42b0      	cmp	r0, r6
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004d32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d38:	69cb      	ldr	r3, [r1, #28]
 8004d3a:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d3c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004d42:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d44:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d46:	702b      	strb	r3, [r5, #0]
}
 8004d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d4e:	6163      	str	r3, [r4, #20]
 8004d50:	e7a8      	b.n	8004ca4 <HAL_SPI_Init+0x1c>
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	fffff7ff 	.word	0xfffff7ff

08004d58 <HAL_SPI_TransmitReceive>:
{
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5a:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8004d5c:	0003      	movs	r3, r0
{
 8004d5e:	b087      	sub	sp, #28
 8004d60:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8004d62:	3350      	adds	r3, #80	; 0x50
 8004d64:	781a      	ldrb	r2, [r3, #0]
{
 8004d66:	0004      	movs	r4, r0
 8004d68:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 8004d6a:	2502      	movs	r5, #2
 8004d6c:	2a01      	cmp	r2, #1
 8004d6e:	d100      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x1a>
 8004d70:	e0a8      	b.n	8004ec4 <HAL_SPI_TransmitReceive+0x16c>
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004d76:	f7fd fec7 	bl	8002b08 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004d7a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004d7c:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8004d7e:	3351      	adds	r3, #81	; 0x51
 8004d80:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004d82:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004d84:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d00b      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x4a>
 8004d8a:	2382      	movs	r3, #130	; 0x82
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	d000      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x3c>
 8004d92:	e090      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d94:	68a3      	ldr	r3, [r4, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d000      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x44>
 8004d9a:	e08c      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
 8004d9c:	2a04      	cmp	r2, #4
 8004d9e:	d000      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x4a>
 8004da0:	e089      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 8004da2:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004da4:	2e00      	cmp	r6, #0
 8004da6:	d100      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x52>
 8004da8:	e085      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d100      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x5a>
 8004db0:	e081      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
 8004db2:	2f00      	cmp	r7, #0
 8004db4:	d100      	bne.n	8004db8 <HAL_SPI_TransmitReceive+0x60>
 8004db6:	e07e      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004db8:	0023      	movs	r3, r4
 8004dba:	3351      	adds	r3, #81	; 0x51
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	2a04      	cmp	r2, #4
 8004dc0:	d001      	beq.n	8004dc6 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dc2:	2205      	movs	r2, #5
 8004dc4:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc6:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dc8:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dca:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dcc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dce:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8004dd2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004dd4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dd6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8004dd8:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 8004dda:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ddc:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004dde:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004de0:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de2:	0180      	lsls	r0, r0, #6
 8004de4:	4282      	cmp	r2, r0
 8004de6:	d106      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	4d82      	ldr	r5, [pc, #520]	; (8004ff4 <HAL_SPI_TransmitReceive+0x29c>)
 8004dec:	4028      	ands	r0, r5
 8004dee:	6018      	str	r0, [r3, #0]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	4302      	orrs	r2, r0
 8004df4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	4210      	tst	r0, r2
 8004dfc:	d102      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4302      	orrs	r2, r0
 8004e02:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	68e0      	ldr	r0, [r4, #12]
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	4290      	cmp	r0, r2
 8004e0c:	d000      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0xb8>
 8004e0e:	e072      	b.n	8004ef6 <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e10:	2900      	cmp	r1, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0xc0>
 8004e14:	2f01      	cmp	r7, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e18:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1a:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004e1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e28:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 8004e2a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e2c:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e2e:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d118      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x110>
 8004e36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d115      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d000      	beq.n	8004e48 <HAL_SPI_TransmitReceive+0xf0>
 8004e46:	e0b1      	b.n	8004fac <HAL_SPI_TransmitReceive+0x254>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	9b02      	ldr	r3, [sp, #8]
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	0020      	movs	r0, r4
 8004e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e54:	f7ff fe82 	bl	8004b5c <SPI_WaitFlagStateUntilTimeout>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d100      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x106>
 8004e5c:	e0a4      	b.n	8004fa8 <HAL_SPI_TransmitReceive+0x250>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e5e:	2302      	movs	r3, #2
 8004e60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e62:	4313      	orrs	r3, r2
 8004e64:	6563      	str	r3, [r4, #84]	; 0x54
 8004e66:	e025      	b.n	8004eb4 <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4232      	tst	r2, r6
 8004e6e:	d005      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x124>
 8004e70:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x124>
 8004e76:	2d01      	cmp	r5, #1
 8004e78:	d027      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x172>
{
 8004e7a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7c:	6898      	ldr	r0, [r3, #8]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	0002      	movs	r2, r0
 8004e82:	400a      	ands	r2, r1
 8004e84:	4208      	tst	r0, r1
 8004e86:	d00c      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x14a>
 8004e88:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 8004e8e:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e90:	68d9      	ldr	r1, [r3, #12]
 8004e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e94:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e96:	3302      	adds	r3, #2
 8004e98:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ea2:	f7fd fe31 	bl	8002b08 <HAL_GetTick>
 8004ea6:	9b02      	ldr	r3, [sp, #8]
 8004ea8:	1ac0      	subs	r0, r0, r3
 8004eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eac:	4298      	cmp	r0, r3
 8004eae:	d3bf      	bcc.n	8004e30 <HAL_SPI_TransmitReceive+0xd8>
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	d0bd      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8004eb4:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	0023      	movs	r3, r4
 8004eb8:	2201      	movs	r2, #1
 8004eba:	3351      	adds	r3, #81	; 0x51
 8004ebc:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	3450      	adds	r4, #80	; 0x50
 8004ec2:	7023      	strb	r3, [r4, #0]
}
 8004ec4:	0028      	movs	r0, r5
 8004ec6:	b007      	add	sp, #28
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ecc:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ece:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed0:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed2:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ed4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004edc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004ede:	b295      	uxth	r5, r2
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d1ca      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x122>
 8004ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ee6:	42ba      	cmp	r2, r7
 8004ee8:	d1c7      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	0152      	lsls	r2, r2, #5
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e7c2      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x1a6>
 8004efa:	2f01      	cmp	r7, #1
 8004efc:	d108      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004efe:	7832      	ldrb	r2, [r6, #0]
 8004f00:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f04:	3301      	adds	r3, #1
 8004f06:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f10:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 8004f12:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f14:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f16:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x1ce>
 8004f1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d100      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x1ce>
 8004f24:	e78a      	b.n	8004e3c <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	4232      	tst	r2, r6
 8004f2c:	d005      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x1e2>
 8004f2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x1e2>
 8004f34:	2d01      	cmp	r5, #1
 8004f36:	d01f      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 8004f38:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	6898      	ldr	r0, [r3, #8]
 8004f40:	0002      	movs	r2, r0
 8004f42:	400a      	ands	r2, r1
 8004f44:	4208      	tst	r0, r1
 8004f46:	d00d      	beq.n	8004f64 <HAL_SPI_TransmitReceive+0x20c>
 8004f48:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_SPI_TransmitReceive+0x20c>
        txallowed = 1U;
 8004f4e:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f50:	68d9      	ldr	r1, [r3, #12]
 8004f52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f54:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f58:	3301      	adds	r3, #1
 8004f5a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f64:	f7fd fdd0 	bl	8002b08 <HAL_GetTick>
 8004f68:	9b02      	ldr	r3, [sp, #8]
 8004f6a:	1ac0      	subs	r0, r0, r3
 8004f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	d3d2      	bcc.n	8004f18 <HAL_SPI_TransmitReceive+0x1c0>
 8004f72:	3301      	adds	r3, #1
 8004f74:	d0d0      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x1c0>
 8004f76:	e79d      	b.n	8004eb4 <HAL_SPI_TransmitReceive+0x15c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f80:	3301      	adds	r3, #1
 8004f82:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004f84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f8e:	b29d      	uxth	r5, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1d1      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x1e0>
 8004f94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f96:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f98:	42bb      	cmp	r3, r7
 8004f9a:	d1cd      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	6811      	ldr	r1, [r2, #0]
 8004fa0:	015b      	lsls	r3, r3, #5
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e7c8      	b.n	8004f3a <HAL_SPI_TransmitReceive+0x1e2>
    READ_REG(hspi->Instance->DR);
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004fac:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fae:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004fb0:	6893      	ldr	r3, [r2, #8]
 8004fb2:	06db      	lsls	r3, r3, #27
 8004fb4:	d506      	bpl.n	8004fc4 <HAL_SPI_TransmitReceive+0x26c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fba:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <HAL_SPI_TransmitReceive+0x2a0>)
 8004fc2:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	9a02      	ldr	r2, [sp, #8]
 8004fc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fca:	f7ff fe27 	bl	8004c1c <SPI_EndRxTxTransaction>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x282>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd2:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004fd4:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd6:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8004fd8:	e76d      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d000      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0x28a>
 8004fe0:	e769      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe2:	9305      	str	r3, [sp, #20]
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	9205      	str	r2, [sp, #20]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	9b05      	ldr	r3, [sp, #20]
 8004ff0:	e761      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x15e>
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	ffffdfff 	.word	0xffffdfff
 8004ff8:	0000ffef 	.word	0x0000ffef

08004ffc <HAL_SPI_GetState>:
  return hspi->State;
 8004ffc:	3051      	adds	r0, #81	; 0x51
 8004ffe:	7800      	ldrb	r0, [r0, #0]
 8005000:	b2c0      	uxtb	r0, r0
}
 8005002:	4770      	bx	lr

08005004 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005004:	6803      	ldr	r3, [r0, #0]
 8005006:	490b      	ldr	r1, [pc, #44]	; (8005034 <UART_EndRxTransfer+0x30>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	400a      	ands	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	3123      	adds	r1, #35	; 0x23
 8005012:	31ff      	adds	r1, #255	; 0xff
 8005014:	438a      	bics	r2, r1
 8005016:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005018:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800501a:	428a      	cmp	r2, r1
 800501c:	d103      	bne.n	8005026 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	310f      	adds	r1, #15
 8005022:	438a      	bics	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005026:	2320      	movs	r3, #32
 8005028:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502a:	2300      	movs	r3, #0
 800502c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005030:	4770      	bx	lr
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	fffffedf 	.word	0xfffffedf

08005038 <HAL_UART_DeInit>:
{
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800503c:	2001      	movs	r0, #1
  if (huart == NULL)
 800503e:	2c00      	cmp	r4, #0
 8005040:	d014      	beq.n	800506c <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8005044:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4382      	bics	r2, r0
 800504e:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8005050:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0U;
 8005052:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005054:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005056:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8005058:	f004 fb0e 	bl	8009678 <HAL_UART_MspDeInit>
  return HAL_OK;
 800505c:	0028      	movs	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505e:	1d23      	adds	r3, r4, #4
 8005060:	67dd      	str	r5, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8005062:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005064:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	6625      	str	r5, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005068:	3474      	adds	r4, #116	; 0x74
 800506a:	7025      	strb	r5, [r4, #0]
}
 800506c:	bd70      	pop	{r4, r5, r6, pc}

0800506e <HAL_UART_RxCpltCallback>:
 800506e:	4770      	bx	lr

08005070 <HAL_UART_ErrorCallback>:
 8005070:	4770      	bx	lr

08005072 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005072:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	0002      	movs	r2, r0
{
 8005078:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800507a:	325a      	adds	r2, #90	; 0x5a
 800507c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800507e:	3a08      	subs	r2, #8
 8005080:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005082:	f7ff fff5 	bl	8005070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005086:	bd10      	pop	{r4, pc}

08005088 <HAL_UARTEx_RxEventCallback>:
}
 8005088:	4770      	bx	lr
	...

0800508c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800508c:	6803      	ldr	r3, [r0, #0]
{
 800508e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005090:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005092:	4a85      	ldr	r2, [pc, #532]	; (80052a8 <HAL_UART_IRQHandler+0x21c>)
{
 8005094:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005096:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005098:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800509a:	4211      	tst	r1, r2
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800509e:	2220      	movs	r2, #32
 80050a0:	4211      	tst	r1, r2
 80050a2:	d100      	bne.n	80050a6 <HAL_UART_IRQHandler+0x1a>
 80050a4:	e076      	b.n	8005194 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050a6:	4210      	tst	r0, r2
 80050a8:	d100      	bne.n	80050ac <HAL_UART_IRQHandler+0x20>
 80050aa:	e073      	b.n	8005194 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80050ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 80050ae:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d165      	bne.n	8005180 <HAL_UART_IRQHandler+0xf4>
 80050b4:	e065      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050b6:	2201      	movs	r2, #1
 80050b8:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050ba:	4d7c      	ldr	r5, [pc, #496]	; (80052ac <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050bc:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050be:	4005      	ands	r5, r0
 80050c0:	433d      	orrs	r5, r7
 80050c2:	d067      	beq.n	8005194 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050c4:	1d25      	adds	r5, r4, #4
 80050c6:	4211      	tst	r1, r2
 80050c8:	d005      	beq.n	80050d6 <HAL_UART_IRQHandler+0x4a>
 80050ca:	05c6      	lsls	r6, r0, #23
 80050cc:	d503      	bpl.n	80050d6 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ce:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d0:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80050d2:	4332      	orrs	r2, r6
 80050d4:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d6:	2202      	movs	r2, #2
 80050d8:	4211      	tst	r1, r2
 80050da:	d006      	beq.n	80050ea <HAL_UART_IRQHandler+0x5e>
 80050dc:	2f00      	cmp	r7, #0
 80050de:	d004      	beq.n	80050ea <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80050e4:	1892      	adds	r2, r2, r2
 80050e6:	4332      	orrs	r2, r6
 80050e8:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050ea:	2204      	movs	r2, #4
 80050ec:	4211      	tst	r1, r2
 80050ee:	d006      	beq.n	80050fe <HAL_UART_IRQHandler+0x72>
 80050f0:	2f00      	cmp	r7, #0
 80050f2:	d004      	beq.n	80050fe <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050f4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f6:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80050f8:	3a02      	subs	r2, #2
 80050fa:	4332      	orrs	r2, r6
 80050fc:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050fe:	2208      	movs	r2, #8
 8005100:	4211      	tst	r1, r2
 8005102:	d007      	beq.n	8005114 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005104:	2620      	movs	r6, #32
 8005106:	4006      	ands	r6, r0
 8005108:	433e      	orrs	r6, r7
 800510a:	d003      	beq.n	8005114 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800510c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800510e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005110:	4332      	orrs	r2, r6
 8005112:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005114:	2280      	movs	r2, #128	; 0x80
 8005116:	0112      	lsls	r2, r2, #4
 8005118:	4211      	tst	r1, r2
 800511a:	d006      	beq.n	800512a <HAL_UART_IRQHandler+0x9e>
 800511c:	0146      	lsls	r6, r0, #5
 800511e:	d504      	bpl.n	800512a <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005120:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005122:	2320      	movs	r3, #32
 8005124:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8005126:	4313      	orrs	r3, r2
 8005128:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800512a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d028      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005130:	2320      	movs	r3, #32
 8005132:	4219      	tst	r1, r3
 8005134:	d006      	beq.n	8005144 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005136:	4218      	tst	r0, r3
 8005138:	d004      	beq.n	8005144 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 800513a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8005140:	0020      	movs	r0, r4
 8005142:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005144:	2240      	movs	r2, #64	; 0x40
 8005146:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 8005148:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514a:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 800514c:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514e:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005150:	3a18      	subs	r2, #24
 8005152:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005154:	431e      	orrs	r6, r3
 8005156:	d019      	beq.n	800518c <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8005158:	f7ff ff54 	bl	8005004 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	2240      	movs	r2, #64	; 0x40
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4213      	tst	r3, r2
 8005162:	d00f      	beq.n	8005184 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005164:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8005166:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005168:	4393      	bics	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 800516c:	2800      	cmp	r0, #0
 800516e:	d009      	beq.n	8005184 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <HAL_UART_IRQHandler+0x224>)
 8005172:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005174:	f7fe f8ca 	bl	800330c <HAL_DMA_Abort_IT>
 8005178:	2800      	cmp	r0, #0
 800517a:	d002      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800517e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005180:	4798      	blx	r3
}
 8005182:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005184:	0020      	movs	r0, r4
 8005186:	f7ff ff73 	bl	8005070 <HAL_UART_ErrorCallback>
 800518a:	e7fa      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 800518c:	f7ff ff70 	bl	8005070 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	67ee      	str	r6, [r5, #124]	; 0x7c
 8005192:	e7f6      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005196:	2d01      	cmp	r5, #1
 8005198:	d161      	bne.n	800525e <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800519a:	2210      	movs	r2, #16
 800519c:	4211      	tst	r1, r2
 800519e:	d05e      	beq.n	800525e <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80051a0:	4210      	tst	r0, r2
 80051a2:	d05c      	beq.n	800525e <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a6:	6899      	ldr	r1, [r3, #8]
 80051a8:	2640      	movs	r6, #64	; 0x40
 80051aa:	000f      	movs	r7, r1
 80051ac:	4037      	ands	r7, r6
 80051ae:	4231      	tst	r1, r6
 80051b0:	d038      	beq.n	8005224 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80051b4:	680f      	ldr	r7, [r1, #0]
 80051b6:	9100      	str	r1, [sp, #0]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80051bc:	2900      	cmp	r1, #0
 80051be:	d0e0      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051c0:	2058      	movs	r0, #88	; 0x58
 80051c2:	4684      	mov	ip, r0
 80051c4:	44a4      	add	ip, r4
 80051c6:	4660      	mov	r0, ip
 80051c8:	8800      	ldrh	r0, [r0, #0]
 80051ca:	4288      	cmp	r0, r1
 80051cc:	d9d9      	bls.n	8005182 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 80051ce:	205a      	movs	r0, #90	; 0x5a
 80051d0:	4684      	mov	ip, r0
 80051d2:	44a4      	add	ip, r4
 80051d4:	4660      	mov	r0, ip
 80051d6:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051d8:	683f      	ldr	r7, [r7, #0]
 80051da:	2120      	movs	r1, #32
 80051dc:	0038      	movs	r0, r7
 80051de:	4008      	ands	r0, r1
 80051e0:	9001      	str	r0, [sp, #4]
 80051e2:	420f      	tst	r7, r1
 80051e4:	d112      	bne.n	800520c <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e6:	681f      	ldr	r7, [r3, #0]
 80051e8:	4832      	ldr	r0, [pc, #200]	; (80052b4 <HAL_UART_IRQHandler+0x228>)
 80051ea:	4007      	ands	r7, r0
 80051ec:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f0:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	43af      	bics	r7, r5
 80051f4:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f6:	689d      	ldr	r5, [r3, #8]
 80051f8:	43b5      	bics	r5, r6
 80051fa:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80051fc:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	9901      	ldr	r1, [sp, #4]
 8005200:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	4391      	bics	r1, r2
 8005206:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005208:	f7fe f860 	bl	80032cc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800520c:	0023      	movs	r3, r4
 800520e:	0022      	movs	r2, r4
 8005210:	335a      	adds	r3, #90	; 0x5a
 8005212:	3258      	adds	r2, #88	; 0x58
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	8811      	ldrh	r1, [r2, #0]
 8005218:	1ac9      	subs	r1, r1, r3
 800521a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800521c:	0020      	movs	r0, r4
 800521e:	f7ff ff33 	bl	8005088 <HAL_UARTEx_RxEventCallback>
 8005222:	e7ae      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005224:	0026      	movs	r6, r4
 8005226:	0021      	movs	r1, r4
 8005228:	365a      	adds	r6, #90	; 0x5a
 800522a:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 800522c:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800522e:	3158      	adds	r1, #88	; 0x58
 8005230:	8809      	ldrh	r1, [r1, #0]
 8005232:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005234:	2e00      	cmp	r6, #0
 8005236:	d0a4      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005238:	1a09      	subs	r1, r1, r0
 800523a:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800523c:	2900      	cmp	r1, #0
 800523e:	d0a0      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	4e1d      	ldr	r6, [pc, #116]	; (80052b8 <HAL_UART_IRQHandler+0x22c>)
 8005244:	4030      	ands	r0, r6
 8005246:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005248:	6898      	ldr	r0, [r3, #8]
 800524a:	43a8      	bics	r0, r5
 800524c:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800524e:	2020      	movs	r0, #32
 8005250:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8005256:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005258:	4390      	bics	r0, r2
 800525a:	6018      	str	r0, [r3, #0]
 800525c:	e7de      	b.n	800521c <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	0352      	lsls	r2, r2, #13
 8005262:	4211      	tst	r1, r2
 8005264:	d006      	beq.n	8005274 <HAL_UART_IRQHandler+0x1e8>
 8005266:	0276      	lsls	r6, r6, #9
 8005268:	d504      	bpl.n	8005274 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 800526a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800526c:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800526e:	f000 fbc9 	bl	8005a04 <HAL_UARTEx_WakeupCallback>
    return;
 8005272:	e786      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	4211      	tst	r1, r2
 8005278:	d003      	beq.n	8005282 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800527a:	4210      	tst	r0, r2
 800527c:	d001      	beq.n	8005282 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800527e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005280:	e715      	b.n	80050ae <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005282:	2540      	movs	r5, #64	; 0x40
 8005284:	4229      	tst	r1, r5
 8005286:	d100      	bne.n	800528a <HAL_UART_IRQHandler+0x1fe>
 8005288:	e77b      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
 800528a:	4228      	tst	r0, r5
 800528c:	d100      	bne.n	8005290 <HAL_UART_IRQHandler+0x204>
 800528e:	e778      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005290:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005292:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005294:	43aa      	bics	r2, r5
 8005296:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005298:	2320      	movs	r3, #32
 800529a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80052a0:	f7fd f906 	bl	80024b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052a4:	e76d      	b.n	8005182 <HAL_UART_IRQHandler+0xf6>
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	0000080f 	.word	0x0000080f
 80052ac:	04000120 	.word	0x04000120
 80052b0:	08005073 	.word	0x08005073
 80052b4:	fffffeff 	.word	0xfffffeff
 80052b8:	fffffedf 	.word	0xfffffedf

080052bc <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80052bc:	0003      	movs	r3, r0
{
 80052be:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c0:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 80052c2:	335c      	adds	r3, #92	; 0x5c
 80052c4:	881a      	ldrh	r2, [r3, #0]
{
 80052c6:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052c8:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ca:	2922      	cmp	r1, #34	; 0x22
 80052cc:	d131      	bne.n	8005332 <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052d0:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80052d2:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80052d4:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052d6:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 80052d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052da:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80052dc:	3301      	adds	r3, #1
 80052de:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052e0:	8813      	ldrh	r3, [r2, #0]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80052e8:	8813      	ldrh	r3, [r2, #0]
 80052ea:	b299      	uxth	r1, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11b      	bne.n	8005328 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f0:	6803      	ldr	r3, [r0, #0]
 80052f2:	4812      	ldr	r0, [pc, #72]	; (800533c <UART_RxISR_8BIT+0x80>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4002      	ands	r2, r0
 80052f8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	3023      	adds	r0, #35	; 0x23
 80052fe:	30ff      	adds	r0, #255	; 0xff
 8005300:	4382      	bics	r2, r0
 8005302:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005304:	2220      	movs	r2, #32
 8005306:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 800530a:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530c:	4282      	cmp	r2, r0
 800530e:	d10c      	bne.n	800532a <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	2110      	movs	r1, #16
 8005312:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005314:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	438a      	bics	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531a:	0023      	movs	r3, r4
 800531c:	3358      	adds	r3, #88	; 0x58
 800531e:	8819      	ldrh	r1, [r3, #0]
 8005320:	f7ff feb2 	bl	8005088 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005324:	2300      	movs	r3, #0
 8005326:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005328:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800532a:	0020      	movs	r0, r4
 800532c:	f7ff fe9f 	bl	800506e <HAL_UART_RxCpltCallback>
 8005330:	e7f8      	b.n	8005324 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005332:	2208      	movs	r2, #8
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
}
 800533a:	e7f5      	b.n	8005328 <UART_RxISR_8BIT+0x6c>
 800533c:	fffffedf 	.word	0xfffffedf

08005340 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005340:	b510      	push	{r4, lr}
 8005342:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005344:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005346:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8005348:	335c      	adds	r3, #92	; 0x5c
 800534a:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800534c:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534e:	2a22      	cmp	r2, #34	; 0x22
 8005350:	d12f      	bne.n	80053b2 <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005352:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005354:	6d62      	ldr	r2, [r4, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8005356:	4001      	ands	r1, r0
 8005358:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800535a:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 800535c:	3202      	adds	r2, #2
    huart->RxXferCount--;
 800535e:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005360:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8005362:	880a      	ldrh	r2, [r1, #0]
 8005364:	3a01      	subs	r2, #1
 8005366:	b292      	uxth	r2, r2
 8005368:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800536a:	880a      	ldrh	r2, [r1, #0]
 800536c:	b291      	uxth	r1, r2
 800536e:	2a00      	cmp	r2, #0
 8005370:	d11a      	bne.n	80053a8 <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4811      	ldr	r0, [pc, #68]	; (80053bc <UART_RxISR_16BIT+0x7c>)
 8005376:	4002      	ands	r2, r0
 8005378:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	3023      	adds	r0, #35	; 0x23
 800537e:	30ff      	adds	r0, #255	; 0xff
 8005380:	4382      	bics	r2, r0
 8005382:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005384:	2220      	movs	r2, #32
 8005386:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005388:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 800538a:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	4282      	cmp	r2, r0
 800538e:	d10c      	bne.n	80053aa <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	2110      	movs	r1, #16
 8005392:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005394:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005396:	438a      	bics	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800539a:	0023      	movs	r3, r4
 800539c:	3358      	adds	r3, #88	; 0x58
 800539e:	8819      	ldrh	r1, [r3, #0]
 80053a0:	f7ff fe72 	bl	8005088 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	2300      	movs	r3, #0
 80053a6:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053a8:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80053aa:	0020      	movs	r0, r4
 80053ac:	f7ff fe5f 	bl	800506e <HAL_UART_RxCpltCallback>
 80053b0:	e7f8      	b.n	80053a4 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053b2:	2208      	movs	r2, #8
 80053b4:	6999      	ldr	r1, [r3, #24]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	619a      	str	r2, [r3, #24]
}
 80053ba:	e7f5      	b.n	80053a8 <UART_RxISR_16BIT+0x68>
 80053bc:	fffffedf 	.word	0xfffffedf

080053c0 <UART_SetConfig>:
{
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c4:	6925      	ldr	r5, [r4, #16]
 80053c6:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80053c8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ca:	4329      	orrs	r1, r5
 80053cc:	6965      	ldr	r5, [r4, #20]
 80053ce:	69c3      	ldr	r3, [r0, #28]
 80053d0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d2:	6810      	ldr	r0, [r2, #0]
 80053d4:	4d78      	ldr	r5, [pc, #480]	; (80055b8 <UART_SetConfig+0x1f8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d8:	4028      	ands	r0, r5
 80053da:	4301      	orrs	r1, r0
 80053dc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053de:	6851      	ldr	r1, [r2, #4]
 80053e0:	4876      	ldr	r0, [pc, #472]	; (80055bc <UART_SetConfig+0x1fc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053e2:	4d77      	ldr	r5, [pc, #476]	; (80055c0 <UART_SetConfig+0x200>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	4001      	ands	r1, r0
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	4301      	orrs	r1, r0
 80053ea:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ec:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ee:	42aa      	cmp	r2, r5
 80053f0:	d001      	beq.n	80053f6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80053f2:	6a21      	ldr	r1, [r4, #32]
 80053f4:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f6:	6891      	ldr	r1, [r2, #8]
 80053f8:	4e72      	ldr	r6, [pc, #456]	; (80055c4 <UART_SetConfig+0x204>)
 80053fa:	4031      	ands	r1, r6
 80053fc:	4301      	orrs	r1, r0
 80053fe:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005400:	4971      	ldr	r1, [pc, #452]	; (80055c8 <UART_SetConfig+0x208>)
 8005402:	428a      	cmp	r2, r1
 8005404:	d10f      	bne.n	8005426 <UART_SetConfig+0x66>
 8005406:	2103      	movs	r1, #3
 8005408:	4a70      	ldr	r2, [pc, #448]	; (80055cc <UART_SetConfig+0x20c>)
 800540a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800540c:	400a      	ands	r2, r1
 800540e:	3a01      	subs	r2, #1
 8005410:	496f      	ldr	r1, [pc, #444]	; (80055d0 <UART_SetConfig+0x210>)
 8005412:	2a02      	cmp	r2, #2
 8005414:	d910      	bls.n	8005438 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	0212      	lsls	r2, r2, #8
 800541a:	4293      	cmp	r3, r2
 800541c:	d000      	beq.n	8005420 <UART_SetConfig+0x60>
 800541e:	e0a2      	b.n	8005566 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7fe ff38 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8005424:	e0c3      	b.n	80055ae <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005426:	496b      	ldr	r1, [pc, #428]	; (80055d4 <UART_SetConfig+0x214>)
 8005428:	428a      	cmp	r2, r1
 800542a:	d118      	bne.n	800545e <UART_SetConfig+0x9e>
 800542c:	200c      	movs	r0, #12
 800542e:	4a67      	ldr	r2, [pc, #412]	; (80055cc <UART_SetConfig+0x20c>)
 8005430:	4967      	ldr	r1, [pc, #412]	; (80055d0 <UART_SetConfig+0x210>)
 8005432:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005434:	3103      	adds	r1, #3
 8005436:	4002      	ands	r2, r0
 8005438:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	0212      	lsls	r2, r2, #8
 800543e:	4293      	cmp	r3, r2
 8005440:	d000      	beq.n	8005444 <UART_SetConfig+0x84>
 8005442:	e082      	b.n	800554a <UART_SetConfig+0x18a>
    switch (clocksource)
 8005444:	2808      	cmp	r0, #8
 8005446:	d824      	bhi.n	8005492 <UART_SetConfig+0xd2>
 8005448:	f7fa fe7a 	bl	8000140 <__gnu_thumb1_case_shi>
 800544c:	ffea00af 	.word	0xffea00af
 8005450:	0023005c 	.word	0x0023005c
 8005454:	0023007c 	.word	0x0023007c
 8005458:	00230023 	.word	0x00230023
 800545c:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545e:	495e      	ldr	r1, [pc, #376]	; (80055d8 <UART_SetConfig+0x218>)
 8005460:	428a      	cmp	r2, r1
 8005462:	d100      	bne.n	8005466 <UART_SetConfig+0xa6>
 8005464:	e09d      	b.n	80055a2 <UART_SetConfig+0x1e2>
 8005466:	495d      	ldr	r1, [pc, #372]	; (80055dc <UART_SetConfig+0x21c>)
 8005468:	428a      	cmp	r2, r1
 800546a:	d100      	bne.n	800546e <UART_SetConfig+0xae>
 800546c:	e099      	b.n	80055a2 <UART_SetConfig+0x1e2>
 800546e:	42aa      	cmp	r2, r5
 8005470:	d10f      	bne.n	8005492 <UART_SetConfig+0xd2>
 8005472:	21c0      	movs	r1, #192	; 0xc0
 8005474:	2080      	movs	r0, #128	; 0x80
 8005476:	4a55      	ldr	r2, [pc, #340]	; (80055cc <UART_SetConfig+0x20c>)
 8005478:	0109      	lsls	r1, r1, #4
 800547a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800547c:	0100      	lsls	r0, r0, #4
 800547e:	400b      	ands	r3, r1
 8005480:	4283      	cmp	r3, r0
 8005482:	d016      	beq.n	80054b2 <UART_SetConfig+0xf2>
 8005484:	d807      	bhi.n	8005496 <UART_SetConfig+0xd6>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_SetConfig+0xe0>
 800548a:	2280      	movs	r2, #128	; 0x80
 800548c:	00d2      	lsls	r2, r2, #3
 800548e:	4293      	cmp	r3, r2
 8005490:	d035      	beq.n	80054fe <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005492:	2001      	movs	r0, #1
 8005494:	e009      	b.n	80054aa <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005496:	428b      	cmp	r3, r1
 8005498:	d1fb      	bne.n	8005492 <UART_SetConfig+0xd2>
 800549a:	2080      	movs	r0, #128	; 0x80
 800549c:	0200      	lsls	r0, r0, #8
 800549e:	e012      	b.n	80054c6 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a0:	f7fe fee8 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d10e      	bne.n	80054c6 <UART_SetConfig+0x106>
 80054a8:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80054ae:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80054b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b2:	2310      	movs	r3, #16
 80054b4:	6810      	ldr	r0, [r2, #0]
 80054b6:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054b8:	4243      	negs	r3, r0
 80054ba:	4158      	adcs	r0, r3
 80054bc:	4b48      	ldr	r3, [pc, #288]	; (80055e0 <UART_SetConfig+0x220>)
 80054be:	4240      	negs	r0, r0
 80054c0:	4018      	ands	r0, r3
 80054c2:	4b48      	ldr	r3, [pc, #288]	; (80055e4 <UART_SetConfig+0x224>)
 80054c4:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054c6:	2203      	movs	r2, #3
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	435a      	muls	r2, r3
 80054cc:	4290      	cmp	r0, r2
 80054ce:	d3e0      	bcc.n	8005492 <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054d0:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054d2:	4290      	cmp	r0, r2
 80054d4:	d8dd      	bhi.n	8005492 <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054d6:	2700      	movs	r7, #0
 80054d8:	0e02      	lsrs	r2, r0, #24
 80054da:	0201      	lsls	r1, r0, #8
 80054dc:	085e      	lsrs	r6, r3, #1
 80054de:	1989      	adds	r1, r1, r6
 80054e0:	417a      	adcs	r2, r7
 80054e2:	0008      	movs	r0, r1
 80054e4:	0011      	movs	r1, r2
 80054e6:	001a      	movs	r2, r3
 80054e8:	003b      	movs	r3, r7
 80054ea:	f7fa ffa9 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054ee:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <UART_SetConfig+0x228>)
 80054f0:	18c2      	adds	r2, r0, r3
 80054f2:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <UART_SetConfig+0x22c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d8cc      	bhi.n	8005492 <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	60d8      	str	r0, [r3, #12]
 80054fc:	e7d4      	b.n	80054a8 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fe fb19 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
        break;
 8005502:	e7cf      	b.n	80054a4 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005504:	2210      	movs	r2, #16
 8005506:	4b31      	ldr	r3, [pc, #196]	; (80055cc <UART_SetConfig+0x20c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800550c:	425a      	negs	r2, r3
 800550e:	4153      	adcs	r3, r2
 8005510:	4a33      	ldr	r2, [pc, #204]	; (80055e0 <UART_SetConfig+0x220>)
 8005512:	425b      	negs	r3, r3
 8005514:	4013      	ands	r3, r2
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <UART_SetConfig+0x224>)
 8005518:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	0058      	lsls	r0, r3, #1
 800551e:	084b      	lsrs	r3, r1, #1
 8005520:	18c0      	adds	r0, r0, r3
 8005522:	f7fa fe17 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005526:	4932      	ldr	r1, [pc, #200]	; (80055f0 <UART_SetConfig+0x230>)
 8005528:	b282      	uxth	r2, r0
 800552a:	3a10      	subs	r2, #16
 800552c:	0403      	lsls	r3, r0, #16
 800552e:	428a      	cmp	r2, r1
 8005530:	d8af      	bhi.n	8005492 <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005532:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005534:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005536:	4390      	bics	r0, r2
 8005538:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800553a:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800553c:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800553e:	4318      	orrs	r0, r3
 8005540:	60d0      	str	r0, [r2, #12]
 8005542:	e7b1      	b.n	80054a8 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005544:	f7fe faf6 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005548:	e031      	b.n	80055ae <UART_SetConfig+0x1ee>
    switch (clocksource)
 800554a:	2808      	cmp	r0, #8
 800554c:	d8a1      	bhi.n	8005492 <UART_SetConfig+0xd2>
 800554e:	f7fa fde3 	bl	8000118 <__gnu_thumb1_case_sqi>
 8005552:	0a05      	.short	0x0a05
 8005554:	a022a00d 	.word	0xa022a00d
 8005558:	a0a0      	.short	0xa0a0
 800555a:	25          	.byte	0x25
 800555b:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fe fe8a 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005560:	2800      	cmp	r0, #0
 8005562:	d0a1      	beq.n	80054a8 <UART_SetConfig+0xe8>
 8005564:	e00d      	b.n	8005582 <UART_SetConfig+0x1c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005566:	f7fe fe95 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
        break;
 800556a:	e7f9      	b.n	8005560 <UART_SetConfig+0x1a0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <UART_SetConfig+0x20c>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	2310      	movs	r3, #16
 8005572:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005574:	4243      	negs	r3, r0
 8005576:	4158      	adcs	r0, r3
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <UART_SetConfig+0x220>)
 800557a:	4240      	negs	r0, r0
 800557c:	4018      	ands	r0, r3
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <UART_SetConfig+0x224>)
 8005580:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005582:	6861      	ldr	r1, [r4, #4]
 8005584:	084b      	lsrs	r3, r1, #1
 8005586:	1818      	adds	r0, r3, r0
 8005588:	f7fa fde4 	bl	8000154 <__udivsi3>
 800558c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800558e:	0002      	movs	r2, r0
 8005590:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <UART_SetConfig+0x230>)
 8005592:	3a10      	subs	r2, #16
 8005594:	e7ae      	b.n	80054f4 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe facd 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
        break;
 800559a:	e7e1      	b.n	8005560 <UART_SetConfig+0x1a0>
    switch (clocksource)
 800559c:	2080      	movs	r0, #128	; 0x80
 800559e:	0200      	lsls	r0, r0, #8
 80055a0:	e7ef      	b.n	8005582 <UART_SetConfig+0x1c2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a2:	2280      	movs	r2, #128	; 0x80
 80055a4:	0212      	lsls	r2, r2, #8
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d1d8      	bne.n	800555c <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055aa:	f7fe fe63 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80055ae:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80055b0:	d100      	bne.n	80055b4 <UART_SetConfig+0x1f4>
 80055b2:	e779      	b.n	80054a8 <UART_SetConfig+0xe8>
 80055b4:	e7b1      	b.n	800551a <UART_SetConfig+0x15a>
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	efff69f3 	.word	0xefff69f3
 80055bc:	ffffcfff 	.word	0xffffcfff
 80055c0:	40004800 	.word	0x40004800
 80055c4:	fffff4ff 	.word	0xfffff4ff
 80055c8:	40013800 	.word	0x40013800
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800b3d1 	.word	0x0800b3d1
 80055d4:	40004400 	.word	0x40004400
 80055d8:	40004c00 	.word	0x40004c00
 80055dc:	40005000 	.word	0x40005000
 80055e0:	00b71b00 	.word	0x00b71b00
 80055e4:	003d0900 	.word	0x003d0900
 80055e8:	fffffd00 	.word	0xfffffd00
 80055ec:	000ffcff 	.word	0x000ffcff
 80055f0:	0000ffef 	.word	0x0000ffef

080055f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80055f6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f8:	07da      	lsls	r2, r3, #31
 80055fa:	d506      	bpl.n	800560a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055fc:	6801      	ldr	r1, [r0, #0]
 80055fe:	4c28      	ldr	r4, [pc, #160]	; (80056a0 <UART_AdvFeatureConfig+0xac>)
 8005600:	684a      	ldr	r2, [r1, #4]
 8005602:	4022      	ands	r2, r4
 8005604:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005606:	4322      	orrs	r2, r4
 8005608:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800560a:	079a      	lsls	r2, r3, #30
 800560c:	d506      	bpl.n	800561c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560e:	6801      	ldr	r1, [r0, #0]
 8005610:	4c24      	ldr	r4, [pc, #144]	; (80056a4 <UART_AdvFeatureConfig+0xb0>)
 8005612:	684a      	ldr	r2, [r1, #4]
 8005614:	4022      	ands	r2, r4
 8005616:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005618:	4322      	orrs	r2, r4
 800561a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561c:	075a      	lsls	r2, r3, #29
 800561e:	d506      	bpl.n	800562e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005620:	6801      	ldr	r1, [r0, #0]
 8005622:	4c21      	ldr	r4, [pc, #132]	; (80056a8 <UART_AdvFeatureConfig+0xb4>)
 8005624:	684a      	ldr	r2, [r1, #4]
 8005626:	4022      	ands	r2, r4
 8005628:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800562a:	4322      	orrs	r2, r4
 800562c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800562e:	071a      	lsls	r2, r3, #28
 8005630:	d506      	bpl.n	8005640 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005632:	6801      	ldr	r1, [r0, #0]
 8005634:	4c1d      	ldr	r4, [pc, #116]	; (80056ac <UART_AdvFeatureConfig+0xb8>)
 8005636:	684a      	ldr	r2, [r1, #4]
 8005638:	4022      	ands	r2, r4
 800563a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800563c:	4322      	orrs	r2, r4
 800563e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005640:	06da      	lsls	r2, r3, #27
 8005642:	d506      	bpl.n	8005652 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005644:	6801      	ldr	r1, [r0, #0]
 8005646:	4c1a      	ldr	r4, [pc, #104]	; (80056b0 <UART_AdvFeatureConfig+0xbc>)
 8005648:	688a      	ldr	r2, [r1, #8]
 800564a:	4022      	ands	r2, r4
 800564c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800564e:	4322      	orrs	r2, r4
 8005650:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005652:	069a      	lsls	r2, r3, #26
 8005654:	d506      	bpl.n	8005664 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005656:	6801      	ldr	r1, [r0, #0]
 8005658:	4c16      	ldr	r4, [pc, #88]	; (80056b4 <UART_AdvFeatureConfig+0xc0>)
 800565a:	688a      	ldr	r2, [r1, #8]
 800565c:	4022      	ands	r2, r4
 800565e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005660:	4322      	orrs	r2, r4
 8005662:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005664:	065a      	lsls	r2, r3, #25
 8005666:	d510      	bpl.n	800568a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005668:	6801      	ldr	r1, [r0, #0]
 800566a:	4d13      	ldr	r5, [pc, #76]	; (80056b8 <UART_AdvFeatureConfig+0xc4>)
 800566c:	684a      	ldr	r2, [r1, #4]
 800566e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005670:	402a      	ands	r2, r5
 8005672:	4322      	orrs	r2, r4
 8005674:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	0352      	lsls	r2, r2, #13
 800567a:	4294      	cmp	r4, r2
 800567c:	d105      	bne.n	800568a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800567e:	684a      	ldr	r2, [r1, #4]
 8005680:	4c0e      	ldr	r4, [pc, #56]	; (80056bc <UART_AdvFeatureConfig+0xc8>)
 8005682:	4022      	ands	r2, r4
 8005684:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005686:	4322      	orrs	r2, r4
 8005688:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	d506      	bpl.n	800569c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800568e:	6802      	ldr	r2, [r0, #0]
 8005690:	490b      	ldr	r1, [pc, #44]	; (80056c0 <UART_AdvFeatureConfig+0xcc>)
 8005692:	6853      	ldr	r3, [r2, #4]
 8005694:	400b      	ands	r3, r1
 8005696:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005698:	430b      	orrs	r3, r1
 800569a:	6053      	str	r3, [r2, #4]
}
 800569c:	bd30      	pop	{r4, r5, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	fffdffff 	.word	0xfffdffff
 80056a4:	fffeffff 	.word	0xfffeffff
 80056a8:	fffbffff 	.word	0xfffbffff
 80056ac:	ffff7fff 	.word	0xffff7fff
 80056b0:	ffffefff 	.word	0xffffefff
 80056b4:	ffffdfff 	.word	0xffffdfff
 80056b8:	ffefffff 	.word	0xffefffff
 80056bc:	ff9fffff 	.word	0xff9fffff
 80056c0:	fff7ffff 	.word	0xfff7ffff

080056c4 <UART_WaitOnFlagUntilTimeout>:
{
 80056c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c6:	2780      	movs	r7, #128	; 0x80
{
 80056c8:	0004      	movs	r4, r0
 80056ca:	000d      	movs	r5, r1
 80056cc:	0016      	movs	r6, r2
 80056ce:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	69d3      	ldr	r3, [r2, #28]
 80056d6:	402b      	ands	r3, r5
 80056d8:	1b5b      	subs	r3, r3, r5
 80056da:	4259      	negs	r1, r3
 80056dc:	414b      	adcs	r3, r1
 80056de:	42b3      	cmp	r3, r6
 80056e0:	d001      	beq.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80056e2:	2000      	movs	r0, #0
 80056e4:	e01c      	b.n	8005720 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	9b08      	ldr	r3, [sp, #32]
 80056e8:	3301      	adds	r3, #1
 80056ea:	d0f3      	beq.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ec:	f7fd fa0c 	bl	8002b08 <HAL_GetTick>
 80056f0:	9b01      	ldr	r3, [sp, #4]
 80056f2:	9a08      	ldr	r2, [sp, #32]
 80056f4:	1ac0      	subs	r0, r0, r3
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	4290      	cmp	r0, r2
 80056fa:	d801      	bhi.n	8005700 <UART_WaitOnFlagUntilTimeout+0x3c>
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	d110      	bne.n	8005722 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4913      	ldr	r1, [pc, #76]	; (8005750 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005704:	400a      	ands	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	31a3      	adds	r1, #163	; 0xa3
 800570c:	31ff      	adds	r1, #255	; 0xff
 800570e:	438a      	bics	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005712:	2320      	movs	r3, #32
 8005714:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005716:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005718:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800571a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800571c:	3474      	adds	r4, #116	; 0x74
 800571e:	7023      	strb	r3, [r4, #0]
}
 8005720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005722:	2104      	movs	r1, #4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	420a      	tst	r2, r1
 8005728:	d0d3      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	423a      	tst	r2, r7
 800572e:	d0d0      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005730:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4906      	ldr	r1, [pc, #24]	; (8005750 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005736:	400a      	ands	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	31a3      	adds	r1, #163	; 0xa3
 800573e:	31ff      	adds	r1, #255	; 0xff
 8005740:	438a      	bics	r2, r1
 8005742:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005744:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005746:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8005748:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800574c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800574e:	e7e3      	b.n	8005718 <UART_WaitOnFlagUntilTimeout+0x54>
 8005750:	fffffe5f 	.word	0xfffffe5f

08005754 <HAL_UART_Transmit>:
{
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005756:	b087      	sub	sp, #28
 8005758:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800575a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800575c:	0004      	movs	r4, r0
 800575e:	000d      	movs	r5, r1
 8005760:	0016      	movs	r6, r2
    return HAL_BUSY;
 8005762:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005764:	2b20      	cmp	r3, #32
 8005766:	d151      	bne.n	800580c <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8005768:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800576a:	2900      	cmp	r1, #0
 800576c:	d04e      	beq.n	800580c <HAL_UART_Transmit+0xb8>
 800576e:	2a00      	cmp	r2, #0
 8005770:	d04c      	beq.n	800580c <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	68a2      	ldr	r2, [r4, #8]
 8005776:	015b      	lsls	r3, r3, #5
 8005778:	429a      	cmp	r2, r3
 800577a:	d104      	bne.n	8005786 <HAL_UART_Transmit+0x32>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005782:	4201      	tst	r1, r0
 8005784:	d142      	bne.n	800580c <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 8005786:	0023      	movs	r3, r4
 8005788:	3374      	adds	r3, #116	; 0x74
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800578e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005790:	2b01      	cmp	r3, #1
 8005792:	d03b      	beq.n	800580c <HAL_UART_Transmit+0xb8>
 8005794:	2301      	movs	r3, #1
 8005796:	9a03      	ldr	r2, [sp, #12]
 8005798:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	2200      	movs	r2, #0
 800579c:	1d23      	adds	r3, r4, #4
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a0:	2321      	movs	r3, #33	; 0x21
 80057a2:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80057a4:	f7fd f9b0 	bl	8002b08 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80057a8:	0023      	movs	r3, r4
 80057aa:	3350      	adds	r3, #80	; 0x50
 80057ac:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80057ae:	3302      	adds	r3, #2
 80057b0:	801e      	strh	r6, [r3, #0]
 80057b2:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80057b8:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80057ba:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057bc:	015b      	lsls	r3, r3, #5
 80057be:	429a      	cmp	r2, r3
 80057c0:	d104      	bne.n	80057cc <HAL_UART_Transmit+0x78>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	42b3      	cmp	r3, r6
 80057c6:	d101      	bne.n	80057cc <HAL_UART_Transmit+0x78>
 80057c8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80057ca:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80057cc:	2300      	movs	r3, #0
 80057ce:	9a03      	ldr	r2, [sp, #12]
 80057d0:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80057d2:	0023      	movs	r3, r4
 80057d4:	3352      	adds	r3, #82	; 0x52
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	9b05      	ldr	r3, [sp, #20]
 80057e0:	2140      	movs	r1, #64	; 0x40
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	0020      	movs	r0, r4
 80057e6:	003b      	movs	r3, r7
 80057e8:	f7ff ff6c 	bl	80056c4 <UART_WaitOnFlagUntilTimeout>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d10c      	bne.n	800580a <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80057f0:	2320      	movs	r3, #32
 80057f2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80057f4:	e00a      	b.n	800580c <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	003b      	movs	r3, r7
 8005800:	0020      	movs	r0, r4
 8005802:	f7ff ff5f 	bl	80056c4 <UART_WaitOnFlagUntilTimeout>
 8005806:	2800      	cmp	r0, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 800580a:	2003      	movs	r0, #3
}
 800580c:	b007      	add	sp, #28
 800580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005810:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005812:	2d00      	cmp	r5, #0
 8005814:	d10b      	bne.n	800582e <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005816:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8005818:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800581a:	05db      	lsls	r3, r3, #23
 800581c:	0ddb      	lsrs	r3, r3, #23
 800581e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005820:	9b04      	ldr	r3, [sp, #16]
 8005822:	9a04      	ldr	r2, [sp, #16]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	3b01      	subs	r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	8013      	strh	r3, [r2, #0]
 800582c:	e7d1      	b.n	80057d2 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800582e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8005830:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005832:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8005834:	e7f4      	b.n	8005820 <HAL_UART_Transmit+0xcc>
	...

08005838 <UART_CheckIdleState>:
{
 8005838:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	2600      	movs	r6, #0
{
 800583c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	1d03      	adds	r3, r0, #4
 8005840:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005842:	f7fd f961 	bl	8002b08 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005846:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005848:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	071b      	lsls	r3, r3, #28
 800584e:	d416      	bmi.n	800587e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	075b      	lsls	r3, r3, #29
 8005856:	d50a      	bpl.n	800586e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <UART_CheckIdleState+0x60>)
 800585c:	2200      	movs	r2, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	0020      	movs	r0, r4
 8005862:	002b      	movs	r3, r5
 8005864:	03c9      	lsls	r1, r1, #15
 8005866:	f7ff ff2d 	bl	80056c4 <UART_WaitOnFlagUntilTimeout>
 800586a:	2800      	cmp	r0, #0
 800586c:	d112      	bne.n	8005894 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800586e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005872:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005874:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005876:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005878:	3474      	adds	r4, #116	; 0x74
 800587a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800587c:	e00b      	b.n	8005896 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <UART_CheckIdleState+0x60>)
 8005882:	0032      	movs	r2, r6
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	0389      	lsls	r1, r1, #14
 8005888:	0003      	movs	r3, r0
 800588a:	0020      	movs	r0, r4
 800588c:	f7ff ff1a 	bl	80056c4 <UART_WaitOnFlagUntilTimeout>
 8005890:	2800      	cmp	r0, #0
 8005892:	d0dd      	beq.n	8005850 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005894:	2003      	movs	r0, #3
}
 8005896:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005898:	01ffffff 	.word	0x01ffffff

0800589c <HAL_UART_Init>:
{
 800589c:	b510      	push	{r4, lr}
 800589e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80058a2:	2001      	movs	r0, #1
}
 80058a4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80058a6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80058ac:	0002      	movs	r2, r0
 80058ae:	3274      	adds	r2, #116	; 0x74
 80058b0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80058b2:	f003 fe65 	bl	8009580 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80058b6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80058b8:	2101      	movs	r1, #1
 80058ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058bc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80058be:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80058c2:	438b      	bics	r3, r1
 80058c4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c6:	f7ff fd7b 	bl	80053c0 <UART_SetConfig>
 80058ca:	2801      	cmp	r0, #1
 80058cc:	d0e9      	beq.n	80058a2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80058d4:	0020      	movs	r0, r4
 80058d6:	f7ff fe8d 	bl	80055f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	4907      	ldr	r1, [pc, #28]	; (80058fc <HAL_UART_Init+0x60>)
 80058de:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80058e0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	438a      	bics	r2, r1
 80058ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80058ee:	2201      	movs	r2, #1
 80058f0:	6819      	ldr	r1, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80058f6:	f7ff ff9f 	bl	8005838 <UART_CheckIdleState>
 80058fa:	e7d3      	b.n	80058a4 <HAL_UART_Init+0x8>
 80058fc:	ffffb7ff 	.word	0xffffb7ff

08005900 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005900:	0003      	movs	r3, r0
 8005902:	3358      	adds	r3, #88	; 0x58
{
 8005904:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005906:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005908:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 800590a:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	6881      	ldr	r1, [r0, #8]
 8005910:	015b      	lsls	r3, r3, #5
 8005912:	4299      	cmp	r1, r3
 8005914:	d128      	bne.n	8005968 <UART_Start_Receive_IT+0x68>
 8005916:	6903      	ldr	r3, [r0, #16]
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	4193      	sbcs	r3, r2
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	425b      	negs	r3, r3
 8005920:	4393      	bics	r3, r2
 8005922:	4a1b      	ldr	r2, [pc, #108]	; (8005990 <UART_Start_Receive_IT+0x90>)
 8005924:	189b      	adds	r3, r3, r2
 8005926:	0002      	movs	r2, r0
 8005928:	325c      	adds	r2, #92	; 0x5c
 800592a:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	2200      	movs	r2, #0
 800592e:	1d03      	adds	r3, r0, #4
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005932:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005934:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005936:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	6894      	ldr	r4, [r2, #8]
 800593a:	3b21      	subs	r3, #33	; 0x21
 800593c:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593e:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005942:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <UART_Start_Receive_IT+0x94>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005946:	42a1      	cmp	r1, r4
 8005948:	d103      	bne.n	8005952 <UART_Start_Receive_IT+0x52>
 800594a:	6901      	ldr	r1, [r0, #16]
 800594c:	2900      	cmp	r1, #0
 800594e:	d100      	bne.n	8005952 <UART_Start_Receive_IT+0x52>
    huart->RxISR = UART_RxISR_16BIT;
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <UART_Start_Receive_IT+0x98>)
 8005952:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005954:	0003      	movs	r3, r0
 8005956:	2000      	movs	r0, #0
 8005958:	3374      	adds	r3, #116	; 0x74
 800595a:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800595c:	2390      	movs	r3, #144	; 0x90
 800595e:	6811      	ldr	r1, [r2, #0]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	430b      	orrs	r3, r1
 8005964:	6013      	str	r3, [r2, #0]
}
 8005966:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005968:	2900      	cmp	r1, #0
 800596a:	d105      	bne.n	8005978 <UART_Start_Receive_IT+0x78>
 800596c:	6902      	ldr	r2, [r0, #16]
 800596e:	237f      	movs	r3, #127	; 0x7f
 8005970:	2a00      	cmp	r2, #0
 8005972:	d1d8      	bne.n	8005926 <UART_Start_Receive_IT+0x26>
 8005974:	3380      	adds	r3, #128	; 0x80
 8005976:	e7d6      	b.n	8005926 <UART_Start_Receive_IT+0x26>
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	2300      	movs	r3, #0
 800597c:	0552      	lsls	r2, r2, #21
 800597e:	4291      	cmp	r1, r2
 8005980:	d1d1      	bne.n	8005926 <UART_Start_Receive_IT+0x26>
 8005982:	6902      	ldr	r2, [r0, #16]
 8005984:	337f      	adds	r3, #127	; 0x7f
 8005986:	2a00      	cmp	r2, #0
 8005988:	d0cd      	beq.n	8005926 <UART_Start_Receive_IT+0x26>
 800598a:	3b40      	subs	r3, #64	; 0x40
 800598c:	e7cb      	b.n	8005926 <UART_Start_Receive_IT+0x26>
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	000001ff 	.word	0x000001ff
 8005994:	080052bd 	.word	0x080052bd
 8005998:	08005341 	.word	0x08005341

0800599c <HAL_UART_Receive_IT>:
{
 800599c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800599e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 80059a0:	0003      	movs	r3, r0
    return HAL_BUSY;
 80059a2:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a4:	2c20      	cmp	r4, #32
 80059a6:	d129      	bne.n	80059fc <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80059a8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80059aa:	2900      	cmp	r1, #0
 80059ac:	d026      	beq.n	80059fc <HAL_UART_Receive_IT+0x60>
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	d024      	beq.n	80059fc <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b2:	2080      	movs	r0, #128	; 0x80
 80059b4:	689c      	ldr	r4, [r3, #8]
 80059b6:	0140      	lsls	r0, r0, #5
 80059b8:	4284      	cmp	r4, r0
 80059ba:	d106      	bne.n	80059ca <HAL_UART_Receive_IT+0x2e>
 80059bc:	6918      	ldr	r0, [r3, #16]
 80059be:	2800      	cmp	r0, #0
 80059c0:	d103      	bne.n	80059ca <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80059c2:	2401      	movs	r4, #1
      return HAL_ERROR;
 80059c4:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80059c6:	4221      	tst	r1, r4
 80059c8:	d118      	bne.n	80059fc <HAL_UART_Receive_IT+0x60>
    __HAL_LOCK(huart);
 80059ca:	001c      	movs	r4, r3
 80059cc:	3474      	adds	r4, #116	; 0x74
 80059ce:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80059d0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80059d2:	2d01      	cmp	r5, #1
 80059d4:	d012      	beq.n	80059fc <HAL_UART_Receive_IT+0x60>
 80059d6:	3801      	subs	r0, #1
 80059d8:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059dc:	4c08      	ldr	r4, [pc, #32]	; (8005a00 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	6618      	str	r0, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	42a0      	cmp	r0, r4
 80059e4:	d007      	beq.n	80059f6 <HAL_UART_Receive_IT+0x5a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059e6:	6844      	ldr	r4, [r0, #4]
 80059e8:	0224      	lsls	r4, r4, #8
 80059ea:	d504      	bpl.n	80059f6 <HAL_UART_Receive_IT+0x5a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059ec:	2480      	movs	r4, #128	; 0x80
 80059ee:	6805      	ldr	r5, [r0, #0]
 80059f0:	04e4      	lsls	r4, r4, #19
 80059f2:	432c      	orrs	r4, r5
 80059f4:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff ff82 	bl	8005900 <UART_Start_Receive_IT>
}
 80059fc:	bd70      	pop	{r4, r5, r6, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	40004800 	.word	0x40004800

08005a04 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a04:	4770      	bx	lr
	...

08005a08 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 8005a08:	4b01      	ldr	r3, [pc, #4]	; (8005a10 <SX1276GetStatus+0x8>)
 8005a0a:	7918      	ldrb	r0, [r3, #4]
}
 8005a0c:	4770      	bx	lr
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	200003c4 	.word	0x200003c4

08005a14 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005a14:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <GetFskBandwidthRegValue+0x28>)
{
 8005a16:	2300      	movs	r3, #0
 8005a18:	0011      	movs	r1, r2
 8005a1a:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005a1c:	6814      	ldr	r4, [r2, #0]
 8005a1e:	4284      	cmp	r4, r0
 8005a20:	d802      	bhi.n	8005a28 <GetFskBandwidthRegValue+0x14>
 8005a22:	6894      	ldr	r4, [r2, #8]
 8005a24:	4284      	cmp	r4, r0
 8005a26:	d804      	bhi.n	8005a32 <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005a28:	3301      	adds	r3, #1
 8005a2a:	3208      	adds	r2, #8
 8005a2c:	2b15      	cmp	r3, #21
 8005a2e:	d1f5      	bne.n	8005a1c <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005a30:	e7fe      	b.n	8005a30 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	18c9      	adds	r1, r1, r3
 8005a36:	7908      	ldrb	r0, [r1, #4]
}
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	0800b420 	.word	0x0800b420

08005a40 <SX1276GetTimeOnAir>:
{
 8005a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a42:	0014      	movs	r4, r2
 8005a44:	aa08      	add	r2, sp, #32
 8005a46:	8816      	ldrh	r6, [r2, #0]
 8005a48:	aa09      	add	r2, sp, #36	; 0x24
 8005a4a:	000d      	movs	r5, r1
 8005a4c:	7811      	ldrb	r1, [r2, #0]
 8005a4e:	aa0a      	add	r2, sp, #40	; 0x28
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	af0b      	add	r7, sp, #44	; 0x2c
 8005a54:	4694      	mov	ip, r2
 8005a56:	783f      	ldrb	r7, [r7, #0]
    switch( modem )
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d009      	beq.n	8005a70 <SX1276GetTimeOnAir+0x30>
 8005a5c:	2801      	cmp	r0, #1
 8005a5e:	d014      	beq.n	8005a8a <SX1276GetTimeOnAir+0x4a>
 8005a60:	2401      	movs	r4, #1
 8005a62:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8005a64:	1900      	adds	r0, r0, r4
 8005a66:	0021      	movs	r1, r4
 8005a68:	3801      	subs	r0, #1
 8005a6a:	f7fa fb73 	bl	8000154 <__udivsi3>
}
 8005a6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005a70:	2301      	movs	r3, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005a72:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005a74:	404b      	eors	r3, r1
    return ( preambleLen << 3 ) +
 8005a76:	18f3      	adds	r3, r6, r3
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005a78:	007f      	lsls	r7, r7, #1
    return ( preambleLen << 3 ) +
 8005a7a:	00db      	lsls	r3, r3, #3
               ( 0 ) + // Address filter size
 8005a7c:	4467      	add	r7, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005a7e:	3318      	adds	r3, #24
               ) << 3 
 8005a80:	00ff      	lsls	r7, r7, #3
             ( syncWordLength << 3 ) +
 8005a82:	19df      	adds	r7, r3, r7
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005a84:	0080      	lsls	r0, r0, #2
 8005a86:	4378      	muls	r0, r7
        break;
 8005a88:	e7ec      	b.n	8005a64 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005a8e:	1f63      	subs	r3, r4, #5
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d804      	bhi.n	8005a9e <SX1276GetTimeOnAir+0x5e>
    {
        if( preambleLen < 12 )
 8005a94:	1c33      	adds	r3, r6, #0
 8005a96:	2e0c      	cmp	r6, #12
 8005a98:	d200      	bcs.n	8005a9c <SX1276GetTimeOnAir+0x5c>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	d135      	bne.n	8005b0e <SX1276GetTimeOnAir+0xce>
 8005aa2:	0023      	movs	r3, r4
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	002a      	movs	r2, r5
 8005aa8:	3b0b      	subs	r3, #11
 8005aaa:	4298      	cmp	r0, r3
 8005aac:	416a      	adcs	r2, r5
 8005aae:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ab0:	b2db      	uxtb	r3, r3
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005ab2:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8005ab4:	013f      	lsls	r7, r7, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005ab6:	00d2      	lsls	r2, r2, #3
 8005ab8:	19d2      	adds	r2, r2, r7
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 8005aba:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 8005abc:	00a0      	lsls	r0, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8005abe:	1a12      	subs	r2, r2, r0
                            ( fixLen ? 0 : 20 );
 8005ac0:	42b9      	cmp	r1, r7
 8005ac2:	d100      	bne.n	8005ac6 <SX1276GetTimeOnAir+0x86>
 8005ac4:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 8005ac6:	19d2      	adds	r2, r2, r7

    if( datarate <= 6 )
    {
        ceilDenominator = 4 * datarate;
 8005ac8:	0001      	movs	r1, r0
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005aca:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8005acc:	2c06      	cmp	r4, #6
 8005ace:	d903      	bls.n	8005ad8 <SX1276GetTimeOnAir+0x98>
        ceilNumerator += 8;
 8005ad0:	3208      	adds	r2, #8
        if( lowDatareOptimize == true )
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d000      	beq.n	8005ad8 <SX1276GetTimeOnAir+0x98>
            ceilDenominator = 4 * ( datarate - 2 );
 8005ad6:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005ad8:	43d3      	mvns	r3, r2
 8005ada:	17db      	asrs	r3, r3, #31
 8005adc:	401a      	ands	r2, r3
 8005ade:	1852      	adds	r2, r2, r1
 8005ae0:	1e50      	subs	r0, r2, #1
 8005ae2:	f7fa fbc1 	bl	8000268 <__divsi3>
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	4343      	muls	r3, r0
 8005aea:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 8005aec:	0003      	movs	r3, r0
 8005aee:	330e      	adds	r3, #14
    if( datarate <= 6 )
 8005af0:	2c06      	cmp	r4, #6
 8005af2:	d900      	bls.n	8005af6 <SX1276GetTimeOnAir+0xb6>
    int32_t intermediate =
 8005af4:	3b02      	subs	r3, #2
    switch( bw )
 8005af6:	2d02      	cmp	r5, #2
 8005af8:	d811      	bhi.n	8005b1e <SX1276GetTimeOnAir+0xde>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005afa:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8005afc:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005afe:	3301      	adds	r3, #1
 8005b00:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8005b02:	0080      	lsls	r0, r0, #2
 8005b04:	4358      	muls	r0, r3
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <SX1276GetTimeOnAir+0xe0>)
 8005b08:	00ad      	lsls	r5, r5, #2
 8005b0a:	58ec      	ldr	r4, [r5, r3]
 8005b0c:	e7aa      	b.n	8005a64 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8005b0e:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005b10:	2d01      	cmp	r5, #1
 8005b12:	d1ce      	bne.n	8005ab2 <SX1276GetTimeOnAir+0x72>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005b14:	0023      	movs	r3, r4
 8005b16:	3b0c      	subs	r3, #12
 8005b18:	4258      	negs	r0, r3
 8005b1a:	4143      	adcs	r3, r0
 8005b1c:	e7c8      	b.n	8005ab0 <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
 8005b1e:	deff      	udf	#255	; 0xff
 8005b20:	0800b3e4 	.word	0x0800b3e4

08005b24 <SX1276GetWakeupTime>:
{
 8005b24:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8005b26:	f7fc fd8f 	bl	8002648 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8005b2a:	3002      	adds	r0, #2
}
 8005b2c:	bd10      	pop	{r4, pc}

08005b2e <SX1276WriteBuffer>:
{
 8005b2e:	b570      	push	{r4, r5, r6, lr}
 8005b30:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8005b32:	2000      	movs	r0, #0
{
 8005b34:	000c      	movs	r4, r1
 8005b36:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 8005b38:	f7fc ff60 	bl	80029fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8005b3c:	2080      	movs	r0, #128	; 0x80
 8005b3e:	4330      	orrs	r0, r6
 8005b40:	b280      	uxth	r0, r0
 8005b42:	f7fc ff4d 	bl	80029e0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005b46:	1965      	adds	r5, r4, r5
 8005b48:	42ac      	cmp	r4, r5
 8005b4a:	d103      	bne.n	8005b54 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f7fc ff55 	bl	80029fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8005b54:	7820      	ldrb	r0, [r4, #0]
 8005b56:	f7fc ff43 	bl	80029e0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005b5a:	3401      	adds	r4, #1
 8005b5c:	e7f4      	b.n	8005b48 <SX1276WriteBuffer+0x1a>

08005b5e <SX1276Write>:
{
 8005b5e:	b507      	push	{r0, r1, r2, lr}
 8005b60:	466b      	mov	r3, sp
 8005b62:	71d9      	strb	r1, [r3, #7]
 8005b64:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8005b66:	2201      	movs	r2, #1
 8005b68:	0019      	movs	r1, r3
 8005b6a:	f7ff ffe0 	bl	8005b2e <SX1276WriteBuffer>
}
 8005b6e:	bd07      	pop	{r0, r1, r2, pc}

08005b70 <SX1276SetChannel>:
{
 8005b70:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005b72:	4911      	ldr	r1, [pc, #68]	; (8005bb8 <SX1276SetChannel+0x48>)
{
 8005b74:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005b76:	f7fa fb73 	bl	8000260 <__aeabi_uidivmod>
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <SX1276SetChannel+0x4c>)
 8005b7c:	0208      	lsls	r0, r1, #8
 8005b7e:	18c0      	adds	r0, r0, r3
 8005b80:	490d      	ldr	r1, [pc, #52]	; (8005bb8 <SX1276SetChannel+0x48>)
 8005b82:	f7fa fae7 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005b86:	490c      	ldr	r1, [pc, #48]	; (8005bb8 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005b88:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005b8a:	0028      	movs	r0, r5
 8005b8c:	f7fa fae2 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8005b90:	0200      	lsls	r0, r0, #8
 8005b92:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005b96:	0c21      	lsrs	r1, r4, #16
 8005b98:	2006      	movs	r0, #6
 8005b9a:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 8005b9c:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005b9e:	f7ff ffde 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8005ba2:	0a21      	lsrs	r1, r4, #8
 8005ba4:	2007      	movs	r0, #7
 8005ba6:	b2c9      	uxtb	r1, r1
 8005ba8:	f7ff ffd9 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8005bac:	2008      	movs	r0, #8
 8005bae:	b2e1      	uxtb	r1, r4
 8005bb0:	f7ff ffd5 	bl	8005b5e <SX1276Write>
}
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	00003d09 	.word	0x00003d09
 8005bbc:	00001e84 	.word	0x00001e84
 8005bc0:	200003c4 	.word	0x200003c4

08005bc4 <SX1276ReadBuffer>:
{
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 8005bc8:	2000      	movs	r0, #0
{
 8005bca:	000c      	movs	r4, r1
 8005bcc:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 8005bce:	f7fc ff15 	bl	80029fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 8005bd2:	207f      	movs	r0, #127	; 0x7f
 8005bd4:	4028      	ands	r0, r5
 8005bd6:	f7fc ff03 	bl	80029e0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005bda:	19a6      	adds	r6, r4, r6
 8005bdc:	42b4      	cmp	r4, r6
 8005bde:	d103      	bne.n	8005be8 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 8005be0:	2001      	movs	r0, #1
 8005be2:	f7fc ff0b 	bl	80029fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7fc fef9 	bl	80029e0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8005bee:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	e7f3      	b.n	8005bdc <SX1276ReadBuffer+0x18>

08005bf4 <SX1276Read>:
{
 8005bf4:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8005bf6:	466b      	mov	r3, sp
 8005bf8:	1ddc      	adds	r4, r3, #7
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	0021      	movs	r1, r4
 8005bfe:	f7ff ffe1 	bl	8005bc4 <SX1276ReadBuffer>
    return data;
 8005c02:	7820      	ldrb	r0, [r4, #0]
}
 8005c04:	bd16      	pop	{r1, r2, r4, pc}
	...

08005c08 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 8005c08:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8005c0a:	4c2c      	ldr	r4, [pc, #176]	; (8005cbc <SX1276OnDio2Irq+0xb4>)
 8005c0c:	7925      	ldrb	r5, [r4, #4]
 8005c0e:	2d01      	cmp	r5, #1
 8005c10:	d002      	beq.n	8005c18 <SX1276OnDio2Irq+0x10>
 8005c12:	2d02      	cmp	r5, #2
 8005c14:	d049      	beq.n	8005caa <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005c18:	7963      	ldrb	r3, [r4, #5]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d017      	beq.n	8005c4e <SX1276OnDio2Irq+0x46>
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d1f9      	bne.n	8005c16 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005c22:	3453      	adds	r4, #83	; 0x53
 8005c24:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005c26:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f4      	beq.n	8005c16 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005c2c:	2012      	movs	r0, #18
 8005c2e:	f7ff ff96 	bl	8005b5e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005c32:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <SX1276OnDio2Irq+0xb8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ed      	beq.n	8005c16 <SX1276OnDio2Irq+0xe>
 8005c3a:	695c      	ldr	r4, [r3, #20]
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	d0ea      	beq.n	8005c16 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005c40:	201c      	movs	r0, #28
 8005c42:	f7ff ffd7 	bl	8005bf4 <SX1276Read>
 8005c46:	233f      	movs	r3, #63	; 0x3f
 8005c48:	4018      	ands	r0, r3
 8005c4a:	47a0      	blx	r4
}
 8005c4c:	e7e3      	b.n	8005c16 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005c4e:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005c50:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005c52:	3330      	adds	r3, #48	; 0x30
 8005c54:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005c56:	3631      	adds	r6, #49	; 0x31
 8005c58:	7833      	ldrb	r3, [r6, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1db      	bne.n	8005c16 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8005c5e:	0020      	movs	r0, r4
 8005c60:	3068      	adds	r0, #104	; 0x68
 8005c62:	f004 f9cd 	bl	800a000 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005c66:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005c68:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005c6a:	f7ff ffc3 	bl	8005bf4 <SX1276Read>
 8005c6e:	0023      	movs	r3, r4
 8005c70:	0840      	lsrs	r0, r0, #1
 8005c72:	3332      	adds	r3, #50	; 0x32
 8005c74:	4240      	negs	r0, r0
 8005c76:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c78:	201b      	movs	r0, #27
 8005c7a:	f7ff ffbb 	bl	8005bf4 <SX1276Read>
 8005c7e:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8005c80:	201c      	movs	r0, #28
 8005c82:	f7ff ffb7 	bl	8005bf4 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c86:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c8a:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005c8c:	b2c0      	uxtb	r0, r0
 8005c8e:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8005c90:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005c92:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005c94:	3080      	adds	r0, #128	; 0x80
 8005c96:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005c98:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c9a:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005c9c:	200c      	movs	r0, #12
 8005c9e:	f7ff ffa9 	bl	8005bf4 <SX1276Read>
 8005ca2:	3438      	adds	r4, #56	; 0x38
 8005ca4:	0940      	lsrs	r0, r0, #5
 8005ca6:	7020      	strb	r0, [r4, #0]
 8005ca8:	e7b5      	b.n	8005c16 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8005caa:	7963      	ldrb	r3, [r4, #5]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d1b2      	bne.n	8005c16 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005cb0:	3453      	adds	r4, #83	; 0x53
 8005cb2:	7823      	ldrb	r3, [r4, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ae      	beq.n	8005c16 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005cb8:	0029      	movs	r1, r5
 8005cba:	e7b7      	b.n	8005c2c <SX1276OnDio2Irq+0x24>
 8005cbc:	200003c4 	.word	0x200003c4
 8005cc0:	20000444 	.word	0x20000444
 8005cc4:	00003d09 	.word	0x00003d09

08005cc8 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <SX1276OnDio4Irq+0x18>)
 8005cca:	795a      	ldrb	r2, [r3, #5]
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	d105      	bne.n	8005cdc <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005cd0:	3330      	adds	r3, #48	; 0x30
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	d101      	bne.n	8005cdc <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005cd8:	3201      	adds	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8005cdc:	4770      	bx	lr
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	200003c4 	.word	0x200003c4

08005ce4 <SX1276OnDio3Irq>:
{
 8005ce4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <SX1276OnDio3Irq+0x4c>)
 8005ce8:	795c      	ldrb	r4, [r3, #5]
 8005cea:	2c01      	cmp	r4, #1
 8005cec:	d112      	bne.n	8005d14 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005cee:	2012      	movs	r0, #18
 8005cf0:	f7ff ff80 	bl	8005bf4 <SX1276Read>
 8005cf4:	0005      	movs	r5, r0
 8005cf6:	4e0f      	ldr	r6, [pc, #60]	; (8005d34 <SX1276OnDio3Irq+0x50>)
 8005cf8:	4025      	ands	r5, r4
 8005cfa:	4220      	tst	r0, r4
 8005cfc:	d00b      	beq.n	8005d16 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005cfe:	2105      	movs	r1, #5
 8005d00:	2012      	movs	r0, #18
 8005d02:	f7ff ff2c 	bl	8005b5e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d06:	6833      	ldr	r3, [r6, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <SX1276OnDio3Irq+0x30>
 8005d0c:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8005d0e:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <SX1276OnDio3Irq+0x48>
}
 8005d14:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005d16:	2104      	movs	r1, #4
 8005d18:	2012      	movs	r0, #18
 8005d1a:	f7ff ff20 	bl	8005b5e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d1e:	6833      	ldr	r3, [r6, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f7      	beq.n	8005d14 <SX1276OnDio3Irq+0x30>
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f4      	beq.n	8005d14 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 8005d2a:	0028      	movs	r0, r5
 8005d2c:	4798      	blx	r3
}
 8005d2e:	e7f1      	b.n	8005d14 <SX1276OnDio3Irq+0x30>
 8005d30:	200003c4 	.word	0x200003c4
 8005d34:	20000444 	.word	0x20000444

08005d38 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8005d3c:	2805      	cmp	r0, #5
 8005d3e:	d111      	bne.n	8005d64 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7fc fc83 	bl	800264c <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 8005d46:	2001      	movs	r0, #1
 8005d48:	f7fc fdf8 	bl	800293c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	f7ff ff51 	bl	8005bf4 <SX1276Read>
 8005d52:	2307      	movs	r3, #7
 8005d54:	0001      	movs	r1, r0
 8005d56:	4399      	bics	r1, r3
 8005d58:	4321      	orrs	r1, r4
 8005d5a:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f7ff fefe 	bl	8005b5e <SX1276Write>
}
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005d64:	2009      	movs	r0, #9
 8005d66:	f7ff ff45 	bl	8005bf4 <SX1276Read>
 8005d6a:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f7fc fc6d 	bl	800264c <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8005d72:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005d74:	062d      	lsls	r5, r5, #24
 8005d76:	d400      	bmi.n	8005d7a <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8005d78:	2002      	movs	r0, #2
 8005d7a:	f7fc fddf 	bl	800293c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7ff ff38 	bl	8005bf4 <SX1276Read>
 8005d84:	2307      	movs	r3, #7
 8005d86:	4398      	bics	r0, r3
 8005d88:	4304      	orrs	r4, r0
 8005d8a:	b2e1      	uxtb	r1, r4
 8005d8c:	e7e6      	b.n	8005d5c <SX1276SetOpMode.part.0+0x24>
	...

08005d90 <SX1276SetStby>:
{
 8005d90:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8005d92:	4c09      	ldr	r4, [pc, #36]	; (8005db8 <SX1276SetStby+0x28>)
 8005d94:	1d20      	adds	r0, r4, #4
 8005d96:	f004 f933 	bl	800a000 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8005d9a:	0020      	movs	r0, r4
 8005d9c:	301c      	adds	r0, #28
 8005d9e:	f004 f92f 	bl	800a000 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8005da2:	4c06      	ldr	r4, [pc, #24]	; (8005dbc <SX1276SetStby+0x2c>)
 8005da4:	0020      	movs	r0, r4
 8005da6:	3068      	adds	r0, #104	; 0x68
 8005da8:	f004 f92a 	bl	800a000 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 8005dac:	2001      	movs	r0, #1
 8005dae:	f7ff ffc3 	bl	8005d38 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	7123      	strb	r3, [r4, #4]
}
 8005db6:	bd10      	pop	{r4, pc}
 8005db8:	20000444 	.word	0x20000444
 8005dbc:	200003c4 	.word	0x200003c4

08005dc0 <SX1276SetRx>:
    TimerStop( &TxTimeoutTimer );
 8005dc0:	4b7b      	ldr	r3, [pc, #492]	; (8005fb0 <SX1276SetRx+0x1f0>)
{
 8005dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc4:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	301c      	adds	r0, #28
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	f004 f918 	bl	800a000 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8005dd0:	4c78      	ldr	r4, [pc, #480]	; (8005fb4 <SX1276SetRx+0x1f4>)
 8005dd2:	7965      	ldrb	r5, [r4, #5]
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d02f      	beq.n	8005e38 <SX1276SetRx+0x78>
 8005dd8:	2600      	movs	r6, #0
 8005dda:	2d01      	cmp	r5, #1
 8005ddc:	d151      	bne.n	8005e82 <SX1276SetRx+0xc2>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005dde:	0023      	movs	r3, r4
 8005de0:	3355      	adds	r3, #85	; 0x55
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005de6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d100      	bne.n	8005dee <SX1276SetRx+0x2e>
 8005dec:	e06f      	b.n	8005ece <SX1276SetRx+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005dee:	f7ff ff01 	bl	8005bf4 <SX1276Read>
 8005df2:	4330      	orrs	r0, r6
 8005df4:	b2c1      	uxtb	r1, r0
 8005df6:	2033      	movs	r0, #51	; 0x33
 8005df8:	f7ff feb1 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005dfc:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005dfe:	203b      	movs	r0, #59	; 0x3b
 8005e00:	f7ff fead 	bl	8005b5e <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005e04:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005e06:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d900      	bls.n	8005e0e <SX1276SetRx+0x4e>
 8005e0c:	e0b7      	b.n	8005f7e <SX1276SetRx+0x1be>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005e0e:	f7ff fef1 	bl	8005bf4 <SX1276Read>
 8005e12:	217f      	movs	r1, #127	; 0x7f
 8005e14:	4001      	ands	r1, r0
 8005e16:	2031      	movs	r0, #49	; 0x31
 8005e18:	f7ff fea1 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8005e1c:	2030      	movs	r0, #48	; 0x30
 8005e1e:	2100      	movs	r1, #0
 8005e20:	f7ff fe9d 	bl	8005b5e <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8005e24:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005e26:	2808      	cmp	r0, #8
 8005e28:	d864      	bhi.n	8005ef4 <SX1276SetRx+0x134>
 8005e2a:	f7fa f97f 	bl	800012c <__gnu_thumb1_case_uqi>
 8005e2e:	805a      	.short	0x805a
 8005e30:	9c958e87 	.word	0x9c958e87
 8005e34:	a3a3      	.short	0xa3a3
 8005e36:	a3          	.byte	0xa3
 8005e37:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005e38:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e3a:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005e3c:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e3e:	f7ff fed9 	bl	8005bf4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005e42:	2303      	movs	r3, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e44:	210c      	movs	r1, #12
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005e46:	4018      	ands	r0, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e48:	4301      	orrs	r1, r0
 8005e4a:	2040      	movs	r0, #64	; 0x40
 8005e4c:	f7ff fe87 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005e50:	2041      	movs	r0, #65	; 0x41
 8005e52:	f7ff fecf 	bl	8005bf4 <SX1276Read>
 8005e56:	213f      	movs	r1, #63	; 0x3f
 8005e58:	4249      	negs	r1, r1
 8005e5a:	4301      	orrs	r1, r0
 8005e5c:	b2c9      	uxtb	r1, r1
 8005e5e:	2041      	movs	r0, #65	; 0x41
 8005e60:	f7ff fe7d 	bl	8005b5e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005e64:	2035      	movs	r0, #53	; 0x35
 8005e66:	f7ff fec5 	bl	8005bf4 <SX1276Read>
 8005e6a:	233f      	movs	r3, #63	; 0x3f
 8005e6c:	4018      	ands	r0, r3
 8005e6e:	0023      	movs	r3, r4
 8005e70:	333e      	adds	r3, #62	; 0x3e
 8005e72:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8005e74:	211e      	movs	r1, #30
 8005e76:	200d      	movs	r0, #13
 8005e78:	f7ff fe71 	bl	8005b5e <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005e7c:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005e7e:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005e80:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	2100      	movs	r1, #0
 8005e86:	484c      	ldr	r0, [pc, #304]	; (8005fb8 <SX1276SetRx+0x1f8>)
 8005e88:	0052      	lsls	r2, r2, #1
 8005e8a:	f004 fdd5 	bl	800aa38 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	d008      	beq.n	8005ea8 <SX1276SetRx+0xe8>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005e96:	9d01      	ldr	r5, [sp, #4]
 8005e98:	0039      	movs	r1, r7
 8005e9a:	3504      	adds	r5, #4
 8005e9c:	0028      	movs	r0, r5
 8005e9e:	f004 f939 	bl	800a114 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	f004 f8fe 	bl	800a0a4 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8005ea8:	7963      	ldrb	r3, [r4, #5]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d000      	beq.n	8005eb0 <SX1276SetRx+0xf0>
 8005eae:	e077      	b.n	8005fa0 <SX1276SetRx+0x1e0>
    if( opMode == RF_OPMODE_SLEEP )
 8005eb0:	2005      	movs	r0, #5
 8005eb2:	f7ff ff41 	bl	8005d38 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	d108      	bne.n	8005ecc <SX1276SetRx+0x10c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8005eba:	0025      	movs	r5, r4
 8005ebc:	3568      	adds	r5, #104	; 0x68
 8005ebe:	0028      	movs	r0, r5
 8005ec0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ec2:	f004 f927 	bl	800a114 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8005ec6:	0028      	movs	r0, r5
 8005ec8:	f004 f8ec 	bl	800a0a4 <UTIL_TIMER_Start>
}
 8005ecc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8005ece:	f7ff fe91 	bl	8005bf4 <SX1276Read>
 8005ed2:	43b0      	bics	r0, r6
 8005ed4:	4305      	orrs	r5, r0
 8005ed6:	b2e9      	uxtb	r1, r5
 8005ed8:	2033      	movs	r0, #51	; 0x33
 8005eda:	f7ff fe40 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005ede:	211d      	movs	r1, #29
 8005ee0:	e78d      	b.n	8005dfe <SX1276SetRx+0x3e>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8005ee2:	202f      	movs	r0, #47	; 0x2f
 8005ee4:	2148      	movs	r1, #72	; 0x48
 8005ee6:	f7ff fe3a 	bl	8005b5e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8005eea:	68a0      	ldr	r0, [r4, #8]
 8005eec:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005eee:	18c0      	adds	r0, r0, r3
 8005ef0:	f7ff fe3e 	bl	8005b70 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8005ef4:	0023      	movs	r3, r4
 8005ef6:	3356      	adds	r3, #86	; 0x56
 8005ef8:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005efa:	0023      	movs	r3, r4
 8005efc:	3353      	adds	r3, #83	; 0x53
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d044      	beq.n	8005f8e <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f04:	211d      	movs	r1, #29
 8005f06:	2011      	movs	r0, #17
 8005f08:	f7ff fe29 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8005f0c:	2040      	movs	r0, #64	; 0x40
 8005f0e:	f7ff fe71 	bl	8005bf4 <SX1276Read>
 8005f12:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005f14:	4001      	ands	r1, r0
 8005f16:	2040      	movs	r0, #64	; 0x40
 8005f18:	f7ff fe21 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	200f      	movs	r0, #15
 8005f20:	f7ff fe1d 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8005f24:	2100      	movs	r1, #0
 8005f26:	200d      	movs	r0, #13
 8005f28:	f7ff fe19 	bl	8005b5e <SX1276Write>
        break;
 8005f2c:	e7a9      	b.n	8005e82 <SX1276SetRx+0xc2>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f2e:	202f      	movs	r0, #47	; 0x2f
 8005f30:	2144      	movs	r1, #68	; 0x44
 8005f32:	f7ff fe14 	bl	8005b5e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8005f36:	68a0      	ldr	r0, [r4, #8]
 8005f38:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <SX1276SetRx+0x200>)
 8005f3a:	e7d8      	b.n	8005eee <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f3c:	202f      	movs	r0, #47	; 0x2f
 8005f3e:	2144      	movs	r1, #68	; 0x44
 8005f40:	f7ff fe0d 	bl	8005b5e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8005f44:	68a0      	ldr	r0, [r4, #8]
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <SX1276SetRx+0x204>)
 8005f48:	e7d1      	b.n	8005eee <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f4a:	202f      	movs	r0, #47	; 0x2f
 8005f4c:	2144      	movs	r1, #68	; 0x44
 8005f4e:	f7ff fe06 	bl	8005b5e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8005f52:	68a0      	ldr	r0, [r4, #8]
 8005f54:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <SX1276SetRx+0x208>)
 8005f56:	e7ca      	b.n	8005eee <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f58:	202f      	movs	r0, #47	; 0x2f
 8005f5a:	2144      	movs	r1, #68	; 0x44
 8005f5c:	f7ff fdff 	bl	8005b5e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8005f60:	68a0      	ldr	r0, [r4, #8]
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <SX1276SetRx+0x20c>)
 8005f64:	e7c3      	b.n	8005eee <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f66:	202f      	movs	r0, #47	; 0x2f
 8005f68:	2144      	movs	r1, #68	; 0x44
 8005f6a:	f7ff fdf8 	bl	8005b5e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005f6e:	68a0      	ldr	r0, [r4, #8]
 8005f70:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <SX1276SetRx+0x210>)
 8005f72:	e7bc      	b.n	8005eee <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8005f78:	f7ff fdf1 	bl	8005b5e <SX1276Write>
 8005f7c:	e7ba      	b.n	8005ef4 <SX1276SetRx+0x134>
 8005f7e:	f7ff fe39 	bl	8005bf4 <SX1276Read>
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	4249      	negs	r1, r1
 8005f86:	4301      	orrs	r1, r0
 8005f88:	b2c9      	uxtb	r1, r1
 8005f8a:	2031      	movs	r0, #49	; 0x31
 8005f8c:	e7f4      	b.n	8005f78 <SX1276SetRx+0x1b8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f8e:	211f      	movs	r1, #31
 8005f90:	2011      	movs	r0, #17
 8005f92:	f7ff fde4 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005f96:	2040      	movs	r0, #64	; 0x40
 8005f98:	f7ff fe2c 	bl	8005bf4 <SX1276Read>
 8005f9c:	213f      	movs	r1, #63	; 0x3f
 8005f9e:	e7b9      	b.n	8005f14 <SX1276SetRx+0x154>
        if( rxContinuous == true )
 8005fa0:	2005      	movs	r0, #5
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d100      	bne.n	8005fa8 <SX1276SetRx+0x1e8>
    if( opMode == RF_OPMODE_SLEEP )
 8005fa6:	2006      	movs	r0, #6
 8005fa8:	f7ff fec6 	bl	8005d38 <SX1276SetOpMode.part.0>
}
 8005fac:	e78e      	b.n	8005ecc <SX1276SetRx+0x10c>
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	20000444 	.word	0x20000444
 8005fb4:	200003c4 	.word	0x200003c4
 8005fb8:	20000478 	.word	0x20000478
 8005fbc:	00001e82 	.word	0x00001e82
 8005fc0:	000028b4 	.word	0x000028b4
 8005fc4:	00003d04 	.word	0x00003d04
 8005fc8:	0000515e 	.word	0x0000515e
 8005fcc:	00007a12 	.word	0x00007a12
 8005fd0:	0000a2c6 	.word	0x0000a2c6

08005fd4 <SX1276StartCad>:
{
 8005fd4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005fd6:	4c0b      	ldr	r4, [pc, #44]	; (8006004 <SX1276StartCad+0x30>)
 8005fd8:	7963      	ldrb	r3, [r4, #5]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d110      	bne.n	8006000 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005fde:	21fa      	movs	r1, #250	; 0xfa
 8005fe0:	2011      	movs	r0, #17
 8005fe2:	f7ff fdbc 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8005fe6:	2040      	movs	r0, #64	; 0x40
 8005fe8:	f7ff fe04 	bl	8005bf4 <SX1276Read>
 8005fec:	2503      	movs	r5, #3
 8005fee:	43a8      	bics	r0, r5
 8005ff0:	b2c1      	uxtb	r1, r0
 8005ff2:	2040      	movs	r0, #64	; 0x40
 8005ff4:	f7ff fdb3 	bl	8005b5e <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8005ff8:	2007      	movs	r0, #7
 8005ffa:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 8005ffc:	f7ff fe9c 	bl	8005d38 <SX1276SetOpMode.part.0>
}
 8006000:	bd70      	pop	{r4, r5, r6, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	200003c4 	.word	0x200003c4

08006008 <SX1276ReadRssi>:
{
 8006008:	b510      	push	{r4, lr}
    switch( modem )
 800600a:	2800      	cmp	r0, #0
 800600c:	d004      	beq.n	8006018 <SX1276ReadRssi+0x10>
 800600e:	2801      	cmp	r0, #1
 8006010:	d00a      	beq.n	8006028 <SX1276ReadRssi+0x20>
 8006012:	2001      	movs	r0, #1
 8006014:	4240      	negs	r0, r0
}
 8006016:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006018:	2011      	movs	r0, #17
 800601a:	f7ff fdeb 	bl	8005bf4 <SX1276Read>
 800601e:	0840      	lsrs	r0, r0, #1
 8006020:	b2c0      	uxtb	r0, r0
 8006022:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006024:	b200      	sxth	r0, r0
 8006026:	e7f6      	b.n	8006016 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <SX1276ReadRssi+0x3c>)
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <SX1276ReadRssi+0x40>)
 800602c:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800602e:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006030:	4293      	cmp	r3, r2
 8006032:	d903      	bls.n	800603c <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006034:	f7ff fdde 	bl	8005bf4 <SX1276Read>
 8006038:	389d      	subs	r0, #157	; 0x9d
 800603a:	e7f3      	b.n	8006024 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800603c:	f7ff fdda 	bl	8005bf4 <SX1276Read>
 8006040:	38a4      	subs	r0, #164	; 0xa4
 8006042:	e7ef      	b.n	8006024 <SX1276ReadRssi+0x1c>
 8006044:	200003c4 	.word	0x200003c4
 8006048:	1f4add40 	.word	0x1f4add40

0800604c <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800604c:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800604e:	2001      	movs	r0, #1
 8006050:	f7ff fdd0 	bl	8005bf4 <SX1276Read>
 8006054:	21f8      	movs	r1, #248	; 0xf8
 8006056:	4001      	ands	r1, r0
 8006058:	2001      	movs	r0, #1
 800605a:	f7ff fd80 	bl	8005b5e <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800605e:	2000      	movs	r0, #0
 8006060:	f7fc fc6c 	bl	800293c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 8006064:	2000      	movs	r0, #0
 8006066:	f7fc faf1 	bl	800264c <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800606a:	bd10      	pop	{r4, pc}

0800606c <SX1276SetModem>:
{
 800606c:	b510      	push	{r4, lr}
 800606e:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8006070:	2001      	movs	r0, #1
 8006072:	f7ff fdbf 	bl	8005bf4 <SX1276Read>
 8006076:	b2c0      	uxtb	r0, r0
 8006078:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 800607a:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800607c:	42a0      	cmp	r0, r4
 800607e:	d101      	bne.n	8006084 <SX1276SetModem+0x18>
 8006080:	7158      	strb	r0, [r3, #5]
}
 8006082:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 8006084:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8006086:	2c01      	cmp	r4, #1
 8006088:	d012      	beq.n	80060b0 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800608a:	f7ff ffdf 	bl	800604c <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800608e:	2001      	movs	r0, #1
 8006090:	f7ff fdb0 	bl	8005bf4 <SX1276Read>
 8006094:	217f      	movs	r1, #127	; 0x7f
 8006096:	4001      	ands	r1, r0
 8006098:	2001      	movs	r0, #1
 800609a:	f7ff fd60 	bl	8005b5e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800609e:	2100      	movs	r1, #0
 80060a0:	2040      	movs	r0, #64	; 0x40
 80060a2:	f7ff fd5c 	bl	8005b5e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80060a6:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80060a8:	2041      	movs	r0, #65	; 0x41
 80060aa:	f7ff fd58 	bl	8005b5e <SX1276Write>
        break;
 80060ae:	e7e8      	b.n	8006082 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80060b0:	f7ff ffcc 	bl	800604c <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80060b4:	0020      	movs	r0, r4
 80060b6:	f7ff fd9d 	bl	8005bf4 <SX1276Read>
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	4249      	negs	r1, r1
 80060be:	4301      	orrs	r1, r0
 80060c0:	b2c9      	uxtb	r1, r1
 80060c2:	0020      	movs	r0, r4
 80060c4:	f7ff fd4b 	bl	8005b5e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80060c8:	2100      	movs	r1, #0
 80060ca:	2040      	movs	r0, #64	; 0x40
 80060cc:	f7ff fd47 	bl	8005b5e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80060d0:	2100      	movs	r1, #0
 80060d2:	e7e9      	b.n	80060a8 <SX1276SetModem+0x3c>
 80060d4:	200003c4 	.word	0x200003c4

080060d8 <SX1276SetMaxPayloadLength>:
{
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	0004      	movs	r4, r0
 80060dc:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80060de:	f7ff ffc5 	bl	800606c <SX1276SetModem>
    switch( modem )
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	d002      	beq.n	80060ec <SX1276SetMaxPayloadLength+0x14>
 80060e6:	2c01      	cmp	r4, #1
 80060e8:	d00a      	beq.n	8006100 <SX1276SetMaxPayloadLength+0x28>
}
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <SX1276SetMaxPayloadLength+0x30>)
 80060ee:	3303      	adds	r3, #3
 80060f0:	7fdb      	ldrb	r3, [r3, #31]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f9      	bne.n	80060ea <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80060f6:	0029      	movs	r1, r5
 80060f8:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80060fa:	f7ff fd30 	bl	8005b5e <SX1276Write>
}
 80060fe:	e7f4      	b.n	80060ea <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006100:	0029      	movs	r1, r5
 8006102:	2023      	movs	r0, #35	; 0x23
 8006104:	e7f9      	b.n	80060fa <SX1276SetMaxPayloadLength+0x22>
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	200003c4 	.word	0x200003c4

0800610c <SX1276SetPublicNetwork>:
{
 800610c:	b510      	push	{r4, lr}
 800610e:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8006110:	2001      	movs	r0, #1
 8006112:	f7ff ffab 	bl	800606c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006118:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800611a:	335c      	adds	r3, #92	; 0x5c
 800611c:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800611e:	2c00      	cmp	r4, #0
 8006120:	d100      	bne.n	8006124 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006122:	2112      	movs	r1, #18
 8006124:	2039      	movs	r0, #57	; 0x39
 8006126:	f7ff fd1a 	bl	8005b5e <SX1276Write>
}
 800612a:	bd10      	pop	{r4, pc}
 800612c:	200003c4 	.word	0x200003c4

08006130 <SX1276SetRxConfig>:
{
 8006130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006132:	b08b      	sub	sp, #44	; 0x2c
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	ab10      	add	r3, sp, #64	; 0x40
 8006138:	cb80      	ldmia	r3!, {r7}
 800613a:	0014      	movs	r4, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	aa0a      	add	r2, sp, #40	; 0x28
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	ab12      	add	r3, sp, #72	; 0x48
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	0005      	movs	r5, r0
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	ab13      	add	r3, sp, #76	; 0x4c
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	000e      	movs	r6, r1
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	ab14      	add	r3, sp, #80	; 0x50
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	9302      	str	r3, [sp, #8]
 8006158:	ab15      	add	r3, sp, #84	; 0x54
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	9303      	str	r3, [sp, #12]
 800615e:	ab16      	add	r3, sp, #88	; 0x58
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	9308      	str	r3, [sp, #32]
 8006164:	ab17      	add	r3, sp, #92	; 0x5c
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	9309      	str	r3, [sp, #36]	; 0x24
 800616a:	2319      	movs	r3, #25
 800616c:	189b      	adds	r3, r3, r2
 800616e:	7fdb      	ldrb	r3, [r3, #31]
 8006170:	9306      	str	r3, [sp, #24]
 8006172:	231d      	movs	r3, #29
 8006174:	189b      	adds	r3, r3, r2
 8006176:	7fdb      	ldrb	r3, [r3, #31]
 8006178:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 800617a:	f7ff ff77 	bl	800606c <SX1276SetModem>
    switch( modem )
 800617e:	2d00      	cmp	r5, #0
 8006180:	d003      	beq.n	800618a <SX1276SetRxConfig+0x5a>
 8006182:	2d01      	cmp	r5, #1
 8006184:	d067      	beq.n	8006256 <SX1276SetRxConfig+0x126>
}
 8006186:	b00b      	add	sp, #44	; 0x2c
 8006188:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800618a:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800618c:	4d99      	ldr	r5, [pc, #612]	; (80063f4 <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 800618e:	9a01      	ldr	r2, [sp, #4]
 8006190:	1ceb      	adds	r3, r5, #3
 8006192:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006194:	9a02      	ldr	r2, [sp, #8]
 8006196:	1d2b      	adds	r3, r5, #4
 8006198:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800619a:	9a03      	ldr	r2, [sp, #12]
 800619c:	1d6b      	adds	r3, r5, #5
 800619e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80061a0:	9a06      	ldr	r2, [sp, #24]
 80061a2:	1dab      	adds	r3, r5, #6
 80061a4:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80061a6:	9a07      	ldr	r2, [sp, #28]
 80061a8:	1deb      	adds	r3, r5, #7
 80061aa:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80061ac:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061ae:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80061b0:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061b2:	9b04      	ldr	r3, [sp, #16]
 80061b4:	0021      	movs	r1, r4
 80061b6:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 80061b8:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80061ba:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80061bc:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061be:	f7f9 ffc9 	bl	8000154 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80061c2:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061c4:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80061c6:	488c      	ldr	r0, [pc, #560]	; (80063f8 <SX1276SetRxConfig+0x2c8>)
 80061c8:	f7f9 ffc4 	bl	8000154 <__udivsi3>
 80061cc:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80061ce:	0a01      	lsrs	r1, r0, #8
 80061d0:	b2c9      	uxtb	r1, r1
 80061d2:	2002      	movs	r0, #2
 80061d4:	f7ff fcc3 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80061d8:	b2e1      	uxtb	r1, r4
 80061da:	2003      	movs	r0, #3
 80061dc:	f7ff fcbf 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80061e0:	0030      	movs	r0, r6
 80061e2:	f7ff fc17 	bl	8005a14 <GetFskBandwidthRegValue>
 80061e6:	0001      	movs	r1, r0
 80061e8:	2012      	movs	r0, #18
 80061ea:	f7ff fcb8 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80061ee:	0038      	movs	r0, r7
 80061f0:	f7ff fc10 	bl	8005a14 <GetFskBandwidthRegValue>
 80061f4:	0001      	movs	r1, r0
 80061f6:	2013      	movs	r0, #19
 80061f8:	f7ff fcb1 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	2025      	movs	r0, #37	; 0x25
 8006200:	0a19      	lsrs	r1, r3, #8
 8006202:	f7ff fcac 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006206:	466b      	mov	r3, sp
 8006208:	2026      	movs	r0, #38	; 0x26
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	f7ff fca7 	bl	8005b5e <SX1276Write>
            if( fixLen == 1 )
 8006210:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8006212:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 8006214:	2b00      	cmp	r3, #0
 8006216:	d100      	bne.n	800621a <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006218:	21ff      	movs	r1, #255	; 0xff
 800621a:	2032      	movs	r0, #50	; 0x32
 800621c:	f7ff fc9f 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006220:	2030      	movs	r0, #48	; 0x30
 8006222:	f7ff fce7 	bl	8005bf4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006226:	2101      	movs	r1, #1
 8006228:	9b01      	ldr	r3, [sp, #4]
 800622a:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 800622c:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800622e:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8006230:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006232:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006234:	236f      	movs	r3, #111	; 0x6f
 8006236:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006238:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800623a:	b2c9      	uxtb	r1, r1
 800623c:	2030      	movs	r0, #48	; 0x30
 800623e:	f7ff fc8e 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006242:	2031      	movs	r0, #49	; 0x31
 8006244:	f7ff fcd6 	bl	8005bf4 <SX1276Read>
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	4301      	orrs	r1, r0
 800624c:	2031      	movs	r0, #49	; 0x31
 800624e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006250:	f7ff fc85 	bl	8005b5e <SX1276Write>
}
 8006254:	e797      	b.n	8006186 <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 8006256:	2e02      	cmp	r6, #2
 8006258:	d900      	bls.n	800625c <SX1276SetRxConfig+0x12c>
                while( 1 );
 800625a:	e7fe      	b.n	800625a <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800625c:	4b65      	ldr	r3, [pc, #404]	; (80063f4 <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800625e:	9905      	ldr	r1, [sp, #20]
 8006260:	001a      	movs	r2, r3
 8006262:	324d      	adds	r2, #77	; 0x4d
 8006264:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006266:	001a      	movs	r2, r3
 8006268:	9900      	ldr	r1, [sp, #0]
 800626a:	324e      	adds	r2, #78	; 0x4e
 800626c:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800626e:	001a      	movs	r2, r3
 8006270:	9901      	ldr	r1, [sp, #4]
 8006272:	3250      	adds	r2, #80	; 0x50
 8006274:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8006276:	001a      	movs	r2, r3
 8006278:	9902      	ldr	r1, [sp, #8]
 800627a:	3251      	adds	r2, #81	; 0x51
 800627c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800627e:	001a      	movs	r2, r3
 8006280:	9903      	ldr	r1, [sp, #12]
 8006282:	3252      	adds	r2, #82	; 0x52
 8006284:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006286:	001a      	movs	r2, r3
 8006288:	9908      	ldr	r1, [sp, #32]
 800628a:	3253      	adds	r2, #83	; 0x53
 800628c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800628e:	001a      	movs	r2, r3
 8006290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006292:	3254      	adds	r2, #84	; 0x54
 8006294:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006296:	001a      	movs	r2, r3
 8006298:	9906      	ldr	r1, [sp, #24]
 800629a:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800629c:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800629e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80062a0:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80062a2:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80062a4:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80062a6:	3356      	adds	r3, #86	; 0x56
 80062a8:	0025      	movs	r5, r4
 80062aa:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 80062ac:	2c06      	cmp	r4, #6
 80062ae:	d300      	bcc.n	80062b2 <SX1276SetRxConfig+0x182>
 80062b0:	e081      	b.n	80063b6 <SX1276SetRxConfig+0x286>
 80062b2:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80062b4:	2f07      	cmp	r7, #7
 80062b6:	d000      	beq.n	80062ba <SX1276SetRxConfig+0x18a>
 80062b8:	e082      	b.n	80063c0 <SX1276SetRxConfig+0x290>
 80062ba:	002a      	movs	r2, r5
 80062bc:	2300      	movs	r3, #0
 80062be:	2101      	movs	r1, #1
 80062c0:	3a0b      	subs	r2, #11
 80062c2:	4291      	cmp	r1, r2
 80062c4:	415b      	adcs	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4a4c      	ldr	r2, [pc, #304]	; (80063fc <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062ca:	201d      	movs	r0, #29
 80062cc:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062ce:	4e49      	ldr	r6, [pc, #292]	; (80063f4 <SX1276SetRxConfig+0x2c4>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062d0:	f7ff fc90 	bl	8005bf4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062d4:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062d6:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062d8:	0059      	lsls	r1, r3, #1
 80062da:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062dc:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062de:	4319      	orrs	r1, r3
 80062e0:	013b      	lsls	r3, r7, #4
 80062e2:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062e4:	b2c9      	uxtb	r1, r1
 80062e6:	f7ff fc3a 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80062ea:	201e      	movs	r0, #30
 80062ec:	f7ff fc82 	bl	8005bf4 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062f0:	9b04      	ldr	r3, [sp, #16]
 80062f2:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062f4:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062f6:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062f8:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80062fa:	4319      	orrs	r1, r3
 80062fc:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80062fe:	2508      	movs	r5, #8
 8006300:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006302:	4301      	orrs	r1, r0
 8006304:	b2c9      	uxtb	r1, r1
 8006306:	201e      	movs	r0, #30
 8006308:	f7ff fc29 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800630c:	2026      	movs	r0, #38	; 0x26
 800630e:	f7ff fc71 	bl	8005bf4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006312:	4b3a      	ldr	r3, [pc, #232]	; (80063fc <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006314:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006316:	7819      	ldrb	r1, [r3, #0]
 8006318:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800631a:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800631c:	b2c9      	uxtb	r1, r1
 800631e:	2026      	movs	r0, #38	; 0x26
 8006320:	f7ff fc1d 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8006324:	466b      	mov	r3, sp
 8006326:	201f      	movs	r0, #31
 8006328:	7c19      	ldrb	r1, [r3, #16]
 800632a:	f7ff fc18 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800632e:	9b00      	ldr	r3, [sp, #0]
 8006330:	2020      	movs	r0, #32
 8006332:	0a19      	lsrs	r1, r3, #8
 8006334:	f7ff fc13 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006338:	466b      	mov	r3, sp
 800633a:	2021      	movs	r0, #33	; 0x21
 800633c:	7819      	ldrb	r1, [r3, #0]
 800633e:	f7ff fc0e 	bl	8005b5e <SX1276Write>
            if( fixLen == 1 )
 8006342:	9b01      	ldr	r3, [sp, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <SX1276SetRxConfig+0x220>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8006348:	2022      	movs	r0, #34	; 0x22
 800634a:	9902      	ldr	r1, [sp, #8]
 800634c:	f7ff fc07 	bl	8005b5e <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006350:	0033      	movs	r3, r6
 8006352:	3353      	adds	r3, #83	; 0x53
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00f      	beq.n	800637a <SX1276SetRxConfig+0x24a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800635a:	2044      	movs	r0, #68	; 0x44
 800635c:	f7ff fc4a 	bl	8005bf4 <SX1276Read>
 8006360:	2180      	movs	r1, #128	; 0x80
 8006362:	4249      	negs	r1, r1
 8006364:	4301      	orrs	r1, r0
 8006366:	b2c9      	uxtb	r1, r1
 8006368:	2044      	movs	r0, #68	; 0x44
 800636a:	f7ff fbf8 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800636e:	0033      	movs	r3, r6
 8006370:	3354      	adds	r3, #84	; 0x54
 8006372:	2024      	movs	r0, #36	; 0x24
 8006374:	7819      	ldrb	r1, [r3, #0]
 8006376:	f7ff fbf2 	bl	8005b5e <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800637a:	2f09      	cmp	r7, #9
 800637c:	d12c      	bne.n	80063d8 <SX1276SetRxConfig+0x2a8>
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <SX1276SetRxConfig+0x2d0>)
 8006380:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006382:	2102      	movs	r1, #2
 8006384:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006386:	429a      	cmp	r2, r3
 8006388:	d922      	bls.n	80063d0 <SX1276SetRxConfig+0x2a0>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800638a:	f7ff fbe8 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800638e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006390:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8006392:	f7ff fbe4 	bl	8005b5e <SX1276Write>
            if( datarate == 6 )
 8006396:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006398:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800639a:	2c06      	cmp	r4, #6
 800639c:	d81f      	bhi.n	80063de <SX1276SetRxConfig+0x2ae>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800639e:	f7ff fc29 	bl	8005bf4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063a2:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063a4:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063a6:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063a8:	b2c9      	uxtb	r1, r1
 80063aa:	2031      	movs	r0, #49	; 0x31
 80063ac:	f7ff fbd7 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063b0:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063b2:	2037      	movs	r0, #55	; 0x37
 80063b4:	e74c      	b.n	8006250 <SX1276SetRxConfig+0x120>
 80063b6:	2c0c      	cmp	r4, #12
 80063b8:	d800      	bhi.n	80063bc <SX1276SetRxConfig+0x28c>
 80063ba:	e77b      	b.n	80062b4 <SX1276SetRxConfig+0x184>
 80063bc:	250c      	movs	r5, #12
 80063be:	e779      	b.n	80062b4 <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80063c0:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80063c2:	2f08      	cmp	r7, #8
 80063c4:	d180      	bne.n	80062c8 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80063c6:	330b      	adds	r3, #11
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	419b      	sbcs	r3, r3
 80063cc:	425b      	negs	r3, r3
 80063ce:	e77b      	b.n	80062c8 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80063d0:	f7ff fbc5 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80063d4:	217f      	movs	r1, #127	; 0x7f
 80063d6:	e7db      	b.n	8006390 <SX1276SetRxConfig+0x260>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80063d8:	2103      	movs	r1, #3
 80063da:	2036      	movs	r0, #54	; 0x36
 80063dc:	e7d9      	b.n	8006392 <SX1276SetRxConfig+0x262>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063de:	f7ff fc09 	bl	8005bf4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063e2:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063e4:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063e6:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063e8:	b2c9      	uxtb	r1, r1
 80063ea:	2031      	movs	r0, #49	; 0x31
 80063ec:	f7ff fbb7 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063f0:	210a      	movs	r1, #10
 80063f2:	e7de      	b.n	80063b2 <SX1276SetRxConfig+0x282>
 80063f4:	200003c4 	.word	0x200003c4
 80063f8:	01e84800 	.word	0x01e84800
 80063fc:	20000410 	.word	0x20000410
 8006400:	1f4add40 	.word	0x1f4add40

08006404 <SX1276SetSleep>:
{
 8006404:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8006406:	4c0a      	ldr	r4, [pc, #40]	; (8006430 <SX1276SetSleep+0x2c>)
 8006408:	1d20      	adds	r0, r4, #4
 800640a:	f003 fdf9 	bl	800a000 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800640e:	0020      	movs	r0, r4
 8006410:	301c      	adds	r0, #28
 8006412:	f003 fdf5 	bl	800a000 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8006416:	4c07      	ldr	r4, [pc, #28]	; (8006434 <SX1276SetSleep+0x30>)
 8006418:	0020      	movs	r0, r4
 800641a:	3068      	adds	r0, #104	; 0x68
 800641c:	f003 fdf0 	bl	800a000 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006420:	f7ff fe14 	bl	800604c <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 8006424:	2000      	movs	r0, #0
 8006426:	f7fc f911 	bl	800264c <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800642a:	2300      	movs	r3, #0
 800642c:	7123      	strb	r3, [r4, #4]
}
 800642e:	bd10      	pop	{r4, pc}
 8006430:	20000444 	.word	0x20000444
 8006434:	200003c4 	.word	0x200003c4

08006438 <SX1276IsChannelFree>:
{
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	0007      	movs	r7, r0
 800643c:	000c      	movs	r4, r1
 800643e:	0016      	movs	r6, r2
 8006440:	001d      	movs	r5, r3
    SX1276SetSleep( );
 8006442:	f7ff ffdf 	bl	8006404 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8006446:	2000      	movs	r0, #0
 8006448:	f7ff fe10 	bl	800606c <SX1276SetModem>
    SX1276SetChannel( freq );
 800644c:	0038      	movs	r0, r7
 800644e:	f7ff fb8f 	bl	8005b70 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8006452:	0020      	movs	r0, r4
 8006454:	f7ff fade 	bl	8005a14 <GetFskBandwidthRegValue>
 8006458:	0004      	movs	r4, r0
 800645a:	0001      	movs	r1, r0
 800645c:	2012      	movs	r0, #18
 800645e:	f7ff fb7e 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8006462:	0021      	movs	r1, r4
 8006464:	2013      	movs	r0, #19
 8006466:	f7ff fb7a 	bl	8005b5e <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800646a:	2005      	movs	r0, #5
 800646c:	f7ff fc64 	bl	8005d38 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8006470:	2001      	movs	r0, #1
 8006472:	f7fc fb4f 	bl	8002b14 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8006476:	f003 fd81 	bl	8009f7c <UTIL_TIMER_GetCurrentTime>
 800647a:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800647c:	0020      	movs	r0, r4
 800647e:	f003 fd87 	bl	8009f90 <UTIL_TIMER_GetElapsedTime>
 8006482:	42a8      	cmp	r0, r5
 8006484:	d304      	bcc.n	8006490 <SX1276IsChannelFree+0x58>
    bool status = true;
 8006486:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8006488:	f7ff ffbc 	bl	8006404 <SX1276SetSleep>
}
 800648c:	0020      	movs	r0, r4
 800648e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8006490:	2000      	movs	r0, #0
 8006492:	f7ff fdb9 	bl	8006008 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8006496:	42b0      	cmp	r0, r6
 8006498:	ddf0      	ble.n	800647c <SX1276IsChannelFree+0x44>
            status = false;
 800649a:	2400      	movs	r4, #0
 800649c:	e7f4      	b.n	8006488 <SX1276IsChannelFree+0x50>

0800649e <SX1276Random>:
{
 800649e:	b570      	push	{r4, r5, r6, lr}
 80064a0:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 80064a2:	2001      	movs	r0, #1
 80064a4:	f7ff fde2 	bl	800606c <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80064a8:	21ff      	movs	r1, #255	; 0xff
 80064aa:	2011      	movs	r0, #17
 80064ac:	f7ff fb57 	bl	8005b5e <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 80064b0:	2005      	movs	r0, #5
 80064b2:	f7ff fc41 	bl	8005d38 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 80064b6:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 80064b8:	2601      	movs	r6, #1
 80064ba:	0030      	movs	r0, r6
 80064bc:	f7fc fb2a 	bl	8002b14 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80064c0:	202c      	movs	r0, #44	; 0x2c
 80064c2:	f7ff fb97 	bl	8005bf4 <SX1276Read>
 80064c6:	4030      	ands	r0, r6
 80064c8:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 80064ca:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80064cc:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80064ce:	2c20      	cmp	r4, #32
 80064d0:	d1f3      	bne.n	80064ba <SX1276Random+0x1c>
    SX1276SetSleep( );
 80064d2:	f7ff ff97 	bl	8006404 <SX1276SetSleep>
}
 80064d6:	0028      	movs	r0, r5
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080064dc <SX1276SetTxConfig>:
{
 80064dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064de:	b08d      	sub	sp, #52	; 0x34
 80064e0:	9306      	str	r3, [sp, #24]
 80064e2:	ab12      	add	r3, sp, #72	; 0x48
 80064e4:	cb40      	ldmia	r3!, {r6}
 80064e6:	9002      	str	r0, [sp, #8]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	9205      	str	r2, [sp, #20]
 80064ec:	9307      	str	r3, [sp, #28]
 80064ee:	ab14      	add	r3, sp, #80	; 0x50
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	000c      	movs	r4, r1
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	ab15      	add	r3, sp, #84	; 0x54
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	ab16      	add	r3, sp, #88	; 0x58
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	ab17      	add	r3, sp, #92	; 0x5c
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	9308      	str	r3, [sp, #32]
 8006508:	ab18      	add	r3, sp, #96	; 0x60
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	930a      	str	r3, [sp, #40]	; 0x28
 800650e:	ab19      	add	r3, sp, #100	; 0x64
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8006514:	4bb8      	ldr	r3, [pc, #736]	; (80067f8 <SX1276SetTxConfig+0x31c>)
 8006516:	791d      	ldrb	r5, [r3, #4]
 8006518:	2d01      	cmp	r5, #1
 800651a:	d106      	bne.n	800652a <SX1276SetTxConfig+0x4e>
 800651c:	2800      	cmp	r0, #0
 800651e:	d104      	bne.n	800652a <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8006520:	f7ff ff70 	bl	8006404 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8006524:	0028      	movs	r0, r5
 8006526:	f7fc faf5 	bl	8002b14 <HAL_Delay>
    SX1276SetModem( modem );
 800652a:	9802      	ldr	r0, [sp, #8]
 800652c:	f7ff fd9e 	bl	800606c <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8006530:	2009      	movs	r0, #9
 8006532:	f7ff fb5f 	bl	8005bf4 <SX1276Read>
 8006536:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 8006538:	204d      	movs	r0, #77	; 0x4d
 800653a:	f7ff fb5b 	bl	8005bf4 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800653e:	4bae      	ldr	r3, [pc, #696]	; (80067f8 <SX1276SetTxConfig+0x31c>)
    paDac = SX1276Read( REG_PADAC );
 8006540:	0007      	movs	r7, r0
 8006542:	0005      	movs	r5, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8006544:	6898      	ldr	r0, [r3, #8]
 8006546:	f7fc f9f7 	bl	8002938 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800654a:	2800      	cmp	r0, #0
 800654c:	d02c      	beq.n	80065a8 <SX1276SetTxConfig+0xcc>
 800654e:	2300      	movs	r3, #0
 8006550:	2201      	movs	r2, #1
 8006552:	3802      	subs	r0, #2
 8006554:	b2c0      	uxtb	r0, r0
 8006556:	4282      	cmp	r2, r0
 8006558:	415b      	adcs	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800655a:	217f      	movs	r1, #127	; 0x7f
 800655c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if (power > 14)
 800655e:	01db      	lsls	r3, r3, #7
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8006560:	400a      	ands	r2, r1
 8006562:	0011      	movs	r1, r2
        if (power > 14)
 8006564:	b2db      	uxtb	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8006566:	4319      	orrs	r1, r3
 8006568:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800656a:	2900      	cmp	r1, #0
 800656c:	da2b      	bge.n	80065c6 <SX1276SetTxConfig+0xea>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800656e:	23f0      	movs	r3, #240	; 0xf0
 8006570:	2507      	movs	r5, #7
 8006572:	4019      	ands	r1, r3
        if( power > 17 )
 8006574:	2c11      	cmp	r4, #17
 8006576:	dd1c      	ble.n	80065b2 <SX1276SetTxConfig+0xd6>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006578:	433d      	orrs	r5, r7
 800657a:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800657c:	1c23      	adds	r3, r4, #0
 800657e:	2c14      	cmp	r4, #20
 8006580:	dd00      	ble.n	8006584 <SX1276SetTxConfig+0xa8>
 8006582:	2314      	movs	r3, #20
 8006584:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8006586:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 8006588:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800658a:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800658c:	f7ff fae7 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8006590:	0029      	movs	r1, r5
 8006592:	204d      	movs	r0, #77	; 0x4d
 8006594:	f7ff fae3 	bl	8005b5e <SX1276Write>
    switch( modem )
 8006598:	9b02      	ldr	r3, [sp, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d022      	beq.n	80065e4 <SX1276SetTxConfig+0x108>
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d100      	bne.n	80065a4 <SX1276SetTxConfig+0xc8>
 80065a2:	e080      	b.n	80066a6 <SX1276SetTxConfig+0x1ca>
}
 80065a4:	b00d      	add	sp, #52	; 0x34
 80065a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 80065a8:	2301      	movs	r3, #1
 80065aa:	2c0e      	cmp	r4, #14
 80065ac:	dcd5      	bgt.n	800655a <SX1276SetTxConfig+0x7e>
 80065ae:	1c03      	adds	r3, r0, #0
 80065b0:	e7d3      	b.n	800655a <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80065b2:	43af      	bics	r7, r5
 80065b4:	2504      	movs	r5, #4
 80065b6:	433d      	orrs	r5, r7
 80065b8:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80065ba:	1c23      	adds	r3, r4, #0
 80065bc:	2c02      	cmp	r4, #2
 80065be:	da00      	bge.n	80065c2 <SX1276SetTxConfig+0xe6>
 80065c0:	2302      	movs	r3, #2
 80065c2:	3b02      	subs	r3, #2
 80065c4:	e7df      	b.n	8006586 <SX1276SetTxConfig+0xaa>
        if( power > 0 )
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	dd05      	ble.n	80065d6 <SX1276SetTxConfig+0xfa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80065ca:	1c23      	adds	r3, r4, #0
 80065cc:	2c0f      	cmp	r4, #15
 80065ce:	dd00      	ble.n	80065d2 <SX1276SetTxConfig+0xf6>
 80065d0:	230f      	movs	r3, #15
 80065d2:	2170      	movs	r1, #112	; 0x70
 80065d4:	e7d7      	b.n	8006586 <SX1276SetTxConfig+0xaa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80065d6:	1c21      	adds	r1, r4, #0
 80065d8:	1d23      	adds	r3, r4, #4
 80065da:	da01      	bge.n	80065e0 <SX1276SetTxConfig+0x104>
 80065dc:	4b87      	ldr	r3, [pc, #540]	; (80067fc <SX1276SetTxConfig+0x320>)
 80065de:	7819      	ldrb	r1, [r3, #0]
 80065e0:	3104      	adds	r1, #4
 80065e2:	e7d1      	b.n	8006588 <SX1276SetTxConfig+0xac>
            SX1276.Settings.Fsk.Power = power;
 80065e4:	4b84      	ldr	r3, [pc, #528]	; (80067f8 <SX1276SetTxConfig+0x31c>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80065e6:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80065e8:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80065ea:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80065ec:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.Power = power;
 80065ee:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80065f0:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80065f2:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80065f4:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80065f6:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80065f8:	1cda      	adds	r2, r3, #3
 80065fa:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80065fc:	9904      	ldr	r1, [sp, #16]
 80065fe:	1d5a      	adds	r2, r3, #5
 8006600:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006604:	1d9a      	adds	r2, r3, #6
 8006606:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006608:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800660a:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800660c:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800660e:	497c      	ldr	r1, [pc, #496]	; (8006800 <SX1276SetTxConfig+0x324>)
 8006610:	f7f9 fe26 	bl	8000260 <__aeabi_uidivmod>
 8006614:	4b7b      	ldr	r3, [pc, #492]	; (8006804 <SX1276SetTxConfig+0x328>)
 8006616:	0208      	lsls	r0, r1, #8
 8006618:	18c0      	adds	r0, r0, r3
 800661a:	4979      	ldr	r1, [pc, #484]	; (8006800 <SX1276SetTxConfig+0x324>)
 800661c:	f7f9 fd9a 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006620:	4977      	ldr	r1, [pc, #476]	; (8006800 <SX1276SetTxConfig+0x324>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006622:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006624:	9805      	ldr	r0, [sp, #20]
 8006626:	f7f9 fd95 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800662a:	0200      	lsls	r0, r0, #8
 800662c:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800662e:	0a21      	lsrs	r1, r4, #8
 8006630:	2004      	movs	r0, #4
 8006632:	b2c9      	uxtb	r1, r1
 8006634:	f7ff fa93 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8006638:	b2e1      	uxtb	r1, r4
 800663a:	2005      	movs	r0, #5
 800663c:	f7ff fa8f 	bl	8005b5e <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006640:	0031      	movs	r1, r6
 8006642:	4871      	ldr	r0, [pc, #452]	; (8006808 <SX1276SetTxConfig+0x32c>)
 8006644:	f7f9 fd86 	bl	8000154 <__udivsi3>
 8006648:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800664a:	0a01      	lsrs	r1, r0, #8
 800664c:	b2c9      	uxtb	r1, r1
 800664e:	2002      	movs	r0, #2
 8006650:	f7ff fa85 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8006654:	2003      	movs	r0, #3
 8006656:	b2e1      	uxtb	r1, r4
 8006658:	f7ff fa81 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800665c:	9b01      	ldr	r3, [sp, #4]
 800665e:	2025      	movs	r0, #37	; 0x25
 8006660:	0a19      	lsrs	r1, r3, #8
 8006662:	f7ff fa7c 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8006666:	466b      	mov	r3, sp
 8006668:	2026      	movs	r0, #38	; 0x26
 800666a:	7919      	ldrb	r1, [r3, #4]
 800666c:	f7ff fa77 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006670:	2030      	movs	r0, #48	; 0x30
 8006672:	f7ff fabf 	bl	8005bf4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006676:	2101      	movs	r1, #1
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 800667c:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800667e:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8006680:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006682:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006684:	236f      	movs	r3, #111	; 0x6f
 8006686:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006688:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800668a:	b2c9      	uxtb	r1, r1
 800668c:	2030      	movs	r0, #48	; 0x30
 800668e:	f7ff fa66 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006692:	2031      	movs	r0, #49	; 0x31
 8006694:	f7ff faae 	bl	8005bf4 <SX1276Read>
 8006698:	2140      	movs	r1, #64	; 0x40
 800669a:	4301      	orrs	r1, r0
 800669c:	2031      	movs	r0, #49	; 0x31
 800669e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80066a0:	f7ff fa5d 	bl	8005b5e <SX1276Write>
}
 80066a4:	e77e      	b.n	80065a4 <SX1276SetTxConfig+0xc8>
            SX1276.Settings.LoRa.Power = power;
 80066a6:	4b54      	ldr	r3, [pc, #336]	; (80067f8 <SX1276SetTxConfig+0x31c>)
 80066a8:	001a      	movs	r2, r3
 80066aa:	3240      	adds	r2, #64	; 0x40
 80066ac:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 80066ae:	9a06      	ldr	r2, [sp, #24]
 80066b0:	2a02      	cmp	r2, #2
 80066b2:	d900      	bls.n	80066b6 <SX1276SetTxConfig+0x1da>
                while( 1 );
 80066b4:	e7fe      	b.n	80066b4 <SX1276SetTxConfig+0x1d8>
            SX1276.Settings.LoRa.Coderate = coderate;
 80066b6:	001a      	movs	r2, r3
 80066b8:	9907      	ldr	r1, [sp, #28]
 80066ba:	324d      	adds	r2, #77	; 0x4d
 80066bc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80066be:	001a      	movs	r2, r3
 80066c0:	9901      	ldr	r1, [sp, #4]
 80066c2:	324e      	adds	r2, #78	; 0x4e
 80066c4:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80066c6:	001a      	movs	r2, r3
 80066c8:	9903      	ldr	r1, [sp, #12]
 80066ca:	3250      	adds	r2, #80	; 0x50
 80066cc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80066ce:	001a      	movs	r2, r3
 80066d0:	9908      	ldr	r1, [sp, #32]
 80066d2:	3253      	adds	r2, #83	; 0x53
 80066d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80066d6:	001a      	movs	r2, r3
 80066d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066da:	3254      	adds	r2, #84	; 0x54
 80066dc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80066de:	001a      	movs	r2, r3
 80066e0:	9904      	ldr	r1, [sp, #16]
 80066e2:	3252      	adds	r2, #82	; 0x52
 80066e4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80066e6:	001a      	movs	r2, r3
 80066e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ea:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80066ec:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80066ee:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80066f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 80066f2:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80066f4:	0034      	movs	r4, r6
 80066f6:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80066f8:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80066fa:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 80066fc:	2e06      	cmp	r6, #6
 80066fe:	d263      	bcs.n	80067c8 <SX1276SetTxConfig+0x2ec>
 8006700:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006702:	2d07      	cmp	r5, #7
 8006704:	d164      	bne.n	80067d0 <SX1276SetTxConfig+0x2f4>
 8006706:	0022      	movs	r2, r4
 8006708:	2300      	movs	r3, #0
 800670a:	2101      	movs	r1, #1
 800670c:	3a0b      	subs	r2, #11
 800670e:	4291      	cmp	r1, r2
 8006710:	415b      	adcs	r3, r3
 8006712:	b2db      	uxtb	r3, r3
 8006714:	4f38      	ldr	r7, [pc, #224]	; (80067f8 <SX1276SetTxConfig+0x31c>)
 8006716:	003a      	movs	r2, r7
 8006718:	324c      	adds	r2, #76	; 0x4c
 800671a:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00f      	beq.n	8006742 <SX1276SetTxConfig+0x266>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006722:	2044      	movs	r0, #68	; 0x44
 8006724:	f7ff fa66 	bl	8005bf4 <SX1276Read>
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	4249      	negs	r1, r1
 800672c:	4301      	orrs	r1, r0
 800672e:	b2c9      	uxtb	r1, r1
 8006730:	2044      	movs	r0, #68	; 0x44
 8006732:	f7ff fa14 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006736:	003b      	movs	r3, r7
 8006738:	3354      	adds	r3, #84	; 0x54
 800673a:	2024      	movs	r0, #36	; 0x24
 800673c:	7819      	ldrb	r1, [r3, #0]
 800673e:	f7ff fa0e 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006742:	201d      	movs	r0, #29
 8006744:	f7ff fa56 	bl	8005bf4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006748:	9b07      	ldr	r3, [sp, #28]
 800674a:	012d      	lsls	r5, r5, #4
 800674c:	0059      	lsls	r1, r3, #1
 800674e:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006750:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006752:	430b      	orrs	r3, r1
 8006754:	0019      	movs	r1, r3
 8006756:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006758:	b2c9      	uxtb	r1, r1
 800675a:	f7ff fa00 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800675e:	201e      	movs	r0, #30
 8006760:	f7ff fa48 	bl	8005bf4 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	0124      	lsls	r4, r4, #4
 8006768:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800676a:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800676c:	230b      	movs	r3, #11
 800676e:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006770:	4304      	orrs	r4, r0
 8006772:	b2e1      	uxtb	r1, r4
 8006774:	201e      	movs	r0, #30
 8006776:	f7ff f9f2 	bl	8005b5e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800677a:	2026      	movs	r0, #38	; 0x26
 800677c:	f7ff fa3a 	bl	8005bf4 <SX1276Read>
 8006780:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006782:	374c      	adds	r7, #76	; 0x4c
 8006784:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006786:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006788:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800678a:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800678c:	b2c9      	uxtb	r1, r1
 800678e:	2026      	movs	r0, #38	; 0x26
 8006790:	f7ff f9e5 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	2020      	movs	r0, #32
 8006798:	0a19      	lsrs	r1, r3, #8
 800679a:	f7ff f9e0 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800679e:	466b      	mov	r3, sp
 80067a0:	2021      	movs	r0, #33	; 0x21
 80067a2:	7919      	ldrb	r1, [r3, #4]
 80067a4:	f7ff f9db 	bl	8005b5e <SX1276Write>
            if( datarate == 6 )
 80067a8:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067aa:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80067ac:	2e06      	cmp	r6, #6
 80067ae:	d817      	bhi.n	80067e0 <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067b0:	f7ff fa20 	bl	8005bf4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067b4:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067b6:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067b8:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80067ba:	b2c9      	uxtb	r1, r1
 80067bc:	2031      	movs	r0, #49	; 0x31
 80067be:	f7ff f9ce 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067c2:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067c4:	2037      	movs	r0, #55	; 0x37
 80067c6:	e76b      	b.n	80066a0 <SX1276SetTxConfig+0x1c4>
 80067c8:	2e0c      	cmp	r6, #12
 80067ca:	d99a      	bls.n	8006702 <SX1276SetTxConfig+0x226>
 80067cc:	240c      	movs	r4, #12
 80067ce:	e798      	b.n	8006702 <SX1276SetTxConfig+0x226>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80067d0:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80067d2:	2d08      	cmp	r5, #8
 80067d4:	d19e      	bne.n	8006714 <SX1276SetTxConfig+0x238>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80067d6:	330b      	adds	r3, #11
 80067d8:	42b3      	cmp	r3, r6
 80067da:	419b      	sbcs	r3, r3
 80067dc:	425b      	negs	r3, r3
 80067de:	e799      	b.n	8006714 <SX1276SetTxConfig+0x238>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067e0:	f7ff fa08 	bl	8005bf4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067e4:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067e6:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067e8:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80067ea:	b2c9      	uxtb	r1, r1
 80067ec:	2031      	movs	r0, #49	; 0x31
 80067ee:	f7ff f9b6 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067f2:	210a      	movs	r1, #10
 80067f4:	e7e6      	b.n	80067c4 <SX1276SetTxConfig+0x2e8>
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	200003c4 	.word	0x200003c4
 80067fc:	0800b771 	.word	0x0800b771
 8006800:	00003d09 	.word	0x00003d09
 8006804:	00001e84 	.word	0x00001e84
 8006808:	01e84800 	.word	0x01e84800

0800680c <SX1276SetTxContinuousWave>:
{
 800680c:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800680e:	24fa      	movs	r4, #250	; 0xfa
{
 8006810:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 8006812:	00a4      	lsls	r4, r4, #2
 8006814:	4354      	muls	r4, r2
{
 8006816:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8006818:	f7ff f9aa 	bl	8005b70 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800681c:	2305      	movs	r3, #5
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	2396      	movs	r3, #150	; 0x96
 8006822:	2000      	movs	r0, #0
 8006824:	015b      	lsls	r3, r3, #5
 8006826:	0002      	movs	r2, r0
 8006828:	0029      	movs	r1, r5
 800682a:	9007      	str	r0, [sp, #28]
 800682c:	9006      	str	r0, [sp, #24]
 800682e:	9005      	str	r0, [sp, #20]
 8006830:	9004      	str	r0, [sp, #16]
 8006832:	9003      	str	r0, [sp, #12]
 8006834:	9001      	str	r0, [sp, #4]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	9408      	str	r4, [sp, #32]
 800683a:	0003      	movs	r3, r0
 800683c:	f7ff fe4e 	bl	80064dc <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006840:	2031      	movs	r0, #49	; 0x31
 8006842:	f7ff f9d7 	bl	8005bf4 <SX1276Read>
 8006846:	2540      	movs	r5, #64	; 0x40
 8006848:	43a8      	bics	r0, r5
 800684a:	b2c1      	uxtb	r1, r0
 800684c:	2031      	movs	r0, #49	; 0x31
 800684e:	f7ff f986 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006852:	0028      	movs	r0, r5
 8006854:	21f0      	movs	r1, #240	; 0xf0
 8006856:	f7ff f982 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800685a:	21a0      	movs	r1, #160	; 0xa0
 800685c:	2041      	movs	r0, #65	; 0x41
 800685e:	f7ff f97e 	bl	8005b5e <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006862:	4d08      	ldr	r5, [pc, #32]	; (8006884 <SX1276SetTxContinuousWave+0x78>)
 8006864:	0021      	movs	r1, r4
 8006866:	351c      	adds	r5, #28
 8006868:	0028      	movs	r0, r5
 800686a:	f003 fc53 	bl	800a114 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800686e:	2202      	movs	r2, #2
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 8006872:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8006874:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006876:	f003 fc15 	bl	800a0a4 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800687a:	2003      	movs	r0, #3
 800687c:	f7ff fa5c 	bl	8005d38 <SX1276SetOpMode.part.0>
}
 8006880:	b00b      	add	sp, #44	; 0x2c
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	20000444 	.word	0x20000444
 8006888:	200003c4 	.word	0x200003c4

0800688c <RxChainCalibration>:
{
 800688c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800688e:	2009      	movs	r0, #9
 8006890:	f7ff f9b0 	bl	8005bf4 <SX1276Read>
 8006894:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006896:	2006      	movs	r0, #6
 8006898:	f7ff f9ac 	bl	8005bf4 <SX1276Read>
 800689c:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800689e:	2007      	movs	r0, #7
 80068a0:	f7ff f9a8 	bl	8005bf4 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80068a4:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80068a6:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80068a8:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80068aa:	2008      	movs	r0, #8
 80068ac:	f7ff f9a2 	bl	8005bf4 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80068b2:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80068b4:	b2c0      	uxtb	r0, r0
 80068b6:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80068b8:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80068ba:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80068bc:	3080      	adds	r0, #128	; 0x80
 80068be:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80068c0:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80068c2:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 80068c4:	2009      	movs	r0, #9
 80068c6:	f7ff f94a 	bl	8005b5e <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80068ca:	203b      	movs	r0, #59	; 0x3b
 80068cc:	f7ff f992 	bl	8005bf4 <SX1276Read>
 80068d0:	2140      	movs	r1, #64	; 0x40
 80068d2:	4301      	orrs	r1, r0
 80068d4:	b2c9      	uxtb	r1, r1
 80068d6:	203b      	movs	r0, #59	; 0x3b
 80068d8:	f7ff f941 	bl	8005b5e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80068dc:	2620      	movs	r6, #32
 80068de:	203b      	movs	r0, #59	; 0x3b
 80068e0:	f7ff f988 	bl	8005bf4 <SX1276Read>
 80068e4:	4230      	tst	r0, r6
 80068e6:	d1fa      	bne.n	80068de <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80068e8:	480d      	ldr	r0, [pc, #52]	; (8006920 <RxChainCalibration+0x94>)
 80068ea:	f7ff f941 	bl	8005b70 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80068ee:	203b      	movs	r0, #59	; 0x3b
 80068f0:	f7ff f980 	bl	8005bf4 <SX1276Read>
 80068f4:	2140      	movs	r1, #64	; 0x40
 80068f6:	4301      	orrs	r1, r0
 80068f8:	b2c9      	uxtb	r1, r1
 80068fa:	203b      	movs	r0, #59	; 0x3b
 80068fc:	f7ff f92f 	bl	8005b5e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006900:	2620      	movs	r6, #32
 8006902:	203b      	movs	r0, #59	; 0x3b
 8006904:	f7ff f976 	bl	8005bf4 <SX1276Read>
 8006908:	4230      	tst	r0, r6
 800690a:	d1fa      	bne.n	8006902 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800690c:	0029      	movs	r1, r5
 800690e:	2009      	movs	r0, #9
 8006910:	f7ff f925 	bl	8005b5e <SX1276Write>
    SX1276SetChannel( initialFreq );
 8006914:	0020      	movs	r0, r4
 8006916:	f7ff f92b 	bl	8005b70 <SX1276SetChannel>
}
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	00003d09 	.word	0x00003d09
 8006920:	33bca100 	.word	0x33bca100

08006924 <SX1276Init>:
{
 8006924:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 8006926:	4e21      	ldr	r6, [pc, #132]	; (80069ac <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006928:	2400      	movs	r4, #0
    RadioEvents = events;
 800692a:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800692c:	2101      	movs	r1, #1
 800692e:	0030      	movs	r0, r6
 8006930:	4d1f      	ldr	r5, [pc, #124]	; (80069b0 <SX1276Init+0x8c>)
 8006932:	0022      	movs	r2, r4
 8006934:	002b      	movs	r3, r5
 8006936:	9400      	str	r4, [sp, #0]
 8006938:	4249      	negs	r1, r1
 800693a:	301c      	adds	r0, #28
 800693c:	f003 fb02 	bl	8009f44 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006940:	2101      	movs	r1, #1
 8006942:	002b      	movs	r3, r5
 8006944:	0022      	movs	r2, r4
 8006946:	1d30      	adds	r0, r6, #4
 8006948:	9400      	str	r4, [sp, #0]
 800694a:	4249      	negs	r1, r1
 800694c:	f003 fafa 	bl	8009f44 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006950:	4e18      	ldr	r6, [pc, #96]	; (80069b4 <SX1276Init+0x90>)
 8006952:	2101      	movs	r1, #1
 8006954:	0030      	movs	r0, r6
 8006956:	002b      	movs	r3, r5
 8006958:	0022      	movs	r2, r4
 800695a:	4249      	negs	r1, r1
 800695c:	9400      	str	r4, [sp, #0]
 800695e:	3068      	adds	r0, #104	; 0x68
 8006960:	f003 faf0 	bl	8009f44 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 8006964:	2001      	movs	r0, #1
 8006966:	f7fb fe71 	bl	800264c <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800696a:	f7fc f80f 	bl	800298c <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800696e:	f7ff ff8d 	bl	800688c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006972:	f7ff fb6b 	bl	800604c <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 8006976:	4810      	ldr	r0, [pc, #64]	; (80069b8 <SX1276Init+0x94>)
 8006978:	f7fb ffb0 	bl	80028dc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800697c:	4d0f      	ldr	r5, [pc, #60]	; (80069bc <SX1276Init+0x98>)
 800697e:	002c      	movs	r4, r5
 8006980:	353c      	adds	r5, #60	; 0x3c
 8006982:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006984:	7820      	ldrb	r0, [r4, #0]
 8006986:	f7ff fb71 	bl	800606c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800698a:	78a1      	ldrb	r1, [r4, #2]
 800698c:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800698e:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006990:	f7ff f8e5 	bl	8005b5e <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006994:	42ac      	cmp	r4, r5
 8006996:	d1f5      	bne.n	8006984 <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 8006998:	2000      	movs	r0, #0
 800699a:	f7ff fb67 	bl	800606c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800699e:	2300      	movs	r3, #0
 80069a0:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80069a2:	f7fb fe51 	bl	8002648 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80069a6:	3002      	adds	r0, #2
}
 80069a8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	20000444 	.word	0x20000444
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	200003c4 	.word	0x200003c4
 80069b8:	2000000c 	.word	0x2000000c
 80069bc:	0800b3e4 	.word	0x0800b3e4

080069c0 <SX1276OnTimeoutIrq>:
{
 80069c0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80069c2:	4c2a      	ldr	r4, [pc, #168]	; (8006a6c <SX1276OnTimeoutIrq+0xac>)
 80069c4:	7923      	ldrb	r3, [r4, #4]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d002      	beq.n	80069d0 <SX1276OnTimeoutIrq+0x10>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d02a      	beq.n	8006a24 <SX1276OnTimeoutIrq+0x64>
}
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80069d0:	7963      	ldrb	r3, [r4, #5]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d117      	bne.n	8006a06 <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80069d6:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80069d8:	210b      	movs	r1, #11
 80069da:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80069dc:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80069de:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80069e0:	f7ff f8bd 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80069e4:	2110      	movs	r1, #16
 80069e6:	203f      	movs	r0, #63	; 0x3f
 80069e8:	f7ff f8b9 	bl	8005b5e <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80069ec:	1de3      	adds	r3, r4, #7
 80069ee:	7fdb      	ldrb	r3, [r3, #31]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d011      	beq.n	8006a18 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80069f4:	200d      	movs	r0, #13
 80069f6:	f7ff f8fd 	bl	8005bf4 <SX1276Read>
 80069fa:	2140      	movs	r1, #64	; 0x40
 80069fc:	4301      	orrs	r1, r0
 80069fe:	b2c9      	uxtb	r1, r1
 8006a00:	200d      	movs	r0, #13
 8006a02:	f7ff f8ac 	bl	8005b5e <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <SX1276OnTimeoutIrq+0xb0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0df      	beq.n	80069ce <SX1276OnTimeoutIrq+0xe>
 8006a0e:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0dc      	beq.n	80069ce <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8006a14:	4798      	blx	r3
}
 8006a16:	e7da      	b.n	80069ce <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8006a18:	0020      	movs	r0, r4
 8006a1a:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 8006a1c:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8006a1e:	f003 faef 	bl	800a000 <UTIL_TIMER_Stop>
 8006a22:	e7f0      	b.n	8006a06 <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 8006a24:	f7fb ffb2 	bl	800298c <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 8006a28:	f7ff ff30 	bl	800688c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006a2c:	f7ff fb0e 	bl	800604c <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a30:	4e10      	ldr	r6, [pc, #64]	; (8006a74 <SX1276OnTimeoutIrq+0xb4>)
 8006a32:	0035      	movs	r5, r6
 8006a34:	363c      	adds	r6, #60	; 0x3c
 8006a36:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 8006a38:	7828      	ldrb	r0, [r5, #0]
 8006a3a:	f7ff fb17 	bl	800606c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006a3e:	78a9      	ldrb	r1, [r5, #2]
 8006a40:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a42:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006a44:	f7ff f88b 	bl	8005b5e <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a48:	42b5      	cmp	r5, r6
 8006a4a:	d1f5      	bne.n	8006a38 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	f7ff fb0d 	bl	800606c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8006a52:	0023      	movs	r3, r4
 8006a54:	335c      	adds	r3, #92	; 0x5c
 8006a56:	7818      	ldrb	r0, [r3, #0]
 8006a58:	f7ff fb58 	bl	800610c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <SX1276OnTimeoutIrq+0xb0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0b2      	beq.n	80069ce <SX1276OnTimeoutIrq+0xe>
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	e7d1      	b.n	8006a10 <SX1276OnTimeoutIrq+0x50>
 8006a6c:	200003c4 	.word	0x200003c4
 8006a70:	20000444 	.word	0x20000444
 8006a74:	0800b3e4 	.word	0x0800b3e4

08006a78 <SX1276OnDio0Irq>:
{
 8006a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 8006a7a:	466b      	mov	r3, sp
 8006a7c:	1dde      	adds	r6, r3, #7
 8006a7e:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8006a80:	4c8b      	ldr	r4, [pc, #556]	; (8006cb0 <SX1276OnDio0Irq+0x238>)
    volatile uint8_t irqFlags = 0;
 8006a82:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 8006a84:	7923      	ldrb	r3, [r4, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d003      	beq.n	8006a92 <SX1276OnDio0Irq+0x1a>
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d100      	bne.n	8006a90 <SX1276OnDio0Irq+0x18>
 8006a8e:	e0fa      	b.n	8006c86 <SX1276OnDio0Irq+0x20e>
}
 8006a90:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8006a92:	7963      	ldrb	r3, [r4, #5]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d023      	beq.n	8006ae0 <SX1276OnDio0Irq+0x68>
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d1f9      	bne.n	8006a90 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8006a9c:	2140      	movs	r1, #64	; 0x40
 8006a9e:	2012      	movs	r0, #18
 8006aa0:	f7ff f85d 	bl	8005b5e <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006aa4:	2012      	movs	r0, #18
 8006aa6:	f7ff f8a5 	bl	8005bf4 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006aaa:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006aac:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006aae:	7833      	ldrb	r3, [r6, #0]
 8006ab0:	4d80      	ldr	r5, [pc, #512]	; (8006cb4 <SX1276OnDio0Irq+0x23c>)
 8006ab2:	420b      	tst	r3, r1
 8006ab4:	d100      	bne.n	8006ab8 <SX1276OnDio0Irq+0x40>
 8006ab6:	e08a      	b.n	8006bce <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8006ab8:	2012      	movs	r0, #18
 8006aba:	f7ff f850 	bl	8005b5e <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8006abe:	0023      	movs	r3, r4
 8006ac0:	3356      	adds	r3, #86	; 0x56
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d100      	bne.n	8006aca <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 8006ac8:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8006aca:	1d28      	adds	r0, r5, #4
 8006acc:	f003 fa98 	bl	800a000 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0dc      	beq.n	8006a90 <SX1276OnDio0Irq+0x18>
 8006ad6:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0d9      	beq.n	8006a90 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8006adc:	4798      	blx	r3
}
 8006ade:	e7d7      	b.n	8006a90 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006ae0:	1d63      	adds	r3, r4, #5
 8006ae2:	7fdb      	ldrb	r3, [r3, #31]
 8006ae4:	4d73      	ldr	r5, [pc, #460]	; (8006cb4 <SX1276OnDio0Irq+0x23c>)
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d030      	beq.n	8006b4c <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006aea:	203f      	movs	r0, #63	; 0x3f
 8006aec:	f7ff f882 	bl	8005bf4 <SX1276Read>
 8006af0:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006af2:	7833      	ldrb	r3, [r6, #0]
 8006af4:	079b      	lsls	r3, r3, #30
 8006af6:	d429      	bmi.n	8006b4c <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006af8:	210b      	movs	r1, #11
 8006afa:	203e      	movs	r0, #62	; 0x3e
 8006afc:	f7ff f82f 	bl	8005b5e <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006b00:	2110      	movs	r1, #16
 8006b02:	203f      	movs	r0, #63	; 0x3f
 8006b04:	f7ff f82b 	bl	8005b5e <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006b08:	1d28      	adds	r0, r5, #4
 8006b0a:	f003 fa79 	bl	800a000 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006b0e:	1de3      	adds	r3, r4, #7
 8006b10:	7fde      	ldrb	r6, [r3, #31]
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d110      	bne.n	8006b38 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 8006b16:	0020      	movs	r0, r4
 8006b18:	3068      	adds	r0, #104	; 0x68
 8006b1a:	f003 fa71 	bl	800a000 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8006b1e:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <SX1276OnDio0Irq+0xb6>
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d000      	beq.n	8006b2e <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8006b2c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006b32:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006b34:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8006b36:	e7ab      	b.n	8006a90 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006b38:	200d      	movs	r0, #13
 8006b3a:	f7ff f85b 	bl	8005bf4 <SX1276Read>
 8006b3e:	2140      	movs	r1, #64	; 0x40
 8006b40:	4301      	orrs	r1, r0
 8006b42:	b2c9      	uxtb	r1, r1
 8006b44:	200d      	movs	r0, #13
 8006b46:	f7ff f80a 	bl	8005b5e <SX1276Write>
 8006b4a:	e7e9      	b.n	8006b20 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006b4c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8006b4e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006b50:	0013      	movs	r3, r2
 8006b52:	4e59      	ldr	r6, [pc, #356]	; (8006cb8 <SX1276OnDio0Irq+0x240>)
 8006b54:	430b      	orrs	r3, r1
 8006b56:	d10a      	bne.n	8006b6e <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006b58:	1ce3      	adds	r3, r4, #3
 8006b5a:	7fd8      	ldrb	r0, [r3, #31]
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d127      	bne.n	8006bb0 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8006b60:	0021      	movs	r1, r4
 8006b62:	2201      	movs	r2, #1
 8006b64:	313a      	adds	r1, #58	; 0x3a
 8006b66:	f7ff f82d 	bl	8005bc4 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b6a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006b6c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b6e:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006b70:	2000      	movs	r0, #0
 8006b72:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b74:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006b76:	f7ff f825 	bl	8005bc4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b7a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8006b7c:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b7e:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8006b80:	f003 fa3e 	bl	800a000 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006b84:	1de3      	adds	r3, r4, #7
 8006b86:	7fdb      	ldrb	r3, [r3, #31]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d116      	bne.n	8006bba <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8006b8c:	0020      	movs	r0, r4
 8006b8e:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 8006b90:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8006b92:	f003 fa35 	bl	800a000 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0c8      	beq.n	8006b2e <SX1276OnDio0Irq+0xb6>
 8006b9c:	689d      	ldr	r5, [r3, #8]
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	d0c5      	beq.n	8006b2e <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006ba2:	2232      	movs	r2, #50	; 0x32
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	0030      	movs	r0, r6
 8006ba8:	56a2      	ldrsb	r2, [r4, r2]
 8006baa:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8006bac:	47a8      	blx	r5
 8006bae:	e7be      	b.n	8006b2e <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006bb0:	2032      	movs	r0, #50	; 0x32
 8006bb2:	f7ff f81f 	bl	8005bf4 <SX1276Read>
 8006bb6:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006bb8:	e7d7      	b.n	8006b6a <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006bba:	200d      	movs	r0, #13
 8006bbc:	f7ff f81a 	bl	8005bf4 <SX1276Read>
 8006bc0:	2140      	movs	r1, #64	; 0x40
 8006bc2:	4301      	orrs	r1, r0
 8006bc4:	b2c9      	uxtb	r1, r1
 8006bc6:	200d      	movs	r0, #13
 8006bc8:	f7fe ffc9 	bl	8005b5e <SX1276Write>
 8006bcc:	e7e3      	b.n	8006b96 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006bce:	2019      	movs	r0, #25
 8006bd0:	f7ff f810 	bl	8005bf4 <SX1276Read>
 8006bd4:	0026      	movs	r6, r4
 8006bd6:	b240      	sxtb	r0, r0
 8006bd8:	3002      	adds	r0, #2
 8006bda:	1080      	asrs	r0, r0, #2
 8006bdc:	3660      	adds	r6, #96	; 0x60
 8006bde:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006be0:	201a      	movs	r0, #26
 8006be2:	f7ff f807 	bl	8005bf4 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006be6:	2200      	movs	r2, #0
 8006be8:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006bea:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006bec:	4933      	ldr	r1, [pc, #204]	; (8006cbc <SX1276OnDio0Irq+0x244>)
 8006bee:	111b      	asrs	r3, r3, #4
 8006bf0:	b280      	uxth	r0, r0
 8006bf2:	2a00      	cmp	r2, #0
 8006bf4:	da3e      	bge.n	8006c74 <SX1276OnDio0Irq+0x1fc>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006bf6:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8006bf8:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006bfa:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006bfc:	428e      	cmp	r6, r1
 8006bfe:	d937      	bls.n	8006c70 <SX1276OnDio0Irq+0x1f8>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006c00:	3a9d      	subs	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c02:	1882      	adds	r2, r0, r2
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	0022      	movs	r2, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006c08:	b21b      	sxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c0a:	3262      	adds	r2, #98	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006c0c:	2013      	movs	r0, #19
 8006c0e:	0026      	movs	r6, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c10:	8013      	strh	r3, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006c12:	f7fe ffef 	bl	8005bf4 <SX1276Read>
 8006c16:	3664      	adds	r6, #100	; 0x64
 8006c18:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006c1a:	2010      	movs	r0, #16
 8006c1c:	f7fe ffea 	bl	8005bf4 <SX1276Read>
 8006c20:	0001      	movs	r1, r0
 8006c22:	200d      	movs	r0, #13
 8006c24:	f7fe ff9b 	bl	8005b5e <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8006c28:	7832      	ldrb	r2, [r6, #0]
 8006c2a:	4e23      	ldr	r6, [pc, #140]	; (8006cb8 <SX1276OnDio0Irq+0x240>)
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	0031      	movs	r1, r6
 8006c30:	f7fe ffc8 	bl	8005bc4 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006c34:	0023      	movs	r3, r4
 8006c36:	3356      	adds	r3, #86	; 0x56
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d100      	bne.n	8006c40 <SX1276OnDio0Irq+0x1c8>
                        SX1276.Settings.State = RF_IDLE;
 8006c3e:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8006c40:	1d28      	adds	r0, r5, #4
 8006c42:	f003 f9dd 	bl	800a000 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006c46:	682b      	ldr	r3, [r5, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d100      	bne.n	8006c4e <SX1276OnDio0Irq+0x1d6>
 8006c4c:	e720      	b.n	8006a90 <SX1276OnDio0Irq+0x18>
 8006c4e:	689d      	ldr	r5, [r3, #8]
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d100      	bne.n	8006c56 <SX1276OnDio0Irq+0x1de>
 8006c54:	e71c      	b.n	8006a90 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006c56:	0023      	movs	r3, r4
 8006c58:	0022      	movs	r2, r4
 8006c5a:	3360      	adds	r3, #96	; 0x60
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	3464      	adds	r4, #100	; 0x64
 8006c60:	3262      	adds	r2, #98	; 0x62
 8006c62:	2100      	movs	r1, #0
 8006c64:	5e52      	ldrsh	r2, [r2, r1]
 8006c66:	0030      	movs	r0, r6
 8006c68:	7821      	ldrb	r1, [r4, #0]
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	47a8      	blx	r5
 8006c6e:	e70f      	b.n	8006a90 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c70:	3aa4      	subs	r2, #164	; 0xa4
 8006c72:	e7c6      	b.n	8006c02 <SX1276OnDio0Irq+0x18a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006c74:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006c76:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006c78:	428a      	cmp	r2, r1
 8006c7a:	d902      	bls.n	8006c82 <SX1276OnDio0Irq+0x20a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006c7c:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006c7e:	181b      	adds	r3, r3, r0
 8006c80:	e7c1      	b.n	8006c06 <SX1276OnDio0Irq+0x18e>
 8006c82:	38a4      	subs	r0, #164	; 0xa4
 8006c84:	e7fb      	b.n	8006c7e <SX1276OnDio0Irq+0x206>
            TimerStop( &TxTimeoutTimer );
 8006c86:	4d0b      	ldr	r5, [pc, #44]	; (8006cb4 <SX1276OnDio0Irq+0x23c>)
 8006c88:	0028      	movs	r0, r5
 8006c8a:	301c      	adds	r0, #28
 8006c8c:	f003 f9b8 	bl	800a000 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8006c90:	7963      	ldrb	r3, [r4, #5]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d103      	bne.n	8006c9e <SX1276OnDio0Irq+0x226>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8006c96:	2108      	movs	r1, #8
 8006c98:	2012      	movs	r0, #18
 8006c9a:	f7fe ff60 	bl	8005b5e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d100      	bne.n	8006caa <SX1276OnDio0Irq+0x232>
 8006ca8:	e6f2      	b.n	8006a90 <SX1276OnDio0Irq+0x18>
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	e714      	b.n	8006ad8 <SX1276OnDio0Irq+0x60>
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	200003c4 	.word	0x200003c4
 8006cb4:	20000444 	.word	0x20000444
 8006cb8:	20000478 	.word	0x20000478
 8006cbc:	1f4add40 	.word	0x1f4add40

08006cc0 <SX1276Send>:
{
 8006cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cc2:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8006cc4:	4c5f      	ldr	r4, [pc, #380]	; (8006e44 <SX1276Send+0x184>)
{
 8006cc6:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8006cc8:	7965      	ldrb	r5, [r4, #5]
{
 8006cca:	1ddf      	adds	r7, r3, #7
 8006ccc:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	d01c      	beq.n	8006d0c <SX1276Send+0x4c>
 8006cd2:	2d01      	cmp	r5, #1
 8006cd4:	d040      	beq.n	8006d58 <SX1276Send+0x98>
 8006cd6:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 8006cd8:	4d5b      	ldr	r5, [pc, #364]	; (8006e48 <SX1276Send+0x188>)
 8006cda:	1d28      	adds	r0, r5, #4
 8006cdc:	f003 f990 	bl	800a000 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006ce0:	0028      	movs	r0, r5
 8006ce2:	0031      	movs	r1, r6
 8006ce4:	301c      	adds	r0, #28
 8006ce6:	f003 fa15 	bl	800a114 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8006cea:	7963      	ldrb	r3, [r4, #5]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d100      	bne.n	8006cf2 <SX1276Send+0x32>
 8006cf0:	e071      	b.n	8006dd6 <SX1276Send+0x116>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d100      	bne.n	8006cf8 <SX1276Send+0x38>
 8006cf6:	e087      	b.n	8006e08 <SX1276Send+0x148>
    TimerStart( &TxTimeoutTimer );
 8006cf8:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8006cfa:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8006cfc:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 8006cfe:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8006d00:	f003 f9d0 	bl	800a0a4 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8006d04:	2003      	movs	r0, #3
 8006d06:	f7ff f817 	bl	8005d38 <SX1276SetOpMode.part.0>
}
 8006d0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 8006d0c:	7839      	ldrb	r1, [r7, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006d0e:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8006d10:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8006d12:	1ce3      	adds	r3, r4, #3
 8006d14:	7fd8      	ldrb	r0, [r3, #31]
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d11a      	bne.n	8006d50 <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	0039      	movs	r1, r7
 8006d1e:	f7fe ff06 	bl	8005b2e <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006d22:	783a      	ldrb	r2, [r7, #0]
 8006d24:	1e53      	subs	r3, r2, #1
 8006d26:	2b3f      	cmp	r3, #63	; 0x3f
 8006d28:	d905      	bls.n	8006d36 <SX1276Send+0x76>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	0031      	movs	r1, r6
 8006d2e:	4847      	ldr	r0, [pc, #284]	; (8006e4c <SX1276Send+0x18c>)
 8006d30:	f003 fcb6 	bl	800a6a0 <UTIL_MEM_cpy_8>
 8006d34:	2220      	movs	r2, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006d36:	0025      	movs	r5, r4
    SX1276WriteBuffer( 0, buffer, size );
 8006d38:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006d3a:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8006d3c:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006d3e:	702a      	strb	r2, [r5, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8006d40:	f7fe fef5 	bl	8005b2e <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006d44:	782b      	ldrb	r3, [r5, #0]
 8006d46:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006d48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 8006d4e:	e7c3      	b.n	8006cd8 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006d50:	2032      	movs	r0, #50	; 0x32
 8006d52:	f7fe ff04 	bl	8005b5e <SX1276Write>
 8006d56:	e7e4      	b.n	8006d22 <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006d58:	0023      	movs	r3, r4
 8006d5a:	3355      	adds	r3, #85	; 0x55
 8006d5c:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006d5e:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d02d      	beq.n	8006dc0 <SX1276Send+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006d64:	f7fe ff46 	bl	8005bf4 <SX1276Read>
 8006d68:	2341      	movs	r3, #65	; 0x41
 8006d6a:	4398      	bics	r0, r3
 8006d6c:	b2c1      	uxtb	r1, r0
 8006d6e:	2033      	movs	r0, #51	; 0x33
 8006d70:	f7fe fef5 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006d74:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006d76:	203b      	movs	r0, #59	; 0x3b
 8006d78:	f7fe fef1 	bl	8005b5e <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006d7c:	0023      	movs	r3, r4
 8006d7e:	783d      	ldrb	r5, [r7, #0]
 8006d80:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006d82:	0029      	movs	r1, r5
 8006d84:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006d86:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006d88:	f7fe fee9 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	200e      	movs	r0, #14
 8006d90:	f7fe fee5 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006d94:	2100      	movs	r1, #0
 8006d96:	200d      	movs	r0, #13
 8006d98:	f7fe fee1 	bl	8005b5e <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	f7fe ff29 	bl	8005bf4 <SX1276Read>
 8006da2:	23f8      	movs	r3, #248	; 0xf8
 8006da4:	4398      	bics	r0, r3
 8006da6:	d104      	bne.n	8006db2 <SX1276Send+0xf2>
                SX1276SetStby( );
 8006da8:	f7fe fff2 	bl	8005d90 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8006dac:	2001      	movs	r0, #1
 8006dae:	f7fb feb1 	bl	8002b14 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 8006db2:	0031      	movs	r1, r6
 8006db4:	002a      	movs	r2, r5
 8006db6:	2000      	movs	r0, #0
 8006db8:	f7fe feb9 	bl	8005b2e <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006dbc:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 8006dbe:	e78b      	b.n	8006cd8 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006dc0:	f7fe ff18 	bl	8005bf4 <SX1276Read>
 8006dc4:	2341      	movs	r3, #65	; 0x41
 8006dc6:	4398      	bics	r0, r3
 8006dc8:	4305      	orrs	r5, r0
 8006dca:	b2e9      	uxtb	r1, r5
 8006dcc:	2033      	movs	r0, #51	; 0x33
 8006dce:	f7fe fec6 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006dd2:	211d      	movs	r1, #29
 8006dd4:	e7cf      	b.n	8006d76 <SX1276Send+0xb6>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006dd6:	2040      	movs	r0, #64	; 0x40
 8006dd8:	f7fe ff0c 	bl	8005bf4 <SX1276Read>
 8006ddc:	2103      	movs	r1, #3
 8006dde:	4001      	ands	r1, r0
 8006de0:	2040      	movs	r0, #64	; 0x40
 8006de2:	f7fe febc 	bl	8005b5e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006de6:	2041      	movs	r0, #65	; 0x41
 8006de8:	f7fe ff04 	bl	8005bf4 <SX1276Read>
 8006dec:	213e      	movs	r1, #62	; 0x3e
 8006dee:	4001      	ands	r1, r0
 8006df0:	2041      	movs	r0, #65	; 0x41
 8006df2:	f7fe feb4 	bl	8005b5e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006df6:	2035      	movs	r0, #53	; 0x35
 8006df8:	f7fe fefc 	bl	8005bf4 <SX1276Read>
 8006dfc:	233f      	movs	r3, #63	; 0x3f
 8006dfe:	4018      	ands	r0, r3
 8006e00:	0023      	movs	r3, r4
 8006e02:	333e      	adds	r3, #62	; 0x3e
 8006e04:	7018      	strb	r0, [r3, #0]
        break;
 8006e06:	e777      	b.n	8006cf8 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006e08:	0023      	movs	r3, r4
 8006e0a:	3353      	adds	r3, #83	; 0x53
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <SX1276Send+0x170>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006e12:	21f5      	movs	r1, #245	; 0xf5
 8006e14:	2011      	movs	r0, #17
 8006e16:	f7fe fea2 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006e1a:	2040      	movs	r0, #64	; 0x40
 8006e1c:	f7fe feea 	bl	8005bf4 <SX1276Read>
 8006e20:	2333      	movs	r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006e22:	0001      	movs	r1, r0
 8006e24:	2040      	movs	r0, #64	; 0x40
 8006e26:	4019      	ands	r1, r3
 8006e28:	4301      	orrs	r1, r0
 8006e2a:	f7fe fe98 	bl	8005b5e <SX1276Write>
 8006e2e:	e763      	b.n	8006cf8 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006e30:	21f7      	movs	r1, #247	; 0xf7
 8006e32:	2011      	movs	r0, #17
 8006e34:	f7fe fe93 	bl	8005b5e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006e38:	2040      	movs	r0, #64	; 0x40
 8006e3a:	f7fe fedb 	bl	8005bf4 <SX1276Read>
 8006e3e:	233f      	movs	r3, #63	; 0x3f
 8006e40:	e7ef      	b.n	8006e22 <SX1276Send+0x162>
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	200003c4 	.word	0x200003c4
 8006e48:	20000444 	.word	0x20000444
 8006e4c:	20000478 	.word	0x20000478

08006e50 <SX1276OnDio1Irq>:
{
 8006e50:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006e52:	4c39      	ldr	r4, [pc, #228]	; (8006f38 <SX1276OnDio1Irq+0xe8>)
 8006e54:	7925      	ldrb	r5, [r4, #4]
 8006e56:	2d01      	cmp	r5, #1
 8006e58:	d002      	beq.n	8006e60 <SX1276OnDio1Irq+0x10>
 8006e5a:	2d02      	cmp	r5, #2
 8006e5c:	d050      	beq.n	8006f00 <SX1276OnDio1Irq+0xb0>
}
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8006e60:	7963      	ldrb	r3, [r4, #5]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d017      	beq.n	8006e96 <SX1276OnDio1Irq+0x46>
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d1f9      	bne.n	8006e5e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006e6a:	f7fb fdd5 	bl	8002a18 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d0f5      	beq.n	8006e5e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8006e72:	4d32      	ldr	r5, [pc, #200]	; (8006f3c <SX1276OnDio1Irq+0xec>)
 8006e74:	1d28      	adds	r0, r5, #4
 8006e76:	f003 f8c3 	bl	800a000 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	2012      	movs	r0, #18
 8006e7e:	f7fe fe6e 	bl	8005b5e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0e8      	beq.n	8006e5e <SX1276OnDio1Irq+0xe>
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0e5      	beq.n	8006e5e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8006e92:	4798      	blx	r3
 8006e94:	e7e3      	b.n	8006e5e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006e96:	f7fb fdbf 	bl	8002a18 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d0df      	beq.n	8006e5e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8006e9e:	0020      	movs	r0, r4
 8006ea0:	3068      	adds	r0, #104	; 0x68
 8006ea2:	f003 f8ad 	bl	800a000 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006ea6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006ea8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	d108      	bne.n	8006ec0 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006eae:	1ce3      	adds	r3, r4, #3
 8006eb0:	7fd8      	ldrb	r0, [r3, #31]
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d119      	bne.n	8006eea <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	002a      	movs	r2, r5
 8006eba:	313a      	adds	r1, #58	; 0x3a
 8006ebc:	f7fe fe82 	bl	8005bc4 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006ec0:	0025      	movs	r5, r4
 8006ec2:	353e      	adds	r5, #62	; 0x3e
 8006ec4:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006ec6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006ec8:	491d      	ldr	r1, [pc, #116]	; (8006f40 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006eca:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006ecc:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006ece:	1a1b      	subs	r3, r3, r0
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	db0f      	blt.n	8006ef4 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006ed4:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	2000      	movs	r0, #0
 8006eda:	f7fe fe73 	bl	8005bc4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006ede:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006ee0:	782b      	ldrb	r3, [r5, #0]
 8006ee2:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006ee4:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006ee6:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8006ee8:	e7b9      	b.n	8006e5e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006eea:	2032      	movs	r0, #50	; 0x32
 8006eec:	f7fe fe82 	bl	8005bf4 <SX1276Read>
 8006ef0:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006ef2:	e7e5      	b.n	8006ec0 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	f7fe fe64 	bl	8005bc4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006efc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006efe:	e7f2      	b.n	8006ee6 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8006f00:	7965      	ldrb	r5, [r4, #5]
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	d1ab      	bne.n	8006e5e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8006f06:	f7fb fd87 	bl	8002a18 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006f0a:	2801      	cmp	r0, #1
 8006f0c:	d0a7      	beq.n	8006e5e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006f0e:	0026      	movs	r6, r4
 8006f10:	363f      	adds	r6, #63	; 0x3f
 8006f12:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006f14:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006f16:	490a      	ldr	r1, [pc, #40]	; (8006f40 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006f18:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006f1a:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006f1c:	1a1b      	subs	r3, r3, r0
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	dd05      	ble.n	8006f2e <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 8006f22:	0028      	movs	r0, r5
 8006f24:	f7fe fe03 	bl	8005b2e <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006f28:	7833      	ldrb	r3, [r6, #0]
 8006f2a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006f2c:	e7da      	b.n	8006ee4 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 8006f2e:	0028      	movs	r0, r5
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	f7fe fdfc 	bl	8005b2e <SX1276WriteBuffer>
 8006f36:	e7e1      	b.n	8006efc <SX1276OnDio1Irq+0xac>
 8006f38:	200003c4 	.word	0x200003c4
 8006f3c:	20000444 	.word	0x20000444
 8006f40:	20000478 	.word	0x20000478

08006f44 <_Cb_Interrupt>:
	Get_RTC();
	return 1;
}

static uint8_t _Cb_Interrupt(uint8_t event)
{
 8006f44:	b510      	push	{r4, lr}
	fevent_enable(sEventAppCom, _EVENT_TIMER_LORA_TX);
 8006f46:	2101      	movs	r1, #1
 8006f48:	4802      	ldr	r0, [pc, #8]	; (8006f54 <_Cb_Interrupt+0x10>)
 8006f4a:	f002 fbca 	bl	80096e2 <fevent_enable>
	return 1;
}
 8006f4e:	2001      	movs	r0, #1
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	20000024 	.word	0x20000024

08006f58 <_Cb_Idle_Handler>:
		LED_TOGGLE(__LED_MODE);
 8006f58:	2000      	movs	r0, #0
{
 8006f5a:	b510      	push	{r4, lr}
		LED_TOGGLE(__LED_MODE);
 8006f5c:	f000 fc6a 	bl	8007834 <LED_TOGGLE>
		if (sModem.CheckInit == 0){
 8006f60:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <_Cb_Idle_Handler+0x2c>)
 8006f62:	3355      	adds	r3, #85	; 0x55
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <_Cb_Idle_Handler+0x22>
			Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <_Cb_Idle_Handler+0x30>)
 8006f6c:	4807      	ldr	r0, [pc, #28]	; (8006f8c <_Cb_Idle_Handler+0x34>)
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	4798      	blx	r3
			fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 8006f72:	2106      	movs	r1, #6
 8006f74:	4806      	ldr	r0, [pc, #24]	; (8006f90 <_Cb_Idle_Handler+0x38>)
 8006f76:	f002 fbb4 	bl	80096e2 <fevent_enable>
	Get_RTC();
 8006f7a:	f002 ff5f 	bl	8009e3c <Get_RTC>
}
 8006f7e:	2001      	movs	r0, #1
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	200001fc 	.word	0x200001fc
 8006f88:	0800b4d0 	.word	0x0800b4d0
 8006f8c:	000186a0 	.word	0x000186a0
 8006f90:	20000024 	.word	0x20000024

08006f94 <_Cb_Set_RTC>:
{
 8006f94:	b510      	push	{r4, lr}
    UTIL_Set_RTC(sRTCSet);
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <_Cb_Set_RTC+0x18>)
 8006f98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f9a:	f003 f915 	bl	800a1c8 <UTIL_Set_RTC>
    fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 8006f9e:	2106      	movs	r1, #6
 8006fa0:	4803      	ldr	r0, [pc, #12]	; (8006fb0 <_Cb_Set_RTC+0x1c>)
 8006fa2:	f002 fb9e 	bl	80096e2 <fevent_enable>
}
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	20001340 	.word	0x20001340
 8006fb0:	20000024 	.word	0x20000024

08006fb4 <_Cb_Timer_Lora_Tx>:
	UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
 8006fb4:	21fa      	movs	r1, #250	; 0xfa
{
 8006fb6:	b510      	push	{r4, lr}
	UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <_Cb_Timer_Lora_Tx+0x24>)
 8006fba:	4c08      	ldr	r4, [pc, #32]	; (8006fdc <_Cb_Timer_Lora_Tx+0x28>)
 8006fbc:	885b      	ldrh	r3, [r3, #2]
 8006fbe:	0089      	lsls	r1, r1, #2
 8006fc0:	4359      	muls	r1, r3
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	f003 f8a6 	bl	800a114 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Start (&TimerLoraTx);
 8006fc8:	0020      	movs	r0, r4
 8006fca:	f003 f86b 	bl	800a0a4 <UTIL_TIMER_Start>
	USER_Payload_Node_Single(0);
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f001 fea2 	bl	8008d18 <USER_Payload_Node_Single>
}
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	20000254 	.word	0x20000254
 8006fdc:	20000578 	.word	0x20000578

08006fe0 <_Cb_Timer_Start>:
{
 8006fe0:	b510      	push	{r4, lr}
	UTIL_TIMER_IRQ_Handler();
 8006fe2:	f003 f8b3 	bl	800a14c <UTIL_TIMER_IRQ_Handler>
}
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	bd10      	pop	{r4, pc}
	...

08006fec <AppCom_IRQ_Timer_CallBack>:
{
 8006fec:	b510      	push	{r4, lr}
    fevent_active(sEventAppCom, _EVENT_TIMER_START);
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <AppCom_IRQ_Timer_CallBack+0xc>)
 8006ff2:	f002 fb6f 	bl	80096d4 <fevent_active>
}
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	20000024 	.word	0x20000024

08006ffc <_Cb_Meas_Multi>:
{
 8006ffc:	b570      	push	{r4, r5, r6, lr}
	if (sModem.CountMeasure_u8 <6)
 8006ffe:	4c21      	ldr	r4, [pc, #132]	; (8007084 <_Cb_Meas_Multi+0x88>)
{
 8007000:	0005      	movs	r5, r0
	if (sModem.CountMeasure_u8 <6)
 8007002:	0026      	movs	r6, r4
 8007004:	3648      	adds	r6, #72	; 0x48
 8007006:	7833      	ldrb	r3, [r6, #0]
 8007008:	2b05      	cmp	r3, #5
 800700a:	d80b      	bhi.n	8007024 <_Cb_Meas_Multi+0x28>
		sModem.CountMeasure_u8++;
 800700c:	3301      	adds	r3, #1
 800700e:	7033      	strb	r3, [r6, #0]
		sEventAppCom[event].e_period = 100;
 8007010:	2264      	movs	r2, #100	; 0x64
 8007012:	481d      	ldr	r0, [pc, #116]	; (8007088 <_Cb_Meas_Multi+0x8c>)
 8007014:	012b      	lsls	r3, r5, #4
 8007016:	18c3      	adds	r3, r0, r3
		fevent_enable(sEventAppCom, event);
 8007018:	0029      	movs	r1, r5
		sEventAppCom[event].e_period = 100;
 800701a:	609a      	str	r2, [r3, #8]
		fevent_enable(sEventAppCom, event);
 800701c:	f002 fb61 	bl	80096e2 <fevent_enable>
}
 8007020:	2001      	movs	r0, #1
 8007022:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((sModem.CountMeasure_u8 >= 6) && (sModem.CountMeasure_u8 < 150))
 8007024:	3b06      	subs	r3, #6
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b8f      	cmp	r3, #143	; 0x8f
 800702a:	d823      	bhi.n	8007074 <_Cb_Meas_Multi+0x78>
		switch(sModem.TypeModem_u8)
 800702c:	7e23      	ldrb	r3, [r4, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d015      	beq.n	800705e <_Cb_Meas_Multi+0x62>
 8007032:	2b01      	cmp	r3, #1
 8007034:	d018      	beq.n	8007068 <_Cb_Meas_Multi+0x6c>
		*(sModem.strMultiRespond.Data_a8 + sModem.strMultiRespond.Length_u16++) = (uint8_t) (sModem.ValueMeasure_u8 >> 8);
 8007036:	0022      	movs	r2, r4
 8007038:	324a      	adds	r2, #74	; 0x4a
 800703a:	8813      	ldrh	r3, [r2, #0]
 800703c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800703e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	1c4e      	adds	r6, r1, #1
 8007044:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8007046:	5443      	strb	r3, [r0, r1]
		*(sModem.strMultiRespond.Data_a8 + sModem.strMultiRespond.Length_u16++) = (uint8_t) sModem.ValueMeasure_u8;
 8007048:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800704a:	8811      	ldrh	r1, [r2, #0]
 800704c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800704e:	1c58      	adds	r0, r3, #1
 8007050:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8007052:	54d1      	strb	r1, [r2, r3]
		sModem.CountMeasure_u8++;
 8007054:	3448      	adds	r4, #72	; 0x48
 8007056:	7823      	ldrb	r3, [r4, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	7023      	strb	r3, [r4, #0]
 800705c:	e7d8      	b.n	8007010 <_Cb_Meas_Multi+0x14>
				sModem.ValueMeasure_u8 = Get_Vol_VNA();
 800705e:	f000 feed 	bl	8007e3c <Get_Vol_VNA>
 8007062:	0023      	movs	r3, r4
 8007064:	334a      	adds	r3, #74	; 0x4a
 8007066:	8018      	strh	r0, [r3, #0]
				sModem.ValueMeasure_u8 = Get_Vol_VP();
 8007068:	f000 fefa 	bl	8007e60 <Get_Vol_VP>
 800706c:	0023      	movs	r3, r4
 800706e:	334a      	adds	r3, #74	; 0x4a
 8007070:	8018      	strh	r0, [r3, #0]
 8007072:	e7e0      	b.n	8007036 <_Cb_Meas_Multi+0x3a>
		fevent_enable(sEventAppPacket, _EVENT_PACKET_MULTI);
 8007074:	2102      	movs	r1, #2
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <_Cb_Meas_Multi+0x90>)
 8007078:	f002 fb33 	bl	80096e2 <fevent_enable>
		sModem.CountMeasure_u8 = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	7033      	strb	r3, [r6, #0]
 8007080:	e7ce      	b.n	8007020 <_Cb_Meas_Multi+0x24>
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	200001fc 	.word	0x200001fc
 8007088:	20000024 	.word	0x20000024
 800708c:	20000110 	.word	0x20000110

08007090 <_Cb_Meas_Single>:
{
 8007090:	b570      	push	{r4, r5, r6, lr}
	if (sModem.CountMeasure_u8 < 10)
 8007092:	4c19      	ldr	r4, [pc, #100]	; (80070f8 <_Cb_Meas_Single+0x68>)
{
 8007094:	0005      	movs	r5, r0
	if (sModem.CountMeasure_u8 < 10)
 8007096:	0023      	movs	r3, r4
 8007098:	3348      	adds	r3, #72	; 0x48
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	d821      	bhi.n	80070e4 <_Cb_Meas_Single+0x54>
		switch(sModem.TypeModem_u8)
 80070a0:	7e23      	ldrb	r3, [r4, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00f      	beq.n	80070c6 <_Cb_Meas_Single+0x36>
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d014      	beq.n	80070d4 <_Cb_Meas_Single+0x44>
		sEventAppCom[event].e_period = 100;
 80070aa:	2264      	movs	r2, #100	; 0x64
		fevent_enable(sEventAppCom, event);
 80070ac:	0029      	movs	r1, r5
		sModem.CountMeasure_u8++;
 80070ae:	3448      	adds	r4, #72	; 0x48
 80070b0:	7823      	ldrb	r3, [r4, #0]
		sEventAppCom[event].e_period = 100;
 80070b2:	4812      	ldr	r0, [pc, #72]	; (80070fc <_Cb_Meas_Single+0x6c>)
		sModem.CountMeasure_u8++;
 80070b4:	3301      	adds	r3, #1
 80070b6:	7023      	strb	r3, [r4, #0]
		sEventAppCom[event].e_period = 100;
 80070b8:	012b      	lsls	r3, r5, #4
 80070ba:	18c3      	adds	r3, r0, r3
 80070bc:	609a      	str	r2, [r3, #8]
		fevent_enable(sEventAppPacket, _EVENT_PACKET_SINGLE);
 80070be:	f002 fb10 	bl	80096e2 <fevent_enable>
}
 80070c2:	2001      	movs	r0, #1
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
				sModem.ValueMeasure_u8 += Get_Vol_VNA();
 80070c6:	f000 feb9 	bl	8007e3c <Get_Vol_VNA>
 80070ca:	0023      	movs	r3, r4
 80070cc:	334a      	adds	r3, #74	; 0x4a
 80070ce:	881a      	ldrh	r2, [r3, #0]
 80070d0:	1880      	adds	r0, r0, r2
 80070d2:	8018      	strh	r0, [r3, #0]
				sModem.ValueBattery_u8 += Get_Vol_VP();
 80070d4:	f000 fec4 	bl	8007e60 <Get_Vol_VP>
 80070d8:	0023      	movs	r3, r4
 80070da:	334c      	adds	r3, #76	; 0x4c
 80070dc:	881a      	ldrh	r2, [r3, #0]
 80070de:	1880      	adds	r0, r0, r2
 80070e0:	8018      	strh	r0, [r3, #0]
 80070e2:	e7e2      	b.n	80070aa <_Cb_Meas_Single+0x1a>
		sModem.ValueMeasure_u8 /= 10;
 80070e4:	344a      	adds	r4, #74	; 0x4a
 80070e6:	210a      	movs	r1, #10
 80070e8:	8820      	ldrh	r0, [r4, #0]
 80070ea:	f7f9 f833 	bl	8000154 <__udivsi3>
		fevent_enable(sEventAppPacket, _EVENT_PACKET_SINGLE);
 80070ee:	2101      	movs	r1, #1
		sModem.ValueMeasure_u8 /= 10;
 80070f0:	8020      	strh	r0, [r4, #0]
		fevent_enable(sEventAppPacket, _EVENT_PACKET_SINGLE);
 80070f2:	4803      	ldr	r0, [pc, #12]	; (8007100 <_Cb_Meas_Single+0x70>)
 80070f4:	e7e3      	b.n	80070be <_Cb_Meas_Single+0x2e>
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	200001fc 	.word	0x200001fc
 80070fc:	20000024 	.word	0x20000024
 8007100:	20000110 	.word	0x20000110

08007104 <_Cb_Uart_Debug>:
{
 8007104:	b510      	push	{r4, lr}
	if (MarkFirstRecvUart == 0)
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <_Cb_Uart_Debug+0x48>)
{
 8007108:	0001      	movs	r1, r0
		LastLengthRecv = sUartDebug.Length_u16;
 800710a:	4c11      	ldr	r4, [pc, #68]	; (8007150 <_Cb_Uart_Debug+0x4c>)
	if (MarkFirstRecvUart == 0)
 800710c:	7e18      	ldrb	r0, [r3, #24]
		LastLengthRecv = sUartDebug.Length_u16;
 800710e:	88a2      	ldrh	r2, [r4, #4]
	if (MarkFirstRecvUart == 0)
 8007110:	2800      	cmp	r0, #0
 8007112:	d106      	bne.n	8007122 <_Cb_Uart_Debug+0x1e>
		MarkFirstRecvUart = 1;
 8007114:	3001      	adds	r0, #1
 8007116:	7618      	strb	r0, [r3, #24]
			fevent_enable(sEventAppCom, event);
 8007118:	480e      	ldr	r0, [pc, #56]	; (8007154 <_Cb_Uart_Debug+0x50>)
			LastLengthRecv = sUartDebug.Length_u16;
 800711a:	835a      	strh	r2, [r3, #26]
			fevent_enable(sEventAppCom, event);
 800711c:	f002 fae1 	bl	80096e2 <fevent_enable>
 8007120:	e011      	b.n	8007146 <_Cb_Uart_Debug+0x42>
		if (sUartDebug.Length_u16 == LastLengthRecv)
 8007122:	8b58      	ldrh	r0, [r3, #26]
 8007124:	4290      	cmp	r0, r2
 8007126:	d1f7      	bne.n	8007118 <_Cb_Uart_Debug+0x14>
			MarkFirstRecvUart = 0;
 8007128:	2100      	movs	r1, #0
			DCU_Response_AT((uint8_t*)"", 0);
 800712a:	480b      	ldr	r0, [pc, #44]	; (8007158 <_Cb_Uart_Debug+0x54>)
			MarkFirstRecvUart = 0;
 800712c:	7619      	strb	r1, [r3, #24]
			DCU_Response_AT((uint8_t*)"", 0);
 800712e:	f001 fc33 	bl	8008998 <DCU_Response_AT>
			DCU_Response_AT(sUartDebug.Data_a8, sUartDebug.Length_u16);
 8007132:	88a1      	ldrh	r1, [r4, #4]
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	f001 fc2f 	bl	8008998 <DCU_Response_AT>
			Check_AT_User(&sUartDebug);
 800713a:	0020      	movs	r0, r4
 800713c:	f001 f9fe 	bl	800853c <Check_AT_User>
			Reset_Buff(&sUartDebug);
 8007140:	0020      	movs	r0, r4
 8007142:	f003 f887 	bl	800a254 <Reset_Buff>
}
 8007146:	2001      	movs	r0, #1
 8007148:	bd10      	pop	{r4, pc}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	20000578 	.word	0x20000578
 8007150:	20000160 	.word	0x20000160
 8007154:	20000024 	.word	0x20000024
 8007158:	0800b919 	.word	0x0800b919

0800715c <AppCom_Task>:
	uint8_t Result = 0;
 800715c:	2000      	movs	r0, #0
{
 800715e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < _EVENT_END_COMM; i++)
 8007160:	0005      	movs	r5, r0
            Result = 1;
 8007162:	2701      	movs	r7, #1
 8007164:	4c0f      	ldr	r4, [pc, #60]	; (80071a4 <AppCom_Task+0x48>)
		if (sEventAppCom[i].e_status == 1)
 8007166:	7866      	ldrb	r6, [r4, #1]
 8007168:	2e01      	cmp	r6, #1
 800716a:	d10b      	bne.n	8007184 <AppCom_Task+0x28>
			if ((sEventAppCom[i].e_systick == 0) ||
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10e      	bne.n	8007190 <AppCom_Task+0x34>
                sEventAppCom[i].e_status = 0;  //Disable event
 8007172:	2300      	movs	r3, #0
 8007174:	7063      	strb	r3, [r4, #1]
				sEventAppCom[i].e_systick = HAL_GetTick();
 8007176:	f7fb fcc7 	bl	8002b08 <HAL_GetTick>
				sEventAppCom[i].e_function_handler(i);
 800717a:	68e3      	ldr	r3, [r4, #12]
				sEventAppCom[i].e_systick = HAL_GetTick();
 800717c:	6060      	str	r0, [r4, #4]
				sEventAppCom[i].e_function_handler(i);
 800717e:	0028      	movs	r0, r5
 8007180:	4798      	blx	r3
            Result = 1;
 8007182:	0030      	movs	r0, r6
	for (i = 0; i < _EVENT_END_COMM; i++)
 8007184:	3501      	adds	r5, #1
 8007186:	b2ed      	uxtb	r5, r5
 8007188:	3410      	adds	r4, #16
 800718a:	2d08      	cmp	r5, #8
 800718c:	d1eb      	bne.n	8007166 <AppCom_Task+0xa>
}
 800718e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					((HAL_GetTick() - sEventAppCom[i].e_systick)  >=  sEventAppCom[i].e_period))
 8007190:	f7fb fcba 	bl	8002b08 <HAL_GetTick>
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	1ac0      	subs	r0, r0, r3
			if ((sEventAppCom[i].e_systick == 0) ||
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	4298      	cmp	r0, r3
 800719c:	d2e9      	bcs.n	8007172 <AppCom_Task+0x16>
            Result = 1;
 800719e:	0038      	movs	r0, r7
 80071a0:	e7f0      	b.n	8007184 <AppCom_Task+0x28>
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	20000024 	.word	0x20000024

080071a8 <AppCom_Cacul_Random_Delay>:
{
 80071a8:	b510      	push	{r4, lr}
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80071aa:	4c0a      	ldr	r4, [pc, #40]	; (80071d4 <AppCom_Cacul_Random_Delay+0x2c>)
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 80071ac:	88a3      	ldrh	r3, [r4, #4]
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80071ae:	6822      	ldr	r2, [r4, #0]
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 80071b0:	3b01      	subs	r3, #1
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	5cd0      	ldrb	r0, [r2, r3]
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <AppCom_Cacul_Random_Delay+0x30>)
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80071b8:	3830      	subs	r0, #48	; 0x30
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 80071ba:	8859      	ldrh	r1, [r3, #2]
 80071bc:	f7f9 f850 	bl	8000260 <__aeabi_uidivmod>
	sModem.TimeDelayTx_u32 *= 1000;
 80071c0:	22fa      	movs	r2, #250	; 0xfa
 80071c2:	0092      	lsls	r2, r2, #2
 80071c4:	434a      	muls	r2, r1
	LOG(LOG_INFOR, "Time delay = %dms", sModem.TimeDelayTx_u32);
 80071c6:	2004      	movs	r0, #4
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <AppCom_Cacul_Random_Delay+0x34>)
	sModem.TimeDelayTx_u32 *= 1000;
 80071ca:	6522      	str	r2, [r4, #80]	; 0x50
	LOG(LOG_INFOR, "Time delay = %dms", sModem.TimeDelayTx_u32);
 80071cc:	f003 f87a 	bl	800a2c4 <LOG>
}
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	200001fc 	.word	0x200001fc
 80071d8:	20000254 	.word	0x20000254
 80071dc:	0800b772 	.word	0x0800b772

080071e0 <AppCom_Init>:
    	sModem.TypeModem_u8 = _LORA_NODE_VP;
 80071e0:	2201      	movs	r2, #1
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <AppCom_Init+0x1c>)
{
 80071e4:	b510      	push	{r4, lr}
    	sModem.TypeModem_u8 = _LORA_NODE_VP;
 80071e6:	761a      	strb	r2, [r3, #24]
    pModemProcessIRQTimer = AppCom_IRQ_Timer_CallBack;
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <AppCom_Init+0x20>)
 80071ea:	4a06      	ldr	r2, [pc, #24]	; (8007204 <AppCom_Init+0x24>)
 80071ec:	601a      	str	r2, [r3, #0]
    sLPMFeatureHandler = &sModemLPMHandler;
 80071ee:	4b06      	ldr	r3, [pc, #24]	; (8007208 <AppCom_Init+0x28>)
 80071f0:	4a06      	ldr	r2, [pc, #24]	; (800720c <AppCom_Init+0x2c>)
 80071f2:	601a      	str	r2, [r3, #0]
    AppCom_Cacul_Random_Delay();
 80071f4:	f7ff ffd8 	bl	80071a8 <AppCom_Cacul_Random_Delay>
}
 80071f8:	bd10      	pop	{r4, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	200001fc 	.word	0x200001fc
 8007200:	200015e0 	.word	0x200015e0
 8007204:	08006fed 	.word	0x08006fed
 8007208:	20001590 	.word	0x20001590
 800720c:	20000258 	.word	0x20000258

08007210 <_Cb_Active_Lora_Tx_Event>:

void _Cb_Active_Lora_Tx_Event(void *context)
{
 8007210:	b510      	push	{r4, lr}
    fevent_active(sEventAppCom, _EVENT_TIMER_LORA_TX);
 8007212:	2101      	movs	r1, #1
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <_Cb_Active_Lora_Tx_Event+0xc>)
 8007216:	f002 fa5d 	bl	80096d4 <fevent_active>
}
 800721a:	bd10      	pop	{r4, pc}
 800721c:	20000024 	.word	0x20000024

08007220 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007220:	b510      	push	{r4, lr}
    switch(GPIO_Pin)
 8007222:	2840      	cmp	r0, #64	; 0x40
 8007224:	d103      	bne.n	800722e <HAL_GPIO_EXTI_Callback+0xe>
    {
    #ifdef DEVICE_TYPE_STATION
    #else
       case GPIO_PIN_6:
    	   fevent_enable(sEventAppCom, _EVENT_INTERRUPT);
 8007226:	2107      	movs	r1, #7
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <HAL_GPIO_EXTI_Callback+0x10>)
 800722a:	f002 fa5a 	bl	80096e2 <fevent_enable>
           break;
        default:
            break;
    #endif
    }
}
 800722e:	bd10      	pop	{r4, pc}
 8007230:	20000024 	.word	0x20000024

08007234 <_Cb_Lora_Led>:
}

static uint8_t 	_Cb_Lora_Led (uint8_t event)
{
    return 1;
}
 8007234:	2001      	movs	r0, #1
 8007236:	4770      	bx	lr

08007238 <_Cb_Timer_Led_Event>:
}

static void _Cb_Timer_Led_Event(void *context)
{

}
 8007238:	4770      	bx	lr
	...

0800723c <_Cb_Lora_IRQ>:
{
 800723c:	b5f0      	push	{r4, r5, r6, r7, lr}
    Radio.Sleep();
 800723e:	4d4d      	ldr	r5, [pc, #308]	; (8007374 <_Cb_Lora_IRQ+0x138>)
{
 8007240:	b085      	sub	sp, #20
    Radio.Sleep();
 8007242:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007244:	4798      	blx	r3
    switch (State)
 8007246:	4b4c      	ldr	r3, [pc, #304]	; (8007378 <_Cb_Lora_IRQ+0x13c>)
 8007248:	7818      	ldrb	r0, [r3, #0]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	2804      	cmp	r0, #4
 800724e:	d837      	bhi.n	80072c0 <_Cb_Lora_IRQ+0x84>
 8007250:	f7f8 ff6c 	bl	800012c <__gnu_thumb1_case_uqi>
 8007254:	4b8d6003 	.word	0x4b8d6003
 8007258:	5b          	.byte	0x5b
 8007259:	00          	.byte	0x00
				sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 800725a:	2701      	movs	r7, #1
				sModem.TimeTrySendAgain = 0;
 800725c:	2600      	movs	r6, #0
				sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 800725e:	4c47      	ldr	r4, [pc, #284]	; (800737c <_Cb_Lora_IRQ+0x140>)
				Reset_Buff(&sModem.sBackup);
 8007260:	4847      	ldr	r0, [pc, #284]	; (8007380 <_Cb_Lora_IRQ+0x144>)
				sModem.TimeTrySendAgain = 0;
 8007262:	1de3      	adds	r3, r4, #7
				sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 8007264:	84a7      	strh	r7, [r4, #36]	; 0x24
				sModem.TimeTrySendAgain = 0;
 8007266:	77de      	strb	r6, [r3, #31]
				Reset_Buff(&sModem.sBackup);
 8007268:	f002 fff4 	bl	800a254 <Reset_Buff>
	        	LOG(LOG_DEBUG, "OnRxDone");
 800726c:	0038      	movs	r0, r7
 800726e:	4945      	ldr	r1, [pc, #276]	; (8007384 <_Cb_Lora_IRQ+0x148>)
 8007270:	f003 f828 	bl	800a2c4 <LOG>
	        	if (Protocol_Extract_Rx(BufferRx, RxBufferSize, 0, &sLoraVar.sFrameRx) == TRUE)
 8007274:	9a01      	ldr	r2, [sp, #4]
 8007276:	4b44      	ldr	r3, [pc, #272]	; (8007388 <_Cb_Lora_IRQ+0x14c>)
 8007278:	7891      	ldrb	r1, [r2, #2]
 800727a:	4844      	ldr	r0, [pc, #272]	; (800738c <_Cb_Lora_IRQ+0x150>)
 800727c:	0032      	movs	r2, r6
 800727e:	3310      	adds	r3, #16
 8007280:	f001 ff98 	bl	80091b4 <Protocol_Extract_Rx>
					LOG(LOG_DEBUG, "Protocol Process Done!");
 8007284:	4942      	ldr	r1, [pc, #264]	; (8007390 <_Cb_Lora_IRQ+0x154>)
	        	if (Protocol_Extract_Rx(BufferRx, RxBufferSize, 0, &sLoraVar.sFrameRx) == TRUE)
 8007286:	42b8      	cmp	r0, r7
 8007288:	d041      	beq.n	800730e <_Cb_Lora_IRQ+0xd2>
					if (sModem.Mode_Node == 0)
 800728a:	0026      	movs	r6, r4
 800728c:	7e63      	ldrb	r3, [r4, #25]
			        	Radio.Rx(RX_TIMEOUT_VALUE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 800728e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8007290:	ad02      	add	r5, sp, #8
			        	sModem.RxTimeAfter = SysTimeGet();
 8007292:	0028      	movs	r0, r5
 8007294:	3630      	adds	r6, #48	; 0x30
					if (sModem.Mode_Node == 0)
 8007296:	2b00      	cmp	r3, #0
 8007298:	d115      	bne.n	80072c6 <_Cb_Lora_IRQ+0x8a>
			        	sModem.RxTimeAfter = SysTimeGet();
 800729a:	f003 fa0f 	bl	800a6bc <SysTimeGet>
 800729e:	cd06      	ldmia	r5!, {r1, r2}
 80072a0:	c606      	stmia	r6!, {r1, r2}
			        	Radio.Rx(RX_TIMEOUT_VALUE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 80072a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	23fa      	movs	r3, #250	; 0xfa
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4353      	muls	r3, r2
 80072ae:	2134      	movs	r1, #52	; 0x34
 80072b0:	5e62      	ldrsh	r2, [r4, r1]
 80072b2:	202c      	movs	r0, #44	; 0x2c
 80072b4:	5e21      	ldrsh	r1, [r4, r0]
 80072b6:	4837      	ldr	r0, [pc, #220]	; (8007394 <_Cb_Lora_IRQ+0x158>)
 80072b8:	1a52      	subs	r2, r2, r1
 80072ba:	189b      	adds	r3, r3, r2
			        	Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 80072bc:	1ac0      	subs	r0, r0, r3
 80072be:	47b8      	blx	r7
}
 80072c0:	2001      	movs	r0, #1
 80072c2:	b005      	add	sp, #20
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			        	sModem.RxTimeAfter = SysTimeGet();
 80072c6:	f003 f9f9 	bl	800a6bc <SysTimeGet>
 80072ca:	cd06      	ldmia	r5!, {r1, r2}
 80072cc:	c606      	stmia	r6!, {r1, r2}
			        	Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 80072ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	23fa      	movs	r3, #250	; 0xfa
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4353      	muls	r3, r2
 80072da:	2134      	movs	r1, #52	; 0x34
 80072dc:	5e62      	ldrsh	r2, [r4, r1]
 80072de:	202c      	movs	r0, #44	; 0x2c
 80072e0:	5e21      	ldrsh	r1, [r4, r0]
 80072e2:	482d      	ldr	r0, [pc, #180]	; (8007398 <_Cb_Lora_IRQ+0x15c>)
 80072e4:	1a52      	subs	r2, r2, r1
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	e7e8      	b.n	80072bc <_Cb_Lora_IRQ+0x80>
        	LOG(LOG_DEBUG, "OnTxDone");
 80072ea:	492c      	ldr	r1, [pc, #176]	; (800739c <_Cb_Lora_IRQ+0x160>)
 80072ec:	2001      	movs	r0, #1
 80072ee:	f002 ffe9 	bl	800a2c4 <LOG>
        	sModem.RxTimeBefore = SysTimeGet();
 80072f2:	4c22      	ldr	r4, [pc, #136]	; (800737c <_Cb_Lora_IRQ+0x140>)
 80072f4:	ae02      	add	r6, sp, #8
 80072f6:	0030      	movs	r0, r6
 80072f8:	3428      	adds	r4, #40	; 0x28
 80072fa:	f003 f9df 	bl	800a6bc <SysTimeGet>
 80072fe:	ce06      	ldmia	r6!, {r1, r2}
 8007300:	c406      	stmia	r4!, {r1, r2}
            Radio.Rx(RX_TIMEOUT_VALUE);
 8007302:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007304:	4823      	ldr	r0, [pc, #140]	; (8007394 <_Cb_Lora_IRQ+0x158>)
 8007306:	4798      	blx	r3
            break;
 8007308:	e7da      	b.n	80072c0 <_Cb_Lora_IRQ+0x84>
        	LOG(LOG_DEBUG, "OnTxTimeOut");
 800730a:	2001      	movs	r0, #1
 800730c:	4924      	ldr	r1, [pc, #144]	; (80073a0 <_Cb_Lora_IRQ+0x164>)
 800730e:	f002 ffd9 	bl	800a2c4 <LOG>
            break;
 8007312:	e7d5      	b.n	80072c0 <_Cb_Lora_IRQ+0x84>
        	LOG(LOG_DEBUG, "OnRxTimeOut");
 8007314:	4923      	ldr	r1, [pc, #140]	; (80073a4 <_Cb_Lora_IRQ+0x168>)
        	LOG(LOG_DEBUG, "OnRxError");
 8007316:	2001      	movs	r0, #1
 8007318:	f002 ffd4 	bl	800a2c4 <LOG>
				if (sModem.bNeedConfirm == DATA_CONFIRMED_UP)
 800731c:	4e17      	ldr	r6, [pc, #92]	; (800737c <_Cb_Lora_IRQ+0x140>)
 800731e:	1d73      	adds	r3, r6, #5
 8007320:	7fdb      	ldrb	r3, [r3, #31]
 8007322:	2b03      	cmp	r3, #3
 8007324:	d11f      	bne.n	8007366 <_Cb_Lora_IRQ+0x12a>
					LOG(LOG_INFOR, "Time retry: %d", sModem.TimeTrySendAgain);
 8007326:	1df4      	adds	r4, r6, #7
 8007328:	2004      	movs	r0, #4
 800732a:	7fe2      	ldrb	r2, [r4, #31]
 800732c:	491e      	ldr	r1, [pc, #120]	; (80073a8 <_Cb_Lora_IRQ+0x16c>)
 800732e:	f002 ffc9 	bl	800a2c4 <LOG>
					if (sModem.TimeTrySendAgain < 2)
 8007332:	7fe3      	ldrb	r3, [r4, #31]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d808      	bhi.n	800734a <_Cb_Lora_IRQ+0x10e>
						Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 8007338:	8c31      	ldrh	r1, [r6, #32]
 800733a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800733c:	69f0      	ldr	r0, [r6, #28]
 800733e:	b2c9      	uxtb	r1, r1
 8007340:	4798      	blx	r3
						sModem.TimeTrySendAgain++;
 8007342:	7fe3      	ldrb	r3, [r4, #31]
 8007344:	3301      	adds	r3, #1
 8007346:	77e3      	strb	r3, [r4, #31]
 8007348:	e7ba      	b.n	80072c0 <_Cb_Lora_IRQ+0x84>
						sModem.Mode_Node = 0;
 800734a:	2200      	movs	r2, #0
						sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 800734c:	2101      	movs	r1, #1
						sModem.Mode_Node = 0;
 800734e:	4b0b      	ldr	r3, [pc, #44]	; (800737c <_Cb_Lora_IRQ+0x140>)
						Reset_Buff(&sModem.sBackup);
 8007350:	480b      	ldr	r0, [pc, #44]	; (8007380 <_Cb_Lora_IRQ+0x144>)
						sModem.Mode_Node = 0;
 8007352:	765a      	strb	r2, [r3, #25]
						sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 8007354:	8499      	strh	r1, [r3, #36]	; 0x24
						sModem.TimeTrySendAgain = 0;
 8007356:	3307      	adds	r3, #7
 8007358:	77da      	strb	r2, [r3, #31]
						Reset_Buff(&sModem.sBackup);
 800735a:	f002 ff7b 	bl	800a254 <Reset_Buff>
					UTIL_TIMER_Start (&TimerLoraTx);
 800735e:	4813      	ldr	r0, [pc, #76]	; (80073ac <_Cb_Lora_IRQ+0x170>)
 8007360:	f002 fea0 	bl	800a0a4 <UTIL_TIMER_Start>
 8007364:	e7ac      	b.n	80072c0 <_Cb_Lora_IRQ+0x84>
					sModem.Mode_Node = 0;
 8007366:	2200      	movs	r2, #0
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <_Cb_Lora_IRQ+0x140>)
 800736a:	765a      	strb	r2, [r3, #25]
 800736c:	e7f7      	b.n	800735e <_Cb_Lora_IRQ+0x122>
        	LOG(LOG_DEBUG, "OnRxError");
 800736e:	4910      	ldr	r1, [pc, #64]	; (80073b0 <_Cb_Lora_IRQ+0x174>)
 8007370:	e7d1      	b.n	8007316 <_Cb_Lora_IRQ+0xda>
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	0800b4d0 	.word	0x0800b4d0
 8007378:	20000594 	.word	0x20000594
 800737c:	200001fc 	.word	0x200001fc
 8007380:	20000218 	.word	0x20000218
 8007384:	0800b784 	.word	0x0800b784
 8007388:	200000a4 	.word	0x200000a4
 800738c:	200008e4 	.word	0x200008e4
 8007390:	0800b78d 	.word	0x0800b78d
 8007394:	00001388 	.word	0x00001388
 8007398:	000186a0 	.word	0x000186a0
 800739c:	0800b7a4 	.word	0x0800b7a4
 80073a0:	0800b7ad 	.word	0x0800b7ad
 80073a4:	0800b7b9 	.word	0x0800b7b9
 80073a8:	0800b7c5 	.word	0x0800b7c5
 80073ac:	20000578 	.word	0x20000578
 80073b0:	0800b7d4 	.word	0x0800b7d4

080073b4 <OnRxError>:
    Radio.Sleep();
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <OnRxError+0x1c>)
{
 80073b6:	b510      	push	{r4, lr}
    Radio.Sleep();
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4798      	blx	r3
    State = RX_ERROR;
 80073bc:	2202      	movs	r2, #2
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073be:	4805      	ldr	r0, [pc, #20]	; (80073d4 <OnRxError+0x20>)
    State = RX_ERROR;
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <OnRxError+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073c2:	2101      	movs	r1, #1
 80073c4:	3024      	adds	r0, #36	; 0x24
    State = RX_ERROR;
 80073c6:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073c8:	f002 f984 	bl	80096d4 <fevent_active>
}
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	0800b4d0 	.word	0x0800b4d0
 80073d4:	200000a4 	.word	0x200000a4
 80073d8:	20000594 	.word	0x20000594

080073dc <OnRxTimeout>:
    Radio.Sleep();
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <OnRxTimeout+0x18>)
{
 80073de:	b510      	push	{r4, lr}
    Radio.Sleep();
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	4798      	blx	r3
    State = RX_TIMEOUT;
 80073e4:	2101      	movs	r1, #1
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073e6:	4804      	ldr	r0, [pc, #16]	; (80073f8 <OnRxTimeout+0x1c>)
    State = RX_TIMEOUT;
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <OnRxTimeout+0x20>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073ea:	3024      	adds	r0, #36	; 0x24
    State = RX_TIMEOUT;
 80073ec:	7019      	strb	r1, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073ee:	f002 f971 	bl	80096d4 <fevent_active>
}
 80073f2:	bd10      	pop	{r4, pc}
 80073f4:	0800b4d0 	.word	0x0800b4d0
 80073f8:	200000a4 	.word	0x200000a4
 80073fc:	20000594 	.word	0x20000594

08007400 <OnTxTimeout>:
    Radio.Sleep();
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <OnTxTimeout+0x1c>)
{
 8007402:	b510      	push	{r4, lr}
    Radio.Sleep();
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	4798      	blx	r3
    State = TX_TIMEOUT;
 8007408:	2204      	movs	r2, #4
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800740a:	4805      	ldr	r0, [pc, #20]	; (8007420 <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <OnTxTimeout+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800740e:	2101      	movs	r1, #1
 8007410:	3024      	adds	r0, #36	; 0x24
    State = TX_TIMEOUT;
 8007412:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007414:	f002 f95e 	bl	80096d4 <fevent_active>
}
 8007418:	bd10      	pop	{r4, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	0800b4d0 	.word	0x0800b4d0
 8007420:	200000a4 	.word	0x200000a4
 8007424:	20000594 	.word	0x20000594

08007428 <OnTxDone>:
    Radio.Sleep();
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <OnTxDone+0x1c>)
{
 800742a:	b510      	push	{r4, lr}
    Radio.Sleep();
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	4798      	blx	r3
    State = TX;
 8007430:	2203      	movs	r2, #3
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007432:	4805      	ldr	r0, [pc, #20]	; (8007448 <OnTxDone+0x20>)
    State = TX;
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <OnTxDone+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007436:	2101      	movs	r1, #1
 8007438:	3024      	adds	r0, #36	; 0x24
    State = TX;
 800743a:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800743c:	f002 f94a 	bl	80096d4 <fevent_active>
}
 8007440:	bd10      	pop	{r4, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	0800b4d0 	.word	0x0800b4d0
 8007448:	200000a4 	.word	0x200000a4
 800744c:	20000594 	.word	0x20000594

08007450 <OnRxDone>:
{
 8007450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007452:	9301      	str	r3, [sp, #4]
    Radio.Sleep();
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <OnRxDone+0x44>)
{
 8007456:	000c      	movs	r4, r1
    Radio.Sleep();
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800745a:	0006      	movs	r6, r0
 800745c:	9200      	str	r2, [sp, #0]
    Radio.Sleep();
 800745e:	4798      	blx	r3
    State = RX;
 8007460:	2100      	movs	r1, #0
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8007462:	4f0d      	ldr	r7, [pc, #52]	; (8007498 <OnRxDone+0x48>)
    State = RX;
 8007464:	4d0d      	ldr	r5, [pc, #52]	; (800749c <OnRxDone+0x4c>)
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8007466:	22ff      	movs	r2, #255	; 0xff
 8007468:	0038      	movs	r0, r7
    State = RX;
 800746a:	7029      	strb	r1, [r5, #0]
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800746c:	f003 fae4 	bl	800aa38 <memset>
    RxBufferSize = size;
 8007470:	806c      	strh	r4, [r5, #2]
    if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 8007472:	2cff      	cmp	r4, #255	; 0xff
 8007474:	d804      	bhi.n	8007480 <OnRxDone+0x30>
        memcpy(BufferRx, payload, RxBufferSize);
 8007476:	0022      	movs	r2, r4
 8007478:	0031      	movs	r1, r6
 800747a:	0038      	movs	r0, r7
 800747c:	f003 fb10 	bl	800aaa0 <memcpy>
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 8007480:	4807      	ldr	r0, [pc, #28]	; (80074a0 <OnRxDone+0x50>)
 8007482:	9b01      	ldr	r3, [sp, #4]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007484:	2101      	movs	r1, #1
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 8007486:	7043      	strb	r3, [r0, #1]
    sLoraVar.Rssi_u8 = rssi;
 8007488:	9b00      	ldr	r3, [sp, #0]
 800748a:	7003      	strb	r3, [r0, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800748c:	3024      	adds	r0, #36	; 0x24
 800748e:	f002 f921 	bl	80096d4 <fevent_active>
}
 8007492:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007494:	0800b4d0 	.word	0x0800b4d0
 8007498:	200008e4 	.word	0x200008e4
 800749c:	20000594 	.word	0x20000594
 80074a0:	200000a4 	.word	0x200000a4

080074a4 <AppLora_Init>:
{
 80074a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioEvents.TxDone = 	OnTxDone;
 80074a6:	4b30      	ldr	r3, [pc, #192]	; (8007568 <AppLora_Init+0xc4>)
 80074a8:	4d30      	ldr	r5, [pc, #192]	; (800756c <AppLora_Init+0xc8>)
{
 80074aa:	b08d      	sub	sp, #52	; 0x34
    RadioEvents.TxDone = 	OnTxDone;
 80074ac:	606b      	str	r3, [r5, #4]
    RadioEvents.RxDone = 	OnRxDone;
 80074ae:	4b30      	ldr	r3, [pc, #192]	; (8007570 <AppLora_Init+0xcc>)
    Radio.Init(&RadioEvents);
 80074b0:	1d28      	adds	r0, r5, #4
    RadioEvents.RxDone = 	OnRxDone;
 80074b2:	60eb      	str	r3, [r5, #12]
    RadioEvents.TxTimeout = OnTxTimeout;
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <AppLora_Init+0xd0>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80074b6:	2400      	movs	r4, #0
    RadioEvents.TxTimeout = OnTxTimeout;
 80074b8:	60ab      	str	r3, [r5, #8]
    RadioEvents.RxTimeout = OnRxTimeout;
 80074ba:	4b2f      	ldr	r3, [pc, #188]	; (8007578 <AppLora_Init+0xd4>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80074bc:	2701      	movs	r7, #1
    RadioEvents.RxTimeout = OnRxTimeout;
 80074be:	612b      	str	r3, [r5, #16]
    RadioEvents.RxError = 	OnRxError;
 80074c0:	4b2e      	ldr	r3, [pc, #184]	; (800757c <AppLora_Init+0xd8>)
 80074c2:	616b      	str	r3, [r5, #20]
    Radio.Init(&RadioEvents);
 80074c4:	4b2e      	ldr	r3, [pc, #184]	; (8007580 <AppLora_Init+0xdc>)
 80074c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4798      	blx	r3
    random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 80074cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 80074d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d4:	482b      	ldr	r0, [pc, #172]	; (8007584 <AppLora_Init+0xe0>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80074da:	4b2b      	ldr	r3, [pc, #172]	; (8007588 <AppLora_Init+0xe4>)
 80074dc:	220a      	movs	r2, #10
 80074de:	9308      	str	r3, [sp, #32]
 80074e0:	2308      	movs	r3, #8
 80074e2:	9302      	str	r3, [sp, #8]
 80074e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e6:	9200      	str	r2, [sp, #0]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	0038      	movs	r0, r7
 80074ec:	0016      	movs	r6, r2
 80074ee:	0023      	movs	r3, r4
 80074f0:	0022      	movs	r2, r4
 80074f2:	9704      	str	r7, [sp, #16]
 80074f4:	9701      	str	r7, [sp, #4]
 80074f6:	2113      	movs	r1, #19
 80074f8:	9407      	str	r4, [sp, #28]
 80074fa:	9406      	str	r4, [sp, #24]
 80074fc:	9405      	str	r4, [sp, #20]
 80074fe:	9403      	str	r4, [sp, #12]
 8007500:	47b0      	blx	r6
		Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8007502:	2305      	movs	r3, #5
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	3303      	adds	r3, #3
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750c:	220a      	movs	r2, #10
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	0021      	movs	r1, r4
 8007512:	001e      	movs	r6, r3
 8007514:	0038      	movs	r0, r7
 8007516:	003b      	movs	r3, r7
 8007518:	9709      	str	r7, [sp, #36]	; 0x24
 800751a:	9705      	str	r7, [sp, #20]
 800751c:	9408      	str	r4, [sp, #32]
 800751e:	9407      	str	r4, [sp, #28]
 8007520:	9406      	str	r4, [sp, #24]
 8007522:	9404      	str	r4, [sp, #16]
 8007524:	9403      	str	r4, [sp, #12]
 8007526:	9400      	str	r4, [sp, #0]
 8007528:	47b0      	blx	r6
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800752a:	0038      	movs	r0, r7
	UTIL_TIMER_Create(&TimerLed1, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Led_Event, NULL);
 800752c:	2601      	movs	r6, #1
 800752e:	002f      	movs	r7, r5
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8007530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	UTIL_TIMER_Create(&TimerLed1, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Led_Event, NULL);
 8007532:	4276      	negs	r6, r6
 8007534:	3720      	adds	r7, #32
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8007536:	21ff      	movs	r1, #255	; 0xff
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	4798      	blx	r3
	UTIL_TIMER_Create(&TimerLed1, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Led_Event, NULL);
 800753c:	0022      	movs	r2, r4
 800753e:	0031      	movs	r1, r6
 8007540:	4b12      	ldr	r3, [pc, #72]	; (800758c <AppLora_Init+0xe8>)
 8007542:	0038      	movs	r0, r7
 8007544:	9400      	str	r4, [sp, #0]
 8007546:	f002 fcfd 	bl	8009f44 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&TimerLed1, LED_PERIOD_MS);
 800754a:	21fa      	movs	r1, #250	; 0xfa
 800754c:	0038      	movs	r0, r7
 800754e:	0049      	lsls	r1, r1, #1
 8007550:	f002 fde0 	bl	800a114 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Create(&TimerLoraTxAgain, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Lora_Tx_Again, NULL);
 8007554:	0028      	movs	r0, r5
 8007556:	0022      	movs	r2, r4
 8007558:	0031      	movs	r1, r6
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <AppLora_Init+0xec>)
 800755c:	9400      	str	r4, [sp, #0]
 800755e:	3038      	adds	r0, #56	; 0x38
 8007560:	f002 fcf0 	bl	8009f44 <UTIL_TIMER_Create>
}
 8007564:	b00d      	add	sp, #52	; 0x34
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	08007429 	.word	0x08007429
 800756c:	20000594 	.word	0x20000594
 8007570:	08007451 	.word	0x08007451
 8007574:	08007401 	.word	0x08007401
 8007578:	080073dd 	.word	0x080073dd
 800757c:	080073b5 	.word	0x080073b5
 8007580:	0800b4d0 	.word	0x0800b4d0
 8007584:	3703dcc0 	.word	0x3703dcc0
 8007588:	00001388 	.word	0x00001388
 800758c:	08007239 	.word	0x08007239
 8007590:	0800779d 	.word	0x0800779d

08007594 <AppLora_Send>:
{
 8007594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007596:	b085      	sub	sp, #20
 8007598:	000e      	movs	r6, r1
 800759a:	0007      	movs	r7, r0
 800759c:	0011      	movs	r1, r2
 800759e:	ad01      	add	r5, sp, #4
 80075a0:	001a      	movs	r2, r3
    if (Length != 0) // Co payload
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	d040      	beq.n	8007628 <AppLora_Send+0x94>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, DataType);
 80075a6:	0028      	movs	r0, r5
 80075a8:	f001 fe5e 	bl	8009268 <Protocol_Packet_Header>
        UTIL_MEM_set( aLORA_TX, 0, sizeof(aLORA_TX) );
 80075ac:	4c27      	ldr	r4, [pc, #156]	; (800764c <AppLora_Send+0xb8>)
 80075ae:	22ff      	movs	r2, #255	; 0xff
 80075b0:	2100      	movs	r1, #0
 80075b2:	0020      	movs	r0, r4
 80075b4:	f002 fe82 	bl	800a2bc <UTIL_MEM_set>
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 80075b8:	782b      	ldrb	r3, [r5, #0]
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 80075ba:	4925      	ldr	r1, [pc, #148]	; (8007650 <AppLora_Send+0xbc>)
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 80075bc:	7023      	strb	r3, [r4, #0]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 24);
 80075be:	686b      	ldr	r3, [r5, #4]
 80075c0:	0e1a      	lsrs	r2, r3, #24
 80075c2:	7062      	strb	r2, [r4, #1]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 16);
 80075c4:	0c1a      	lsrs	r2, r3, #16
 80075c6:	70a2      	strb	r2, [r4, #2]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.DevAddr;
 80075c8:	7123      	strb	r3, [r4, #4]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 80075ca:	0a1a      	lsrs	r2, r3, #8
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 80075cc:	68ab      	ldr	r3, [r5, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 80075ce:	70e2      	strb	r2, [r4, #3]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 80075d0:	0e1a      	lsrs	r2, r3, #24
 80075d2:	7162      	strb	r2, [r4, #5]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 16);
 80075d4:	0c1a      	lsrs	r2, r3, #16
 80075d6:	71a2      	strb	r2, [r4, #6]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.NetAddr;
 80075d8:	7223      	strb	r3, [r4, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 80075da:	0a1a      	lsrs	r2, r3, #8
        for (i = 0; i < Length; i++)
 80075dc:	2300      	movs	r3, #0
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 80075de:	71e2      	strb	r2, [r4, #7]
        for (i = 0; i < Length; i++)
 80075e0:	001d      	movs	r5, r3
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	3509      	adds	r5, #9
 80075e6:	b2ad      	uxth	r5, r5
 80075e8:	42b2      	cmp	r2, r6
 80075ea:	d326      	bcc.n	800763a <AppLora_Send+0xa6>
        LOG_Array(LOG_TRANS, sMessTx.Data_a8, sMessTx.Length_u16);
 80075ec:	002a      	movs	r2, r5
 80075ee:	0021      	movs	r1, r4
 80075f0:	2002      	movs	r0, #2
 80075f2:	f002 feb1 	bl	800a358 <LOG_Array>
        for (i = 0; i < sMessTx.Length_u16; i++)
 80075f6:	2200      	movs	r2, #0
        	*(sModem.sBackup.Data_a8 + i) = *(sMessTx.Data_a8 + i);
 80075f8:	4916      	ldr	r1, [pc, #88]	; (8007654 <AppLora_Send+0xc0>)
 80075fa:	5ca0      	ldrb	r0, [r4, r2]
 80075fc:	69cb      	ldr	r3, [r1, #28]
 80075fe:	5498      	strb	r0, [r3, r2]
        for (i = 0; i < sMessTx.Length_u16; i++)
 8007600:	1c53      	adds	r3, r2, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	b2db      	uxtb	r3, r3
 8007606:	429d      	cmp	r5, r3
 8007608:	d8f7      	bhi.n	80075fa <AppLora_Send+0x66>
        HAL_Delay(delay);
 800760a:	980a      	ldr	r0, [sp, #40]	; 0x28
        sModem.sBackup.Length_u16 = sMessTx.Length_u16;
 800760c:	840d      	strh	r5, [r1, #32]
        HAL_Delay(delay);
 800760e:	f7fb fa81 	bl	8002b14 <HAL_Delay>
        LOG(LOG_DEBUG, "Lora Send");
 8007612:	2001      	movs	r0, #1
 8007614:	4910      	ldr	r1, [pc, #64]	; (8007658 <AppLora_Send+0xc4>)
 8007616:	f002 fe55 	bl	800a2c4 <LOG>
        Radio.Send(sMessTx.Data_a8, sMessTx.Length_u16);
 800761a:	4b10      	ldr	r3, [pc, #64]	; (800765c <AppLora_Send+0xc8>)
 800761c:	0020      	movs	r0, r4
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	b2e9      	uxtb	r1, r5
 8007622:	4798      	blx	r3
        return 1;
 8007624:	2601      	movs	r6, #1
 8007626:	e005      	b.n	8007634 <AppLora_Send+0xa0>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, _DATA_NONE);
 8007628:	0032      	movs	r2, r6
 800762a:	0028      	movs	r0, r5
 800762c:	f001 fe1c 	bl	8009268 <Protocol_Packet_Header>
    if ( (Length != 0) || (CheckACKRequest == TRUE) )
 8007630:	2801      	cmp	r0, #1
 8007632:	d0bb      	beq.n	80075ac <AppLora_Send+0x18>
}
 8007634:	0030      	movs	r0, r6
 8007636:	b005      	add	sp, #20
 8007638:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (sMessTx.Length_u16 >= sizeof(aLORA_TX) )
 800763a:	2bf6      	cmp	r3, #246	; 0xf6
 800763c:	d003      	beq.n	8007646 <AppLora_Send+0xb2>
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 800763e:	5cfa      	ldrb	r2, [r7, r3]
 8007640:	54ca      	strb	r2, [r1, r3]
        for (i = 0; i < Length; i++)
 8007642:	3301      	adds	r3, #1
 8007644:	e7cc      	b.n	80075e0 <AppLora_Send+0x4c>
 8007646:	25ff      	movs	r5, #255	; 0xff
 8007648:	e7d0      	b.n	80075ec <AppLora_Send+0x58>
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	200007e5 	.word	0x200007e5
 8007650:	200007ee 	.word	0x200007ee
 8007654:	200001fc 	.word	0x200001fc
 8007658:	0800b7de 	.word	0x0800b7de
 800765c:	0800b4d0 	.word	0x0800b4d0

08007660 <AppLora_Task>:
{
 8007660:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < _EVENT_LORA_END; i++)
 8007662:	2500      	movs	r5, #0
 8007664:	4c0f      	ldr	r4, [pc, #60]	; (80076a4 <AppLora_Task+0x44>)
 8007666:	3424      	adds	r4, #36	; 0x24
		if (sEventAppLora[i].e_status == 1)
 8007668:	7863      	ldrb	r3, [r4, #1]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10a      	bne.n	8007684 <AppLora_Task+0x24>
			if ((sEventAppLora[i].e_systick == 0) ||
 800766e:	6863      	ldr	r3, [r4, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10e      	bne.n	8007692 <AppLora_Task+0x32>
                sEventAppLora[i].e_status = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	7063      	strb	r3, [r4, #1]
				sEventAppLora[i].e_systick = HAL_GetTick();
 8007678:	f7fb fa46 	bl	8002b08 <HAL_GetTick>
				sEventAppLora[i].e_function_handler(i);
 800767c:	68e3      	ldr	r3, [r4, #12]
				sEventAppLora[i].e_systick = HAL_GetTick();
 800767e:	6060      	str	r0, [r4, #4]
				sEventAppLora[i].e_function_handler(i);
 8007680:	0028      	movs	r0, r5
 8007682:	4798      	blx	r3
	for (i = 0; i < _EVENT_LORA_END; i++)
 8007684:	3501      	adds	r5, #1
 8007686:	b2ed      	uxtb	r5, r5
 8007688:	3410      	adds	r4, #16
 800768a:	2d03      	cmp	r5, #3
 800768c:	d1ec      	bne.n	8007668 <AppLora_Task+0x8>
}
 800768e:	2000      	movs	r0, #0
 8007690:	bd70      	pop	{r4, r5, r6, pc}
					((HAL_GetTick() - sEventAppLora[i].e_systick)  >=  sEventAppLora[i].e_period))
 8007692:	f7fb fa39 	bl	8002b08 <HAL_GetTick>
 8007696:	6863      	ldr	r3, [r4, #4]
 8007698:	1ac0      	subs	r0, r0, r3
			if ((sEventAppLora[i].e_systick == 0) ||
 800769a:	68a3      	ldr	r3, [r4, #8]
 800769c:	4298      	cmp	r0, r3
 800769e:	d2e9      	bcs.n	8007674 <AppLora_Task+0x14>
 80076a0:	e7f0      	b.n	8007684 <AppLora_Task+0x24>
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	200000a4 	.word	0x200000a4

080076a8 <AppLora_Check_New_Mess_Of_Device>:
{
 80076a8:	b510      	push	{r4, lr}
		if (sRecSingle.IndexSend_u16 != sRecSingle.IndexSave_u16)
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <AppLora_Check_New_Mess_Of_Device+0x48>)
 80076ac:	881a      	ldrh	r2, [r3, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d003      	beq.n	80076bc <AppLora_Check_New_Mess_Of_Device+0x14>
			sMessVar.aMARK[_MESS_SINGLE] = TRUE;
 80076b4:	2001      	movs	r0, #1
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <AppLora_Check_New_Mess_Of_Device+0x4c>)
 80076b8:	7058      	strb	r0, [r3, #1]
}
 80076ba:	bd10      	pop	{r4, pc}
		if (sRecMultiple.IndexSend_u16 != sRecMultiple.IndexSave_u16)
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <AppLora_Check_New_Mess_Of_Device+0x50>)
 80076be:	881a      	ldrh	r2, [r3, #0]
 80076c0:	885b      	ldrh	r3, [r3, #2]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d009      	beq.n	80076da <AppLora_Check_New_Mess_Of_Device+0x32>
	        APP_LOG(TS_OFF, VLEVEL_L, "user_lora.c: Check new multi message\r\n");
 80076c6:	2200      	movs	r2, #0
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <AppLora_Check_New_Mess_Of_Device+0x54>)
 80076ca:	0011      	movs	r1, r2
 80076cc:	2001      	movs	r0, #1
 80076ce:	f002 ff3d 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
			sMessVar.aMARK[_MESS_MULTI] = TRUE;
 80076d2:	2001      	movs	r0, #1
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <AppLora_Check_New_Mess_Of_Device+0x4c>)
 80076d6:	7098      	strb	r0, [r3, #2]
			return 1;
 80076d8:	e7ef      	b.n	80076ba <AppLora_Check_New_Mess_Of_Device+0x12>
		if (sRecMessage.IndexSend_u16 != sRecMessage.IndexSave_u16)
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <AppLora_Check_New_Mess_Of_Device+0x58>)
    return 0;
 80076dc:	2000      	movs	r0, #0
		if (sRecMessage.IndexSend_u16 != sRecMessage.IndexSave_u16)
 80076de:	881a      	ldrh	r2, [r3, #0]
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d0e9      	beq.n	80076ba <AppLora_Check_New_Mess_Of_Device+0x12>
			sMessVar.aMARK[_MESS_MODE] = TRUE;
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <AppLora_Check_New_Mess_Of_Device+0x4c>)
 80076e8:	3001      	adds	r0, #1
 80076ea:	70d8      	strb	r0, [r3, #3]
			return 1;
 80076ec:	e7e5      	b.n	80076ba <AppLora_Check_New_Mess_Of_Device+0x12>
 80076ee:	46c0      	nop			; (mov r8, r8)
 80076f0:	200001a8 	.word	0x200001a8
 80076f4:	20000168 	.word	0x20000168
 80076f8:	200001c4 	.word	0x200001c4
 80076fc:	0800b7e8 	.word	0x0800b7e8
 8007700:	200001e0 	.word	0x200001e0

08007704 <_Cb_Lora_Tx>:
{
 8007704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		sMessVar.sPayload.Length_u16 = 0;
 8007706:	2500      	movs	r5, #0
    Radio.Sleep();
 8007708:	4b1e      	ldr	r3, [pc, #120]	; (8007784 <_Cb_Lora_Tx+0x80>)
{
 800770a:	0007      	movs	r7, r0
    Radio.Sleep();
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	4798      	blx	r3
		sMessVar.sPayload.Length_u16 = 0;
 8007710:	4c1d      	ldr	r4, [pc, #116]	; (8007788 <_Cb_Lora_Tx+0x84>)
 8007712:	84a5      	strh	r5, [r4, #36]	; 0x24
		sMessVar.DataType_u8 = mCheck_Mess_Mark();
 8007714:	f001 f90a 	bl	800892c <mCheck_Mess_Mark>
 8007718:	0023      	movs	r3, r4
 800771a:	3328      	adds	r3, #40	; 0x28
 800771c:	7018      	strb	r0, [r3, #0]
		switch(sMessVar.DataType_u8)
 800771e:	3801      	subs	r0, #1
 8007720:	b2c0      	uxtb	r0, r0
 8007722:	2802      	cmp	r0, #2
 8007724:	d81b      	bhi.n	800775e <_Cb_Lora_Tx+0x5a>
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <_Cb_Lora_Tx+0x88>)
 8007728:	5c1e      	ldrb	r6, [r3, r0]
 800772a:	3303      	adds	r3, #3
 800772c:	5c1b      	ldrb	r3, [r3, r0]
		sMessVar.MessType_u8[sMessVar.DataType_u8] = RespondTypeDataSend_u8;
 800772e:	0022      	movs	r2, r4
 8007730:	3228      	adds	r2, #40	; 0x28
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	b252      	sxtb	r2, r2
 8007736:	18a2      	adds	r2, r4, r2
 8007738:	3233      	adds	r2, #51	; 0x33
 800773a:	7016      	strb	r6, [r2, #0]
		if (AppLora_Send(sMessVar.sPayload.Data_a8, sMessVar.sPayload.Length_u16, RespondTypeDataSend_u8, TypeDataLora, 100) == FALSE)
 800773c:	2264      	movs	r2, #100	; 0x64
 800773e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8007740:	9200      	str	r2, [sp, #0]
 8007742:	b2c9      	uxtb	r1, r1
 8007744:	0032      	movs	r2, r6
 8007746:	6a20      	ldr	r0, [r4, #32]
 8007748:	f7ff ff24 	bl	8007594 <AppLora_Send>
 800774c:	1e01      	subs	r1, r0, #0
 800774e:	d104      	bne.n	800775a <_Cb_Lora_Tx+0x56>
			APP_LOG(TS_OFF, VLEVEL_L, "user_lora.c: No data send\n\r");
 8007750:	0002      	movs	r2, r0
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <_Cb_Lora_Tx+0x8c>)
 8007754:	2001      	movs	r0, #1
 8007756:	f002 fef9 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
}
 800775a:	2001      	movs	r0, #1
 800775c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				APP_LOG(TS_OFF, VLEVEL_L, "user_lora.c: Event TX default\n\r");
 800775e:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <_Cb_Lora_Tx+0x90>)
 8007760:	002a      	movs	r2, r5
 8007762:	0029      	movs	r1, r5
 8007764:	2001      	movs	r0, #1
 8007766:	f002 fef1 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
                if (AppLora_Check_New_Mess_Of_Device() != FALSE)
 800776a:	f7ff ff9d 	bl	80076a8 <AppLora_Check_New_Mess_Of_Device>
				RespondTypeDataSend_u8 = DATA_UNCONFIRMED_UP;
 800776e:	2601      	movs	r6, #1
                if (AppLora_Check_New_Mess_Of_Device() != FALSE)
 8007770:	1e03      	subs	r3, r0, #0
 8007772:	d0dc      	beq.n	800772e <_Cb_Lora_Tx+0x2a>
                    fevent_enable(sEventAppLora, event);
 8007774:	4808      	ldr	r0, [pc, #32]	; (8007798 <_Cb_Lora_Tx+0x94>)
 8007776:	0039      	movs	r1, r7
 8007778:	3024      	adds	r0, #36	; 0x24
 800777a:	f001 ffb2 	bl	80096e2 <fevent_enable>
				TypeDataLora = _DATA_NONE;
 800777e:	002b      	movs	r3, r5
 8007780:	e7d5      	b.n	800772e <_Cb_Lora_Tx+0x2a>
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	0800b4d0 	.word	0x0800b4d0
 8007788:	20000168 	.word	0x20000168
 800778c:	0800b53c 	.word	0x0800b53c
 8007790:	0800b82f 	.word	0x0800b82f
 8007794:	0800b80f 	.word	0x0800b80f
 8007798:	200000a4 	.word	0x200000a4

0800779c <_Cb_Timer_Lora_Tx_Again>:
{
 800779c:	b510      	push	{r4, lr}
    if (AppLora_Check_New_Mess_Of_Device() != FALSE)
 800779e:	f7ff ff83 	bl	80076a8 <AppLora_Check_New_Mess_Of_Device>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d004      	beq.n	80077b0 <_Cb_Timer_Lora_Tx_Again+0x14>
        fevent_active(sEventAppLora, _EVENT_LORA_TX);
 80077a6:	4803      	ldr	r0, [pc, #12]	; (80077b4 <_Cb_Timer_Lora_Tx_Again+0x18>)
 80077a8:	2100      	movs	r1, #0
 80077aa:	3024      	adds	r0, #36	; 0x24
 80077ac:	f001 ff92 	bl	80096d4 <fevent_active>
}
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	200000a4 	.word	0x200000a4

080077b8 <AppLora_Set_Tx_Again>:
{
 80077b8:	b510      	push	{r4, lr}
    if (Time != 0)
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d009      	beq.n	80077d2 <AppLora_Set_Tx_Again+0x1a>
        UTIL_TIMER_SetPeriod(&TimerLoraTxAgain, Time);
 80077be:	4c06      	ldr	r4, [pc, #24]	; (80077d8 <AppLora_Set_Tx_Again+0x20>)
 80077c0:	0001      	movs	r1, r0
 80077c2:	3438      	adds	r4, #56	; 0x38
 80077c4:	0020      	movs	r0, r4
 80077c6:	f002 fca5 	bl	800a114 <UTIL_TIMER_SetPeriod>
        UTIL_TIMER_Start(&TimerLoraTxAgain);
 80077ca:	0020      	movs	r0, r4
 80077cc:	f002 fc6a 	bl	800a0a4 <UTIL_TIMER_Start>
}
 80077d0:	bd10      	pop	{r4, pc}
        _Cb_Timer_Lora_Tx_Again(NULL);
 80077d2:	f7ff ffe3 	bl	800779c <_Cb_Timer_Lora_Tx_Again>
}
 80077d6:	e7fb      	b.n	80077d0 <AppLora_Set_Tx_Again+0x18>
 80077d8:	20000594 	.word	0x20000594

080077dc <AppLora_Deinit_IO_Radio>:
{
 80077dc:	b510      	push	{r4, lr}
    Sx_Board_IoDeInit();
 80077de:	f7fb f825 	bl	800282c <CMWX1ZZABZ0XX_RADIO_IoDeInit>
}
 80077e2:	bd10      	pop	{r4, pc}

080077e4 <AppLora_Init_IO_Radio>:
{
 80077e4:	b510      	push	{r4, lr}
    Sx_Board_IoInit();
 80077e6:	f7fa ff47 	bl	8002678 <CMWX1ZZABZ0XX_RADIO_IoInit>
}
 80077ea:	bd10      	pop	{r4, pc}

080077ec <LED_ON>:

void LED_ON (eLed_TypeDef Led)
{
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <LED_ON+0x1c>)
 80077ee:	0042      	lsls	r2, r0, #1
{
 80077f0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 80077f2:	3306      	adds	r3, #6
 80077f4:	5ad1      	ldrh	r1, [r2, r3]
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <LED_ON+0x20>)
 80077f8:	0080      	lsls	r0, r0, #2
 80077fa:	181b      	adds	r3, r3, r0
 80077fc:	2200      	movs	r2, #0
 80077fe:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007800:	f7fc f860 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8007804:	bd10      	pop	{r4, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	0800b53c 	.word	0x0800b53c
 800780c:	200000a4 	.word	0x200000a4

08007810 <LED_OFF>:

void LED_OFF (eLed_TypeDef Led)
{
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <LED_OFF+0x1c>)
 8007812:	0042      	lsls	r2, r0, #1
{
 8007814:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 8007816:	3306      	adds	r3, #6
 8007818:	5ad1      	ldrh	r1, [r2, r3]
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <LED_OFF+0x20>)
 800781c:	0080      	lsls	r0, r0, #2
 800781e:	181b      	adds	r3, r3, r0
 8007820:	2201      	movs	r2, #1
 8007822:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007824:	f7fc f84e 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8007828:	bd10      	pop	{r4, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	0800b53c 	.word	0x0800b53c
 8007830:	200000a4 	.word	0x200000a4

08007834 <LED_TOGGLE>:

void LED_TOGGLE (eLed_TypeDef Led)
{
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <LED_TOGGLE+0x18>)
 8007836:	0042      	lsls	r2, r0, #1
{
 8007838:	b510      	push	{r4, lr}
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 800783a:	3306      	adds	r3, #6
 800783c:	5ad1      	ldrh	r1, [r2, r3]
 800783e:	4b04      	ldr	r3, [pc, #16]	; (8007850 <LED_TOGGLE+0x1c>)
 8007840:	0080      	lsls	r0, r0, #2
 8007842:	181b      	adds	r3, r3, r0
 8007844:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007846:	f7fc f843 	bl	80038d0 <HAL_GPIO_TogglePin>
}
 800784a:	bd10      	pop	{r4, pc}
 800784c:	0800b53c 	.word	0x0800b53c
 8007850:	200000a4 	.word	0x200000a4

08007854 <SysApp_Init>:
    sData   sFirmVersion = {(uint8_t *) "SVWM_LORA_NO_V1_1_0", 19};
#endif

/* Exported functions --------------------------------------------------------*/
void SysApp_Init (void)
{
 8007854:	b510      	push	{r4, lr}
	MX_GPIO_Init();
 8007856:	f001 fdb5 	bl	80093c4 <MX_GPIO_Init>

	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
		MX_USART2_UART_Init();
	#else
		MX_USART1_UART_Init();
 800785a:	f001 fe75 	bl	8009548 <MX_USART1_UART_Init>
		MX_ADC_Init();
 800785e:	f001 fd2d 	bl	80092bc <MX_ADC_Init>
		MX_I2C1_Init();
 8007862:	f001 fe07 	bl	8009474 <MX_I2C1_Init>
	#endif

	#ifdef USING_APP_LORA
		AppLora_Init ();
 8007866:	f7ff fe1d 	bl	80074a4 <AppLora_Init>
	#endif

	Get_RTC();
 800786a:	f002 fae7 	bl	8009e3c <Get_RTC>
	UTIL_LPM_Init();
 800786e:	f002 f871 	bl	8009954 <UTIL_LPM_Init>

	Init_Uart_Module();
 8007872:	f000 ff75 	bl	8008760 <Init_Uart_Module>
	Init_Memory_Infor();
 8007876:	f001 fa43 	bl	8008d00 <Init_Memory_Infor>
	AppCom_Init();
 800787a:	f7ff fcb1 	bl	80071e0 <AppCom_Init>

	#ifdef USING_APP_PACKET
		AppPacket_Init();
 800787e:	f000 f885 	bl	800798c <AppPacket_Init>
	#endif
}
 8007882:	bd10      	pop	{r4, pc}

08007884 <SysApp_Start>:

void SysApp_Start(void)
{
 8007884:	b513      	push	{r0, r1, r4, lr}
	UTIL_TIMER_Create(&TimerLoraTx,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Active_Lora_Tx_Event, NULL);
 8007886:	2200      	movs	r2, #0
 8007888:	2101      	movs	r1, #1
 800788a:	4c0c      	ldr	r4, [pc, #48]	; (80078bc <SysApp_Start+0x38>)
 800788c:	9200      	str	r2, [sp, #0]
 800788e:	0020      	movs	r0, r4
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <SysApp_Start+0x3c>)
 8007892:	4249      	negs	r1, r1
 8007894:	f002 fb56 	bl	8009f44 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000 + sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY);
 8007898:	21fa      	movs	r1, #250	; 0xfa
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <SysApp_Start+0x40>)
 800789c:	0089      	lsls	r1, r1, #2
 800789e:	885b      	ldrh	r3, [r3, #2]
 80078a0:	0020      	movs	r0, r4
 80078a2:	4359      	muls	r1, r3
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <SysApp_Start+0x44>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	18c9      	adds	r1, r1, r3
 80078ac:	f002 fc32 	bl	800a114 <UTIL_TIMER_SetPeriod>
	#ifdef DEVICE_TYPE_STATION
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
	#else
		Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <SysApp_Start+0x48>)
 80078b2:	4807      	ldr	r0, [pc, #28]	; (80078d0 <SysApp_Start+0x4c>)
 80078b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b6:	4798      	blx	r3
//		UTIL_TIMER_Start (&TimerLoraTx);
	#endif
}
 80078b8:	bd13      	pop	{r0, r1, r4, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	20000578 	.word	0x20000578
 80078c0:	08007211 	.word	0x08007211
 80078c4:	20000254 	.word	0x20000254
 80078c8:	200001fc 	.word	0x200001fc
 80078cc:	0800b4d0 	.word	0x0800b4d0
 80078d0:	000186a0 	.word	0x000186a0

080078d4 <Main_Task>:

void Main_Task (void)
{
 80078d4:	b510      	push	{r4, lr}
    uint8_t TaskStatus_u8 = 0;

    SysApp_Init();
 80078d6:	f7ff ffbd 	bl	8007854 <SysApp_Init>
    SysApp_Start();
 80078da:	f7ff ffd3 	bl	8007884 <SysApp_Start>
	LOG(LOG_DEBUG, "Main task start");
 80078de:	4914      	ldr	r1, [pc, #80]	; (8007930 <Main_Task+0x5c>)
 80078e0:	2001      	movs	r0, #1
 80078e2:	f002 fcef 	bl	800a2c4 <LOG>
	#ifdef DEVICE_TYPE_STATION
		fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
		LED_OFF(__LED_MODE);
	#else
		LED_OFF(__LED_MODE);
 80078e6:	2000      	movs	r0, #0
 80078e8:	f7ff ff92 	bl	8007810 <LED_OFF>
		LED_OFF(__LED_MEASURE);
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7ff ff8f 	bl	8007810 <LED_OFF>
		fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 80078f2:	2106      	movs	r1, #6
 80078f4:	480f      	ldr	r0, [pc, #60]	; (8007934 <Main_Task+0x60>)
 80078f6:	f001 fef4 	bl	80096e2 <fevent_enable>

	for (;;)
	{
		TaskStatus_u8 = 0;

		TaskStatus_u8 |= AppCom_Task();
 80078fa:	f7ff fc2f 	bl	800715c <AppCom_Task>
 80078fe:	0004      	movs	r4, r0

		#ifdef USING_APP_LORA
			TaskStatus_u8 |= AppLora_Task();
 8007900:	f7ff feae 	bl	8007660 <AppLora_Task>
 8007904:	4304      	orrs	r4, r0
		#endif

		#ifdef USING_APP_PACKET
			TaskStatus_u8 |= AppPacket_Task();
 8007906:	f000 f843 	bl	8007990 <AppPacket_Task>
		#endif

		#ifdef DEVICE_TYPE_STATION
		#else

			if ((TaskStatus_u8 == 0) && (sModem.Mode_Node == 0))
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <Main_Task+0x64>)
			TaskStatus_u8 |= AppLora_Task();
 800790c:	b2e4      	uxtb	r4, r4
			if ((TaskStatus_u8 == 0) && (sModem.Mode_Node == 0))
 800790e:	7e5b      	ldrb	r3, [r3, #25]
 8007910:	431c      	orrs	r4, r3
 8007912:	4304      	orrs	r4, r0
 8007914:	b2e4      	uxtb	r4, r4
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1ef      	bne.n	80078fa <Main_Task+0x26>
			{
				LOG(LOG_DEBUG, "Low power mode");
 800791a:	4908      	ldr	r1, [pc, #32]	; (800793c <Main_Task+0x68>)
 800791c:	2001      	movs	r0, #1
 800791e:	f002 fcd1 	bl	800a2c4 <LOG>
				UTIL_LPM_SetStopMode((UTIL_LPM_State_t) LPM_FALSE);
 8007922:	0020      	movs	r0, r4
 8007924:	f001 ffe8 	bl	80098f8 <UTIL_LPM_SetStopMode>
				UTIL_LPM_EnterLowPower();
 8007928:	f001 ffec 	bl	8009904 <UTIL_LPM_EnterLowPower>
 800792c:	e7e5      	b.n	80078fa <Main_Task+0x26>
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	0800b84b 	.word	0x0800b84b
 8007934:	20000024 	.word	0x20000024
 8007938:	200001fc 	.word	0x200001fc
 800793c:	0800b85b 	.word	0x0800b85b

08007940 <_Cb_Packet_RTC_Mode>:
			AppLora_Set_Tx_Again(0);
		#endif
	#else
	#endif
	return 1;
}
 8007940:	2001      	movs	r0, #1
 8007942:	4770      	bx	lr

08007944 <_Cb_Packet_Entry>:
{
 8007944:	b510      	push	{r4, lr}
		switch (sModem.Mode_Node)
 8007946:	4b0d      	ldr	r3, [pc, #52]	; (800797c <_Cb_Packet_Entry+0x38>)
 8007948:	7e59      	ldrb	r1, [r3, #25]
 800794a:	2900      	cmp	r1, #0
 800794c:	d003      	beq.n	8007956 <_Cb_Packet_Entry+0x12>
 800794e:	2902      	cmp	r1, #2
 8007950:	d00b      	beq.n	800796a <_Cb_Packet_Entry+0x26>
}
 8007952:	2001      	movs	r0, #1
 8007954:	bd10      	pop	{r4, pc}
				APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Entry measure single\n\r");
 8007956:	000a      	movs	r2, r1
 8007958:	2001      	movs	r0, #1
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <_Cb_Packet_Entry+0x3c>)
 800795c:	f002 fdf6 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
				fevent_active(sEventAppCom, _EVENT_MEAS_SINGLE);
 8007960:	2103      	movs	r1, #3
 8007962:	4808      	ldr	r0, [pc, #32]	; (8007984 <_Cb_Packet_Entry+0x40>)
				fevent_active(sEventAppCom, _EVENT_MEAS_MULTI);
 8007964:	f001 feb6 	bl	80096d4 <fevent_active>
				break;
 8007968:	e7f3      	b.n	8007952 <_Cb_Packet_Entry+0xe>
				APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Entry measure multiple\n\r");
 800796a:	2200      	movs	r2, #0
 800796c:	2001      	movs	r0, #1
 800796e:	0011      	movs	r1, r2
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <_Cb_Packet_Entry+0x44>)
 8007972:	f002 fdeb 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
				fevent_active(sEventAppCom, _EVENT_MEAS_MULTI);
 8007976:	2104      	movs	r1, #4
 8007978:	4802      	ldr	r0, [pc, #8]	; (8007984 <_Cb_Packet_Entry+0x40>)
 800797a:	e7f3      	b.n	8007964 <_Cb_Packet_Entry+0x20>
 800797c:	200001fc 	.word	0x200001fc
 8007980:	0800b87e 	.word	0x0800b87e
 8007984:	20000024 	.word	0x20000024
 8007988:	0800b8a4 	.word	0x0800b8a4

0800798c <AppPacket_Init>:
}
 800798c:	4770      	bx	lr
	...

08007990 <AppPacket_Task>:
	uint8_t Result = 0;
 8007990:	2000      	movs	r0, #0
{
 8007992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < _EVENT_END_PACKET; i++)
 8007994:	0005      	movs	r5, r0
            Result = 1;
 8007996:	2701      	movs	r7, #1
 8007998:	4c0f      	ldr	r4, [pc, #60]	; (80079d8 <AppPacket_Task+0x48>)
		if (sEventAppPacket[i].e_status == 1)
 800799a:	7866      	ldrb	r6, [r4, #1]
 800799c:	2e01      	cmp	r6, #1
 800799e:	d10b      	bne.n	80079b8 <AppPacket_Task+0x28>
			if ((sEventAppPacket[i].e_systick == 0) ||
 80079a0:	6863      	ldr	r3, [r4, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10e      	bne.n	80079c4 <AppPacket_Task+0x34>
                sEventAppPacket[i].e_status = 0;  //Disable event
 80079a6:	2300      	movs	r3, #0
 80079a8:	7063      	strb	r3, [r4, #1]
				sEventAppPacket[i].e_systick = HAL_GetTick();
 80079aa:	f7fb f8ad 	bl	8002b08 <HAL_GetTick>
				sEventAppPacket[i].e_function_handler(i);
 80079ae:	68e3      	ldr	r3, [r4, #12]
				sEventAppPacket[i].e_systick = HAL_GetTick();
 80079b0:	6060      	str	r0, [r4, #4]
				sEventAppPacket[i].e_function_handler(i);
 80079b2:	0028      	movs	r0, r5
 80079b4:	4798      	blx	r3
            Result = 1;
 80079b6:	0030      	movs	r0, r6
	for (i = 0; i < _EVENT_END_PACKET; i++)
 80079b8:	3501      	adds	r5, #1
 80079ba:	b2ed      	uxtb	r5, r5
 80079bc:	3410      	adds	r4, #16
 80079be:	2d05      	cmp	r5, #5
 80079c0:	d1eb      	bne.n	800799a <AppPacket_Task+0xa>
}
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					((HAL_GetTick() - sEventAppPacket[i].e_systick)  >=  sEventAppPacket[i].e_period))
 80079c4:	f7fb f8a0 	bl	8002b08 <HAL_GetTick>
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	1ac0      	subs	r0, r0, r3
			if ((sEventAppPacket[i].e_systick == 0) ||
 80079cc:	68a3      	ldr	r3, [r4, #8]
 80079ce:	4298      	cmp	r0, r3
 80079d0:	d2e9      	bcs.n	80079a6 <AppPacket_Task+0x16>
            Result = 1;
 80079d2:	0038      	movs	r0, r7
 80079d4:	e7f0      	b.n	80079b8 <AppPacket_Task+0x28>
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	20000110 	.word	0x20000110

080079dc <Packet_Single_Message>:

void Packet_Single_Message (void)
{
 80079dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t     pData[128] = {0};
 80079de:	2400      	movs	r4, #0
{
 80079e0:	b0a1      	sub	sp, #132	; 0x84
	uint8_t     pData[128] = {0};
 80079e2:	227c      	movs	r2, #124	; 0x7c
 80079e4:	0021      	movs	r1, r4
 80079e6:	a801      	add	r0, sp, #4
 80079e8:	9400      	str	r4, [sp, #0]
 80079ea:	f003 f825 	bl	800aa38 <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

    sModem.ValueBattery_u8 = Get_Vol_BAT();
 80079ee:	f000 fa49 	bl	8007e84 <Get_Vol_BAT>
 80079f2:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <Packet_Single_Message+0xc8>)

	pData[length++] = OBIS_ID_SENSOR;
 80079f4:	4669      	mov	r1, sp
    sModem.ValueBattery_u8 = Get_Vol_BAT();
 80079f6:	001a      	movs	r2, r3
 80079f8:	324c      	adds	r2, #76	; 0x4c
 80079fa:	8010      	strh	r0, [r2, #0]
	pData[length++] = OBIS_ID_SENSOR;
 80079fc:	2201      	movs	r2, #1
 80079fe:	700a      	strb	r2, [r1, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8007a00:	889d      	ldrh	r5, [r3, #4]
 8007a02:	b2ea      	uxtb	r2, r5
 8007a04:	704a      	strb	r2, [r1, #1]

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007a06:	6819      	ldr	r1, [r3, #0]
 8007a08:	468c      	mov	ip, r1
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007a0a:	0021      	movs	r1, r4
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007a0c:	1c8c      	adds	r4, r1, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007a0e:	b28e      	uxth	r6, r1
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007a10:	b2e4      	uxtb	r4, r4
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007a12:	42b5      	cmp	r5, r6
 8007a14:	d835      	bhi.n	8007a82 <Packet_Single_Message+0xa6>

	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8007a16:	7e1d      	ldrb	r5, [r3, #24]
 8007a18:	1c91      	adds	r1, r2, #2
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007a1a:	3203      	adds	r2, #3
 8007a1c:	b2c9      	uxtb	r1, r1
 8007a1e:	b2d2      	uxtb	r2, r2
	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	d134      	bne.n	8007a8e <Packet_Single_Message+0xb2>
	{
		pData[length++] = OBIS_VOL_VNA;
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
	{
		pData[length++] = OBIS_VOL_VNA;
 8007a24:	2107      	movs	r1, #7
 8007a26:	466d      	mov	r5, sp
 8007a28:	5529      	strb	r1, [r5, r4]
	}
	pData[length++] = 0x02;
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	466c      	mov	r4, sp
	pData[length++] = (sModem.ValueMeasure_u8 >> 8) & 0xFF;
 8007a2e:	466e      	mov	r6, sp
	pData[length++] = 0x02;
 8007a30:	54a1      	strb	r1, [r4, r2]
	pData[length++] = (sModem.ValueMeasure_u8 >> 8) & 0xFF;
 8007a32:	334a      	adds	r3, #74	; 0x4a
 8007a34:	881c      	ldrh	r4, [r3, #0]
	pData[length++] = 0x02;
 8007a36:	1c53      	adds	r3, r2, #1
	pData[length++] = (sModem.ValueMeasure_u8 >> 8) & 0xFF;
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	0a25      	lsrs	r5, r4, #8
 8007a3c:	54f5      	strb	r5, [r6, r3]
 8007a3e:	1853      	adds	r3, r2, r1
	pData[length++] = sModem.ValueMeasure_u8 & 0xFF;
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	54f4      	strb	r4, [r6, r3]

	pData[length++] = OBIS_VOL_BAT;
 8007a44:	2409      	movs	r4, #9
	pData[length++] = sModem.ValueMeasure_u8 & 0xFF;
 8007a46:	1cd3      	adds	r3, r2, #3
	pData[length++] = OBIS_VOL_BAT;
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	54f4      	strb	r4, [r6, r3]
 8007a4c:	1d13      	adds	r3, r2, #4
	pData[length++] = 0x02;
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	54f1      	strb	r1, [r6, r3]
	pData[length++] = (sModem.ValueBattery_u8 >> 8) & 0xFF;
 8007a52:	2300      	movs	r3, #0
	pData[length++] = 0x02;
 8007a54:	1d51      	adds	r1, r2, #5
	pData[length++] = (sModem.ValueBattery_u8 >> 8) & 0xFF;
 8007a56:	b2c9      	uxtb	r1, r1
 8007a58:	5473      	strb	r3, [r6, r1]
 8007a5a:	1d91      	adds	r1, r2, #6
	pData[length++] = sModem.ValueBattery_u8 & 0xFF;
 8007a5c:	b2c9      	uxtb	r1, r1
 8007a5e:	5470      	strb	r0, [r6, r1]
 8007a60:	1dd1      	adds	r1, r2, #7
	pData[length++] = 0x00;
 8007a62:	b2c9      	uxtb	r1, r1
 8007a64:	5473      	strb	r3, [r6, r1]
	uint8_t     TempCrc = 0;
 8007a66:	0019      	movs	r1, r3

	length++;
 8007a68:	3209      	adds	r2, #9
 8007a6a:	b2d2      	uxtb	r2, r2
	for (i = 0; i < (length - 1); i++)
 8007a6c:	1e50      	subs	r0, r2, #1
 8007a6e:	4283      	cmp	r3, r0
 8007a70:	db11      	blt.n	8007a96 <Packet_Single_Message+0xba>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;
 8007a72:	466b      	mov	r3, sp
 8007a74:	5419      	strb	r1, [r3, r0]

	Flash_Save_Record (&sRecSingle, &pData[0], length);
 8007a76:	4669      	mov	r1, sp
 8007a78:	480b      	ldr	r0, [pc, #44]	; (8007aa8 <Packet_Single_Message+0xcc>)
 8007a7a:	f000 fe25 	bl	80086c8 <Flash_Save_Record>
}
 8007a7e:	b021      	add	sp, #132	; 0x84
 8007a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007a82:	4666      	mov	r6, ip
 8007a84:	466f      	mov	r7, sp
 8007a86:	5c76      	ldrb	r6, [r6, r1]
 8007a88:	3101      	adds	r1, #1
 8007a8a:	553e      	strb	r6, [r7, r4]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007a8c:	e7be      	b.n	8007a0c <Packet_Single_Message+0x30>
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
 8007a8e:	2d01      	cmp	r5, #1
 8007a90:	d0c8      	beq.n	8007a24 <Packet_Single_Message+0x48>
 8007a92:	000a      	movs	r2, r1
 8007a94:	e7c9      	b.n	8007a2a <Packet_Single_Message+0x4e>
		TempCrc ^= pData[i];
 8007a96:	466c      	mov	r4, sp
 8007a98:	5ce4      	ldrb	r4, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 8007a9a:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 8007a9c:	4061      	eors	r1, r4
	for (i = 0; i < (length - 1); i++)
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	e7e5      	b.n	8007a6e <Packet_Single_Message+0x92>
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	200001fc 	.word	0x200001fc
 8007aa8:	200001a8 	.word	0x200001a8

08007aac <_Cb_Packet_Single>:
    	APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Packeting single message.\n\r");
 8007aac:	2200      	movs	r2, #0
{
 8007aae:	b510      	push	{r4, lr}
    	APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Packeting single message.\n\r");
 8007ab0:	0011      	movs	r1, r2
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <_Cb_Packet_Single+0x34>)
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f002 fd49 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
    	Packet_Single_Message();
 8007aba:	f7ff ff8f 	bl	80079dc <Packet_Single_Message>
	    sModem.ValueMeasure_u8 = 0;
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <_Cb_Packet_Single+0x38>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	314a      	adds	r1, #74	; 0x4a
 8007ac6:	800a      	strh	r2, [r1, #0]
		sModem.CountMeasure_u8 = 0;
 8007ac8:	0019      	movs	r1, r3
			sMessVar.aMARK[_MESS_SINGLE] = TRUE;
 8007aca:	2401      	movs	r4, #1
		sModem.CountMeasure_u8 = 0;
 8007acc:	3148      	adds	r1, #72	; 0x48
 8007ace:	700a      	strb	r2, [r1, #0]
			sMessVar.aMARK[_MESS_SINGLE] = TRUE;
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <_Cb_Packet_Single+0x3c>)
			AppLora_Set_Tx_Again(sModem.TimeDelayTx_u32);
 8007ad2:	6d18      	ldr	r0, [r3, #80]	; 0x50
			sMessVar.aMARK[_MESS_SINGLE] = TRUE;
 8007ad4:	7054      	strb	r4, [r2, #1]
			AppLora_Set_Tx_Again(sModem.TimeDelayTx_u32);
 8007ad6:	f7ff fe6f 	bl	80077b8 <AppLora_Set_Tx_Again>
}
 8007ada:	0020      	movs	r0, r4
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	0800b8cc 	.word	0x0800b8cc
 8007ae4:	200001fc 	.word	0x200001fc
 8007ae8:	20000168 	.word	0x20000168

08007aec <Packet_Multiple_Message>:

void Packet_Multiple_Message (void){
 8007aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t        pData[128] = {0};
 8007aee:	2400      	movs	r4, #0

	for (iRecord = 0; iRecord < 3; iRecord++)
	{
		length = 0;
		TempCrc = 0;
		pData[length++] = OBIS_ID_SENSOR;
 8007af0:	2601      	movs	r6, #1
void Packet_Multiple_Message (void){
 8007af2:	b0a5      	sub	sp, #148	; 0x94
	uint8_t        pData[128] = {0};
 8007af4:	227c      	movs	r2, #124	; 0x7c
 8007af6:	0021      	movs	r1, r4
 8007af8:	a805      	add	r0, sp, #20
 8007afa:	9404      	str	r4, [sp, #16]
 8007afc:	f002 ff9c 	bl	800aa38 <memset>
 8007b00:	9403      	str	r4, [sp, #12]
		pData[length++] = sModem.sDCU_id.Length_u16;
 8007b02:	4a34      	ldr	r2, [pc, #208]	; (8007bd4 <Packet_Multiple_Message+0xe8>)
		pData[length++] = OBIS_ID_SENSOR;
 8007b04:	ad04      	add	r5, sp, #16

		for (iID = 0; iID < sModem.sDCU_id.Length_u16; iID++)
			pData[length++] = *(sModem.sDCU_id.Data_a8 + iID);
 8007b06:	6813      	ldr	r3, [r2, #0]
		pData[length++] = OBIS_ID_SENSOR;
 8007b08:	702e      	strb	r6, [r5, #0]
			pData[length++] = *(sModem.sDCU_id.Data_a8 + iID);
 8007b0a:	469c      	mov	ip, r3
		pData[length++] = sModem.sDCU_id.Length_u16;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	8890      	ldrh	r0, [r2, #4]
 8007b10:	7068      	strb	r0, [r5, #1]
		for (iID = 0; iID < sModem.sDCU_id.Length_u16; iID++)
 8007b12:	1e99      	subs	r1, r3, #2
 8007b14:	b2cf      	uxtb	r7, r1
			pData[length++] = *(sModem.sDCU_id.Data_a8 + iID);
 8007b16:	1c5c      	adds	r4, r3, #1
		for (iID = 0; iID < sModem.sDCU_id.Length_u16; iID++)
 8007b18:	b2c9      	uxtb	r1, r1
			pData[length++] = *(sModem.sDCU_id.Data_a8 + iID);
 8007b1a:	b2e4      	uxtb	r4, r4
		for (iID = 0; iID < sModem.sDCU_id.Length_u16; iID++)
 8007b1c:	4288      	cmp	r0, r1
 8007b1e:	d83e      	bhi.n	8007b9e <Packet_Multiple_Message+0xb2>

		if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8007b20:	7e11      	ldrb	r1, [r2, #24]
 8007b22:	2900      	cmp	r1, #0
 8007b24:	d140      	bne.n	8007ba8 <Packet_Multiple_Message+0xbc>
		{
			pData[length++] = OBIS_VOL_VNA;
 8007b26:	3107      	adds	r1, #7
		} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
		{
			pData[length++] = OBIS_VOL_VNA;
 8007b28:	54e9      	strb	r1, [r5, r3]
		}
		pData[length++] = 0x64;
 8007b2a:	2164      	movs	r1, #100	; 0x64
 8007b2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b2e:	5529      	strb	r1, [r5, r4]
 8007b30:	9903      	ldr	r1, [sp, #12]
 8007b32:	1c63      	adds	r3, r4, #1
 8007b34:	1852      	adds	r2, r2, r1
 8007b36:	0021      	movs	r1, r4
 8007b38:	3165      	adds	r1, #101	; 0x65
 8007b3a:	b2db      	uxtb	r3, r3
		for (iData = 0; iData < 100; iData++)
 8007b3c:	b2c9      	uxtb	r1, r1
		{
			pData[length++] = *(sModem.strMultiRespond.Data_a8 + iRecord * 100 + iData);
 8007b3e:	0018      	movs	r0, r3
 8007b40:	7817      	ldrb	r7, [r2, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	542f      	strb	r7, [r5, r0]
		for (iData = 0; iData < 100; iData++)
 8007b48:	3201      	adds	r2, #1
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	d1f7      	bne.n	8007b3e <Packet_Multiple_Message+0x52>
		}
		pData[length++] = 0x00;
 8007b4e:	2300      	movs	r3, #0
		TempCrc = 0;
 8007b50:	001a      	movs	r2, r3

		length++;
 8007b52:	3467      	adds	r4, #103	; 0x67
 8007b54:	b2e4      	uxtb	r4, r4
		pData[length++] = 0x00;
 8007b56:	546b      	strb	r3, [r5, r1]
		for (iCRC = 0; iCRC < (length - 1); iCRC++)
 8007b58:	1e61      	subs	r1, r4, #1
 8007b5a:	428b      	cmp	r3, r1
 8007b5c:	db2a      	blt.n	8007bb4 <Packet_Multiple_Message+0xc8>
			TempCrc ^= pData[iCRC];

		pData[length-1] = TempCrc;
 8007b5e:	546a      	strb	r2, [r5, r1]

		Flash_Save_Record (&sRecMultiple, &pData[0], length);
 8007b60:	481d      	ldr	r0, [pc, #116]	; (8007bd8 <Packet_Multiple_Message+0xec>)
 8007b62:	0022      	movs	r2, r4
 8007b64:	0029      	movs	r1, r5
 8007b66:	f000 fdaf 	bl	80086c8 <Flash_Save_Record>
        APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Save multi record\r\n");
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	0030      	movs	r0, r6
 8007b6e:	0011      	movs	r1, r2
 8007b70:	4b1a      	ldr	r3, [pc, #104]	; (8007bdc <Packet_Multiple_Message+0xf0>)
 8007b72:	f002 fceb 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
        for (iID = 0; iID < length; iID++)
 8007b76:	2700      	movs	r7, #0
 8007b78:	b2fb      	uxtb	r3, r7
 8007b7a:	429c      	cmp	r4, r3
 8007b7c:	d81f      	bhi.n	8007bbe <Packet_Multiple_Message+0xd2>
            APP_LOG(TS_OFF, VLEVEL_L, "%02X", pData[iID]);
        APP_LOG(TS_OFF, VLEVEL_L, "\n\r");
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <Packet_Multiple_Message+0xf4>)
 8007b82:	0011      	movs	r1, r2
 8007b84:	0030      	movs	r0, r6
 8007b86:	f002 fce1 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
	for (iRecord = 0; iRecord < 3; iRecord++)
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	3364      	adds	r3, #100	; 0x64
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	2396      	movs	r3, #150	; 0x96
 8007b92:	9a03      	ldr	r2, [sp, #12]
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d1b3      	bne.n	8007b02 <Packet_Multiple_Message+0x16>
	}
}
 8007b9a:	b025      	add	sp, #148	; 0x94
 8007b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pData[length++] = *(sModem.sDCU_id.Data_a8 + iID);
 8007b9e:	4661      	mov	r1, ip
 8007ba0:	5dc9      	ldrb	r1, [r1, r7]
 8007ba2:	54e9      	strb	r1, [r5, r3]
 8007ba4:	0023      	movs	r3, r4
 8007ba6:	e7b4      	b.n	8007b12 <Packet_Multiple_Message+0x26>
		} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
 8007ba8:	2901      	cmp	r1, #1
 8007baa:	d101      	bne.n	8007bb0 <Packet_Multiple_Message+0xc4>
			pData[length++] = OBIS_VOL_VNA;
 8007bac:	3106      	adds	r1, #6
 8007bae:	e7bb      	b.n	8007b28 <Packet_Multiple_Message+0x3c>
 8007bb0:	001c      	movs	r4, r3
 8007bb2:	e7ba      	b.n	8007b2a <Packet_Multiple_Message+0x3e>
			TempCrc ^= pData[iCRC];
 8007bb4:	5ce8      	ldrb	r0, [r5, r3]
		for (iCRC = 0; iCRC < (length - 1); iCRC++)
 8007bb6:	3301      	adds	r3, #1
			TempCrc ^= pData[iCRC];
 8007bb8:	4042      	eors	r2, r0
		for (iCRC = 0; iCRC < (length - 1); iCRC++)
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	e7cd      	b.n	8007b5a <Packet_Multiple_Message+0x6e>
            APP_LOG(TS_OFF, VLEVEL_L, "%02X", pData[iID]);
 8007bbe:	5dea      	ldrb	r2, [r5, r7]
 8007bc0:	0030      	movs	r0, r6
 8007bc2:	9200      	str	r2, [sp, #0]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <Packet_Multiple_Message+0xf8>)
 8007bc8:	0011      	movs	r1, r2
 8007bca:	f002 fcbf 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
        for (iID = 0; iID < length; iID++)
 8007bce:	3701      	adds	r7, #1
 8007bd0:	e7d2      	b.n	8007b78 <Packet_Multiple_Message+0x8c>
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	200001fc 	.word	0x200001fc
 8007bd8:	200001c4 	.word	0x200001c4
 8007bdc:	0800b8f7 	.word	0x0800b8f7
 8007be0:	0800bd81 	.word	0x0800bd81
 8007be4:	0800b91a 	.word	0x0800b91a

08007be8 <_Cb_Packet_Multi>:
		APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Packeting multiple message.\n\r");
 8007be8:	2200      	movs	r2, #0
{
 8007bea:	b510      	push	{r4, lr}
		APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Packeting multiple message.\n\r");
 8007bec:	0011      	movs	r1, r2
 8007bee:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <_Cb_Packet_Multi+0x34>)
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	f002 fcab 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
		Packet_Multiple_Message();
 8007bf6:	f7ff ff79 	bl	8007aec <Packet_Multiple_Message>
		Reset_Buff(&sModem.strMultiRespond);
 8007bfa:	4809      	ldr	r0, [pc, #36]	; (8007c20 <_Cb_Packet_Multi+0x38>)
 8007bfc:	f002 fb2a 	bl	800a254 <Reset_Buff>
		sModem.CountMeasure_u8 = 0;
 8007c00:	4a08      	ldr	r2, [pc, #32]	; (8007c24 <_Cb_Packet_Multi+0x3c>)
 8007c02:	2100      	movs	r1, #0
 8007c04:	0013      	movs	r3, r2
			sMessVar.aMARK[_MESS_MULTI] = TRUE;
 8007c06:	2401      	movs	r4, #1
		sModem.CountMeasure_u8 = 0;
 8007c08:	3348      	adds	r3, #72	; 0x48
 8007c0a:	7019      	strb	r1, [r3, #0]
			sMessVar.aMARK[_MESS_MULTI] = TRUE;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <_Cb_Packet_Multi+0x40>)
			AppLora_Set_Tx_Again(sModem.TimeDelayTx_u32);
 8007c0e:	6d10      	ldr	r0, [r2, #80]	; 0x50
			sMessVar.aMARK[_MESS_MULTI] = TRUE;
 8007c10:	709c      	strb	r4, [r3, #2]
			AppLora_Set_Tx_Again(sModem.TimeDelayTx_u32);
 8007c12:	f7ff fdd1 	bl	80077b8 <AppLora_Set_Tx_Again>
}
 8007c16:	0020      	movs	r0, r4
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	0800b91f 	.word	0x0800b91f
 8007c20:	20000234 	.word	0x20000234
 8007c24:	200001fc 	.word	0x200001fc
 8007c28:	20000168 	.word	0x20000168

08007c2c <Packet_Mode_Message>:

void Packet_Mode_Message (void)
{
 8007c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t     pData[128] = {0};
 8007c2e:	2400      	movs	r4, #0
{
 8007c30:	b0a1      	sub	sp, #132	; 0x84
	uint8_t     pData[128] = {0};
 8007c32:	227c      	movs	r2, #124	; 0x7c
 8007c34:	0021      	movs	r1, r4
 8007c36:	a801      	add	r0, sp, #4
 8007c38:	9400      	str	r4, [sp, #0]
 8007c3a:	f002 fefd 	bl	800aa38 <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

	pData[length++] = OBIS_ID_SENSOR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	466a      	mov	r2, sp
 8007c42:	7013      	strb	r3, [r2, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8007c44:	466b      	mov	r3, sp

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007c46:	0021      	movs	r1, r4
	pData[length++] = sModem.sDCU_id.Length_u16;
 8007c48:	4818      	ldr	r0, [pc, #96]	; (8007cac <Packet_Mode_Message+0x80>)
 8007c4a:	8885      	ldrh	r5, [r0, #4]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007c4c:	6806      	ldr	r6, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8007c4e:	b2ea      	uxtb	r2, r5
 8007c50:	705a      	strb	r2, [r3, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007c52:	1c8b      	adds	r3, r1, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007c54:	b28c      	uxth	r4, r1
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007c56:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007c58:	42a5      	cmp	r5, r4
 8007c5a:	d81c      	bhi.n	8007c96 <Packet_Mode_Message+0x6a>

	pData[length++] = OBIS_MODE;
 8007c5c:	466c      	mov	r4, sp
 8007c5e:	2104      	movs	r1, #4
 8007c60:	54e1      	strb	r1, [r4, r3]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007c62:	1cd3      	adds	r3, r2, #3
	pData[length++] = 0x01;
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3903      	subs	r1, #3
 8007c68:	54e1      	strb	r1, [r4, r3]
	pData[length++] = sModem.Mode_Node & 0xFF;
 8007c6a:	7e41      	ldrb	r1, [r0, #25]
	pData[length++] = 0x01;
 8007c6c:	1d13      	adds	r3, r2, #4
	pData[length++] = sModem.Mode_Node & 0xFF;
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	54e1      	strb	r1, [r4, r3]
	pData[length++] = 0x00;
 8007c72:	2300      	movs	r3, #0
	pData[length++] = sModem.Mode_Node & 0xFF;
 8007c74:	1d51      	adds	r1, r2, #5
	pData[length++] = 0x00;
 8007c76:	b2c9      	uxtb	r1, r1
 8007c78:	5463      	strb	r3, [r4, r1]
	uint8_t     TempCrc = 0;
 8007c7a:	0019      	movs	r1, r3

	length++;
 8007c7c:	3207      	adds	r2, #7
 8007c7e:	b2d2      	uxtb	r2, r2
	for (i = 0; i < (length - 1); i++)
 8007c80:	1e50      	subs	r0, r2, #1
 8007c82:	4283      	cmp	r3, r0
 8007c84:	db0c      	blt.n	8007ca0 <Packet_Mode_Message+0x74>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;
 8007c86:	466b      	mov	r3, sp
 8007c88:	5419      	strb	r1, [r3, r0]

	Flash_Save_Record (&sRecMessage, &pData[0], length);
 8007c8a:	4669      	mov	r1, sp
 8007c8c:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <Packet_Mode_Message+0x84>)
 8007c8e:	f000 fd1b 	bl	80086c8 <Flash_Save_Record>
}
 8007c92:	b021      	add	sp, #132	; 0x84
 8007c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8007c96:	466f      	mov	r7, sp
 8007c98:	5c74      	ldrb	r4, [r6, r1]
 8007c9a:	3101      	adds	r1, #1
 8007c9c:	54fc      	strb	r4, [r7, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8007c9e:	e7d8      	b.n	8007c52 <Packet_Mode_Message+0x26>
		TempCrc ^= pData[i];
 8007ca0:	466c      	mov	r4, sp
 8007ca2:	5ce4      	ldrb	r4, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 8007ca4:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 8007ca6:	4061      	eors	r1, r4
	for (i = 0; i < (length - 1); i++)
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	e7ea      	b.n	8007c82 <Packet_Mode_Message+0x56>
 8007cac:	200001fc 	.word	0x200001fc
 8007cb0:	200001e0 	.word	0x200001e0

08007cb4 <_Cb_Packet_Mode>:
		APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Packeting mode message.\n\r");
 8007cb4:	2200      	movs	r2, #0
{
 8007cb6:	b510      	push	{r4, lr}
			sMessVar.aMARK[_MESS_MODE] = TRUE;
 8007cb8:	2401      	movs	r4, #1
		APP_LOG(TS_OFF, VLEVEL_L, "user_packet.c: Packeting mode message.\n\r");
 8007cba:	0011      	movs	r1, r2
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <_Cb_Packet_Mode+0x24>)
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f002 fc44 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
		Packet_Mode_Message();
 8007cc4:	f7ff ffb2 	bl	8007c2c <Packet_Mode_Message>
			sMessVar.aMARK[_MESS_MODE] = TRUE;
 8007cc8:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <_Cb_Packet_Mode+0x28>)
 8007cca:	70dc      	strb	r4, [r3, #3]
			AppLora_Set_Tx_Again(sModem.TimeDelayTx_u32);
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <_Cb_Packet_Mode+0x2c>)
 8007cce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007cd0:	f7ff fd72 	bl	80077b8 <AppLora_Set_Tx_Again>
}
 8007cd4:	0020      	movs	r0, r4
 8007cd6:	bd10      	pop	{r4, pc}
 8007cd8:	0800b94c 	.word	0x0800b94c
 8007cdc:	20000168 	.word	0x20000168
 8007ce0:	200001fc 	.word	0x200001fc

08007ce4 <STM32_MX_ADC1_Init>:
/* Private variables ---------------------------------------------------------*/
uint8_t AdcInitialized = 0;

/*===================== Funcion ===================== */
void STM32_MX_ADC1_Init(void)
{
 8007ce4:	b513      	push	{r0, r1, r4, lr}
    ADC_ChannelConfTypeDef sConfig = {0};
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4668      	mov	r0, sp
 8007cec:	f002 fea4 	bl	800aa38 <memset>
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    hadc1.Init.LowPowerAutoWait = DISABLE;
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc1.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8007cf0:	2307      	movs	r3, #7
    hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8007cf2:	2201      	movs	r2, #1
    hadc1.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8007cf4:	4c1b      	ldr	r4, [pc, #108]	; (8007d64 <STM32_MX_ADC1_Init+0x80>)
 8007cf6:	63a3      	str	r3, [r4, #56]	; 0x38
    hadc1.Instance = ADC1;
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	; (8007d68 <STM32_MX_ADC1_Init+0x84>)
    hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8007cfa:	6362      	str	r2, [r4, #52]	; 0x34
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007cfc:	6122      	str	r2, [r4, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007cfe:	3203      	adds	r2, #3
    hadc1.Instance = ADC1;
 8007d00:	6023      	str	r3, [r4, #0]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d02:	6162      	str	r2, [r4, #20]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007d04:	2380      	movs	r3, #128	; 0x80
    hadc1.Init.LowPowerAutoPowerOff = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d06:	22c2      	movs	r2, #194	; 0xc2
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007d08:	061b      	lsls	r3, r3, #24
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d0a:	32ff      	adds	r2, #255	; 0xff
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007d0c:	6063      	str	r3, [r4, #4]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d0e:	6262      	str	r2, [r4, #36]	; 0x24
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d10:	2300      	movs	r3, #0
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8007d12:	0022      	movs	r2, r4
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
    hadc1.Init.OversamplingMode = DISABLE;
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d14:	0020      	movs	r0, r4
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8007d16:	322c      	adds	r2, #44	; 0x2c
    hadc1.Init.ContinuousConvMode = DISABLE;
 8007d18:	8423      	strh	r3, [r4, #32]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d1a:	60a3      	str	r3, [r4, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d1c:	60e3      	str	r3, [r4, #12]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8007d1e:	61a3      	str	r3, [r4, #24]
    hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8007d20:	61e3      	str	r3, [r4, #28]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d22:	62a3      	str	r3, [r4, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8007d24:	7013      	strb	r3, [r2, #0]
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007d26:	6323      	str	r3, [r4, #48]	; 0x30
    hadc1.Init.OversamplingMode = DISABLE;
 8007d28:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d2a:	f7fa fff1 	bl	8002d10 <HAL_ADC_Init>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d001      	beq.n	8007d36 <STM32_MX_ADC1_Init+0x52>
    {
        Error_Handler();
 8007d32:	f7fa f977 	bl	8002024 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8007d36:	2100      	movs	r1, #0
 8007d38:	0020      	movs	r0, r4
 8007d3a:	f7fb fa17 	bl	800316c <HAL_ADCEx_Calibration_Start>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d001      	beq.n	8007d46 <STM32_MX_ADC1_Init+0x62>
    {
        Error_Handler();
 8007d42:	f7fa f96f 	bl	8002024 <Error_Handler>
    }
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <STM32_MX_ADC1_Init+0x88>)
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d48:	4669      	mov	r1, sp
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8007d4a:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007d4c:	2380      	movs	r3, #128	; 0x80
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d4e:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007d50:	015b      	lsls	r3, r3, #5
 8007d52:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d54:	f7fb f9b6 	bl	80030c4 <HAL_ADC_ConfigChannel>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d001      	beq.n	8007d60 <STM32_MX_ADC1_Init+0x7c>
    {
        Error_Handler();
 8007d5c:	f7fa f962 	bl	8002024 <Error_Handler>
    }
}
 8007d60:	bd13      	pop	{r0, r1, r4, pc}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	20001350 	.word	0x20001350
 8007d68:	40012400 	.word	0x40012400
 8007d6c:	44020000 	.word	0x44020000

08007d70 <HW_AdcReadChannel>:

uint16_t HW_AdcReadChannel (uint32_t Channel)
{
 8007d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d72:	0005      	movs	r5, r0
    ADC_ChannelConfTypeDef  sConfig;
    uint16_t adcData = 0;

	STM32_MX_ADC1_Init();
 8007d74:	f7ff ffb6 	bl	8007ce4 <STM32_MX_ADC1_Init>

	 /* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8007d78:	2308      	movs	r3, #8
 8007d7a:	491d      	ldr	r1, [pc, #116]	; (8007df0 <HW_AdcReadChannel+0x80>)
 8007d7c:	684a      	ldr	r2, [r1, #4]
 8007d7e:	421a      	tst	r2, r3
 8007d80:	d0fc      	beq.n	8007d7c <HW_AdcReadChannel+0xc>

	__HAL_RCC_ADC1_CLK_ENABLE() ;
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	4e1b      	ldr	r6, [pc, #108]	; (8007df4 <HW_AdcReadChannel+0x84>)

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007d86:	4c1c      	ldr	r4, [pc, #112]	; (8007df8 <HW_AdcReadChannel+0x88>)
	__HAL_RCC_ADC1_CLK_ENABLE() ;
 8007d88:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4313      	orrs	r3, r2
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007d8e:	2100      	movs	r1, #0
	__HAL_RCC_ADC1_CLK_ENABLE() ;
 8007d90:	6373      	str	r3, [r6, #52]	; 0x34
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007d92:	0020      	movs	r0, r4
 8007d94:	f7fb f9ea 	bl	800316c <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	sConfig.Channel = ADC_CHANNEL_MASK;
 8007d98:	4b18      	ldr	r3, [pc, #96]	; (8007dfc <HW_AdcReadChannel+0x8c>)
	sConfig.Rank = ADC_RANK_NONE;
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007d9a:	4669      	mov	r1, sp
	sConfig.Channel = ADC_CHANNEL_MASK;
 8007d9c:	9300      	str	r3, [sp, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8007d9e:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <HW_AdcReadChannel+0x90>)
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007da0:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 8007da2:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007da4:	f7fb f98e 	bl	80030c4 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	sConfig.Channel = Channel;
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007da8:	2380      	movs	r3, #128	; 0x80
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007daa:	4669      	mov	r1, sp
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007dac:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007dae:	0020      	movs	r0, r4
	sConfig.Channel = Channel;
 8007db0:	9500      	str	r5, [sp, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007db2:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007db4:	f7fb f986 	bl	80030c4 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	if (HAL_ADC_Start(&hadc) != HAL_OK)
 8007db8:	0020      	movs	r0, r4
 8007dba:	f7fb f8d5 	bl	8002f68 <HAL_ADC_Start>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d001      	beq.n	8007dc6 <HW_AdcReadChannel+0x56>
	{
		/* Start Error */
		Error_Handler();
 8007dc2:	f7fa f92f 	bl	8002024 <Error_Handler>
	}
	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc1, HAL_MAX_DELAY );
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	0020      	movs	r0, r4
 8007dca:	4249      	negs	r1, r1
 8007dcc:	f7fb f916 	bl	8002ffc <HAL_ADC_PollForConversion>

	HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8007dd0:	0020      	movs	r0, r4
 8007dd2:	f7fb f8f5 	bl	8002fc0 <HAL_ADC_Stop>
	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc1);
 8007dd6:	0020      	movs	r0, r4
 8007dd8:	f7fb f970 	bl	80030bc <HAL_ADC_GetValue>
 8007ddc:	0005      	movs	r5, r0
	 HAL_ADC_DeInit(&hadc1);
 8007dde:	0020      	movs	r0, r4
 8007de0:	f7fb f86e 	bl	8002ec0 <HAL_ADC_DeInit>
	__HAL_RCC_ADC1_CLK_DISABLE() ;
 8007de4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007de6:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <HW_AdcReadChannel+0x94>)
    return adcData;
 8007de8:	b2a8      	uxth	r0, r5
	__HAL_RCC_ADC1_CLK_DISABLE() ;
 8007dea:	4013      	ands	r3, r2
 8007dec:	6373      	str	r3, [r6, #52]	; 0x34
}
 8007dee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007df0:	40007000 	.word	0x40007000
 8007df4:	40021000 	.word	0x40021000
 8007df8:	20001350 	.word	0x20001350
 8007dfc:	0007ffff 	.word	0x0007ffff
 8007e00:	00001001 	.word	0x00001001
 8007e04:	fffffdff 	.word	0xfffffdff

08007e08 <ADC_Desequence_Powerhungry_Channels>:

void ADC_Desequence_Powerhungry_Channels(void)
{
 8007e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined (STM32L072xx) || defined (STM32L082xx)
     ADC_ChannelConfTypeDef sConfig;

    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007e0a:	4c08      	ldr	r4, [pc, #32]	; (8007e2c <ADC_Desequence_Powerhungry_Channels+0x24>)
    sConfig.Rank = ADC_RANK_NONE;
 8007e0c:	4d08      	ldr	r5, [pc, #32]	; (8007e30 <ADC_Desequence_Powerhungry_Channels+0x28>)
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <ADC_Desequence_Powerhungry_Channels+0x2c>)
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007e10:	4669      	mov	r1, sp
 8007e12:	0020      	movs	r0, r4
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007e14:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_NONE;
 8007e16:	9501      	str	r5, [sp, #4]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007e18:	f7fb f954 	bl	80030c4 <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <ADC_Desequence_Powerhungry_Channels+0x30>)
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007e1e:	4669      	mov	r1, sp
 8007e20:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_NONE;
 8007e22:	9501      	str	r5, [sp, #4]
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8007e24:	9300      	str	r3, [sp, #0]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007e26:	f7fb f94d 	bl	80030c4 <HAL_ADC_ConfigChannel>
#endif
}
 8007e2a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8007e2c:	20001350 	.word	0x20001350
 8007e30:	00001001 	.word	0x00001001
 8007e34:	48040000 	.word	0x48040000
 8007e38:	44020000 	.word	0x44020000

08007e3c <Get_Vol_VNA>:

uint16_t Get_Vol_VNA (void)
{
 8007e3c:	b510      	push	{r4, lr}
	uint16_t Value_ADC_u16;
	uint16_t Temp_mV = 0;
    Value_ADC_u16 = HW_AdcReadChannel(ADC_CHANNEL_2);
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <Get_Vol_VNA+0x18>)
 8007e40:	f7ff ff96 	bl	8007d70 <HW_AdcReadChannel>
	Temp_mV = (VREF * Value_ADC_u16) / 4095 + DEFAULT_OFFSET_ADC_VNA / 2;
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <Get_Vol_VNA+0x1c>)
 8007e46:	4905      	ldr	r1, [pc, #20]	; (8007e5c <Get_Vol_VNA+0x20>)
 8007e48:	4358      	muls	r0, r3
 8007e4a:	f7f8 f983 	bl	8000154 <__udivsi3>
 8007e4e:	300f      	adds	r0, #15
	return Temp_mV;
 8007e50:	b280      	uxth	r0, r0
}
 8007e52:	bd10      	pop	{r4, pc}
 8007e54:	08000004 	.word	0x08000004
 8007e58:	00000bb8 	.word	0x00000bb8
 8007e5c:	00000fff 	.word	0x00000fff

08007e60 <Get_Vol_VP>:

uint16_t Get_Vol_VP (void)
{
 8007e60:	b510      	push	{r4, lr}
	uint16_t Value_ADC_u16;
	uint16_t Temp_mV = 0;
    Value_ADC_u16 = HW_AdcReadChannel(ADC_CHANNEL_3);
 8007e62:	4805      	ldr	r0, [pc, #20]	; (8007e78 <Get_Vol_VP+0x18>)
 8007e64:	f7ff ff84 	bl	8007d70 <HW_AdcReadChannel>
	Temp_mV = (VREF * Value_ADC_u16) / 4095 + DEFAULT_OFFSET_ADC_VP / 2;
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <Get_Vol_VP+0x1c>)
 8007e6a:	4905      	ldr	r1, [pc, #20]	; (8007e80 <Get_Vol_VP+0x20>)
 8007e6c:	4358      	muls	r0, r3
 8007e6e:	f7f8 f971 	bl	8000154 <__udivsi3>
 8007e72:	300f      	adds	r0, #15
	return Temp_mV;
 8007e74:	b280      	uxth	r0, r0
}
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	0c000008 	.word	0x0c000008
 8007e7c:	00000bb8 	.word	0x00000bb8
 8007e80:	00000fff 	.word	0x00000fff

08007e84 <Get_Vol_BAT>:

uint8_t Get_Vol_BAT (void)
{
 8007e84:	b570      	push	{r4, r5, r6, lr}
	uint16_t Value_ADC_u16;
	float Temp_mV = 0;
	float PercentBat;
    Value_ADC_u16 = HW_AdcReadChannel(ADC_CHANNEL_4);
 8007e86:	481d      	ldr	r0, [pc, #116]	; (8007efc <Get_Vol_BAT+0x78>)
 8007e88:	f7ff ff72 	bl	8007d70 <HW_AdcReadChannel>
	Temp_mV = (VREF * Value_ADC_u16) / 4095.0 / 1000.0 * 2;
 8007e8c:	4b1c      	ldr	r3, [pc, #112]	; (8007f00 <Get_Vol_BAT+0x7c>)
 8007e8e:	4358      	muls	r0, r3
 8007e90:	f7f9 ff04 	bl	8001c9c <__aeabi_ui2d>
 8007e94:	2200      	movs	r2, #0
 8007e96:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <Get_Vol_BAT+0x80>)
 8007e98:	f7f9 fc12 	bl	80016c0 <__aeabi_ddiv>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <Get_Vol_BAT+0x84>)
 8007ea0:	f7f9 fc0e 	bl	80016c0 <__aeabi_ddiv>
 8007ea4:	0002      	movs	r2, r0
 8007ea6:	000b      	movs	r3, r1
 8007ea8:	f7f9 f8aa 	bl	8001000 <__aeabi_dadd>
 8007eac:	f7f9 ff1c 	bl	8001ce8 <__aeabi_d2f>
	PercentBat = 579*Temp_mV*Temp_mV - 1936*Temp_mV + 2089 - 55*Temp_mV*Temp_mV*Temp_mV;
 8007eb0:	4916      	ldr	r1, [pc, #88]	; (8007f0c <Get_Vol_BAT+0x88>)
	Temp_mV = (VREF * Value_ADC_u16) / 4095.0 / 1000.0 * 2;
 8007eb2:	1c04      	adds	r4, r0, #0
	PercentBat = 579*Temp_mV*Temp_mV - 1936*Temp_mV + 2089 - 55*Temp_mV*Temp_mV*Temp_mV;
 8007eb4:	f7f8 fd96 	bl	80009e4 <__aeabi_fmul>
 8007eb8:	1c21      	adds	r1, r4, #0
 8007eba:	f7f8 fd93 	bl	80009e4 <__aeabi_fmul>
 8007ebe:	4914      	ldr	r1, [pc, #80]	; (8007f10 <Get_Vol_BAT+0x8c>)
 8007ec0:	1c05      	adds	r5, r0, #0
 8007ec2:	1c20      	adds	r0, r4, #0
 8007ec4:	f7f8 fd8e 	bl	80009e4 <__aeabi_fmul>
 8007ec8:	1c01      	adds	r1, r0, #0
 8007eca:	1c28      	adds	r0, r5, #0
 8007ecc:	f7f8 fed8 	bl	8000c80 <__aeabi_fsub>
 8007ed0:	4910      	ldr	r1, [pc, #64]	; (8007f14 <Get_Vol_BAT+0x90>)
 8007ed2:	f7f8 fbe7 	bl	80006a4 <__aeabi_fadd>
 8007ed6:	4910      	ldr	r1, [pc, #64]	; (8007f18 <Get_Vol_BAT+0x94>)
 8007ed8:	1c05      	adds	r5, r0, #0
 8007eda:	1c20      	adds	r0, r4, #0
 8007edc:	f7f8 fd82 	bl	80009e4 <__aeabi_fmul>
 8007ee0:	1c21      	adds	r1, r4, #0
 8007ee2:	f7f8 fd7f 	bl	80009e4 <__aeabi_fmul>
 8007ee6:	1c21      	adds	r1, r4, #0
 8007ee8:	f7f8 fd7c 	bl	80009e4 <__aeabi_fmul>
 8007eec:	1c01      	adds	r1, r0, #0
 8007eee:	1c28      	adds	r0, r5, #0
 8007ef0:	f7f8 fec6 	bl	8000c80 <__aeabi_fsub>
	return PercentBat;
 8007ef4:	f7f8 faf2 	bl	80004dc <__aeabi_f2uiz>
 8007ef8:	b2c0      	uxtb	r0, r0
}
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	10000010 	.word	0x10000010
 8007f00:	00000bb8 	.word	0x00000bb8
 8007f04:	40affe00 	.word	0x40affe00
 8007f08:	408f4000 	.word	0x408f4000
 8007f0c:	4410c000 	.word	0x4410c000
 8007f10:	44f20000 	.word	0x44f20000
 8007f14:	45029000 	.word	0x45029000
 8007f18:	425c0000 	.word	0x425c0000

08007f1c <_fAT_SET_LED>:
}

void _fAT_SET_LED(sData *str_Receiv, uint16_t Pos)
{

}
 8007f1c:	4770      	bx	lr
	...

08007f20 <_fAT_GET_DEVICE_ID>:
{
 8007f20:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sDCU_id.Data_a8, sModem.sDCU_id.Length_u16);
 8007f22:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <_fAT_GET_DEVICE_ID+0x10>)
 8007f24:	8899      	ldrh	r1, [r3, #4]
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	f000 fd36 	bl	8008998 <DCU_Response_AT>
}
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	200001fc 	.word	0x200001fc

08007f34 <_fAT_GET_NETWORK_ID>:
{
 8007f34:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sNET_id.Data_a8, sModem.sNET_id.Length_u16);
 8007f36:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <_fAT_GET_NETWORK_ID+0x10>)
 8007f38:	8999      	ldrh	r1, [r3, #12]
 8007f3a:	6898      	ldr	r0, [r3, #8]
 8007f3c:	f000 fd2c 	bl	8008998 <DCU_Response_AT>
}
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	200001fc 	.word	0x200001fc

08007f48 <_fAT_GET_DUTY_WAKEUP>:
{
 8007f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t     aTemp[14] = {0};
 8007f4a:	240a      	movs	r4, #10
 8007f4c:	0022      	movs	r2, r4
 8007f4e:	2100      	movs	r1, #0
 8007f50:	a801      	add	r0, sp, #4
 8007f52:	f002 fd71 	bl	800aa38 <memset>
    aTemp[length++] = 'F';
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <_fAT_GET_DUTY_WAKEUP+0x70>)
    aTemp[length++] = '=';
 8007f58:	466a      	mov	r2, sp
    aTemp[length++] = 'F';
 8007f5a:	9300      	str	r3, [sp, #0]
    aTemp[length++] = '=';
 8007f5c:	233d      	movs	r3, #61	; 0x3d
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 8007f5e:	4d17      	ldr	r5, [pc, #92]	; (8007fbc <_fAT_GET_DUTY_WAKEUP+0x74>)
    aTemp[length++] = '=';
 8007f60:	7113      	strb	r3, [r2, #4]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 8007f62:	782e      	ldrb	r6, [r5, #0]
 8007f64:	0021      	movs	r1, r4
 8007f66:	0030      	movs	r0, r6
 8007f68:	f7f8 f8f4 	bl	8000154 <__udivsi3>
 8007f6c:	466b      	mov	r3, sp
 8007f6e:	3030      	adds	r0, #48	; 0x30
 8007f70:	7158      	strb	r0, [r3, #5]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 8007f72:	0021      	movs	r1, r4
 8007f74:	0030      	movs	r0, r6
 8007f76:	f7f8 f973 	bl	8000260 <__aeabi_uidivmod>
 8007f7a:	466b      	mov	r3, sp
 8007f7c:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = 'x';
 8007f7e:	466a      	mov	r2, sp
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 8007f80:	7199      	strb	r1, [r3, #6]
    aTemp[length++] = 'x';
 8007f82:	2378      	movs	r3, #120	; 0x78
 8007f84:	71d3      	strb	r3, [r2, #7]
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 8007f86:	886d      	ldrh	r5, [r5, #2]
 8007f88:	0021      	movs	r1, r4
 8007f8a:	0028      	movs	r0, r5
 8007f8c:	f7f8 f8e2 	bl	8000154 <__udivsi3>
 8007f90:	0021      	movs	r1, r4
 8007f92:	b280      	uxth	r0, r0
 8007f94:	f7f8 f964 	bl	8000260 <__aeabi_uidivmod>
 8007f98:	466b      	mov	r3, sp
 8007f9a:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8007f9c:	0028      	movs	r0, r5
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 8007f9e:	7219      	strb	r1, [r3, #8]
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8007fa0:	0021      	movs	r1, r4
 8007fa2:	f7f8 f95d 	bl	8000260 <__aeabi_uidivmod>
 8007fa6:	466b      	mov	r3, sp
 8007fa8:	3130      	adds	r1, #48	; 0x30
 8007faa:	7259      	strb	r1, [r3, #9]
    DCU_Response_AT(&aTemp[0], length);
 8007fac:	4668      	mov	r0, sp
 8007fae:	0021      	movs	r1, r4
 8007fb0:	f000 fcf2 	bl	8008998 <DCU_Response_AT>
}
 8007fb4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	51455246 	.word	0x51455246
 8007fbc:	20000254 	.word	0x20000254

08007fc0 <_fAT_GET_TYPE_MODEM>:
{
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
    uint8_t     aTemp[50] = {0};
 8007fc4:	222e      	movs	r2, #46	; 0x2e
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	a802      	add	r0, sp, #8
 8007fca:	f002 fd35 	bl	800aa38 <memset>
    aTemp[length++] = 'T';
 8007fce:	4b27      	ldr	r3, [pc, #156]	; (800806c <_fAT_GET_TYPE_MODEM+0xac>)
    uint8_t     aTemp[50] = {0};
 8007fd0:	ac01      	add	r4, sp, #4
    aTemp[length++] = 'T';
 8007fd2:	9301      	str	r3, [sp, #4]
    aTemp[length++] = ':';
 8007fd4:	4b26      	ldr	r3, [pc, #152]	; (8008070 <_fAT_GET_TYPE_MODEM+0xb0>)
 8007fd6:	80a3      	strh	r3, [r4, #4]
    switch (sModem.TypeModem_u8)
 8007fd8:	4b26      	ldr	r3, [pc, #152]	; (8008074 <_fAT_GET_TYPE_MODEM+0xb4>)
 8007fda:	7e1b      	ldrb	r3, [r3, #24]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d041      	beq.n	8008064 <_fAT_GET_TYPE_MODEM+0xa4>
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d041      	beq.n	8008068 <_fAT_GET_TYPE_MODEM+0xa8>
 8007fe4:	2106      	movs	r1, #6
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d136      	bne.n	8008058 <_fAT_GET_TYPE_MODEM+0x98>
    	    aTemp[length++] = 'A';
 8007fea:	220e      	movs	r2, #14
    	    aTemp[length++] = 'N';
 8007fec:	4b22      	ldr	r3, [pc, #136]	; (8008078 <_fAT_GET_TYPE_MODEM+0xb8>)
 8007fee:	80e3      	strh	r3, [r4, #6]
    	    aTemp[length++] = 'D';
 8007ff0:	4b22      	ldr	r3, [pc, #136]	; (800807c <_fAT_GET_TYPE_MODEM+0xbc>)
 8007ff2:	9303      	str	r3, [sp, #12]
    	    aTemp[length++] = 'N';
 8007ff4:	4b22      	ldr	r3, [pc, #136]	; (8008080 <_fAT_GET_TYPE_MODEM+0xc0>)
 8007ff6:	81a3      	strh	r3, [r4, #12]
    	    aTemp[length++] = 'N';
 8007ff8:	234e      	movs	r3, #78	; 0x4e
    	    aTemp[length++] = 'O';
 8007ffa:	214f      	movs	r1, #79	; 0x4f
    	    aTemp[length++] = 'N';
 8007ffc:	54a3      	strb	r3, [r4, r2]
    	    aTemp[length++] = 'O';
 8007ffe:	1c53      	adds	r3, r2, #1
 8008000:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'D';
 8008002:	1c93      	adds	r3, r2, #2
 8008004:	390b      	subs	r1, #11
 8008006:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'E';
 8008008:	1cd3      	adds	r3, r2, #3
 800800a:	3101      	adds	r1, #1
 800800c:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = ' ';
 800800e:	1d13      	adds	r3, r2, #4
 8008010:	3925      	subs	r1, #37	; 0x25
 8008012:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'V';
 8008014:	1d53      	adds	r3, r2, #5
 8008016:	3136      	adds	r1, #54	; 0x36
 8008018:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'P';
 800801a:	1dd3      	adds	r3, r2, #7
 800801c:	3906      	subs	r1, #6
 800801e:	3206      	adds	r2, #6
 8008020:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'S';
 8008022:	2253      	movs	r2, #83	; 0x53
    	    aTemp[length++] = 'T';
 8008024:	2154      	movs	r1, #84	; 0x54
    	    aTemp[length++] = 'A';
 8008026:	2041      	movs	r0, #65	; 0x41
    	    aTemp[length++] = 'S';
 8008028:	54e2      	strb	r2, [r4, r3]
 800802a:	1c5a      	adds	r2, r3, #1
    	    aTemp[length++] = 'T';
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	54a1      	strb	r1, [r4, r2]
 8008030:	1c9a      	adds	r2, r3, #2
    	    aTemp[length++] = 'A';
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	54a0      	strb	r0, [r4, r2]
 8008036:	1cda      	adds	r2, r3, #3
    	    aTemp[length++] = 'T';
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	54a1      	strb	r1, [r4, r2]
 800803c:	1d1a      	adds	r2, r3, #4
    	    aTemp[length++] = 'I';
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	390b      	subs	r1, #11
 8008042:	54a1      	strb	r1, [r4, r2]
 8008044:	1d5a      	adds	r2, r3, #5
    	    aTemp[length++] = 'O';
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	3106      	adds	r1, #6
 800804a:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'N';
 800804c:	224e      	movs	r2, #78	; 0x4e
 800804e:	1dd9      	adds	r1, r3, #7
    	    aTemp[length++] = 'O';
 8008050:	3306      	adds	r3, #6
    	    aTemp[length++] = 'N';
 8008052:	b2db      	uxtb	r3, r3
 8008054:	b2c9      	uxtb	r1, r1
 8008056:	54e2      	strb	r2, [r4, r3]
    DCU_Response_AT(&aTemp[0], length);
 8008058:	0020      	movs	r0, r4
 800805a:	b289      	uxth	r1, r1
 800805c:	f000 fc9c 	bl	8008998 <DCU_Response_AT>
}
 8008060:	b00e      	add	sp, #56	; 0x38
 8008062:	bd10      	pop	{r4, pc}
    switch (sModem.TypeModem_u8)
 8008064:	2206      	movs	r2, #6
 8008066:	e7c7      	b.n	8007ff8 <_fAT_GET_TYPE_MODEM+0x38>
 8008068:	2306      	movs	r3, #6
 800806a:	e7da      	b.n	8008022 <_fAT_GET_TYPE_MODEM+0x62>
 800806c:	45505954 	.word	0x45505954
 8008070:	0000203a 	.word	0x0000203a
 8008074:	200001fc 	.word	0x200001fc
 8008078:	00004f4e 	.word	0x00004f4e
 800807c:	56204544 	.word	0x56204544
 8008080:	0000414e 	.word	0x0000414e

08008084 <_fAT_GET_RTC>:
{
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	b08a      	sub	sp, #40	; 0x28
    uint8_t aTEMP_RTC[40] = {0};
 8008088:	2224      	movs	r2, #36	; 0x24
 800808a:	2100      	movs	r1, #0
 800808c:	a801      	add	r0, sp, #4
 800808e:	f002 fcd3 	bl	800aa38 <memset>
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8008092:	4b3b      	ldr	r3, [pc, #236]	; (8008180 <_fAT_GET_RTC+0xfc>)
    aTEMP_RTC[length++] = '=';
 8008094:	466a      	mov	r2, sp
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8008096:	9300      	str	r3, [sp, #0]
    aTEMP_RTC[length++] = '=';
 8008098:	233d      	movs	r3, #61	; 0x3d
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 800809a:	4c3a      	ldr	r4, [pc, #232]	; (8008184 <_fAT_GET_RTC+0x100>)
    aTEMP_RTC[length++] = '=';
 800809c:	7113      	strb	r3, [r2, #4]
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 800809e:	7825      	ldrb	r5, [r4, #0]
 80080a0:	210a      	movs	r1, #10
 80080a2:	0028      	movs	r0, r5
 80080a4:	f7f8 f856 	bl	8000154 <__udivsi3>
 80080a8:	466b      	mov	r3, sp
 80080aa:	3030      	adds	r0, #48	; 0x30
 80080ac:	7158      	strb	r0, [r3, #5]
 80080ae:	210a      	movs	r1, #10
 80080b0:	0028      	movs	r0, r5
 80080b2:	f7f8 f8d5 	bl	8000260 <__aeabi_uidivmod>
 80080b6:	253a      	movs	r5, #58	; 0x3a
 80080b8:	466b      	mov	r3, sp
 80080ba:	3130      	adds	r1, #48	; 0x30
 80080bc:	7199      	strb	r1, [r3, #6]
 80080be:	71dd      	strb	r5, [r3, #7]
	aTEMP_RTC[length++] = sRTC.min / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.min % 10 + 0x30;     aTEMP_RTC[length++] = ':';
 80080c0:	7866      	ldrb	r6, [r4, #1]
 80080c2:	210a      	movs	r1, #10
 80080c4:	0030      	movs	r0, r6
 80080c6:	f7f8 f845 	bl	8000154 <__udivsi3>
 80080ca:	466b      	mov	r3, sp
 80080cc:	3030      	adds	r0, #48	; 0x30
 80080ce:	7218      	strb	r0, [r3, #8]
 80080d0:	210a      	movs	r1, #10
 80080d2:	0030      	movs	r0, r6
 80080d4:	f7f8 f8c4 	bl	8000260 <__aeabi_uidivmod>
 80080d8:	466b      	mov	r3, sp
 80080da:	3130      	adds	r1, #48	; 0x30
 80080dc:	7259      	strb	r1, [r3, #9]
 80080de:	729d      	strb	r5, [r3, #10]
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 80080e0:	78a5      	ldrb	r5, [r4, #2]
 80080e2:	210a      	movs	r1, #10
 80080e4:	0028      	movs	r0, r5
 80080e6:	f7f8 f835 	bl	8000154 <__udivsi3>
 80080ea:	466b      	mov	r3, sp
 80080ec:	3030      	adds	r0, #48	; 0x30
 80080ee:	72d8      	strb	r0, [r3, #11]
 80080f0:	210a      	movs	r1, #10
 80080f2:	0028      	movs	r0, r5
 80080f4:	f7f8 f8b4 	bl	8000260 <__aeabi_uidivmod>
 80080f8:	466b      	mov	r3, sp
 80080fa:	3130      	adds	r1, #48	; 0x30
 80080fc:	466a      	mov	r2, sp
 80080fe:	7319      	strb	r1, [r3, #12]
 8008100:	233b      	movs	r3, #59	; 0x3b
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 8008102:	252d      	movs	r5, #45	; 0x2d
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 8008104:	7353      	strb	r3, [r2, #13]
    aTEMP_RTC[length++] = 0x0D;
 8008106:	4b20      	ldr	r3, [pc, #128]	; (8008188 <_fAT_GET_RTC+0x104>)
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 8008108:	210a      	movs	r1, #10
    aTEMP_RTC[length++] = 0x0D;
 800810a:	81d3      	strh	r3, [r2, #14]
	aTEMP_RTC[length++] = 'D'; aTEMP_RTC[length++] = 'A'; aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'E';
 800810c:	4b1f      	ldr	r3, [pc, #124]	; (800818c <_fAT_GET_RTC+0x108>)
 800810e:	9304      	str	r3, [sp, #16]
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 8008110:	78e3      	ldrb	r3, [r4, #3]
 8008112:	7555      	strb	r5, [r2, #21]
 8008114:	3331      	adds	r3, #49	; 0x31
 8008116:	7513      	strb	r3, [r2, #20]
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 8008118:	7926      	ldrb	r6, [r4, #4]
 800811a:	0030      	movs	r0, r6
 800811c:	f7f8 f81a 	bl	8000154 <__udivsi3>
 8008120:	466b      	mov	r3, sp
 8008122:	3030      	adds	r0, #48	; 0x30
 8008124:	7598      	strb	r0, [r3, #22]
 8008126:	210a      	movs	r1, #10
 8008128:	0030      	movs	r0, r6
 800812a:	f7f8 f899 	bl	8000260 <__aeabi_uidivmod>
 800812e:	466b      	mov	r3, sp
 8008130:	3130      	adds	r1, #48	; 0x30
 8008132:	75d9      	strb	r1, [r3, #23]
 8008134:	761d      	strb	r5, [r3, #24]
	aTEMP_RTC[length++] = sRTC.month / 10 + 0x30;   aTEMP_RTC[length++] = sRTC.month % 10 + 0x30;     aTEMP_RTC[length++] = '-';
 8008136:	7966      	ldrb	r6, [r4, #5]
 8008138:	210a      	movs	r1, #10
 800813a:	0030      	movs	r0, r6
 800813c:	f7f8 f80a 	bl	8000154 <__udivsi3>
 8008140:	466b      	mov	r3, sp
 8008142:	3030      	adds	r0, #48	; 0x30
 8008144:	7658      	strb	r0, [r3, #25]
 8008146:	210a      	movs	r1, #10
 8008148:	0030      	movs	r0, r6
 800814a:	f7f8 f889 	bl	8000260 <__aeabi_uidivmod>
 800814e:	466b      	mov	r3, sp
 8008150:	3130      	adds	r1, #48	; 0x30
 8008152:	7699      	strb	r1, [r3, #26]
 8008154:	76dd      	strb	r5, [r3, #27]
	aTEMP_RTC[length++] = sRTC.year / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.year % 10 + 0x30;
 8008156:	79a4      	ldrb	r4, [r4, #6]
 8008158:	210a      	movs	r1, #10
 800815a:	0020      	movs	r0, r4
 800815c:	f7f7 fffa 	bl	8000154 <__udivsi3>
 8008160:	466b      	mov	r3, sp
 8008162:	3030      	adds	r0, #48	; 0x30
 8008164:	7718      	strb	r0, [r3, #28]
 8008166:	210a      	movs	r1, #10
 8008168:	0020      	movs	r0, r4
 800816a:	f7f8 f879 	bl	8000260 <__aeabi_uidivmod>
 800816e:	466b      	mov	r3, sp
 8008170:	3130      	adds	r1, #48	; 0x30
 8008172:	7759      	strb	r1, [r3, #29]
	DCU_Response_AT(aTEMP_RTC, length);
 8008174:	4668      	mov	r0, sp
 8008176:	211e      	movs	r1, #30
 8008178:	f000 fc0e 	bl	8008998 <DCU_Response_AT>
}
 800817c:	b00a      	add	sp, #40	; 0x28
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	454d4954 	.word	0x454d4954
 8008184:	200015f0 	.word	0x200015f0
 8008188:	0000440d 	.word	0x0000440d
 800818c:	3d455441 	.word	0x3d455441

08008190 <_fAT_GET_FIRM_VER>:
		sModem.Mode_Node = TempMode;
	#endif
}

void _fAT_GET_FIRM_VER(sData *str_Receiv, uint16_t Pos)
{
 8008190:	b510      	push	{r4, lr}
    DCU_Response_AT(sFirmVersion.Data_a8, sFirmVersion.Length_u16);
 8008192:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <_fAT_GET_FIRM_VER+0x10>)
 8008194:	8899      	ldrh	r1, [r3, #4]
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	f000 fbfe 	bl	8008998 <DCU_Response_AT>
}
 800819c:	bd10      	pop	{r4, pc}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	20000108 	.word	0x20000108

080081a4 <_fAT_GET_AUTHOR>:

void _fAT_GET_AUTHOR(sData *str_Receiv, uint16_t Pos)
{
 80081a4:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"Hello, we are the developers of this project.", 45);
 80081a6:	212d      	movs	r1, #45	; 0x2d
 80081a8:	481f      	ldr	r0, [pc, #124]	; (8008228 <_fAT_GET_AUTHOR+0x84>)
 80081aa:	f000 fbf5 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hanoi University of Science and Technology.", 43);
 80081ae:	212b      	movs	r1, #43	; 0x2b
 80081b0:	481e      	ldr	r0, [pc, #120]	; (800822c <_fAT_GET_AUTHOR+0x88>)
 80081b2:	f000 fbf1 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Industrial Instrumentation & IoT Laboratory.", 44);
 80081b6:	212c      	movs	r1, #44	; 0x2c
 80081b8:	481d      	ldr	r0, [pc, #116]	; (8008230 <_fAT_GET_AUTHOR+0x8c>)
 80081ba:	f000 fbed 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"List of project participants:", 29);
 80081be:	211d      	movs	r1, #29
 80081c0:	481c      	ldr	r0, [pc, #112]	; (8008234 <_fAT_GET_AUTHOR+0x90>)
 80081c2:	f000 fbe9 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Project Manager: Nguyen Quang Huy", 33);
 80081c6:	2121      	movs	r1, #33	; 0x21
 80081c8:	481b      	ldr	r0, [pc, #108]	; (8008238 <_fAT_GET_AUTHOR+0x94>)
 80081ca:	f000 fbe5 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hardware Designer: Ninh La Van Canh", 35);
 80081ce:	2123      	movs	r1, #35	; 0x23
 80081d0:	481a      	ldr	r0, [pc, #104]	; (800823c <_fAT_GET_AUTHOR+0x98>)
 80081d2:	f000 fbe1 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Software Developer: Huy Hung\r\n", 28);
 80081d6:	211c      	movs	r1, #28
 80081d8:	4819      	ldr	r0, [pc, #100]	; (8008240 <_fAT_GET_AUTHOR+0x9c>)
 80081da:	f000 fbdd 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"and me.", 7);
 80081de:	2107      	movs	r1, #7
 80081e0:	4818      	ldr	r0, [pc, #96]	; (8008244 <_fAT_GET_AUTHOR+0xa0>)
 80081e2:	f000 fbd9 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"  ______   _____   _______  _______  _______ ", 45);
 80081e6:	212d      	movs	r1, #45	; 0x2d
 80081e8:	4817      	ldr	r0, [pc, #92]	; (8008248 <_fAT_GET_AUTHOR+0xa4>)
 80081ea:	f000 fbd5 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" / _____) / ___ \\ /  _____)|__   __||__   __|", 45);
 80081ee:	212d      	movs	r1, #45	; 0x2d
 80081f0:	4816      	ldr	r0, [pc, #88]	; (800824c <_fAT_GET_AUTHOR+0xa8>)
 80081f2:	f000 fbd1 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"( (____  / /___\\ \\| |  ___    | |      | |   ", 42);
 80081f6:	212a      	movs	r1, #42	; 0x2a
 80081f8:	4815      	ldr	r0, [pc, #84]	; (8008250 <_fAT_GET_AUTHOR+0xac>)
 80081fa:	f000 fbcd 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" \\____ \\ |  ___  || | |__ |   | |      | |   ", 42);
 80081fe:	212a      	movs	r1, #42	; 0x2a
 8008200:	4814      	ldr	r0, [pc, #80]	; (8008254 <_fAT_GET_AUTHOR+0xb0>)
 8008202:	f000 fbc9 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" _____) )| |   | || |___/ | __| |__    | |   ", 42);
 8008206:	212a      	movs	r1, #42	; 0x2a
 8008208:	4813      	ldr	r0, [pc, #76]	; (8008258 <_fAT_GET_AUTHOR+0xb4>)
 800820a:	f000 fbc5 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"(______/ |_|   |_|\\_______/|_______|   |_|   ", 42);
 800820e:	212a      	movs	r1, #42	; 0x2a
 8008210:	4812      	ldr	r0, [pc, #72]	; (800825c <_fAT_GET_AUTHOR+0xb8>)
 8008212:	f000 fbc1 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"/******(C) COPYRIGHT by Bui Viet Duc ******/ ", 42);
 8008216:	212a      	movs	r1, #42	; 0x2a
 8008218:	4811      	ldr	r0, [pc, #68]	; (8008260 <_fAT_GET_AUTHOR+0xbc>)
 800821a:	f000 fbbd 	bl	8008998 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Thank you for everything. Good luck. See you again.", 51);
 800821e:	2133      	movs	r1, #51	; 0x33
 8008220:	4810      	ldr	r0, [pc, #64]	; (8008264 <_fAT_GET_AUTHOR+0xc0>)
 8008222:	f000 fbb9 	bl	8008998 <DCU_Response_AT>
}
 8008226:	bd10      	pop	{r4, pc}
 8008228:	0800b975 	.word	0x0800b975
 800822c:	0800b9a3 	.word	0x0800b9a3
 8008230:	0800b9cf 	.word	0x0800b9cf
 8008234:	0800b9fc 	.word	0x0800b9fc
 8008238:	0800ba1a 	.word	0x0800ba1a
 800823c:	0800ba3c 	.word	0x0800ba3c
 8008240:	0800ba60 	.word	0x0800ba60
 8008244:	0800ba7f 	.word	0x0800ba7f
 8008248:	0800ba87 	.word	0x0800ba87
 800824c:	0800bab5 	.word	0x0800bab5
 8008250:	0800bae3 	.word	0x0800bae3
 8008254:	0800bb11 	.word	0x0800bb11
 8008258:	0800bb3f 	.word	0x0800bb3f
 800825c:	0800bb6d 	.word	0x0800bb6d
 8008260:	0800bb9b 	.word	0x0800bb9b
 8008264:	0800bbc9 	.word	0x0800bbc9

08008268 <_fAT_SET_DUTY_WAKEUP>:
{
 8008268:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 < (Pos + 5))
 800826a:	8883      	ldrh	r3, [r0, #4]
 800826c:	1d0c      	adds	r4, r1, #4
 800826e:	429c      	cmp	r4, r3
 8008270:	db04      	blt.n	800827c <_fAT_SET_DUTY_WAKEUP+0x14>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8008272:	2104      	movs	r1, #4
 8008274:	4815      	ldr	r0, [pc, #84]	; (80082cc <_fAT_SET_DUTY_WAKEUP+0x64>)
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8008276:	f000 fb8f 	bl	8008998 <DCU_Response_AT>
}
 800827a:	bd70      	pop	{r4, r5, r6, pc}
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 800827c:	220a      	movs	r2, #10
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	1c4d      	adds	r5, r1, #1
 8008282:	5c43      	ldrb	r3, [r0, r1]
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008284:	b2ad      	uxth	r5, r5
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008286:	3b30      	subs	r3, #48	; 0x30
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008288:	4353      	muls	r3, r2
 800828a:	5d45      	ldrb	r5, [r0, r5]
    Pos++;
 800828c:	3103      	adds	r1, #3
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 800828e:	195b      	adds	r3, r3, r5
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008290:	b289      	uxth	r1, r1
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008292:	b2db      	uxtb	r3, r3
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008294:	b2a4      	uxth	r4, r4
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008296:	5c45      	ldrb	r5, [r0, r1]
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008298:	5d01      	ldrb	r1, [r0, r4]
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 800829a:	0018      	movs	r0, r3
 800829c:	3831      	subs	r0, #49	; 0x31
 800829e:	2809      	cmp	r0, #9
 80082a0:	d811      	bhi.n	80082c6 <_fAT_SET_DUTY_WAKEUP+0x5e>
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 80082a2:	3d30      	subs	r5, #48	; 0x30
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 80082a4:	436a      	muls	r2, r5
 80082a6:	3930      	subs	r1, #48	; 0x30
 80082a8:	1852      	adds	r2, r2, r1
 80082aa:	b292      	uxth	r2, r2
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 80082ac:	2a64      	cmp	r2, #100	; 0x64
 80082ae:	d80a      	bhi.n	80082c6 <_fAT_SET_DUTY_WAKEUP+0x5e>
        sFreqInfor.NumWakeup_u8 = TempNum;
 80082b0:	4907      	ldr	r1, [pc, #28]	; (80082d0 <_fAT_SET_DUTY_WAKEUP+0x68>)
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 80082b2:	3b30      	subs	r3, #48	; 0x30
        sFreqInfor.NumWakeup_u8 = TempNum;
 80082b4:	700b      	strb	r3, [r1, #0]
        sFreqInfor.FreqWakeup_u32 = TempFre;
 80082b6:	804a      	strh	r2, [r1, #2]
        Save_Freq_Send_Data();
 80082b8:	f000 fc90 	bl	8008bdc <Save_Freq_Send_Data>
        Reset_Chip_Immediately();
 80082bc:	f000 fb5e 	bl	800897c <Reset_Chip_Immediately>
        DCU_Response_AT ((uint8_t *)"OK", 2);
 80082c0:	2102      	movs	r1, #2
 80082c2:	4804      	ldr	r0, [pc, #16]	; (80082d4 <_fAT_SET_DUTY_WAKEUP+0x6c>)
 80082c4:	e7d7      	b.n	8008276 <_fAT_SET_DUTY_WAKEUP+0xe>
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 80082c6:	2105      	movs	r1, #5
 80082c8:	4803      	ldr	r0, [pc, #12]	; (80082d8 <_fAT_SET_DUTY_WAKEUP+0x70>)
 80082ca:	e7d4      	b.n	8008276 <_fAT_SET_DUTY_WAKEUP+0xe>
 80082cc:	0800bbfd 	.word	0x0800bbfd
 80082d0:	20000254 	.word	0x20000254
 80082d4:	0800bc02 	.word	0x0800bc02
 80082d8:	0800bc05 	.word	0x0800bc05

080082dc <_fAT_SET_TYPE_MODEM>:
{
 80082dc:	b510      	push	{r4, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 80082de:	8883      	ldrh	r3, [r0, #4]
 80082e0:	428b      	cmp	r3, r1
 80082e2:	d804      	bhi.n	80082ee <_fAT_SET_TYPE_MODEM+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 80082e4:	2104      	movs	r1, #4
 80082e6:	480b      	ldr	r0, [pc, #44]	; (8008314 <_fAT_SET_TYPE_MODEM+0x38>)
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 80082e8:	f000 fb56 	bl	8008998 <DCU_Response_AT>
}
 80082ec:	bd10      	pop	{r4, pc}
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 80082ee:	6803      	ldr	r3, [r0, #0]
 80082f0:	5c5b      	ldrb	r3, [r3, r1]
 80082f2:	3b30      	subs	r3, #48	; 0x30
 80082f4:	b2db      	uxtb	r3, r3
		if (TempNum == 0)
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d106      	bne.n	8008308 <_fAT_SET_TYPE_MODEM+0x2c>
			sModem.TypeModem_u8 = _LORA_NODE_VP;
 80082fa:	4a07      	ldr	r2, [pc, #28]	; (8008318 <_fAT_SET_TYPE_MODEM+0x3c>)
 80082fc:	7613      	strb	r3, [r2, #24]
			Save_Device_Type();
 80082fe:	f000 fcbd 	bl	8008c7c <Save_Device_Type>
			DCU_Response_AT ((uint8_t *)"OK", 2);
 8008302:	2102      	movs	r1, #2
 8008304:	4805      	ldr	r0, [pc, #20]	; (800831c <_fAT_SET_TYPE_MODEM+0x40>)
 8008306:	e7ef      	b.n	80082e8 <_fAT_SET_TYPE_MODEM+0xc>
		} else if (TempNum == 1)
 8008308:	2b01      	cmp	r3, #1
 800830a:	d0f6      	beq.n	80082fa <_fAT_SET_TYPE_MODEM+0x1e>
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 800830c:	2105      	movs	r1, #5
 800830e:	4804      	ldr	r0, [pc, #16]	; (8008320 <_fAT_SET_TYPE_MODEM+0x44>)
 8008310:	e7ea      	b.n	80082e8 <_fAT_SET_TYPE_MODEM+0xc>
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	0800bbfd 	.word	0x0800bbfd
 8008318:	200001fc 	.word	0x200001fc
 800831c:	0800bc02 	.word	0x0800bc02
 8008320:	0800bc05 	.word	0x0800bc05

08008324 <_fAT_RESET_MODEM>:
{
 8008324:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"OK", 2);
 8008326:	2102      	movs	r1, #2
 8008328:	4808      	ldr	r0, [pc, #32]	; (800834c <_fAT_RESET_MODEM+0x28>)
 800832a:	f000 fb35 	bl	8008998 <DCU_Response_AT>
	sFreqInfor.NumWakeup_u8 = 1;
 800832e:	2201      	movs	r2, #1
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <_fAT_RESET_MODEM+0x2c>)
 8008332:	701a      	strb	r2, [r3, #0]
	sFreqInfor.FreqWakeup_u32 = 100;
 8008334:	3263      	adds	r2, #99	; 0x63
 8008336:	805a      	strh	r2, [r3, #2]
	Save_Freq_Send_Data();
 8008338:	f000 fc50 	bl	8008bdc <Save_Freq_Send_Data>
		sModem.TypeModem_u8 = _LORA_NODE_VNA;
 800833c:	2200      	movs	r2, #0
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <_fAT_RESET_MODEM+0x30>)
 8008340:	761a      	strb	r2, [r3, #24]
	Save_Device_Type();
 8008342:	f000 fc9b 	bl	8008c7c <Save_Device_Type>
    Reset_Chip_Immediately();
 8008346:	f000 fb19 	bl	800897c <Reset_Chip_Immediately>
}
 800834a:	bd10      	pop	{r4, pc}
 800834c:	0800bc02 	.word	0x0800bc02
 8008350:	20000254 	.word	0x20000254
 8008354:	200001fc 	.word	0x200001fc

08008358 <_fAT_SET_RTC>:
{
 8008358:	b530      	push	{r4, r5, lr}
 800835a:	0005      	movs	r5, r0
 800835c:	b085      	sub	sp, #20
	ST_TIME_FORMAT    sRTC_temp = {0};
 800835e:	ac01      	add	r4, sp, #4
 8008360:	220c      	movs	r2, #12
 8008362:	2100      	movs	r1, #0
 8008364:	0020      	movs	r0, r4
 8008366:	f002 fb67 	bl	800aa38 <memset>
	if((*(str_Receiv->Data_a8+1)!= '-')||(*(str_Receiv->Data_a8+4)!= '-')|| (*(str_Receiv->Data_a8+7)!= '-') ||
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	785a      	ldrb	r2, [r3, #1]
 800836e:	2a2d      	cmp	r2, #45	; 0x2d
 8008370:	d10e      	bne.n	8008390 <_fAT_SET_RTC+0x38>
 8008372:	791a      	ldrb	r2, [r3, #4]
 8008374:	2a2d      	cmp	r2, #45	; 0x2d
 8008376:	d10b      	bne.n	8008390 <_fAT_SET_RTC+0x38>
 8008378:	79da      	ldrb	r2, [r3, #7]
 800837a:	2a2d      	cmp	r2, #45	; 0x2d
 800837c:	d108      	bne.n	8008390 <_fAT_SET_RTC+0x38>
 800837e:	7a9a      	ldrb	r2, [r3, #10]
 8008380:	2a2c      	cmp	r2, #44	; 0x2c
 8008382:	d105      	bne.n	8008390 <_fAT_SET_RTC+0x38>
		(*(str_Receiv->Data_a8+10)!= ',')||(*(str_Receiv->Data_a8+13)!= ':')||(*(str_Receiv->Data_a8+16)!= ':'))
 8008384:	7b5a      	ldrb	r2, [r3, #13]
 8008386:	2a3a      	cmp	r2, #58	; 0x3a
 8008388:	d102      	bne.n	8008390 <_fAT_SET_RTC+0x38>
 800838a:	7c1a      	ldrb	r2, [r3, #16]
 800838c:	2a3a      	cmp	r2, #58	; 0x3a
 800838e:	d005      	beq.n	800839c <_fAT_SET_RTC+0x44>
		DCU_Response_AT((uint8_t *)"ERROR", 5);
 8008390:	2105      	movs	r1, #5
 8008392:	4820      	ldr	r0, [pc, #128]	; (8008414 <_fAT_SET_RTC+0xbc>)
			DCU_Response_AT((uint8_t *)"OK", 2);
 8008394:	f000 fb00 	bl	8008998 <DCU_Response_AT>
}
 8008398:	b005      	add	sp, #20
 800839a:	bd30      	pop	{r4, r5, pc}
		sRTC_temp.day   = (*(str_Receiv->Data_a8))-0x30 - 1;
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	3a31      	subs	r2, #49	; 0x31
 80083a0:	70e2      	strb	r2, [r4, #3]
		sRTC_temp.date  = ((*(str_Receiv->Data_a8 + 2))-0x30)*10 + (*(str_Receiv->Data_a8 + 3) - 0x30);
 80083a2:	220a      	movs	r2, #10
 80083a4:	7899      	ldrb	r1, [r3, #2]
 80083a6:	78d8      	ldrb	r0, [r3, #3]
 80083a8:	4351      	muls	r1, r2
 80083aa:	3810      	subs	r0, #16
 80083ac:	1809      	adds	r1, r1, r0
 80083ae:	7121      	strb	r1, [r4, #4]
		sRTC_temp.month = ((*(str_Receiv->Data_a8 + 5))-0x30)*10 + (*(str_Receiv->Data_a8 + 6) - 0x30);
 80083b0:	7959      	ldrb	r1, [r3, #5]
 80083b2:	7998      	ldrb	r0, [r3, #6]
 80083b4:	4351      	muls	r1, r2
 80083b6:	3810      	subs	r0, #16
 80083b8:	1809      	adds	r1, r1, r0
 80083ba:	7161      	strb	r1, [r4, #5]
		sRTC_temp.year  = ((*(str_Receiv->Data_a8 + 8))-0x30)*10 + (*(str_Receiv->Data_a8 + 9) - 0x30);
 80083bc:	7a19      	ldrb	r1, [r3, #8]
 80083be:	7a58      	ldrb	r0, [r3, #9]
 80083c0:	4351      	muls	r1, r2
 80083c2:	3810      	subs	r0, #16
 80083c4:	1809      	adds	r1, r1, r0
 80083c6:	71a1      	strb	r1, [r4, #6]
		sRTC_temp.hour  = ((*(str_Receiv->Data_a8 + 11))-0x30)*10 + (*(str_Receiv->Data_a8 + 12) - 0x30);
 80083c8:	7ad9      	ldrb	r1, [r3, #11]
 80083ca:	7b18      	ldrb	r0, [r3, #12]
 80083cc:	4351      	muls	r1, r2
 80083ce:	3810      	subs	r0, #16
 80083d0:	1809      	adds	r1, r1, r0
 80083d2:	7021      	strb	r1, [r4, #0]
		sRTC_temp.min   = ((*(str_Receiv->Data_a8 + 14))-0x30)*10 + (*(str_Receiv->Data_a8 + 15) - 0x30);
 80083d4:	7b99      	ldrb	r1, [r3, #14]
 80083d6:	7bd8      	ldrb	r0, [r3, #15]
 80083d8:	4351      	muls	r1, r2
 80083da:	3810      	subs	r0, #16
 80083dc:	1809      	adds	r1, r1, r0
 80083de:	7061      	strb	r1, [r4, #1]
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 80083e0:	7c59      	ldrb	r1, [r3, #17]
 80083e2:	7c9b      	ldrb	r3, [r3, #18]
 80083e4:	434a      	muls	r2, r1
 80083e6:	3b10      	subs	r3, #16
 80083e8:	18d2      	adds	r2, r2, r3
		if (Check_update_Time(&sRTC_temp) != 1)
 80083ea:	0020      	movs	r0, r4
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 80083ec:	70a2      	strb	r2, [r4, #2]
		if (Check_update_Time(&sRTC_temp) != 1)
 80083ee:	f001 fd4b 	bl	8009e88 <Check_update_Time>
 80083f2:	2801      	cmp	r0, #1
 80083f4:	d1cc      	bne.n	8008390 <_fAT_SET_RTC+0x38>
			sRTCSet.hour    = sRTC_temp.hour;
 80083f6:	4b08      	ldr	r3, [pc, #32]	; (8008418 <_fAT_SET_RTC+0xc0>)
 80083f8:	9901      	ldr	r1, [sp, #4]
			sRTCSet.year    = sRTC_temp.year;
 80083fa:	79a2      	ldrb	r2, [r4, #6]
			sRTCSet.hour    = sRTC_temp.hour;
 80083fc:	6019      	str	r1, [r3, #0]
			sRTCSet.date    = sRTC_temp.date;
 80083fe:	88a1      	ldrh	r1, [r4, #4]
			fevent_active(sEventAppCom, _EVENT_SET_RTC);
 8008400:	4806      	ldr	r0, [pc, #24]	; (800841c <_fAT_SET_RTC+0xc4>)
			sRTCSet.date    = sRTC_temp.date;
 8008402:	8099      	strh	r1, [r3, #4]
			fevent_active(sEventAppCom, _EVENT_SET_RTC);
 8008404:	2105      	movs	r1, #5
			sRTCSet.year    = sRTC_temp.year;
 8008406:	719a      	strb	r2, [r3, #6]
			fevent_active(sEventAppCom, _EVENT_SET_RTC);
 8008408:	f001 f964 	bl	80096d4 <fevent_active>
			DCU_Response_AT((uint8_t *)"OK", 2);
 800840c:	2102      	movs	r1, #2
 800840e:	4804      	ldr	r0, [pc, #16]	; (8008420 <_fAT_SET_RTC+0xc8>)
 8008410:	e7c0      	b.n	8008394 <_fAT_SET_RTC+0x3c>
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	0800bc05 	.word	0x0800bc05
 8008418:	20001340 	.word	0x20001340
 800841c:	20000024 	.word	0x20000024
 8008420:	0800bc02 	.word	0x0800bc02

08008424 <_fAT_SET_DEVICE_ID>:
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8008424:	000b      	movs	r3, r1
{
 8008426:	b570      	push	{r4, r5, r6, lr}
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8008428:	8882      	ldrh	r2, [r0, #4]
 800842a:	3314      	adds	r3, #20
{
 800842c:	0005      	movs	r5, r0
 800842e:	000c      	movs	r4, r1
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8008430:	429a      	cmp	r2, r3
 8008432:	dc21      	bgt.n	8008478 <_fAT_SET_DEVICE_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8008434:	2102      	movs	r1, #2
 8008436:	4813      	ldr	r0, [pc, #76]	; (8008484 <_fAT_SET_DEVICE_ID+0x60>)
 8008438:	f000 faae 	bl	8008998 <DCU_Response_AT>
        UTIL_MEM_set(&aDCU_ID, 0, sizeof(aDCU_ID));
 800843c:	2214      	movs	r2, #20
 800843e:	2100      	movs	r1, #0
 8008440:	4811      	ldr	r0, [pc, #68]	; (8008488 <_fAT_SET_DEVICE_ID+0x64>)
 8008442:	f001 ff3b 	bl	800a2bc <UTIL_MEM_set>
        sModem.sDCU_id.Length_u16 = 0;
 8008446:	2200      	movs	r2, #0
 8008448:	4b10      	ldr	r3, [pc, #64]	; (800848c <_fAT_SET_DEVICE_ID+0x68>)
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 800844a:	b2e1      	uxtb	r1, r4
        sModem.sDCU_id.Length_u16 = 0;
 800844c:	809a      	strh	r2, [r3, #4]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 800844e:	88aa      	ldrh	r2, [r5, #4]
 8008450:	428a      	cmp	r2, r1
 8008452:	d805      	bhi.n	8008460 <_fAT_SET_DEVICE_ID+0x3c>
        Save_ID(0);
 8008454:	2000      	movs	r0, #0
 8008456:	f000 fb55 	bl	8008b04 <Save_ID>
        Reset_Chip_Immediately();
 800845a:	f000 fa8f 	bl	800897c <Reset_Chip_Immediately>
}
 800845e:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sDCU_id.Length_u16 >= sizeof(aDCU_ID))
 8008460:	889a      	ldrh	r2, [r3, #4]
 8008462:	2a13      	cmp	r2, #19
 8008464:	d8f6      	bhi.n	8008454 <_fAT_SET_DEVICE_ID+0x30>
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8008466:	682c      	ldr	r4, [r5, #0]
 8008468:	1c56      	adds	r6, r2, #1
 800846a:	809e      	strh	r6, [r3, #4]
 800846c:	5c64      	ldrb	r4, [r4, r1]
 800846e:	6818      	ldr	r0, [r3, #0]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8008470:	3101      	adds	r1, #1
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8008472:	5484      	strb	r4, [r0, r2]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8008474:	b2c9      	uxtb	r1, r1
 8008476:	e7ea      	b.n	800844e <_fAT_SET_DEVICE_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8008478:	2104      	movs	r1, #4
 800847a:	4805      	ldr	r0, [pc, #20]	; (8008490 <_fAT_SET_DEVICE_ID+0x6c>)
 800847c:	f000 fa8c 	bl	8008998 <DCU_Response_AT>
}
 8008480:	e7ed      	b.n	800845e <_fAT_SET_DEVICE_ID+0x3a>
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	0800bc02 	.word	0x0800bc02
 8008488:	2000027c 	.word	0x2000027c
 800848c:	200001fc 	.word	0x200001fc
 8008490:	0800bbfd 	.word	0x0800bbfd

08008494 <_fAT_SET_NETWORK_ID>:
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8008494:	000b      	movs	r3, r1
{
 8008496:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8008498:	8882      	ldrh	r2, [r0, #4]
 800849a:	3314      	adds	r3, #20
{
 800849c:	0005      	movs	r5, r0
 800849e:	000c      	movs	r4, r1
    if (str_Receiv->Length_u16 <= (Pos + 20))
 80084a0:	429a      	cmp	r2, r3
 80084a2:	dc21      	bgt.n	80084e8 <_fAT_SET_NETWORK_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 80084a4:	2102      	movs	r1, #2
 80084a6:	4813      	ldr	r0, [pc, #76]	; (80084f4 <_fAT_SET_NETWORK_ID+0x60>)
 80084a8:	f000 fa76 	bl	8008998 <DCU_Response_AT>
        UTIL_MEM_set(&aNET_ID, 0, sizeof(aNET_ID));
 80084ac:	2214      	movs	r2, #20
 80084ae:	2100      	movs	r1, #0
 80084b0:	4811      	ldr	r0, [pc, #68]	; (80084f8 <_fAT_SET_NETWORK_ID+0x64>)
 80084b2:	f001 ff03 	bl	800a2bc <UTIL_MEM_set>
        sModem.sNET_id.Length_u16 = 0;
 80084b6:	2200      	movs	r2, #0
 80084b8:	4b10      	ldr	r3, [pc, #64]	; (80084fc <_fAT_SET_NETWORK_ID+0x68>)
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 80084ba:	b2e1      	uxtb	r1, r4
        sModem.sNET_id.Length_u16 = 0;
 80084bc:	819a      	strh	r2, [r3, #12]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 80084be:	88aa      	ldrh	r2, [r5, #4]
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d805      	bhi.n	80084d0 <_fAT_SET_NETWORK_ID+0x3c>
        Save_ID(1);
 80084c4:	2001      	movs	r0, #1
 80084c6:	f000 fb1d 	bl	8008b04 <Save_ID>
        Reset_Chip_Immediately();
 80084ca:	f000 fa57 	bl	800897c <Reset_Chip_Immediately>
}
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sNET_id.Length_u16 >= sizeof(aNET_ID))
 80084d0:	899a      	ldrh	r2, [r3, #12]
 80084d2:	2a13      	cmp	r2, #19
 80084d4:	d8f6      	bhi.n	80084c4 <_fAT_SET_NETWORK_ID+0x30>
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 80084d6:	682c      	ldr	r4, [r5, #0]
 80084d8:	1c56      	adds	r6, r2, #1
 80084da:	819e      	strh	r6, [r3, #12]
 80084dc:	5c64      	ldrb	r4, [r4, r1]
 80084de:	6898      	ldr	r0, [r3, #8]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 80084e0:	3101      	adds	r1, #1
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 80084e2:	5484      	strb	r4, [r0, r2]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 80084e4:	b2c9      	uxtb	r1, r1
 80084e6:	e7ea      	b.n	80084be <_fAT_SET_NETWORK_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 80084e8:	2104      	movs	r1, #4
 80084ea:	4805      	ldr	r0, [pc, #20]	; (8008500 <_fAT_SET_NETWORK_ID+0x6c>)
 80084ec:	f000 fa54 	bl	8008998 <DCU_Response_AT>
}
 80084f0:	e7ed      	b.n	80084ce <_fAT_SET_NETWORK_ID+0x3a>
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	0800bc02 	.word	0x0800bc02
 80084f8:	20000268 	.word	0x20000268
 80084fc:	200001fc 	.word	0x200001fc
 8008500:	0800bbfd 	.word	0x0800bbfd

08008504 <_fAT_SET_MODE>:
{
 8008504:	b510      	push	{r4, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8008506:	8883      	ldrh	r3, [r0, #4]
 8008508:	428b      	cmp	r3, r1
 800850a:	d804      	bhi.n	8008516 <_fAT_SET_MODE+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 800850c:	2104      	movs	r1, #4
 800850e:	4808      	ldr	r0, [pc, #32]	; (8008530 <_fAT_SET_MODE+0x2c>)
 8008510:	f000 fa42 	bl	8008998 <DCU_Response_AT>
}
 8008514:	bd10      	pop	{r4, pc}
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8008516:	6803      	ldr	r3, [r0, #0]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8008518:	2004      	movs	r0, #4
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 800851a:	5c5c      	ldrb	r4, [r3, r1]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 800851c:	4905      	ldr	r1, [pc, #20]	; (8008534 <_fAT_SET_MODE+0x30>)
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 800851e:	3c30      	subs	r4, #48	; 0x30
 8008520:	b2e4      	uxtb	r4, r4
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8008522:	0022      	movs	r2, r4
 8008524:	f001 fece 	bl	800a2c4 <LOG>
		sModem.Mode_Node = TempMode;
 8008528:	4b03      	ldr	r3, [pc, #12]	; (8008538 <_fAT_SET_MODE+0x34>)
 800852a:	765c      	strb	r4, [r3, #25]
 800852c:	e7f2      	b.n	8008514 <_fAT_SET_MODE+0x10>
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	0800bbfd 	.word	0x0800bbfd
 8008534:	0800bc0b 	.word	0x0800bc0b
 8008538:	200001fc 	.word	0x200001fc

0800853c <Check_AT_User>:
{
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 800853e:	4b3c      	ldr	r3, [pc, #240]	; (8008630 <Check_AT_User+0xf4>)
{
 8008540:	b087      	sub	sp, #28
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	2300      	movs	r3, #0
{
 8008546:	0004      	movs	r4, r0
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8008548:	2102      	movs	r1, #2
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 800854a:	aa04      	add	r2, sp, #16
 800854c:	8093      	strh	r3, [r2, #4]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 800854e:	88a2      	ldrh	r2, [r4, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d826      	bhi.n	80085a2 <Check_AT_User+0x66>
 8008554:	2500      	movs	r5, #0
 8008556:	4f37      	ldr	r7, [pc, #220]	; (8008634 <Check_AT_User+0xf8>)
		Pos_Str = Find_String_V2((sData*) &CheckList_AT_CONFIG[var].sTempReceiver, StrUartRecei);
 8008558:	0038      	movs	r0, r7
 800855a:	0021      	movs	r1, r4
 800855c:	3008      	adds	r0, #8
 800855e:	f001 fbf3 	bl	8009d48 <Find_String_V2>
 8008562:	1e06      	subs	r6, r0, #0
		if ((Pos_Str >= 0) && (CheckList_AT_CONFIG[var].CallBack != NULL))
 8008564:	db5c      	blt.n	8008620 <Check_AT_User+0xe4>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d058      	beq.n	8008620 <Check_AT_User+0xe4>
			Reset_Buff(&sModem.strATCmd);
 800856e:	4832      	ldr	r0, [pc, #200]	; (8008638 <Check_AT_User+0xfc>)
 8008570:	f001 fe70 	bl	800a254 <Reset_Buff>
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8008574:	2300      	movs	r3, #0
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8008576:	4a31      	ldr	r2, [pc, #196]	; (800863c <Check_AT_User+0x100>)
 8008578:	9203      	str	r2, [sp, #12]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 800857a:	88a2      	ldrh	r2, [r4, #4]
 800857c:	1b92      	subs	r2, r2, r6
 800857e:	4293      	cmp	r3, r2
 8008580:	db1f      	blt.n	80085c2 <Check_AT_User+0x86>
			Pos_Str += CheckList_AT_CONFIG[var].sTempReceiver.Length_u16;
 8008582:	4b2c      	ldr	r3, [pc, #176]	; (8008634 <Check_AT_User+0xf8>)
 8008584:	012d      	lsls	r5, r5, #4
 8008586:	195b      	adds	r3, r3, r5
 8008588:	899b      	ldrh	r3, [r3, #12]
 800858a:	199b      	adds	r3, r3, r6
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 800858c:	88a2      	ldrh	r2, [r4, #4]
 800858e:	b29b      	uxth	r3, r3
 8008590:	429a      	cmp	r2, r3
 8008592:	d82e      	bhi.n	80085f2 <Check_AT_User+0xb6>
			CheckList_AT_CONFIG[var].CallBack(&sDataConfig, 0);
 8008594:	a804      	add	r0, sp, #16
 8008596:	2100      	movs	r1, #0
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	4798      	blx	r3
			return 1;
 800859c:	2001      	movs	r0, #1
}
 800859e:	b007      	add	sp, #28
 80085a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	18d0      	adds	r0, r2, r3
 80085a6:	5cd2      	ldrb	r2, [r2, r3]
 80085a8:	0015      	movs	r5, r2
 80085aa:	438d      	bics	r5, r1
 80085ac:	2d3d      	cmp	r5, #61	; 0x3d
 80085ae:	d0d1      	beq.n	8008554 <Check_AT_User+0x18>
		if ((*(StrUartRecei->Data_a8 + i) >= 0x41) && (*(StrUartRecei->Data_a8 + i) <= 0x5A))
 80085b0:	0015      	movs	r5, r2
 80085b2:	3d41      	subs	r5, #65	; 0x41
 80085b4:	2d19      	cmp	r5, #25
 80085b6:	d801      	bhi.n	80085bc <Check_AT_User+0x80>
			*(StrUartRecei->Data_a8 + i) = *(StrUartRecei->Data_a8 + i) + 0x20;
 80085b8:	3220      	adds	r2, #32
 80085ba:	7002      	strb	r2, [r0, #0]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 80085bc:	3301      	adds	r3, #1
 80085be:	b29b      	uxth	r3, r3
 80085c0:	e7c5      	b.n	800854e <Check_AT_User+0x12>
				if ((*(StrUartRecei->Data_a8 + Pos_Str + i) == '?') || (*(StrUartRecei->Data_a8+Pos_Str+i) == '=') \
 80085c2:	6827      	ldr	r7, [r4, #0]
 80085c4:	199a      	adds	r2, r3, r6
 80085c6:	18b8      	adds	r0, r7, r2
 80085c8:	9002      	str	r0, [sp, #8]
 80085ca:	2002      	movs	r0, #2
 80085cc:	5cba      	ldrb	r2, [r7, r2]
 80085ce:	4382      	bics	r2, r0
 80085d0:	2a3d      	cmp	r2, #61	; 0x3d
 80085d2:	d0d6      	beq.n	8008582 <Check_AT_User+0x46>
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 80085d4:	4a1a      	ldr	r2, [pc, #104]	; (8008640 <Check_AT_User+0x104>)
 80085d6:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80085d8:	2aff      	cmp	r2, #255	; 0xff
 80085da:	d8d2      	bhi.n	8008582 <Check_AT_User+0x46>
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 80085dc:	9903      	ldr	r1, [sp, #12]
 80085de:	1c50      	adds	r0, r2, #1
 80085e0:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 80085e2:	4917      	ldr	r1, [pc, #92]	; (8008640 <Check_AT_User+0x104>)
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 80085e4:	3301      	adds	r3, #1
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 80085e6:	87c8      	strh	r0, [r1, #62]	; 0x3e
 80085e8:	9802      	ldr	r0, [sp, #8]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 80085ea:	b29b      	uxth	r3, r3
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 80085ec:	7800      	ldrb	r0, [r0, #0]
 80085ee:	54b8      	strb	r0, [r7, r2]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 80085f0:	e7c3      	b.n	800857a <Check_AT_User+0x3e>
				if (*(StrUartRecei->Data_a8 + i) == 0x0D)
 80085f2:	6821      	ldr	r1, [r4, #0]
 80085f4:	18c8      	adds	r0, r1, r3
 80085f6:	5cc9      	ldrb	r1, [r1, r3]
 80085f8:	290d      	cmp	r1, #13
 80085fa:	d105      	bne.n	8008608 <Check_AT_User+0xcc>
					if ( (i < (StrUartRecei->Length_u16 - 1)) && (*(StrUartRecei->Data_a8 + i + 1) == 0x0A) )
 80085fc:	3a01      	subs	r2, #1
 80085fe:	4293      	cmp	r3, r2
 8008600:	da02      	bge.n	8008608 <Check_AT_User+0xcc>
 8008602:	7842      	ldrb	r2, [r0, #1]
 8008604:	2a0a      	cmp	r2, #10
 8008606:	d0c5      	beq.n	8008594 <Check_AT_User+0x58>
				if ( sDataConfig.Length_u16 < sizeof(aDATA_CONFIG) )
 8008608:	aa04      	add	r2, sp, #16
 800860a:	8892      	ldrh	r2, [r2, #4]
 800860c:	2a7f      	cmp	r2, #127	; 0x7f
 800860e:	d805      	bhi.n	800861c <Check_AT_User+0xe0>
					*(sDataConfig.Data_a8 + sDataConfig.Length_u16++) = *(StrUartRecei->Data_a8 + i);
 8008610:	1c55      	adds	r5, r2, #1
 8008612:	ae04      	add	r6, sp, #16
 8008614:	80b5      	strh	r5, [r6, #4]
 8008616:	9904      	ldr	r1, [sp, #16]
 8008618:	7800      	ldrb	r0, [r0, #0]
 800861a:	5488      	strb	r0, [r1, r2]
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 800861c:	3301      	adds	r3, #1
 800861e:	e7b5      	b.n	800858c <Check_AT_User+0x50>
	for (var = _AT_SET_DEVICE_ID; var <= _END_AT_CMD; var++)
 8008620:	3501      	adds	r5, #1
 8008622:	3710      	adds	r7, #16
 8008624:	2d10      	cmp	r5, #16
 8008626:	d000      	beq.n	800862a <Check_AT_User+0xee>
 8008628:	e796      	b.n	8008558 <Check_AT_User+0x1c>
	return 0;
 800862a:	2000      	movs	r0, #0
 800862c:	e7b7      	b.n	800859e <Check_AT_User+0x62>
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	200009e4 	.word	0x200009e4
 8008634:	0800b54c 	.word	0x0800b54c
 8008638:	2000023c 	.word	0x2000023c
 800863c:	200001fc 	.word	0x200001fc
 8008640:	20000202 	.word	0x20000202

08008644 <Flash_Save_U16>:

/**
 * @brief	Save Index Send or Save
 */
void Flash_Save_U16 (uint32_t andress, uint16_t Num)
{
 8008644:	000b      	movs	r3, r1
 8008646:	b507      	push	{r0, r1, r2, lr}
    uint8_t aTemp[4] = {0};
 8008648:	2200      	movs	r2, #0
 800864a:	a901      	add	r1, sp, #4
    aTemp[0] = (uint8_t) (Num >> 8);
 800864c:	ba5b      	rev16	r3, r3
    uint8_t aTemp[4] = {0};
 800864e:	9201      	str	r2, [sp, #4]
    aTemp[0] = (uint8_t) (Num >> 8);
 8008650:	800b      	strh	r3, [r1, #0]
    aTemp[1] = (uint8_t) Num;
    Save_Array(andress, &aTemp[0], 2);
 8008652:	3202      	adds	r2, #2
 8008654:	f001 f8b8 	bl	80097c8 <Save_Array>
}
 8008658:	bd07      	pop	{r0, r1, r2, pc}

0800865a <Flash_Read_Record_Without_Index>:
    }
    return 0;
}

uint8_t Flash_Read_Record_Without_Index (uint32_t andress, sData* str)
{
 800865a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t     i = 0, Length = 0;
    uint8_t		ChecksumByte = 0;
    uint8_t     FirstByte = 0;
    uint8_t     aTEMPData[256] = {0};
 800865c:	2400      	movs	r4, #0
{
 800865e:	0007      	movs	r7, r0
 8008660:	b0c1      	sub	sp, #260	; 0x104
    uint8_t     aTEMPData[256] = {0};
 8008662:	22fc      	movs	r2, #252	; 0xfc
{
 8008664:	000d      	movs	r5, r1
    uint8_t     aTEMPData[256] = {0};
 8008666:	a801      	add	r0, sp, #4
 8008668:	0021      	movs	r1, r4
 800866a:	9400      	str	r4, [sp, #0]
 800866c:	f002 f9e4 	bl	800aa38 <memset>
    FirstByte = *(__IO uint8_t*)(andress);
 8008670:	783b      	ldrb	r3, [r7, #0]
    Length = *(__IO uint8_t*)(andress + 1);
 8008672:	787a      	ldrb	r2, [r7, #1]
    FirstByte = *(__IO uint8_t*)(andress);
 8008674:	b2db      	uxtb	r3, r3
    Length = *(__IO uint8_t*)(andress + 1);
 8008676:	b2d6      	uxtb	r6, r2
    if ((Length >= 255) ||(FirstByte != 0xAA))
 8008678:	2aff      	cmp	r2, #255	; 0xff
 800867a:	d102      	bne.n	8008682 <Flash_Read_Record_Without_Index+0x28>
    {
        return 0;
 800867c:	2000      	movs	r0, #0
        for(i = 0; i < Length; i++)
            *(str->Data_a8 + str->Length_u16++) = aTEMPData[i];
        return 1;
    }
    return 0;
}
 800867e:	b041      	add	sp, #260	; 0x104
 8008680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((Length >= 255) ||(FirstByte != 0xAA))
 8008682:	2baa      	cmp	r3, #170	; 0xaa
 8008684:	d1fa      	bne.n	800867c <Flash_Read_Record_Without_Index+0x22>
    OnchipFlashReadData(andress + 2, &aTEMPData[0], Length);
 8008686:	4669      	mov	r1, sp
 8008688:	b2b2      	uxth	r2, r6
 800868a:	1cb8      	adds	r0, r7, #2
 800868c:	f001 f891 	bl	80097b2 <OnchipFlashReadData>
	for(i = 0; i < (Length-1); i++)
 8008690:	0022      	movs	r2, r4
 8008692:	1e71      	subs	r1, r6, #1
		ChecksumByte ^= aTEMPData[i];
 8008694:	466b      	mov	r3, sp
	for(i = 0; i < (Length-1); i++)
 8008696:	428a      	cmp	r2, r1
 8008698:	db04      	blt.n	80086a4 <Flash_Read_Record_Without_Index+0x4a>
    if (ChecksumByte == aTEMPData[Length-1])
 800869a:	5c5a      	ldrb	r2, [r3, r1]
 800869c:	42a2      	cmp	r2, r4
 800869e:	d1ed      	bne.n	800867c <Flash_Read_Record_Without_Index+0x22>
 80086a0:	2300      	movs	r3, #0
 80086a2:	e00c      	b.n	80086be <Flash_Read_Record_Without_Index+0x64>
		ChecksumByte ^= aTEMPData[i];
 80086a4:	5c98      	ldrb	r0, [r3, r2]
	for(i = 0; i < (Length-1); i++)
 80086a6:	3201      	adds	r2, #1
		ChecksumByte ^= aTEMPData[i];
 80086a8:	4044      	eors	r4, r0
	for(i = 0; i < (Length-1); i++)
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	e7f2      	b.n	8008694 <Flash_Read_Record_Without_Index+0x3a>
            *(str->Data_a8 + str->Length_u16++) = aTEMPData[i];
 80086ae:	88aa      	ldrh	r2, [r5, #4]
 80086b0:	6829      	ldr	r1, [r5, #0]
 80086b2:	1c50      	adds	r0, r2, #1
 80086b4:	80a8      	strh	r0, [r5, #4]
 80086b6:	4668      	mov	r0, sp
 80086b8:	5cc0      	ldrb	r0, [r0, r3]
 80086ba:	3301      	adds	r3, #1
 80086bc:	5488      	strb	r0, [r1, r2]
        for(i = 0; i < Length; i++)
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	4296      	cmp	r6, r2
 80086c2:	d8f4      	bhi.n	80086ae <Flash_Read_Record_Without_Index+0x54>
        return 1;
 80086c4:	2001      	movs	r0, #1
 80086c6:	e7da      	b.n	800867e <Flash_Read_Record_Without_Index+0x24>

080086c8 <Flash_Save_Record>:

/**
 * @brief	Save Data to Flash
 */
uint8_t Flash_Save_Record (StructManageRecordFlash *sRecord, uint8_t *pData, uint8_t Length)
{
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t AddFlashWrite_u32 = 0;
    uint8_t Result = FALSE;
    //Luu vao Flash
    //Check xem co phai start flash k? se xoa sector tiep theo
    AddFlashWrite_u32 = sRecord->AddStart_u32 + sRecord->IndexSave_u16 * sRecord->SizeRecord_u16;
 80086ca:	8843      	ldrh	r3, [r0, #2]
 80086cc:	89c5      	ldrh	r5, [r0, #14]
{
 80086ce:	0004      	movs	r4, r0
    AddFlashWrite_u32 = sRecord->AddStart_u32 + sRecord->IndexSave_u16 * sRecord->SizeRecord_u16;
 80086d0:	435d      	muls	r5, r3
 80086d2:	6843      	ldr	r3, [r0, #4]
{
 80086d4:	000f      	movs	r7, r1
    AddFlashWrite_u32 = sRecord->AddStart_u32 + sRecord->IndexSave_u16 * sRecord->SizeRecord_u16;
 80086d6:	18ed      	adds	r5, r5, r3
{
 80086d8:	0016      	movs	r6, r2

    if (_ON_FLASH_IS_NEW_PAGE (AddFlashWrite_u32) == 0)
 80086da:	066b      	lsls	r3, r5, #25
 80086dc:	d103      	bne.n	80086e6 <Flash_Save_Record+0x1e>
        Erase_Firmware(AddFlashWrite_u32, 1);
 80086de:	2101      	movs	r1, #1
 80086e0:	0028      	movs	r0, r5
 80086e2:	f001 f859 	bl	8009798 <Erase_Firmware>

    Result = Save_Array_without_erase (AddFlashWrite_u32, pData, Length);  //cho du luu vao thanh cong hay khong cung phai tang index
 80086e6:	b2b2      	uxth	r2, r6
 80086e8:	0039      	movs	r1, r7
 80086ea:	0028      	movs	r0, r5
 80086ec:	f001 f892 	bl	8009814 <Save_Array_without_erase>
 80086f0:	0005      	movs	r5, r0

    //kiem tra xem ban ghi moi nay da vuot qua max chua.
    sRecord->IndexSave_u16++;
 80086f2:	8860      	ldrh	r0, [r4, #2]
    sRecord->IndexSave_u16 = sRecord->IndexSave_u16 % sRecord->MaxRecord_u16;
 80086f4:	89a1      	ldrh	r1, [r4, #12]
    sRecord->IndexSave_u16++;
 80086f6:	3001      	adds	r0, #1
    sRecord->IndexSave_u16 = sRecord->IndexSave_u16 % sRecord->MaxRecord_u16;
 80086f8:	b280      	uxth	r0, r0
 80086fa:	f7f7 fdb1 	bl	8000260 <__aeabi_uidivmod>
 80086fe:	b289      	uxth	r1, r1
 * 			Index Save: type 1
 * @retval
 */
void Flash_Save_Index (uint32_t Add, uint16_t Value)
{
    Flash_Save_U16 (Add, Value);
 8008700:	6960      	ldr	r0, [r4, #20]
    sRecord->IndexSave_u16 = sRecord->IndexSave_u16 % sRecord->MaxRecord_u16;
 8008702:	8061      	strh	r1, [r4, #2]
    Flash_Save_U16 (Add, Value);
 8008704:	f7ff ff9e 	bl	8008644 <Flash_Save_U16>
    if (sRecord->IndexSave_u16 == sRecord->IndexSend_u16)
 8008708:	8823      	ldrh	r3, [r4, #0]
 800870a:	8860      	ldrh	r0, [r4, #2]
 800870c:	4298      	cmp	r0, r3
 800870e:	d108      	bne.n	8008722 <Flash_Save_Record+0x5a>
        sRecord->IndexSend_u16 = (sRecord->IndexSend_u16 + 1) % sRecord->MaxRecord_u16;
 8008710:	89a1      	ldrh	r1, [r4, #12]
 8008712:	3001      	adds	r0, #1
 8008714:	f7f7 fe8e 	bl	8000434 <__aeabi_idivmod>
 8008718:	b289      	uxth	r1, r1
    Flash_Save_U16 (Add, Value);
 800871a:	6920      	ldr	r0, [r4, #16]
        sRecord->IndexSend_u16 = (sRecord->IndexSend_u16 + 1) % sRecord->MaxRecord_u16;
 800871c:	8021      	strh	r1, [r4, #0]
    Flash_Save_U16 (Add, Value);
 800871e:	f7ff ff91 	bl	8008644 <Flash_Save_U16>
}
 8008722:	0028      	movs	r0, r5
 8008724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008726 <Flash_Save_Index>:
{
 8008726:	b510      	push	{r4, lr}
    Flash_Save_U16 (Add, Value);
 8008728:	f7ff ff8c 	bl	8008644 <Flash_Save_U16>
}
 800872c:	bd10      	pop	{r4, pc}

0800872e <Flash_Get_Infor>:

/**
 * @brief	Init Infor from Flash
 */
void Flash_Get_Infor (uint32_t AddStart, uint8_t *pData, uint16_t *Length, uint8_t MAX_LEGNTH_INFOR)
{
 800872e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008730:	0017      	movs	r7, r2
    uint8_t LenTemp = 0;

    LenTemp = *(__IO uint8_t*) (AddStart);
 8008732:	7802      	ldrb	r2, [r0, #0]
{
 8008734:	0005      	movs	r5, r0
    LenTemp = *(__IO uint8_t*) (AddStart);
 8008736:	b2d2      	uxtb	r2, r2
{
 8008738:	000e      	movs	r6, r1
 800873a:	1c14      	adds	r4, r2, #0
 800873c:	429a      	cmp	r2, r3
 800873e:	d900      	bls.n	8008742 <Flash_Get_Infor+0x14>
 8008740:	1c1c      	adds	r4, r3, #0
 8008742:	b2e4      	uxtb	r4, r4

    if (LenTemp > MAX_LEGNTH_INFOR)
        LenTemp = MAX_LEGNTH_INFOR;
    //clear buff
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 8008744:	0030      	movs	r0, r6
 8008746:	b29a      	uxth	r2, r3
    //Read flash
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 8008748:	b2a4      	uxth	r4, r4
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 800874a:	2100      	movs	r1, #0
 800874c:	f001 fdb6 	bl	800a2bc <UTIL_MEM_set>
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 8008750:	0031      	movs	r1, r6
 8008752:	1c68      	adds	r0, r5, #1
 8008754:	0022      	movs	r2, r4
 8008756:	f001 f82c 	bl	80097b2 <OnchipFlashReadData>
    *Length = LenTemp;
 800875a:	803c      	strh	r4, [r7, #0]
}
 800875c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008760 <Init_Uart_Module>:
{
	#ifdef DEVICE_TYPE_STATION
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
		__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
	#else
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 8008760:	4b03      	ldr	r3, [pc, #12]	; (8008770 <Init_Uart_Module+0x10>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	2320      	movs	r3, #32
 8008766:	6811      	ldr	r1, [r2, #0]
 8008768:	430b      	orrs	r3, r1
 800876a:	6013      	str	r3, [r2, #0]
	#endif
}
 800876c:	4770      	bx	lr
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	2000150c 	.word	0x2000150c

08008774 <_mDATA_MODE>:
    }
    return 0;
}

static uint8_t _mDATA_MODE(int Kind_Send)
{
 8008774:	b570      	push	{r4, r5, r6, lr}
	uint16_t    i = 0;
	uint8_t     IndexMess = 0;
	uint16_t    IndexRead = 0;
	uint8_t     TempCrC = 0;

	sMessVar.sPayload.Data_a8 = aPAYLOAD;
 8008776:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <_mDATA_MODE+0x60>)
 8008778:	4d17      	ldr	r5, [pc, #92]	; (80087d8 <_mDATA_MODE+0x64>)
	sMessVar.sPayload.Length_u16 = 0;

	sRecMessage.CountMessPacket_u16 = 0;
 800877a:	4c18      	ldr	r4, [pc, #96]	; (80087dc <_mDATA_MODE+0x68>)
	sMessVar.sPayload.Data_a8 = aPAYLOAD;
 800877c:	622b      	str	r3, [r5, #32]
	sMessVar.sPayload.Length_u16 = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	84ab      	strh	r3, [r5, #36]	; 0x24
	sRecMessage.CountMessPacket_u16 = 0;
 8008782:	8363      	strh	r3, [r4, #26]
	while (sRecMessage.CountMessPacket_u16 < MAX_MESS_IN_PACKET)
	{
		IndexRead = (sRecMessage.IndexSend_u16 + sRecMessage.CountMessPacket_u16) % sRecMessage.MaxRecord_u16;
 8008784:	8820      	ldrh	r0, [r4, #0]
 8008786:	89a1      	ldrh	r1, [r4, #12]
 8008788:	f7f7 fe54 	bl	8000434 <__aeabi_idivmod>
		if (IndexRead == sRecMessage.IndexSave_u16)
 800878c:	8862      	ldrh	r2, [r4, #2]
 800878e:	b28b      	uxth	r3, r1
		IndexRead = (sRecMessage.IndexSend_u16 + sRecMessage.CountMessPacket_u16) % sRecMessage.MaxRecord_u16;
 8008790:	0008      	movs	r0, r1
		if (IndexRead == sRecMessage.IndexSave_u16)
 8008792:	429a      	cmp	r2, r3
 8008794:	d103      	bne.n	800879e <_mDATA_MODE+0x2a>
			*(sMessVar.sPayload.Data_a8 + sMessVar.sPayload.Length_u16 - 1) = TempCrC;
		}
		return 1;
	}

	if (sRecMessage.CountMessPacket_u16 != 0)
 8008796:	8b60      	ldrh	r0, [r4, #26]
 8008798:	2800      	cmp	r0, #0
 800879a:	d10e      	bne.n	80087ba <_mDATA_MODE+0x46>
		sRecMessage.IndexSend_u16 = (sRecMessage.IndexSend_u16 + sRecMessage.CountMessPacket_u16) % sRecMessage.MaxRecord_u16;
		Flash_Save_Index(sRecMessage.AddIndexSend_u32, sRecMessage.IndexSend_u16);
		sRecMessage.CountMessPacket_u16 = 0;
	}
	return 0;
}
 800879c:	bd70      	pop	{r4, r5, r6, pc}
		if (Flash_Read_Record_Without_Index ((uint32_t)(sRecMessage.AddStart_u32 + sRecMessage.SizeRecord_u16 * IndexRead), &sMessVar.sPayload) == 1)
 800879e:	0029      	movs	r1, r5
 80087a0:	89e3      	ldrh	r3, [r4, #14]
 80087a2:	3120      	adds	r1, #32
 80087a4:	4358      	muls	r0, r3
 80087a6:	6863      	ldr	r3, [r4, #4]
 80087a8:	18c0      	adds	r0, r0, r3
 80087aa:	f7ff ff56 	bl	800865a <Flash_Read_Record_Without_Index>
		sRecMessage.CountMessPacket_u16++;
 80087ae:	8b63      	ldrh	r3, [r4, #26]
 80087b0:	3301      	adds	r3, #1
 80087b2:	8363      	strh	r3, [r4, #26]
	if (IndexMess != 0)
 80087b4:	2801      	cmp	r0, #1
 80087b6:	d1ee      	bne.n	8008796 <_mDATA_MODE+0x22>
 80087b8:	e7f0      	b.n	800879c <_mDATA_MODE+0x28>
		sRecMessage.IndexSend_u16 = (sRecMessage.IndexSend_u16 + sRecMessage.CountMessPacket_u16) % sRecMessage.MaxRecord_u16;
 80087ba:	8823      	ldrh	r3, [r4, #0]
 80087bc:	89a1      	ldrh	r1, [r4, #12]
 80087be:	1818      	adds	r0, r3, r0
 80087c0:	f7f7 fe38 	bl	8000434 <__aeabi_idivmod>
		Flash_Save_Index(sRecMessage.AddIndexSend_u32, sRecMessage.IndexSend_u16);
 80087c4:	6920      	ldr	r0, [r4, #16]
		sRecMessage.IndexSend_u16 = (sRecMessage.IndexSend_u16 + sRecMessage.CountMessPacket_u16) % sRecMessage.MaxRecord_u16;
 80087c6:	b289      	uxth	r1, r1
 80087c8:	8021      	strh	r1, [r4, #0]
		Flash_Save_Index(sRecMessage.AddIndexSend_u32, sRecMessage.IndexSend_u16);
 80087ca:	f7ff ffac 	bl	8008726 <Flash_Save_Index>
		sRecMessage.CountMessPacket_u16 = 0;
 80087ce:	2000      	movs	r0, #0
 80087d0:	8360      	strh	r0, [r4, #26]
 80087d2:	e7e3      	b.n	800879c <_mDATA_MODE+0x28>
 80087d4:	20000f14 	.word	0x20000f14
 80087d8:	20000168 	.word	0x20000168
 80087dc:	200001e0 	.word	0x200001e0

080087e0 <_mDATA_RTC_MODE>:
 80087e0:	b510      	push	{r4, lr}
 80087e2:	f7ff ffc7 	bl	8008774 <_mDATA_MODE>
 80087e6:	bd10      	pop	{r4, pc}

080087e8 <_mDATA_SINGLE>:
{
 80087e8:	b570      	push	{r4, r5, r6, lr}
	sMessVar.sPayload.Data_a8 = aPAYLOAD;
 80087ea:	4b17      	ldr	r3, [pc, #92]	; (8008848 <_mDATA_SINGLE+0x60>)
 80087ec:	4d17      	ldr	r5, [pc, #92]	; (800884c <_mDATA_SINGLE+0x64>)
	sRecSingle.CountMessPacket_u16 = 0;
 80087ee:	4c18      	ldr	r4, [pc, #96]	; (8008850 <_mDATA_SINGLE+0x68>)
	sMessVar.sPayload.Data_a8 = aPAYLOAD;
 80087f0:	622b      	str	r3, [r5, #32]
	sMessVar.sPayload.Length_u16 = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	84ab      	strh	r3, [r5, #36]	; 0x24
	sRecSingle.CountMessPacket_u16 = 0;
 80087f6:	8363      	strh	r3, [r4, #26]
		IndexRead = (sRecSingle.IndexSend_u16 + sRecSingle.CountMessPacket_u16) % sRecSingle.MaxRecord_u16;
 80087f8:	8820      	ldrh	r0, [r4, #0]
 80087fa:	89a1      	ldrh	r1, [r4, #12]
 80087fc:	f7f7 fe1a 	bl	8000434 <__aeabi_idivmod>
		if (IndexRead == sRecSingle.IndexSave_u16)
 8008800:	8862      	ldrh	r2, [r4, #2]
 8008802:	b28b      	uxth	r3, r1
		IndexRead = (sRecSingle.IndexSend_u16 + sRecSingle.CountMessPacket_u16) % sRecSingle.MaxRecord_u16;
 8008804:	0008      	movs	r0, r1
		if (IndexRead == sRecSingle.IndexSave_u16)
 8008806:	429a      	cmp	r2, r3
 8008808:	d103      	bne.n	8008812 <_mDATA_SINGLE+0x2a>
	if (sRecSingle.CountMessPacket_u16 != 0)
 800880a:	8b60      	ldrh	r0, [r4, #26]
 800880c:	2800      	cmp	r0, #0
 800880e:	d10e      	bne.n	800882e <_mDATA_SINGLE+0x46>
}
 8008810:	bd70      	pop	{r4, r5, r6, pc}
		if (Flash_Read_Record_Without_Index ((uint32_t)(sRecSingle.AddStart_u32 + sRecSingle.SizeRecord_u16 * IndexRead), &sMessVar.sPayload) == 1)
 8008812:	0029      	movs	r1, r5
 8008814:	89e3      	ldrh	r3, [r4, #14]
 8008816:	3120      	adds	r1, #32
 8008818:	4358      	muls	r0, r3
 800881a:	6863      	ldr	r3, [r4, #4]
 800881c:	18c0      	adds	r0, r0, r3
 800881e:	f7ff ff1c 	bl	800865a <Flash_Read_Record_Without_Index>
		sRecSingle.CountMessPacket_u16++;
 8008822:	8b63      	ldrh	r3, [r4, #26]
 8008824:	3301      	adds	r3, #1
 8008826:	8363      	strh	r3, [r4, #26]
	if (IndexMess != 0)
 8008828:	2801      	cmp	r0, #1
 800882a:	d1ee      	bne.n	800880a <_mDATA_SINGLE+0x22>
 800882c:	e7f0      	b.n	8008810 <_mDATA_SINGLE+0x28>
		sRecSingle.IndexSend_u16 = (sRecSingle.IndexSend_u16 + sRecSingle.CountMessPacket_u16) % sRecSingle.MaxRecord_u16;
 800882e:	8823      	ldrh	r3, [r4, #0]
 8008830:	89a1      	ldrh	r1, [r4, #12]
 8008832:	1818      	adds	r0, r3, r0
 8008834:	f7f7 fdfe 	bl	8000434 <__aeabi_idivmod>
		Flash_Save_Index(sRecSingle.AddIndexSend_u32, sRecSingle.IndexSend_u16);
 8008838:	6920      	ldr	r0, [r4, #16]
		sRecSingle.IndexSend_u16 = (sRecSingle.IndexSend_u16 + sRecSingle.CountMessPacket_u16) % sRecSingle.MaxRecord_u16;
 800883a:	b289      	uxth	r1, r1
 800883c:	8021      	strh	r1, [r4, #0]
		Flash_Save_Index(sRecSingle.AddIndexSend_u32, sRecSingle.IndexSend_u16);
 800883e:	f7ff ff72 	bl	8008726 <Flash_Save_Index>
		sRecSingle.CountMessPacket_u16 = 0;
 8008842:	2000      	movs	r0, #0
 8008844:	8360      	strh	r0, [r4, #26]
 8008846:	e7e3      	b.n	8008810 <_mDATA_SINGLE+0x28>
 8008848:	20000f14 	.word	0x20000f14
 800884c:	20000168 	.word	0x20000168
 8008850:	200001a8 	.word	0x200001a8

08008854 <_mDATA_MULTI>:
	APP_LOG(TS_OFF, VLEVEL_L, "user_message.c: _mDATA_MULTI\n\r");
 8008854:	2200      	movs	r2, #0
{
 8008856:	b5f0      	push	{r4, r5, r6, r7, lr}
    sMessVar.sPayload.Length_u16 = 0;
 8008858:	2500      	movs	r5, #0
{
 800885a:	b085      	sub	sp, #20
	APP_LOG(TS_OFF, VLEVEL_L, "user_message.c: _mDATA_MULTI\n\r");
 800885c:	0011      	movs	r1, r2
 800885e:	4b2b      	ldr	r3, [pc, #172]	; (800890c <_mDATA_MULTI+0xb8>)
 8008860:	2001      	movs	r0, #1
 8008862:	f001 fe73 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
	sRecMultiple.CountMessPacket_u16 = 0;
 8008866:	4c2a      	ldr	r4, [pc, #168]	; (8008910 <_mDATA_MULTI+0xbc>)
    sMessVar.sPayload.Data_a8 = aPAYLOAD;
 8008868:	4f2a      	ldr	r7, [pc, #168]	; (8008914 <_mDATA_MULTI+0xc0>)
 800886a:	4b2b      	ldr	r3, [pc, #172]	; (8008918 <_mDATA_MULTI+0xc4>)
    sMessVar.sPayload.Length_u16 = 0;
 800886c:	84bd      	strh	r5, [r7, #36]	; 0x24
    sMessVar.sPayload.Data_a8 = aPAYLOAD;
 800886e:	623b      	str	r3, [r7, #32]
        IndexRead = (sRecMultiple.IndexSend_u16 + sRecMultiple.CountMessPacket_u16) % sRecMultiple.MaxRecord_u16;
 8008870:	8823      	ldrh	r3, [r4, #0]
	sRecMultiple.CountMessPacket_u16 = 0;
 8008872:	8365      	strh	r5, [r4, #26]
        IndexRead = (sRecMultiple.IndexSend_u16 + sRecMultiple.CountMessPacket_u16) % sRecMultiple.MaxRecord_u16;
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	89a1      	ldrh	r1, [r4, #12]
 8008878:	0018      	movs	r0, r3
 800887a:	f7f7 fddb 	bl	8000434 <__aeabi_idivmod>
 800887e:	000e      	movs	r6, r1
    	APP_LOG(TS_OFF, VLEVEL_L, "user_message.c: _mDATA_MULTI: IndexSend: %02d\n\r", sRecMultiple.IndexSend_u16);
 8008880:	9a03      	ldr	r2, [sp, #12]
 8008882:	0029      	movs	r1, r5
 8008884:	4b25      	ldr	r3, [pc, #148]	; (800891c <_mDATA_MULTI+0xc8>)
 8008886:	9200      	str	r2, [sp, #0]
 8008888:	2001      	movs	r0, #1
 800888a:	002a      	movs	r2, r5
 800888c:	f001 fe5e 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
    	APP_LOG(TS_OFF, VLEVEL_L, "user_message.c: _mDATA_MULTI: IndexSave: %02d\n\r", sRecMultiple.IndexSave_u16);
 8008890:	8862      	ldrh	r2, [r4, #2]
 8008892:	0029      	movs	r1, r5
 8008894:	4b22      	ldr	r3, [pc, #136]	; (8008920 <_mDATA_MULTI+0xcc>)
 8008896:	9200      	str	r2, [sp, #0]
 8008898:	2001      	movs	r0, #1
 800889a:	002a      	movs	r2, r5
 800889c:	f001 fe56 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
    	APP_LOG(TS_OFF, VLEVEL_L, "user_message.c: _mDATA_MULTI: IndexRead: %02d\n\r", IndexRead);
 80088a0:	002a      	movs	r2, r5
 80088a2:	4b20      	ldr	r3, [pc, #128]	; (8008924 <_mDATA_MULTI+0xd0>)
 80088a4:	0029      	movs	r1, r5
 80088a6:	2001      	movs	r0, #1
 80088a8:	9600      	str	r6, [sp, #0]
 80088aa:	f001 fe4f 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
        if (IndexRead == sRecMultiple.IndexSave_u16)
 80088ae:	8862      	ldrh	r2, [r4, #2]
 80088b0:	b2b3      	uxth	r3, r6
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d105      	bne.n	80088c2 <_mDATA_MULTI+0x6e>
    if (sRecMultiple.CountMessPacket_u16 != 0)
 80088b6:	8b66      	ldrh	r6, [r4, #26]
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	d11a      	bne.n	80088f2 <_mDATA_MULTI+0x9e>
}
 80088bc:	0030      	movs	r0, r6
 80088be:	b005      	add	sp, #20
 80088c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (Flash_Read_Record_Without_Index ((uint32_t)(sRecMultiple.AddStart_u32 + sRecMultiple.SizeRecord_u16 * IndexRead), &sMessVar.sPayload) == 1)
 80088c2:	0039      	movs	r1, r7
 80088c4:	89e0      	ldrh	r0, [r4, #14]
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	4370      	muls	r0, r6
 80088ca:	3120      	adds	r1, #32
 80088cc:	18c0      	adds	r0, r0, r3
 80088ce:	f7ff fec4 	bl	800865a <Flash_Read_Record_Without_Index>
 80088d2:	0006      	movs	r6, r0
 80088d4:	2801      	cmp	r0, #1
 80088d6:	d10a      	bne.n	80088ee <_mDATA_MULTI+0x9a>
        	APP_LOG(TS_OFF, VLEVEL_L, "user_message.c: _mDATA_MULTI: IndexMess++\n\r");
 80088d8:	002a      	movs	r2, r5
 80088da:	0029      	movs	r1, r5
 80088dc:	4b12      	ldr	r3, [pc, #72]	; (8008928 <_mDATA_MULTI+0xd4>)
 80088de:	f001 fe35 	bl	800a54c <UTIL_ADV_TRACE_COND_FSend>
        sRecMultiple.CountMessPacket_u16++;
 80088e2:	8b63      	ldrh	r3, [r4, #26]
 80088e4:	3301      	adds	r3, #1
 80088e6:	8363      	strh	r3, [r4, #26]
    if (IndexMess != 0)
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	d0e4      	beq.n	80088b6 <_mDATA_MULTI+0x62>
 80088ec:	e7e6      	b.n	80088bc <_mDATA_MULTI+0x68>
    uint8_t     IndexMess = 0;
 80088ee:	002e      	movs	r6, r5
 80088f0:	e7f7      	b.n	80088e2 <_mDATA_MULTI+0x8e>
    	sRecMultiple.IndexSend_u16 = (sRecMultiple.IndexSend_u16 + sRecMultiple.CountMessPacket_u16) % sRecMultiple.MaxRecord_u16;
 80088f2:	8820      	ldrh	r0, [r4, #0]
 80088f4:	89a1      	ldrh	r1, [r4, #12]
 80088f6:	1980      	adds	r0, r0, r6
 80088f8:	f7f7 fd9c 	bl	8000434 <__aeabi_idivmod>
        sRecMultiple.CountMessPacket_u16 = 0;
 80088fc:	2600      	movs	r6, #0
    	sRecMultiple.IndexSend_u16 = (sRecMultiple.IndexSend_u16 + sRecMultiple.CountMessPacket_u16) % sRecMultiple.MaxRecord_u16;
 80088fe:	b289      	uxth	r1, r1
        Flash_Save_Index(sRecMultiple.AddIndexSend_u32, sRecMultiple.IndexSend_u16);
 8008900:	6920      	ldr	r0, [r4, #16]
    	sRecMultiple.IndexSend_u16 = (sRecMultiple.IndexSend_u16 + sRecMultiple.CountMessPacket_u16) % sRecMultiple.MaxRecord_u16;
 8008902:	8021      	strh	r1, [r4, #0]
        Flash_Save_Index(sRecMultiple.AddIndexSend_u32, sRecMultiple.IndexSend_u16);
 8008904:	f7ff ff0f 	bl	8008726 <Flash_Save_Index>
        sRecMultiple.CountMessPacket_u16 = 0;
 8008908:	8366      	strh	r6, [r4, #26]
 800890a:	e7d7      	b.n	80088bc <_mDATA_MULTI+0x68>
 800890c:	0800bca9 	.word	0x0800bca9
 8008910:	200001c4 	.word	0x200001c4
 8008914:	20000168 	.word	0x20000168
 8008918:	20000f14 	.word	0x20000f14
 800891c:	0800bcc8 	.word	0x0800bcc8
 8008920:	0800bcf8 	.word	0x0800bcf8
 8008924:	0800bd28 	.word	0x0800bd28
 8008928:	0800bd58 	.word	0x0800bd58

0800892c <mCheck_Mess_Mark>:
	return 0;
}

/* Exported functions --------------------------------------------------------*/
int8_t mCheck_Mess_Mark (void)
{
 800892c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892e:	2400      	movs	r4, #0
 8008930:	4d0c      	ldr	r5, [pc, #48]	; (8008964 <mCheck_Mess_Mark+0x38>)
 8008932:	4e0d      	ldr	r6, [pc, #52]	; (8008968 <mCheck_Mess_Mark+0x3c>)
    int8_t i = 0;
    for (i = _MESS_CONNECT; i < _MESS_END; i++)
    {
        if (sMessVar.aMARK[i] == TRUE)
 8008934:	782b      	ldrb	r3, [r5, #0]
 8008936:	b267      	sxtb	r7, r4
 8008938:	2b01      	cmp	r3, #1
 800893a:	d10c      	bne.n	8008956 <mCheck_Mess_Mark+0x2a>
        {
            if (sMessSend[i].CallBack != NULL)
 800893c:	6873      	ldr	r3, [r6, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <mCheck_Mess_Mark+0x28>
            {
                if (sMessSend[i].CallBack(i) == TRUE)
 8008942:	0020      	movs	r0, r4
 8008944:	4798      	blx	r3
 8008946:	2801      	cmp	r0, #1
 8008948:	d105      	bne.n	8008956 <mCheck_Mess_Mark+0x2a>
                {
                    sMessVar.aMARK[i] = FALSE;
 800894a:	2300      	movs	r3, #0
 800894c:	4a05      	ldr	r2, [pc, #20]	; (8008964 <mCheck_Mess_Mark+0x38>)
 800894e:	5513      	strb	r3, [r2, r4]
                sMessVar.aMARK[i] = FALSE;
            }
        }
    }
    return _MESS_END;
}
 8008950:	0038      	movs	r0, r7
 8008952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                sMessVar.aMARK[i] = FALSE;
 8008954:	702b      	strb	r3, [r5, #0]
    for (i = _MESS_CONNECT; i < _MESS_END; i++)
 8008956:	3401      	adds	r4, #1
 8008958:	3501      	adds	r5, #1
 800895a:	3610      	adds	r6, #16
 800895c:	2c05      	cmp	r4, #5
 800895e:	d1e9      	bne.n	8008934 <mCheck_Mess_Mark+0x8>
    return _MESS_END;
 8008960:	0027      	movs	r7, r4
 8008962:	e7f5      	b.n	8008950 <mCheck_Mess_Mark+0x24>
 8008964:	20000168 	.word	0x20000168
 8008968:	0800b64c 	.word	0x0800b64c

0800896c <Modem_Init_Before_IRQ_Handle>:

	#endif
}

void Modem_Init_Before_IRQ_Handle (void)
{
 800896c:	b510      	push	{r4, lr}
	#ifdef USING_APP_LORA
		AppLora_Init_IO_Radio();
 800896e:	f7fe ff39 	bl	80077e4 <AppLora_Init_IO_Radio>
	#endif
}
 8008972:	bd10      	pop	{r4, pc}

08008974 <Modem_Deinit_Before_IRQ_Handle>:

void Modem_Deinit_Before_IRQ_Handle (void)
{
 8008974:	b510      	push	{r4, lr}
	#ifdef USING_APP_LORA
		AppLora_Deinit_IO_Radio();
 8008976:	f7fe ff31 	bl	80077dc <AppLora_Deinit_IO_Radio>
	#endif
}
 800897a:	bd10      	pop	{r4, pc}

0800897c <Reset_Chip_Immediately>:
  __ASM volatile ("cpsid i" : : : "memory");
 800897c:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 800897e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008982:	4b03      	ldr	r3, [pc, #12]	; (8008990 <Reset_Chip_Immediately+0x14>)
 8008984:	4a03      	ldr	r2, [pc, #12]	; (8008994 <Reset_Chip_Immediately+0x18>)
 8008986:	60da      	str	r2, [r3, #12]
 8008988:	f3bf 8f4f 	dsb	sy
    __NOP();
 800898c:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800898e:	e7fd      	b.n	800898c <Reset_Chip_Immediately+0x10>
 8008990:	e000ed00 	.word	0xe000ed00
 8008994:	05fa0004 	.word	0x05fa0004

08008998 <DCU_Response_AT>:
{
 8008998:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 800899a:	25fa      	movs	r5, #250	; 0xfa
 800899c:	4c07      	ldr	r4, [pc, #28]	; (80089bc <DCU_Response_AT+0x24>)
 800899e:	00ad      	lsls	r5, r5, #2
 80089a0:	002b      	movs	r3, r5
{
 80089a2:	000a      	movs	r2, r1
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 80089a4:	0001      	movs	r1, r0
 80089a6:	0020      	movs	r0, r4
 80089a8:	f7fc fed4 	bl	8005754 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n", 2, 1000);
 80089ac:	002b      	movs	r3, r5
 80089ae:	2202      	movs	r2, #2
 80089b0:	0020      	movs	r0, r4
 80089b2:	4903      	ldr	r1, [pc, #12]	; (80089c0 <DCU_Response_AT+0x28>)
 80089b4:	f7fc fece 	bl	8005754 <HAL_UART_Transmit>
}
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	2000150c 	.word	0x2000150c
 80089c0:	0800b917 	.word	0x0800b917

080089c4 <MX_GPIO_DeInit>:

void MX_GPIO_DeInit(void)
{
 80089c4:	b570      	push	{r4, r5, r6, lr}
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
	#else
		GPIO_InitTypeDef GPIO_InitStruct ={0};

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80089c6:	2601      	movs	r6, #1
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80089c8:	2502      	movs	r5, #2
{
 80089ca:	b088      	sub	sp, #32
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80089cc:	4c11      	ldr	r4, [pc, #68]	; (8008a14 <MX_GPIO_DeInit+0x50>)
		GPIO_InitTypeDef GPIO_InitStruct ={0};
 80089ce:	220c      	movs	r2, #12
 80089d0:	2100      	movs	r1, #0
 80089d2:	a805      	add	r0, sp, #20
 80089d4:	f002 f830 	bl	800aa38 <memset>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80089d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull   = GPIO_NOPULL;

		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089da:	480f      	ldr	r0, [pc, #60]	; (8008a18 <MX_GPIO_DeInit+0x54>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80089dc:	4333      	orrs	r3, r6
 80089de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e2:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80089e4:	4033      	ands	r3, r6
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	9b01      	ldr	r3, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80089ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089ec:	432b      	orrs	r3, r5
 80089ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089f2:	402b      	ands	r3, r5
 80089f4:	9302      	str	r3, [sp, #8]
 80089f6:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 80089f8:	2303      	movs	r3, #3
 80089fa:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 80089fc:	3361      	adds	r3, #97	; 0x61
 80089fe:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a00:	f7fa fe16 	bl	8003630 <HAL_GPIO_Init>

		  /* Disable GPIOs clock */
		__HAL_RCC_GPIOA_CLK_DISABLE();
 8008a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a06:	43b3      	bics	r3, r6
 8008a08:	62e3      	str	r3, [r4, #44]	; 0x2c
		__HAL_RCC_GPIOB_CLK_DISABLE();
 8008a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a0c:	43ab      	bics	r3, r5
 8008a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
	#endif
}
 8008a10:	b008      	add	sp, #32
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	40021000 	.word	0x40021000
 8008a18:	50000400 	.word	0x50000400

08008a1c <Modem_Deinit_Peripheral>:
{
 8008a1c:	b510      	push	{r4, lr}
    MX_GPIO_DeInit();
 8008a1e:	f7ff ffd1 	bl	80089c4 <MX_GPIO_DeInit>
	ADC_Desequence_Powerhungry_Channels();
 8008a22:	f7ff f9f1 	bl	8007e08 <ADC_Desequence_Powerhungry_Channels>
    HAL_ADC_DeInit(&hadc);
 8008a26:	4807      	ldr	r0, [pc, #28]	; (8008a44 <Modem_Deinit_Peripheral+0x28>)
 8008a28:	f7fa fa4a 	bl	8002ec0 <HAL_ADC_DeInit>
    	__HAL_UART_DISABLE_IT(&uart_debug, UART_IT_RXNE);
 8008a2c:	2120      	movs	r1, #32
 8008a2e:	4806      	ldr	r0, [pc, #24]	; (8008a48 <Modem_Deinit_Peripheral+0x2c>)
 8008a30:	6802      	ldr	r2, [r0, #0]
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	438b      	bics	r3, r1
 8008a36:	6013      	str	r3, [r2, #0]
    	HAL_UART_DeInit(&uart_debug);
 8008a38:	f7fc fafe 	bl	8005038 <HAL_UART_DeInit>
    	HAL_I2C_DeInit(&hi2c1);
 8008a3c:	4803      	ldr	r0, [pc, #12]	; (8008a4c <Modem_Deinit_Peripheral+0x30>)
 8008a3e:	f7fa ffb1 	bl	80039a4 <HAL_I2C_DeInit>
}
 8008a42:	bd10      	pop	{r4, pc}
 8008a44:	20001350 	.word	0x20001350
 8008a48:	2000150c 	.word	0x2000150c
 8008a4c:	200013ac 	.word	0x200013ac

08008a50 <Modem_Init_Gpio_Again>:

void Modem_Init_Gpio_Again(void)
{
 8008a50:	b5f0      	push	{r4, r5, r6, r7, lr}
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a52:	2501      	movs	r5, #1
{
 8008a54:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a56:	2214      	movs	r2, #20
 8008a58:	2100      	movs	r1, #0
 8008a5a:	a803      	add	r0, sp, #12
 8008a5c:	f001 ffec 	bl	800aa38 <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008a60:	2202      	movs	r2, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a62:	4c1b      	ldr	r4, [pc, #108]	; (8008ad0 <Modem_Init_Gpio_Again+0x80>)

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008a64:	4f1b      	ldr	r7, [pc, #108]	; (8008ad4 <Modem_Init_Gpio_Again+0x84>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008a68:	0038      	movs	r0, r7
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a6a:	432b      	orrs	r3, r5
 8008a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008a70:	2164      	movs	r1, #100	; 0x64
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a72:	402b      	ands	r3, r5
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	9b00      	ldr	r3, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

		/*Configure GPIO pins : PBPin PBPin PBPin */
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7a:	2600      	movs	r6, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a82:	4013      	ands	r3, r2
 8008a84:	9301      	str	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008a86:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008a88:	9b01      	ldr	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008a8a:	f7fa ff1b 	bl	80038c4 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8008a8e:	2364      	movs	r3, #100	; 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a90:	0038      	movs	r0, r7
 8008a92:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8008a94:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a96:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a98:	9605      	str	r6, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a9a:	9606      	str	r6, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a9c:	f7fa fdc8 	bl	8003630 <HAL_GPIO_Init>

		__HAL_RCC_ADC1_CLK_ENABLE();
 8008aa0:	2380      	movs	r3, #128	; 0x80
 8008aa2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aac:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008aae:	432b      	orrs	r3, r5
 8008ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ab4:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab6:	402b      	ands	r3, r5
 8008ab8:	9302      	str	r3, [sp, #8]
 8008aba:	9b02      	ldr	r3, [sp, #8]
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008abc:	231c      	movs	r3, #28
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008abe:	05c0      	lsls	r0, r0, #23
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008ac0:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ac2:	3b19      	subs	r3, #25
 8008ac4:	9304      	str	r3, [sp, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac6:	9605      	str	r6, [sp, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ac8:	f7fa fdb2 	bl	8003630 <HAL_GPIO_Init>
	#endif
}
 8008acc:	b009      	add	sp, #36	; 0x24
 8008ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad0:	40021000 	.word	0x40021000
 8008ad4:	50000400 	.word	0x50000400

08008ad8 <Modem_Init_Peripheral>:
{
 8008ad8:	b510      	push	{r4, lr}
    Modem_Init_Gpio_Again();
 8008ada:	f7ff ffb9 	bl	8008a50 <Modem_Init_Gpio_Again>
    AdcInitialized = 0;
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4b06      	ldr	r3, [pc, #24]	; (8008afc <Modem_Init_Peripheral+0x24>)
 8008ae2:	701a      	strb	r2, [r3, #0]
    	MX_USART1_UART_Init();
 8008ae4:	f000 fd30 	bl	8009548 <MX_USART1_UART_Init>
    	__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 8008ae8:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <Modem_Init_Peripheral+0x28>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	2320      	movs	r3, #32
 8008aee:	6811      	ldr	r1, [r2, #0]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	6013      	str	r3, [r2, #0]
    	MX_I2C1_Init();
 8008af4:	f000 fcbe 	bl	8009474 <MX_I2C1_Init>
}
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	200009e3 	.word	0x200009e3
 8008b00:	2000150c 	.word	0x2000150c

08008b04 <Save_ID>:
/**
 * @param	0: DCU_ID
 * 			1: NET_ID
 */
void Save_ID(uint8_t type)
{
 8008b04:	b530      	push	{r4, r5, lr}
    uint8_t i=0;
	uint8_t temp_arr[40] = {0};
 8008b06:	2400      	movs	r4, #0
{
 8008b08:	b08b      	sub	sp, #44	; 0x2c
	uint8_t temp_arr[40] = {0};
 8008b0a:	2224      	movs	r2, #36	; 0x24
 8008b0c:	0021      	movs	r1, r4
{
 8008b0e:	0005      	movs	r5, r0
	uint8_t temp_arr[40] = {0};
 8008b10:	a801      	add	r0, sp, #4
 8008b12:	9400      	str	r4, [sp, #0]
 8008b14:	f001 ff90 	bl	800aa38 <memset>

	if(type == 0)
 8008b18:	22aa      	movs	r2, #170	; 0xaa
	{
		temp_arr[0] = BYTE_TEMP_FIRST;
 8008b1a:	4669      	mov	r1, sp
 8008b1c:	4b17      	ldr	r3, [pc, #92]	; (8008b7c <Save_ID+0x78>)
 8008b1e:	700a      	strb	r2, [r1, #0]
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8008b20:	001a      	movs	r2, r3
 8008b22:	3254      	adds	r2, #84	; 0x54
	if(type == 0)
 8008b24:	42a5      	cmp	r5, r4
 8008b26:	d115      	bne.n	8008b54 <Save_ID+0x50>
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8008b28:	8892      	ldrh	r2, [r2, #4]

		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8008b2c:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 8008b2e:	42aa      	cmp	r2, r5
 8008b30:	d809      	bhi.n	8008b46 <Save_ID+0x42>

		OnchipFlashPageErase(ADDR_DCUID);
 8008b32:	4813      	ldr	r0, [pc, #76]	; (8008b80 <Save_ID+0x7c>)
 8008b34:	f000 fe0c 	bl	8009750 <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_DCUID, temp_arr, 40);
 8008b38:	2228      	movs	r2, #40	; 0x28
 8008b3a:	4669      	mov	r1, sp
 8008b3c:	4810      	ldr	r0, [pc, #64]	; (8008b80 <Save_ID+0x7c>)

		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];

		OnchipFlashPageErase(ADDR_NETID);
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 8008b3e:	f000 fde0 	bl	8009702 <OnchipFlashWriteData>
	}
}
 8008b42:	b00b      	add	sp, #44	; 0x2c
 8008b44:	bd30      	pop	{r4, r5, pc}
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 8008b46:	0029      	movs	r1, r5
 8008b48:	5d58      	ldrb	r0, [r3, r5]
 8008b4a:	4469      	add	r1, sp
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 8008b4c:	3501      	adds	r5, #1
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 8008b4e:	7088      	strb	r0, [r1, #2]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 8008b50:	b2ed      	uxtb	r5, r5
 8008b52:	e7ec      	b.n	8008b2e <Save_ID+0x2a>
		temp_arr[1] = sModem.sNET_id.Length_u16;
 8008b54:	8992      	ldrh	r2, [r2, #12]
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 8008b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		temp_arr[1] = sModem.sNET_id.Length_u16;
 8008b58:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 8008b5a:	0021      	movs	r1, r4
 8008b5c:	428a      	cmp	r2, r1
 8008b5e:	d806      	bhi.n	8008b6e <Save_ID+0x6a>
		OnchipFlashPageErase(ADDR_NETID);
 8008b60:	4808      	ldr	r0, [pc, #32]	; (8008b84 <Save_ID+0x80>)
 8008b62:	f000 fdf5 	bl	8009750 <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 8008b66:	2228      	movs	r2, #40	; 0x28
 8008b68:	4669      	mov	r1, sp
 8008b6a:	4806      	ldr	r0, [pc, #24]	; (8008b84 <Save_ID+0x80>)
 8008b6c:	e7e7      	b.n	8008b3e <Save_ID+0x3a>
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 8008b6e:	0008      	movs	r0, r1
 8008b70:	5c5c      	ldrb	r4, [r3, r1]
 8008b72:	4468      	add	r0, sp
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 8008b74:	3101      	adds	r1, #1
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 8008b76:	7084      	strb	r4, [r0, #2]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 8008b78:	b2c9      	uxtb	r1, r1
 8008b7a:	e7ef      	b.n	8008b5c <Save_ID+0x58>
 8008b7c:	200001a8 	.word	0x200001a8
 8008b80:	0802f500 	.word	0x0802f500
 8008b84:	0802f580 	.word	0x0802f580

08008b88 <Init_ID>:
{
 8008b88:	b510      	push	{r4, lr}
    if(type == 0)
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d10d      	bne.n	8008baa <Init_ID+0x22>
    	temp = *(__IO uint8_t*) ADDR_DCUID;
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	; (8008bc8 <Init_ID+0x40>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b2d8      	uxtb	r0, r3
    	if (temp != FLASH_BYTE_EMPTY)
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d013      	beq.n	8008bc0 <Init_ID+0x38>
            Flash_Get_Infor ((ADDR_DCUID + 1), sModem.sDCU_id.Data_a8, &sModem.sDCU_id.Length_u16, 10);
 8008b98:	490c      	ldr	r1, [pc, #48]	; (8008bcc <Init_ID+0x44>)
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	000a      	movs	r2, r1
 8008b9e:	480c      	ldr	r0, [pc, #48]	; (8008bd0 <Init_ID+0x48>)
 8008ba0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008ba2:	3258      	adds	r2, #88	; 0x58
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 8008ba4:	f7ff fdc3 	bl	800872e <Flash_Get_Infor>
}
 8008ba8:	bd10      	pop	{r4, pc}
    	temp = *(__IO uint8_t*) ADDR_NETID;
 8008baa:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <Init_ID+0x4c>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
    	if (temp != FLASH_BYTE_EMPTY)
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d006      	beq.n	8008bc0 <Init_ID+0x38>
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 8008bb2:	4906      	ldr	r1, [pc, #24]	; (8008bcc <Init_ID+0x44>)
 8008bb4:	230a      	movs	r3, #10
 8008bb6:	000a      	movs	r2, r1
 8008bb8:	4807      	ldr	r0, [pc, #28]	; (8008bd8 <Init_ID+0x50>)
 8008bba:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8008bbc:	3260      	adds	r2, #96	; 0x60
 8008bbe:	e7f1      	b.n	8008ba4 <Init_ID+0x1c>
    		Save_ID(type);
 8008bc0:	f7ff ffa0 	bl	8008b04 <Save_ID>
}
 8008bc4:	e7f0      	b.n	8008ba8 <Init_ID+0x20>
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	0802f500 	.word	0x0802f500
 8008bcc:	200001a8 	.word	0x200001a8
 8008bd0:	0802f501 	.word	0x0802f501
 8008bd4:	0802f580 	.word	0x0802f580
 8008bd8:	0802f581 	.word	0x0802f581

08008bdc <Save_Freq_Send_Data>:
        Save_Freq_Send_Data();
    }
}

void Save_Freq_Send_Data (void)
{
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 8008be0:	2214      	movs	r2, #20
 8008be2:	2100      	movs	r1, #0
 8008be4:	a801      	add	r0, sp, #4
 8008be6:	f001 ff27 	bl	800aa38 <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 8008bea:	466a      	mov	r2, sp
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <Save_Freq_Send_Data+0x40>)
    Buff_temp[1] = 3;
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8008bee:	4669      	mov	r1, sp
    Buff_temp[0] = BYTE_TEMP_FIRST;
 8008bf0:	8013      	strh	r3, [r2, #0]
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8008bf2:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <Save_Freq_Send_Data+0x44>)

    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;

    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 8008bf4:	4c0b      	ldr	r4, [pc, #44]	; (8008c24 <Save_Freq_Send_Data+0x48>)
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8008bf6:	001a      	movs	r2, r3
 8008bf8:	322c      	adds	r2, #44	; 0x2c
 8008bfa:	7812      	ldrb	r2, [r2, #0]
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 8008bfc:	0020      	movs	r0, r4
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8008bfe:	708a      	strb	r2, [r1, #2]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 8008c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c02:	0a1a      	lsrs	r2, r3, #8
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;
 8008c04:	710b      	strb	r3, [r1, #4]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 8008c06:	70ca      	strb	r2, [r1, #3]
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 8008c08:	2101      	movs	r1, #1
 8008c0a:	f000 fdc5 	bl	8009798 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 16);
 8008c0e:	2210      	movs	r2, #16
 8008c10:	4669      	mov	r1, sp
 8008c12:	0020      	movs	r0, r4
 8008c14:	f000 fd75 	bl	8009702 <OnchipFlashWriteData>
}
 8008c18:	b006      	add	sp, #24
 8008c1a:	bd10      	pop	{r4, pc}
 8008c1c:	000003aa 	.word	0x000003aa
 8008c20:	20000228 	.word	0x20000228
 8008c24:	0802f600 	.word	0x0802f600

08008c28 <Init_Timer_Send>:
{
 8008c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	2214      	movs	r2, #20
 8008c2e:	a801      	add	r0, sp, #4
 8008c30:	9100      	str	r1, [sp, #0]
 8008c32:	f001 ff01 	bl	800aa38 <memset>
    temp = *(__IO uint8_t*) (ADDR_FREQ_ACTIVE);
 8008c36:	480f      	ldr	r0, [pc, #60]	; (8008c74 <Init_Timer_Send+0x4c>)
 8008c38:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d017      	beq.n	8008c6e <Init_Timer_Send+0x46>
        OnchipFlashReadData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 24);
 8008c3e:	2218      	movs	r2, #24
 8008c40:	4669      	mov	r1, sp
 8008c42:	f000 fdb6 	bl	80097b2 <OnchipFlashReadData>
        if (Length < 24)
 8008c46:	466b      	mov	r3, sp
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b17      	cmp	r3, #23
 8008c4c:	d80d      	bhi.n	8008c6a <Init_Timer_Send+0x42>
            sFreqInfor.NumWakeup_u8 = Buff_temp[2];
 8008c4e:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <Init_Timer_Send+0x50>)
 8008c50:	4669      	mov	r1, sp
 8008c52:	0013      	movs	r3, r2
 8008c54:	7889      	ldrb	r1, [r1, #2]
 8008c56:	332c      	adds	r3, #44	; 0x2c
 8008c58:	7019      	strb	r1, [r3, #0]
            sFreqInfor.FreqWakeup_u32 = (sFreqInfor.FreqWakeup_u32 << 8) | Buff_temp[4];
 8008c5a:	466b      	mov	r3, sp
 8008c5c:	78d9      	ldrb	r1, [r3, #3]
 8008c5e:	3303      	adds	r3, #3
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	430b      	orrs	r3, r1
 8008c66:	ba5b      	rev16	r3, r3
 8008c68:	85d3      	strh	r3, [r2, #46]	; 0x2e
}
 8008c6a:	b007      	add	sp, #28
 8008c6c:	bd00      	pop	{pc}
        Save_Freq_Send_Data();
 8008c6e:	f7ff ffb5 	bl	8008bdc <Save_Freq_Send_Data>
}
 8008c72:	e7fa      	b.n	8008c6a <Init_Timer_Send+0x42>
 8008c74:	0802f600 	.word	0x0802f600
 8008c78:	20000228 	.word	0x20000228

08008c7c <Save_Device_Type>:
    }
}

void Save_Device_Type (void)
{
    uint8_t Buff_temp[24] = {0};
 8008c7c:	2100      	movs	r1, #0
{
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 8008c82:	2214      	movs	r2, #20
 8008c84:	a801      	add	r0, sp, #4
 8008c86:	9100      	str	r1, [sp, #0]
 8008c88:	f001 fed6 	bl	800aa38 <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 8008c8c:	23d5      	movs	r3, #213	; 0xd5
 8008c8e:	466a      	mov	r2, sp
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	8013      	strh	r3, [r2, #0]
    Buff_temp[1] = 1;
    Buff_temp[2] = sModem.TypeModem_u8;
 8008c94:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <Save_Device_Type+0x38>)

    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 8008c96:	4c08      	ldr	r4, [pc, #32]	; (8008cb8 <Save_Device_Type+0x3c>)
    Buff_temp[2] = sModem.TypeModem_u8;
 8008c98:	3354      	adds	r3, #84	; 0x54
 8008c9a:	7e1b      	ldrb	r3, [r3, #24]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 8008c9c:	0020      	movs	r0, r4
    Buff_temp[2] = sModem.TypeModem_u8;
 8008c9e:	7093      	strb	r3, [r2, #2]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	f000 fd79 	bl	8009798 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_DEVICE_TYPE, &Buff_temp[0], 16);
 8008ca6:	2210      	movs	r2, #16
 8008ca8:	4669      	mov	r1, sp
 8008caa:	0020      	movs	r0, r4
 8008cac:	f000 fd29 	bl	8009702 <OnchipFlashWriteData>
}
 8008cb0:	b006      	add	sp, #24
 8008cb2:	bd10      	pop	{r4, pc}
 8008cb4:	200001a8 	.word	0x200001a8
 8008cb8:	0802f680 	.word	0x0802f680

08008cbc <Init_Device_Type>:
{
 8008cbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	2214      	movs	r2, #20
 8008cc2:	a801      	add	r0, sp, #4
 8008cc4:	9100      	str	r1, [sp, #0]
 8008cc6:	f001 feb7 	bl	800aa38 <memset>
    temp = *(__IO uint8_t*) (ADDR_DEVICE_TYPE);
 8008cca:	480b      	ldr	r0, [pc, #44]	; (8008cf8 <Init_Device_Type+0x3c>)
 8008ccc:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00e      	beq.n	8008cf0 <Init_Device_Type+0x34>
        OnchipFlashReadData(ADDR_DEVICE_TYPE, &Buff_temp[0], 24);
 8008cd2:	2218      	movs	r2, #24
 8008cd4:	4669      	mov	r1, sp
 8008cd6:	f000 fd6c 	bl	80097b2 <OnchipFlashReadData>
        if (Length < 24)
 8008cda:	466b      	mov	r3, sp
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	2b17      	cmp	r3, #23
 8008ce0:	d804      	bhi.n	8008cec <Init_Device_Type+0x30>
            sModem.TypeModem_u8 = Buff_temp[2];
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <Init_Device_Type+0x40>)
 8008ce6:	7892      	ldrb	r2, [r2, #2]
 8008ce8:	3354      	adds	r3, #84	; 0x54
 8008cea:	761a      	strb	r2, [r3, #24]
}
 8008cec:	b007      	add	sp, #28
 8008cee:	bd00      	pop	{pc}
        Save_Device_Type();
 8008cf0:	f7ff ffc4 	bl	8008c7c <Save_Device_Type>
}
 8008cf4:	e7fa      	b.n	8008cec <Init_Device_Type+0x30>
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	0802f680 	.word	0x0802f680
 8008cfc:	200001a8 	.word	0x200001a8

08008d00 <Init_Memory_Infor>:
{
 8008d00:	b510      	push	{r4, lr}
    Init_Timer_Send();
 8008d02:	f7ff ff91 	bl	8008c28 <Init_Timer_Send>
    Init_Device_Type();
 8008d06:	f7ff ffd9 	bl	8008cbc <Init_Device_Type>
	Init_ID(0);
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f7ff ff3c 	bl	8008b88 <Init_ID>
	Init_ID(1);
 8008d10:	2001      	movs	r0, #1
 8008d12:	f7ff ff39 	bl	8008b88 <Init_ID>
}
 8008d16:	bd10      	pop	{r4, pc}

08008d18 <USER_Payload_Node_Single>:
{

}

void USER_Payload_Node_Single(uint32_t delay)
{
 8008d18:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Single");
	uint8_t     pData[128] = {0};
 8008d1a:	2600      	movs	r6, #0
{
 8008d1c:	b0a7      	sub	sp, #156	; 0x9c
	LOG(LOG_DEBUG, "USER_Payload_Node_Single");
 8008d1e:	4943      	ldr	r1, [pc, #268]	; (8008e2c <USER_Payload_Node_Single+0x114>)
{
 8008d20:	9004      	str	r0, [sp, #16]
	LOG(LOG_DEBUG, "USER_Payload_Node_Single");
 8008d22:	2001      	movs	r0, #1
 8008d24:	f001 face 	bl	800a2c4 <LOG>
	uint8_t     pData[128] = {0};
 8008d28:	227c      	movs	r2, #124	; 0x7c
 8008d2a:	0031      	movs	r1, r6
 8008d2c:	a807      	add	r0, sp, #28
 8008d2e:	9606      	str	r6, [sp, #24]
 8008d30:	240a      	movs	r4, #10
 8008d32:	f001 fe81 	bl	800aa38 <memset>
	uint16_t	Value_Measure_Battery = 0;

	/* Measure */
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
	{
		switch(sModem.TypeModem_u8)
 8008d36:	4d3e      	ldr	r5, [pc, #248]	; (8008e30 <USER_Payload_Node_Single+0x118>)
 8008d38:	7e2b      	ldrb	r3, [r5, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d05d      	beq.n	8008dfa <USER_Payload_Node_Single+0xe2>
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d060      	beq.n	8008e04 <USER_Payload_Node_Single+0xec>
				Value_Measure_Single += Get_Vol_VP();
				break;
			default:
				break;
		}
		HAL_Delay(DELAY_MEASURE_SINGLE);
 8008d42:	2064      	movs	r0, #100	; 0x64
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
 8008d44:	3c01      	subs	r4, #1
		HAL_Delay(DELAY_MEASURE_SINGLE);
 8008d46:	f7f9 fee5 	bl	8002b14 <HAL_Delay>
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
 8008d4a:	b2a4      	uxth	r4, r4
		LED_TOGGLE(__LED_MEASURE);
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	f7fe fd71 	bl	8007834 <LED_TOGGLE>
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d1ef      	bne.n	8008d36 <USER_Payload_Node_Single+0x1e>
	}
	Value_Measure_Single /= TIME_MEASURE_SINGLE;
 8008d56:	210a      	movs	r1, #10
 8008d58:	0030      	movs	r0, r6
 8008d5a:	f7f7 f9fb 	bl	8000154 <__udivsi3>
 8008d5e:	b283      	uxth	r3, r0
 8008d60:	9302      	str	r3, [sp, #8]
	Value_Measure_Battery = Get_Vol_BAT();
 8008d62:	f7ff f88f 	bl	8007e84 <Get_Vol_BAT>

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 8008d66:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008d68:	0022      	movs	r2, r4
	Value_Measure_Battery = Get_Vol_BAT();
 8008d6a:	9005      	str	r0, [sp, #20]
	pData[length++] = OBIS_ID_SENSOR;
 8008d6c:	a806      	add	r0, sp, #24
 8008d6e:	7003      	strb	r3, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008d70:	88af      	ldrh	r7, [r5, #4]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008d72:	682b      	ldr	r3, [r5, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008d74:	b2f9      	uxtb	r1, r7
 8008d76:	7041      	strb	r1, [r0, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	1c93      	adds	r3, r2, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008d7c:	b296      	uxth	r6, r2
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008d7e:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008d80:	42b7      	cmp	r7, r6
 8008d82:	d842      	bhi.n	8008e0a <USER_Payload_Node_Single+0xf2>

	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8008d84:	4a2a      	ldr	r2, [pc, #168]	; (8008e30 <USER_Payload_Node_Single+0x118>)
 8008d86:	1c88      	adds	r0, r1, #2
 8008d88:	7e17      	ldrb	r7, [r2, #24]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008d8a:	3103      	adds	r1, #3
 8008d8c:	b2c0      	uxtb	r0, r0
 8008d8e:	b2c9      	uxtb	r1, r1
	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8008d90:	aa06      	add	r2, sp, #24
 8008d92:	2f00      	cmp	r7, #0
 8008d94:	d13e      	bne.n	8008e14 <USER_Payload_Node_Single+0xfc>
	{
		pData[length++] = OBIS_VOL_VNA;
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
	{
		pData[length++] = OBIS_VOL_VNA;
 8008d96:	2007      	movs	r0, #7
 8008d98:	54d0      	strb	r0, [r2, r3]
	}
	pData[length++] = 0x02;
 8008d9a:	2302      	movs	r3, #2
	pData[length++] = (Value_Measure_Single >> 8) & 0xFF;
 8008d9c:	9802      	ldr	r0, [sp, #8]
	pData[length++] = 0x02;
 8008d9e:	5453      	strb	r3, [r2, r1]
 8008da0:	1c4b      	adds	r3, r1, #1
	pData[length++] = (Value_Measure_Single >> 8) & 0xFF;
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	0a00      	lsrs	r0, r0, #8
 8008da6:	54d0      	strb	r0, [r2, r3]
	pData[length++] = Value_Measure_Single & 0xFF;
 8008da8:	9802      	ldr	r0, [sp, #8]
	pData[length++] = (Value_Measure_Single >> 8) & 0xFF;
 8008daa:	1c8b      	adds	r3, r1, #2
	pData[length++] = Value_Measure_Single & 0xFF;
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	54d0      	strb	r0, [r2, r3]

	pData[length++] = OBIS_VOL_BAT;
 8008db0:	2009      	movs	r0, #9
	pData[length++] = Value_Measure_Single & 0xFF;
 8008db2:	1ccb      	adds	r3, r1, #3
	pData[length++] = OBIS_VOL_BAT;
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	54d0      	strb	r0, [r2, r3]
 8008db8:	1d0b      	adds	r3, r1, #4
	pData[length++] = 0x01;
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	3808      	subs	r0, #8
 8008dbe:	54d0      	strb	r0, [r2, r3]
	pData[length++] = Value_Measure_Battery & 0xFF;
 8008dc0:	9805      	ldr	r0, [sp, #20]
	pData[length++] = 0x01;
 8008dc2:	1d4b      	adds	r3, r1, #5
	pData[length++] = Value_Measure_Battery & 0xFF;
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	54d0      	strb	r0, [r2, r3]
	pData[length++] = 0x00;
 8008dc8:	2300      	movs	r3, #0
	pData[length++] = Value_Measure_Battery & 0xFF;
 8008dca:	1d88      	adds	r0, r1, #6

	length++;
 8008dcc:	3108      	adds	r1, #8
	pData[length++] = 0x00;
 8008dce:	b2c0      	uxtb	r0, r0
	length++;
 8008dd0:	b2c9      	uxtb	r1, r1
	pData[length++] = 0x00;
 8008dd2:	5413      	strb	r3, [r2, r0]
	for (i = 0; i < (length - 1); i++)
 8008dd4:	1e4a      	subs	r2, r1, #1
		TempCrc ^= pData[i];
 8008dd6:	a804      	add	r0, sp, #16
	for (i = 0; i < (length - 1); i++)
 8008dd8:	4294      	cmp	r4, r2
 8008dda:	db1f      	blt.n	8008e1c <USER_Payload_Node_Single+0x104>

	pData[length-1] = TempCrc;
 8008ddc:	2408      	movs	r4, #8
 8008dde:	1900      	adds	r0, r0, r4
 8008de0:	5483      	strb	r3, [r0, r2]

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008de2:	2304      	movs	r3, #4
 8008de4:	33ff      	adds	r3, #255	; 0xff
 8008de6:	84ab      	strh	r3, [r5, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_SINGLE;
	AppLora_Send(pData, length, DATA_CONFIRMED_UP, _DATA_SINGLE, delay);
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	2203      	movs	r2, #3
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	a806      	add	r0, sp, #24
 8008df0:	2301      	movs	r3, #1
 8008df2:	f7fe fbcf 	bl	8007594 <AppLora_Send>
}
 8008df6:	b027      	add	sp, #156	; 0x9c
 8008df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Value_Measure_Single += Get_Vol_VNA();
 8008dfa:	f7ff f81f 	bl	8007e3c <Get_Vol_VNA>
				Value_Measure_Single += Get_Vol_VP();
 8008dfe:	1986      	adds	r6, r0, r6
 8008e00:	b2b6      	uxth	r6, r6
				break;
 8008e02:	e79e      	b.n	8008d42 <USER_Payload_Node_Single+0x2a>
				Value_Measure_Single += Get_Vol_VP();
 8008e04:	f7ff f82c 	bl	8007e60 <Get_Vol_VP>
 8008e08:	e7f9      	b.n	8008dfe <USER_Payload_Node_Single+0xe6>
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008e0a:	9e03      	ldr	r6, [sp, #12]
 8008e0c:	5cb6      	ldrb	r6, [r6, r2]
 8008e0e:	3201      	adds	r2, #1
 8008e10:	54c6      	strb	r6, [r0, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008e12:	e7b2      	b.n	8008d7a <USER_Payload_Node_Single+0x62>
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
 8008e14:	2f01      	cmp	r7, #1
 8008e16:	d0be      	beq.n	8008d96 <USER_Payload_Node_Single+0x7e>
 8008e18:	0001      	movs	r1, r0
 8008e1a:	e7be      	b.n	8008d9a <USER_Payload_Node_Single+0x82>
		TempCrc ^= pData[i];
 8008e1c:	2608      	movs	r6, #8
 8008e1e:	1980      	adds	r0, r0, r6
 8008e20:	5d00      	ldrb	r0, [r0, r4]
	for (i = 0; i < (length - 1); i++)
 8008e22:	3401      	adds	r4, #1
		TempCrc ^= pData[i];
 8008e24:	4043      	eors	r3, r0
	for (i = 0; i < (length - 1); i++)
 8008e26:	b2a4      	uxth	r4, r4
 8008e28:	e7d5      	b.n	8008dd6 <USER_Payload_Node_Single+0xbe>
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	0800bdc0 	.word	0x0800bdc0
 8008e30:	200001fc 	.word	0x200001fc

08008e34 <USER_Payload_Node_Calib>:

void USER_Payload_Node_Calib(uint32_t delay)
{
 8008e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e36:	2400      	movs	r4, #0
 8008e38:	b0bf      	sub	sp, #252	; 0xfc
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Calib");
 8008e3a:	493c      	ldr	r1, [pc, #240]	; (8008f2c <USER_Payload_Node_Calib+0xf8>)
{
 8008e3c:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Calib");
 8008e3e:	2001      	movs	r0, #1
 8008e40:	f001 fa40 	bl	800a2c4 <LOG>
	uint8_t     pData[128] = {0};
 8008e44:	227c      	movs	r2, #124	; 0x7c
 8008e46:	0021      	movs	r1, r4
 8008e48:	a81f      	add	r0, sp, #124	; 0x7c
 8008e4a:	941e      	str	r4, [sp, #120]	; 0x78
	uint8_t		Value_Measure_Calib[TIME_MEASURE_CALIB*2];
	uint16_t	Value;
	uint8_t		Pos = 0;

	/* Measure */
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 8008e4c:	0025      	movs	r5, r4
	uint8_t     pData[128] = {0};
 8008e4e:	f001 fdf3 	bl	800aa38 <memset>
	uint8_t		Pos = 0;
 8008e52:	0026      	movs	r6, r4
					break;
			}
			Value_Measure_Calib[Pos++] = (uint8_t) (Value >> 8);
			Value_Measure_Calib[Pos++] = (uint8_t) Value;
		}
		HAL_Delay(DELAY_MEASURE_CALIB);
 8008e54:	2064      	movs	r0, #100	; 0x64
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 8008e56:	3501      	adds	r5, #1
		HAL_Delay(DELAY_MEASURE_CALIB);
 8008e58:	f7f9 fe5c 	bl	8002b14 <HAL_Delay>
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 8008e5c:	b2ad      	uxth	r5, r5
		LED_TOGGLE(__LED_MEASURE);
 8008e5e:	2001      	movs	r0, #1
 8008e60:	f7fe fce8 	bl	8007834 <LED_TOGGLE>
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 8008e64:	2d32      	cmp	r5, #50	; 0x32
 8008e66:	d13c      	bne.n	8008ee2 <USER_Payload_Node_Calib+0xae>
	}

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 8008e68:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008e6a:	2400      	movs	r4, #0
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008e6c:	4a30      	ldr	r2, [pc, #192]	; (8008f30 <USER_Payload_Node_Calib+0xfc>)
	pData[length++] = OBIS_ID_SENSOR;
 8008e6e:	a81e      	add	r0, sp, #120	; 0x78
 8008e70:	7003      	strb	r3, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008e72:	8895      	ldrh	r5, [r2, #4]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008e74:	6817      	ldr	r7, [r2, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008e76:	b2e9      	uxtb	r1, r5
 8008e78:	7041      	strb	r1, [r0, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008e7a:	1ca3      	adds	r3, r4, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008e7c:	b2a6      	uxth	r6, r4
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008e7e:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008e80:	42b5      	cmp	r5, r6
 8008e82:	d846      	bhi.n	8008f12 <USER_Payload_Node_Calib+0xde>

	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8008e84:	7e15      	ldrb	r5, [r2, #24]
 8008e86:	1c8c      	adds	r4, r1, #2
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008e88:	3103      	adds	r1, #3
 8008e8a:	b2e4      	uxtb	r4, r4
 8008e8c:	b2c9      	uxtb	r1, r1
	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	d143      	bne.n	8008f1a <USER_Payload_Node_Calib+0xe6>
	{
		pData[length++] = OBIS_VOL_VNA;
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
	{
		pData[length++] = OBIS_VOL_VNA;
 8008e92:	2407      	movs	r4, #7
 8008e94:	54c4      	strb	r4, [r0, r3]
	}
	pData[length++] = 0x64;
 8008e96:	2464      	movs	r4, #100	; 0x64
 8008e98:	5444      	strb	r4, [r0, r1]
 8008e9a:	000c      	movs	r4, r1
 8008e9c:	3465      	adds	r4, #101	; 0x65
 8008e9e:	1c4b      	adds	r3, r1, #1
 8008ea0:	b2e4      	uxtb	r4, r4
 8008ea2:	b2db      	uxtb	r3, r3
	for (i = 0; i < 100; i++)
 8008ea4:	ad05      	add	r5, sp, #20
 8008ea6:	9402      	str	r4, [sp, #8]
	{
		pData[length++] = Value_Measure_Calib[i];
 8008ea8:	ae1e      	add	r6, sp, #120	; 0x78
 8008eaa:	001f      	movs	r7, r3
 8008eac:	782c      	ldrb	r4, [r5, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	55f4      	strb	r4, [r6, r7]
	for (i = 0; i < 100; i++)
 8008eb2:	9c02      	ldr	r4, [sp, #8]
		pData[length++] = Value_Measure_Calib[i];
 8008eb4:	b2db      	uxtb	r3, r3
	for (i = 0; i < 100; i++)
 8008eb6:	3501      	adds	r5, #1
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d1f6      	bne.n	8008eaa <USER_Payload_Node_Calib+0x76>
	}
	pData[length++] = 0x00;
 8008ebc:	2400      	movs	r4, #0
 8008ebe:	54f4      	strb	r4, [r6, r3]

	length++;
	for (i = 0; i < (length - 1); i++)
 8008ec0:	0023      	movs	r3, r4
	length++;
 8008ec2:	3167      	adds	r1, #103	; 0x67
 8008ec4:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 8008ec6:	1e4d      	subs	r5, r1, #1
 8008ec8:	42ab      	cmp	r3, r5
 8008eca:	db2a      	blt.n	8008f22 <USER_Payload_Node_Calib+0xee>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008ecc:	4b19      	ldr	r3, [pc, #100]	; (8008f34 <USER_Payload_Node_Calib+0x100>)
	pData[length-1] = TempCrc;
 8008ece:	5544      	strb	r4, [r0, r5]
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008ed0:	8493      	strh	r3, [r2, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_MULTI;
	AppLora_Send(pData, length, DATA_CONFIRMED_UP, _DATA_MULTI, delay);
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	2302      	movs	r3, #2
 8008eda:	f7fe fb5b 	bl	8007594 <AppLora_Send>
}
 8008ede:	b03f      	add	sp, #252	; 0xfc
 8008ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i >= 6)
 8008ee2:	2d05      	cmp	r5, #5
 8008ee4:	d9b6      	bls.n	8008e54 <USER_Payload_Node_Calib+0x20>
			switch(sModem.TypeModem_u8)
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <USER_Payload_Node_Calib+0xfc>)
 8008ee8:	7e1b      	ldrb	r3, [r3, #24]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <USER_Payload_Node_Calib+0xd0>
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d00c      	beq.n	8008f0c <USER_Payload_Node_Calib+0xd8>
			Value_Measure_Calib[Pos++] = (uint8_t) (Value >> 8);
 8008ef2:	1c73      	adds	r3, r6, #1
 8008ef4:	aa05      	add	r2, sp, #20
 8008ef6:	0a21      	lsrs	r1, r4, #8
 8008ef8:	5591      	strb	r1, [r2, r6]
 8008efa:	b2db      	uxtb	r3, r3
			Value_Measure_Calib[Pos++] = (uint8_t) Value;
 8008efc:	3602      	adds	r6, #2
 8008efe:	b2f6      	uxtb	r6, r6
 8008f00:	54d4      	strb	r4, [r2, r3]
 8008f02:	e7a7      	b.n	8008e54 <USER_Payload_Node_Calib+0x20>
					Value = Get_Vol_VNA();
 8008f04:	f7fe ff9a 	bl	8007e3c <Get_Vol_VNA>
					Value = Get_Vol_VP();
 8008f08:	0004      	movs	r4, r0
					break;
 8008f0a:	e7f2      	b.n	8008ef2 <USER_Payload_Node_Calib+0xbe>
					Value = Get_Vol_VP();
 8008f0c:	f7fe ffa8 	bl	8007e60 <Get_Vol_VP>
 8008f10:	e7fa      	b.n	8008f08 <USER_Payload_Node_Calib+0xd4>
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008f12:	5d3e      	ldrb	r6, [r7, r4]
 8008f14:	3401      	adds	r4, #1
 8008f16:	54c6      	strb	r6, [r0, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008f18:	e7af      	b.n	8008e7a <USER_Payload_Node_Calib+0x46>
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
 8008f1a:	2d01      	cmp	r5, #1
 8008f1c:	d0b9      	beq.n	8008e92 <USER_Payload_Node_Calib+0x5e>
 8008f1e:	0021      	movs	r1, r4
 8008f20:	e7b9      	b.n	8008e96 <USER_Payload_Node_Calib+0x62>
		TempCrc ^= pData[i];
 8008f22:	5cc6      	ldrb	r6, [r0, r3]
	for (i = 0; i < (length - 1); i++)
 8008f24:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 8008f26:	4074      	eors	r4, r6
	for (i = 0; i < (length - 1); i++)
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	e7cd      	b.n	8008ec8 <USER_Payload_Node_Calib+0x94>
 8008f2c:	0800bdd9 	.word	0x0800bdd9
 8008f30:	200001fc 	.word	0x200001fc
 8008f34:	00000203 	.word	0x00000203

08008f38 <USER_Payload_Node_Mode>:

void USER_Payload_Node_Mode(uint32_t delay)
{
 8008f38:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Mode");
	uint8_t     pData[128] = {0};
 8008f3a:	2600      	movs	r6, #0
{
 8008f3c:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Node_Mode");
 8008f3e:	4920      	ldr	r1, [pc, #128]	; (8008fc0 <USER_Payload_Node_Mode+0x88>)
{
 8008f40:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Mode");
 8008f42:	2001      	movs	r0, #1
 8008f44:	f001 f9be 	bl	800a2c4 <LOG>
	uint8_t     pData[128] = {0};
 8008f48:	227c      	movs	r2, #124	; 0x7c
 8008f4a:	0031      	movs	r1, r6
 8008f4c:	a805      	add	r0, sp, #20
 8008f4e:	9604      	str	r6, [sp, #16]
 8008f50:	f001 fd72 	bl	800aa38 <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 8008f54:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008f56:	481b      	ldr	r0, [pc, #108]	; (8008fc4 <USER_Payload_Node_Mode+0x8c>)
	uint8_t     pData[128] = {0};
 8008f58:	ac04      	add	r4, sp, #16
	pData[length++] = OBIS_ID_SENSOR;
 8008f5a:	7023      	strb	r3, [r4, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008f5c:	8881      	ldrh	r1, [r0, #4]

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008f5e:	6807      	ldr	r7, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008f60:	b2ca      	uxtb	r2, r1
 8008f62:	7062      	strb	r2, [r4, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008f64:	1cb3      	adds	r3, r6, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008f66:	b2b5      	uxth	r5, r6
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008f68:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008f6a:	42a9      	cmp	r1, r5
 8008f6c:	d81f      	bhi.n	8008fae <USER_Payload_Node_Mode+0x76>

	pData[length++] = OBIS_MODE;
 8008f6e:	2104      	movs	r1, #4
 8008f70:	54e1      	strb	r1, [r4, r3]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008f72:	1cd3      	adds	r3, r2, #3
	pData[length++] = 0x01;
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	3903      	subs	r1, #3
 8008f78:	54e1      	strb	r1, [r4, r3]
	pData[length++] = sModem.Mode_Node & 0xFF;
 8008f7a:	7e41      	ldrb	r1, [r0, #25]
	pData[length++] = 0x01;
 8008f7c:	1d13      	adds	r3, r2, #4
	pData[length++] = sModem.Mode_Node & 0xFF;
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	54e1      	strb	r1, [r4, r3]
	pData[length++] = 0x00;
 8008f82:	2300      	movs	r3, #0
	pData[length++] = sModem.Mode_Node & 0xFF;
 8008f84:	1d51      	adds	r1, r2, #5
	pData[length++] = 0x00;
 8008f86:	b2c9      	uxtb	r1, r1

	length++;
 8008f88:	3207      	adds	r2, #7
	pData[length++] = 0x00;
 8008f8a:	5463      	strb	r3, [r4, r1]
	length++;
 8008f8c:	b2d1      	uxtb	r1, r2
	uint8_t     TempCrc = 0;
 8008f8e:	001a      	movs	r2, r3
	for (i = 0; i < (length - 1); i++)
 8008f90:	1e4e      	subs	r6, r1, #1
 8008f92:	42b3      	cmp	r3, r6
 8008f94:	db0f      	blt.n	8008fb6 <USER_Payload_Node_Mode+0x7e>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008f96:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <USER_Payload_Node_Mode+0x90>)
	pData[length-1] = TempCrc;
 8008f98:	55a2      	strb	r2, [r4, r6]
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008f9a:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_MODE;
	AppLora_Send(pData, length, DATA_CONFIRMED_UP, _DATA_MODE, delay);
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	001a      	movs	r2, r3
 8008fa6:	f7fe faf5 	bl	8007594 <AppLora_Send>
}
 8008faa:	b025      	add	sp, #148	; 0x94
 8008fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008fae:	5dbd      	ldrb	r5, [r7, r6]
 8008fb0:	3601      	adds	r6, #1
 8008fb2:	54e5      	strb	r5, [r4, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008fb4:	e7d6      	b.n	8008f64 <USER_Payload_Node_Mode+0x2c>
		TempCrc ^= pData[i];
 8008fb6:	5ce7      	ldrb	r7, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 8008fb8:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 8008fba:	407a      	eors	r2, r7
	for (i = 0; i < (length - 1); i++)
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	e7e8      	b.n	8008f92 <USER_Payload_Node_Mode+0x5a>
 8008fc0:	0800bdf1 	.word	0x0800bdf1
 8008fc4:	200001fc 	.word	0x200001fc
 8008fc8:	00000303 	.word	0x00000303

08008fcc <USER_Payload_Node_Confirm>:

void USER_Payload_Node_Confirm(uint32_t delay)
{
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Confirm");
	uint8_t     pData[128] = {0};
 8008fce:	2400      	movs	r4, #0
{
 8008fd0:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Node_Confirm");
 8008fd2:	491c      	ldr	r1, [pc, #112]	; (8009044 <USER_Payload_Node_Confirm+0x78>)
{
 8008fd4:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Confirm");
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	f001 f974 	bl	800a2c4 <LOG>
	uint8_t     pData[128] = {0};
 8008fdc:	227c      	movs	r2, #124	; 0x7c
 8008fde:	0021      	movs	r1, r4
 8008fe0:	a805      	add	r0, sp, #20
 8008fe2:	9404      	str	r4, [sp, #16]
 8008fe4:	f001 fd28 	bl	800aa38 <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Packet */
    pData[length++] = OBIS_ID_SENSOR;
 8008fe8:	2301      	movs	r3, #1
    pData[length++] = sModem.sDCU_id.Length_u16;
 8008fea:	4817      	ldr	r0, [pc, #92]	; (8009048 <USER_Payload_Node_Confirm+0x7c>)
	uint8_t     pData[128] = {0};
 8008fec:	ad04      	add	r5, sp, #16
    pData[length++] = OBIS_ID_SENSOR;
 8008fee:	702b      	strb	r3, [r5, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8008ff0:	8882      	ldrh	r2, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008ff2:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8008ff4:	b2d1      	uxtb	r1, r2
 8008ff6:	7069      	strb	r1, [r5, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008ff8:	1ca3      	adds	r3, r4, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008ffa:	b2a6      	uxth	r6, r4
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008ffc:	b2db      	uxtb	r3, r3
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008ffe:	42b2      	cmp	r2, r6
 8009000:	d817      	bhi.n	8009032 <USER_Payload_Node_Confirm+0x66>

    pData[length++] = OBIS_CONFIRM;
 8009002:	2211      	movs	r2, #17
 8009004:	54ea      	strb	r2, [r5, r3]
    pData[length++] = 0x00;
 8009006:	2300      	movs	r3, #0
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8009008:	1cca      	adds	r2, r1, #3
    pData[length++] = 0x00;
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	54ab      	strb	r3, [r5, r2]

    length++;
	for (i = 0; i < (length - 1); i++)
 800900e:	001a      	movs	r2, r3
    length++;
 8009010:	3105      	adds	r1, #5
 8009012:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 8009014:	1e4c      	subs	r4, r1, #1
 8009016:	42a2      	cmp	r2, r4
 8009018:	db0f      	blt.n	800903a <USER_Payload_Node_Confirm+0x6e>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 800901a:	552b      	strb	r3, [r5, r4]

    /* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 800901c:	4b0b      	ldr	r3, [pc, #44]	; (800904c <USER_Payload_Node_Confirm+0x80>)
	sModem.TypeDataMessage = _DATA_CONFIRM;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_CONFIRM, delay);
 800901e:	2201      	movs	r2, #1
	sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 8009020:	8483      	strh	r3, [r0, #36]	; 0x24
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_CONFIRM, delay);
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	0028      	movs	r0, r5
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	2306      	movs	r3, #6
 800902a:	f7fe fab3 	bl	8007594 <AppLora_Send>
}
 800902e:	b025      	add	sp, #148	; 0x94
 8009030:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8009032:	5d3e      	ldrb	r6, [r7, r4]
 8009034:	3401      	adds	r4, #1
 8009036:	54ee      	strb	r6, [r5, r3]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8009038:	e7de      	b.n	8008ff8 <USER_Payload_Node_Confirm+0x2c>
		TempCrc ^= pData[i];
 800903a:	5caf      	ldrb	r7, [r5, r2]
	for (i = 0; i < (length - 1); i++)
 800903c:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 800903e:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 8009040:	b292      	uxth	r2, r2
 8009042:	e7e8      	b.n	8009016 <USER_Payload_Node_Confirm+0x4a>
 8009044:	0800be08 	.word	0x0800be08
 8009048:	200001fc 	.word	0x200001fc
 800904c:	00000601 	.word	0x00000601

08009050 <Protocol_Process_Rx>:
	#endif
    return Result;
}

uint8_t Protocol_Process_Rx (uint8_t DataType, uint8_t *pData, uint8_t Length)
{
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	000c      	movs	r4, r1
 8009054:	0015      	movs	r5, r2
    			break;
    	}
    	length_data = 0;
	#else
        uint8_t 	length_data = 0;
	    switch(DataType)
 8009056:	2804      	cmp	r0, #4
 8009058:	d040      	beq.n	80090dc <Protocol_Process_Rx+0x8c>
 800905a:	2806      	cmp	r0, #6
 800905c:	d100      	bne.n	8009060 <Protocol_Process_Rx+0x10>
 800905e:	e09a      	b.n	8009196 <Protocol_Process_Rx+0x146>
 8009060:	2803      	cmp	r0, #3
 8009062:	d10d      	bne.n	8009080 <Protocol_Process_Rx+0x30>
 8009064:	2300      	movs	r3, #0
							Pos++;
							Pos++;
							break;
						case OBIS_MODE:
							length_data = *(pData + Pos++);
							sModem.Mode_Node = *(pData + Pos++);
 8009066:	484d      	ldr	r0, [pc, #308]	; (800919c <Protocol_Process_Rx+0x14c>)
				while (Pos < (Length - 1))  //bo crc
 8009068:	3d01      	subs	r5, #1
 800906a:	e041      	b.n	80090f0 <Protocol_Process_Rx+0xa0>
					Obis = *(pData + Pos++);
 800906c:	5ce1      	ldrb	r1, [r4, r3]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	b2d2      	uxtb	r2, r2
					switch (Obis)
 8009072:	2902      	cmp	r1, #2
 8009074:	d006      	beq.n	8009084 <Protocol_Process_Rx+0x34>
 8009076:	2903      	cmp	r1, #3
 8009078:	d008      	beq.n	800908c <Protocol_Process_Rx+0x3c>
					Obis = *(pData + Pos++);
 800907a:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 800907c:	4283      	cmp	r3, r0
 800907e:	dbf5      	blt.n	800906c <Protocol_Process_Rx+0x1c>
	    	default:
	    		break;
		}
	#endif
    return 1;
}
 8009080:	2001      	movs	r0, #1
 8009082:	bd70      	pop	{r4, r5, r6, pc}
							Pos++;
 8009084:	3306      	adds	r3, #6
 8009086:	b2db      	uxtb	r3, r3
				while (Pos < (Length - 1))  //bo crc
 8009088:	1e68      	subs	r0, r5, #1
 800908a:	e7f7      	b.n	800907c <Protocol_Process_Rx+0x2c>
							if ( (Pos + length_data) <= Length )
 800908c:	5ca1      	ldrb	r1, [r4, r2]
							length_data = *(pData + Pos++);
 800908e:	1c9e      	adds	r6, r3, #2
 8009090:	b2f6      	uxtb	r6, r6
							if ( (Pos + length_data) <= Length )
 8009092:	1989      	adds	r1, r1, r6
 8009094:	4a42      	ldr	r2, [pc, #264]	; (80091a0 <Protocol_Process_Rx+0x150>)
 8009096:	42a9      	cmp	r1, r5
 8009098:	dc18      	bgt.n	80090cc <Protocol_Process_Rx+0x7c>
								sRTCSet.year    = *(pData + Pos++);
 800909a:	5da1      	ldrb	r1, [r4, r6]
								sRTCSet.sec     = *(pData + Pos++);
 800909c:	001e      	movs	r6, r3
								sRTCSet.year    = *(pData + Pos++);
 800909e:	7191      	strb	r1, [r2, #6]
 80090a0:	1cd9      	adds	r1, r3, #3
								sRTCSet.month   = *(pData + Pos++);
 80090a2:	b2c9      	uxtb	r1, r1
 80090a4:	5c61      	ldrb	r1, [r4, r1]
								sRTCSet.sec     = *(pData + Pos++);
 80090a6:	3608      	adds	r6, #8
								sRTCSet.month   = *(pData + Pos++);
 80090a8:	7151      	strb	r1, [r2, #5]
 80090aa:	1d19      	adds	r1, r3, #4
								sRTCSet.date    = *(pData + Pos++);
 80090ac:	b2c9      	uxtb	r1, r1
 80090ae:	5c61      	ldrb	r1, [r4, r1]
								sRTCSet.sec     = *(pData + Pos++);
 80090b0:	b2f6      	uxtb	r6, r6
								sRTCSet.date    = *(pData + Pos++);
 80090b2:	7111      	strb	r1, [r2, #4]
 80090b4:	1d59      	adds	r1, r3, #5
								sRTCSet.hour    = *(pData + Pos++);
 80090b6:	b2c9      	uxtb	r1, r1
 80090b8:	5c61      	ldrb	r1, [r4, r1]
 80090ba:	7011      	strb	r1, [r2, #0]
 80090bc:	1d99      	adds	r1, r3, #6
								sRTCSet.min     = *(pData + Pos++);
 80090be:	b2c9      	uxtb	r1, r1
 80090c0:	5c61      	ldrb	r1, [r4, r1]
 80090c2:	3307      	adds	r3, #7
 80090c4:	7051      	strb	r1, [r2, #1]
								sRTCSet.sec     = *(pData + Pos++);
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	5ce3      	ldrb	r3, [r4, r3]
 80090ca:	7093      	strb	r3, [r2, #2]
						    UTIL_Set_RTC(sRTCSet);
 80090cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80090ce:	f001 f87b 	bl	800a1c8 <UTIL_Set_RTC>
						    USER_Payload_Node_Confirm(0);
 80090d2:	2000      	movs	r0, #0
 80090d4:	f7ff ff7a 	bl	8008fcc <USER_Payload_Node_Confirm>
							break;
 80090d8:	0033      	movs	r3, r6
 80090da:	e7d5      	b.n	8009088 <Protocol_Process_Rx+0x38>
	    switch(DataType)
 80090dc:	2300      	movs	r3, #0
 80090de:	e7d3      	b.n	8009088 <Protocol_Process_Rx+0x38>
					Obis = *(pData + Pos++);
 80090e0:	5ce1      	ldrb	r1, [r4, r3]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	b2d2      	uxtb	r2, r2
					switch (Obis)
 80090e6:	2902      	cmp	r1, #2
 80090e8:	d01e      	beq.n	8009128 <Protocol_Process_Rx+0xd8>
 80090ea:	2904      	cmp	r1, #4
 80090ec:	d01f      	beq.n	800912e <Protocol_Process_Rx+0xde>
 80090ee:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dbf5      	blt.n	80090e0 <Protocol_Process_Rx+0x90>
				switch(sModem.Mode_Node)
 80090f4:	4c29      	ldr	r4, [pc, #164]	; (800919c <Protocol_Process_Rx+0x14c>)
 80090f6:	7e60      	ldrb	r0, [r4, #25]
 80090f8:	2801      	cmp	r0, #1
 80090fa:	d01f      	beq.n	800913c <Protocol_Process_Rx+0xec>
 80090fc:	2802      	cmp	r0, #2
 80090fe:	d02b      	beq.n	8009158 <Protocol_Process_Rx+0x108>
 8009100:	2800      	cmp	r0, #0
 8009102:	d1bd      	bne.n	8009080 <Protocol_Process_Rx+0x30>
						LED_OFF(__LED_MODE);
 8009104:	f7fe fb84 	bl	8007810 <LED_OFF>
						sModem.CheckInit = 1;
 8009108:	0023      	movs	r3, r4
 800910a:	2201      	movs	r2, #1
 800910c:	3355      	adds	r3, #85	; 0x55
						fevent_disable(sEventAppCom, _EVENT_IDLE_HANDLER);
 800910e:	2106      	movs	r1, #6
 8009110:	4824      	ldr	r0, [pc, #144]	; (80091a4 <Protocol_Process_Rx+0x154>)
						sModem.CheckInit = 1;
 8009112:	701a      	strb	r2, [r3, #0]
						fevent_disable(sEventAppCom, _EVENT_IDLE_HANDLER);
 8009114:	f000 faef 	bl	80096f6 <fevent_disable>
						USER_Payload_Node_Mode(sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY);
 8009118:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800911a:	00c0      	lsls	r0, r0, #3
 800911c:	f7ff ff0c 	bl	8008f38 <USER_Payload_Node_Mode>
						UTIL_TIMER_Start (&TimerLoraTx);
 8009120:	4821      	ldr	r0, [pc, #132]	; (80091a8 <Protocol_Process_Rx+0x158>)
 8009122:	f000 ffbf 	bl	800a0a4 <UTIL_TIMER_Start>
						break;
 8009126:	e7ab      	b.n	8009080 <Protocol_Process_Rx+0x30>
							Pos++;
 8009128:	3306      	adds	r3, #6
 800912a:	b2db      	uxtb	r3, r3
							break;
 800912c:	e7e0      	b.n	80090f0 <Protocol_Process_Rx+0xa0>
							length_data = *(pData + Pos++);
 800912e:	1c9a      	adds	r2, r3, #2
 8009130:	b2d2      	uxtb	r2, r2
							sModem.Mode_Node = *(pData + Pos++);
 8009132:	5ca2      	ldrb	r2, [r4, r2]
 8009134:	3303      	adds	r3, #3
 8009136:	b2db      	uxtb	r3, r3
 8009138:	7642      	strb	r2, [r0, #25]
							break;
 800913a:	e7d9      	b.n	80090f0 <Protocol_Process_Rx+0xa0>
						LED_ON(__LED_MODE);
 800913c:	2000      	movs	r0, #0
 800913e:	f7fe fb55 	bl	80077ec <LED_ON>
						UTIL_TIMER_Stop(&TimerLoraTx);
 8009142:	4819      	ldr	r0, [pc, #100]	; (80091a8 <Protocol_Process_Rx+0x158>)
 8009144:	f000 ff5c 	bl	800a000 <UTIL_TIMER_Stop>
						USER_Payload_Node_Mode(0);
 8009148:	2000      	movs	r0, #0
 800914a:	f7ff fef5 	bl	8008f38 <USER_Payload_Node_Mode>
					Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
 800914e:	4b17      	ldr	r3, [pc, #92]	; (80091ac <Protocol_Process_Rx+0x15c>)
 8009150:	4817      	ldr	r0, [pc, #92]	; (80091b0 <Protocol_Process_Rx+0x160>)
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	4798      	blx	r3
 8009156:	e793      	b.n	8009080 <Protocol_Process_Rx+0x30>
						LED_ON(__LED_MODE);
 8009158:	2000      	movs	r0, #0
 800915a:	f7fe fb47 	bl	80077ec <LED_ON>
						USER_Payload_Node_Calib(sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_CALIB);
 800915e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009160:	00c0      	lsls	r0, r0, #3
 8009162:	f7ff fe67 	bl	8008e34 <USER_Payload_Node_Calib>
						break;
 8009166:	e78b      	b.n	8009080 <Protocol_Process_Rx+0x30>
					Obis = *(pData + Pos++);
 8009168:	5ce1      	ldrb	r1, [r4, r3]
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	b2d2      	uxtb	r2, r2
					switch (Obis)
 800916e:	2902      	cmp	r1, #2
 8009170:	d00e      	beq.n	8009190 <Protocol_Process_Rx+0x140>
							length_data = *(pData + Pos++);
 8009172:	3302      	adds	r3, #2
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2911      	cmp	r1, #17
 8009178:	d000      	beq.n	800917c <Protocol_Process_Rx+0x12c>
 800917a:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 800917c:	42ab      	cmp	r3, r5
 800917e:	dbf3      	blt.n	8009168 <Protocol_Process_Rx+0x118>
				if(sModem.Mode_Node != _MODE_SLEEP)
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <Protocol_Process_Rx+0x14c>)
 8009182:	7e5a      	ldrb	r2, [r3, #25]
 8009184:	2a00      	cmp	r2, #0
 8009186:	d100      	bne.n	800918a <Protocol_Process_Rx+0x13a>
 8009188:	e77a      	b.n	8009080 <Protocol_Process_Rx+0x30>
					sModem.Mode_Node = _MODE_WAKEUP;
 800918a:	2201      	movs	r2, #1
 800918c:	765a      	strb	r2, [r3, #25]
 800918e:	e7de      	b.n	800914e <Protocol_Process_Rx+0xfe>
							Pos++;
 8009190:	3306      	adds	r3, #6
 8009192:	b2db      	uxtb	r3, r3
							break;
 8009194:	e7f2      	b.n	800917c <Protocol_Process_Rx+0x12c>
	    switch(DataType)
 8009196:	2300      	movs	r3, #0
				while (Pos < (Length - 1))  //bo crc
 8009198:	3d01      	subs	r5, #1
 800919a:	e7ef      	b.n	800917c <Protocol_Process_Rx+0x12c>
 800919c:	200001fc 	.word	0x200001fc
 80091a0:	20001340 	.word	0x20001340
 80091a4:	20000024 	.word	0x20000024
 80091a8:	20000578 	.word	0x20000578
 80091ac:	0800b4d0 	.word	0x0800b4d0
 80091b0:	000186a0 	.word	0x000186a0

080091b4 <Protocol_Extract_Rx>:
{
 80091b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091b6:	0004      	movs	r4, r0
 80091b8:	001e      	movs	r6, r3
    LOG_Array(LOG_RECEI, pData, Length);
 80091ba:	b28a      	uxth	r2, r1
{
 80091bc:	000d      	movs	r5, r1
    LOG_Array(LOG_RECEI, pData, Length);
 80091be:	0001      	movs	r1, r0
 80091c0:	2003      	movs	r0, #3
 80091c2:	f001 f8c9 	bl	800a358 <LOG_Array>
    sFrameRx->Header.Value 	= 	*(pData);
 80091c6:	7823      	ldrb	r3, [r4, #0]
 80091c8:	7033      	strb	r3, [r6, #0]
    DevAddrRx = DevAddrRx << 8 | *(pData + 1);
 80091ca:	78a2      	ldrb	r2, [r4, #2]
 80091cc:	7861      	ldrb	r1, [r4, #1]
 80091ce:	0212      	lsls	r2, r2, #8
 80091d0:	430a      	orrs	r2, r1
 80091d2:	78e1      	ldrb	r1, [r4, #3]
 80091d4:	0409      	lsls	r1, r1, #16
 80091d6:	4311      	orrs	r1, r2
 80091d8:	7922      	ldrb	r2, [r4, #4]
 80091da:	0612      	lsls	r2, r2, #24
 80091dc:	430a      	orrs	r2, r1
 80091de:	ba12      	rev	r2, r2
    sFrameRx->DevAddr = DevAddrRx;
 80091e0:	6072      	str	r2, [r6, #4]
    NetAddrRx = NetAddrRx << 8 | *(pData + 5);
 80091e2:	1d62      	adds	r2, r4, #5
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	79a2      	ldrb	r2, [r4, #6]
 80091e8:	7961      	ldrb	r1, [r4, #5]
 80091ea:	0212      	lsls	r2, r2, #8
 80091ec:	430a      	orrs	r2, r1
 80091ee:	79e1      	ldrb	r1, [r4, #7]
 80091f0:	0409      	lsls	r1, r1, #16
 80091f2:	4311      	orrs	r1, r2
 80091f4:	7a22      	ldrb	r2, [r4, #8]
 80091f6:	0612      	lsls	r2, r2, #24
 80091f8:	430a      	orrs	r2, r1
 80091fa:	ba12      	rev	r2, r2
    sFrameRx->NetAddr = NetAddrRx;
 80091fc:	60b2      	str	r2, [r6, #8]
		if (sFrameRx->Header.Bits.SendAll == 0){
 80091fe:	b25a      	sxtb	r2, r3
 8009200:	2a00      	cmp	r2, #0
 8009202:	db15      	blt.n	8009230 <Protocol_Extract_Rx+0x7c>
				if ( *(pData + 5 + i) != *(sModem.sNET_id.Data_a8 + i))
 8009204:	2200      	movs	r2, #0
 8009206:	4916      	ldr	r1, [pc, #88]	; (8009260 <Protocol_Extract_Rx+0xac>)
 8009208:	6888      	ldr	r0, [r1, #8]
 800920a:	9f01      	ldr	r7, [sp, #4]
 800920c:	5cbf      	ldrb	r7, [r7, r2]
 800920e:	46bc      	mov	ip, r7
 8009210:	5c87      	ldrb	r7, [r0, r2]
 8009212:	45bc      	cmp	ip, r7
 8009214:	d121      	bne.n	800925a <Protocol_Extract_Rx+0xa6>
			for (i = 0; i < 4; i++){
 8009216:	3201      	adds	r2, #1
 8009218:	2a04      	cmp	r2, #4
 800921a:	d1f6      	bne.n	800920a <Protocol_Extract_Rx+0x56>
				if ( *(pData + 1 + i) != *(sModem.sDCU_id.Data_a8 + i))
 800921c:	6809      	ldr	r1, [r1, #0]
 800921e:	3a03      	subs	r2, #3
 8009220:	3901      	subs	r1, #1
 8009222:	5ca7      	ldrb	r7, [r4, r2]
 8009224:	5c88      	ldrb	r0, [r1, r2]
 8009226:	4287      	cmp	r7, r0
 8009228:	d117      	bne.n	800925a <Protocol_Extract_Rx+0xa6>
			for (i = 0; i < 4; i++){
 800922a:	3201      	adds	r2, #1
 800922c:	2a05      	cmp	r2, #5
 800922e:	d1f8      	bne.n	8009222 <Protocol_Extract_Rx+0x6e>
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_DOWN )
 8009230:	2207      	movs	r2, #7
    uint8_t 	Result = FALSE;
 8009232:	2700      	movs	r7, #0
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_DOWN )
 8009234:	4013      	ands	r3, r2
 8009236:	2b04      	cmp	r3, #4
 8009238:	d102      	bne.n	8009240 <Protocol_Extract_Rx+0x8c>
			sCtrlLora.CtrlACK_u8 = TRUE;
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <Protocol_Extract_Rx+0xb0>)
 800923c:	3701      	adds	r7, #1
 800923e:	701f      	strb	r7, [r3, #0]
		if (Length > 9)
 8009240:	2d09      	cmp	r5, #9
 8009242:	d908      	bls.n	8009256 <Protocol_Extract_Rx+0xa2>
			Protocol_Process_Rx (sFrameRx->Header.Bits.DataType_u8, pData + 9, Length - 9);
 8009244:	0021      	movs	r1, r4
 8009246:	7830      	ldrb	r0, [r6, #0]
 8009248:	3d09      	subs	r5, #9
 800924a:	0680      	lsls	r0, r0, #26
 800924c:	b2ea      	uxtb	r2, r5
 800924e:	3109      	adds	r1, #9
 8009250:	0f40      	lsrs	r0, r0, #29
 8009252:	f7ff fefd 	bl	8009050 <Protocol_Process_Rx>
}
 8009256:	0038      	movs	r0, r7
 8009258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					return FALSE;
 800925a:	2700      	movs	r7, #0
 800925c:	e7fb      	b.n	8009256 <Protocol_Extract_Rx+0xa2>
 800925e:	46c0      	nop			; (mov r8, r8)
 8009260:	200001fc 	.word	0x200001fc
 8009264:	2000134c 	.word	0x2000134c

08009268 <Protocol_Packet_Header>:

uint8_t Protocol_Packet_Header (LoRaFrame_t *pFrame, uint8_t RespondType, uint8_t DataType)
{
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8009268:	2338      	movs	r3, #56	; 0x38
 800926a:	00d2      	lsls	r2, r2, #3
 800926c:	401a      	ands	r2, r3
 800926e:	3b31      	subs	r3, #49	; 0x31
 8009270:	4019      	ands	r1, r3
 8009272:	430a      	orrs	r2, r1
 8009274:	2140      	movs	r1, #64	; 0x40
{
 8009276:	b5f0      	push	{r4, r5, r6, r7, lr}
	pFrame->Header.Bits.DataType_u8 = DataType;
	pFrame->Header.Bits.ACK_u8 = sCtrlLora.CtrlACK_u8;
 8009278:	4c0e      	ldr	r4, [pc, #56]	; (80092b4 <Protocol_Packet_Header+0x4c>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 800927a:	7823      	ldrb	r3, [r4, #0]
 800927c:	019b      	lsls	r3, r3, #6
 800927e:	400b      	ands	r3, r1
 8009280:	431a      	orrs	r2, r3
		uint32_t NETID_u32 = 0;
		uint8_t i = 0;

		for (i = 0; i < 4; i++)
		{
			DCUID_u32 = (DCUID_u32 << 8) + *(sModem.sDCU_id.Data_a8 + i);
 8009282:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <Protocol_Packet_Header+0x50>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8009284:	7002      	strb	r2, [r0, #0]
			DCUID_u32 = (DCUID_u32 << 8) + *(sModem.sDCU_id.Data_a8 + i);
 8009286:	681d      	ldr	r5, [r3, #0]
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 8009288:	689e      	ldr	r6, [r3, #8]
 800928a:	2300      	movs	r3, #0
		uint32_t NETID_u32 = 0;
 800928c:	001a      	movs	r2, r3
		uint32_t DCUID_u32 = 0;
 800928e:	0019      	movs	r1, r3
			DCUID_u32 = (DCUID_u32 << 8) + *(sModem.sDCU_id.Data_a8 + i);
 8009290:	5cef      	ldrb	r7, [r5, r3]
 8009292:	0209      	lsls	r1, r1, #8
 8009294:	1879      	adds	r1, r7, r1
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 8009296:	5cf7      	ldrb	r7, [r6, r3]
 8009298:	0212      	lsls	r2, r2, #8
		for (i = 0; i < 4; i++)
 800929a:	3301      	adds	r3, #1
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 800929c:	18ba      	adds	r2, r7, r2
		for (i = 0; i < 4; i++)
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d1f6      	bne.n	8009290 <Protocol_Packet_Header+0x28>

		pFrame->DevAddr = DCUID_u32;
		pFrame->NetAddr = NETID_u32;
	#endif

	sCtrlLora.CtrlACK_u8 = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	7023      	strb	r3, [r4, #0]
		pFrame->DevAddr = DCUID_u32;
 80092a6:	6041      	str	r1, [r0, #4]
		pFrame->NetAddr = NETID_u32;
 80092a8:	6082      	str	r2, [r0, #8]

    if (pFrame->Header.Bits.ACK_u8 != 0)
 80092aa:	7800      	ldrb	r0, [r0, #0]
 80092ac:	0640      	lsls	r0, r0, #25
    {
        return 1;
    }
    return 0;
}
 80092ae:	0fc0      	lsrs	r0, r0, #31
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	2000134c 	.word	0x2000134c
 80092b8:	200001fc 	.word	0x200001fc

080092bc <MX_ADC_Init>:
		/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)*/
		hadc.Instance = ADC1;
		hadc.Init.OversamplingMode = DISABLE;
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
		hadc.Init.Resolution = ADC_RESOLUTION_12B;
		hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80092bc:	2207      	movs	r2, #7
{
 80092be:	b510      	push	{r4, lr}
		hadc.Init.OversamplingMode = DISABLE;
 80092c0:	4c15      	ldr	r4, [pc, #84]	; (8009318 <MX_ADC_Init+0x5c>)
 80092c2:	2300      	movs	r3, #0
		hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80092c4:	63a2      	str	r2, [r4, #56]	; 0x38
		hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
		hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
		hadc.Init.ContinuousConvMode = DISABLE;
		hadc.Init.DiscontinuousConvMode = DISABLE;
		hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
		hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80092c6:	22c2      	movs	r2, #194	; 0xc2
 80092c8:	32ff      	adds	r2, #255	; 0xff
 80092ca:	6262      	str	r2, [r4, #36]	; 0x24
		hadc.Init.DMAContinuousRequests = DISABLE;
 80092cc:	0022      	movs	r2, r4
		hadc.Instance = ADC1;
 80092ce:	4913      	ldr	r1, [pc, #76]	; (800931c <MX_ADC_Init+0x60>)
		hadc.Init.DMAContinuousRequests = DISABLE;
 80092d0:	322c      	adds	r2, #44	; 0x2c
 80092d2:	7013      	strb	r3, [r2, #0]
		hadc.Instance = ADC1;
 80092d4:	6021      	str	r1, [r4, #0]
		hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
		hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
		hadc.Init.LowPowerAutoWait = DISABLE;
		hadc.Init.LowPowerFrequencyMode = ENABLE;
 80092d6:	2201      	movs	r2, #1
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80092d8:	21c0      	movs	r1, #192	; 0xc0
		hadc.Init.LowPowerFrequencyMode = ENABLE;
 80092da:	6362      	str	r2, [r4, #52]	; 0x34
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80092dc:	0609      	lsls	r1, r1, #24
		hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80092de:	6122      	str	r2, [r4, #16]
		hadc.Init.LowPowerAutoPowerOff = DISABLE;
		if (HAL_ADC_Init(&hadc) != HAL_OK)
 80092e0:	0020      	movs	r0, r4
		hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80092e2:	3203      	adds	r2, #3
		hadc.Init.ContinuousConvMode = DISABLE;
 80092e4:	8423      	strh	r3, [r4, #32]
		hadc.Init.OversamplingMode = DISABLE;
 80092e6:	63e3      	str	r3, [r4, #60]	; 0x3c
		hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80092e8:	62a3      	str	r3, [r4, #40]	; 0x28
		hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80092ea:	6323      	str	r3, [r4, #48]	; 0x30
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80092ec:	6061      	str	r1, [r4, #4]
		hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80092ee:	60a3      	str	r3, [r4, #8]
		hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80092f0:	60e3      	str	r3, [r4, #12]
		hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80092f2:	6162      	str	r2, [r4, #20]
		hadc.Init.LowPowerAutoWait = DISABLE;
 80092f4:	61a3      	str	r3, [r4, #24]
		hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80092f6:	61e3      	str	r3, [r4, #28]
		if (HAL_ADC_Init(&hadc) != HAL_OK)
 80092f8:	f7f9 fd0a 	bl	8002d10 <HAL_ADC_Init>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d001      	beq.n	8009304 <MX_ADC_Init+0x48>
		{
		Error_Handler();
 8009300:	f7f8 fe90 	bl	8002024 <Error_Handler>
		}

		if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8009304:	2100      	movs	r1, #0
 8009306:	0020      	movs	r0, r4
 8009308:	f7f9 ff30 	bl	800316c <HAL_ADCEx_Calibration_Start>
 800930c:	2800      	cmp	r0, #0
 800930e:	d001      	beq.n	8009314 <MX_ADC_Init+0x58>
		{
		Error_Handler();
 8009310:	f7f8 fe88 	bl	8002024 <Error_Handler>
		}
	#endif
}
 8009314:	bd10      	pop	{r4, pc}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	20001350 	.word	0x20001350
 800931c:	40012400 	.word	0x40012400

08009320 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009320:	b510      	push	{r4, lr}
 8009322:	0004      	movs	r4, r0
 8009324:	b086      	sub	sp, #24
	#ifdef DEVICE_TYPE_STATION
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009326:	2214      	movs	r2, #20
 8009328:	2100      	movs	r1, #0
 800932a:	a801      	add	r0, sp, #4
 800932c:	f001 fb84 	bl	800aa38 <memset>
		if(adcHandle->Instance==ADC1)
 8009330:	4b0e      	ldr	r3, [pc, #56]	; (800936c <HAL_ADC_MspInit+0x4c>)
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d116      	bne.n	8009366 <HAL_ADC_MspInit+0x46>
		{
			__HAL_RCC_ADC1_CLK_ENABLE();
 8009338:	2280      	movs	r2, #128	; 0x80
 800933a:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <HAL_ADC_MspInit+0x50>)
 800933c:	0092      	lsls	r2, r2, #2
 800933e:	6b59      	ldr	r1, [r3, #52]	; 0x34
			__HAL_RCC_GPIOA_CLK_ENABLE();
		    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
		    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		    GPIO_InitStruct.Pull = GPIO_NOPULL;
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009340:	20a0      	movs	r0, #160	; 0xa0
			__HAL_RCC_ADC1_CLK_ENABLE();
 8009342:	430a      	orrs	r2, r1
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8009344:	2101      	movs	r1, #1
			__HAL_RCC_ADC1_CLK_ENABLE();
 8009346:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800934a:	05c0      	lsls	r0, r0, #23
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800934c:	430a      	orrs	r2, r1
 800934e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	400b      	ands	r3, r1
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	9b00      	ldr	r3, [sp, #0]
		    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8009358:	231c      	movs	r3, #28
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800935a:	a901      	add	r1, sp, #4
		    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 800935c:	9301      	str	r3, [sp, #4]
		    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800935e:	3b19      	subs	r3, #25
 8009360:	9302      	str	r3, [sp, #8]
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009362:	f7fa f965 	bl	8003630 <HAL_GPIO_Init>
		}
	#endif
}
 8009366:	b006      	add	sp, #24
 8009368:	bd10      	pop	{r4, pc}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	40012400 	.word	0x40012400
 8009370:	40021000 	.word	0x40021000

08009374 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
	#ifdef DEVICE_TYPE_STATION
	#else
	if(adcHandle->Instance==ADC1)
 8009374:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <HAL_ADC_MspDeInit+0x44>)
 8009376:	6802      	ldr	r2, [r0, #0]
{
 8009378:	b510      	push	{r4, lr}
	if(adcHandle->Instance==ADC1)
 800937a:	429a      	cmp	r2, r3
 800937c:	d11b      	bne.n	80093b6 <HAL_ADC_MspDeInit+0x42>
	{
		__HAL_RCC_ADC1_FORCE_RESET();
 800937e:	2280      	movs	r2, #128	; 0x80
		__HAL_RCC_ADC1_RELEASE_RESET();
		__HAL_RCC_ADC1_CLK_DISABLE();
	    HAL_GPIO_DeInit(ADC_VNA_GPIO_Port, ADC_VNA_Pin);
 8009380:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_ADC1_FORCE_RESET();
 8009382:	4b0e      	ldr	r3, [pc, #56]	; (80093bc <HAL_ADC_MspDeInit+0x48>)
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	6a59      	ldr	r1, [r3, #36]	; 0x24
	    HAL_GPIO_DeInit(ADC_VNA_GPIO_Port, ADC_VNA_Pin);
 8009388:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_ADC1_FORCE_RESET();
 800938a:	430a      	orrs	r2, r1
 800938c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RCC_ADC1_RELEASE_RESET();
 800938e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009390:	490b      	ldr	r1, [pc, #44]	; (80093c0 <HAL_ADC_MspDeInit+0x4c>)
 8009392:	400a      	ands	r2, r1
 8009394:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RCC_ADC1_CLK_DISABLE();
 8009396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009398:	400a      	ands	r2, r1
 800939a:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_GPIO_DeInit(ADC_VNA_GPIO_Port, ADC_VNA_Pin);
 800939c:	2104      	movs	r1, #4
 800939e:	f7fa fa0b 	bl	80037b8 <HAL_GPIO_DeInit>
	    HAL_GPIO_DeInit(ADC_VP_GPIO_Port, ADC_VP_Pin);
 80093a2:	20a0      	movs	r0, #160	; 0xa0
 80093a4:	2108      	movs	r1, #8
 80093a6:	05c0      	lsls	r0, r0, #23
 80093a8:	f7fa fa06 	bl	80037b8 <HAL_GPIO_DeInit>
	    HAL_GPIO_DeInit(ADC_BAT_GPIO_Port, ADC_BAT_Pin);
 80093ac:	20a0      	movs	r0, #160	; 0xa0
 80093ae:	2110      	movs	r1, #16
 80093b0:	05c0      	lsls	r0, r0, #23
 80093b2:	f7fa fa01 	bl	80037b8 <HAL_GPIO_DeInit>
	}
	#endif
}
 80093b6:	bd10      	pop	{r4, pc}
 80093b8:	40012400 	.word	0x40012400
 80093bc:	40021000 	.word	0x40021000
 80093c0:	fffffdff 	.word	0xfffffdff

080093c4 <MX_GPIO_Init>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* Exported functions --------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 80093c4:	b5f0      	push	{r4, r5, r6, r7, lr}
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80093c6:	2501      	movs	r5, #1
{
 80093c8:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093ca:	2214      	movs	r2, #20
 80093cc:	2100      	movs	r1, #0
 80093ce:	a803      	add	r0, sp, #12
 80093d0:	f001 fb32 	bl	800aa38 <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80093d4:	2202      	movs	r2, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80093d6:	4c24      	ldr	r4, [pc, #144]	; (8009468 <MX_GPIO_Init+0xa4>)

		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80093d8:	4f24      	ldr	r7, [pc, #144]	; (800946c <MX_GPIO_Init+0xa8>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80093da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80093dc:	0038      	movs	r0, r7
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80093de:	432b      	orrs	r3, r5
 80093e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80093e4:	2164      	movs	r1, #100	; 0x64
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80093e6:	402b      	ands	r3, r5
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	9b00      	ldr	r3, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80093ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

		GPIO_InitStruct.Pin = RTC_INT_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ee:	2600      	movs	r6, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80093f0:	4313      	orrs	r3, r2
 80093f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093f6:	4013      	ands	r3, r2
 80093f8:	9301      	str	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80093fa:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80093fc:	9b01      	ldr	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80093fe:	f7fa fa61 	bl	80038c4 <HAL_GPIO_WritePin>
		HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8009402:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009404:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <MX_GPIO_Init+0xac>)
		HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8009406:	a903      	add	r1, sp, #12
 8009408:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800940a:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pin = RTC_INT_Pin;
 800940c:	9503      	str	r5, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940e:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8009410:	f7fa f90e 	bl	8003630 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8009414:	2364      	movs	r3, #100	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009416:	0038      	movs	r0, r7
 8009418:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 800941a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800941c:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941e:	9605      	str	r6, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009420:	9606      	str	r6, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009422:	f7fa f905 	bl	8003630 <HAL_GPIO_Init>

		__HAL_RCC_ADC1_CLK_ENABLE();
 8009426:	2380      	movs	r3, #128	; 0x80
 8009428:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4313      	orrs	r3, r2
 800942e:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8009430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009432:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8009434:	432b      	orrs	r3, r5
 8009436:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800943a:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800943c:	402b      	ands	r3, r5
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8009442:	231c      	movs	r3, #28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009444:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8009446:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009448:	3b19      	subs	r3, #25
 800944a:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800944c:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800944e:	f7fa f8ef 	bl	8003630 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8009452:	0032      	movs	r2, r6
 8009454:	0029      	movs	r1, r5
 8009456:	2007      	movs	r0, #7
 8009458:	f7f9 fed8 	bl	800320c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800945c:	2007      	movs	r0, #7
 800945e:	f7f9 feff 	bl	8003260 <HAL_NVIC_EnableIRQ>
		#endif
}
 8009462:	b009      	add	sp, #36	; 0x24
 8009464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	40021000 	.word	0x40021000
 800946c:	50000400 	.word	0x50000400
 8009470:	10110000 	.word	0x10110000

08009474 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
 8009474:	480b      	ldr	r0, [pc, #44]	; (80094a4 <MX_I2C1_Init+0x30>)
 8009476:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <MX_I2C1_Init+0x34>)
{
 8009478:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 800947a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000708;
 800947c:	23e1      	movs	r3, #225	; 0xe1
 800947e:	00db      	lsls	r3, r3, #3
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009480:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00000708;
 8009482:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009484:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009486:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8009488:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800948a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800948c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800948e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009490:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009492:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009494:	f7fa fa30 	bl	80038f8 <HAL_I2C_Init>
 8009498:	2800      	cmp	r0, #0
 800949a:	d001      	beq.n	80094a0 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 800949c:	f7f8 fdc2 	bl	8002024 <Error_Handler>
  }
}
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	200013ac 	.word	0x200013ac
 80094a8:	40005400 	.word	0x40005400

080094ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80094ac:	b510      	push	{r4, lr}
 80094ae:	0004      	movs	r4, r0
 80094b0:	b086      	sub	sp, #24

	#ifdef DEVICE_TYPE_STATION
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094b2:	2214      	movs	r2, #20
 80094b4:	2100      	movs	r1, #0
 80094b6:	a801      	add	r0, sp, #4
 80094b8:	f001 fabe 	bl	800aa38 <memset>
	#endif

  if(i2cHandle->Instance==I2C1)
 80094bc:	4b10      	ldr	r3, [pc, #64]	; (8009500 <HAL_I2C_MspInit+0x54>)
 80094be:	6822      	ldr	r2, [r4, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d11a      	bne.n	80094fa <HAL_I2C_MspInit+0x4e>
  {
	#ifdef DEVICE_TYPE_STATION
	#else
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80094c4:	2202      	movs	r2, #2
 80094c6:	4c0f      	ldr	r4, [pc, #60]	; (8009504 <HAL_I2C_MspInit+0x58>)
		GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094c8:	480f      	ldr	r0, [pc, #60]	; (8009508 <HAL_I2C_MspInit+0x5c>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80094ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094cc:	a901      	add	r1, sp, #4
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80094ce:	4313      	orrs	r3, r2
 80094d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094d4:	4013      	ands	r3, r2
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	9b00      	ldr	r3, [sp, #0]
		GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 80094da:	23c0      	movs	r3, #192	; 0xc0
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094e0:	2312      	movs	r3, #18
 80094e2:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e4:	3b0f      	subs	r3, #15
 80094e6:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80094e8:	3301      	adds	r3, #1
 80094ea:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094ec:	f7fa f8a0 	bl	8003630 <HAL_GPIO_Init>

		__HAL_RCC_I2C1_CLK_ENABLE();
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80094f4:	039b      	lsls	r3, r3, #14
 80094f6:	4313      	orrs	r3, r2
 80094f8:	63a3      	str	r3, [r4, #56]	; 0x38
	#endif
  }
}
 80094fa:	b006      	add	sp, #24
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	40005400 	.word	0x40005400
 8009504:	40021000 	.word	0x40021000
 8009508:	50000400 	.word	0x50000400

0800950c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <HAL_I2C_MspDeInit+0x2c>)
 800950e:	6802      	ldr	r2, [r0, #0]
{
 8009510:	b510      	push	{r4, lr}
  if(i2cHandle->Instance==I2C1)
 8009512:	429a      	cmp	r2, r3
 8009514:	d10e      	bne.n	8009534 <HAL_I2C_MspDeInit+0x28>
  {
	#ifdef DEVICE_TYPE_STATION
	#else
		__HAL_RCC_I2C1_CLK_DISABLE();
 8009516:	4a09      	ldr	r2, [pc, #36]	; (800953c <HAL_I2C_MspDeInit+0x30>)
 8009518:	4909      	ldr	r1, [pc, #36]	; (8009540 <HAL_I2C_MspDeInit+0x34>)
 800951a:	6b93      	ldr	r3, [r2, #56]	; 0x38
		/**I2C1 GPIO Configuration
		PB8     ------> I2C1_SCL
		PB9     ------> I2C1_SDA
		*/
		HAL_GPIO_DeInit(RTC_SCL_GPIO_Port, RTC_SCL_Pin);
 800951c:	4809      	ldr	r0, [pc, #36]	; (8009544 <HAL_I2C_MspDeInit+0x38>)
		__HAL_RCC_I2C1_CLK_DISABLE();
 800951e:	400b      	ands	r3, r1
		HAL_GPIO_DeInit(RTC_SCL_GPIO_Port, RTC_SCL_Pin);
 8009520:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_I2C1_CLK_DISABLE();
 8009522:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_GPIO_DeInit(RTC_SCL_GPIO_Port, RTC_SCL_Pin);
 8009524:	0049      	lsls	r1, r1, #1
 8009526:	f7fa f947 	bl	80037b8 <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(RTC_SDA_GPIO_Port, RTC_SDA_Pin);
 800952a:	2180      	movs	r1, #128	; 0x80
 800952c:	4805      	ldr	r0, [pc, #20]	; (8009544 <HAL_I2C_MspDeInit+0x38>)
 800952e:	0089      	lsls	r1, r1, #2
 8009530:	f7fa f942 	bl	80037b8 <HAL_GPIO_DeInit>
	#endif
  }
}
 8009534:	bd10      	pop	{r4, pc}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	40005400 	.word	0x40005400
 800953c:	40021000 	.word	0x40021000
 8009540:	ffdfffff 	.word	0xffdfffff
 8009544:	50000400 	.word	0x50000400

08009548 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart2_tx;

void MX_USART1_UART_Init(void)
{
	huart1.Instance = USART1;
 8009548:	480b      	ldr	r0, [pc, #44]	; (8009578 <MX_USART1_UART_Init+0x30>)
 800954a:	4b0c      	ldr	r3, [pc, #48]	; (800957c <MX_USART1_UART_Init+0x34>)
{
 800954c:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 800954e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8009550:	23e1      	movs	r3, #225	; 0xe1
 8009552:	025b      	lsls	r3, r3, #9
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 8009554:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 8009556:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009558:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 800955a:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800955c:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800955e:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8009560:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009562:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009564:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009566:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009568:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800956a:	f7fc f997 	bl	800589c <HAL_UART_Init>
 800956e:	2800      	cmp	r0, #0
 8009570:	d001      	beq.n	8009576 <MX_USART1_UART_Init+0x2e>
	{
		Error_Handler();
 8009572:	f7f8 fd57 	bl	8002024 <Error_Handler>
	}
}
 8009576:	bd10      	pop	{r4, pc}
 8009578:	2000150c 	.word	0x2000150c
 800957c:	40013800 	.word	0x40013800

08009580 <HAL_UART_MspInit>:
		Error_Handler();
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8009580:	b510      	push	{r4, lr}
 8009582:	0004      	movs	r4, r0
 8009584:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009586:	2214      	movs	r2, #20
 8009588:	2100      	movs	r1, #0
 800958a:	a802      	add	r0, sp, #8
 800958c:	f001 fa54 	bl	800aa38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009590:	2224      	movs	r2, #36	; 0x24
 8009592:	2100      	movs	r1, #0
 8009594:	a807      	add	r0, sp, #28
 8009596:	f001 fa4f 	bl	800aa38 <memset>

  if(uartHandle->Instance==USART1)
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	4a33      	ldr	r2, [pc, #204]	; (800966c <HAL_UART_MspInit+0xec>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d130      	bne.n	8009604 <HAL_UART_MspInit+0x84>
  {
	    __HAL_RCC_USART1_CLK_ENABLE();
 80095a2:	2280      	movs	r2, #128	; 0x80
 80095a4:	4b32      	ldr	r3, [pc, #200]	; (8009670 <HAL_UART_MspInit+0xf0>)
 80095a6:	01d2      	lsls	r2, r2, #7
 80095a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();

	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095aa:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART1_CLK_ENABLE();
 80095ac:	430a      	orrs	r2, r1
 80095ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80095b0:	2201      	movs	r2, #1
 80095b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095b4:	4311      	orrs	r1, r2
 80095b6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80095ba:	9207      	str	r2, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80095bc:	4013      	ands	r3, r2
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	9b00      	ldr	r3, [sp, #0]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80095c2:	920a      	str	r2, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095c4:	f7fa fe76 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d001      	beq.n	80095d0 <HAL_UART_MspInit+0x50>
	    {
	    	Error_Handler();
 80095cc:	f7f8 fd2a 	bl	8002024 <Error_Handler>
		PA10     ------> USART1_RX
		*/
		#ifdef DEVICE_TYPE_STATION
				GPIO_InitStruct.Pin = MCU_TX_Pin|MCU_RX_Pin;
		#else
				GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80095d0:	23c0      	movs	r3, #192	; 0xc0
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	9302      	str	r3, [sp, #8]
		#endif
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095d6:	2302      	movs	r3, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095d8:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095da:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095dc:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095de:	3301      	adds	r3, #1
 80095e0:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095e2:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80095e4:	3301      	adds	r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095e6:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80095e8:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ea:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ec:	f7fa f820 	bl	8003630 <HAL_GPIO_Init>

	    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80095f0:	201b      	movs	r0, #27
 80095f2:	2201      	movs	r2, #1
 80095f4:	0021      	movs	r1, r4
 80095f6:	f7f9 fe09 	bl	800320c <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80095fa:	201b      	movs	r0, #27
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80095fc:	f7f9 fe30 	bl	8003260 <HAL_NVIC_EnableIRQ>
//	    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
//	#else
//	#endif
  }
}
 8009600:	b010      	add	sp, #64	; 0x40
 8009602:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8009604:	4a1b      	ldr	r2, [pc, #108]	; (8009674 <HAL_UART_MspInit+0xf4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d1fa      	bne.n	8009600 <HAL_UART_MspInit+0x80>
	    __HAL_RCC_USART2_CLK_ENABLE();
 800960a:	2280      	movs	r2, #128	; 0x80
 800960c:	4b18      	ldr	r3, [pc, #96]	; (8009670 <HAL_UART_MspInit+0xf0>)
 800960e:	0292      	lsls	r2, r2, #10
 8009610:	6b99      	ldr	r1, [r3, #56]	; 0x38
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009612:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART2_CLK_ENABLE();
 8009614:	430a      	orrs	r2, r1
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009616:	2101      	movs	r1, #1
	    __HAL_RCC_USART2_CLK_ENABLE();
 8009618:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800961a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961c:	430a      	orrs	r2, r1
 800961e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	400b      	ands	r3, r1
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	9b01      	ldr	r3, [sp, #4]
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009628:	2302      	movs	r3, #2
 800962a:	9307      	str	r3, [sp, #28]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800962c:	18db      	adds	r3, r3, r3
 800962e:	930a      	str	r3, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009630:	f7fa fe40 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 8009634:	2800      	cmp	r0, #0
 8009636:	d001      	beq.n	800963c <HAL_UART_MspInit+0xbc>
	    	Error_Handler();
 8009638:	f7f8 fcf4 	bl	8002024 <Error_Handler>
	    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 800963c:	23c0      	movs	r3, #192	; 0xc0
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009642:	2302      	movs	r3, #2
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009644:	20a0      	movs	r0, #160	; 0xa0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009646:	2400      	movs	r4, #0
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009648:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800964a:	3301      	adds	r3, #1
 800964c:	9305      	str	r3, [sp, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800964e:	a902      	add	r1, sp, #8
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8009650:	3301      	adds	r3, #1
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009652:	05c0      	lsls	r0, r0, #23
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8009654:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009656:	9404      	str	r4, [sp, #16]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009658:	f7f9 ffea 	bl	8003630 <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800965c:	201c      	movs	r0, #28
 800965e:	2201      	movs	r2, #1
 8009660:	0021      	movs	r1, r4
 8009662:	f7f9 fdd3 	bl	800320c <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009666:	201c      	movs	r0, #28
 8009668:	e7c8      	b.n	80095fc <HAL_UART_MspInit+0x7c>
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	40013800 	.word	0x40013800
 8009670:	40021000 	.word	0x40021000
 8009674:	40004400 	.word	0x40004400

08009678 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if(uartHandle->Instance==USART1)
 8009678:	6803      	ldr	r3, [r0, #0]
 800967a:	4a11      	ldr	r2, [pc, #68]	; (80096c0 <HAL_UART_MspDeInit+0x48>)
{
 800967c:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 800967e:	4293      	cmp	r3, r2
 8009680:	d10e      	bne.n	80096a0 <HAL_UART_MspDeInit+0x28>
  {
		__HAL_RCC_USART1_CLK_DISABLE();
 8009682:	4a10      	ldr	r2, [pc, #64]	; (80096c4 <HAL_UART_MspDeInit+0x4c>)
 8009684:	4910      	ldr	r1, [pc, #64]	; (80096c8 <HAL_UART_MspDeInit+0x50>)
 8009686:	6b53      	ldr	r3, [r2, #52]	; 0x34
		PA10     ------> USART1_RX
		*/
//		#ifdef DEVICE_TYPE_STATION
//				HAL_GPIO_DeInit(GPIOA, MCU_TX_Pin|MCU_RX_Pin);
//		#else
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8009688:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_USART1_CLK_DISABLE();
 800968a:	400b      	ands	r3, r1
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800968c:	21c0      	movs	r1, #192	; 0xc0
 800968e:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_USART1_CLK_DISABLE();
 8009690:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8009692:	00c9      	lsls	r1, r1, #3
 8009694:	f7fa f890 	bl	80037b8 <HAL_GPIO_DeInit>
//		#endif
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009698:	201b      	movs	r0, #27
	    /**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	    */
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800969a:	f7f9 fded 	bl	8003278 <HAL_NVIC_DisableIRQ>
//	    HAL_DMA_DeInit(uartHandle->hdmatx);
//	#endif
  }
}
 800969e:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 80096a0:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <HAL_UART_MspDeInit+0x54>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d1fb      	bne.n	800969e <HAL_UART_MspDeInit+0x26>
	    __HAL_RCC_USART2_CLK_DISABLE();
 80096a6:	4a07      	ldr	r2, [pc, #28]	; (80096c4 <HAL_UART_MspDeInit+0x4c>)
 80096a8:	4909      	ldr	r1, [pc, #36]	; (80096d0 <HAL_UART_MspDeInit+0x58>)
 80096aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 80096ac:	20a0      	movs	r0, #160	; 0xa0
	    __HAL_RCC_USART2_CLK_DISABLE();
 80096ae:	400b      	ands	r3, r1
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 80096b0:	21c0      	movs	r1, #192	; 0xc0
 80096b2:	05c0      	lsls	r0, r0, #23
	    __HAL_RCC_USART2_CLK_DISABLE();
 80096b4:	6393      	str	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 80096b6:	00c9      	lsls	r1, r1, #3
 80096b8:	f7fa f87e 	bl	80037b8 <HAL_GPIO_DeInit>
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80096bc:	201c      	movs	r0, #28
 80096be:	e7ec      	b.n	800969a <HAL_UART_MspDeInit+0x22>
 80096c0:	40013800 	.word	0x40013800
 80096c4:	40021000 	.word	0x40021000
 80096c8:	ffffbfff 	.word	0xffffbfff
 80096cc:	40004400 	.word	0x40004400
 80096d0:	fffdffff 	.word	0xfffdffff

080096d4 <fevent_active>:
 * @brief	Active 1 event len
 * @note	Cho event thuc hien luon
 */
uint8_t fevent_active(sEvent_struct *event_struct, uint8_t event_name)
{
	event_struct[event_name].e_status = 1;
 80096d4:	0109      	lsls	r1, r1, #4
 80096d6:	1841      	adds	r1, r0, r1
	event_struct[event_name].e_systick = 0;
 80096d8:	2300      	movs	r3, #0
	event_struct[event_name].e_status = 1;
 80096da:	2001      	movs	r0, #1
 80096dc:	7048      	strb	r0, [r1, #1]
	event_struct[event_name].e_systick = 0;
 80096de:	604b      	str	r3, [r1, #4]
	return 1;
}
 80096e0:	4770      	bx	lr

080096e2 <fevent_enable>:
/**
 * @brief	Enable 1 event len
 * @note	Cho phep mot event kich hoat sau period cua no
 */
uint8_t fevent_enable(sEvent_struct *event_struct, uint8_t event_name)
{
 80096e2:	b570      	push	{r4, r5, r6, lr}
	event_struct[event_name].e_status = 1;
 80096e4:	2501      	movs	r5, #1
 80096e6:	010c      	lsls	r4, r1, #4
 80096e8:	1904      	adds	r4, r0, r4
 80096ea:	7065      	strb	r5, [r4, #1]
	event_struct[event_name].e_systick = HAL_GetTick();
 80096ec:	f7f9 fa0c 	bl	8002b08 <HAL_GetTick>
 80096f0:	6060      	str	r0, [r4, #4]
	return 1;
}
 80096f2:	0028      	movs	r0, r5
 80096f4:	bd70      	pop	{r4, r5, r6, pc}

080096f6 <fevent_disable>:
/**
 * @brief	Disable 1 event
 */
uint8_t fevent_disable(sEvent_struct *event_struct, uint8_t event_name)
{
	event_struct[event_name].e_status = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	0109      	lsls	r1, r1, #4
 80096fa:	1840      	adds	r0, r0, r1
 80096fc:	7043      	strb	r3, [r0, #1]
	return 1;
}
 80096fe:	2001      	movs	r0, #1
 8009700:	4770      	bx	lr

08009702 <OnchipFlashWriteData>:
/* Exported functions --------------------------------------------------------*/
/**
 * @note	So luong bien truyen vao Phai la Boi cua 8
 */
HAL_StatusTypeDef	OnchipFlashWriteData (uint32_t andress, uint8_t	*data_address, uint32_t data_length)
{
 8009702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef   status = HAL_ERROR;

	temp_data_address = data_address;
	temp_write_address = andress;

	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 8009704:	2303      	movs	r3, #3
 8009706:	0014      	movs	r4, r2
{
 8009708:	000f      	movs	r7, r1
	HAL_StatusTypeDef   status = HAL_ERROR;
 800970a:	2501      	movs	r5, #1
{
 800970c:	9001      	str	r0, [sp, #4]
	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 800970e:	401c      	ands	r4, r3
 8009710:	421a      	tst	r2, r3
 8009712:	d110      	bne.n	8009736 <OnchipFlashWriteData+0x34>
	{
		//Calculate number of word to write
		writetime = data_length / FLASH_BYTE_WRTIE;
 8009714:	0893      	lsrs	r3, r2, #2
 8009716:	9300      	str	r3, [sp, #0]
		//Unlock flash
		HAL_FLASH_Unlock();
 8009718:	f7f9 fede 	bl	80034d8 <HAL_FLASH_Unlock>
		//Wait for last operation to be completed
        FLASH_WaitForLastOperation(1000);
 800971c:	20fa      	movs	r0, #250	; 0xfa
 800971e:	0080      	lsls	r0, r0, #2
 8009720:	f7f9 ff1a 	bl	8003558 <FLASH_WaitForLastOperation>
	temp_data_address = data_address;
 8009724:	003e      	movs	r6, r7
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	1bd9      	subs	r1, r3, r7
		//Change bytes order then write
		for (i = 0; i < writetime; i++)
 800972a:	9b00      	ldr	r3, [sp, #0]
 800972c:	1871      	adds	r1, r6, r1
 800972e:	42a3      	cmp	r3, r4
 8009730:	d803      	bhi.n	800973a <OnchipFlashWriteData+0x38>
				break;
			temp_write_address = temp_write_address + FLASH_BYTE_WRTIE;
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
		}
		//Lock flash
		HAL_FLASH_Lock();
 8009732:	f7f9 ff03 	bl	800353c <HAL_FLASH_Lock>
	}
	return status;
}
 8009736:	0028      	movs	r0, r5
 8009738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 800973a:	2002      	movs	r0, #2
			WriteData = *(__IO uint32_t*)(temp_data_address);
 800973c:	6832      	ldr	r2, [r6, #0]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 800973e:	f7f9 ff45 	bl	80035cc <HAL_FLASH_Program>
 8009742:	0005      	movs	r5, r0
			if (status == HAL_ERROR)
 8009744:	2801      	cmp	r0, #1
 8009746:	d0f4      	beq.n	8009732 <OnchipFlashWriteData+0x30>
		for (i = 0; i < writetime; i++)
 8009748:	3401      	adds	r4, #1
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
 800974a:	3604      	adds	r6, #4
		for (i = 0; i < writetime; i++)
 800974c:	b2a4      	uxth	r4, r4
 800974e:	e7ea      	b.n	8009726 <OnchipFlashWriteData+0x24>

08009750 <OnchipFlashPageErase>:
	}
	return status;
}

HAL_StatusTypeDef OnchipFlashPageErase (uint32_t pageaddress)
{
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	0004      	movs	r4, r0
	HAL_StatusTypeDef status = HAL_ERROR;
    //Unlock flash
    status = HAL_FLASH_Unlock();
 8009754:	f7f9 fec0 	bl	80034d8 <HAL_FLASH_Unlock>
 8009758:	0005      	movs	r5, r0
    //Wait for last operation to be completed
    FLASH_WaitForLastOperation(1000);
 800975a:	20fa      	movs	r0, #250	; 0xfa
 800975c:	0080      	lsls	r0, r0, #2
 800975e:	f7f9 fefb 	bl	8003558 <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation(1000);
        //Disable the PER Bit
        CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
    #else
        //If the previous operation is completed, proceed to erase the page
        if (status == HAL_OK)
 8009762:	2d00      	cmp	r5, #0
 8009764:	d102      	bne.n	800976c <OnchipFlashPageErase+0x1c>
            FLASH_PageErase(pageaddress);
 8009766:	0020      	movs	r0, r4
 8009768:	f7f9 ff4c 	bl	8003604 <FLASH_PageErase>
        //Wait for last operation to be completed
        status = FLASH_WaitForLastOperation(1000);
 800976c:	20fa      	movs	r0, #250	; 0xfa
 800976e:	0080      	lsls	r0, r0, #2
 8009770:	f7f9 fef2 	bl	8003558 <FLASH_WaitForLastOperation>
        //Disable the PER Bit
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8009774:	4b06      	ldr	r3, [pc, #24]	; (8009790 <OnchipFlashPageErase+0x40>)
 8009776:	4907      	ldr	r1, [pc, #28]	; (8009794 <OnchipFlashPageErase+0x44>)
 8009778:	685a      	ldr	r2, [r3, #4]
        status = FLASH_WaitForLastOperation(1000);
 800977a:	0004      	movs	r4, r0
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800977c:	400a      	ands	r2, r1
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800977e:	2108      	movs	r1, #8
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8009780:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	438a      	bics	r2, r1
 8009786:	605a      	str	r2, [r3, #4]
    #endif
    HAL_FLASH_Lock();
 8009788:	f7f9 fed8 	bl	800353c <HAL_FLASH_Lock>
	return status;
}
 800978c:	0020      	movs	r0, r4
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	40022000 	.word	0x40022000
 8009794:	fffffdff 	.word	0xfffffdff

08009798 <Erase_Firmware>:

void Erase_Firmware(uint32_t Add_Flash_update, uint32_t Total_page)
{
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	0006      	movs	r6, r0
 800979c:	000d      	movs	r5, r1
	uint32_t var;
	for (var = 0; var < Total_page; var++)
 800979e:	2400      	movs	r4, #0
 80097a0:	42ac      	cmp	r4, r5
 80097a2:	d100      	bne.n	80097a6 <Erase_Firmware+0xe>
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
}
 80097a4:	bd70      	pop	{r4, r5, r6, pc}
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
 80097a6:	01e0      	lsls	r0, r4, #7
 80097a8:	1980      	adds	r0, r0, r6
 80097aa:	f7ff ffd1 	bl	8009750 <OnchipFlashPageErase>
	for (var = 0; var < Total_page; var++)
 80097ae:	3401      	adds	r4, #1
 80097b0:	e7f6      	b.n	80097a0 <Erase_Firmware+0x8>

080097b2 <OnchipFlashReadData>:
	uint16_t    i=0;
	uint32_t    temp_address;
	uint8_t     *temp_destination;
	temp_address = address;
	temp_destination = destination;
	for (i = 0; i < length_inByte; i++)
 80097b2:	2300      	movs	r3, #0
{
 80097b4:	b510      	push	{r4, lr}
	for (i = 0; i < length_inByte; i++)
 80097b6:	b29c      	uxth	r4, r3
 80097b8:	42a2      	cmp	r2, r4
 80097ba:	d800      	bhi.n	80097be <OnchipFlashReadData+0xc>
	{
		*temp_destination = *(__IO uint8_t*)temp_address;
		temp_destination++;
		temp_address++;
	}
}
 80097bc:	bd10      	pop	{r4, pc}
		*temp_destination = *(__IO uint8_t*)temp_address;
 80097be:	18c4      	adds	r4, r0, r3
 80097c0:	7824      	ldrb	r4, [r4, #0]
 80097c2:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < length_inByte; i++)
 80097c4:	3301      	adds	r3, #1
 80097c6:	e7f6      	b.n	80097b6 <OnchipFlashReadData+0x4>

080097c8 <Save_Array>:

/**
 * @brief	Function luu Serial Modem
 */
uint8_t Save_Array(uint32_t ADD, uint8_t* Buff, uint16_t length)
{
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	0005      	movs	r5, r0
 80097cc:	000e      	movs	r6, r1
    uint16_t i = 0;
    uint8_t aTemp[256] = {0};
 80097ce:	2100      	movs	r1, #0
{
 80097d0:	b0c0      	sub	sp, #256	; 0x100
 80097d2:	0014      	movs	r4, r2
    uint8_t aTemp[256] = {0};
 80097d4:	a801      	add	r0, sp, #4
 80097d6:	22fc      	movs	r2, #252	; 0xfc
 80097d8:	9100      	str	r1, [sp, #0]
 80097da:	f001 f92d 	bl	800aa38 <memset>
    OnchipFlashPageErase(ADD);
 80097de:	0028      	movs	r0, r5
 80097e0:	f7ff ffb6 	bl	8009750 <OnchipFlashPageErase>
    aTemp[0] = BYTE_TEMP_FIRST;
 80097e4:	466a      	mov	r2, sp
 80097e6:	23aa      	movs	r3, #170	; 0xaa
 80097e8:	7013      	strb	r3, [r2, #0]
    aTemp[1] = length;
 80097ea:	466b      	mov	r3, sp
    for(i = 0; i < length; i++)
        aTemp[i+2] = *(Buff + i);
 80097ec:	0031      	movs	r1, r6
    aTemp[1] = length;
 80097ee:	7054      	strb	r4, [r2, #1]
        aTemp[i+2] = *(Buff + i);
 80097f0:	1c98      	adds	r0, r3, #2
 80097f2:	0022      	movs	r2, r4
 80097f4:	f001 f954 	bl	800aaa0 <memcpy>
    length += 2;
    length = length + ( FLASH_BYTE_WRTIE - (length % FLASH_BYTE_WRTIE) );
 80097f8:	2303      	movs	r3, #3
    length += 2;
 80097fa:	1ca2      	adds	r2, r4, #2
    length = length + ( FLASH_BYTE_WRTIE - (length % FLASH_BYTE_WRTIE) );
 80097fc:	439a      	bics	r2, r3
 80097fe:	3204      	adds	r2, #4
    if (OnchipFlashWriteData(ADD, &aTemp[0], length) != HAL_OK)
 8009800:	4669      	mov	r1, sp
 8009802:	0028      	movs	r0, r5
 8009804:	b292      	uxth	r2, r2
 8009806:	f7ff ff7c 	bl	8009702 <OnchipFlashWriteData>
 800980a:	4243      	negs	r3, r0
 800980c:	4158      	adcs	r0, r3
        return 0;
    return 1;
}
 800980e:	b2c0      	uxtb	r0, r0
 8009810:	b040      	add	sp, #256	; 0x100
 8009812:	bd70      	pop	{r4, r5, r6, pc}

08009814 <Save_Array_without_erase>:

uint8_t Save_Array_without_erase (uint32_t ADD, uint8_t* Buff, uint16_t length)
{
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	000e      	movs	r6, r1
    uint16_t i = 0;
    uint8_t aTemp[256] = {0};
 8009818:	2100      	movs	r1, #0
{
 800981a:	b0c0      	sub	sp, #256	; 0x100
 800981c:	0014      	movs	r4, r2
 800981e:	0005      	movs	r5, r0
    uint8_t aTemp[256] = {0};
 8009820:	22fc      	movs	r2, #252	; 0xfc
 8009822:	a801      	add	r0, sp, #4
 8009824:	9100      	str	r1, [sp, #0]
 8009826:	f001 f907 	bl	800aa38 <memset>
    aTemp[0] = BYTE_TEMP_FIRST;
 800982a:	466a      	mov	r2, sp
 800982c:	23aa      	movs	r3, #170	; 0xaa
 800982e:	7013      	strb	r3, [r2, #0]
    aTemp[1] = length;
 8009830:	466b      	mov	r3, sp
    for(i = 0; i < length; i++)
        aTemp[i+2] = *(Buff + i);
 8009832:	0031      	movs	r1, r6
    aTemp[1] = length;
 8009834:	7054      	strb	r4, [r2, #1]
        aTemp[i+2] = *(Buff + i);
 8009836:	1c98      	adds	r0, r3, #2
 8009838:	0022      	movs	r2, r4
 800983a:	f001 f931 	bl	800aaa0 <memcpy>
    length += 2;
    length = length + ( FLASH_BYTE_WRTIE - (length % FLASH_BYTE_WRTIE) );
 800983e:	2303      	movs	r3, #3
    length += 2;
 8009840:	1ca2      	adds	r2, r4, #2
    length = length + ( FLASH_BYTE_WRTIE - (length % FLASH_BYTE_WRTIE) );
 8009842:	439a      	bics	r2, r3
 8009844:	3204      	adds	r2, #4
    if (OnchipFlashWriteData(ADD, &aTemp[0], length) != HAL_OK)
 8009846:	4669      	mov	r1, sp
 8009848:	0028      	movs	r0, r5
 800984a:	b292      	uxth	r2, r2
 800984c:	f7ff ff59 	bl	8009702 <OnchipFlashWriteData>
 8009850:	4243      	negs	r3, r0
 8009852:	4158      	adcs	r0, r3
        return 0;
    return 1;
}
 8009854:	b2c0      	uxtb	r0, r0
 8009856:	b040      	add	sp, #256	; 0x100
 8009858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800985c <PWR_EnterStopMode>:

/**
 * @brief	Ham xu ly lpm trong chip
 */
void PWR_EnterStopMode(void)
{
 800985c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009862:	b672      	cpsid	i
    UTILS_ENTER_CRITICAL_SECTION();
    if (sLPMFeatureHandler->LPM_Deinit_Before_IRQ_Handle!= NULL)
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <PWR_EnterStopMode+0x34>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d000      	beq.n	8009870 <PWR_EnterStopMode+0x14>
        sLPMFeatureHandler->LPM_Deinit_Before_IRQ_Handle();
 800986e:	4798      	blx	r3

	#if defined (STM32L072xx) || defined (STM32L082xx)
		/*clear wake up flag*/
		SET_BIT(PWR->CR, PWR_CR_CWUF);
 8009870:	2304      	movs	r3, #4
 8009872:	4a08      	ldr	r2, [pc, #32]	; (8009894 <PWR_EnterStopMode+0x38>)
 8009874:	6811      	ldr	r1, [r2, #0]
 8009876:	430b      	orrs	r3, r1
 8009878:	6013      	str	r3, [r2, #0]

		HAL_PWREx_EnableUltraLowPower();
 800987a:	f7fa f947 	bl	8003b0c <HAL_PWREx_EnableUltraLowPower>

		HAL_PWREx_EnableFastWakeUp();
 800987e:	f7fa f931 	bl	8003ae4 <HAL_PWREx_EnableFastWakeUp>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009882:	f384 8810 	msr	PRIMASK, r4

		UTILS_EXIT_CRITICAL_SECTION();
		/* Enter Stop Mode */
		HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8009886:	2101      	movs	r1, #1
 8009888:	0008      	movs	r0, r1
 800988a:	f7fa f8ef 	bl	8003a6c <HAL_PWR_EnterSTOPMode>
	#endif
}
 800988e:	bd10      	pop	{r4, pc}
 8009890:	20001590 	.word	0x20001590
 8009894:	40007000 	.word	0x40007000

08009898 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8009898:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800989a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800989e:	b672      	cpsid	i
	/* Disable IRQ while the MCU is not running on HSI */
	UTILS_ENTER_CRITICAL_SECTION();

	#if defined (STM32L072xx) || defined (STM32L082xx)
		HAL_PWREx_DisableUltraLowPower();
 80098a0:	f7fa f93e 	bl	8003b20 <HAL_PWREx_DisableUltraLowPower>
		HAL_PWREx_DisableFastWakeUp();
 80098a4:	f7fa f928 	bl	8003af8 <HAL_PWREx_DisableFastWakeUp>
		{
		}
	#else
		/* After wake-up from STOP reconfigure the system clock */
		/* Enable HSI */
		__HAL_RCC_MSI_ENABLE();
 80098a8:	2280      	movs	r2, #128	; 0x80
 80098aa:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <PWR_ExitStopMode+0x48>)
 80098ac:	0052      	lsls	r2, r2, #1
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	601a      	str	r2, [r3, #0]

		/* Wait till HSI is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80098b4:	2280      	movs	r2, #128	; 0x80
 80098b6:	0092      	lsls	r2, r2, #2
 80098b8:	6819      	ldr	r1, [r3, #0]
 80098ba:	4211      	tst	r1, r2
 80098bc:	d0fc      	beq.n	80098b8 <PWR_ExitStopMode+0x20>
		{
		}

		/* Select PLL as system clock source */
		__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);
 80098be:	2103      	movs	r1, #3
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	438a      	bics	r2, r1
 80098c4:	60da      	str	r2, [r3, #12]

		/* Wait till PLL is used as system clock source */
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80098c6:	220c      	movs	r2, #12
 80098c8:	68d9      	ldr	r1, [r3, #12]
 80098ca:	4211      	tst	r1, r2
 80098cc:	d1fc      	bne.n	80098c8 <PWR_ExitStopMode+0x30>
		{
		}
	#endif

    if (sLPMFeatureHandler->LPM_Init_Before_IRQ_Handle!= NULL)
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <PWR_ExitStopMode+0x4c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d000      	beq.n	80098da <PWR_ExitStopMode+0x42>
    {
        sLPMFeatureHandler->LPM_Init_Before_IRQ_Handle();
 80098d8:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098da:	f384 8810 	msr	PRIMASK, r4
    }
	UTILS_EXIT_CRITICAL_SECTION();
}
 80098de:	bd10      	pop	{r4, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	20001590 	.word	0x20001590

080098e8 <PWR_EnterSleepMode>:
        sLPMFeatureHandler->LPM_Init_Peripheral();
    UTILS_EXIT_CRITICAL_SECTION();
}

void PWR_EnterSleepMode(void)
{
 80098e8:	b510      	push	{r4, lr}
	HAL_SuspendTick();
 80098ea:	f7f9 f925 	bl	8002b38 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80098ee:	2101      	movs	r1, #1
 80098f0:	2000      	movs	r0, #0
 80098f2:	f7fa f883 	bl	80039fc <HAL_PWR_EnterSLEEPMode>
}
 80098f6:	bd10      	pop	{r4, pc}

080098f8 <UTIL_LPM_SetStopMode>:
	StopModeDisable = state;
 80098f8:	4b01      	ldr	r3, [pc, #4]	; (8009900 <UTIL_LPM_SetStopMode+0x8>)
 80098fa:	7118      	strb	r0, [r3, #4]
}
 80098fc:	4770      	bx	lr
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	20001590 	.word	0x20001590

08009904 <UTIL_LPM_EnterLowPower>:
{
 8009904:	b570      	push	{r4, r5, r6, lr}
	if (StopModeDisable != LPM_FALSE)
 8009906:	4c0e      	ldr	r4, [pc, #56]	; (8009940 <UTIL_LPM_EnterLowPower+0x3c>)
 8009908:	7923      	ldrb	r3, [r4, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <UTIL_LPM_EnterLowPower+0x14>
		UTIL_PowerDriver.EnterSleepMode();
 800990e:	f7ff ffeb 	bl	80098e8 <PWR_EnterSleepMode>

void PWR_ExitSleepMode(void)
{
	HAL_ResumeTick();
 8009912:	f7f9 f919 	bl	8002b48 <HAL_ResumeTick>
}
 8009916:	bd70      	pop	{r4, r5, r6, pc}
        if (sLPMFeatureHandler->LPM_Deinit_Peripheral != NULL)
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d000      	beq.n	8009922 <UTIL_LPM_EnterLowPower+0x1e>
            sLPMFeatureHandler->LPM_Deinit_Peripheral();
 8009920:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009922:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009926:	b672      	cpsid	i
		UTIL_PowerDriver.EnterStopMode();
 8009928:	f7ff ff98 	bl	800985c <PWR_EnterStopMode>
		UTIL_PowerDriver.ExitStopMode();
 800992c:	f7ff ffb4 	bl	8009898 <PWR_ExitStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009930:	f385 8810 	msr	PRIMASK, r5
        if (sLPMFeatureHandler->LPM_Init_Peripheral != NULL)
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0ec      	beq.n	8009916 <UTIL_LPM_EnterLowPower+0x12>
            sLPMFeatureHandler->LPM_Init_Peripheral();
 800993c:	4798      	blx	r3
}
 800993e:	e7ea      	b.n	8009916 <UTIL_LPM_EnterLowPower+0x12>
 8009940:	20001590 	.word	0x20001590

08009944 <UTIL_LPM_Dis_Debug_STlink>:
}

void UTIL_LPM_Dis_Debug_STlink (void)
{
 8009944:	b510      	push	{r4, lr}
	HAL_DBGMCU_DisableDBGSleepMode( );
 8009946:	f7f9 f90f 	bl	8002b68 <HAL_DBGMCU_DisableDBGSleepMode>
	HAL_DBGMCU_DisableDBGStopMode( );
 800994a:	f7f9 f91d 	bl	8002b88 <HAL_DBGMCU_DisableDBGStopMode>
	HAL_DBGMCU_DisableDBGStandbyMode( );
 800994e:	f7f9 f92b 	bl	8002ba8 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8009952:	bd10      	pop	{r4, pc}

08009954 <UTIL_LPM_Init>:
	StopModeDisable = LPM_TRUE;
 8009954:	2201      	movs	r2, #1
{
 8009956:	b510      	push	{r4, lr}
	StopModeDisable = LPM_TRUE;
 8009958:	4b02      	ldr	r3, [pc, #8]	; (8009964 <UTIL_LPM_Init+0x10>)
 800995a:	711a      	strb	r2, [r3, #4]
	UTIL_LPM_Dis_Debug_STlink();
 800995c:	f7ff fff2 	bl	8009944 <UTIL_LPM_Dis_Debug_STlink>
}
 8009960:	bd10      	pop	{r4, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	20001590 	.word	0x20001590

08009968 <RTC_IF_GetTimerContext>:
 */
uint32_t RTC_IF_GetTimerContext(void)
{
	RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
	/*return time context*/
	return (uint32_t) RtcTimerContext.Rtc_Time;
 8009968:	4b01      	ldr	r3, [pc, #4]	; (8009970 <RTC_IF_GetTimerContext+0x8>)
 800996a:	6818      	ldr	r0, [r3, #0]
}
 800996c:	4770      	bx	lr
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	20001598 	.word	0x20001598

08009974 <RTC_IF_GetMinimumTimeout>:
 * @retval minimum value for a timeout in ticks
 */
uint32_t RTC_IF_GetMinimumTimeout(void)
{
	return (MIN_ALARM_DELAY);
}
 8009974:	2003      	movs	r0, #3
 8009976:	4770      	bx	lr

08009978 <RTC_IF_Convert_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8009978:	b510      	push	{r4, lr}
	return (uint32_t) ((((uint64_t) timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800997a:	0e41      	lsrs	r1, r0, #25
 800997c:	227d      	movs	r2, #125	; 0x7d
 800997e:	2300      	movs	r3, #0
 8009980:	01c0      	lsls	r0, r0, #7
 8009982:	f7f6 fd5d 	bl	8000440 <__aeabi_uldivmod>
}
 8009986:	bd10      	pop	{r4, pc}

08009988 <RTC_IF_Convert_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in timer milliseconds
 */
uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8009988:	b510      	push	{r4, lr}
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 800998a:	227d      	movs	r2, #125	; 0x7d
 800998c:	2300      	movs	r3, #0
 800998e:	2100      	movs	r1, #0
 8009990:	f7f6 fd76 	bl	8000480 <__aeabi_lmul>
 8009994:	0649      	lsls	r1, r1, #25
 8009996:	09c0      	lsrs	r0, r0, #7
 8009998:	4308      	orrs	r0, r1
}
 800999a:	bd10      	pop	{r4, pc}

0800999c <RTC_IF_StopTimer>:
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800999c:	4806      	ldr	r0, [pc, #24]	; (80099b8 <RTC_IF_StopTimer+0x1c>)
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <RTC_IF_StopTimer+0x20>)
 80099a0:	6801      	ldr	r1, [r0, #0]
{
 80099a2:	b510      	push	{r4, lr}
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80099a4:	68ca      	ldr	r2, [r1, #12]
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60cb      	str	r3, [r1, #12]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80099ac:	2180      	movs	r1, #128	; 0x80
 80099ae:	0049      	lsls	r1, r1, #1
 80099b0:	f7fa fd5c 	bl	800446c <HAL_RTC_DeactivateAlarm>
}
 80099b4:	2000      	movs	r0, #0
 80099b6:	bd10      	pop	{r4, pc}
 80099b8:	200002fc 	.word	0x200002fc
 80099bc:	fffffe7f 	.word	0xfffffe7f

080099c0 <RTC_IF_StartTimer>:
{
 80099c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c2:	0006      	movs	r6, r0
	uint16_t rtcAlarmSubSeconds = 0;
	uint16_t rtcAlarmSeconds = 0;
	uint16_t rtcAlarmMinutes = 0;
	uint16_t rtcAlarmHours = 0;
	uint16_t rtcAlarmDays = 0;
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80099c4:	4c41      	ldr	r4, [pc, #260]	; (8009acc <RTC_IF_StartTimer+0x10c>)
{
 80099c6:	b087      	sub	sp, #28
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80099c8:	7923      	ldrb	r3, [r4, #4]
 80099ca:	68a7      	ldr	r7, [r4, #8]
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	7963      	ldrb	r3, [r4, #5]
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	79a3      	ldrb	r3, [r4, #6]
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	79e3      	ldrb	r3, [r4, #7]
 80099d8:	9303      	str	r3, [sp, #12]
	RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80099da:	7e63      	ldrb	r3, [r4, #25]
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	7ee3      	ldrb	r3, [r4, #27]
 80099e0:	7ea5      	ldrb	r5, [r4, #26]
 80099e2:	9305      	str	r3, [sp, #20]
	RTC_IF_StopTimer();
 80099e4:	f7ff ffda 	bl	800999c <RTC_IF_StopTimer>
	/*reverse counter */
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80099e8:	4b39      	ldr	r3, [pc, #228]	; (8009ad0 <RTC_IF_StartTimer+0x110>)
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
	/* convert timeout  to seconds */
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
	/*convert microsecs to RTC format and add to 'Now' */
	rtcAlarmDays = RTC_DateStruct.Date;
	while (timeoutValue >= SECONDS_IN_1DAY )
 80099ea:	493a      	ldr	r1, [pc, #232]	; (8009ad4 <RTC_IF_StartTimer+0x114>)
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80099ec:	1bdf      	subs	r7, r3, r7
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80099ee:	05b3      	lsls	r3, r6, #22
 80099f0:	0d9b      	lsrs	r3, r3, #22
 80099f2:	18ff      	adds	r7, r7, r3
 80099f4:	b2ba      	uxth	r2, r7
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
 80099f6:	0ab3      	lsrs	r3, r6, #10
	rtcAlarmDays = RTC_DateStruct.Date;
 80099f8:	b2a8      	uxth	r0, r5
	while (timeoutValue >= SECONDS_IN_1DAY )
 80099fa:	428b      	cmp	r3, r1
 80099fc:	d846      	bhi.n	8009a8c <RTC_IF_StartTimer+0xcc>
	{
		timeoutValue -= SECONDS_IN_1DAY;
		rtcAlarmDays++;
	}
	/* calc hours */
	rtcAlarmHours = RTC_TimeStruct.Hours;
 80099fe:	4669      	mov	r1, sp
 8009a00:	880e      	ldrh	r6, [r1, #0]
	while (timeoutValue >= SECONDS_IN_1HOUR )
 8009a02:	21e1      	movs	r1, #225	; 0xe1
 8009a04:	0109      	lsls	r1, r1, #4
 8009a06:	428b      	cmp	r3, r1
 8009a08:	d245      	bcs.n	8009a96 <RTC_IF_StartTimer+0xd6>
	{
		timeoutValue -= SECONDS_IN_1HOUR;
		rtcAlarmHours++;
	}
	/* calc minutes */
	rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8009a0a:	4669      	mov	r1, sp
 8009a0c:	888f      	ldrh	r7, [r1, #4]
	while (timeoutValue >= SECONDS_IN_1MINUTE )
 8009a0e:	2b3b      	cmp	r3, #59	; 0x3b
 8009a10:	d846      	bhi.n	8009aa0 <RTC_IF_StartTimer+0xe0>
		rtcAlarmMinutes++;
	}
	/* calc seconds */
	rtcAlarmSeconds = RTC_TimeStruct.Seconds + timeoutValue;
	/***** correct for modulo********/
	while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8009a12:	0a95      	lsrs	r5, r2, #10
 8009a14:	02a9      	lsls	r1, r5, #10
 8009a16:	1a52      	subs	r2, r2, r1
 8009a18:	b292      	uxth	r2, r2
 8009a1a:	9200      	str	r2, [sp, #0]
 8009a1c:	9a02      	ldr	r2, [sp, #8]
 8009a1e:	18ad      	adds	r5, r5, r2
 8009a20:	18ed      	adds	r5, r5, r3
 8009a22:	b2ad      	uxth	r5, r5
	{
		rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
		rtcAlarmSeconds++;
	}
	while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 8009a24:	2d3b      	cmp	r5, #59	; 0x3b
 8009a26:	d83f      	bhi.n	8009aa8 <RTC_IF_StartTimer+0xe8>
	{
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
		rtcAlarmMinutes++;
	}
	while (rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 8009a28:	2f3b      	cmp	r7, #59	; 0x3b
 8009a2a:	d842      	bhi.n	8009ab2 <RTC_IF_StartTimer+0xf2>
	{
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
		rtcAlarmHours++;
	}
	while (rtcAlarmHours >= HOURS_IN_1DAY )
 8009a2c:	2e17      	cmp	r6, #23
 8009a2e:	d845      	bhi.n	8009abc <RTC_IF_StartTimer+0xfc>
		rtcAlarmHours -= HOURS_IN_1DAY;
		rtcAlarmDays++;
	}
	if (RTC_DateStruct.Year % 4 == 0)
	{
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8009a30:	9a04      	ldr	r2, [sp, #16]
	if (RTC_DateStruct.Year % 4 == 0)
 8009a32:	9905      	ldr	r1, [sp, #20]
 8009a34:	4b28      	ldr	r3, [pc, #160]	; (8009ad8 <RTC_IF_StartTimer+0x118>)
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8009a36:	3a01      	subs	r2, #1
	if (RTC_DateStruct.Year % 4 == 0)
 8009a38:	0789      	lsls	r1, r1, #30
 8009a3a:	d144      	bne.n	8009ac6 <RTC_IF_StartTimer+0x106>
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8009a3c:	5c99      	ldrb	r1, [r3, r2]
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[RTC_DateStruct.Month - 1];
		}
	} else
	{
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 8009a3e:	4288      	cmp	r0, r1
 8009a40:	d902      	bls.n	8009a48 <RTC_IF_StartTimer+0x88>
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonth[RTC_DateStruct.Month - 1];
 8009a42:	f7f6 fcf7 	bl	8000434 <__aeabi_idivmod>
 8009a46:	b288      	uxth	r0, r1
		}
	}
	/* Set RTC_AlarmStructure with calculated values*/
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8009a48:	9a00      	ldr	r2, [sp, #0]
 8009a4a:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <RTC_IF_StartTimer+0x110>)
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
	RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8009a4c:	77a5      	strb	r5, [r4, #30]
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	6223      	str	r3, [r4, #32]
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
 8009a52:	23a0      	movs	r3, #160	; 0xa0
 8009a54:	051b      	lsls	r3, r3, #20
 8009a56:	6363      	str	r3, [r4, #52]	; 0x34
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8009a58:	0023      	movs	r3, r4
 8009a5a:	333c      	adds	r3, #60	; 0x3c
 8009a5c:	7018      	strb	r0, [r3, #0]
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 8009a5e:	9b03      	ldr	r3, [sp, #12]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009a60:	2500      	movs	r5, #0
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 8009a62:	77e3      	strb	r3, [r4, #31]
	RTC_AlarmStructure.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;   // RTC_ALARMMASK_DATEWEEKDAY  ; Old: RTC_ALARMMASK_NONE
 8009a64:	2380      	movs	r3, #128	; 0x80
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	6323      	str	r3, [r4, #48]	; 0x30
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8009a6a:	0021      	movs	r1, r4
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009a6c:	2380      	movs	r3, #128	; 0x80
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	/* Set RTC_Alarm */
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8009a6e:	002a      	movs	r2, r5
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009a70:	005b      	lsls	r3, r3, #1
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8009a72:	311c      	adds	r1, #28
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8009a74:	4819      	ldr	r0, [pc, #100]	; (8009adc <RTC_IF_StartTimer+0x11c>)
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8009a76:	7767      	strb	r7, [r4, #29]
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
 8009a78:	7726      	strb	r6, [r4, #28]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009a7a:	63a5      	str	r5, [r4, #56]	; 0x38
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009a7c:	6423      	str	r3, [r4, #64]	; 0x40
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a7e:	62a5      	str	r5, [r4, #40]	; 0x28
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a80:	62e5      	str	r5, [r4, #44]	; 0x2c
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8009a82:	f7fa ff15 	bl	80048b0 <HAL_RTC_SetAlarm_IT>
}
 8009a86:	0028      	movs	r0, r5
 8009a88:	b007      	add	sp, #28
 8009a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		timeoutValue -= SECONDS_IN_1DAY;
 8009a8c:	4d14      	ldr	r5, [pc, #80]	; (8009ae0 <RTC_IF_StartTimer+0x120>)
		rtcAlarmDays++;
 8009a8e:	3001      	adds	r0, #1
		timeoutValue -= SECONDS_IN_1DAY;
 8009a90:	195b      	adds	r3, r3, r5
		rtcAlarmDays++;
 8009a92:	b280      	uxth	r0, r0
 8009a94:	e7b1      	b.n	80099fa <RTC_IF_StartTimer+0x3a>
		timeoutValue -= SECONDS_IN_1HOUR;
 8009a96:	4d13      	ldr	r5, [pc, #76]	; (8009ae4 <RTC_IF_StartTimer+0x124>)
		rtcAlarmHours++;
 8009a98:	3601      	adds	r6, #1
		timeoutValue -= SECONDS_IN_1HOUR;
 8009a9a:	195b      	adds	r3, r3, r5
		rtcAlarmHours++;
 8009a9c:	b2b6      	uxth	r6, r6
 8009a9e:	e7b2      	b.n	8009a06 <RTC_IF_StartTimer+0x46>
		rtcAlarmMinutes++;
 8009aa0:	3701      	adds	r7, #1
		timeoutValue -= SECONDS_IN_1MINUTE;
 8009aa2:	3b3c      	subs	r3, #60	; 0x3c
		rtcAlarmMinutes++;
 8009aa4:	b2bf      	uxth	r7, r7
 8009aa6:	e7b2      	b.n	8009a0e <RTC_IF_StartTimer+0x4e>
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8009aa8:	3d3c      	subs	r5, #60	; 0x3c
		rtcAlarmMinutes++;
 8009aaa:	3701      	adds	r7, #1
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8009aac:	b2ad      	uxth	r5, r5
		rtcAlarmMinutes++;
 8009aae:	b2bf      	uxth	r7, r7
 8009ab0:	e7b8      	b.n	8009a24 <RTC_IF_StartTimer+0x64>
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8009ab2:	3f3c      	subs	r7, #60	; 0x3c
		rtcAlarmHours++;
 8009ab4:	3601      	adds	r6, #1
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8009ab6:	b2bf      	uxth	r7, r7
		rtcAlarmHours++;
 8009ab8:	b2b6      	uxth	r6, r6
 8009aba:	e7b5      	b.n	8009a28 <RTC_IF_StartTimer+0x68>
		rtcAlarmHours -= HOURS_IN_1DAY;
 8009abc:	3e18      	subs	r6, #24
		rtcAlarmDays++;
 8009abe:	3001      	adds	r0, #1
		rtcAlarmHours -= HOURS_IN_1DAY;
 8009ac0:	b2b6      	uxth	r6, r6
		rtcAlarmDays++;
 8009ac2:	b280      	uxth	r0, r0
 8009ac4:	e7b2      	b.n	8009a2c <RTC_IF_StartTimer+0x6c>
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 8009ac6:	189b      	adds	r3, r3, r2
 8009ac8:	7b19      	ldrb	r1, [r3, #12]
 8009aca:	e7b8      	b.n	8009a3e <RTC_IF_StartTimer+0x7e>
 8009acc:	20001598 	.word	0x20001598
 8009ad0:	000003ff 	.word	0x000003ff
 8009ad4:	0001517f 	.word	0x0001517f
 8009ad8:	0800b6bc 	.word	0x0800b6bc
 8009adc:	200002fc 	.word	0x200002fc
 8009ae0:	fffeae80 	.word	0xfffeae80
 8009ae4:	fffff1f0 	.word	0xfffff1f0

08009ae8 <RTC_GetCalendarValue>:
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct,
		RTC_TimeTypeDef *RTC_TimeStruct)
{
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	000c      	movs	r4, r1
	uint32_t calendarValue = 0;
	uint32_t correction;
	/* Get Time and Date*/
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8009aec:	4e1e      	ldr	r6, [pc, #120]	; (8009b68 <RTC_GetCalendarValue+0x80>)
{
 8009aee:	0005      	movs	r5, r0
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8009af0:	0001      	movs	r1, r0
 8009af2:	2200      	movs	r2, #0
 8009af4:	0030      	movs	r0, r6
 8009af6:	f7fa ffe7 	bl	8004ac8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8009afa:	0021      	movs	r1, r4
 8009afc:	2200      	movs	r2, #0
 8009afe:	0030      	movs	r0, r6
 8009b00:	f7fa ffb8 	bl	8004a74 <HAL_RTC_GetTime>
	/* calculte amount of elapsed days since 01/01/2000 */
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

	correction = ((RTC_DateStruct->Year % 4) == 0) ?
 8009b04:	2103      	movs	r1, #3
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8009b06:	78ea      	ldrb	r2, [r5, #3]
 8009b08:	4818      	ldr	r0, [pc, #96]	; (8009b6c <RTC_GetCalendarValue+0x84>)
					DAYS_IN_MONTH_CORRECTION_LEAP :
					DAYS_IN_MONTH_CORRECTION_NORM;

	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8009b0a:	786e      	ldrb	r6, [r5, #1]
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8009b0c:	4350      	muls	r0, r2
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8009b0e:	400a      	ands	r2, r1
 8009b10:	4253      	negs	r3, r2
 8009b12:	415a      	adcs	r2, r3
 8009b14:	4253      	negs	r3, r2
 8009b16:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <RTC_GetCalendarValue+0x88>)
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8009b18:	3e01      	subs	r6, #1
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <RTC_GetCalendarValue+0x8c>)
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

	calendarValue += (RTC_DateStruct->Date - 1);
 8009b1e:	78ad      	ldrb	r5, [r5, #2]
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8009b20:	189b      	adds	r3, r3, r2
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8009b22:	223d      	movs	r2, #61	; 0x3d
 8009b24:	4372      	muls	r2, r6
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8009b26:	0076      	lsls	r6, r6, #1
 8009b28:	40f3      	lsrs	r3, r6
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	0fd7      	lsrs	r7, r2, #31
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8009b2e:	3003      	adds	r0, #3
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8009b30:	18ba      	adds	r2, r7, r2
 8009b32:	3d01      	subs	r5, #1
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8009b34:	0880      	lsrs	r0, r0, #2
	calendarValue += (RTC_DateStruct->Date - 1);
 8009b36:	1828      	adds	r0, r5, r0
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8009b38:	1052      	asrs	r2, r2, #1
 8009b3a:	1812      	adds	r2, r2, r0
	/* convert from days to seconds */
	calendarValue *= SECONDS_IN_1DAY;

	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8009b3c:	20e1      	movs	r0, #225	; 0xe1
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8009b3e:	400b      	ands	r3, r1
	calendarValue += (RTC_DateStruct->Date - 1);
 8009b40:	1ad3      	subs	r3, r2, r3
	calendarValue *= SECONDS_IN_1DAY;
 8009b42:	4a0d      	ldr	r2, [pc, #52]	; (8009b78 <RTC_GetCalendarValue+0x90>)
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8009b44:	0100      	lsls	r0, r0, #4
	calendarValue *= SECONDS_IN_1DAY;
 8009b46:	4353      	muls	r3, r2
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8009b48:	7822      	ldrb	r2, [r4, #0]
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 8009b4a:	7861      	ldrb	r1, [r4, #1]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8009b4c:	4350      	muls	r0, r2
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 8009b4e:	223c      	movs	r2, #60	; 0x3c
 8009b50:	434a      	muls	r2, r1
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8009b52:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 8009b54:	78a2      	ldrb	r2, [r4, #2]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8009b56:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 8009b58:	18c0      	adds	r0, r0, r3
	calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	0280      	lsls	r0, r0, #10
 8009b5e:	1ac0      	subs	r0, r0, r3
 8009b60:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <RTC_GetCalendarValue+0x94>)
 8009b62:	18c0      	adds	r0, r0, r3
	return (calendarValue);
}
 8009b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	200002fc 	.word	0x200002fc
 8009b6c:	000005b5 	.word	0x000005b5
 8009b70:	ffaaaab0 	.word	0xffaaaab0
 8009b74:	0099aaa0 	.word	0x0099aaa0
 8009b78:	00015180 	.word	0x00015180
 8009b7c:	000003ff 	.word	0x000003ff

08009b80 <RTC_IF_SetTimerContext>:
{
 8009b80:	b510      	push	{r4, lr}
	RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date,
 8009b82:	4c04      	ldr	r4, [pc, #16]	; (8009b94 <RTC_IF_SetTimerContext+0x14>)
 8009b84:	0020      	movs	r0, r4
 8009b86:	1d21      	adds	r1, r4, #4
 8009b88:	3018      	adds	r0, #24
 8009b8a:	f7ff ffad 	bl	8009ae8 <RTC_GetCalendarValue>
 8009b8e:	6020      	str	r0, [r4, #0]
}
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	46c0      	nop			; (mov r8, r8)
 8009b94:	20001598 	.word	0x20001598

08009b98 <RTC_IF_GetTimerElapsedTime>:
{
 8009b98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8009b9a:	4668      	mov	r0, sp
 8009b9c:	a901      	add	r1, sp, #4
 8009b9e:	f7ff ffa3 	bl	8009ae8 <RTC_GetCalendarValue>
	return ((uint32_t) (CalendarValue - RtcTimerContext.Rtc_Time));
 8009ba2:	4b02      	ldr	r3, [pc, #8]	; (8009bac <RTC_IF_GetTimerElapsedTime+0x14>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	1ac0      	subs	r0, r0, r3
}
 8009ba8:	b007      	add	sp, #28
 8009baa:	bd00      	pop	{pc}
 8009bac:	20001598 	.word	0x20001598

08009bb0 <RTC_IF_GetTime>:
{
 8009bb0:	b530      	push	{r4, r5, lr}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	0005      	movs	r5, r0
	uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8009bb6:	a901      	add	r1, sp, #4
 8009bb8:	4668      	mov	r0, sp
 8009bba:	f7ff ff95 	bl	8009ae8 <RTC_GetCalendarValue>
 8009bbe:	0004      	movs	r4, r0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8009bc0:	0580      	lsls	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8009bc2:	227d      	movs	r2, #125	; 0x7d
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2100      	movs	r1, #0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8009bc8:	0d80      	lsrs	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8009bca:	f7f6 fc59 	bl	8000480 <__aeabi_lmul>
 8009bce:	09c0      	lsrs	r0, r0, #7
	*mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8009bd0:	8028      	strh	r0, [r5, #0]
	uint32_t seconds = (uint32_t) (calendarValue >> RTC_N_PREDIV_S);
 8009bd2:	0aa0      	lsrs	r0, r4, #10
}
 8009bd4:	b007      	add	sp, #28
 8009bd6:	bd30      	pop	{r4, r5, pc}

08009bd8 <RTC_IF_BkUp_Write_Seconds>:
{
 8009bd8:	b510      	push	{r4, lr}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8009bdc:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8009bde:	2100      	movs	r1, #0
 8009be0:	0018      	movs	r0, r3
 8009be2:	f7fa ff93 	bl	8004b0c <HAL_RTCEx_BKUPWrite>
}
 8009be6:	bd10      	pop	{r4, pc}
 8009be8:	200002fc 	.word	0x200002fc

08009bec <RTC_IF_BkUp_Write_SubSeconds>:
{
 8009bec:	b510      	push	{r4, lr}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8009bee:	4b03      	ldr	r3, [pc, #12]	; (8009bfc <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 8009bf0:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	f7fa ff89 	bl	8004b0c <HAL_RTCEx_BKUPWrite>
}
 8009bfa:	bd10      	pop	{r4, pc}
 8009bfc:	200002fc 	.word	0x200002fc

08009c00 <RTC_IF_BkUp_Read_Seconds>:
{
 8009c00:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8009c02:	2100      	movs	r1, #0
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <RTC_IF_BkUp_Read_Seconds+0xc>)
 8009c06:	f7fa ff87 	bl	8004b18 <HAL_RTCEx_BKUPRead>
}
 8009c0a:	bd10      	pop	{r4, pc}
 8009c0c:	200002fc 	.word	0x200002fc

08009c10 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8009c10:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8009c12:	2101      	movs	r1, #1
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8009c16:	f7fa ff7f 	bl	8004b18 <HAL_RTCEx_BKUPRead>
}
 8009c1a:	bd10      	pop	{r4, pc}
 8009c1c:	200002fc 	.word	0x200002fc

08009c20 <RTC_IF_Init>:
{
 8009c20:	b570      	push	{r4, r5, r6, lr}
	if (RTC_Initalized == false)
 8009c22:	4e25      	ldr	r6, [pc, #148]	; (8009cb8 <RTC_IF_Init+0x98>)
{
 8009c24:	b08a      	sub	sp, #40	; 0x28
	if (RTC_Initalized == false)
 8009c26:	0033      	movs	r3, r6
 8009c28:	3344      	adds	r3, #68	; 0x44
 8009c2a:	781d      	ldrb	r5, [r3, #0]
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	d13f      	bne.n	8009cb0 <RTC_IF_Init+0x90>
	RTC_AlarmTypeDef sAlarm = { 0 };
 8009c30:	2228      	movs	r2, #40	; 0x28
 8009c32:	0029      	movs	r1, r5
 8009c34:	4668      	mov	r0, sp
 8009c36:	f000 feff 	bl	800aa38 <memset>
	hrtc.Instance = RTC;
 8009c3a:	4c20      	ldr	r4, [pc, #128]	; (8009cbc <RTC_IF_Init+0x9c>)
 8009c3c:	4b20      	ldr	r3, [pc, #128]	; (8009cc0 <RTC_IF_Init+0xa0>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009c3e:	0020      	movs	r0, r4
	hrtc.Instance = RTC;
 8009c40:	6023      	str	r3, [r4, #0]
	hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8009c42:	231f      	movs	r3, #31
 8009c44:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8009c46:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <RTC_IF_Init+0xa4>)
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009c48:	6065      	str	r5, [r4, #4]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8009c4a:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009c4c:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009c4e:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009c50:	61a5      	str	r5, [r4, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009c52:	61e5      	str	r5, [r4, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009c54:	f7fa fcd2 	bl	80045fc <HAL_RTC_Init>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d001      	beq.n	8009c60 <RTC_IF_Init+0x40>
		Error_Handler();
 8009c5c:	f7f8 f9e2 	bl	8002024 <Error_Handler>
	sAlarm.AlarmTime.Hours = 0;
 8009c60:	2200      	movs	r2, #0
 8009c62:	466b      	mov	r3, sp
 8009c64:	801a      	strh	r2, [r3, #0]
	sAlarm.AlarmTime.Seconds = 0;
 8009c66:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8009c68:	2380      	movs	r3, #128	; 0x80
 8009c6a:	061b      	lsls	r3, r3, #24
 8009c6c:	9305      	str	r3, [sp, #20]
	sAlarm.AlarmDateWeekDay = 1;
 8009c6e:	466b      	mov	r3, sp
 8009c70:	2101      	movs	r1, #1
 8009c72:	3301      	adds	r3, #1
 8009c74:	77d9      	strb	r1, [r3, #31]
	sAlarm.Alarm = RTC_ALARM_A;
 8009c76:	2380      	movs	r3, #128	; 0x80
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009c78:	4669      	mov	r1, sp
	sAlarm.Alarm = RTC_ALARM_A;
 8009c7a:	005b      	lsls	r3, r3, #1
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009c7c:	0020      	movs	r0, r4
	sAlarm.AlarmTime.SubSeconds = 0;
 8009c7e:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009c80:	9203      	str	r2, [sp, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009c82:	9204      	str	r2, [sp, #16]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009c84:	9206      	str	r2, [sp, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009c86:	9207      	str	r2, [sp, #28]
	sAlarm.Alarm = RTC_ALARM_A;
 8009c88:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009c8a:	f7fa fe11 	bl	80048b0 <HAL_RTC_SetAlarm_IT>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d001      	beq.n	8009c96 <RTC_IF_Init+0x76>
		Error_Handler();
 8009c92:	f7f8 f9c7 	bl	8002024 <Error_Handler>
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8009c96:	2180      	movs	r1, #128	; 0x80
 8009c98:	0020      	movs	r0, r4
 8009c9a:	0049      	lsls	r1, r1, #1
 8009c9c:	f7fa fbe6 	bl	800446c <HAL_RTC_DeactivateAlarm>
		HAL_RTCEx_EnableBypassShadow(&hrtc);
 8009ca0:	0020      	movs	r0, r4
 8009ca2:	f7fa ff3f 	bl	8004b24 <HAL_RTCEx_EnableBypassShadow>
		RTC_IF_SetTimerContext();
 8009ca6:	f7ff ff6b 	bl	8009b80 <RTC_IF_SetTimerContext>
		RTC_Initalized = true;
 8009caa:	2301      	movs	r3, #1
 8009cac:	3644      	adds	r6, #68	; 0x44
 8009cae:	7033      	strb	r3, [r6, #0]
}
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	b00a      	add	sp, #40	; 0x28
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	20001598 	.word	0x20001598
 8009cbc:	200002fc 	.word	0x200002fc
 8009cc0:	40002800 	.word	0x40002800
 8009cc4:	000003ff 	.word	0x000003ff

08009cc8 <RTC_IF_GetTimerValue>:
{
 8009cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = 0;
 8009cca:	2000      	movs	r0, #0
	if (RTC_Initalized == true)
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <RTC_IF_GetTimerValue+0x1c>)
 8009cce:	3344      	adds	r3, #68	; 0x44
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4283      	cmp	r3, r0
 8009cd4:	d003      	beq.n	8009cde <RTC_IF_GetTimerValue+0x16>
		CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8009cd6:	4668      	mov	r0, sp
 8009cd8:	a901      	add	r1, sp, #4
 8009cda:	f7ff ff05 	bl	8009ae8 <RTC_GetCalendarValue>
}
 8009cde:	b007      	add	sp, #28
 8009ce0:	bd00      	pop	{pc}
 8009ce2:	46c0      	nop			; (mov r8, r8)
 8009ce4:	20001598 	.word	0x20001598

08009ce8 <HAL_RTC_AlarmAEventCallback>:
{
 8009ce8:	b510      	push	{r4, lr}
    pModemProcessIRQTimer();
 8009cea:	4b02      	ldr	r3, [pc, #8]	; (8009cf4 <HAL_RTC_AlarmAEventCallback+0xc>)
 8009cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cee:	4798      	blx	r3
}
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	20001598 	.word	0x20001598

08009cf8 <Find_str_fix>:
/**
 * @retval	-1: Neu khong tim thay chuoi
 * 			1 : Neu chuoi dung
 */
int16_t Find_str_fix (int16_t pos_fix, sData *sTemp_Receiv, sData *sResponding, int16_t Pos_Res, int16_t *Pos_sharp)
{
 8009cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cfa:	001d      	movs	r5, r3
 8009cfc:	9001      	str	r0, [sp, #4]
	 int16_t    Result,count;
	 Result = 1,count = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2001      	movs	r0, #1
	 while ((pos_fix + count) < sTemp_Receiv->Length_u16)
 8009d02:	9c01      	ldr	r4, [sp, #4]
 8009d04:	888f      	ldrh	r7, [r1, #4]
 8009d06:	18e4      	adds	r4, r4, r3
 8009d08:	42bc      	cmp	r4, r7
 8009d0a:	da08      	bge.n	8009d1e <Find_str_fix+0x26>
     {
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) == '|')
 8009d0c:	680f      	ldr	r7, [r1, #0]
 8009d0e:	46bc      	mov	ip, r7
 8009d10:	4666      	mov	r6, ip
 8009d12:	5d36      	ldrb	r6, [r6, r4]
 8009d14:	193f      	adds	r7, r7, r4
 8009d16:	2e7c      	cmp	r6, #124	; 0x7c
 8009d18:	d102      	bne.n	8009d20 <Find_str_fix+0x28>
          {
			   *Pos_sharp = pos_fix + count;
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	801c      	strh	r4, [r3, #0]
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
              Result = -1;
		  count++;
	 }
	 return Result;
}
 8009d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		  if ((Pos_Res + count) > sResponding->Length_u16)  // Vuot qua xau dich
 8009d20:	8894      	ldrh	r4, [r2, #4]
 8009d22:	18ee      	adds	r6, r5, r3
 8009d24:	42a6      	cmp	r6, r4
 8009d26:	dd04      	ble.n	8009d32 <Find_str_fix+0x3a>
			   *Pos_sharp = sResponding->Length_u16 + 1;
 8009d28:	9808      	ldr	r0, [sp, #32]
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	8004      	strh	r4, [r0, #0]
			   Result = -1;
 8009d2e:	2001      	movs	r0, #1
 8009d30:	4240      	negs	r0, r0
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
 8009d32:	6814      	ldr	r4, [r2, #0]
 8009d34:	783f      	ldrb	r7, [r7, #0]
 8009d36:	18e4      	adds	r4, r4, r3
 8009d38:	5d64      	ldrb	r4, [r4, r5]
 8009d3a:	42a7      	cmp	r7, r4
 8009d3c:	d001      	beq.n	8009d42 <Find_str_fix+0x4a>
              Result = -1;
 8009d3e:	2001      	movs	r0, #1
 8009d40:	4240      	negs	r0, r0
		  count++;
 8009d42:	3301      	adds	r3, #1
 8009d44:	b21b      	sxth	r3, r3
 8009d46:	e7dc      	b.n	8009d02 <Find_str_fix+0xa>

08009d48 <Find_String_V2>:
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8009d48:	230e      	movs	r3, #14
 8009d4a:	2200      	movs	r2, #0
{
 8009d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d4e:	b08d      	sub	sp, #52	; 0x34
 8009d50:	000e      	movs	r6, r1
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8009d52:	a908      	add	r1, sp, #32
 8009d54:	185b      	adds	r3, r3, r1
 8009d56:	801a      	strh	r2, [r3, #0]
	if (*(sTemp_Receiv->Data_a8) == '!')
 8009d58:	6803      	ldr	r3, [r0, #0]
{
 8009d5a:	0007      	movs	r7, r0
	if (*(sTemp_Receiv->Data_a8) == '!')
 8009d5c:	9303      	str	r3, [sp, #12]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8009d60:	0014      	movs	r4, r2
	if (*(sTemp_Receiv->Data_a8) == '!')
 8009d62:	9304      	str	r3, [sp, #16]
 8009d64:	3b21      	subs	r3, #33	; 0x21
 8009d66:	4259      	negs	r1, r3
 8009d68:	414b      	adcs	r3, r1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	9305      	str	r3, [sp, #20]
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8009d6e:	9206      	str	r2, [sp, #24]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8009d70:	88b3      	ldrh	r3, [r6, #4]
 8009d72:	429c      	cmp	r4, r3
 8009d74:	db02      	blt.n	8009d7c <Find_String_V2+0x34>
	if (Off_Set == 0)
 8009d76:	9c05      	ldr	r4, [sp, #20]
 8009d78:	3c01      	subs	r4, #1
 8009d7a:	e044      	b.n	8009e06 <Find_String_V2+0xbe>
		if (*(sTemp_Receiv->Data_a8 + Off_Set) == *(sResponding->Data_a8 +i))  // tim dc ky tu dau giong
 8009d7c:	6833      	ldr	r3, [r6, #0]
 8009d7e:	9a05      	ldr	r2, [sp, #20]
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	5c9a      	ldrb	r2, [r3, r2]
 8009d86:	9b07      	ldr	r3, [sp, #28]
 8009d88:	5d1b      	ldrb	r3, [r3, r4]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d152      	bne.n	8009e34 <Find_String_V2+0xec>
			j = 1 + Off_Set;
 8009d8e:	9b05      	ldr	r3, [sp, #20]
			Pos_Sharp = 0;
 8009d90:	220e      	movs	r2, #14
			j = 1 + Off_Set;
 8009d92:	1c5d      	adds	r5, r3, #1
			Pos_Sharp = 0;
 8009d94:	2300      	movs	r3, #0
			Check = 1;
 8009d96:	2001      	movs	r0, #1
			Pos_Sharp = 0;
 8009d98:	a908      	add	r1, sp, #32
 8009d9a:	1852      	adds	r2, r2, r1
 8009d9c:	8013      	strh	r3, [r2, #0]
			Check_sharp = 0;
 8009d9e:	9309      	str	r3, [sp, #36]	; 0x24
			while (j < sTemp_Receiv->Length_u16)
 8009da0:	88bb      	ldrh	r3, [r7, #4]
 8009da2:	429d      	cmp	r5, r3
 8009da4:	db0a      	blt.n	8009dbc <Find_String_V2+0x74>
			if (Check == 1)
 8009da6:	2801      	cmp	r0, #1
 8009da8:	d144      	bne.n	8009e34 <Find_String_V2+0xec>
	if (Off_Set == 0)
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	2b21      	cmp	r3, #33	; 0x21
 8009dae:	d102      	bne.n	8009db6 <Find_String_V2+0x6e>
	if (Result >= 0)
 8009db0:	43e4      	mvns	r4, r4
 8009db2:	0424      	lsls	r4, r4, #16
 8009db4:	17e4      	asrs	r4, r4, #31
}
 8009db6:	0020      	movs	r0, r4
 8009db8:	b00d      	add	sp, #52	; 0x34
 8009dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (*(sTemp_Receiv->Data_a8+j) == '|')
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	5d5b      	ldrb	r3, [r3, r5]
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	2b7c      	cmp	r3, #124	; 0x7c
 8009dc4:	d121      	bne.n	8009e0a <Find_String_V2+0xc2>
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8009dc6:	aa08      	add	r2, sp, #32
 8009dc8:	3b6e      	subs	r3, #110	; 0x6e
 8009dca:	189b      	adds	r3, r3, r2
 8009dcc:	2200      	movs	r2, #0
 8009dce:	5e9b      	ldrsh	r3, [r3, r2]
						Pos_Sharp_first = i + j;
 8009dd0:	b2a8      	uxth	r0, r5
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d104      	bne.n	8009de0 <Find_String_V2+0x98>
						Pos_Sharp_first = i + j;
 8009dd6:	1903      	adds	r3, r0, r4
 8009dd8:	b21b      	sxth	r3, r3
 8009dda:	9306      	str	r3, [sp, #24]
						Check_sharp = 1;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	9309      	str	r3, [sp, #36]	; 0x24
					Check = Find_str_fix (j + 1 ,sTemp_Receiv,sResponding, Pos_Sharp_first, &Pos_Sharp);
 8009de0:	230e      	movs	r3, #14
 8009de2:	aa08      	add	r2, sp, #32
 8009de4:	189b      	adds	r3, r3, r2
 8009de6:	3001      	adds	r0, #1
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	0032      	movs	r2, r6
 8009dec:	0039      	movs	r1, r7
 8009dee:	9b06      	ldr	r3, [sp, #24]
 8009df0:	b200      	sxth	r0, r0
 8009df2:	f7ff ff81 	bl	8009cf8 <Find_str_fix>
 8009df6:	b2c0      	uxtb	r0, r0
					if (Check == 1)
 8009df8:	2801      	cmp	r0, #1
 8009dfa:	d106      	bne.n	8009e0a <Find_String_V2+0xc2>
	if (Off_Set == 0)
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	2b21      	cmp	r3, #33	; 0x21
 8009e00:	d1d9      	bne.n	8009db6 <Find_String_V2+0x6e>
	if (Result >= 0)
 8009e02:	43e4      	mvns	r4, r4
 8009e04:	17e4      	asrs	r4, r4, #31
	if (Off_Set == 0)
 8009e06:	b224      	sxth	r4, r4
 8009e08:	e7d5      	b.n	8009db6 <Find_String_V2+0x6e>
				if ((Check_sharp == 0) && (*(sTemp_Receiv->Data_a8+j) != *(sResponding->Data_a8 + i + j)))
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d108      	bne.n	8009e22 <Find_String_V2+0xda>
 8009e10:	9b07      	ldr	r3, [sp, #28]
 8009e12:	9a08      	ldr	r2, [sp, #32]
 8009e14:	191b      	adds	r3, r3, r4
 8009e16:	5d5b      	ldrb	r3, [r3, r5]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d10b      	bne.n	8009e34 <Find_String_V2+0xec>
                        j++;
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	b22b      	sxth	r3, r5
 8009e20:	e006      	b.n	8009e30 <Find_String_V2+0xe8>
					if (j < Pos_Sharp)
 8009e22:	230e      	movs	r3, #14
 8009e24:	aa08      	add	r2, sp, #32
 8009e26:	189b      	adds	r3, r3, r2
 8009e28:	2200      	movs	r2, #0
 8009e2a:	5e9b      	ldrsh	r3, [r3, r2]
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	ddf5      	ble.n	8009e1c <Find_String_V2+0xd4>
						Check_sharp = 1;
 8009e30:	001d      	movs	r5, r3
 8009e32:	e7b5      	b.n	8009da0 <Find_String_V2+0x58>
	for (i = 0; i < sResponding->Length_u16; ++i)
 8009e34:	3401      	adds	r4, #1
 8009e36:	b224      	sxth	r4, r4
 8009e38:	e79a      	b.n	8009d70 <Find_String_V2+0x28>
	...

08009e3c <Get_RTC>:
/* Exported functions --------------------------------------------------------*/
/**
 * @brief	Lay gia tri RTC
 */
void Get_RTC(void)
{
 8009e3c:	b510      	push	{r4, lr}
    RTC_TimeTypeDef     sRTCTime;
    RTC_DateTypeDef     sRTCDate;

    HAL_RTC_GetTime(&hrtc, &sRTCTime, RTC_FORMAT_BIN);
 8009e3e:	4c10      	ldr	r4, [pc, #64]	; (8009e80 <Get_RTC+0x44>)
{
 8009e40:	b086      	sub	sp, #24
    HAL_RTC_GetTime(&hrtc, &sRTCTime, RTC_FORMAT_BIN);
 8009e42:	a901      	add	r1, sp, #4
 8009e44:	2200      	movs	r2, #0
 8009e46:	0020      	movs	r0, r4
 8009e48:	f7fa fe14 	bl	8004a74 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sRTCDate, RTC_FORMAT_BIN);
 8009e4c:	4669      	mov	r1, sp
 8009e4e:	2200      	movs	r2, #0
 8009e50:	0020      	movs	r0, r4
 8009e52:	f7fa fe39 	bl	8004ac8 <HAL_RTC_GetDate>

	sRTC.sec 	= sRTCTime.Seconds;
 8009e56:	466b      	mov	r3, sp
 8009e58:	799a      	ldrb	r2, [r3, #6]
	sRTC.min 	= sRTCTime.Minutes;
	sRTC.hour 	= sRTCTime.Hours;
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <Get_RTC+0x48>)
 8009e5c:	4669      	mov	r1, sp
	sRTC.sec 	= sRTCTime.Seconds;
 8009e5e:	709a      	strb	r2, [r3, #2]
	sRTC.day 	= sRTCDate.WeekDay;
 8009e60:	466a      	mov	r2, sp
 8009e62:	7812      	ldrb	r2, [r2, #0]
	sRTC.hour 	= sRTCTime.Hours;
 8009e64:	8889      	ldrh	r1, [r1, #4]
	sRTC.day 	= sRTCDate.WeekDay;
 8009e66:	70da      	strb	r2, [r3, #3]
	sRTC.date 	= sRTCDate.Date;
 8009e68:	466a      	mov	r2, sp
	sRTC.hour 	= sRTCTime.Hours;
 8009e6a:	8019      	strh	r1, [r3, #0]
	sRTC.date 	= sRTCDate.Date;
 8009e6c:	7892      	ldrb	r2, [r2, #2]
 8009e6e:	711a      	strb	r2, [r3, #4]
	sRTC.month 	= sRTCDate.Month;
 8009e70:	466a      	mov	r2, sp
 8009e72:	7852      	ldrb	r2, [r2, #1]
 8009e74:	715a      	strb	r2, [r3, #5]
	sRTC.year 	= sRTCDate.Year;
 8009e76:	466a      	mov	r2, sp
 8009e78:	78d2      	ldrb	r2, [r2, #3]
 8009e7a:	719a      	strb	r2, [r3, #6]

//	APP_LOG(TS_OFF, VLEVEL_M, "user_time.c: Get RTC\n\r");
}
 8009e7c:	b006      	add	sp, #24
 8009e7e:	bd10      	pop	{r4, pc}
 8009e80:	200002fc 	.word	0x200002fc
 8009e84:	200015f0 	.word	0x200015f0

08009e88 <Check_update_Time>:
 * @param	Con tro chua bien thoi gian
 * @retval	1: du lieu chinh xac
 */
uint8_t Check_update_Time(ST_TIME_FORMAT *sRTC_temp)
{
	if (sRTC_temp->sec > 60)
 8009e88:	7882      	ldrb	r2, [r0, #2]
{
 8009e8a:	0003      	movs	r3, r0
        return 0;
 8009e8c:	2000      	movs	r0, #0
	if (sRTC_temp->sec > 60)
 8009e8e:	2a3c      	cmp	r2, #60	; 0x3c
 8009e90:	d815      	bhi.n	8009ebe <Check_update_Time+0x36>
	if (sRTC_temp->min > 60)
 8009e92:	785a      	ldrb	r2, [r3, #1]
 8009e94:	2a3c      	cmp	r2, #60	; 0x3c
 8009e96:	d812      	bhi.n	8009ebe <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->hour > 23)
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	2a17      	cmp	r2, #23
 8009e9c:	d80f      	bhi.n	8009ebe <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->day > 8)
 8009e9e:	78da      	ldrb	r2, [r3, #3]
 8009ea0:	2a08      	cmp	r2, #8
 8009ea2:	d80c      	bhi.n	8009ebe <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->date > 31)
 8009ea4:	791a      	ldrb	r2, [r3, #4]
 8009ea6:	2a1f      	cmp	r2, #31
 8009ea8:	d809      	bhi.n	8009ebe <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->month > 12)
 8009eaa:	795a      	ldrb	r2, [r3, #5]
 8009eac:	2a0c      	cmp	r2, #12
 8009eae:	d806      	bhi.n	8009ebe <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->year > 99)
        return 0;
    if (sRTC_temp->year < 20){
 8009eb0:	224f      	movs	r2, #79	; 0x4f
 8009eb2:	799b      	ldrb	r3, [r3, #6]
 8009eb4:	3b14      	subs	r3, #20
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	4140      	adcs	r0, r0
 8009ebc:	b2c0      	uxtb	r0, r0
        return 0;
    }
	return 1;
}
 8009ebe:	4770      	bx	lr

08009ec0 <Set_RTC>:
{
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8009ec2:	2700      	movs	r7, #0
{
 8009ec4:	b08b      	sub	sp, #44	; 0x2c
 8009ec6:	9001      	str	r0, [sp, #4]
 8009ec8:	9102      	str	r1, [sp, #8]
 8009eca:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8009ecc:	2100      	movs	r1, #0
 8009ece:	2214      	movs	r2, #20
{
 8009ed0:	ac01      	add	r4, sp, #4
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8009ed2:	a805      	add	r0, sp, #20
 8009ed4:	f000 fdb0 	bl	800aa38 <memset>
    if (Check_update_Time(&sRTC_Var) == 1)
 8009ed8:	0020      	movs	r0, r4
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8009eda:	9704      	str	r7, [sp, #16]
    if (Check_update_Time(&sRTC_Var) == 1)
 8009edc:	f7ff ffd4 	bl	8009e88 <Check_update_Time>
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8009ee0:	ae04      	add	r6, sp, #16
    if (Check_update_Time(&sRTC_Var) == 1)
 8009ee2:	0005      	movs	r5, r0
 8009ee4:	2801      	cmp	r0, #1
 8009ee6:	d11c      	bne.n	8009f22 <Set_RTC+0x62>
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8009ee8:	4669      	mov	r1, sp
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 8009eea:	9b03      	ldr	r3, [sp, #12]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8009eec:	8822      	ldrh	r2, [r4, #0]
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 8009eee:	9306      	str	r3, [sp, #24]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8009ef0:	78a3      	ldrb	r3, [r4, #2]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8009ef2:	828a      	strh	r2, [r1, #20]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8009ef4:	758b      	strb	r3, [r1, #22]
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 8009ef6:	78e3      	ldrb	r3, [r4, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009ef8:	003a      	movs	r2, r7
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 8009efa:	7033      	strb	r3, [r6, #0]
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8009efc:	7923      	ldrb	r3, [r4, #4]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009efe:	a905      	add	r1, sp, #20
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8009f00:	70b3      	strb	r3, [r6, #2]
        sRTCDate_Temp.Month 		 = sRTC_Var.month;
 8009f02:	7963      	ldrb	r3, [r4, #5]
 8009f04:	7073      	strb	r3, [r6, #1]
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 8009f06:	79a3      	ldrb	r3, [r4, #6]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009f08:	4c07      	ldr	r4, [pc, #28]	; (8009f28 <Set_RTC+0x68>)
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 8009f0a:	70f3      	strb	r3, [r6, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009f0c:	0020      	movs	r0, r4
 8009f0e:	f7fa fbdd 	bl	80046cc <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &sRTCDate_Temp, RTC_FORMAT_BIN);
 8009f12:	003a      	movs	r2, r7
 8009f14:	0031      	movs	r1, r6
 8009f16:	0020      	movs	r0, r4
 8009f18:	f7fa fc5c 	bl	80047d4 <HAL_RTC_SetDate>
}
 8009f1c:	0028      	movs	r0, r5
 8009f1e:	b00b      	add	sp, #44	; 0x2c
 8009f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 8009f22:	003d      	movs	r5, r7
 8009f24:	e7fa      	b.n	8009f1c <Set_RTC+0x5c>
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	200002fc 	.word	0x200002fc

08009f2c <UTIL_TIMER_Init>:

/* Private functions definition -----------------------------------------------*/
UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
	UTIL_TIMER_INIT_CRITICAL_SECTION();
	TimerListHead = NULL;
 8009f2c:	2200      	movs	r2, #0
{
 8009f2e:	b510      	push	{r4, lr}
	TimerListHead = NULL;
 8009f30:	4b02      	ldr	r3, [pc, #8]	; (8009f3c <UTIL_TIMER_Init+0x10>)
 8009f32:	601a      	str	r2, [r3, #0]
	return UTIL_TimerDriver.InitTimer();
 8009f34:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <UTIL_TIMER_Init+0x14>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4798      	blx	r3
}
 8009f3a:	bd10      	pop	{r4, pc}
 8009f3c:	200015e4 	.word	0x200015e4
 8009f40:	0800b6e8 	.word	0x0800b6e8

08009f44 <UTIL_TIMER_Create>:
	return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create(UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue,
		UTIL_TIMER_Mode_t Mode, void (*Callback)(void*), void *Argument)
{
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	0004      	movs	r4, r0
 8009f48:	0017      	movs	r7, r2
 8009f4a:	0008      	movs	r0, r1
 8009f4c:	001e      	movs	r6, r3
		TimerObject->Mode = Mode;
		TimerObject->Next = NULL;
		return UTIL_TIMER_OK;
	} else
	{
		return UTIL_TIMER_INVALID_PARAM;
 8009f4e:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (Callback != NULL))
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d00e      	beq.n	8009f72 <UTIL_TIMER_Create+0x2e>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00c      	beq.n	8009f72 <UTIL_TIMER_Create+0x2e>
		TimerObject->Timestamp = 0U;
 8009f58:	2500      	movs	r5, #0
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <UTIL_TIMER_Create+0x34>)
		TimerObject->Timestamp = 0U;
 8009f5c:	6025      	str	r5, [r4, #0]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	4798      	blx	r3
		TimerObject->argument = Argument;      //Doi so cho ham callback
 8009f62:	9b06      	ldr	r3, [sp, #24]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009f64:	6060      	str	r0, [r4, #4]
		TimerObject->IsPending = 0U;
 8009f66:	8125      	strh	r5, [r4, #8]
		TimerObject->IsReloadStopped = 0U;     //Danh dau stop timer set period
 8009f68:	72a5      	strb	r5, [r4, #10]
		TimerObject->Callback = Callback;      //Ham callback
 8009f6a:	60e6      	str	r6, [r4, #12]
		TimerObject->argument = Argument;      //Doi so cho ham callback
 8009f6c:	6123      	str	r3, [r4, #16]
		TimerObject->Mode = Mode;
 8009f6e:	72e7      	strb	r7, [r4, #11]
		TimerObject->Next = NULL;
 8009f70:	6165      	str	r5, [r4, #20]
	}
}
 8009f72:	0028      	movs	r0, r5
 8009f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	0800b6e8 	.word	0x0800b6e8

08009f7c <UTIL_TIMER_GetCurrentTime>:
		TimerSetTimeout(TimerListHead);
	}
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8009f7c:	b510      	push	{r4, lr}
	uint32_t now = UTIL_TimerDriver.GetTimerValue();
 8009f7e:	4c03      	ldr	r4, [pc, #12]	; (8009f8c <UTIL_TIMER_GetCurrentTime+0x10>)
 8009f80:	69e3      	ldr	r3, [r4, #28]
 8009f82:	4798      	blx	r3
	return UTIL_TimerDriver.Tick2ms(now);
 8009f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f86:	4798      	blx	r3
}
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	0800b6e8 	.word	0x0800b6e8

08009f90 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past)
{
 8009f90:	b570      	push	{r4, r5, r6, lr}
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8009f92:	4d06      	ldr	r5, [pc, #24]	; (8009fac <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8009f94:	0006      	movs	r6, r0
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8009f96:	69eb      	ldr	r3, [r5, #28]
 8009f98:	4798      	blx	r3
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 8009f9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8009f9c:	0004      	movs	r4, r0
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 8009f9e:	0030      	movs	r0, r6
 8009fa0:	4798      	blx	r3
	/* intentional wrap around. Works Ok if tick duation below 1ms */
	return UTIL_TimerDriver.Tick2ms(nowInTicks - pastInTicks);
 8009fa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009fa4:	1a20      	subs	r0, r4, r0
 8009fa6:	4798      	blx	r3
}
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	0800b6e8 	.word	0x0800b6e8

08009fb0 <TimerExists>:
 * @param 	TimerObject Structure containing the timer object parameters
 * @retval 	1 (the object is already in the list) or 0
 */
bool TimerExists(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <TimerExists+0x18>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
	while (cur != NULL)
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <TimerExists+0xc>
		{
			return true;
		}
		cur = cur->Next;
	}
	return false;
 8009fb8:	0018      	movs	r0, r3
}
 8009fba:	4770      	bx	lr
		if (cur == TimerObject)
 8009fbc:	4283      	cmp	r3, r0
 8009fbe:	d001      	beq.n	8009fc4 <TimerExists+0x14>
		cur = cur->Next;
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	e7f7      	b.n	8009fb4 <TimerExists+0x4>
			return true;
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	e7f8      	b.n	8009fba <TimerExists+0xa>
 8009fc8:	200015e4 	.word	0x200015e4

08009fcc <TimerSetTimeout>:
/**
 * @brief Sets a timeout with the duration "timestamp"
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout(UTIL_TIMER_Object_t *TimerObject)
{
 8009fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8009fce:	4e0b      	ldr	r6, [pc, #44]	; (8009ffc <TimerSetTimeout+0x30>)
{
 8009fd0:	0004      	movs	r4, r0
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8009fd2:	6a33      	ldr	r3, [r6, #32]
 8009fd4:	4798      	blx	r3
	TimerObject->IsPending = 1;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	7223      	strb	r3, [r4, #8]
	/* In case deadline too soon */
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	69b7      	ldr	r7, [r6, #24]
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8009fde:	0005      	movs	r5, r0
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	47b8      	blx	r7
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	1940      	adds	r0, r0, r5
 8009fe8:	4283      	cmp	r3, r0
 8009fea:	d202      	bcs.n	8009ff2 <TimerSetTimeout+0x26>
	{
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime() + minTicks;
 8009fec:	47b8      	blx	r7
 8009fee:	1940      	adds	r0, r0, r5
 8009ff0:	6020      	str	r0, [r4, #0]
	}
	UTIL_TimerDriver.StartTimerEvt(TimerObject->Timestamp);
 8009ff2:	68b3      	ldr	r3, [r6, #8]
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	4798      	blx	r3
}
 8009ff8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	0800b6e8 	.word	0x0800b6e8

0800a000 <UTIL_TIMER_Stop>:
	if (NULL != TimerObject)
 800a000:	2101      	movs	r1, #1
{
 800a002:	0003      	movs	r3, r0
 800a004:	b570      	push	{r4, r5, r6, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 800a006:	0008      	movs	r0, r1
	if (NULL != TimerObject)
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d022      	beq.n	800a052 <UTIL_TIMER_Stop+0x52>
		UTIL_TIMER_Object_t *prev = TimerListHead;
 800a00c:	4d11      	ldr	r5, [pc, #68]	; (800a054 <UTIL_TIMER_Stop+0x54>)
		TimerObject->IsReloadStopped = 1U;
 800a00e:	7299      	strb	r1, [r3, #10]
		UTIL_TIMER_Object_t *prev = TimerListHead;
 800a010:	682a      	ldr	r2, [r5, #0]
		if (NULL != TimerListHead)
 800a012:	2a00      	cmp	r2, #0
 800a014:	d101      	bne.n	800a01a <UTIL_TIMER_Stop+0x1a>
			ret = UTIL_TIMER_OK;
 800a016:	2000      	movs	r0, #0
 800a018:	e01b      	b.n	800a052 <UTIL_TIMER_Stop+0x52>
			TimerObject->IsRunning = 0U;
 800a01a:	2600      	movs	r6, #0
 800a01c:	725e      	strb	r6, [r3, #9]
				if (TimerListHead->Next != NULL)
 800a01e:	6954      	ldr	r4, [r2, #20]
			if (TimerListHead == TimerObject) /* Stop the Head */
 800a020:	4293      	cmp	r3, r2
 800a022:	d10c      	bne.n	800a03e <UTIL_TIMER_Stop+0x3e>
				TimerListHead->IsPending = 0;
 800a024:	721e      	strb	r6, [r3, #8]
				if (TimerListHead->Next != NULL)
 800a026:	42b4      	cmp	r4, r6
 800a028:	d004      	beq.n	800a034 <UTIL_TIMER_Stop+0x34>
					TimerSetTimeout(TimerListHead);
 800a02a:	0020      	movs	r0, r4
					TimerListHead = TimerListHead->Next;
 800a02c:	602c      	str	r4, [r5, #0]
					TimerSetTimeout(TimerListHead);
 800a02e:	f7ff ffcd 	bl	8009fcc <TimerSetTimeout>
 800a032:	e7f0      	b.n	800a016 <UTIL_TIMER_Stop+0x16>
					UTIL_TimerDriver.StopTimerEvt();
 800a034:	4b08      	ldr	r3, [pc, #32]	; (800a058 <UTIL_TIMER_Stop+0x58>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	4798      	blx	r3
					TimerListHead = NULL;
 800a03a:	602c      	str	r4, [r5, #0]
 800a03c:	e7eb      	b.n	800a016 <UTIL_TIMER_Stop+0x16>
						cur = cur->Next;
 800a03e:	0011      	movs	r1, r2
 800a040:	6952      	ldr	r2, [r2, #20]
				while (cur != NULL)
 800a042:	2a00      	cmp	r2, #0
 800a044:	d0e7      	beq.n	800a016 <UTIL_TIMER_Stop+0x16>
					if (cur == TimerObject)
 800a046:	4293      	cmp	r3, r2
 800a048:	d1f9      	bne.n	800a03e <UTIL_TIMER_Stop+0x3e>
						if (cur->Next != NULL)
 800a04a:	6958      	ldr	r0, [r3, #20]
							prev->Next = cur;
 800a04c:	6148      	str	r0, [r1, #20]
						if (cur->Next != NULL)
 800a04e:	2800      	cmp	r0, #0
 800a050:	d1e1      	bne.n	800a016 <UTIL_TIMER_Stop+0x16>
}
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	200015e4 	.word	0x200015e4
 800a058:	0800b6e8 	.word	0x0800b6e8

0800a05c <TimerInsertTimer>:
 *     			next timer to expire.
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 800a05c:	4b09      	ldr	r3, [pc, #36]	; (800a084 <TimerInsertTimer+0x28>)
{
 800a05e:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 800a060:	681a      	ldr	r2, [r3, #0]
	UTIL_TIMER_Object_t *next = TimerListHead->Next;
 800a062:	6953      	ldr	r3, [r2, #20]
	while (cur->Next != NULL)
 800a064:	6951      	ldr	r1, [r2, #20]
 800a066:	2900      	cmp	r1, #0
 800a068:	d102      	bne.n	800a070 <TimerInsertTimer+0x14>
		{
			cur = next;
			next = next->Next;
		} else
		{
			cur->Next = TimerObject;
 800a06a:	6150      	str	r0, [r2, #20]
			TimerObject->Next = next;
 800a06c:	6141      	str	r1, [r0, #20]
			return;
		}
	}
	cur->Next = TimerObject;
	TimerObject->Next = NULL;
}
 800a06e:	bd10      	pop	{r4, pc}
		if (TimerObject->Timestamp > next->Timestamp)
 800a070:	6804      	ldr	r4, [r0, #0]
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	428c      	cmp	r4, r1
 800a076:	d902      	bls.n	800a07e <TimerInsertTimer+0x22>
			next = next->Next;
 800a078:	001a      	movs	r2, r3
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	e7f2      	b.n	800a064 <TimerInsertTimer+0x8>
 800a07e:	0019      	movs	r1, r3
 800a080:	e7f3      	b.n	800a06a <TimerInsertTimer+0xe>
 800a082:	46c0      	nop			; (mov r8, r8)
 800a084:	200015e4 	.word	0x200015e4

0800a088 <TimerInsertNewHeadTimer>:
 * @remark 	The list is automatically sorted. The list head always contains the
 *         		next timer to expire.
 */
void TimerInsertNewHeadTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 800a088:	4a05      	ldr	r2, [pc, #20]	; (800a0a0 <TimerInsertNewHeadTimer+0x18>)
{
 800a08a:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 800a08c:	6813      	ldr	r3, [r2, #0]
	if (cur != NULL)
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <TimerInsertNewHeadTimer+0xe>
	{
		cur->IsPending = 0;
 800a092:	2100      	movs	r1, #0
 800a094:	7219      	strb	r1, [r3, #8]
	}
	TimerObject->Next = cur;
 800a096:	6143      	str	r3, [r0, #20]
	TimerListHead = TimerObject;
 800a098:	6010      	str	r0, [r2, #0]
	TimerSetTimeout(TimerListHead);
 800a09a:	f7ff ff97 	bl	8009fcc <TimerSetTimeout>
}
 800a09e:	bd10      	pop	{r4, pc}
 800a0a0:	200015e4 	.word	0x200015e4

0800a0a4 <UTIL_TIMER_Start>:
{
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	0004      	movs	r4, r0
		ret = UTIL_TIMER_INVALID_PARAM;
 800a0a8:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (TimerExists(TimerObject) == false)
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d01c      	beq.n	800a0e8 <UTIL_TIMER_Start+0x44>
 800a0ae:	f7ff ff7f 	bl	8009fb0 <TimerExists>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d118      	bne.n	800a0e8 <UTIL_TIMER_Start+0x44>
			&& (TimerObject->IsRunning == 0U))
 800a0b6:	7a65      	ldrb	r5, [r4, #9]
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	d124      	bne.n	800a106 <UTIL_TIMER_Start+0x62>
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 800a0bc:	4e13      	ldr	r6, [pc, #76]	; (800a10c <UTIL_TIMER_Start+0x68>)
		ticks = TimerObject->ReloadValue;
 800a0be:	6867      	ldr	r7, [r4, #4]
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 800a0c0:	6a33      	ldr	r3, [r6, #32]
 800a0c2:	4798      	blx	r3
		TimerObject->Timestamp = ticks;
 800a0c4:	4287      	cmp	r7, r0
 800a0c6:	d200      	bcs.n	800a0ca <UTIL_TIMER_Start+0x26>
 800a0c8:	0007      	movs	r7, r0
		TimerObject->IsPending = 0U;
 800a0ca:	2380      	movs	r3, #128	; 0x80
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	8123      	strh	r3, [r4, #8]
		TimerObject->IsReloadStopped = 0U;
 800a0d0:	2300      	movs	r3, #0
		TimerObject->Timestamp = ticks;
 800a0d2:	6027      	str	r7, [r4, #0]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 800a0d4:	4f0e      	ldr	r7, [pc, #56]	; (800a110 <UTIL_TIMER_Start+0x6c>)
		TimerObject->IsReloadStopped = 0U;
 800a0d6:	72a3      	strb	r3, [r4, #10]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d106      	bne.n	800a0ec <UTIL_TIMER_Start+0x48>
			UTIL_TimerDriver.SetTimerContext();       //Lay RTC va luu gia tri RTC luc hen gio
 800a0de:	6933      	ldr	r3, [r6, #16]
 800a0e0:	4798      	blx	r3
				TimerInsertNewHeadTimer(TimerObject);
 800a0e2:	0020      	movs	r0, r4
 800a0e4:	f7ff ffd0 	bl	800a088 <TimerInsertNewHeadTimer>
}
 800a0e8:	0028      	movs	r0, r5
 800a0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime(); //tinh xem da set alarm dc bao nhieu ms rôi
 800a0ec:	69b3      	ldr	r3, [r6, #24]
 800a0ee:	4798      	blx	r3
			TimerObject->Timestamp += elapsedTime;
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	18c0      	adds	r0, r0, r3
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 800a0f4:	683b      	ldr	r3, [r7, #0]
			TimerObject->Timestamp += elapsedTime;
 800a0f6:	6020      	str	r0, [r4, #0]
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4298      	cmp	r0, r3
 800a0fc:	d3f1      	bcc.n	800a0e2 <UTIL_TIMER_Start+0x3e>
				TimerInsertTimer(TimerObject);     //chèn object vao giữa.
 800a0fe:	0020      	movs	r0, r4
 800a100:	f7ff ffac 	bl	800a05c <TimerInsertTimer>
 800a104:	e7f0      	b.n	800a0e8 <UTIL_TIMER_Start+0x44>
		ret = UTIL_TIMER_INVALID_PARAM;
 800a106:	2501      	movs	r5, #1
 800a108:	e7ee      	b.n	800a0e8 <UTIL_TIMER_Start+0x44>
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	0800b6e8 	.word	0x0800b6e8
 800a110:	200015e4 	.word	0x200015e4

0800a114 <UTIL_TIMER_SetPeriod>:
{
 800a114:	b510      	push	{r4, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 800a116:	2301      	movs	r3, #1
{
 800a118:	0004      	movs	r4, r0
 800a11a:	0008      	movs	r0, r1
	if (NULL == TimerObject)
 800a11c:	2c00      	cmp	r4, #0
 800a11e:	d010      	beq.n	800a142 <UTIL_TIMER_SetPeriod+0x2e>
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a120:	4b09      	ldr	r3, [pc, #36]	; (800a148 <UTIL_TIMER_SetPeriod+0x34>)
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	4798      	blx	r3
 800a126:	6060      	str	r0, [r4, #4]
		if (TimerExists(TimerObject))
 800a128:	0020      	movs	r0, r4
 800a12a:	f7ff ff41 	bl	8009fb0 <TimerExists>
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800a12e:	2300      	movs	r3, #0
		if (TimerExists(TimerObject))
 800a130:	4298      	cmp	r0, r3
 800a132:	d006      	beq.n	800a142 <UTIL_TIMER_SetPeriod+0x2e>
			(void) UTIL_TIMER_Stop(TimerObject);
 800a134:	0020      	movs	r0, r4
 800a136:	f7ff ff63 	bl	800a000 <UTIL_TIMER_Stop>
			ret = UTIL_TIMER_Start(TimerObject);
 800a13a:	0020      	movs	r0, r4
 800a13c:	f7ff ffb2 	bl	800a0a4 <UTIL_TIMER_Start>
 800a140:	0003      	movs	r3, r0
}
 800a142:	0018      	movs	r0, r3
 800a144:	bd10      	pop	{r4, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	0800b6e8 	.word	0x0800b6e8

0800a14c <UTIL_TIMER_IRQ_Handler>:
{
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = UTIL_TimerDriver.GetTimerContext();
 800a14e:	4e1c      	ldr	r6, [pc, #112]	; (800a1c0 <UTIL_TIMER_IRQ_Handler+0x74>)
 800a150:	6973      	ldr	r3, [r6, #20]
 800a152:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 800a154:	6933      	ldr	r3, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 800a156:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 800a158:	4798      	blx	r3
	if (TimerListHead != NULL)
 800a15a:	4d1a      	ldr	r5, [pc, #104]	; (800a1c4 <UTIL_TIMER_IRQ_Handler+0x78>)
	DeltaContext = now - old; /*intentional wrap around */
 800a15c:	1b07      	subs	r7, r0, r4
	if (TimerListHead != NULL)
 800a15e:	682b      	ldr	r3, [r5, #0]
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800a160:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 800a162:	2b00      	cmp	r3, #0
 800a164:	d108      	bne.n	800a178 <UTIL_TIMER_IRQ_Handler+0x2c>
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800a166:	2780      	movs	r7, #128	; 0x80
 800a168:	007f      	lsls	r7, r7, #1
	while ((TimerListHead != NULL)
 800a16a:	682b      	ldr	r3, [r5, #0]
			&& ((TimerListHead->Timestamp == 0U)
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <UTIL_TIMER_IRQ_Handler+0x3c>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 800a170:	6828      	ldr	r0, [r5, #0]
 800a172:	2800      	cmp	r0, #0
 800a174:	d11e      	bne.n	800a1b4 <UTIL_TIMER_IRQ_Handler+0x68>
}
 800a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (cur->Timestamp > DeltaContext)
 800a178:	6819      	ldr	r1, [r3, #0]
				cur->Timestamp = 0;
 800a17a:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 800a17c:	42b9      	cmp	r1, r7
 800a17e:	d900      	bls.n	800a182 <UTIL_TIMER_IRQ_Handler+0x36>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800a180:	1862      	adds	r2, r4, r1
 800a182:	601a      	str	r2, [r3, #0]
			cur = cur->Next;
 800a184:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 800a186:	e7ec      	b.n	800a162 <UTIL_TIMER_IRQ_Handler+0x16>
			&& ((TimerListHead->Timestamp == 0U)
 800a188:	681c      	ldr	r4, [r3, #0]
 800a18a:	2c00      	cmp	r4, #0
 800a18c:	d003      	beq.n	800a196 <UTIL_TIMER_IRQ_Handler+0x4a>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 800a18e:	69b3      	ldr	r3, [r6, #24]
 800a190:	4798      	blx	r3
 800a192:	4284      	cmp	r4, r0
 800a194:	d2ec      	bcs.n	800a170 <UTIL_TIMER_IRQ_Handler+0x24>
		cur = TimerListHead;
 800a196:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 800a198:	6963      	ldr	r3, [r4, #20]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 800a19a:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 800a19c:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800a1a6:	8963      	ldrh	r3, [r4, #10]
 800a1a8:	42bb      	cmp	r3, r7
 800a1aa:	d1de      	bne.n	800a16a <UTIL_TIMER_IRQ_Handler+0x1e>
			(void) UTIL_TIMER_Start(cur);
 800a1ac:	0020      	movs	r0, r4
 800a1ae:	f7ff ff79 	bl	800a0a4 <UTIL_TIMER_Start>
 800a1b2:	e7da      	b.n	800a16a <UTIL_TIMER_IRQ_Handler+0x1e>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 800a1b4:	7a03      	ldrb	r3, [r0, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1dd      	bne.n	800a176 <UTIL_TIMER_IRQ_Handler+0x2a>
		TimerSetTimeout(TimerListHead);
 800a1ba:	f7ff ff07 	bl	8009fcc <TimerSetTimeout>
}
 800a1be:	e7da      	b.n	800a176 <UTIL_TIMER_IRQ_Handler+0x2a>
 800a1c0:	0800b6e8 	.word	0x0800b6e8
 800a1c4:	200015e4 	.word	0x200015e4

0800a1c8 <UTIL_Set_RTC>:
 * 				- Set RTC
 * 				- Get TimerContext mơi nhất
 * 				- Set lại timer Alarm
 * */
void UTIL_Set_RTC (ST_TIME_FORMAT sTime)
{
 800a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	UTIL_TIMER_Object_t *cur;
	uint32_t old, now, DeltaContext;
	old = UTIL_TimerDriver.GetTimerContext();
 800a1ca:	4e20      	ldr	r6, [pc, #128]	; (800a24c <UTIL_Set_RTC+0x84>)
{
 800a1cc:	b085      	sub	sp, #20
	old = UTIL_TimerDriver.GetTimerContext();
 800a1ce:	6973      	ldr	r3, [r6, #20]
{
 800a1d0:	9102      	str	r1, [sp, #8]
 800a1d2:	9203      	str	r2, [sp, #12]
 800a1d4:	9001      	str	r0, [sp, #4]
	old = UTIL_TimerDriver.GetTimerContext();
 800a1d6:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 800a1d8:	6937      	ldr	r7, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 800a1da:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 800a1dc:	47b8      	blx	r7
	DeltaContext = now - old; /*intentional wrap around */
	/* update timeStamp based upon new Time Reference*/
	/* because delta context should never exceed 2^32*/
	if (TimerListHead != NULL)
 800a1de:	4d1c      	ldr	r5, [pc, #112]	; (800a250 <UTIL_Set_RTC+0x88>)
	DeltaContext = now - old; /*intentional wrap around */
 800a1e0:	1b01      	subs	r1, r0, r4
	if (TimerListHead != NULL)
 800a1e2:	682b      	ldr	r3, [r5, #0]
		cur = TimerListHead;
		do
		{
			if (cur->Timestamp > DeltaContext)
			{
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800a1e4:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01e      	beq.n	800a228 <UTIL_Set_RTC+0x60>
			if (cur->Timestamp > DeltaContext)
 800a1ea:	6818      	ldr	r0, [r3, #0]
			} else
			{
				cur->Timestamp = 0;
 800a1ec:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 800a1ee:	4288      	cmp	r0, r1
 800a1f0:	d900      	bls.n	800a1f4 <UTIL_Set_RTC+0x2c>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800a1f2:	1822      	adds	r2, r4, r0
 800a1f4:	601a      	str	r2, [r3, #0]
			}
			cur = cur->Next;
 800a1f6:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 800a1f8:	e7f5      	b.n	800a1e6 <UTIL_Set_RTC+0x1e>
	}
	/* Execute expired timer and update the list */
	while ((TimerListHead != NULL)
			&& ((TimerListHead->Timestamp == 0U)
 800a1fa:	681c      	ldr	r4, [r3, #0]
 800a1fc:	2c00      	cmp	r4, #0
 800a1fe:	d003      	beq.n	800a208 <UTIL_Set_RTC+0x40>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 800a200:	69b3      	ldr	r3, [r6, #24]
 800a202:	4798      	blx	r3
 800a204:	4284      	cmp	r4, r0
 800a206:	d212      	bcs.n	800a22e <UTIL_Set_RTC+0x66>
	{
		cur = TimerListHead;
 800a208:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 800a20a:	6963      	ldr	r3, [r4, #20]
		cur->IsPending = 0;
		cur->IsRunning = 0;
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 800a20c:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 800a20e:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 800a214:	68e3      	ldr	r3, [r4, #12]
 800a216:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800a218:	2280      	movs	r2, #128	; 0x80
 800a21a:	8963      	ldrh	r3, [r4, #10]
 800a21c:	0052      	lsls	r2, r2, #1
 800a21e:	4293      	cmp	r3, r2
 800a220:	d102      	bne.n	800a228 <UTIL_Set_RTC+0x60>
		{
			(void) UTIL_TIMER_Start(cur);   //If period == head ->start -> Then restart again in TimerSetTimeout
 800a222:	0020      	movs	r0, r4
 800a224:	f7ff ff3e 	bl	800a0a4 <UTIL_TIMER_Start>
	while ((TimerListHead != NULL)
 800a228:	682b      	ldr	r3, [r5, #0]
			&& ((TimerListHead->Timestamp == 0U)
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e5      	bne.n	800a1fa <UTIL_Set_RTC+0x32>
		}
	}
    // Set RTC new
	Set_RTC(sTime);
 800a22e:	9902      	ldr	r1, [sp, #8]
 800a230:	9a03      	ldr	r2, [sp, #12]
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	f7ff fe44 	bl	8009ec0 <Set_RTC>
    //Get Timer Context new
	UTIL_TimerDriver.SetTimerContext();
 800a238:	47b8      	blx	r7
	/* start the next TimerListHead if it exists and it is not pending*/  //Phai thay doi luon start lai
	if (TimerListHead != NULL)
 800a23a:	6828      	ldr	r0, [r5, #0]
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d101      	bne.n	800a244 <UTIL_Set_RTC+0x7c>
	{
		TimerSetTimeout(TimerListHead);
	}
}
 800a240:	b005      	add	sp, #20
 800a242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		TimerSetTimeout(TimerListHead);
 800a244:	f7ff fec2 	bl	8009fcc <TimerSetTimeout>
}
 800a248:	e7fa      	b.n	800a240 <UTIL_Set_RTC+0x78>
 800a24a:	46c0      	nop			; (mov r8, r8)
 800a24c:	0800b6e8 	.word	0x0800b6e8
 800a250:	200015e4 	.word	0x200015e4

0800a254 <Reset_Buff>:
}

void Reset_Buff(sData *str)
{
	uint16_t i;
	for (i = 0; i < str->Length_u16; i++)
 800a254:	2300      	movs	r3, #0
 800a256:	001a      	movs	r2, r3
 800a258:	8881      	ldrh	r1, [r0, #4]
 800a25a:	4299      	cmp	r1, r3
 800a25c:	d801      	bhi.n	800a262 <Reset_Buff+0xe>
		*(str->Data_a8 +i ) = 0;
	str->Length_u16 = 0;
 800a25e:	8082      	strh	r2, [r0, #4]
}
 800a260:	4770      	bx	lr
		*(str->Data_a8 +i ) = 0;
 800a262:	6801      	ldr	r1, [r0, #0]
 800a264:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < str->Length_u16; i++)
 800a266:	3301      	adds	r3, #1
 800a268:	b29b      	uxth	r3, r3
 800a26a:	e7f5      	b.n	800a258 <Reset_Buff+0x4>

0800a26c <Convert_Hex_To_String_Hex>:
void Convert_Hex_To_String_Hex(sData *sTaget, sData *sSource)
{
    uint8_t 	Temp_1 = 0;
    uint8_t 	Temp_2 = 0;
    uint16_t 	i = 0;
    for (i = 0; i < sSource->Length_u16; i++)
 800a26c:	2300      	movs	r3, #0
{
 800a26e:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (i = 0; i < sSource->Length_u16; i++)
 800a270:	888a      	ldrh	r2, [r1, #4]
 800a272:	429a      	cmp	r2, r3
 800a274:	d802      	bhi.n	800a27c <Convert_Hex_To_String_Hex+0x10>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
        else
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
    }
    //Length gap doi source
    sTaget->Length_u16 = sSource->Length_u16 * 2;
 800a276:	0052      	lsls	r2, r2, #1
 800a278:	8082      	strh	r2, [r0, #4]
}
 800a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
 800a27c:	2537      	movs	r5, #55	; 0x37
 800a27e:	46ac      	mov	ip, r5
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 800a280:	680a      	ldr	r2, [r1, #0]
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 800a282:	005c      	lsls	r4, r3, #1
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 800a284:	5cd7      	ldrb	r7, [r2, r3]
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 800a286:	6802      	ldr	r2, [r0, #0]
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 800a288:	093e      	lsrs	r6, r7, #4
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 800a28a:	1912      	adds	r2, r2, r4
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
 800a28c:	44b4      	add	ip, r6
        if (Temp_1 <= 9)
 800a28e:	2f9f      	cmp	r7, #159	; 0x9f
 800a290:	d801      	bhi.n	800a296 <Convert_Hex_To_String_Hex+0x2a>
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 800a292:	3630      	adds	r6, #48	; 0x30
 800a294:	46b4      	mov	ip, r6
 800a296:	4665      	mov	r5, ip
 800a298:	7015      	strb	r5, [r2, #0]
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 800a29a:	250f      	movs	r5, #15
 800a29c:	680a      	ldr	r2, [r1, #0]
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 800a29e:	6806      	ldr	r6, [r0, #0]
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 800a2a0:	5cd2      	ldrb	r2, [r2, r3]
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 800a2a2:	3401      	adds	r4, #1
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 800a2a4:	402a      	ands	r2, r5
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 800a2a6:	1934      	adds	r4, r6, r4
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
 800a2a8:	0016      	movs	r6, r2
 800a2aa:	3637      	adds	r6, #55	; 0x37
        if (Temp_2 <= 9)
 800a2ac:	2a09      	cmp	r2, #9
 800a2ae:	d801      	bhi.n	800a2b4 <Convert_Hex_To_String_Hex+0x48>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 800a2b0:	3230      	adds	r2, #48	; 0x30
 800a2b2:	0016      	movs	r6, r2
    for (i = 0; i < sSource->Length_u16; i++)
 800a2b4:	3301      	adds	r3, #1
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 800a2b6:	7026      	strb	r6, [r4, #0]
    for (i = 0; i < sSource->Length_u16; i++)
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	e7d9      	b.n	800a270 <Convert_Hex_To_String_Hex+0x4>

0800a2bc <UTIL_MEM_set>:

void UTIL_MEM_set( void *dst, uint8_t value, uint16_t size )
{
 800a2bc:	b510      	push	{r4, lr}
    uint8_t* dst8= (uint8_t *) dst;
    while( size-- )
    {
        *dst8++ = value;
 800a2be:	f000 fbbb 	bl	800aa38 <memset>
    }
}
 800a2c2:	bd10      	pop	{r4, pc}

0800a2c4 <LOG>:
uint8_t Convert_Hex_To_StringHex (uint8_t Hex)
{
    return ((Hex /10) *16 + (Hex %10));
}

void LOG(log_level_t level, const char* message, ...){
 800a2c4:	b40e      	push	{r1, r2, r3}
	va_list args;
	va_start(args, message);
	char buffer[LOG_BUFFER_SIZE];
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800a2c6:	2196      	movs	r1, #150	; 0x96
void LOG(log_level_t level, const char* message, ...){
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	4c1c      	ldr	r4, [pc, #112]	; (800a33c <LOG+0x78>)
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800a2cc:	0049      	lsls	r1, r1, #1
void LOG(log_level_t level, const char* message, ...){
 800a2ce:	44a5      	add	sp, r4
 800a2d0:	aba7      	add	r3, sp, #668	; 0x29c
 800a2d2:	cb04      	ldmia	r3!, {r2}
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800a2d4:	ad08      	add	r5, sp, #32
void LOG(log_level_t level, const char* message, ...){
 800a2d6:	0004      	movs	r4, r0
	va_end(args);
	SysTime_t curtime = SysTimeGet();
 800a2d8:	ae06      	add	r6, sp, #24
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800a2da:	0028      	movs	r0, r5
	va_start(args, message);
 800a2dc:	9305      	str	r3, [sp, #20]
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800a2de:	f000 fb9f 	bl	800aa20 <vsniprintf>
	SysTime_t curtime = SysTimeGet();
 800a2e2:	0030      	movs	r0, r6
 800a2e4:	f000 f9ea 	bl	800a6bc <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 800a2e8:	21fa      	movs	r1, #250	; 0xfa
 800a2ea:	9806      	ldr	r0, [sp, #24]
 800a2ec:	0089      	lsls	r1, r1, #2
 800a2ee:	f7f5 ffb7 	bl	8000260 <__aeabi_uidivmod>
 800a2f2:	000b      	movs	r3, r1
 800a2f4:	4912      	ldr	r1, [pc, #72]	; (800a340 <LOG+0x7c>)
 800a2f6:	2c04      	cmp	r4, #4
 800a2f8:	d802      	bhi.n	800a300 <LOG+0x3c>
 800a2fa:	4a12      	ldr	r2, [pc, #72]	; (800a344 <LOG+0x80>)
 800a2fc:	00a4      	lsls	r4, r4, #2
 800a2fe:	58a1      	ldr	r1, [r4, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s %s %s", second, curtime.SubSeconds, level_prefix, buffer, level_afterfix);
 800a300:	4811      	ldr	r0, [pc, #68]	; (800a348 <LOG+0x84>)
 800a302:	9502      	str	r5, [sp, #8]
 800a304:	9003      	str	r0, [sp, #12]
 800a306:	9101      	str	r1, [sp, #4]
 800a308:	2004      	movs	r0, #4
 800a30a:	5e31      	ldrsh	r1, [r6, r0]
 800a30c:	4a0f      	ldr	r2, [pc, #60]	; (800a34c <LOG+0x88>)
 800a30e:	9100      	str	r1, [sp, #0]
 800a310:	219e      	movs	r1, #158	; 0x9e
 800a312:	a853      	add	r0, sp, #332	; 0x14c
 800a314:	0049      	lsls	r1, r1, #1
 800a316:	f000 fb23 	bl	800a960 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 800a31a:	a853      	add	r0, sp, #332	; 0x14c
 800a31c:	f7f5 fef4 	bl	8000108 <strlen>
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <LOG+0x8c>)
 800a322:	b282      	uxth	r2, r0
 800a324:	a953      	add	r1, sp, #332	; 0x14c
 800a326:	480b      	ldr	r0, [pc, #44]	; (800a354 <LOG+0x90>)
 800a328:	f7fb fa14 	bl	8005754 <HAL_UART_Transmit>
}
 800a32c:	23a3      	movs	r3, #163	; 0xa3
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	449d      	add	sp, r3
 800a332:	bc70      	pop	{r4, r5, r6}
 800a334:	bc08      	pop	{r3}
 800a336:	b003      	add	sp, #12
 800a338:	4718      	bx	r3
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	fffffd74 	.word	0xfffffd74
 800a340:	0800b919 	.word	0x0800b919
 800a344:	0800b714 	.word	0x0800b714
 800a348:	0800b917 	.word	0x0800b917
 800a34c:	0800bead 	.word	0x0800bead
 800a350:	00002710 	.word	0x00002710
 800a354:	2000150c 	.word	0x2000150c

0800a358 <LOG_Array>:

void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length){
 800a358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a35a:	4c23      	ldr	r4, [pc, #140]	; (800a3e8 <LOG_Array+0x90>)
 800a35c:	0007      	movs	r7, r0
 800a35e:	44a5      	add	sp, r4
	SysTime_t curtime = SysTimeGet();
 800a360:	ad02      	add	r5, sp, #8
 800a362:	0028      	movs	r0, r5
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length){
 800a364:	000e      	movs	r6, r1
 800a366:	0014      	movs	r4, r2
	SysTime_t curtime = SysTimeGet();
 800a368:	f000 f9a8 	bl	800a6bc <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 800a36c:	21fa      	movs	r1, #250	; 0xfa
 800a36e:	9802      	ldr	r0, [sp, #8]
 800a370:	0089      	lsls	r1, r1, #2
 800a372:	f7f5 ff75 	bl	8000260 <__aeabi_uidivmod>
 800a376:	000b      	movs	r3, r1
 800a378:	491c      	ldr	r1, [pc, #112]	; (800a3ec <LOG_Array+0x94>)
 800a37a:	2f04      	cmp	r7, #4
 800a37c:	d802      	bhi.n	800a384 <LOG_Array+0x2c>
 800a37e:	4a1c      	ldr	r2, [pc, #112]	; (800a3f0 <LOG_Array+0x98>)
 800a380:	00bf      	lsls	r7, r7, #2
 800a382:	58b9      	ldr	r1, [r7, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s ", second, curtime.SubSeconds, level_prefix);
 800a384:	9101      	str	r1, [sp, #4]
 800a386:	2004      	movs	r0, #4
 800a388:	5e29      	ldrsh	r1, [r5, r0]
 800a38a:	4a1a      	ldr	r2, [pc, #104]	; (800a3f4 <LOG_Array+0x9c>)
 800a38c:	9100      	str	r1, [sp, #0]
 800a38e:	219e      	movs	r1, #158	; 0x9e
 800a390:	a853      	add	r0, sp, #332	; 0x14c
 800a392:	0049      	lsls	r1, r1, #1
 800a394:	f000 fae4 	bl	800a960 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 800a398:	a853      	add	r0, sp, #332	; 0x14c
 800a39a:	f7f5 feb5 	bl	8000108 <strlen>
 800a39e:	4d16      	ldr	r5, [pc, #88]	; (800a3f8 <LOG_Array+0xa0>)
 800a3a0:	b282      	uxth	r2, r0
 800a3a2:	a953      	add	r1, sp, #332	; 0x14c
 800a3a4:	0028      	movs	r0, r5
 800a3a6:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <LOG_Array+0xa4>)
 800a3a8:	f7fb f9d4 	bl	8005754 <HAL_UART_Transmit>
	uint8_t buffer[LOG_BUFFER_SIZE];
	sData sSoucre = {&pData[0], Length * 2};
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 800a3ac:	2396      	movs	r3, #150	; 0x96
	sData sSoucre = {&pData[0], Length * 2};
 800a3ae:	0064      	lsls	r4, r4, #1
 800a3b0:	a904      	add	r1, sp, #16
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 800a3b2:	a806      	add	r0, sp, #24
	sData sSoucre = {&pData[0], Length * 2};
 800a3b4:	9604      	str	r6, [sp, #16]
 800a3b6:	b2a4      	uxth	r4, r4
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 800a3b8:	ae08      	add	r6, sp, #32
 800a3ba:	005b      	lsls	r3, r3, #1
	sData sSoucre = {&pData[0], Length * 2};
 800a3bc:	808c      	strh	r4, [r1, #4]
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 800a3be:	8083      	strh	r3, [r0, #4]
 800a3c0:	9606      	str	r6, [sp, #24]
	Convert_Hex_To_String_Hex(&sTarget, &sSoucre);
 800a3c2:	f7ff ff53 	bl	800a26c <Convert_Hex_To_String_Hex>
	HAL_UART_Transmit(&uart_debug, buffer, Length * 2, LOG_TIMEOUT);
 800a3c6:	0022      	movs	r2, r4
 800a3c8:	0031      	movs	r1, r6
 800a3ca:	0028      	movs	r0, r5
 800a3cc:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <LOG_Array+0xa4>)
 800a3ce:	f7fb f9c1 	bl	8005754 <HAL_UART_Transmit>
    HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n" , 2, LOG_TIMEOUT);
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	0028      	movs	r0, r5
 800a3d6:	490a      	ldr	r1, [pc, #40]	; (800a400 <LOG_Array+0xa8>)
 800a3d8:	4b08      	ldr	r3, [pc, #32]	; (800a3fc <LOG_Array+0xa4>)
 800a3da:	f7fb f9bb 	bl	8005754 <HAL_UART_Transmit>
}
 800a3de:	23a3      	movs	r3, #163	; 0xa3
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	449d      	add	sp, r3
 800a3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	fffffd74 	.word	0xfffffd74
 800a3ec:	0800b919 	.word	0x0800b919
 800a3f0:	0800b714 	.word	0x0800b714
 800a3f4:	0800bec1 	.word	0x0800bec1
 800a3f8:	2000150c 	.word	0x2000150c
 800a3fc:	00002710 	.word	0x00002710
 800a400:	0800b917 	.word	0x0800b917

0800a404 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800a404:	b530      	push	{r4, r5, lr}
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <TRACE_AllocateBufer+0x5c>)
 800a408:	8a5c      	ldrh	r4, [r3, #18]
 800a40a:	8a1a      	ldrh	r2, [r3, #16]
 800a40c:	4294      	cmp	r4, r2
 800a40e:	d114      	bne.n	800a43a <TRACE_AllocateBufer+0x36>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800a410:	2280      	movs	r2, #128	; 0x80
 800a412:	0092      	lsls	r2, r2, #2
 800a414:	1b12      	subs	r2, r2, r4
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800a416:	b292      	uxth	r2, r2
 800a418:	4290      	cmp	r0, r2
 800a41a:	d306      	bcc.n	800a42a <TRACE_AllocateBufer+0x26>
 800a41c:	4284      	cmp	r4, r0
 800a41e:	d916      	bls.n	800a44e <TRACE_AllocateBufer+0x4a>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800a420:	2201      	movs	r2, #1
 800a422:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800a424:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800a426:	801c      	strh	r4, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800a428:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800a42a:	8a5a      	ldrh	r2, [r3, #18]
 800a42c:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a42e:	1812      	adds	r2, r2, r0
 800a430:	05d2      	lsls	r2, r2, #23
 800a432:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800a434:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a436:	825a      	strh	r2, [r3, #18]
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800a438:	e00b      	b.n	800a452 <TRACE_AllocateBufer+0x4e>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a43a:	4294      	cmp	r4, r2
 800a43c:	d90a      	bls.n	800a454 <TRACE_AllocateBufer+0x50>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800a43e:	2580      	movs	r5, #128	; 0x80
 800a440:	00ad      	lsls	r5, r5, #2
 800a442:	1b2d      	subs	r5, r5, r4
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800a444:	b2ad      	uxth	r5, r5
 800a446:	4285      	cmp	r5, r0
 800a448:	d8ef      	bhi.n	800a42a <TRACE_AllocateBufer+0x26>
 800a44a:	4282      	cmp	r2, r0
 800a44c:	d8e8      	bhi.n	800a420 <TRACE_AllocateBufer+0x1c>
  int16_t ret = -1;
 800a44e:	2001      	movs	r0, #1
 800a450:	4240      	negs	r0, r0
}
 800a452:	bd30      	pop	{r4, r5, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800a454:	1b12      	subs	r2, r2, r4
  if(freesize > Size)
 800a456:	b292      	uxth	r2, r2
 800a458:	4282      	cmp	r2, r0
 800a45a:	d8e6      	bhi.n	800a42a <TRACE_AllocateBufer+0x26>
 800a45c:	e7f7      	b.n	800a44e <TRACE_AllocateBufer+0x4a>
 800a45e:	46c0      	nop			; (mov r8, r8)
 800a460:	200015fc 	.word	0x200015fc

0800a464 <TRACE_Lock>:
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800a464:	4a02      	ldr	r2, [pc, #8]	; (800a470 <TRACE_Lock+0xc>)
 800a466:	8ad3      	ldrh	r3, [r2, #22]
 800a468:	3301      	adds	r3, #1
 800a46a:	82d3      	strh	r3, [r2, #22]
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800a46c:	4770      	bx	lr
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	200015fc 	.word	0x200015fc

0800a474 <TRACE_UnLock>:
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800a474:	4a02      	ldr	r2, [pc, #8]	; (800a480 <TRACE_UnLock+0xc>)
 800a476:	8ad3      	ldrh	r3, [r2, #22]
 800a478:	3b01      	subs	r3, #1
 800a47a:	82d3      	strh	r3, [r2, #22]
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800a47c:	4770      	bx	lr
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	200015fc 	.word	0x200015fc

0800a484 <UTIL_ADV_TRACE_Init>:
{
 800a484:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800a486:	2218      	movs	r2, #24
 800a488:	2100      	movs	r1, #0
 800a48a:	4807      	ldr	r0, [pc, #28]	; (800a4a8 <UTIL_ADV_TRACE_Init+0x24>)
 800a48c:	f000 f911 	bl	800a6b2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800a490:	2280      	movs	r2, #128	; 0x80
 800a492:	2100      	movs	r1, #0
 800a494:	4805      	ldr	r0, [pc, #20]	; (800a4ac <UTIL_ADV_TRACE_Init+0x28>)
 800a496:	0092      	lsls	r2, r2, #2
 800a498:	f000 f90b 	bl	800a6b2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <UTIL_ADV_TRACE_Init+0x2c>)
 800a49e:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <UTIL_ADV_TRACE_Init+0x30>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4798      	blx	r3
}
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	200015fc 	.word	0x200015fc
 800a4ac:	20001714 	.word	0x20001714
 800a4b0:	0800b35c 	.word	0x0800b35c
 800a4b4:	0800a619 	.word	0x0800a619

0800a4b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800a4b8:	4b01      	ldr	r3, [pc, #4]	; (800a4c0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800a4ba:	6058      	str	r0, [r3, #4]
}
 800a4bc:	4770      	bx	lr
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	200015fc 	.word	0x200015fc

0800a4c4 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800a4c4:	4b01      	ldr	r3, [pc, #4]	; (800a4cc <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800a4c6:	7218      	strb	r0, [r3, #8]
}
 800a4c8:	4770      	bx	lr
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	200015fc 	.word	0x200015fc

0800a4d0 <TRACE_Send>:
{
 800a4d0:	b570      	push	{r4, r5, r6, lr}
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800a4d2:	2600      	movs	r6, #0
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800a4d4:	4c1a      	ldr	r4, [pc, #104]	; (800a540 <TRACE_Send+0x70>)
  if(TRACE_IsLocked() == 0u)
 800a4d6:	8ae5      	ldrh	r5, [r4, #22]
 800a4d8:	42b5      	cmp	r5, r6
 800a4da:	d126      	bne.n	800a52a <TRACE_Send+0x5a>
    TRACE_Lock();
 800a4dc:	f7ff ffc2 	bl	800a464 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800a4e0:	8a21      	ldrh	r1, [r4, #16]
 800a4e2:	8a62      	ldrh	r2, [r4, #18]
 800a4e4:	4291      	cmp	r1, r2
 800a4e6:	d027      	beq.n	800a538 <TRACE_Send+0x68>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800a4e8:	78a3      	ldrb	r3, [r4, #2]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d110      	bne.n	800a510 <TRACE_Send+0x40>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800a4ee:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a4f0:	8025      	strh	r5, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800a4f2:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a4f4:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a4fa:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800a4fc:	42b3      	cmp	r3, r6
 800a4fe:	d109      	bne.n	800a514 <TRACE_Send+0x44>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a500:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a502:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a504:	8a21      	ldrh	r1, [r4, #16]
 800a506:	428a      	cmp	r2, r1
 800a508:	d911      	bls.n	800a52e <TRACE_Send+0x5e>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800a50a:	1a52      	subs	r2, r2, r1
 800a50c:	82a2      	strh	r2, [r4, #20]
 800a50e:	e001      	b.n	800a514 <TRACE_Send+0x44>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0f7      	beq.n	800a504 <TRACE_Send+0x34>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800a514:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <TRACE_Send+0x74>)
 800a516:	8a25      	ldrh	r5, [r4, #16]
 800a518:	18ed      	adds	r5, r5, r3
      UTIL_ADV_TRACE_PreSendHook();
 800a51a:	f7f7 ff5d 	bl	80023d8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <TRACE_Send+0x78>)
 800a520:	0028      	movs	r0, r5
 800a522:	8aa1      	ldrh	r1, [r4, #20]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	4798      	blx	r3
 800a528:	0006      	movs	r6, r0
}
 800a52a:	0030      	movs	r0, r6
 800a52c:	bd70      	pop	{r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a52e:	2380      	movs	r3, #128	; 0x80
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	1a5b      	subs	r3, r3, r1
 800a534:	82a3      	strh	r3, [r4, #20]
 800a536:	e7ed      	b.n	800a514 <TRACE_Send+0x44>
      TRACE_UnLock();
 800a538:	f7ff ff9c 	bl	800a474 <TRACE_UnLock>
 800a53c:	e7f5      	b.n	800a52a <TRACE_Send+0x5a>
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	200015fc 	.word	0x200015fc
 800a544:	20001714 	.word	0x20001714
 800a548:	0800b35c 	.word	0x0800b35c

0800a54c <UTIL_ADV_TRACE_COND_FSend>:
{
 800a54c:	b408      	push	{r3}
 800a54e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a550:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800a552:	2300      	movs	r3, #0
 800a554:	466c      	mov	r4, sp
 800a556:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800a558:	4b2c      	ldr	r3, [pc, #176]	; (800a60c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800a55a:	7a1c      	ldrb	r4, [r3, #8]
 800a55c:	4284      	cmp	r4, r0
 800a55e:	d350      	bcc.n	800a602 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800a560:	68d8      	ldr	r0, [r3, #12]
 800a562:	4008      	ands	r0, r1
 800a564:	4288      	cmp	r0, r1
 800a566:	d14e      	bne.n	800a606 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d004      	beq.n	800a578 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800a56e:	2a00      	cmp	r2, #0
 800a570:	d002      	beq.n	800a578 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800a572:	4669      	mov	r1, sp
 800a574:	a802      	add	r0, sp, #8
 800a576:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a578:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800a57a:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a57c:	0049      	lsls	r1, r1, #1
 800a57e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a580:	4823      	ldr	r0, [pc, #140]	; (800a610 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800a582:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a584:	f000 f8c2 	bl	800a70c <tiny_vsnprintf_like>
 800a588:	0005      	movs	r5, r0
  TRACE_Lock();
 800a58a:	f7ff ff6b 	bl	800a464 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800a58e:	466b      	mov	r3, sp
 800a590:	8818      	ldrh	r0, [r3, #0]
 800a592:	1c9c      	adds	r4, r3, #2
 800a594:	1940      	adds	r0, r0, r5
 800a596:	0021      	movs	r1, r4
 800a598:	b280      	uxth	r0, r0
 800a59a:	f7ff ff33 	bl	800a404 <TRACE_AllocateBufer>
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d02a      	beq.n	800a5f8 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800a5a2:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800a5a4:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800a5a6:	466b      	mov	r3, sp
 800a5a8:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800a5aa:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	8826      	ldrh	r6, [r4, #0]
 800a5b0:	4818      	ldr	r0, [pc, #96]	; (800a614 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800a5b2:	b297      	uxth	r7, r2
 800a5b4:	19f1      	adds	r1, r6, r7
 800a5b6:	b289      	uxth	r1, r1
 800a5b8:	42bb      	cmp	r3, r7
 800a5ba:	d815      	bhi.n	800a5e8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800a5bc:	199b      	adds	r3, r3, r6
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	d000      	beq.n	800a5c6 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800a5c4:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a5c6:	2180      	movs	r1, #128	; 0x80
 800a5c8:	8823      	ldrh	r3, [r4, #0]
 800a5ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5cc:	0049      	lsls	r1, r1, #1
 800a5ce:	18c0      	adds	r0, r0, r3
 800a5d0:	9b01      	ldr	r3, [sp, #4]
 800a5d2:	f000 f89b 	bl	800a70c <tiny_vsnprintf_like>
    TRACE_UnLock();
 800a5d6:	f7ff ff4d 	bl	800a474 <TRACE_UnLock>
    return TRACE_Send();
 800a5da:	f7ff ff79 	bl	800a4d0 <TRACE_Send>
}
 800a5de:	b006      	add	sp, #24
 800a5e0:	bcf0      	pop	{r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	b001      	add	sp, #4
 800a5e6:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800a5e8:	466d      	mov	r5, sp
 800a5ea:	2708      	movs	r7, #8
 800a5ec:	19ed      	adds	r5, r5, r7
 800a5ee:	5cad      	ldrb	r5, [r5, r2]
 800a5f0:	3201      	adds	r2, #1
 800a5f2:	5445      	strb	r5, [r0, r1]
 800a5f4:	4665      	mov	r5, ip
 800a5f6:	e7dc      	b.n	800a5b2 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800a5f8:	f7ff ff3c 	bl	800a474 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800a5fc:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800a5fe:	4240      	negs	r0, r0
 800a600:	e7ed      	b.n	800a5de <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800a602:	2005      	movs	r0, #5
 800a604:	e7fb      	b.n	800a5fe <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800a606:	2006      	movs	r0, #6
 800a608:	e7f9      	b.n	800a5fe <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	200015fc 	.word	0x200015fc
 800a610:	20001614 	.word	0x20001614
 800a614:	20001714 	.word	0x20001714

0800a618 <TRACE_TxCpltCallback>:
{
 800a618:	b510      	push	{r4, lr}
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800a61a:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <TRACE_TxCpltCallback+0x7c>)
 800a61c:	789a      	ldrb	r2, [r3, #2]
 800a61e:	2a02      	cmp	r2, #2
 800a620:	d11d      	bne.n	800a65e <TRACE_TxCpltCallback+0x46>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a622:	2200      	movs	r2, #0
 800a624:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800a626:	8a58      	ldrh	r0, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a628:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800a62a:	4290      	cmp	r0, r2
 800a62c:	d02c      	beq.n	800a688 <TRACE_TxCpltCallback+0x70>
 800a62e:	8ad9      	ldrh	r1, [r3, #22]
 800a630:	2901      	cmp	r1, #1
 800a632:	d129      	bne.n	800a688 <TRACE_TxCpltCallback+0x70>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800a634:	7899      	ldrb	r1, [r3, #2]
 800a636:	2901      	cmp	r1, #1
 800a638:	d117      	bne.n	800a66a <TRACE_TxCpltCallback+0x52>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800a63a:	8819      	ldrh	r1, [r3, #0]
 800a63c:	1a8a      	subs	r2, r1, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a63e:	2102      	movs	r1, #2
 800a640:	7099      	strb	r1, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a642:	2100      	movs	r1, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800a644:	b292      	uxth	r2, r2
 800a646:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a648:	8019      	strh	r1, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800a64a:	428a      	cmp	r2, r1
 800a64c:	d10f      	bne.n	800a66e <TRACE_TxCpltCallback+0x56>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a64e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a650:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a652:	8a19      	ldrh	r1, [r3, #16]
 800a654:	4288      	cmp	r0, r1
 800a656:	d912      	bls.n	800a67e <TRACE_TxCpltCallback+0x66>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800a658:	1a40      	subs	r0, r0, r1
 800a65a:	8298      	strh	r0, [r3, #20]
 800a65c:	e007      	b.n	800a66e <TRACE_TxCpltCallback+0x56>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a65e:	8a1a      	ldrh	r2, [r3, #16]
 800a660:	8a99      	ldrh	r1, [r3, #20]
 800a662:	1852      	adds	r2, r2, r1
 800a664:	05d2      	lsls	r2, r2, #23
 800a666:	0dd2      	lsrs	r2, r2, #23
 800a668:	e7dd      	b.n	800a626 <TRACE_TxCpltCallback+0xe>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800a66a:	2900      	cmp	r1, #0
 800a66c:	d0f1      	beq.n	800a652 <TRACE_TxCpltCallback+0x3a>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800a66e:	8a18      	ldrh	r0, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800a670:	8a99      	ldrh	r1, [r3, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <TRACE_TxCpltCallback+0x80>)
 800a674:	18c0      	adds	r0, r0, r3
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <TRACE_TxCpltCallback+0x84>)
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4798      	blx	r3
}
 800a67c:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a67e:	2280      	movs	r2, #128	; 0x80
 800a680:	0092      	lsls	r2, r2, #2
 800a682:	1a52      	subs	r2, r2, r1
 800a684:	829a      	strh	r2, [r3, #20]
 800a686:	e7f2      	b.n	800a66e <TRACE_TxCpltCallback+0x56>
    UTIL_ADV_TRACE_PostSendHook();
 800a688:	f7f7 feab 	bl	80023e2 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800a68c:	f7ff fef2 	bl	800a474 <TRACE_UnLock>
}
 800a690:	e7f4      	b.n	800a67c <TRACE_TxCpltCallback+0x64>
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	200015fc 	.word	0x200015fc
 800a698:	20001714 	.word	0x20001714
 800a69c:	0800b35c 	.word	0x0800b35c

0800a6a0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800a6a0:	2300      	movs	r3, #0
{
 800a6a2:	b510      	push	{r4, lr}
  while( size-- )
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d100      	bne.n	800a6aa <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800a6a8:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800a6aa:	5ccc      	ldrb	r4, [r1, r3]
 800a6ac:	54c4      	strb	r4, [r0, r3]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	e7f8      	b.n	800a6a4 <UTIL_MEM_cpy_8+0x4>

0800a6b2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a6b2:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800a6b4:	f000 f9c0 	bl	800aa38 <memset>
  }
}
 800a6b8:	bd10      	pop	{r4, pc}
	...

0800a6bc <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800a6bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a6be:	2300      	movs	r3, #0
 800a6c0:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a6c2:	4e10      	ldr	r6, [pc, #64]	; (800a704 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a6c4:	8093      	strh	r3, [r2, #4]
 800a6c6:	9300      	str	r3, [sp, #0]
{
 800a6c8:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a6ca:	6933      	ldr	r3, [r6, #16]
 800a6cc:	a801      	add	r0, sp, #4
 800a6ce:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a6d0:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a6d2:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a6d4:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a6d6:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a6d8:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a6da:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 800a6dc:	9b00      	ldr	r3, [sp, #0]
  if( c.SubSeconds >= 1000 )
 800a6de:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800a6e0:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a6e2:	466b      	mov	r3, sp
 800a6e4:	889b      	ldrh	r3, [r3, #4]
  if( c.SubSeconds >= 1000 )
 800a6e6:	0089      	lsls	r1, r1, #2
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a6e8:	195b      	adds	r3, r3, r5
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800a6ee:	428b      	cmp	r3, r1
 800a6f0:	db03      	blt.n	800a6fa <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <SysTimeGet+0x4c>)
    c.Seconds++;
 800a6f4:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800a6f6:	18d2      	adds	r2, r2, r3
 800a6f8:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800a6fa:	6020      	str	r0, [r4, #0]
 800a6fc:	80a3      	strh	r3, [r4, #4]
}
 800a6fe:	0020      	movs	r0, r4
 800a700:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	0800b6d4 	.word	0x0800b6d4
 800a708:	fffffc18 	.word	0xfffffc18

0800a70c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70e:	b09d      	sub	sp, #116	; 0x74
 800a710:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800a712:	2000      	movs	r0, #0
{
 800a714:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800a716:	9f02      	ldr	r7, [sp, #8]
{
 800a718:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800a71a:	4281      	cmp	r1, r0
 800a71c:	dc0a      	bgt.n	800a734 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800a71e:	b01d      	add	sp, #116	; 0x74
 800a720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800a722:	4298      	cmp	r0, r3
 800a724:	da0d      	bge.n	800a742 <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800a726:	2925      	cmp	r1, #37	; 0x25
 800a728:	d00e      	beq.n	800a748 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800a72a:	7039      	strb	r1, [r7, #0]
      continue;
 800a72c:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800a72e:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800a730:	9a01      	ldr	r2, [sp, #4]
 800a732:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 800a734:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800a736:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800a738:	1af8      	subs	r0, r7, r3
 800a73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73c:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800a73e:	2900      	cmp	r1, #0
 800a740:	d1ef      	bne.n	800a722 <tiny_vsnprintf_like+0x16>
  *str = '\0';
 800a742:	2300      	movs	r3, #0
 800a744:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800a746:	e7ea      	b.n	800a71e <tiny_vsnprintf_like+0x12>
    fmt++;
 800a748:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800a74a:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800a74c:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800a74e:	0010      	movs	r0, r2
 800a750:	3830      	subs	r0, #48	; 0x30
 800a752:	9203      	str	r2, [sp, #12]
 800a754:	4241      	negs	r1, r0
 800a756:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800a758:	b2c0      	uxtb	r0, r0
    flags = 0;
 800a75a:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800a75c:	2809      	cmp	r0, #9
 800a75e:	d92e      	bls.n	800a7be <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800a760:	2001      	movs	r0, #1
 800a762:	4240      	negs	r0, r0
 800a764:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800a766:	9801      	ldr	r0, [sp, #4]
 800a768:	7800      	ldrb	r0, [r0, #0]
 800a76a:	2869      	cmp	r0, #105	; 0x69
 800a76c:	d100      	bne.n	800a770 <tiny_vsnprintf_like+0x64>
 800a76e:	e0a4      	b.n	800a8ba <tiny_vsnprintf_like+0x1ae>
 800a770:	d829      	bhi.n	800a7c6 <tiny_vsnprintf_like+0xba>
 800a772:	2863      	cmp	r0, #99	; 0x63
 800a774:	d038      	beq.n	800a7e8 <tiny_vsnprintf_like+0xdc>
 800a776:	2864      	cmp	r0, #100	; 0x64
 800a778:	d100      	bne.n	800a77c <tiny_vsnprintf_like+0x70>
 800a77a:	e09e      	b.n	800a8ba <tiny_vsnprintf_like+0x1ae>
 800a77c:	2858      	cmp	r0, #88	; 0x58
 800a77e:	d066      	beq.n	800a84e <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800a780:	0039      	movs	r1, r7
 800a782:	2825      	cmp	r0, #37	; 0x25
 800a784:	d126      	bne.n	800a7d4 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800a786:	9801      	ldr	r0, [sp, #4]
 800a788:	7800      	ldrb	r0, [r0, #0]
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d100      	bne.n	800a790 <tiny_vsnprintf_like+0x84>
 800a78e:	e098      	b.n	800a8c2 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800a790:	1c4f      	adds	r7, r1, #1
 800a792:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800a794:	9902      	ldr	r1, [sp, #8]
 800a796:	1a79      	subs	r1, r7, r1
 800a798:	4299      	cmp	r1, r3
 800a79a:	db00      	blt.n	800a79e <tiny_vsnprintf_like+0x92>
 800a79c:	e08f      	b.n	800a8be <tiny_vsnprintf_like+0x1b2>
 800a79e:	e7c7      	b.n	800a730 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800a7a0:	9d01      	ldr	r5, [sp, #4]
 800a7a2:	3501      	adds	r5, #1
 800a7a4:	9501      	str	r5, [sp, #4]
 800a7a6:	9d00      	ldr	r5, [sp, #0]
 800a7a8:	4375      	muls	r5, r6
 800a7aa:	182d      	adds	r5, r5, r0
 800a7ac:	3d30      	subs	r5, #48	; 0x30
 800a7ae:	9500      	str	r5, [sp, #0]
 800a7b0:	9801      	ldr	r0, [sp, #4]
 800a7b2:	7800      	ldrb	r0, [r0, #0]
 800a7b4:	0005      	movs	r5, r0
 800a7b6:	3d30      	subs	r5, #48	; 0x30
 800a7b8:	2d09      	cmp	r5, #9
 800a7ba:	d9f1      	bls.n	800a7a0 <tiny_vsnprintf_like+0x94>
 800a7bc:	e7d3      	b.n	800a766 <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800a7be:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800a7c0:	260a      	movs	r6, #10
  int i = 0;
 800a7c2:	9000      	str	r0, [sp, #0]
 800a7c4:	e7f4      	b.n	800a7b0 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800a7c6:	2875      	cmp	r0, #117	; 0x75
 800a7c8:	d079      	beq.n	800a8be <tiny_vsnprintf_like+0x1b2>
 800a7ca:	2510      	movs	r5, #16
 800a7cc:	2878      	cmp	r0, #120	; 0x78
 800a7ce:	d041      	beq.n	800a854 <tiny_vsnprintf_like+0x148>
 800a7d0:	2873      	cmp	r0, #115	; 0x73
 800a7d2:	d01d      	beq.n	800a810 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800a7d4:	2025      	movs	r0, #37	; 0x25
 800a7d6:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800a7d8:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800a7da:	1c79      	adds	r1, r7, #1
 800a7dc:	000f      	movs	r7, r1
    base = 10;
 800a7de:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800a7e0:	1a08      	subs	r0, r1, r0
 800a7e2:	4298      	cmp	r0, r3
 800a7e4:	da36      	bge.n	800a854 <tiny_vsnprintf_like+0x148>
 800a7e6:	e7ce      	b.n	800a786 <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800a7e8:	2500      	movs	r5, #0
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	42ab      	cmp	r3, r5
 800a7ee:	dd00      	ble.n	800a7f2 <tiny_vsnprintf_like+0xe6>
 800a7f0:	1e5d      	subs	r5, r3, #1
 800a7f2:	002a      	movs	r2, r5
 800a7f4:	2120      	movs	r1, #32
 800a7f6:	0038      	movs	r0, r7
 800a7f8:	f000 f91e 	bl	800aa38 <memset>
 800a7fc:	9a00      	ldr	r2, [sp, #0]
 800a7fe:	2301      	movs	r3, #1
 800a800:	197d      	adds	r5, r7, r5
 800a802:	2a00      	cmp	r2, #0
 800a804:	dd00      	ble.n	800a808 <tiny_vsnprintf_like+0xfc>
 800a806:	0013      	movs	r3, r2
 800a808:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800a80a:	cc08      	ldmia	r4!, {r3}
 800a80c:	702b      	strb	r3, [r5, #0]
        continue;
 800a80e:	e78f      	b.n	800a730 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 800a810:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800a812:	2e00      	cmp	r6, #0
 800a814:	d100      	bne.n	800a818 <tiny_vsnprintf_like+0x10c>
 800a816:	4e4f      	ldr	r6, [pc, #316]	; (800a954 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800a818:	0030      	movs	r0, r6
 800a81a:	f7f5 fc75 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800a81e:	2300      	movs	r3, #0
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800a824:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800a826:	4283      	cmp	r3, r0
 800a828:	db01      	blt.n	800a82e <tiny_vsnprintf_like+0x122>
 800a82a:	1a1b      	subs	r3, r3, r0
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	0038      	movs	r0, r7
 800a830:	2120      	movs	r1, #32
 800a832:	9a03      	ldr	r2, [sp, #12]
 800a834:	f000 f900 	bl	800aa38 <memset>
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800a83c:	2300      	movs	r3, #0
 800a83e:	42ab      	cmp	r3, r5
 800a840:	db01      	blt.n	800a846 <tiny_vsnprintf_like+0x13a>
 800a842:	197f      	adds	r7, r7, r5
 800a844:	e774      	b.n	800a730 <tiny_vsnprintf_like+0x24>
 800a846:	5cf2      	ldrb	r2, [r6, r3]
 800a848:	54fa      	strb	r2, [r7, r3]
 800a84a:	3301      	adds	r3, #1
 800a84c:	e7f7      	b.n	800a83e <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800a84e:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800a850:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800a852:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800a854:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800a856:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800a858:	1a3e      	subs	r6, r7, r0
 800a85a:	0020      	movs	r0, r4
 800a85c:	1b9e      	subs	r6, r3, r6
 800a85e:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 800a860:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800a862:	9004      	str	r0, [sp, #16]
  if (type & UPPERCASE)  dig = upper_digits;
 800a864:	483c      	ldr	r0, [pc, #240]	; (800a958 <tiny_vsnprintf_like+0x24c>)
 800a866:	9007      	str	r0, [sp, #28]
 800a868:	2040      	movs	r0, #64	; 0x40
 800a86a:	4202      	tst	r2, r0
 800a86c:	d101      	bne.n	800a872 <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800a86e:	4a3b      	ldr	r2, [pc, #236]	; (800a95c <tiny_vsnprintf_like+0x250>)
 800a870:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800a872:	2230      	movs	r2, #48	; 0x30
 800a874:	9208      	str	r2, [sp, #32]
 800a876:	9a03      	ldr	r2, [sp, #12]
 800a878:	2a30      	cmp	r2, #48	; 0x30
 800a87a:	d001      	beq.n	800a880 <tiny_vsnprintf_like+0x174>
 800a87c:	2220      	movs	r2, #32
 800a87e:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 800a880:	2900      	cmp	r1, #0
 800a882:	d023      	beq.n	800a8cc <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800a884:	2b00      	cmp	r3, #0
 800a886:	da21      	bge.n	800a8cc <tiny_vsnprintf_like+0x1c0>
      size--;
 800a888:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800a88a:	425b      	negs	r3, r3
      size--;
 800a88c:	3a01      	subs	r2, #1
 800a88e:	9200      	str	r2, [sp, #0]
      sign = '-';
 800a890:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800a892:	2400      	movs	r4, #0
 800a894:	9205      	str	r2, [sp, #20]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800a896:	0018      	movs	r0, r3
 800a898:	0029      	movs	r1, r5
 800a89a:	9306      	str	r3, [sp, #24]
 800a89c:	f7f5 fce0 	bl	8000260 <__aeabi_uidivmod>
 800a8a0:	0022      	movs	r2, r4
 800a8a2:	4684      	mov	ip, r0
 800a8a4:	9b07      	ldr	r3, [sp, #28]
 800a8a6:	3401      	adds	r4, #1
 800a8a8:	5c59      	ldrb	r1, [r3, r1]
 800a8aa:	ab0b      	add	r3, sp, #44	; 0x2c
 800a8ac:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 800a8ae:	9a06      	ldr	r2, [sp, #24]
 800a8b0:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800a8b2:	4663      	mov	r3, ip
    while (num != 0)
 800a8b4:	4295      	cmp	r5, r2
 800a8b6:	d9ee      	bls.n	800a896 <tiny_vsnprintf_like+0x18a>
 800a8b8:	e011      	b.n	800a8de <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	430a      	orrs	r2, r1
    base = 10;
 800a8be:	250a      	movs	r5, #10
 800a8c0:	e7c8      	b.n	800a854 <tiny_vsnprintf_like+0x148>
          --fmt;
 800a8c2:	9801      	ldr	r0, [sp, #4]
 800a8c4:	000f      	movs	r7, r1
 800a8c6:	3801      	subs	r0, #1
 800a8c8:	9001      	str	r0, [sp, #4]
 800a8ca:	e763      	b.n	800a794 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <tiny_vsnprintf_like+0x1c8>
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	e7de      	b.n	800a892 <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800a8d4:	2130      	movs	r1, #48	; 0x30
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8da:	7011      	strb	r1, [r2, #0]
 800a8dc:	9305      	str	r3, [sp, #20]
  size -= precision;
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	2b30      	cmp	r3, #48	; 0x30
 800a8e6:	d006      	beq.n	800a8f6 <tiny_vsnprintf_like+0x1ea>
 800a8e8:	003b      	movs	r3, r7
 800a8ea:	2120      	movs	r1, #32
 800a8ec:	0022      	movs	r2, r4
 800a8ee:	001f      	movs	r7, r3
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	dc0c      	bgt.n	800a910 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800a8f6:	9b05      	ldr	r3, [sp, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d029      	beq.n	800a950 <tiny_vsnprintf_like+0x244>
 800a8fc:	232d      	movs	r3, #45	; 0x2d
 800a8fe:	3e01      	subs	r6, #1
 800a900:	1c7a      	adds	r2, r7, #1
 800a902:	703b      	strb	r3, [r7, #0]
 800a904:	2e00      	cmp	r6, #0
 800a906:	d009      	beq.n	800a91c <tiny_vsnprintf_like+0x210>
 800a908:	0013      	movs	r3, r2
 800a90a:	0031      	movs	r1, r6
 800a90c:	1ba4      	subs	r4, r4, r6
 800a90e:	e00f      	b.n	800a930 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800a910:	3301      	adds	r3, #1
 800a912:	3e01      	subs	r6, #1
 800a914:	001a      	movs	r2, r3
 800a916:	7039      	strb	r1, [r7, #0]
 800a918:	2e00      	cmp	r6, #0
 800a91a:	d1e7      	bne.n	800a8ec <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800a91c:	0017      	movs	r7, r2
 800a91e:	9c04      	ldr	r4, [sp, #16]
 800a920:	e706      	b.n	800a730 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800a922:	9e08      	ldr	r6, [sp, #32]
 800a924:	3301      	adds	r3, #1
 800a926:	3901      	subs	r1, #1
 800a928:	001a      	movs	r2, r3
 800a92a:	702e      	strb	r6, [r5, #0]
 800a92c:	2900      	cmp	r1, #0
 800a92e:	d0f5      	beq.n	800a91c <tiny_vsnprintf_like+0x210>
 800a930:	1862      	adds	r2, r4, r1
 800a932:	001d      	movs	r5, r3
 800a934:	2a00      	cmp	r2, #0
 800a936:	dcf4      	bgt.n	800a922 <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800a938:	ac0b      	add	r4, sp, #44	; 0x2c
 800a93a:	1859      	adds	r1, r3, r1
 800a93c:	001a      	movs	r2, r3
 800a93e:	3801      	subs	r0, #1
 800a940:	d3ec      	bcc.n	800a91c <tiny_vsnprintf_like+0x210>
 800a942:	5d05      	ldrb	r5, [r0, r4]
 800a944:	1c53      	adds	r3, r2, #1
 800a946:	7015      	strb	r5, [r2, #0]
 800a948:	428b      	cmp	r3, r1
 800a94a:	d1f7      	bne.n	800a93c <tiny_vsnprintf_like+0x230>
 800a94c:	001a      	movs	r2, r3
 800a94e:	e7e5      	b.n	800a91c <tiny_vsnprintf_like+0x210>
 800a950:	003a      	movs	r2, r7
 800a952:	e7d9      	b.n	800a908 <tiny_vsnprintf_like+0x1fc>
 800a954:	0800befd 	.word	0x0800befd
 800a958:	0800bf29 	.word	0x0800bf29
 800a95c:	0800bf04 	.word	0x0800bf04

0800a960 <sniprintf>:
 800a960:	b40c      	push	{r2, r3}
 800a962:	b530      	push	{r4, r5, lr}
 800a964:	4b17      	ldr	r3, [pc, #92]	; (800a9c4 <sniprintf+0x64>)
 800a966:	000c      	movs	r4, r1
 800a968:	681d      	ldr	r5, [r3, #0]
 800a96a:	b09d      	sub	sp, #116	; 0x74
 800a96c:	2900      	cmp	r1, #0
 800a96e:	da08      	bge.n	800a982 <sniprintf+0x22>
 800a970:	238b      	movs	r3, #139	; 0x8b
 800a972:	2001      	movs	r0, #1
 800a974:	602b      	str	r3, [r5, #0]
 800a976:	4240      	negs	r0, r0
 800a978:	b01d      	add	sp, #116	; 0x74
 800a97a:	bc30      	pop	{r4, r5}
 800a97c:	bc08      	pop	{r3}
 800a97e:	b002      	add	sp, #8
 800a980:	4718      	bx	r3
 800a982:	2382      	movs	r3, #130	; 0x82
 800a984:	466a      	mov	r2, sp
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	8293      	strh	r3, [r2, #20]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9002      	str	r0, [sp, #8]
 800a98e:	9006      	str	r0, [sp, #24]
 800a990:	4299      	cmp	r1, r3
 800a992:	d000      	beq.n	800a996 <sniprintf+0x36>
 800a994:	1e4b      	subs	r3, r1, #1
 800a996:	9304      	str	r3, [sp, #16]
 800a998:	9307      	str	r3, [sp, #28]
 800a99a:	2301      	movs	r3, #1
 800a99c:	466a      	mov	r2, sp
 800a99e:	425b      	negs	r3, r3
 800a9a0:	82d3      	strh	r3, [r2, #22]
 800a9a2:	0028      	movs	r0, r5
 800a9a4:	ab21      	add	r3, sp, #132	; 0x84
 800a9a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a9a8:	a902      	add	r1, sp, #8
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	f000 f9e2 	bl	800ad74 <_svfiprintf_r>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	da01      	bge.n	800a9b8 <sniprintf+0x58>
 800a9b4:	238b      	movs	r3, #139	; 0x8b
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	2c00      	cmp	r4, #0
 800a9ba:	d0dd      	beq.n	800a978 <sniprintf+0x18>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	9b02      	ldr	r3, [sp, #8]
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	e7d9      	b.n	800a978 <sniprintf+0x18>
 800a9c4:	200002dc 	.word	0x200002dc

0800a9c8 <_vsniprintf_r>:
 800a9c8:	b530      	push	{r4, r5, lr}
 800a9ca:	0014      	movs	r4, r2
 800a9cc:	0005      	movs	r5, r0
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	b09b      	sub	sp, #108	; 0x6c
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	da05      	bge.n	800a9e2 <_vsniprintf_r+0x1a>
 800a9d6:	238b      	movs	r3, #139	; 0x8b
 800a9d8:	6003      	str	r3, [r0, #0]
 800a9da:	2001      	movs	r0, #1
 800a9dc:	4240      	negs	r0, r0
 800a9de:	b01b      	add	sp, #108	; 0x6c
 800a9e0:	bd30      	pop	{r4, r5, pc}
 800a9e2:	2382      	movs	r3, #130	; 0x82
 800a9e4:	4668      	mov	r0, sp
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	8183      	strh	r3, [r0, #12]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9100      	str	r1, [sp, #0]
 800a9ee:	9104      	str	r1, [sp, #16]
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	d000      	beq.n	800a9f6 <_vsniprintf_r+0x2e>
 800a9f4:	1e63      	subs	r3, r4, #1
 800a9f6:	9302      	str	r3, [sp, #8]
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4669      	mov	r1, sp
 800a9fe:	425b      	negs	r3, r3
 800aa00:	81cb      	strh	r3, [r1, #14]
 800aa02:	0028      	movs	r0, r5
 800aa04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa06:	f000 f9b5 	bl	800ad74 <_svfiprintf_r>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	da01      	bge.n	800aa12 <_vsniprintf_r+0x4a>
 800aa0e:	238b      	movs	r3, #139	; 0x8b
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	2c00      	cmp	r4, #0
 800aa14:	d0e3      	beq.n	800a9de <_vsniprintf_r+0x16>
 800aa16:	2200      	movs	r2, #0
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e7df      	b.n	800a9de <_vsniprintf_r+0x16>
	...

0800aa20 <vsniprintf>:
 800aa20:	b513      	push	{r0, r1, r4, lr}
 800aa22:	4c04      	ldr	r4, [pc, #16]	; (800aa34 <vsniprintf+0x14>)
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	0013      	movs	r3, r2
 800aa28:	000a      	movs	r2, r1
 800aa2a:	0001      	movs	r1, r0
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	f7ff ffcb 	bl	800a9c8 <_vsniprintf_r>
 800aa32:	bd16      	pop	{r1, r2, r4, pc}
 800aa34:	200002dc 	.word	0x200002dc

0800aa38 <memset>:
 800aa38:	0003      	movs	r3, r0
 800aa3a:	1882      	adds	r2, r0, r2
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d100      	bne.n	800aa42 <memset+0xa>
 800aa40:	4770      	bx	lr
 800aa42:	7019      	strb	r1, [r3, #0]
 800aa44:	3301      	adds	r3, #1
 800aa46:	e7f9      	b.n	800aa3c <memset+0x4>

0800aa48 <__errno>:
 800aa48:	4b01      	ldr	r3, [pc, #4]	; (800aa50 <__errno+0x8>)
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	4770      	bx	lr
 800aa4e:	46c0      	nop			; (mov r8, r8)
 800aa50:	200002dc 	.word	0x200002dc

0800aa54 <__libc_init_array>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	2600      	movs	r6, #0
 800aa58:	4c0c      	ldr	r4, [pc, #48]	; (800aa8c <__libc_init_array+0x38>)
 800aa5a:	4d0d      	ldr	r5, [pc, #52]	; (800aa90 <__libc_init_array+0x3c>)
 800aa5c:	1b64      	subs	r4, r4, r5
 800aa5e:	10a4      	asrs	r4, r4, #2
 800aa60:	42a6      	cmp	r6, r4
 800aa62:	d109      	bne.n	800aa78 <__libc_init_array+0x24>
 800aa64:	2600      	movs	r6, #0
 800aa66:	f000 fc6d 	bl	800b344 <_init>
 800aa6a:	4c0a      	ldr	r4, [pc, #40]	; (800aa94 <__libc_init_array+0x40>)
 800aa6c:	4d0a      	ldr	r5, [pc, #40]	; (800aa98 <__libc_init_array+0x44>)
 800aa6e:	1b64      	subs	r4, r4, r5
 800aa70:	10a4      	asrs	r4, r4, #2
 800aa72:	42a6      	cmp	r6, r4
 800aa74:	d105      	bne.n	800aa82 <__libc_init_array+0x2e>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	00b3      	lsls	r3, r6, #2
 800aa7a:	58eb      	ldr	r3, [r5, r3]
 800aa7c:	4798      	blx	r3
 800aa7e:	3601      	adds	r6, #1
 800aa80:	e7ee      	b.n	800aa60 <__libc_init_array+0xc>
 800aa82:	00b3      	lsls	r3, r6, #2
 800aa84:	58eb      	ldr	r3, [r5, r3]
 800aa86:	4798      	blx	r3
 800aa88:	3601      	adds	r6, #1
 800aa8a:	e7f2      	b.n	800aa72 <__libc_init_array+0x1e>
 800aa8c:	0800bf8c 	.word	0x0800bf8c
 800aa90:	0800bf8c 	.word	0x0800bf8c
 800aa94:	0800bf90 	.word	0x0800bf90
 800aa98:	0800bf8c 	.word	0x0800bf8c

0800aa9c <__retarget_lock_acquire_recursive>:
 800aa9c:	4770      	bx	lr

0800aa9e <__retarget_lock_release_recursive>:
 800aa9e:	4770      	bx	lr

0800aaa0 <memcpy>:
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	b510      	push	{r4, lr}
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d100      	bne.n	800aaaa <memcpy+0xa>
 800aaa8:	bd10      	pop	{r4, pc}
 800aaaa:	5ccc      	ldrb	r4, [r1, r3]
 800aaac:	54c4      	strb	r4, [r0, r3]
 800aaae:	3301      	adds	r3, #1
 800aab0:	e7f8      	b.n	800aaa4 <memcpy+0x4>
	...

0800aab4 <_free_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	0005      	movs	r5, r0
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d010      	beq.n	800aade <_free_r+0x2a>
 800aabc:	1f0c      	subs	r4, r1, #4
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da00      	bge.n	800aac6 <_free_r+0x12>
 800aac4:	18e4      	adds	r4, r4, r3
 800aac6:	0028      	movs	r0, r5
 800aac8:	f000 f8e2 	bl	800ac90 <__malloc_lock>
 800aacc:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <_free_r+0x90>)
 800aace:	6813      	ldr	r3, [r2, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <_free_r+0x2c>
 800aad4:	6063      	str	r3, [r4, #4]
 800aad6:	6014      	str	r4, [r2, #0]
 800aad8:	0028      	movs	r0, r5
 800aada:	f000 f8e1 	bl	800aca0 <__malloc_unlock>
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	d908      	bls.n	800aaf6 <_free_r+0x42>
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	1821      	adds	r1, r4, r0
 800aae8:	428b      	cmp	r3, r1
 800aaea:	d1f3      	bne.n	800aad4 <_free_r+0x20>
 800aaec:	6819      	ldr	r1, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	1809      	adds	r1, r1, r0
 800aaf2:	6021      	str	r1, [r4, #0]
 800aaf4:	e7ee      	b.n	800aad4 <_free_r+0x20>
 800aaf6:	001a      	movs	r2, r3
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <_free_r+0x4e>
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	d9f9      	bls.n	800aaf6 <_free_r+0x42>
 800ab02:	6811      	ldr	r1, [r2, #0]
 800ab04:	1850      	adds	r0, r2, r1
 800ab06:	42a0      	cmp	r0, r4
 800ab08:	d10b      	bne.n	800ab22 <_free_r+0x6e>
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	1809      	adds	r1, r1, r0
 800ab0e:	1850      	adds	r0, r2, r1
 800ab10:	6011      	str	r1, [r2, #0]
 800ab12:	4283      	cmp	r3, r0
 800ab14:	d1e0      	bne.n	800aad8 <_free_r+0x24>
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	1841      	adds	r1, r0, r1
 800ab1c:	6011      	str	r1, [r2, #0]
 800ab1e:	6053      	str	r3, [r2, #4]
 800ab20:	e7da      	b.n	800aad8 <_free_r+0x24>
 800ab22:	42a0      	cmp	r0, r4
 800ab24:	d902      	bls.n	800ab2c <_free_r+0x78>
 800ab26:	230c      	movs	r3, #12
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	e7d5      	b.n	800aad8 <_free_r+0x24>
 800ab2c:	6820      	ldr	r0, [r4, #0]
 800ab2e:	1821      	adds	r1, r4, r0
 800ab30:	428b      	cmp	r3, r1
 800ab32:	d103      	bne.n	800ab3c <_free_r+0x88>
 800ab34:	6819      	ldr	r1, [r3, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	1809      	adds	r1, r1, r0
 800ab3a:	6021      	str	r1, [r4, #0]
 800ab3c:	6063      	str	r3, [r4, #4]
 800ab3e:	6054      	str	r4, [r2, #4]
 800ab40:	e7ca      	b.n	800aad8 <_free_r+0x24>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	20001a54 	.word	0x20001a54

0800ab48 <sbrk_aligned>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	4e0f      	ldr	r6, [pc, #60]	; (800ab88 <sbrk_aligned+0x40>)
 800ab4c:	000d      	movs	r5, r1
 800ab4e:	6831      	ldr	r1, [r6, #0]
 800ab50:	0004      	movs	r4, r0
 800ab52:	2900      	cmp	r1, #0
 800ab54:	d102      	bne.n	800ab5c <sbrk_aligned+0x14>
 800ab56:	f000 fba1 	bl	800b29c <_sbrk_r>
 800ab5a:	6030      	str	r0, [r6, #0]
 800ab5c:	0029      	movs	r1, r5
 800ab5e:	0020      	movs	r0, r4
 800ab60:	f000 fb9c 	bl	800b29c <_sbrk_r>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d00a      	beq.n	800ab7e <sbrk_aligned+0x36>
 800ab68:	2303      	movs	r3, #3
 800ab6a:	1cc5      	adds	r5, r0, #3
 800ab6c:	439d      	bics	r5, r3
 800ab6e:	42a8      	cmp	r0, r5
 800ab70:	d007      	beq.n	800ab82 <sbrk_aligned+0x3a>
 800ab72:	1a29      	subs	r1, r5, r0
 800ab74:	0020      	movs	r0, r4
 800ab76:	f000 fb91 	bl	800b29c <_sbrk_r>
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d101      	bne.n	800ab82 <sbrk_aligned+0x3a>
 800ab7e:	2501      	movs	r5, #1
 800ab80:	426d      	negs	r5, r5
 800ab82:	0028      	movs	r0, r5
 800ab84:	bd70      	pop	{r4, r5, r6, pc}
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	20001a58 	.word	0x20001a58

0800ab8c <_malloc_r>:
 800ab8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab8e:	2203      	movs	r2, #3
 800ab90:	1ccb      	adds	r3, r1, #3
 800ab92:	4393      	bics	r3, r2
 800ab94:	3308      	adds	r3, #8
 800ab96:	0006      	movs	r6, r0
 800ab98:	001f      	movs	r7, r3
 800ab9a:	2b0c      	cmp	r3, #12
 800ab9c:	d238      	bcs.n	800ac10 <_malloc_r+0x84>
 800ab9e:	270c      	movs	r7, #12
 800aba0:	42b9      	cmp	r1, r7
 800aba2:	d837      	bhi.n	800ac14 <_malloc_r+0x88>
 800aba4:	0030      	movs	r0, r6
 800aba6:	f000 f873 	bl	800ac90 <__malloc_lock>
 800abaa:	4b38      	ldr	r3, [pc, #224]	; (800ac8c <_malloc_r+0x100>)
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	001c      	movs	r4, r3
 800abb2:	2c00      	cmp	r4, #0
 800abb4:	d133      	bne.n	800ac1e <_malloc_r+0x92>
 800abb6:	0039      	movs	r1, r7
 800abb8:	0030      	movs	r0, r6
 800abba:	f7ff ffc5 	bl	800ab48 <sbrk_aligned>
 800abbe:	0004      	movs	r4, r0
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d15e      	bne.n	800ac82 <_malloc_r+0xf6>
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	681c      	ldr	r4, [r3, #0]
 800abc8:	0025      	movs	r5, r4
 800abca:	2d00      	cmp	r5, #0
 800abcc:	d14e      	bne.n	800ac6c <_malloc_r+0xe0>
 800abce:	2c00      	cmp	r4, #0
 800abd0:	d051      	beq.n	800ac76 <_malloc_r+0xea>
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	0029      	movs	r1, r5
 800abd6:	18e3      	adds	r3, r4, r3
 800abd8:	0030      	movs	r0, r6
 800abda:	9301      	str	r3, [sp, #4]
 800abdc:	f000 fb5e 	bl	800b29c <_sbrk_r>
 800abe0:	9b01      	ldr	r3, [sp, #4]
 800abe2:	4283      	cmp	r3, r0
 800abe4:	d147      	bne.n	800ac76 <_malloc_r+0xea>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	0030      	movs	r0, r6
 800abea:	1aff      	subs	r7, r7, r3
 800abec:	0039      	movs	r1, r7
 800abee:	f7ff ffab 	bl	800ab48 <sbrk_aligned>
 800abf2:	3001      	adds	r0, #1
 800abf4:	d03f      	beq.n	800ac76 <_malloc_r+0xea>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	19db      	adds	r3, r3, r7
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	9b00      	ldr	r3, [sp, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d040      	beq.n	800ac86 <_malloc_r+0xfa>
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	42a2      	cmp	r2, r4
 800ac08:	d133      	bne.n	800ac72 <_malloc_r+0xe6>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	605a      	str	r2, [r3, #4]
 800ac0e:	e014      	b.n	800ac3a <_malloc_r+0xae>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dac5      	bge.n	800aba0 <_malloc_r+0x14>
 800ac14:	230c      	movs	r3, #12
 800ac16:	2500      	movs	r5, #0
 800ac18:	6033      	str	r3, [r6, #0]
 800ac1a:	0028      	movs	r0, r5
 800ac1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac1e:	6821      	ldr	r1, [r4, #0]
 800ac20:	1bc9      	subs	r1, r1, r7
 800ac22:	d420      	bmi.n	800ac66 <_malloc_r+0xda>
 800ac24:	290b      	cmp	r1, #11
 800ac26:	d918      	bls.n	800ac5a <_malloc_r+0xce>
 800ac28:	19e2      	adds	r2, r4, r7
 800ac2a:	6027      	str	r7, [r4, #0]
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	d112      	bne.n	800ac56 <_malloc_r+0xca>
 800ac30:	9b00      	ldr	r3, [sp, #0]
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	6011      	str	r1, [r2, #0]
 800ac38:	6053      	str	r3, [r2, #4]
 800ac3a:	0030      	movs	r0, r6
 800ac3c:	0025      	movs	r5, r4
 800ac3e:	f000 f82f 	bl	800aca0 <__malloc_unlock>
 800ac42:	2207      	movs	r2, #7
 800ac44:	350b      	adds	r5, #11
 800ac46:	1d23      	adds	r3, r4, #4
 800ac48:	4395      	bics	r5, r2
 800ac4a:	1aea      	subs	r2, r5, r3
 800ac4c:	429d      	cmp	r5, r3
 800ac4e:	d0e4      	beq.n	800ac1a <_malloc_r+0x8e>
 800ac50:	1b5b      	subs	r3, r3, r5
 800ac52:	50a3      	str	r3, [r4, r2]
 800ac54:	e7e1      	b.n	800ac1a <_malloc_r+0x8e>
 800ac56:	605a      	str	r2, [r3, #4]
 800ac58:	e7ec      	b.n	800ac34 <_malloc_r+0xa8>
 800ac5a:	6862      	ldr	r2, [r4, #4]
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d1d5      	bne.n	800ac0c <_malloc_r+0x80>
 800ac60:	9b00      	ldr	r3, [sp, #0]
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	e7e9      	b.n	800ac3a <_malloc_r+0xae>
 800ac66:	0023      	movs	r3, r4
 800ac68:	6864      	ldr	r4, [r4, #4]
 800ac6a:	e7a2      	b.n	800abb2 <_malloc_r+0x26>
 800ac6c:	002c      	movs	r4, r5
 800ac6e:	686d      	ldr	r5, [r5, #4]
 800ac70:	e7ab      	b.n	800abca <_malloc_r+0x3e>
 800ac72:	0013      	movs	r3, r2
 800ac74:	e7c4      	b.n	800ac00 <_malloc_r+0x74>
 800ac76:	230c      	movs	r3, #12
 800ac78:	0030      	movs	r0, r6
 800ac7a:	6033      	str	r3, [r6, #0]
 800ac7c:	f000 f810 	bl	800aca0 <__malloc_unlock>
 800ac80:	e7cb      	b.n	800ac1a <_malloc_r+0x8e>
 800ac82:	6027      	str	r7, [r4, #0]
 800ac84:	e7d9      	b.n	800ac3a <_malloc_r+0xae>
 800ac86:	605b      	str	r3, [r3, #4]
 800ac88:	deff      	udf	#255	; 0xff
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	20001a54 	.word	0x20001a54

0800ac90 <__malloc_lock>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4802      	ldr	r0, [pc, #8]	; (800ac9c <__malloc_lock+0xc>)
 800ac94:	f7ff ff02 	bl	800aa9c <__retarget_lock_acquire_recursive>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20001a50 	.word	0x20001a50

0800aca0 <__malloc_unlock>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	4802      	ldr	r0, [pc, #8]	; (800acac <__malloc_unlock+0xc>)
 800aca4:	f7ff fefb 	bl	800aa9e <__retarget_lock_release_recursive>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	20001a50 	.word	0x20001a50

0800acb0 <__ssputs_r>:
 800acb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb2:	b085      	sub	sp, #20
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	9203      	str	r2, [sp, #12]
 800acb8:	688e      	ldr	r6, [r1, #8]
 800acba:	9a01      	ldr	r2, [sp, #4]
 800acbc:	0007      	movs	r7, r0
 800acbe:	000c      	movs	r4, r1
 800acc0:	680b      	ldr	r3, [r1, #0]
 800acc2:	4296      	cmp	r6, r2
 800acc4:	d831      	bhi.n	800ad2a <__ssputs_r+0x7a>
 800acc6:	898a      	ldrh	r2, [r1, #12]
 800acc8:	2190      	movs	r1, #144	; 0x90
 800acca:	00c9      	lsls	r1, r1, #3
 800accc:	420a      	tst	r2, r1
 800acce:	d029      	beq.n	800ad24 <__ssputs_r+0x74>
 800acd0:	2003      	movs	r0, #3
 800acd2:	6921      	ldr	r1, [r4, #16]
 800acd4:	1a5b      	subs	r3, r3, r1
 800acd6:	9302      	str	r3, [sp, #8]
 800acd8:	6963      	ldr	r3, [r4, #20]
 800acda:	4343      	muls	r3, r0
 800acdc:	0fdd      	lsrs	r5, r3, #31
 800acde:	18ed      	adds	r5, r5, r3
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	9802      	ldr	r0, [sp, #8]
 800ace4:	3301      	adds	r3, #1
 800ace6:	181b      	adds	r3, r3, r0
 800ace8:	106d      	asrs	r5, r5, #1
 800acea:	42ab      	cmp	r3, r5
 800acec:	d900      	bls.n	800acf0 <__ssputs_r+0x40>
 800acee:	001d      	movs	r5, r3
 800acf0:	0552      	lsls	r2, r2, #21
 800acf2:	d529      	bpl.n	800ad48 <__ssputs_r+0x98>
 800acf4:	0029      	movs	r1, r5
 800acf6:	0038      	movs	r0, r7
 800acf8:	f7ff ff48 	bl	800ab8c <_malloc_r>
 800acfc:	1e06      	subs	r6, r0, #0
 800acfe:	d02d      	beq.n	800ad5c <__ssputs_r+0xac>
 800ad00:	9a02      	ldr	r2, [sp, #8]
 800ad02:	6921      	ldr	r1, [r4, #16]
 800ad04:	f7ff fecc 	bl	800aaa0 <memcpy>
 800ad08:	89a2      	ldrh	r2, [r4, #12]
 800ad0a:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <__ssputs_r+0xc0>)
 800ad0c:	401a      	ands	r2, r3
 800ad0e:	2380      	movs	r3, #128	; 0x80
 800ad10:	4313      	orrs	r3, r2
 800ad12:	81a3      	strh	r3, [r4, #12]
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	6126      	str	r6, [r4, #16]
 800ad18:	18f6      	adds	r6, r6, r3
 800ad1a:	6026      	str	r6, [r4, #0]
 800ad1c:	6165      	str	r5, [r4, #20]
 800ad1e:	9e01      	ldr	r6, [sp, #4]
 800ad20:	1aed      	subs	r5, r5, r3
 800ad22:	60a5      	str	r5, [r4, #8]
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	429e      	cmp	r6, r3
 800ad28:	d900      	bls.n	800ad2c <__ssputs_r+0x7c>
 800ad2a:	9e01      	ldr	r6, [sp, #4]
 800ad2c:	0032      	movs	r2, r6
 800ad2e:	9903      	ldr	r1, [sp, #12]
 800ad30:	6820      	ldr	r0, [r4, #0]
 800ad32:	f000 fa9f 	bl	800b274 <memmove>
 800ad36:	2000      	movs	r0, #0
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	1b9b      	subs	r3, r3, r6
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	199b      	adds	r3, r3, r6
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	b005      	add	sp, #20
 800ad46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad48:	002a      	movs	r2, r5
 800ad4a:	0038      	movs	r0, r7
 800ad4c:	f000 fac3 	bl	800b2d6 <_realloc_r>
 800ad50:	1e06      	subs	r6, r0, #0
 800ad52:	d1df      	bne.n	800ad14 <__ssputs_r+0x64>
 800ad54:	0038      	movs	r0, r7
 800ad56:	6921      	ldr	r1, [r4, #16]
 800ad58:	f7ff feac 	bl	800aab4 <_free_r>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	2001      	movs	r0, #1
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	89a2      	ldrh	r2, [r4, #12]
 800ad64:	3334      	adds	r3, #52	; 0x34
 800ad66:	4313      	orrs	r3, r2
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	4240      	negs	r0, r0
 800ad6c:	e7ea      	b.n	800ad44 <__ssputs_r+0x94>
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	fffffb7f 	.word	0xfffffb7f

0800ad74 <_svfiprintf_r>:
 800ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad76:	b0a1      	sub	sp, #132	; 0x84
 800ad78:	9003      	str	r0, [sp, #12]
 800ad7a:	001d      	movs	r5, r3
 800ad7c:	898b      	ldrh	r3, [r1, #12]
 800ad7e:	000f      	movs	r7, r1
 800ad80:	0016      	movs	r6, r2
 800ad82:	061b      	lsls	r3, r3, #24
 800ad84:	d511      	bpl.n	800adaa <_svfiprintf_r+0x36>
 800ad86:	690b      	ldr	r3, [r1, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10e      	bne.n	800adaa <_svfiprintf_r+0x36>
 800ad8c:	2140      	movs	r1, #64	; 0x40
 800ad8e:	f7ff fefd 	bl	800ab8c <_malloc_r>
 800ad92:	6038      	str	r0, [r7, #0]
 800ad94:	6138      	str	r0, [r7, #16]
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d105      	bne.n	800ada6 <_svfiprintf_r+0x32>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	9a03      	ldr	r2, [sp, #12]
 800ad9e:	3801      	subs	r0, #1
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	b021      	add	sp, #132	; 0x84
 800ada4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada6:	2340      	movs	r3, #64	; 0x40
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	2300      	movs	r3, #0
 800adac:	ac08      	add	r4, sp, #32
 800adae:	6163      	str	r3, [r4, #20]
 800adb0:	3320      	adds	r3, #32
 800adb2:	7663      	strb	r3, [r4, #25]
 800adb4:	3310      	adds	r3, #16
 800adb6:	76a3      	strb	r3, [r4, #26]
 800adb8:	9507      	str	r5, [sp, #28]
 800adba:	0035      	movs	r5, r6
 800adbc:	782b      	ldrb	r3, [r5, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <_svfiprintf_r+0x52>
 800adc2:	2b25      	cmp	r3, #37	; 0x25
 800adc4:	d148      	bne.n	800ae58 <_svfiprintf_r+0xe4>
 800adc6:	1bab      	subs	r3, r5, r6
 800adc8:	9305      	str	r3, [sp, #20]
 800adca:	42b5      	cmp	r5, r6
 800adcc:	d00b      	beq.n	800ade6 <_svfiprintf_r+0x72>
 800adce:	0032      	movs	r2, r6
 800add0:	0039      	movs	r1, r7
 800add2:	9803      	ldr	r0, [sp, #12]
 800add4:	f7ff ff6c 	bl	800acb0 <__ssputs_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d100      	bne.n	800adde <_svfiprintf_r+0x6a>
 800addc:	e0af      	b.n	800af3e <_svfiprintf_r+0x1ca>
 800adde:	6963      	ldr	r3, [r4, #20]
 800ade0:	9a05      	ldr	r2, [sp, #20]
 800ade2:	189b      	adds	r3, r3, r2
 800ade4:	6163      	str	r3, [r4, #20]
 800ade6:	782b      	ldrb	r3, [r5, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d100      	bne.n	800adee <_svfiprintf_r+0x7a>
 800adec:	e0a7      	b.n	800af3e <_svfiprintf_r+0x1ca>
 800adee:	2201      	movs	r2, #1
 800adf0:	2300      	movs	r3, #0
 800adf2:	4252      	negs	r2, r2
 800adf4:	6062      	str	r2, [r4, #4]
 800adf6:	a904      	add	r1, sp, #16
 800adf8:	3254      	adds	r2, #84	; 0x54
 800adfa:	1852      	adds	r2, r2, r1
 800adfc:	1c6e      	adds	r6, r5, #1
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	60e3      	str	r3, [r4, #12]
 800ae02:	60a3      	str	r3, [r4, #8]
 800ae04:	7013      	strb	r3, [r2, #0]
 800ae06:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae08:	4b55      	ldr	r3, [pc, #340]	; (800af60 <_svfiprintf_r+0x1ec>)
 800ae0a:	2205      	movs	r2, #5
 800ae0c:	0018      	movs	r0, r3
 800ae0e:	7831      	ldrb	r1, [r6, #0]
 800ae10:	9305      	str	r3, [sp, #20]
 800ae12:	f000 fa55 	bl	800b2c0 <memchr>
 800ae16:	1c75      	adds	r5, r6, #1
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d11f      	bne.n	800ae5c <_svfiprintf_r+0xe8>
 800ae1c:	6822      	ldr	r2, [r4, #0]
 800ae1e:	06d3      	lsls	r3, r2, #27
 800ae20:	d504      	bpl.n	800ae2c <_svfiprintf_r+0xb8>
 800ae22:	2353      	movs	r3, #83	; 0x53
 800ae24:	a904      	add	r1, sp, #16
 800ae26:	185b      	adds	r3, r3, r1
 800ae28:	2120      	movs	r1, #32
 800ae2a:	7019      	strb	r1, [r3, #0]
 800ae2c:	0713      	lsls	r3, r2, #28
 800ae2e:	d504      	bpl.n	800ae3a <_svfiprintf_r+0xc6>
 800ae30:	2353      	movs	r3, #83	; 0x53
 800ae32:	a904      	add	r1, sp, #16
 800ae34:	185b      	adds	r3, r3, r1
 800ae36:	212b      	movs	r1, #43	; 0x2b
 800ae38:	7019      	strb	r1, [r3, #0]
 800ae3a:	7833      	ldrb	r3, [r6, #0]
 800ae3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae3e:	d016      	beq.n	800ae6e <_svfiprintf_r+0xfa>
 800ae40:	0035      	movs	r5, r6
 800ae42:	2100      	movs	r1, #0
 800ae44:	200a      	movs	r0, #10
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	782a      	ldrb	r2, [r5, #0]
 800ae4a:	1c6e      	adds	r6, r5, #1
 800ae4c:	3a30      	subs	r2, #48	; 0x30
 800ae4e:	2a09      	cmp	r2, #9
 800ae50:	d94e      	bls.n	800aef0 <_svfiprintf_r+0x17c>
 800ae52:	2900      	cmp	r1, #0
 800ae54:	d111      	bne.n	800ae7a <_svfiprintf_r+0x106>
 800ae56:	e017      	b.n	800ae88 <_svfiprintf_r+0x114>
 800ae58:	3501      	adds	r5, #1
 800ae5a:	e7af      	b.n	800adbc <_svfiprintf_r+0x48>
 800ae5c:	9b05      	ldr	r3, [sp, #20]
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	2301      	movs	r3, #1
 800ae64:	4083      	lsls	r3, r0
 800ae66:	4313      	orrs	r3, r2
 800ae68:	002e      	movs	r6, r5
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	e7cc      	b.n	800ae08 <_svfiprintf_r+0x94>
 800ae6e:	9b07      	ldr	r3, [sp, #28]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	9107      	str	r1, [sp, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	db01      	blt.n	800ae7e <_svfiprintf_r+0x10a>
 800ae7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae7c:	e004      	b.n	800ae88 <_svfiprintf_r+0x114>
 800ae7e:	425b      	negs	r3, r3
 800ae80:	60e3      	str	r3, [r4, #12]
 800ae82:	2302      	movs	r3, #2
 800ae84:	4313      	orrs	r3, r2
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	782b      	ldrb	r3, [r5, #0]
 800ae8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae8c:	d10a      	bne.n	800aea4 <_svfiprintf_r+0x130>
 800ae8e:	786b      	ldrb	r3, [r5, #1]
 800ae90:	2b2a      	cmp	r3, #42	; 0x2a
 800ae92:	d135      	bne.n	800af00 <_svfiprintf_r+0x18c>
 800ae94:	9b07      	ldr	r3, [sp, #28]
 800ae96:	3502      	adds	r5, #2
 800ae98:	1d1a      	adds	r2, r3, #4
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	9207      	str	r2, [sp, #28]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	db2b      	blt.n	800aefa <_svfiprintf_r+0x186>
 800aea2:	9309      	str	r3, [sp, #36]	; 0x24
 800aea4:	4e2f      	ldr	r6, [pc, #188]	; (800af64 <_svfiprintf_r+0x1f0>)
 800aea6:	2203      	movs	r2, #3
 800aea8:	0030      	movs	r0, r6
 800aeaa:	7829      	ldrb	r1, [r5, #0]
 800aeac:	f000 fa08 	bl	800b2c0 <memchr>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d006      	beq.n	800aec2 <_svfiprintf_r+0x14e>
 800aeb4:	2340      	movs	r3, #64	; 0x40
 800aeb6:	1b80      	subs	r0, r0, r6
 800aeb8:	4083      	lsls	r3, r0
 800aeba:	6822      	ldr	r2, [r4, #0]
 800aebc:	3501      	adds	r5, #1
 800aebe:	4313      	orrs	r3, r2
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	7829      	ldrb	r1, [r5, #0]
 800aec4:	2206      	movs	r2, #6
 800aec6:	4828      	ldr	r0, [pc, #160]	; (800af68 <_svfiprintf_r+0x1f4>)
 800aec8:	1c6e      	adds	r6, r5, #1
 800aeca:	7621      	strb	r1, [r4, #24]
 800aecc:	f000 f9f8 	bl	800b2c0 <memchr>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d03c      	beq.n	800af4e <_svfiprintf_r+0x1da>
 800aed4:	4b25      	ldr	r3, [pc, #148]	; (800af6c <_svfiprintf_r+0x1f8>)
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d125      	bne.n	800af26 <_svfiprintf_r+0x1b2>
 800aeda:	2207      	movs	r2, #7
 800aedc:	9b07      	ldr	r3, [sp, #28]
 800aede:	3307      	adds	r3, #7
 800aee0:	4393      	bics	r3, r2
 800aee2:	3308      	adds	r3, #8
 800aee4:	9307      	str	r3, [sp, #28]
 800aee6:	6963      	ldr	r3, [r4, #20]
 800aee8:	9a04      	ldr	r2, [sp, #16]
 800aeea:	189b      	adds	r3, r3, r2
 800aeec:	6163      	str	r3, [r4, #20]
 800aeee:	e764      	b.n	800adba <_svfiprintf_r+0x46>
 800aef0:	4343      	muls	r3, r0
 800aef2:	0035      	movs	r5, r6
 800aef4:	2101      	movs	r1, #1
 800aef6:	189b      	adds	r3, r3, r2
 800aef8:	e7a6      	b.n	800ae48 <_svfiprintf_r+0xd4>
 800aefa:	2301      	movs	r3, #1
 800aefc:	425b      	negs	r3, r3
 800aefe:	e7d0      	b.n	800aea2 <_svfiprintf_r+0x12e>
 800af00:	2300      	movs	r3, #0
 800af02:	200a      	movs	r0, #10
 800af04:	001a      	movs	r2, r3
 800af06:	3501      	adds	r5, #1
 800af08:	6063      	str	r3, [r4, #4]
 800af0a:	7829      	ldrb	r1, [r5, #0]
 800af0c:	1c6e      	adds	r6, r5, #1
 800af0e:	3930      	subs	r1, #48	; 0x30
 800af10:	2909      	cmp	r1, #9
 800af12:	d903      	bls.n	800af1c <_svfiprintf_r+0x1a8>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d0c5      	beq.n	800aea4 <_svfiprintf_r+0x130>
 800af18:	9209      	str	r2, [sp, #36]	; 0x24
 800af1a:	e7c3      	b.n	800aea4 <_svfiprintf_r+0x130>
 800af1c:	4342      	muls	r2, r0
 800af1e:	0035      	movs	r5, r6
 800af20:	2301      	movs	r3, #1
 800af22:	1852      	adds	r2, r2, r1
 800af24:	e7f1      	b.n	800af0a <_svfiprintf_r+0x196>
 800af26:	aa07      	add	r2, sp, #28
 800af28:	9200      	str	r2, [sp, #0]
 800af2a:	0021      	movs	r1, r4
 800af2c:	003a      	movs	r2, r7
 800af2e:	4b10      	ldr	r3, [pc, #64]	; (800af70 <_svfiprintf_r+0x1fc>)
 800af30:	9803      	ldr	r0, [sp, #12]
 800af32:	e000      	b.n	800af36 <_svfiprintf_r+0x1c2>
 800af34:	bf00      	nop
 800af36:	9004      	str	r0, [sp, #16]
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	d1d3      	bne.n	800aee6 <_svfiprintf_r+0x172>
 800af3e:	89bb      	ldrh	r3, [r7, #12]
 800af40:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af42:	065b      	lsls	r3, r3, #25
 800af44:	d400      	bmi.n	800af48 <_svfiprintf_r+0x1d4>
 800af46:	e72c      	b.n	800ada2 <_svfiprintf_r+0x2e>
 800af48:	2001      	movs	r0, #1
 800af4a:	4240      	negs	r0, r0
 800af4c:	e729      	b.n	800ada2 <_svfiprintf_r+0x2e>
 800af4e:	aa07      	add	r2, sp, #28
 800af50:	9200      	str	r2, [sp, #0]
 800af52:	0021      	movs	r1, r4
 800af54:	003a      	movs	r2, r7
 800af56:	4b06      	ldr	r3, [pc, #24]	; (800af70 <_svfiprintf_r+0x1fc>)
 800af58:	9803      	ldr	r0, [sp, #12]
 800af5a:	f000 f87b 	bl	800b054 <_printf_i>
 800af5e:	e7ea      	b.n	800af36 <_svfiprintf_r+0x1c2>
 800af60:	0800bf4e 	.word	0x0800bf4e
 800af64:	0800bf54 	.word	0x0800bf54
 800af68:	0800bf58 	.word	0x0800bf58
 800af6c:	00000000 	.word	0x00000000
 800af70:	0800acb1 	.word	0x0800acb1

0800af74 <_printf_common>:
 800af74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af76:	0016      	movs	r6, r2
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	688a      	ldr	r2, [r1, #8]
 800af7c:	690b      	ldr	r3, [r1, #16]
 800af7e:	000c      	movs	r4, r1
 800af80:	9000      	str	r0, [sp, #0]
 800af82:	4293      	cmp	r3, r2
 800af84:	da00      	bge.n	800af88 <_printf_common+0x14>
 800af86:	0013      	movs	r3, r2
 800af88:	0022      	movs	r2, r4
 800af8a:	6033      	str	r3, [r6, #0]
 800af8c:	3243      	adds	r2, #67	; 0x43
 800af8e:	7812      	ldrb	r2, [r2, #0]
 800af90:	2a00      	cmp	r2, #0
 800af92:	d001      	beq.n	800af98 <_printf_common+0x24>
 800af94:	3301      	adds	r3, #1
 800af96:	6033      	str	r3, [r6, #0]
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	069b      	lsls	r3, r3, #26
 800af9c:	d502      	bpl.n	800afa4 <_printf_common+0x30>
 800af9e:	6833      	ldr	r3, [r6, #0]
 800afa0:	3302      	adds	r3, #2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	6822      	ldr	r2, [r4, #0]
 800afa6:	2306      	movs	r3, #6
 800afa8:	0015      	movs	r5, r2
 800afaa:	401d      	ands	r5, r3
 800afac:	421a      	tst	r2, r3
 800afae:	d027      	beq.n	800b000 <_printf_common+0x8c>
 800afb0:	0023      	movs	r3, r4
 800afb2:	3343      	adds	r3, #67	; 0x43
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	1e5a      	subs	r2, r3, #1
 800afb8:	4193      	sbcs	r3, r2
 800afba:	6822      	ldr	r2, [r4, #0]
 800afbc:	0692      	lsls	r2, r2, #26
 800afbe:	d430      	bmi.n	800b022 <_printf_common+0xae>
 800afc0:	0022      	movs	r2, r4
 800afc2:	9901      	ldr	r1, [sp, #4]
 800afc4:	9800      	ldr	r0, [sp, #0]
 800afc6:	9d08      	ldr	r5, [sp, #32]
 800afc8:	3243      	adds	r2, #67	; 0x43
 800afca:	47a8      	blx	r5
 800afcc:	3001      	adds	r0, #1
 800afce:	d025      	beq.n	800b01c <_printf_common+0xa8>
 800afd0:	2206      	movs	r2, #6
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	2500      	movs	r5, #0
 800afd6:	4013      	ands	r3, r2
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d105      	bne.n	800afe8 <_printf_common+0x74>
 800afdc:	6833      	ldr	r3, [r6, #0]
 800afde:	68e5      	ldr	r5, [r4, #12]
 800afe0:	1aed      	subs	r5, r5, r3
 800afe2:	43eb      	mvns	r3, r5
 800afe4:	17db      	asrs	r3, r3, #31
 800afe6:	401d      	ands	r5, r3
 800afe8:	68a3      	ldr	r3, [r4, #8]
 800afea:	6922      	ldr	r2, [r4, #16]
 800afec:	4293      	cmp	r3, r2
 800afee:	dd01      	ble.n	800aff4 <_printf_common+0x80>
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	18ed      	adds	r5, r5, r3
 800aff4:	2600      	movs	r6, #0
 800aff6:	42b5      	cmp	r5, r6
 800aff8:	d120      	bne.n	800b03c <_printf_common+0xc8>
 800affa:	2000      	movs	r0, #0
 800affc:	e010      	b.n	800b020 <_printf_common+0xac>
 800affe:	3501      	adds	r5, #1
 800b000:	68e3      	ldr	r3, [r4, #12]
 800b002:	6832      	ldr	r2, [r6, #0]
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	42ab      	cmp	r3, r5
 800b008:	ddd2      	ble.n	800afb0 <_printf_common+0x3c>
 800b00a:	0022      	movs	r2, r4
 800b00c:	2301      	movs	r3, #1
 800b00e:	9901      	ldr	r1, [sp, #4]
 800b010:	9800      	ldr	r0, [sp, #0]
 800b012:	9f08      	ldr	r7, [sp, #32]
 800b014:	3219      	adds	r2, #25
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	d1f0      	bne.n	800affe <_printf_common+0x8a>
 800b01c:	2001      	movs	r0, #1
 800b01e:	4240      	negs	r0, r0
 800b020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b022:	2030      	movs	r0, #48	; 0x30
 800b024:	18e1      	adds	r1, r4, r3
 800b026:	3143      	adds	r1, #67	; 0x43
 800b028:	7008      	strb	r0, [r1, #0]
 800b02a:	0021      	movs	r1, r4
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	3145      	adds	r1, #69	; 0x45
 800b030:	7809      	ldrb	r1, [r1, #0]
 800b032:	18a2      	adds	r2, r4, r2
 800b034:	3243      	adds	r2, #67	; 0x43
 800b036:	3302      	adds	r3, #2
 800b038:	7011      	strb	r1, [r2, #0]
 800b03a:	e7c1      	b.n	800afc0 <_printf_common+0x4c>
 800b03c:	0022      	movs	r2, r4
 800b03e:	2301      	movs	r3, #1
 800b040:	9901      	ldr	r1, [sp, #4]
 800b042:	9800      	ldr	r0, [sp, #0]
 800b044:	9f08      	ldr	r7, [sp, #32]
 800b046:	321a      	adds	r2, #26
 800b048:	47b8      	blx	r7
 800b04a:	3001      	adds	r0, #1
 800b04c:	d0e6      	beq.n	800b01c <_printf_common+0xa8>
 800b04e:	3601      	adds	r6, #1
 800b050:	e7d1      	b.n	800aff6 <_printf_common+0x82>
	...

0800b054 <_printf_i>:
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	b08b      	sub	sp, #44	; 0x2c
 800b058:	9206      	str	r2, [sp, #24]
 800b05a:	000a      	movs	r2, r1
 800b05c:	3243      	adds	r2, #67	; 0x43
 800b05e:	9307      	str	r3, [sp, #28]
 800b060:	9005      	str	r0, [sp, #20]
 800b062:	9204      	str	r2, [sp, #16]
 800b064:	7e0a      	ldrb	r2, [r1, #24]
 800b066:	000c      	movs	r4, r1
 800b068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b06a:	2a78      	cmp	r2, #120	; 0x78
 800b06c:	d809      	bhi.n	800b082 <_printf_i+0x2e>
 800b06e:	2a62      	cmp	r2, #98	; 0x62
 800b070:	d80b      	bhi.n	800b08a <_printf_i+0x36>
 800b072:	2a00      	cmp	r2, #0
 800b074:	d100      	bne.n	800b078 <_printf_i+0x24>
 800b076:	e0be      	b.n	800b1f6 <_printf_i+0x1a2>
 800b078:	497c      	ldr	r1, [pc, #496]	; (800b26c <_printf_i+0x218>)
 800b07a:	9103      	str	r1, [sp, #12]
 800b07c:	2a58      	cmp	r2, #88	; 0x58
 800b07e:	d100      	bne.n	800b082 <_printf_i+0x2e>
 800b080:	e093      	b.n	800b1aa <_printf_i+0x156>
 800b082:	0026      	movs	r6, r4
 800b084:	3642      	adds	r6, #66	; 0x42
 800b086:	7032      	strb	r2, [r6, #0]
 800b088:	e022      	b.n	800b0d0 <_printf_i+0x7c>
 800b08a:	0010      	movs	r0, r2
 800b08c:	3863      	subs	r0, #99	; 0x63
 800b08e:	2815      	cmp	r0, #21
 800b090:	d8f7      	bhi.n	800b082 <_printf_i+0x2e>
 800b092:	f7f5 f855 	bl	8000140 <__gnu_thumb1_case_shi>
 800b096:	0016      	.short	0x0016
 800b098:	fff6001f 	.word	0xfff6001f
 800b09c:	fff6fff6 	.word	0xfff6fff6
 800b0a0:	001ffff6 	.word	0x001ffff6
 800b0a4:	fff6fff6 	.word	0xfff6fff6
 800b0a8:	fff6fff6 	.word	0xfff6fff6
 800b0ac:	003600a3 	.word	0x003600a3
 800b0b0:	fff60083 	.word	0xfff60083
 800b0b4:	00b4fff6 	.word	0x00b4fff6
 800b0b8:	0036fff6 	.word	0x0036fff6
 800b0bc:	fff6fff6 	.word	0xfff6fff6
 800b0c0:	0087      	.short	0x0087
 800b0c2:	0026      	movs	r6, r4
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	3642      	adds	r6, #66	; 0x42
 800b0c8:	1d11      	adds	r1, r2, #4
 800b0ca:	6019      	str	r1, [r3, #0]
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	7033      	strb	r3, [r6, #0]
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e0a2      	b.n	800b21a <_printf_i+0x1c6>
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	6809      	ldr	r1, [r1, #0]
 800b0d8:	1d02      	adds	r2, r0, #4
 800b0da:	060d      	lsls	r5, r1, #24
 800b0dc:	d50b      	bpl.n	800b0f6 <_printf_i+0xa2>
 800b0de:	6805      	ldr	r5, [r0, #0]
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	2d00      	cmp	r5, #0
 800b0e4:	da03      	bge.n	800b0ee <_printf_i+0x9a>
 800b0e6:	232d      	movs	r3, #45	; 0x2d
 800b0e8:	9a04      	ldr	r2, [sp, #16]
 800b0ea:	426d      	negs	r5, r5
 800b0ec:	7013      	strb	r3, [r2, #0]
 800b0ee:	4b5f      	ldr	r3, [pc, #380]	; (800b26c <_printf_i+0x218>)
 800b0f0:	270a      	movs	r7, #10
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	e01b      	b.n	800b12e <_printf_i+0xda>
 800b0f6:	6805      	ldr	r5, [r0, #0]
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	0649      	lsls	r1, r1, #25
 800b0fc:	d5f1      	bpl.n	800b0e2 <_printf_i+0x8e>
 800b0fe:	b22d      	sxth	r5, r5
 800b100:	e7ef      	b.n	800b0e2 <_printf_i+0x8e>
 800b102:	680d      	ldr	r5, [r1, #0]
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	1d08      	adds	r0, r1, #4
 800b108:	6018      	str	r0, [r3, #0]
 800b10a:	062e      	lsls	r6, r5, #24
 800b10c:	d501      	bpl.n	800b112 <_printf_i+0xbe>
 800b10e:	680d      	ldr	r5, [r1, #0]
 800b110:	e003      	b.n	800b11a <_printf_i+0xc6>
 800b112:	066d      	lsls	r5, r5, #25
 800b114:	d5fb      	bpl.n	800b10e <_printf_i+0xba>
 800b116:	680d      	ldr	r5, [r1, #0]
 800b118:	b2ad      	uxth	r5, r5
 800b11a:	4b54      	ldr	r3, [pc, #336]	; (800b26c <_printf_i+0x218>)
 800b11c:	2708      	movs	r7, #8
 800b11e:	9303      	str	r3, [sp, #12]
 800b120:	2a6f      	cmp	r2, #111	; 0x6f
 800b122:	d000      	beq.n	800b126 <_printf_i+0xd2>
 800b124:	3702      	adds	r7, #2
 800b126:	0023      	movs	r3, r4
 800b128:	2200      	movs	r2, #0
 800b12a:	3343      	adds	r3, #67	; 0x43
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	60a3      	str	r3, [r4, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	db03      	blt.n	800b13e <_printf_i+0xea>
 800b136:	2104      	movs	r1, #4
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	438a      	bics	r2, r1
 800b13c:	6022      	str	r2, [r4, #0]
 800b13e:	2d00      	cmp	r5, #0
 800b140:	d102      	bne.n	800b148 <_printf_i+0xf4>
 800b142:	9e04      	ldr	r6, [sp, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00c      	beq.n	800b162 <_printf_i+0x10e>
 800b148:	9e04      	ldr	r6, [sp, #16]
 800b14a:	0028      	movs	r0, r5
 800b14c:	0039      	movs	r1, r7
 800b14e:	f7f5 f887 	bl	8000260 <__aeabi_uidivmod>
 800b152:	9b03      	ldr	r3, [sp, #12]
 800b154:	3e01      	subs	r6, #1
 800b156:	5c5b      	ldrb	r3, [r3, r1]
 800b158:	7033      	strb	r3, [r6, #0]
 800b15a:	002b      	movs	r3, r5
 800b15c:	0005      	movs	r5, r0
 800b15e:	429f      	cmp	r7, r3
 800b160:	d9f3      	bls.n	800b14a <_printf_i+0xf6>
 800b162:	2f08      	cmp	r7, #8
 800b164:	d109      	bne.n	800b17a <_printf_i+0x126>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	07db      	lsls	r3, r3, #31
 800b16a:	d506      	bpl.n	800b17a <_printf_i+0x126>
 800b16c:	6862      	ldr	r2, [r4, #4]
 800b16e:	6923      	ldr	r3, [r4, #16]
 800b170:	429a      	cmp	r2, r3
 800b172:	dc02      	bgt.n	800b17a <_printf_i+0x126>
 800b174:	2330      	movs	r3, #48	; 0x30
 800b176:	3e01      	subs	r6, #1
 800b178:	7033      	strb	r3, [r6, #0]
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	1b9b      	subs	r3, r3, r6
 800b17e:	6123      	str	r3, [r4, #16]
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	0021      	movs	r1, r4
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	9805      	ldr	r0, [sp, #20]
 800b188:	9b06      	ldr	r3, [sp, #24]
 800b18a:	aa09      	add	r2, sp, #36	; 0x24
 800b18c:	f7ff fef2 	bl	800af74 <_printf_common>
 800b190:	3001      	adds	r0, #1
 800b192:	d147      	bne.n	800b224 <_printf_i+0x1d0>
 800b194:	2001      	movs	r0, #1
 800b196:	4240      	negs	r0, r0
 800b198:	b00b      	add	sp, #44	; 0x2c
 800b19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19c:	2220      	movs	r2, #32
 800b19e:	6809      	ldr	r1, [r1, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	6022      	str	r2, [r4, #0]
 800b1a4:	2278      	movs	r2, #120	; 0x78
 800b1a6:	4932      	ldr	r1, [pc, #200]	; (800b270 <_printf_i+0x21c>)
 800b1a8:	9103      	str	r1, [sp, #12]
 800b1aa:	0021      	movs	r1, r4
 800b1ac:	3145      	adds	r1, #69	; 0x45
 800b1ae:	700a      	strb	r2, [r1, #0]
 800b1b0:	6819      	ldr	r1, [r3, #0]
 800b1b2:	6822      	ldr	r2, [r4, #0]
 800b1b4:	c920      	ldmia	r1!, {r5}
 800b1b6:	0610      	lsls	r0, r2, #24
 800b1b8:	d402      	bmi.n	800b1c0 <_printf_i+0x16c>
 800b1ba:	0650      	lsls	r0, r2, #25
 800b1bc:	d500      	bpl.n	800b1c0 <_printf_i+0x16c>
 800b1be:	b2ad      	uxth	r5, r5
 800b1c0:	6019      	str	r1, [r3, #0]
 800b1c2:	07d3      	lsls	r3, r2, #31
 800b1c4:	d502      	bpl.n	800b1cc <_printf_i+0x178>
 800b1c6:	2320      	movs	r3, #32
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	2710      	movs	r7, #16
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	d1a9      	bne.n	800b126 <_printf_i+0xd2>
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	4393      	bics	r3, r2
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	e7a4      	b.n	800b126 <_printf_i+0xd2>
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	680d      	ldr	r5, [r1, #0]
 800b1e0:	1d10      	adds	r0, r2, #4
 800b1e2:	6949      	ldr	r1, [r1, #20]
 800b1e4:	6018      	str	r0, [r3, #0]
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	062e      	lsls	r6, r5, #24
 800b1ea:	d501      	bpl.n	800b1f0 <_printf_i+0x19c>
 800b1ec:	6019      	str	r1, [r3, #0]
 800b1ee:	e002      	b.n	800b1f6 <_printf_i+0x1a2>
 800b1f0:	066d      	lsls	r5, r5, #25
 800b1f2:	d5fb      	bpl.n	800b1ec <_printf_i+0x198>
 800b1f4:	8019      	strh	r1, [r3, #0]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9e04      	ldr	r6, [sp, #16]
 800b1fa:	6123      	str	r3, [r4, #16]
 800b1fc:	e7c0      	b.n	800b180 <_printf_i+0x12c>
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	1d11      	adds	r1, r2, #4
 800b202:	6019      	str	r1, [r3, #0]
 800b204:	6816      	ldr	r6, [r2, #0]
 800b206:	2100      	movs	r1, #0
 800b208:	0030      	movs	r0, r6
 800b20a:	6862      	ldr	r2, [r4, #4]
 800b20c:	f000 f858 	bl	800b2c0 <memchr>
 800b210:	2800      	cmp	r0, #0
 800b212:	d001      	beq.n	800b218 <_printf_i+0x1c4>
 800b214:	1b80      	subs	r0, r0, r6
 800b216:	6060      	str	r0, [r4, #4]
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	6123      	str	r3, [r4, #16]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9a04      	ldr	r2, [sp, #16]
 800b220:	7013      	strb	r3, [r2, #0]
 800b222:	e7ad      	b.n	800b180 <_printf_i+0x12c>
 800b224:	0032      	movs	r2, r6
 800b226:	6923      	ldr	r3, [r4, #16]
 800b228:	9906      	ldr	r1, [sp, #24]
 800b22a:	9805      	ldr	r0, [sp, #20]
 800b22c:	9d07      	ldr	r5, [sp, #28]
 800b22e:	47a8      	blx	r5
 800b230:	3001      	adds	r0, #1
 800b232:	d0af      	beq.n	800b194 <_printf_i+0x140>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	079b      	lsls	r3, r3, #30
 800b238:	d415      	bmi.n	800b266 <_printf_i+0x212>
 800b23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23c:	68e0      	ldr	r0, [r4, #12]
 800b23e:	4298      	cmp	r0, r3
 800b240:	daaa      	bge.n	800b198 <_printf_i+0x144>
 800b242:	0018      	movs	r0, r3
 800b244:	e7a8      	b.n	800b198 <_printf_i+0x144>
 800b246:	0022      	movs	r2, r4
 800b248:	2301      	movs	r3, #1
 800b24a:	9906      	ldr	r1, [sp, #24]
 800b24c:	9805      	ldr	r0, [sp, #20]
 800b24e:	9e07      	ldr	r6, [sp, #28]
 800b250:	3219      	adds	r2, #25
 800b252:	47b0      	blx	r6
 800b254:	3001      	adds	r0, #1
 800b256:	d09d      	beq.n	800b194 <_printf_i+0x140>
 800b258:	3501      	adds	r5, #1
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b25e:	1a9b      	subs	r3, r3, r2
 800b260:	42ab      	cmp	r3, r5
 800b262:	dcf0      	bgt.n	800b246 <_printf_i+0x1f2>
 800b264:	e7e9      	b.n	800b23a <_printf_i+0x1e6>
 800b266:	2500      	movs	r5, #0
 800b268:	e7f7      	b.n	800b25a <_printf_i+0x206>
 800b26a:	46c0      	nop			; (mov r8, r8)
 800b26c:	0800bf5f 	.word	0x0800bf5f
 800b270:	0800bf70 	.word	0x0800bf70

0800b274 <memmove>:
 800b274:	b510      	push	{r4, lr}
 800b276:	4288      	cmp	r0, r1
 800b278:	d902      	bls.n	800b280 <memmove+0xc>
 800b27a:	188b      	adds	r3, r1, r2
 800b27c:	4298      	cmp	r0, r3
 800b27e:	d303      	bcc.n	800b288 <memmove+0x14>
 800b280:	2300      	movs	r3, #0
 800b282:	e007      	b.n	800b294 <memmove+0x20>
 800b284:	5c8b      	ldrb	r3, [r1, r2]
 800b286:	5483      	strb	r3, [r0, r2]
 800b288:	3a01      	subs	r2, #1
 800b28a:	d2fb      	bcs.n	800b284 <memmove+0x10>
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	5ccc      	ldrb	r4, [r1, r3]
 800b290:	54c4      	strb	r4, [r0, r3]
 800b292:	3301      	adds	r3, #1
 800b294:	429a      	cmp	r2, r3
 800b296:	d1fa      	bne.n	800b28e <memmove+0x1a>
 800b298:	e7f8      	b.n	800b28c <memmove+0x18>
	...

0800b29c <_sbrk_r>:
 800b29c:	2300      	movs	r3, #0
 800b29e:	b570      	push	{r4, r5, r6, lr}
 800b2a0:	4d06      	ldr	r5, [pc, #24]	; (800b2bc <_sbrk_r+0x20>)
 800b2a2:	0004      	movs	r4, r0
 800b2a4:	0008      	movs	r0, r1
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7f7 f92e 	bl	8002508 <_sbrk>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d103      	bne.n	800b2b8 <_sbrk_r+0x1c>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d000      	beq.n	800b2b8 <_sbrk_r+0x1c>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	20001a4c 	.word	0x20001a4c

0800b2c0 <memchr>:
 800b2c0:	b2c9      	uxtb	r1, r1
 800b2c2:	1882      	adds	r2, r0, r2
 800b2c4:	4290      	cmp	r0, r2
 800b2c6:	d101      	bne.n	800b2cc <memchr+0xc>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	4770      	bx	lr
 800b2cc:	7803      	ldrb	r3, [r0, #0]
 800b2ce:	428b      	cmp	r3, r1
 800b2d0:	d0fb      	beq.n	800b2ca <memchr+0xa>
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	e7f6      	b.n	800b2c4 <memchr+0x4>

0800b2d6 <_realloc_r>:
 800b2d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2d8:	0007      	movs	r7, r0
 800b2da:	000e      	movs	r6, r1
 800b2dc:	0014      	movs	r4, r2
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d105      	bne.n	800b2ee <_realloc_r+0x18>
 800b2e2:	0011      	movs	r1, r2
 800b2e4:	f7ff fc52 	bl	800ab8c <_malloc_r>
 800b2e8:	0005      	movs	r5, r0
 800b2ea:	0028      	movs	r0, r5
 800b2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	d103      	bne.n	800b2fa <_realloc_r+0x24>
 800b2f2:	f7ff fbdf 	bl	800aab4 <_free_r>
 800b2f6:	0025      	movs	r5, r4
 800b2f8:	e7f7      	b.n	800b2ea <_realloc_r+0x14>
 800b2fa:	f000 f81b 	bl	800b334 <_malloc_usable_size_r>
 800b2fe:	9001      	str	r0, [sp, #4]
 800b300:	4284      	cmp	r4, r0
 800b302:	d803      	bhi.n	800b30c <_realloc_r+0x36>
 800b304:	0035      	movs	r5, r6
 800b306:	0843      	lsrs	r3, r0, #1
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d3ee      	bcc.n	800b2ea <_realloc_r+0x14>
 800b30c:	0021      	movs	r1, r4
 800b30e:	0038      	movs	r0, r7
 800b310:	f7ff fc3c 	bl	800ab8c <_malloc_r>
 800b314:	1e05      	subs	r5, r0, #0
 800b316:	d0e8      	beq.n	800b2ea <_realloc_r+0x14>
 800b318:	9b01      	ldr	r3, [sp, #4]
 800b31a:	0022      	movs	r2, r4
 800b31c:	429c      	cmp	r4, r3
 800b31e:	d900      	bls.n	800b322 <_realloc_r+0x4c>
 800b320:	001a      	movs	r2, r3
 800b322:	0031      	movs	r1, r6
 800b324:	0028      	movs	r0, r5
 800b326:	f7ff fbbb 	bl	800aaa0 <memcpy>
 800b32a:	0031      	movs	r1, r6
 800b32c:	0038      	movs	r0, r7
 800b32e:	f7ff fbc1 	bl	800aab4 <_free_r>
 800b332:	e7da      	b.n	800b2ea <_realloc_r+0x14>

0800b334 <_malloc_usable_size_r>:
 800b334:	1f0b      	subs	r3, r1, #4
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	1f18      	subs	r0, r3, #4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	da01      	bge.n	800b342 <_malloc_usable_size_r+0xe>
 800b33e:	580b      	ldr	r3, [r1, r0]
 800b340:	18c0      	adds	r0, r0, r3
 800b342:	4770      	bx	lr

0800b344 <_init>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	46c0      	nop			; (mov r8, r8)
 800b348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b34a:	bc08      	pop	{r3}
 800b34c:	469e      	mov	lr, r3
 800b34e:	4770      	bx	lr

0800b350 <_fini>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b356:	bc08      	pop	{r3}
 800b358:	469e      	mov	lr, r3
 800b35a:	4770      	bx	lr
