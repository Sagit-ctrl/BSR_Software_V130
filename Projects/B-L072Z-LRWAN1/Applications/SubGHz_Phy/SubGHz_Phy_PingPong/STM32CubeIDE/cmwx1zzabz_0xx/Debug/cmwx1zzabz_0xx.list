
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a790  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b160  0800b160  0001b160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b168  0800b168  0001b168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b16c  0800b16c  0001b16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b0  20000000  0800b170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000167c  200001b0  0800b320  000201b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000182c  0800b320  0002182c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e711  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000096e1  00000000  00000000  0004e92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e00  00000000  00000000  00058010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c0e  00000000  00000000  00059e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00011273  00000000  00000000  0005ba1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00041220  00000000  00000000  0006cc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a3f04  00000000  00000000  000adeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005cf0  00000000  00000000  00151db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00010f27  00000000  00000000  00157aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000011f  00000000  00000000  001689cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b0 	.word	0x200001b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a838 	.word	0x0800a838

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b4 	.word	0x200001b4
 8000104:	0800a838 	.word	0x0800a838

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f84c 	bl	800050c <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4699      	mov	r9, r3
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	469c      	mov	ip, r3
 800048a:	0413      	lsls	r3, r2, #16
 800048c:	4647      	mov	r7, r8
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	001d      	movs	r5, r3
 8000492:	000e      	movs	r6, r1
 8000494:	4661      	mov	r1, ip
 8000496:	0404      	lsls	r4, r0, #16
 8000498:	0c24      	lsrs	r4, r4, #16
 800049a:	b580      	push	{r7, lr}
 800049c:	0007      	movs	r7, r0
 800049e:	0c10      	lsrs	r0, r2, #16
 80004a0:	434b      	muls	r3, r1
 80004a2:	4365      	muls	r5, r4
 80004a4:	4341      	muls	r1, r0
 80004a6:	4360      	muls	r0, r4
 80004a8:	0c2c      	lsrs	r4, r5, #16
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	1820      	adds	r0, r4, r0
 80004ae:	468c      	mov	ip, r1
 80004b0:	4283      	cmp	r3, r0
 80004b2:	d903      	bls.n	80004bc <__aeabi_lmul+0x3c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	025b      	lsls	r3, r3, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	44c4      	add	ip, r8
 80004bc:	4649      	mov	r1, r9
 80004be:	4379      	muls	r1, r7
 80004c0:	4356      	muls	r6, r2
 80004c2:	0c03      	lsrs	r3, r0, #16
 80004c4:	042d      	lsls	r5, r5, #16
 80004c6:	0c2d      	lsrs	r5, r5, #16
 80004c8:	1989      	adds	r1, r1, r6
 80004ca:	4463      	add	r3, ip
 80004cc:	0400      	lsls	r0, r0, #16
 80004ce:	1940      	adds	r0, r0, r5
 80004d0:	18c9      	adds	r1, r1, r3
 80004d2:	bcc0      	pop	{r6, r7}
 80004d4:	46b9      	mov	r9, r7
 80004d6:	46b0      	mov	r8, r6
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_f2uiz>:
 80004dc:	219e      	movs	r1, #158	; 0x9e
 80004de:	b510      	push	{r4, lr}
 80004e0:	05c9      	lsls	r1, r1, #23
 80004e2:	1c04      	adds	r4, r0, #0
 80004e4:	f001 fcb6 	bl	8001e54 <__aeabi_fcmpge>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d103      	bne.n	80004f4 <__aeabi_f2uiz+0x18>
 80004ec:	1c20      	adds	r0, r4, #0
 80004ee:	f000 fd67 	bl	8000fc0 <__aeabi_f2iz>
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	219e      	movs	r1, #158	; 0x9e
 80004f6:	1c20      	adds	r0, r4, #0
 80004f8:	05c9      	lsls	r1, r1, #23
 80004fa:	f000 fbc1 	bl	8000c80 <__aeabi_fsub>
 80004fe:	f000 fd5f 	bl	8000fc0 <__aeabi_f2iz>
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	061b      	lsls	r3, r3, #24
 8000506:	469c      	mov	ip, r3
 8000508:	4460      	add	r0, ip
 800050a:	e7f2      	b.n	80004f2 <__aeabi_f2uiz+0x16>

0800050c <__udivmoddi4>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	4657      	mov	r7, sl
 8000510:	464e      	mov	r6, r9
 8000512:	4645      	mov	r5, r8
 8000514:	46de      	mov	lr, fp
 8000516:	b5e0      	push	{r5, r6, r7, lr}
 8000518:	0004      	movs	r4, r0
 800051a:	000d      	movs	r5, r1
 800051c:	4692      	mov	sl, r2
 800051e:	4699      	mov	r9, r3
 8000520:	b083      	sub	sp, #12
 8000522:	428b      	cmp	r3, r1
 8000524:	d830      	bhi.n	8000588 <__udivmoddi4+0x7c>
 8000526:	d02d      	beq.n	8000584 <__udivmoddi4+0x78>
 8000528:	4649      	mov	r1, r9
 800052a:	4650      	mov	r0, sl
 800052c:	f001 fcba 	bl	8001ea4 <__clzdi2>
 8000530:	0029      	movs	r1, r5
 8000532:	0006      	movs	r6, r0
 8000534:	0020      	movs	r0, r4
 8000536:	f001 fcb5 	bl	8001ea4 <__clzdi2>
 800053a:	1a33      	subs	r3, r6, r0
 800053c:	4698      	mov	r8, r3
 800053e:	3b20      	subs	r3, #32
 8000540:	d434      	bmi.n	80005ac <__udivmoddi4+0xa0>
 8000542:	469b      	mov	fp, r3
 8000544:	4653      	mov	r3, sl
 8000546:	465a      	mov	r2, fp
 8000548:	4093      	lsls	r3, r2
 800054a:	4642      	mov	r2, r8
 800054c:	001f      	movs	r7, r3
 800054e:	4653      	mov	r3, sl
 8000550:	4093      	lsls	r3, r2
 8000552:	001e      	movs	r6, r3
 8000554:	42af      	cmp	r7, r5
 8000556:	d83b      	bhi.n	80005d0 <__udivmoddi4+0xc4>
 8000558:	42af      	cmp	r7, r5
 800055a:	d100      	bne.n	800055e <__udivmoddi4+0x52>
 800055c:	e079      	b.n	8000652 <__udivmoddi4+0x146>
 800055e:	465b      	mov	r3, fp
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5e>
 8000568:	e076      	b.n	8000658 <__udivmoddi4+0x14c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	465a      	mov	r2, fp
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4642      	mov	r2, r8
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e029      	b.n	80005d8 <__udivmoddi4+0xcc>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9cf      	bls.n	8000528 <__udivmoddi4+0x1c>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8e>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b003      	add	sp, #12
 80005a0:	bcf0      	pop	{r4, r5, r6, r7}
 80005a2:	46bb      	mov	fp, r7
 80005a4:	46b2      	mov	sl, r6
 80005a6:	46a9      	mov	r9, r5
 80005a8:	46a0      	mov	r8, r4
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	4642      	mov	r2, r8
 80005ae:	469b      	mov	fp, r3
 80005b0:	2320      	movs	r3, #32
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	4652      	mov	r2, sl
 80005b6:	40da      	lsrs	r2, r3
 80005b8:	4641      	mov	r1, r8
 80005ba:	0013      	movs	r3, r2
 80005bc:	464a      	mov	r2, r9
 80005be:	408a      	lsls	r2, r1
 80005c0:	0017      	movs	r7, r2
 80005c2:	4642      	mov	r2, r8
 80005c4:	431f      	orrs	r7, r3
 80005c6:	4653      	mov	r3, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	001e      	movs	r6, r3
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d9c3      	bls.n	8000558 <__udivmoddi4+0x4c>
 80005d0:	2200      	movs	r2, #0
 80005d2:	2300      	movs	r3, #0
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	4643      	mov	r3, r8
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0d8      	beq.n	8000590 <__udivmoddi4+0x84>
 80005de:	07fb      	lsls	r3, r7, #31
 80005e0:	0872      	lsrs	r2, r6, #1
 80005e2:	431a      	orrs	r2, r3
 80005e4:	4646      	mov	r6, r8
 80005e6:	087b      	lsrs	r3, r7, #1
 80005e8:	e00e      	b.n	8000608 <__udivmoddi4+0xfc>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d101      	bne.n	80005f2 <__udivmoddi4+0xe6>
 80005ee:	42a2      	cmp	r2, r4
 80005f0:	d80c      	bhi.n	800060c <__udivmoddi4+0x100>
 80005f2:	1aa4      	subs	r4, r4, r2
 80005f4:	419d      	sbcs	r5, r3
 80005f6:	2001      	movs	r0, #1
 80005f8:	1924      	adds	r4, r4, r4
 80005fa:	416d      	adcs	r5, r5
 80005fc:	2100      	movs	r1, #0
 80005fe:	3e01      	subs	r6, #1
 8000600:	1824      	adds	r4, r4, r0
 8000602:	414d      	adcs	r5, r1
 8000604:	2e00      	cmp	r6, #0
 8000606:	d006      	beq.n	8000616 <__udivmoddi4+0x10a>
 8000608:	42ab      	cmp	r3, r5
 800060a:	d9ee      	bls.n	80005ea <__udivmoddi4+0xde>
 800060c:	3e01      	subs	r6, #1
 800060e:	1924      	adds	r4, r4, r4
 8000610:	416d      	adcs	r5, r5
 8000612:	2e00      	cmp	r6, #0
 8000614:	d1f8      	bne.n	8000608 <__udivmoddi4+0xfc>
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	465b      	mov	r3, fp
 800061c:	1900      	adds	r0, r0, r4
 800061e:	4169      	adcs	r1, r5
 8000620:	2b00      	cmp	r3, #0
 8000622:	db24      	blt.n	800066e <__udivmoddi4+0x162>
 8000624:	002b      	movs	r3, r5
 8000626:	465a      	mov	r2, fp
 8000628:	4644      	mov	r4, r8
 800062a:	40d3      	lsrs	r3, r2
 800062c:	002a      	movs	r2, r5
 800062e:	40e2      	lsrs	r2, r4
 8000630:	001c      	movs	r4, r3
 8000632:	465b      	mov	r3, fp
 8000634:	0015      	movs	r5, r2
 8000636:	2b00      	cmp	r3, #0
 8000638:	db2a      	blt.n	8000690 <__udivmoddi4+0x184>
 800063a:	0026      	movs	r6, r4
 800063c:	409e      	lsls	r6, r3
 800063e:	0033      	movs	r3, r6
 8000640:	0026      	movs	r6, r4
 8000642:	4647      	mov	r7, r8
 8000644:	40be      	lsls	r6, r7
 8000646:	0032      	movs	r2, r6
 8000648:	1a80      	subs	r0, r0, r2
 800064a:	4199      	sbcs	r1, r3
 800064c:	9000      	str	r0, [sp, #0]
 800064e:	9101      	str	r1, [sp, #4]
 8000650:	e79e      	b.n	8000590 <__udivmoddi4+0x84>
 8000652:	42a3      	cmp	r3, r4
 8000654:	d8bc      	bhi.n	80005d0 <__udivmoddi4+0xc4>
 8000656:	e782      	b.n	800055e <__udivmoddi4+0x52>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	2100      	movs	r1, #0
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	9100      	str	r1, [sp, #0]
 8000664:	9201      	str	r2, [sp, #4]
 8000666:	2201      	movs	r2, #1
 8000668:	40da      	lsrs	r2, r3
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	e785      	b.n	800057a <__udivmoddi4+0x6e>
 800066e:	4642      	mov	r2, r8
 8000670:	2320      	movs	r3, #32
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	002a      	movs	r2, r5
 8000676:	4646      	mov	r6, r8
 8000678:	409a      	lsls	r2, r3
 800067a:	0023      	movs	r3, r4
 800067c:	40f3      	lsrs	r3, r6
 800067e:	4644      	mov	r4, r8
 8000680:	4313      	orrs	r3, r2
 8000682:	002a      	movs	r2, r5
 8000684:	40e2      	lsrs	r2, r4
 8000686:	001c      	movs	r4, r3
 8000688:	465b      	mov	r3, fp
 800068a:	0015      	movs	r5, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	dad4      	bge.n	800063a <__udivmoddi4+0x12e>
 8000690:	4642      	mov	r2, r8
 8000692:	002f      	movs	r7, r5
 8000694:	2320      	movs	r3, #32
 8000696:	0026      	movs	r6, r4
 8000698:	4097      	lsls	r7, r2
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	40de      	lsrs	r6, r3
 800069e:	003b      	movs	r3, r7
 80006a0:	4333      	orrs	r3, r6
 80006a2:	e7cd      	b.n	8000640 <__udivmoddi4+0x134>

080006a4 <__aeabi_fadd>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	4647      	mov	r7, r8
 80006a8:	46ce      	mov	lr, r9
 80006aa:	024a      	lsls	r2, r1, #9
 80006ac:	0243      	lsls	r3, r0, #9
 80006ae:	0045      	lsls	r5, r0, #1
 80006b0:	0fc4      	lsrs	r4, r0, #31
 80006b2:	0a50      	lsrs	r0, r2, #9
 80006b4:	4680      	mov	r8, r0
 80006b6:	0048      	lsls	r0, r1, #1
 80006b8:	0a5b      	lsrs	r3, r3, #9
 80006ba:	0e00      	lsrs	r0, r0, #24
 80006bc:	0992      	lsrs	r2, r2, #6
 80006be:	4694      	mov	ip, r2
 80006c0:	b580      	push	{r7, lr}
 80006c2:	001e      	movs	r6, r3
 80006c4:	4681      	mov	r9, r0
 80006c6:	0002      	movs	r2, r0
 80006c8:	0e2d      	lsrs	r5, r5, #24
 80006ca:	00df      	lsls	r7, r3, #3
 80006cc:	0fc9      	lsrs	r1, r1, #31
 80006ce:	428c      	cmp	r4, r1
 80006d0:	d024      	beq.n	800071c <__aeabi_fadd+0x78>
 80006d2:	1a28      	subs	r0, r5, r0
 80006d4:	2800      	cmp	r0, #0
 80006d6:	dd0e      	ble.n	80006f6 <__aeabi_fadd+0x52>
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d13e      	bne.n	800075a <__aeabi_fadd+0xb6>
 80006dc:	4662      	mov	r2, ip
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x40>
 80006e2:	e0fd      	b.n	80008e0 <__aeabi_fadd+0x23c>
 80006e4:	1e42      	subs	r2, r0, #1
 80006e6:	2801      	cmp	r0, #1
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x48>
 80006ea:	e137      	b.n	800095c <__aeabi_fadd+0x2b8>
 80006ec:	28ff      	cmp	r0, #255	; 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x4e>
 80006f0:	e0a9      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80006f2:	0010      	movs	r0, r2
 80006f4:	e039      	b.n	800076a <__aeabi_fadd+0xc6>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d063      	beq.n	80007c2 <__aeabi_fadd+0x11e>
 80006fa:	464b      	mov	r3, r9
 80006fc:	1b52      	subs	r2, r2, r5
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x60>
 8000702:	e0e0      	b.n	80008c6 <__aeabi_fadd+0x222>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x66>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_fadd+0x204>
 800070a:	1e53      	subs	r3, r2, #1
 800070c:	2a01      	cmp	r2, #1
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x6e>
 8000710:	e155      	b.n	80009be <__aeabi_fadd+0x31a>
 8000712:	2aff      	cmp	r2, #255	; 0xff
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x74>
 8000716:	e094      	b.n	8000842 <__aeabi_fadd+0x19e>
 8000718:	001a      	movs	r2, r3
 800071a:	e0d9      	b.n	80008d0 <__aeabi_fadd+0x22c>
 800071c:	1a2a      	subs	r2, r5, r0
 800071e:	2a00      	cmp	r2, #0
 8000720:	dc00      	bgt.n	8000724 <__aeabi_fadd+0x80>
 8000722:	e099      	b.n	8000858 <__aeabi_fadd+0x1b4>
 8000724:	2800      	cmp	r0, #0
 8000726:	d062      	beq.n	80007ee <__aeabi_fadd+0x14a>
 8000728:	2dff      	cmp	r5, #255	; 0xff
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x8a>
 800072c:	e08b      	b.n	8000846 <__aeabi_fadd+0x1a2>
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	4661      	mov	r1, ip
 8000732:	04db      	lsls	r3, r3, #19
 8000734:	4319      	orrs	r1, r3
 8000736:	468c      	mov	ip, r1
 8000738:	2a1b      	cmp	r2, #27
 800073a:	dc00      	bgt.n	800073e <__aeabi_fadd+0x9a>
 800073c:	e0d2      	b.n	80008e4 <__aeabi_fadd+0x240>
 800073e:	2301      	movs	r3, #1
 8000740:	19db      	adds	r3, r3, r7
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d56a      	bpl.n	800081c <__aeabi_fadd+0x178>
 8000746:	3501      	adds	r5, #1
 8000748:	2dff      	cmp	r5, #255	; 0xff
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x160>
 800074c:	2201      	movs	r2, #1
 800074e:	49a3      	ldr	r1, [pc, #652]	; (80009dc <__aeabi_fadd+0x338>)
 8000750:	401a      	ands	r2, r3
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	400b      	ands	r3, r1
 8000756:	4313      	orrs	r3, r2
 8000758:	e01c      	b.n	8000794 <__aeabi_fadd+0xf0>
 800075a:	2dff      	cmp	r5, #255	; 0xff
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0xbc>
 800075e:	e072      	b.n	8000846 <__aeabi_fadd+0x1a2>
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	4662      	mov	r2, ip
 8000764:	04db      	lsls	r3, r3, #19
 8000766:	431a      	orrs	r2, r3
 8000768:	4694      	mov	ip, r2
 800076a:	281b      	cmp	r0, #27
 800076c:	dc00      	bgt.n	8000770 <__aeabi_fadd+0xcc>
 800076e:	e090      	b.n	8000892 <__aeabi_fadd+0x1ee>
 8000770:	2301      	movs	r3, #1
 8000772:	1afb      	subs	r3, r7, r3
 8000774:	015a      	lsls	r2, r3, #5
 8000776:	d551      	bpl.n	800081c <__aeabi_fadd+0x178>
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	099e      	lsrs	r6, r3, #6
 800077c:	0030      	movs	r0, r6
 800077e:	f001 fb73 	bl	8001e68 <__clzsi2>
 8000782:	0033      	movs	r3, r6
 8000784:	3805      	subs	r0, #5
 8000786:	4083      	lsls	r3, r0
 8000788:	4285      	cmp	r5, r0
 800078a:	dc00      	bgt.n	800078e <__aeabi_fadd+0xea>
 800078c:	e075      	b.n	800087a <__aeabi_fadd+0x1d6>
 800078e:	4a94      	ldr	r2, [pc, #592]	; (80009e0 <__aeabi_fadd+0x33c>)
 8000790:	1a2d      	subs	r5, r5, r0
 8000792:	4013      	ands	r3, r2
 8000794:	075a      	lsls	r2, r3, #29
 8000796:	d004      	beq.n	80007a2 <__aeabi_fadd+0xfe>
 8000798:	220f      	movs	r2, #15
 800079a:	401a      	ands	r2, r3
 800079c:	2a04      	cmp	r2, #4
 800079e:	d000      	beq.n	80007a2 <__aeabi_fadd+0xfe>
 80007a0:	3304      	adds	r3, #4
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d53c      	bpl.n	8000820 <__aeabi_fadd+0x17c>
 80007a6:	1c68      	adds	r0, r5, #1
 80007a8:	2dfe      	cmp	r5, #254	; 0xfe
 80007aa:	d02b      	beq.n	8000804 <__aeabi_fadd+0x160>
 80007ac:	019b      	lsls	r3, r3, #6
 80007ae:	0a5e      	lsrs	r6, r3, #9
 80007b0:	b2c0      	uxtb	r0, r0
 80007b2:	05c0      	lsls	r0, r0, #23
 80007b4:	4330      	orrs	r0, r6
 80007b6:	07e4      	lsls	r4, r4, #31
 80007b8:	4320      	orrs	r0, r4
 80007ba:	bcc0      	pop	{r6, r7}
 80007bc:	46b9      	mov	r9, r7
 80007be:	46b0      	mov	r8, r6
 80007c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c2:	20fe      	movs	r0, #254	; 0xfe
 80007c4:	1c6a      	adds	r2, r5, #1
 80007c6:	4210      	tst	r0, r2
 80007c8:	d172      	bne.n	80008b0 <__aeabi_fadd+0x20c>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fadd+0x12c>
 80007ce:	e0ae      	b.n	800092e <__aeabi_fadd+0x28a>
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0x132>
 80007d4:	e0ec      	b.n	80009b0 <__aeabi_fadd+0x30c>
 80007d6:	4663      	mov	r3, ip
 80007d8:	2000      	movs	r0, #0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0e9      	beq.n	80007b2 <__aeabi_fadd+0x10e>
 80007de:	1afb      	subs	r3, r7, r3
 80007e0:	015a      	lsls	r2, r3, #5
 80007e2:	d400      	bmi.n	80007e6 <__aeabi_fadd+0x142>
 80007e4:	e0f3      	b.n	80009ce <__aeabi_fadd+0x32a>
 80007e6:	4663      	mov	r3, ip
 80007e8:	000c      	movs	r4, r1
 80007ea:	1bdb      	subs	r3, r3, r7
 80007ec:	e7d2      	b.n	8000794 <__aeabi_fadd+0xf0>
 80007ee:	4661      	mov	r1, ip
 80007f0:	2900      	cmp	r1, #0
 80007f2:	d05b      	beq.n	80008ac <__aeabi_fadd+0x208>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x158>
 80007fa:	e0a7      	b.n	800094c <__aeabi_fadd+0x2a8>
 80007fc:	2aff      	cmp	r2, #255	; 0xff
 80007fe:	d022      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 8000800:	000a      	movs	r2, r1
 8000802:	e799      	b.n	8000738 <__aeabi_fadd+0x94>
 8000804:	20ff      	movs	r0, #255	; 0xff
 8000806:	2600      	movs	r6, #0
 8000808:	e7d3      	b.n	80007b2 <__aeabi_fadd+0x10e>
 800080a:	21fe      	movs	r1, #254	; 0xfe
 800080c:	1c6a      	adds	r2, r5, #1
 800080e:	4211      	tst	r1, r2
 8000810:	d073      	beq.n	80008fa <__aeabi_fadd+0x256>
 8000812:	2aff      	cmp	r2, #255	; 0xff
 8000814:	d0f6      	beq.n	8000804 <__aeabi_fadd+0x160>
 8000816:	0015      	movs	r5, r2
 8000818:	4467      	add	r7, ip
 800081a:	087b      	lsrs	r3, r7, #1
 800081c:	075a      	lsls	r2, r3, #29
 800081e:	d1bb      	bne.n	8000798 <__aeabi_fadd+0xf4>
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	2dff      	cmp	r5, #255	; 0xff
 8000824:	d00f      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 8000826:	025b      	lsls	r3, r3, #9
 8000828:	0a5e      	lsrs	r6, r3, #9
 800082a:	b2e8      	uxtb	r0, r5
 800082c:	e7c1      	b.n	80007b2 <__aeabi_fadd+0x10e>
 800082e:	4662      	mov	r2, ip
 8000830:	2a00      	cmp	r2, #0
 8000832:	d008      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	03d2      	lsls	r2, r2, #15
 8000838:	4213      	tst	r3, r2
 800083a:	d004      	beq.n	8000846 <__aeabi_fadd+0x1a2>
 800083c:	4640      	mov	r0, r8
 800083e:	4210      	tst	r0, r2
 8000840:	d101      	bne.n	8000846 <__aeabi_fadd+0x1a2>
 8000842:	000c      	movs	r4, r1
 8000844:	4643      	mov	r3, r8
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0dc      	beq.n	8000804 <__aeabi_fadd+0x160>
 800084a:	2680      	movs	r6, #128	; 0x80
 800084c:	03f6      	lsls	r6, r6, #15
 800084e:	431e      	orrs	r6, r3
 8000850:	0276      	lsls	r6, r6, #9
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	0a76      	lsrs	r6, r6, #9
 8000856:	e7ac      	b.n	80007b2 <__aeabi_fadd+0x10e>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d0d6      	beq.n	800080a <__aeabi_fadd+0x166>
 800085c:	1b42      	subs	r2, r0, r5
 800085e:	2d00      	cmp	r5, #0
 8000860:	d05c      	beq.n	800091c <__aeabi_fadd+0x278>
 8000862:	28ff      	cmp	r0, #255	; 0xff
 8000864:	d0ee      	beq.n	8000844 <__aeabi_fadd+0x1a0>
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	04db      	lsls	r3, r3, #19
 800086a:	431f      	orrs	r7, r3
 800086c:	2a1b      	cmp	r2, #27
 800086e:	dc00      	bgt.n	8000872 <__aeabi_fadd+0x1ce>
 8000870:	e082      	b.n	8000978 <__aeabi_fadd+0x2d4>
 8000872:	2301      	movs	r3, #1
 8000874:	464d      	mov	r5, r9
 8000876:	4463      	add	r3, ip
 8000878:	e763      	b.n	8000742 <__aeabi_fadd+0x9e>
 800087a:	2220      	movs	r2, #32
 800087c:	1b40      	subs	r0, r0, r5
 800087e:	3001      	adds	r0, #1
 8000880:	1a12      	subs	r2, r2, r0
 8000882:	0019      	movs	r1, r3
 8000884:	4093      	lsls	r3, r2
 8000886:	40c1      	lsrs	r1, r0
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	4193      	sbcs	r3, r2
 800088c:	2500      	movs	r5, #0
 800088e:	430b      	orrs	r3, r1
 8000890:	e780      	b.n	8000794 <__aeabi_fadd+0xf0>
 8000892:	2320      	movs	r3, #32
 8000894:	4661      	mov	r1, ip
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	4099      	lsls	r1, r3
 800089a:	4662      	mov	r2, ip
 800089c:	000b      	movs	r3, r1
 800089e:	40c2      	lsrs	r2, r0
 80008a0:	1e59      	subs	r1, r3, #1
 80008a2:	418b      	sbcs	r3, r1
 80008a4:	4313      	orrs	r3, r2
 80008a6:	e764      	b.n	8000772 <__aeabi_fadd+0xce>
 80008a8:	000c      	movs	r4, r1
 80008aa:	4643      	mov	r3, r8
 80008ac:	0015      	movs	r5, r2
 80008ae:	e7b8      	b.n	8000822 <__aeabi_fadd+0x17e>
 80008b0:	4663      	mov	r3, ip
 80008b2:	1afe      	subs	r6, r7, r3
 80008b4:	0173      	lsls	r3, r6, #5
 80008b6:	d445      	bmi.n	8000944 <__aeabi_fadd+0x2a0>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fadd+0x21a>
 80008bc:	e75e      	b.n	800077c <__aeabi_fadd+0xd8>
 80008be:	2400      	movs	r4, #0
 80008c0:	2000      	movs	r0, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	e775      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d0bb      	beq.n	8000842 <__aeabi_fadd+0x19e>
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	04db      	lsls	r3, r3, #19
 80008ce:	431f      	orrs	r7, r3
 80008d0:	2a1b      	cmp	r2, #27
 80008d2:	dd47      	ble.n	8000964 <__aeabi_fadd+0x2c0>
 80008d4:	2301      	movs	r3, #1
 80008d6:	4662      	mov	r2, ip
 80008d8:	000c      	movs	r4, r1
 80008da:	464d      	mov	r5, r9
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	e749      	b.n	8000774 <__aeabi_fadd+0xd0>
 80008e0:	0005      	movs	r5, r0
 80008e2:	e79e      	b.n	8000822 <__aeabi_fadd+0x17e>
 80008e4:	4661      	mov	r1, ip
 80008e6:	2320      	movs	r3, #32
 80008e8:	40d1      	lsrs	r1, r2
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	4193      	sbcs	r3, r2
 80008f6:	430b      	orrs	r3, r1
 80008f8:	e722      	b.n	8000740 <__aeabi_fadd+0x9c>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d146      	bne.n	800098c <__aeabi_fadd+0x2e8>
 80008fe:	2f00      	cmp	r7, #0
 8000900:	d062      	beq.n	80009c8 <__aeabi_fadd+0x324>
 8000902:	4663      	mov	r3, ip
 8000904:	2000      	movs	r0, #0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x268>
 800090a:	e752      	b.n	80007b2 <__aeabi_fadd+0x10e>
 800090c:	003b      	movs	r3, r7
 800090e:	4463      	add	r3, ip
 8000910:	015a      	lsls	r2, r3, #5
 8000912:	d583      	bpl.n	800081c <__aeabi_fadd+0x178>
 8000914:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <__aeabi_fadd+0x33c>)
 8000916:	3501      	adds	r5, #1
 8000918:	4013      	ands	r3, r2
 800091a:	e77f      	b.n	800081c <__aeabi_fadd+0x178>
 800091c:	2f00      	cmp	r7, #0
 800091e:	d0c4      	beq.n	80008aa <__aeabi_fadd+0x206>
 8000920:	1e53      	subs	r3, r2, #1
 8000922:	2a01      	cmp	r2, #1
 8000924:	d012      	beq.n	800094c <__aeabi_fadd+0x2a8>
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d08c      	beq.n	8000844 <__aeabi_fadd+0x1a0>
 800092a:	001a      	movs	r2, r3
 800092c:	e79e      	b.n	800086c <__aeabi_fadd+0x1c8>
 800092e:	2f00      	cmp	r7, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x290>
 8000932:	e77c      	b.n	800082e <__aeabi_fadd+0x18a>
 8000934:	4663      	mov	r3, ip
 8000936:	2b00      	cmp	r3, #0
 8000938:	d183      	bne.n	8000842 <__aeabi_fadd+0x19e>
 800093a:	2680      	movs	r6, #128	; 0x80
 800093c:	2400      	movs	r4, #0
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	03f6      	lsls	r6, r6, #15
 8000942:	e736      	b.n	80007b2 <__aeabi_fadd+0x10e>
 8000944:	4663      	mov	r3, ip
 8000946:	000c      	movs	r4, r1
 8000948:	1bde      	subs	r6, r3, r7
 800094a:	e717      	b.n	800077c <__aeabi_fadd+0xd8>
 800094c:	003b      	movs	r3, r7
 800094e:	4463      	add	r3, ip
 8000950:	2501      	movs	r5, #1
 8000952:	015a      	lsls	r2, r3, #5
 8000954:	d400      	bmi.n	8000958 <__aeabi_fadd+0x2b4>
 8000956:	e761      	b.n	800081c <__aeabi_fadd+0x178>
 8000958:	2502      	movs	r5, #2
 800095a:	e6f7      	b.n	800074c <__aeabi_fadd+0xa8>
 800095c:	4663      	mov	r3, ip
 800095e:	2501      	movs	r5, #1
 8000960:	1afb      	subs	r3, r7, r3
 8000962:	e707      	b.n	8000774 <__aeabi_fadd+0xd0>
 8000964:	2320      	movs	r3, #32
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	0038      	movs	r0, r7
 800096a:	409f      	lsls	r7, r3
 800096c:	003b      	movs	r3, r7
 800096e:	40d0      	lsrs	r0, r2
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	4193      	sbcs	r3, r2
 8000974:	4303      	orrs	r3, r0
 8000976:	e7ae      	b.n	80008d6 <__aeabi_fadd+0x232>
 8000978:	2320      	movs	r3, #32
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	0039      	movs	r1, r7
 800097e:	409f      	lsls	r7, r3
 8000980:	003b      	movs	r3, r7
 8000982:	40d1      	lsrs	r1, r2
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	4193      	sbcs	r3, r2
 8000988:	430b      	orrs	r3, r1
 800098a:	e773      	b.n	8000874 <__aeabi_fadd+0x1d0>
 800098c:	2f00      	cmp	r7, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fadd+0x2ee>
 8000990:	e758      	b.n	8000844 <__aeabi_fadd+0x1a0>
 8000992:	4662      	mov	r2, ip
 8000994:	2a00      	cmp	r2, #0
 8000996:	d100      	bne.n	800099a <__aeabi_fadd+0x2f6>
 8000998:	e755      	b.n	8000846 <__aeabi_fadd+0x1a2>
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	03d2      	lsls	r2, r2, #15
 800099e:	4213      	tst	r3, r2
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x300>
 80009a2:	e750      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80009a4:	4641      	mov	r1, r8
 80009a6:	4211      	tst	r1, r2
 80009a8:	d000      	beq.n	80009ac <__aeabi_fadd+0x308>
 80009aa:	e74c      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80009ac:	4643      	mov	r3, r8
 80009ae:	e74a      	b.n	8000846 <__aeabi_fadd+0x1a2>
 80009b0:	4663      	mov	r3, ip
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d083      	beq.n	80008be <__aeabi_fadd+0x21a>
 80009b6:	000c      	movs	r4, r1
 80009b8:	4646      	mov	r6, r8
 80009ba:	2000      	movs	r0, #0
 80009bc:	e6f9      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80009be:	4663      	mov	r3, ip
 80009c0:	000c      	movs	r4, r1
 80009c2:	1bdb      	subs	r3, r3, r7
 80009c4:	3501      	adds	r5, #1
 80009c6:	e6d5      	b.n	8000774 <__aeabi_fadd+0xd0>
 80009c8:	4646      	mov	r6, r8
 80009ca:	2000      	movs	r0, #0
 80009cc:	e6f1      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fadd+0x330>
 80009d2:	e723      	b.n	800081c <__aeabi_fadd+0x178>
 80009d4:	2400      	movs	r4, #0
 80009d6:	2600      	movs	r6, #0
 80009d8:	e6eb      	b.n	80007b2 <__aeabi_fadd+0x10e>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	7dffffff 	.word	0x7dffffff
 80009e0:	fbffffff 	.word	0xfbffffff

080009e4 <__aeabi_fmul>:
 80009e4:	0243      	lsls	r3, r0, #9
 80009e6:	0a5b      	lsrs	r3, r3, #9
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	464f      	mov	r7, r9
 80009ec:	4646      	mov	r6, r8
 80009ee:	4699      	mov	r9, r3
 80009f0:	46d6      	mov	lr, sl
 80009f2:	0fc3      	lsrs	r3, r0, #31
 80009f4:	0045      	lsls	r5, r0, #1
 80009f6:	4698      	mov	r8, r3
 80009f8:	b5c0      	push	{r6, r7, lr}
 80009fa:	464b      	mov	r3, r9
 80009fc:	1c0f      	adds	r7, r1, #0
 80009fe:	0e2d      	lsrs	r5, r5, #24
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fmul+0x20>
 8000a02:	e0cb      	b.n	8000b9c <__aeabi_fmul+0x1b8>
 8000a04:	2dff      	cmp	r5, #255	; 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fmul+0x26>
 8000a08:	e0cf      	b.n	8000baa <__aeabi_fmul+0x1c6>
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	431a      	orrs	r2, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	4691      	mov	r9, r2
 8000a16:	2600      	movs	r6, #0
 8000a18:	469a      	mov	sl, r3
 8000a1a:	3d7f      	subs	r5, #127	; 0x7f
 8000a1c:	027c      	lsls	r4, r7, #9
 8000a1e:	007b      	lsls	r3, r7, #1
 8000a20:	0a64      	lsrs	r4, r4, #9
 8000a22:	0e1b      	lsrs	r3, r3, #24
 8000a24:	0fff      	lsrs	r7, r7, #31
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fmul+0x48>
 8000a2a:	e0a9      	b.n	8000b80 <__aeabi_fmul+0x19c>
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	d011      	beq.n	8000a54 <__aeabi_fmul+0x70>
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	00e4      	lsls	r4, r4, #3
 8000a34:	04d2      	lsls	r2, r2, #19
 8000a36:	4314      	orrs	r4, r2
 8000a38:	4642      	mov	r2, r8
 8000a3a:	3b7f      	subs	r3, #127	; 0x7f
 8000a3c:	195b      	adds	r3, r3, r5
 8000a3e:	407a      	eors	r2, r7
 8000a40:	2000      	movs	r0, #0
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	1c5d      	adds	r5, r3, #1
 8000a46:	2e0a      	cmp	r6, #10
 8000a48:	dd13      	ble.n	8000a72 <__aeabi_fmul+0x8e>
 8000a4a:	003a      	movs	r2, r7
 8000a4c:	2e0b      	cmp	r6, #11
 8000a4e:	d047      	beq.n	8000ae0 <__aeabi_fmul+0xfc>
 8000a50:	4647      	mov	r7, r8
 8000a52:	e03f      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000a54:	002b      	movs	r3, r5
 8000a56:	33ff      	adds	r3, #255	; 0xff
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d11e      	bne.n	8000a9a <__aeabi_fmul+0xb6>
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4316      	orrs	r6, r2
 8000a60:	4642      	mov	r2, r8
 8000a62:	3501      	adds	r5, #1
 8000a64:	407a      	eors	r2, r7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	35ff      	adds	r5, #255	; 0xff
 8000a6a:	2e0a      	cmp	r6, #10
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x8c>
 8000a6e:	e0e4      	b.n	8000c3a <__aeabi_fmul+0x256>
 8000a70:	2002      	movs	r0, #2
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	dc1c      	bgt.n	8000ab0 <__aeabi_fmul+0xcc>
 8000a76:	3e01      	subs	r6, #1
 8000a78:	2e01      	cmp	r6, #1
 8000a7a:	d842      	bhi.n	8000b02 <__aeabi_fmul+0x11e>
 8000a7c:	2802      	cmp	r0, #2
 8000a7e:	d03d      	beq.n	8000afc <__aeabi_fmul+0x118>
 8000a80:	2801      	cmp	r0, #1
 8000a82:	d166      	bne.n	8000b52 <__aeabi_fmul+0x16e>
 8000a84:	2000      	movs	r0, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	05c0      	lsls	r0, r0, #23
 8000a8a:	4308      	orrs	r0, r1
 8000a8c:	07d2      	lsls	r2, r2, #31
 8000a8e:	4310      	orrs	r0, r2
 8000a90:	bce0      	pop	{r5, r6, r7}
 8000a92:	46ba      	mov	sl, r7
 8000a94:	46b1      	mov	r9, r6
 8000a96:	46a8      	mov	r8, r5
 8000a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	4316      	orrs	r6, r2
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	3501      	adds	r5, #1
 8000aa2:	407a      	eors	r2, r7
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	35ff      	adds	r5, #255	; 0xff
 8000aa8:	2e0a      	cmp	r6, #10
 8000aaa:	dd00      	ble.n	8000aae <__aeabi_fmul+0xca>
 8000aac:	e0e4      	b.n	8000c78 <__aeabi_fmul+0x294>
 8000aae:	2003      	movs	r0, #3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	26a6      	movs	r6, #166	; 0xa6
 8000ab6:	00f6      	lsls	r6, r6, #3
 8000ab8:	4231      	tst	r1, r6
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_fmul+0xee>
 8000abc:	2690      	movs	r6, #144	; 0x90
 8000abe:	00b6      	lsls	r6, r6, #2
 8000ac0:	4231      	tst	r1, r6
 8000ac2:	d116      	bne.n	8000af2 <__aeabi_fmul+0x10e>
 8000ac4:	3eb9      	subs	r6, #185	; 0xb9
 8000ac6:	3eff      	subs	r6, #255	; 0xff
 8000ac8:	420e      	tst	r6, r1
 8000aca:	d01a      	beq.n	8000b02 <__aeabi_fmul+0x11e>
 8000acc:	46a1      	mov	r9, r4
 8000ace:	4682      	mov	sl, r0
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000ad2:	0017      	movs	r7, r2
 8000ad4:	4653      	mov	r3, sl
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00f      	beq.n	8000afc <__aeabi_fmul+0x118>
 8000adc:	464c      	mov	r4, r9
 8000ade:	4650      	mov	r0, sl
 8000ae0:	2803      	cmp	r0, #3
 8000ae2:	d1cd      	bne.n	8000a80 <__aeabi_fmul+0x9c>
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	03c9      	lsls	r1, r1, #15
 8000ae8:	4321      	orrs	r1, r4
 8000aea:	0249      	lsls	r1, r1, #9
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	0a49      	lsrs	r1, r1, #9
 8000af0:	e7ca      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	2200      	movs	r2, #0
 8000af6:	20ff      	movs	r0, #255	; 0xff
 8000af8:	03c9      	lsls	r1, r1, #15
 8000afa:	e7c5      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000afc:	20ff      	movs	r0, #255	; 0xff
 8000afe:	2100      	movs	r1, #0
 8000b00:	e7c2      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	4649      	mov	r1, r9
 8000b06:	0424      	lsls	r4, r4, #16
 8000b08:	0c24      	lsrs	r4, r4, #16
 8000b0a:	0027      	movs	r7, r4
 8000b0c:	0c0e      	lsrs	r6, r1, #16
 8000b0e:	0409      	lsls	r1, r1, #16
 8000b10:	0c09      	lsrs	r1, r1, #16
 8000b12:	4374      	muls	r4, r6
 8000b14:	434f      	muls	r7, r1
 8000b16:	4346      	muls	r6, r0
 8000b18:	4348      	muls	r0, r1
 8000b1a:	0c39      	lsrs	r1, r7, #16
 8000b1c:	1900      	adds	r0, r0, r4
 8000b1e:	1809      	adds	r1, r1, r0
 8000b20:	428c      	cmp	r4, r1
 8000b22:	d903      	bls.n	8000b2c <__aeabi_fmul+0x148>
 8000b24:	2080      	movs	r0, #128	; 0x80
 8000b26:	0240      	lsls	r0, r0, #9
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4466      	add	r6, ip
 8000b2c:	043f      	lsls	r7, r7, #16
 8000b2e:	0408      	lsls	r0, r1, #16
 8000b30:	0c3f      	lsrs	r7, r7, #16
 8000b32:	19c0      	adds	r0, r0, r7
 8000b34:	0184      	lsls	r4, r0, #6
 8000b36:	1e67      	subs	r7, r4, #1
 8000b38:	41bc      	sbcs	r4, r7
 8000b3a:	0c09      	lsrs	r1, r1, #16
 8000b3c:	0e80      	lsrs	r0, r0, #26
 8000b3e:	1989      	adds	r1, r1, r6
 8000b40:	4304      	orrs	r4, r0
 8000b42:	0189      	lsls	r1, r1, #6
 8000b44:	430c      	orrs	r4, r1
 8000b46:	0109      	lsls	r1, r1, #4
 8000b48:	d571      	bpl.n	8000c2e <__aeabi_fmul+0x24a>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	0861      	lsrs	r1, r4, #1
 8000b4e:	401c      	ands	r4, r3
 8000b50:	430c      	orrs	r4, r1
 8000b52:	002b      	movs	r3, r5
 8000b54:	337f      	adds	r3, #127	; 0x7f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dd51      	ble.n	8000bfe <__aeabi_fmul+0x21a>
 8000b5a:	0761      	lsls	r1, r4, #29
 8000b5c:	d004      	beq.n	8000b68 <__aeabi_fmul+0x184>
 8000b5e:	210f      	movs	r1, #15
 8000b60:	4021      	ands	r1, r4
 8000b62:	2904      	cmp	r1, #4
 8000b64:	d000      	beq.n	8000b68 <__aeabi_fmul+0x184>
 8000b66:	3404      	adds	r4, #4
 8000b68:	0121      	lsls	r1, r4, #4
 8000b6a:	d503      	bpl.n	8000b74 <__aeabi_fmul+0x190>
 8000b6c:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <__aeabi_fmul+0x298>)
 8000b6e:	401c      	ands	r4, r3
 8000b70:	002b      	movs	r3, r5
 8000b72:	3380      	adds	r3, #128	; 0x80
 8000b74:	2bfe      	cmp	r3, #254	; 0xfe
 8000b76:	dcc1      	bgt.n	8000afc <__aeabi_fmul+0x118>
 8000b78:	01a1      	lsls	r1, r4, #6
 8000b7a:	0a49      	lsrs	r1, r1, #9
 8000b7c:	b2d8      	uxtb	r0, r3
 8000b7e:	e783      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d12c      	bne.n	8000bde <__aeabi_fmul+0x1fa>
 8000b84:	2301      	movs	r3, #1
 8000b86:	4642      	mov	r2, r8
 8000b88:	431e      	orrs	r6, r3
 8000b8a:	002b      	movs	r3, r5
 8000b8c:	407a      	eors	r2, r7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	1c5d      	adds	r5, r3, #1
 8000b94:	2e0a      	cmp	r6, #10
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_fmul+0x1b6>
 8000b98:	e757      	b.n	8000a4a <__aeabi_fmul+0x66>
 8000b9a:	e76a      	b.n	8000a72 <__aeabi_fmul+0x8e>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d110      	bne.n	8000bc2 <__aeabi_fmul+0x1de>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2604      	movs	r6, #4
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	e738      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <__aeabi_fmul+0x1d4>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	2608      	movs	r6, #8
 8000bb2:	25ff      	movs	r5, #255	; 0xff
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e731      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	260c      	movs	r6, #12
 8000bbc:	25ff      	movs	r5, #255	; 0xff
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	e72c      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	f001 f950 	bl	8001e68 <__clzsi2>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	1f43      	subs	r3, r0, #5
 8000bcc:	2576      	movs	r5, #118	; 0x76
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	426d      	negs	r5, r5
 8000bd4:	4691      	mov	r9, r2
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	1a2d      	subs	r5, r5, r0
 8000bdc:	e71e      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bde:	0020      	movs	r0, r4
 8000be0:	f001 f942 	bl	8001e68 <__clzsi2>
 8000be4:	4642      	mov	r2, r8
 8000be6:	1f43      	subs	r3, r0, #5
 8000be8:	409c      	lsls	r4, r3
 8000bea:	1a2b      	subs	r3, r5, r0
 8000bec:	3b76      	subs	r3, #118	; 0x76
 8000bee:	407a      	eors	r2, r7
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	1c5d      	adds	r5, r3, #1
 8000bf6:	2e0a      	cmp	r6, #10
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_fmul+0x218>
 8000bfa:	e726      	b.n	8000a4a <__aeabi_fmul+0x66>
 8000bfc:	e739      	b.n	8000a72 <__aeabi_fmul+0x8e>
 8000bfe:	2101      	movs	r1, #1
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x224>
 8000c06:	e73d      	b.n	8000a84 <__aeabi_fmul+0xa0>
 8000c08:	359e      	adds	r5, #158	; 0x9e
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	40ac      	lsls	r4, r5
 8000c0e:	40d9      	lsrs	r1, r3
 8000c10:	1e63      	subs	r3, r4, #1
 8000c12:	419c      	sbcs	r4, r3
 8000c14:	4321      	orrs	r1, r4
 8000c16:	074b      	lsls	r3, r1, #29
 8000c18:	d004      	beq.n	8000c24 <__aeabi_fmul+0x240>
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fmul+0x240>
 8000c22:	3104      	adds	r1, #4
 8000c24:	014b      	lsls	r3, r1, #5
 8000c26:	d504      	bpl.n	8000c32 <__aeabi_fmul+0x24e>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	e72c      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c2e:	001d      	movs	r5, r3
 8000c30:	e78f      	b.n	8000b52 <__aeabi_fmul+0x16e>
 8000c32:	0189      	lsls	r1, r1, #6
 8000c34:	2000      	movs	r0, #0
 8000c36:	0a49      	lsrs	r1, r1, #9
 8000c38:	e726      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	2e0f      	cmp	r6, #15
 8000c3e:	d10c      	bne.n	8000c5a <__aeabi_fmul+0x276>
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	464b      	mov	r3, r9
 8000c44:	03c9      	lsls	r1, r1, #15
 8000c46:	420b      	tst	r3, r1
 8000c48:	d00d      	beq.n	8000c66 <__aeabi_fmul+0x282>
 8000c4a:	420c      	tst	r4, r1
 8000c4c:	d10b      	bne.n	8000c66 <__aeabi_fmul+0x282>
 8000c4e:	4321      	orrs	r1, r4
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	003a      	movs	r2, r7
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	0a49      	lsrs	r1, r1, #9
 8000c58:	e716      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c5a:	2e0b      	cmp	r6, #11
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fmul+0x27c>
 8000c5e:	e6f7      	b.n	8000a50 <__aeabi_fmul+0x6c>
 8000c60:	46a1      	mov	r9, r4
 8000c62:	469a      	mov	sl, r3
 8000c64:	e736      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	464b      	mov	r3, r9
 8000c6a:	03c9      	lsls	r1, r1, #15
 8000c6c:	4319      	orrs	r1, r3
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	4642      	mov	r2, r8
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	0a49      	lsrs	r1, r1, #9
 8000c76:	e707      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e7df      	b.n	8000c3c <__aeabi_fmul+0x258>
 8000c7c:	f7ffffff 	.word	0xf7ffffff

08000c80 <__aeabi_fsub>:
 8000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c82:	46c6      	mov	lr, r8
 8000c84:	0243      	lsls	r3, r0, #9
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	0045      	lsls	r5, r0, #1
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	0fc4      	lsrs	r4, r0, #31
 8000c8e:	0248      	lsls	r0, r1, #9
 8000c90:	004f      	lsls	r7, r1, #1
 8000c92:	4694      	mov	ip, r2
 8000c94:	0a42      	lsrs	r2, r0, #9
 8000c96:	001e      	movs	r6, r3
 8000c98:	4690      	mov	r8, r2
 8000c9a:	b500      	push	{lr}
 8000c9c:	0e2d      	lsrs	r5, r5, #24
 8000c9e:	0e3f      	lsrs	r7, r7, #24
 8000ca0:	0fc9      	lsrs	r1, r1, #31
 8000ca2:	0980      	lsrs	r0, r0, #6
 8000ca4:	2fff      	cmp	r7, #255	; 0xff
 8000ca6:	d059      	beq.n	8000d5c <__aeabi_fsub+0xdc>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4051      	eors	r1, r2
 8000cac:	428c      	cmp	r4, r1
 8000cae:	d039      	beq.n	8000d24 <__aeabi_fsub+0xa4>
 8000cb0:	1bea      	subs	r2, r5, r7
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	dd58      	ble.n	8000d68 <__aeabi_fsub+0xe8>
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d068      	beq.n	8000d8c <__aeabi_fsub+0x10c>
 8000cba:	2dff      	cmp	r5, #255	; 0xff
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x40>
 8000cbe:	e0d1      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	04db      	lsls	r3, r3, #19
 8000cc4:	4318      	orrs	r0, r3
 8000cc6:	2a1b      	cmp	r2, #27
 8000cc8:	dc00      	bgt.n	8000ccc <__aeabi_fsub+0x4c>
 8000cca:	e0e3      	b.n	8000e94 <__aeabi_fsub+0x214>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4662      	mov	r2, ip
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	015a      	lsls	r2, r3, #5
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fsub+0x58>
 8000cd6:	e0ac      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	099e      	lsrs	r6, r3, #6
 8000cdc:	0030      	movs	r0, r6
 8000cde:	f001 f8c3 	bl	8001e68 <__clzsi2>
 8000ce2:	0033      	movs	r3, r6
 8000ce4:	3805      	subs	r0, #5
 8000ce6:	4083      	lsls	r3, r0
 8000ce8:	4285      	cmp	r5, r0
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_fsub+0x6e>
 8000cec:	e0c6      	b.n	8000e7c <__aeabi_fsub+0x1fc>
 8000cee:	4ab2      	ldr	r2, [pc, #712]	; (8000fb8 <__aeabi_fsub+0x338>)
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	075a      	lsls	r2, r3, #29
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_fsub+0x82>
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	2a04      	cmp	r2, #4
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_fsub+0x82>
 8000d00:	3304      	adds	r3, #4
 8000d02:	015a      	lsls	r2, r3, #5
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_fsub+0x88>
 8000d06:	e097      	b.n	8000e38 <__aeabi_fsub+0x1b8>
 8000d08:	1c6a      	adds	r2, r5, #1
 8000d0a:	2dfe      	cmp	r5, #254	; 0xfe
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x90>
 8000d0e:	e084      	b.n	8000e1a <__aeabi_fsub+0x19a>
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	0a5e      	lsrs	r6, r3, #9
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	05d0      	lsls	r0, r2, #23
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	07e4      	lsls	r4, r4, #31
 8000d1c:	4320      	orrs	r0, r4
 8000d1e:	bc80      	pop	{r7}
 8000d20:	46b8      	mov	r8, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	1bea      	subs	r2, r5, r7
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	dd41      	ble.n	8000dae <__aeabi_fsub+0x12e>
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d06b      	beq.n	8000e06 <__aeabi_fsub+0x186>
 8000d2e:	2dff      	cmp	r5, #255	; 0xff
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0xb4>
 8000d32:	e097      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	04db      	lsls	r3, r3, #19
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2a1b      	cmp	r2, #27
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_fsub+0xc0>
 8000d3e:	e0cc      	b.n	8000eda <__aeabi_fsub+0x25a>
 8000d40:	2301      	movs	r3, #1
 8000d42:	4463      	add	r3, ip
 8000d44:	015a      	lsls	r2, r3, #5
 8000d46:	d574      	bpl.n	8000e32 <__aeabi_fsub+0x1b2>
 8000d48:	3501      	adds	r5, #1
 8000d4a:	2dff      	cmp	r5, #255	; 0xff
 8000d4c:	d065      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000d4e:	2201      	movs	r2, #1
 8000d50:	499a      	ldr	r1, [pc, #616]	; (8000fbc <__aeabi_fsub+0x33c>)
 8000d52:	401a      	ands	r2, r3
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	400b      	ands	r3, r1
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e7cb      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d01f      	beq.n	8000da0 <__aeabi_fsub+0x120>
 8000d60:	428c      	cmp	r4, r1
 8000d62:	d022      	beq.n	8000daa <__aeabi_fsub+0x12a>
 8000d64:	002a      	movs	r2, r5
 8000d66:	3aff      	subs	r2, #255	; 0xff
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d035      	beq.n	8000dd8 <__aeabi_fsub+0x158>
 8000d6c:	1b7a      	subs	r2, r7, r5
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fsub+0xf4>
 8000d72:	e099      	b.n	8000ea8 <__aeabi_fsub+0x228>
 8000d74:	4663      	mov	r3, ip
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0xfc>
 8000d7a:	e0dd      	b.n	8000f38 <__aeabi_fsub+0x2b8>
 8000d7c:	1e53      	subs	r3, r2, #1
 8000d7e:	2a01      	cmp	r2, #1
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x104>
 8000d82:	e105      	b.n	8000f90 <__aeabi_fsub+0x310>
 8000d84:	2aff      	cmp	r2, #255	; 0xff
 8000d86:	d06b      	beq.n	8000e60 <__aeabi_fsub+0x1e0>
 8000d88:	001a      	movs	r2, r3
 8000d8a:	e094      	b.n	8000eb6 <__aeabi_fsub+0x236>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d073      	beq.n	8000e78 <__aeabi_fsub+0x1f8>
 8000d90:	1e51      	subs	r1, r2, #1
 8000d92:	2a01      	cmp	r2, #1
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x118>
 8000d96:	e0df      	b.n	8000f58 <__aeabi_fsub+0x2d8>
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d063      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	e792      	b.n	8000cc6 <__aeabi_fsub+0x46>
 8000da0:	2201      	movs	r2, #1
 8000da2:	4051      	eors	r1, r2
 8000da4:	42a1      	cmp	r1, r4
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0x12a>
 8000da8:	e782      	b.n	8000cb0 <__aeabi_fsub+0x30>
 8000daa:	002a      	movs	r2, r5
 8000dac:	3aff      	subs	r2, #255	; 0xff
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d036      	beq.n	8000e20 <__aeabi_fsub+0x1a0>
 8000db2:	1b7a      	subs	r2, r7, r5
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x13a>
 8000db8:	e0aa      	b.n	8000f10 <__aeabi_fsub+0x290>
 8000dba:	2fff      	cmp	r7, #255	; 0xff
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x140>
 8000dbe:	e0da      	b.n	8000f76 <__aeabi_fsub+0x2f6>
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	04db      	lsls	r3, r3, #19
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	468c      	mov	ip, r1
 8000dca:	2a1b      	cmp	r2, #27
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_fsub+0x150>
 8000dce:	e0d4      	b.n	8000f7a <__aeabi_fsub+0x2fa>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	003d      	movs	r5, r7
 8000dd4:	181b      	adds	r3, r3, r0
 8000dd6:	e7b5      	b.n	8000d44 <__aeabi_fsub+0xc4>
 8000dd8:	27fe      	movs	r7, #254	; 0xfe
 8000dda:	1c6a      	adds	r2, r5, #1
 8000ddc:	4217      	tst	r7, r2
 8000dde:	d171      	bne.n	8000ec4 <__aeabi_fsub+0x244>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d000      	beq.n	8000de6 <__aeabi_fsub+0x166>
 8000de4:	e09e      	b.n	8000f24 <__aeabi_fsub+0x2a4>
 8000de6:	4663      	mov	r3, ip
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x16e>
 8000dec:	e0d5      	b.n	8000f9a <__aeabi_fsub+0x31a>
 8000dee:	2200      	movs	r2, #0
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fsub+0x176>
 8000df4:	e78f      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000df6:	1a1b      	subs	r3, r3, r0
 8000df8:	015e      	lsls	r6, r3, #5
 8000dfa:	d400      	bmi.n	8000dfe <__aeabi_fsub+0x17e>
 8000dfc:	e0d6      	b.n	8000fac <__aeabi_fsub+0x32c>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	000c      	movs	r4, r1
 8000e02:	1ac3      	subs	r3, r0, r3
 8000e04:	e776      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d036      	beq.n	8000e78 <__aeabi_fsub+0x1f8>
 8000e0a:	1e51      	subs	r1, r2, #1
 8000e0c:	2a01      	cmp	r2, #1
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_fsub+0x192>
 8000e10:	e09a      	b.n	8000f48 <__aeabi_fsub+0x2c8>
 8000e12:	2aff      	cmp	r2, #255	; 0xff
 8000e14:	d026      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e16:	000a      	movs	r2, r1
 8000e18:	e78f      	b.n	8000d3a <__aeabi_fsub+0xba>
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e77a      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e20:	27fe      	movs	r7, #254	; 0xfe
 8000e22:	1c6a      	adds	r2, r5, #1
 8000e24:	4217      	tst	r7, r2
 8000e26:	d062      	beq.n	8000eee <__aeabi_fsub+0x26e>
 8000e28:	2aff      	cmp	r2, #255	; 0xff
 8000e2a:	d0f6      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	4460      	add	r0, ip
 8000e30:	0843      	lsrs	r3, r0, #1
 8000e32:	075a      	lsls	r2, r3, #29
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fsub+0x1b8>
 8000e36:	e75f      	b.n	8000cf8 <__aeabi_fsub+0x78>
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	2dff      	cmp	r5, #255	; 0xff
 8000e3c:	d012      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	0a5e      	lsrs	r6, r3, #9
 8000e42:	b2ea      	uxtb	r2, r5
 8000e44:	e767      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e46:	4662      	mov	r2, ip
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x1ce>
 8000e4c:	e093      	b.n	8000f76 <__aeabi_fsub+0x2f6>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d008      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	03d2      	lsls	r2, r2, #15
 8000e56:	4213      	tst	r3, r2
 8000e58:	d004      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e5a:	4640      	mov	r0, r8
 8000e5c:	4210      	tst	r0, r2
 8000e5e:	d101      	bne.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e60:	000c      	movs	r4, r1
 8000e62:	4643      	mov	r3, r8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0d8      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000e68:	2680      	movs	r6, #128	; 0x80
 8000e6a:	03f6      	lsls	r6, r6, #15
 8000e6c:	431e      	orrs	r6, r3
 8000e6e:	0276      	lsls	r6, r6, #9
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	0a76      	lsrs	r6, r6, #9
 8000e74:	e74f      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e76:	4643      	mov	r3, r8
 8000e78:	0015      	movs	r5, r2
 8000e7a:	e7de      	b.n	8000e3a <__aeabi_fsub+0x1ba>
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	3001      	adds	r0, #1
 8000e82:	1a12      	subs	r2, r2, r0
 8000e84:	0019      	movs	r1, r3
 8000e86:	4093      	lsls	r3, r2
 8000e88:	40c1      	lsrs	r1, r0
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	4193      	sbcs	r3, r2
 8000e8e:	2500      	movs	r5, #0
 8000e90:	430b      	orrs	r3, r1
 8000e92:	e72f      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000e94:	2320      	movs	r3, #32
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	0001      	movs	r1, r0
 8000e9a:	4098      	lsls	r0, r3
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	40d1      	lsrs	r1, r2
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	4193      	sbcs	r3, r2
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	e712      	b.n	8000cce <__aeabi_fsub+0x4e>
 8000ea8:	2fff      	cmp	r7, #255	; 0xff
 8000eaa:	d0d9      	beq.n	8000e60 <__aeabi_fsub+0x1e0>
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	4664      	mov	r4, ip
 8000eb0:	04db      	lsls	r3, r3, #19
 8000eb2:	431c      	orrs	r4, r3
 8000eb4:	46a4      	mov	ip, r4
 8000eb6:	2a1b      	cmp	r2, #27
 8000eb8:	dd52      	ble.n	8000f60 <__aeabi_fsub+0x2e0>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	003d      	movs	r5, r7
 8000ec0:	1ac3      	subs	r3, r0, r3
 8000ec2:	e706      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	1a1e      	subs	r6, r3, r0
 8000ec8:	0173      	lsls	r3, r6, #5
 8000eca:	d439      	bmi.n	8000f40 <__aeabi_fsub+0x2c0>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_fsub+0x252>
 8000ed0:	e704      	b.n	8000cdc <__aeabi_fsub+0x5c>
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	e71d      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000eda:	2320      	movs	r3, #32
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	0001      	movs	r1, r0
 8000ee0:	4098      	lsls	r0, r3
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	40d1      	lsrs	r1, r2
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	4193      	sbcs	r3, r2
 8000eea:	430b      	orrs	r3, r1
 8000eec:	e729      	b.n	8000d42 <__aeabi_fsub+0xc2>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d1a9      	bne.n	8000e46 <__aeabi_fsub+0x1c6>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d056      	beq.n	8000fa6 <__aeabi_fsub+0x326>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x280>
 8000efe:	e70a      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000f00:	0003      	movs	r3, r0
 8000f02:	4463      	add	r3, ip
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	d594      	bpl.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <__aeabi_fsub+0x338>)
 8000f0a:	3501      	adds	r5, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	e790      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f10:	4663      	mov	r3, ip
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0af      	beq.n	8000e76 <__aeabi_fsub+0x1f6>
 8000f16:	1e53      	subs	r3, r2, #1
 8000f18:	2a01      	cmp	r2, #1
 8000f1a:	d015      	beq.n	8000f48 <__aeabi_fsub+0x2c8>
 8000f1c:	2aff      	cmp	r2, #255	; 0xff
 8000f1e:	d02a      	beq.n	8000f76 <__aeabi_fsub+0x2f6>
 8000f20:	001a      	movs	r2, r3
 8000f22:	e752      	b.n	8000dca <__aeabi_fsub+0x14a>
 8000f24:	4662      	mov	r2, ip
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d191      	bne.n	8000e4e <__aeabi_fsub+0x1ce>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d198      	bne.n	8000e60 <__aeabi_fsub+0x1e0>
 8000f2e:	2680      	movs	r6, #128	; 0x80
 8000f30:	2400      	movs	r4, #0
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	03f6      	lsls	r6, r6, #15
 8000f36:	e6ee      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000f38:	000c      	movs	r4, r1
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	0015      	movs	r5, r2
 8000f3e:	e77c      	b.n	8000e3a <__aeabi_fsub+0x1ba>
 8000f40:	4663      	mov	r3, ip
 8000f42:	000c      	movs	r4, r1
 8000f44:	1ac6      	subs	r6, r0, r3
 8000f46:	e6c9      	b.n	8000cdc <__aeabi_fsub+0x5c>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4463      	add	r3, ip
 8000f4c:	2501      	movs	r5, #1
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_fsub+0x2d4>
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f54:	2502      	movs	r5, #2
 8000f56:	e6fa      	b.n	8000d4e <__aeabi_fsub+0xce>
 8000f58:	4663      	mov	r3, ip
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	e6b8      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000f60:	4664      	mov	r4, ip
 8000f62:	2320      	movs	r3, #32
 8000f64:	40d4      	lsrs	r4, r2
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	4193      	sbcs	r3, r2
 8000f72:	4323      	orrs	r3, r4
 8000f74:	e7a2      	b.n	8000ebc <__aeabi_fsub+0x23c>
 8000f76:	4643      	mov	r3, r8
 8000f78:	e774      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000f7a:	4661      	mov	r1, ip
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	40d1      	lsrs	r1, r2
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	4662      	mov	r2, ip
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	4193      	sbcs	r3, r2
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	e720      	b.n	8000dd2 <__aeabi_fsub+0x152>
 8000f90:	4663      	mov	r3, ip
 8000f92:	000c      	movs	r4, r1
 8000f94:	2501      	movs	r5, #1
 8000f96:	1ac3      	subs	r3, r0, r3
 8000f98:	e69b      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d099      	beq.n	8000ed2 <__aeabi_fsub+0x252>
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	4646      	mov	r6, r8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	e6b7      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fa6:	4646      	mov	r6, r8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	e6b4      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x332>
 8000fb0:	e73f      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2600      	movs	r6, #0
 8000fb6:	e6ae      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fb8:	fbffffff 	.word	0xfbffffff
 8000fbc:	7dffffff 	.word	0x7dffffff

08000fc0 <__aeabi_f2iz>:
 8000fc0:	0241      	lsls	r1, r0, #9
 8000fc2:	0042      	lsls	r2, r0, #1
 8000fc4:	0fc3      	lsrs	r3, r0, #31
 8000fc6:	0a49      	lsrs	r1, r1, #9
 8000fc8:	2000      	movs	r0, #0
 8000fca:	0e12      	lsrs	r2, r2, #24
 8000fcc:	2a7e      	cmp	r2, #126	; 0x7e
 8000fce:	dd03      	ble.n	8000fd8 <__aeabi_f2iz+0x18>
 8000fd0:	2a9d      	cmp	r2, #157	; 0x9d
 8000fd2:	dd02      	ble.n	8000fda <__aeabi_f2iz+0x1a>
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <__aeabi_f2iz+0x3c>)
 8000fd6:	1898      	adds	r0, r3, r2
 8000fd8:	4770      	bx	lr
 8000fda:	2080      	movs	r0, #128	; 0x80
 8000fdc:	0400      	lsls	r0, r0, #16
 8000fde:	4301      	orrs	r1, r0
 8000fe0:	2a95      	cmp	r2, #149	; 0x95
 8000fe2:	dc07      	bgt.n	8000ff4 <__aeabi_f2iz+0x34>
 8000fe4:	2096      	movs	r0, #150	; 0x96
 8000fe6:	1a82      	subs	r2, r0, r2
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	4248      	negs	r0, r1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f3      	bne.n	8000fd8 <__aeabi_f2iz+0x18>
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	e7f1      	b.n	8000fd8 <__aeabi_f2iz+0x18>
 8000ff4:	3a96      	subs	r2, #150	; 0x96
 8000ff6:	4091      	lsls	r1, r2
 8000ff8:	e7f7      	b.n	8000fea <__aeabi_f2iz+0x2a>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	7fffffff 	.word	0x7fffffff

08001000 <__aeabi_dadd>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	464f      	mov	r7, r9
 8001004:	4646      	mov	r6, r8
 8001006:	46d6      	mov	lr, sl
 8001008:	0004      	movs	r4, r0
 800100a:	b5c0      	push	{r6, r7, lr}
 800100c:	001f      	movs	r7, r3
 800100e:	030b      	lsls	r3, r1, #12
 8001010:	0010      	movs	r0, r2
 8001012:	004e      	lsls	r6, r1, #1
 8001014:	0a5b      	lsrs	r3, r3, #9
 8001016:	0fcd      	lsrs	r5, r1, #31
 8001018:	0f61      	lsrs	r1, r4, #29
 800101a:	007a      	lsls	r2, r7, #1
 800101c:	4319      	orrs	r1, r3
 800101e:	00e3      	lsls	r3, r4, #3
 8001020:	033c      	lsls	r4, r7, #12
 8001022:	0fff      	lsrs	r7, r7, #31
 8001024:	46bc      	mov	ip, r7
 8001026:	0a64      	lsrs	r4, r4, #9
 8001028:	0f47      	lsrs	r7, r0, #29
 800102a:	4327      	orrs	r7, r4
 800102c:	0d76      	lsrs	r6, r6, #21
 800102e:	0d52      	lsrs	r2, r2, #21
 8001030:	00c0      	lsls	r0, r0, #3
 8001032:	46b9      	mov	r9, r7
 8001034:	4680      	mov	r8, r0
 8001036:	1ab7      	subs	r7, r6, r2
 8001038:	4565      	cmp	r5, ip
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x3e>
 800103c:	e09b      	b.n	8001176 <__aeabi_dadd+0x176>
 800103e:	2f00      	cmp	r7, #0
 8001040:	dc00      	bgt.n	8001044 <__aeabi_dadd+0x44>
 8001042:	e084      	b.n	800114e <__aeabi_dadd+0x14e>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d100      	bne.n	800104a <__aeabi_dadd+0x4a>
 8001048:	e0be      	b.n	80011c8 <__aeabi_dadd+0x1c8>
 800104a:	4ac8      	ldr	r2, [pc, #800]	; (800136c <__aeabi_dadd+0x36c>)
 800104c:	4296      	cmp	r6, r2
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x52>
 8001050:	e124      	b.n	800129c <__aeabi_dadd+0x29c>
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	464c      	mov	r4, r9
 8001056:	0412      	lsls	r2, r2, #16
 8001058:	4314      	orrs	r4, r2
 800105a:	46a1      	mov	r9, r4
 800105c:	2f38      	cmp	r7, #56	; 0x38
 800105e:	dd00      	ble.n	8001062 <__aeabi_dadd+0x62>
 8001060:	e167      	b.n	8001332 <__aeabi_dadd+0x332>
 8001062:	2f1f      	cmp	r7, #31
 8001064:	dd00      	ble.n	8001068 <__aeabi_dadd+0x68>
 8001066:	e1d6      	b.n	8001416 <__aeabi_dadd+0x416>
 8001068:	2220      	movs	r2, #32
 800106a:	464c      	mov	r4, r9
 800106c:	1bd2      	subs	r2, r2, r7
 800106e:	4094      	lsls	r4, r2
 8001070:	46a2      	mov	sl, r4
 8001072:	4644      	mov	r4, r8
 8001074:	40fc      	lsrs	r4, r7
 8001076:	0020      	movs	r0, r4
 8001078:	4654      	mov	r4, sl
 800107a:	4304      	orrs	r4, r0
 800107c:	4640      	mov	r0, r8
 800107e:	4090      	lsls	r0, r2
 8001080:	1e42      	subs	r2, r0, #1
 8001082:	4190      	sbcs	r0, r2
 8001084:	464a      	mov	r2, r9
 8001086:	40fa      	lsrs	r2, r7
 8001088:	4304      	orrs	r4, r0
 800108a:	1a89      	subs	r1, r1, r2
 800108c:	1b1c      	subs	r4, r3, r4
 800108e:	42a3      	cmp	r3, r4
 8001090:	4192      	sbcs	r2, r2
 8001092:	4252      	negs	r2, r2
 8001094:	1a8b      	subs	r3, r1, r2
 8001096:	469a      	mov	sl, r3
 8001098:	4653      	mov	r3, sl
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	d400      	bmi.n	80010a0 <__aeabi_dadd+0xa0>
 800109e:	e0d4      	b.n	800124a <__aeabi_dadd+0x24a>
 80010a0:	4653      	mov	r3, sl
 80010a2:	025a      	lsls	r2, r3, #9
 80010a4:	0a53      	lsrs	r3, r2, #9
 80010a6:	469a      	mov	sl, r3
 80010a8:	4653      	mov	r3, sl
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0xb0>
 80010ae:	e104      	b.n	80012ba <__aeabi_dadd+0x2ba>
 80010b0:	4650      	mov	r0, sl
 80010b2:	f000 fed9 	bl	8001e68 <__clzsi2>
 80010b6:	0003      	movs	r3, r0
 80010b8:	3b08      	subs	r3, #8
 80010ba:	2220      	movs	r2, #32
 80010bc:	0020      	movs	r0, r4
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	4651      	mov	r1, sl
 80010c2:	40d0      	lsrs	r0, r2
 80010c4:	4099      	lsls	r1, r3
 80010c6:	0002      	movs	r2, r0
 80010c8:	409c      	lsls	r4, r3
 80010ca:	430a      	orrs	r2, r1
 80010cc:	42b3      	cmp	r3, r6
 80010ce:	da00      	bge.n	80010d2 <__aeabi_dadd+0xd2>
 80010d0:	e102      	b.n	80012d8 <__aeabi_dadd+0x2d8>
 80010d2:	1b9b      	subs	r3, r3, r6
 80010d4:	1c59      	adds	r1, r3, #1
 80010d6:	291f      	cmp	r1, #31
 80010d8:	dd00      	ble.n	80010dc <__aeabi_dadd+0xdc>
 80010da:	e0a7      	b.n	800122c <__aeabi_dadd+0x22c>
 80010dc:	2320      	movs	r3, #32
 80010de:	0010      	movs	r0, r2
 80010e0:	0026      	movs	r6, r4
 80010e2:	1a5b      	subs	r3, r3, r1
 80010e4:	409c      	lsls	r4, r3
 80010e6:	4098      	lsls	r0, r3
 80010e8:	40ce      	lsrs	r6, r1
 80010ea:	40ca      	lsrs	r2, r1
 80010ec:	1e63      	subs	r3, r4, #1
 80010ee:	419c      	sbcs	r4, r3
 80010f0:	4330      	orrs	r0, r6
 80010f2:	4692      	mov	sl, r2
 80010f4:	2600      	movs	r6, #0
 80010f6:	4304      	orrs	r4, r0
 80010f8:	0763      	lsls	r3, r4, #29
 80010fa:	d009      	beq.n	8001110 <__aeabi_dadd+0x110>
 80010fc:	230f      	movs	r3, #15
 80010fe:	4023      	ands	r3, r4
 8001100:	2b04      	cmp	r3, #4
 8001102:	d005      	beq.n	8001110 <__aeabi_dadd+0x110>
 8001104:	1d23      	adds	r3, r4, #4
 8001106:	42a3      	cmp	r3, r4
 8001108:	41a4      	sbcs	r4, r4
 800110a:	4264      	negs	r4, r4
 800110c:	44a2      	add	sl, r4
 800110e:	001c      	movs	r4, r3
 8001110:	4653      	mov	r3, sl
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	d400      	bmi.n	8001118 <__aeabi_dadd+0x118>
 8001116:	e09b      	b.n	8001250 <__aeabi_dadd+0x250>
 8001118:	4b94      	ldr	r3, [pc, #592]	; (800136c <__aeabi_dadd+0x36c>)
 800111a:	3601      	adds	r6, #1
 800111c:	429e      	cmp	r6, r3
 800111e:	d100      	bne.n	8001122 <__aeabi_dadd+0x122>
 8001120:	e0b8      	b.n	8001294 <__aeabi_dadd+0x294>
 8001122:	4653      	mov	r3, sl
 8001124:	4992      	ldr	r1, [pc, #584]	; (8001370 <__aeabi_dadd+0x370>)
 8001126:	08e4      	lsrs	r4, r4, #3
 8001128:	400b      	ands	r3, r1
 800112a:	0019      	movs	r1, r3
 800112c:	075b      	lsls	r3, r3, #29
 800112e:	4323      	orrs	r3, r4
 8001130:	0572      	lsls	r2, r6, #21
 8001132:	024c      	lsls	r4, r1, #9
 8001134:	0b24      	lsrs	r4, r4, #12
 8001136:	0d52      	lsrs	r2, r2, #21
 8001138:	0512      	lsls	r2, r2, #20
 800113a:	07ed      	lsls	r5, r5, #31
 800113c:	4322      	orrs	r2, r4
 800113e:	432a      	orrs	r2, r5
 8001140:	0018      	movs	r0, r3
 8001142:	0011      	movs	r1, r2
 8001144:	bce0      	pop	{r5, r6, r7}
 8001146:	46ba      	mov	sl, r7
 8001148:	46b1      	mov	r9, r6
 800114a:	46a8      	mov	r8, r5
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114e:	2f00      	cmp	r7, #0
 8001150:	d048      	beq.n	80011e4 <__aeabi_dadd+0x1e4>
 8001152:	1b97      	subs	r7, r2, r6
 8001154:	2e00      	cmp	r6, #0
 8001156:	d000      	beq.n	800115a <__aeabi_dadd+0x15a>
 8001158:	e10e      	b.n	8001378 <__aeabi_dadd+0x378>
 800115a:	000c      	movs	r4, r1
 800115c:	431c      	orrs	r4, r3
 800115e:	d100      	bne.n	8001162 <__aeabi_dadd+0x162>
 8001160:	e1b7      	b.n	80014d2 <__aeabi_dadd+0x4d2>
 8001162:	1e7c      	subs	r4, r7, #1
 8001164:	2f01      	cmp	r7, #1
 8001166:	d100      	bne.n	800116a <__aeabi_dadd+0x16a>
 8001168:	e226      	b.n	80015b8 <__aeabi_dadd+0x5b8>
 800116a:	4d80      	ldr	r5, [pc, #512]	; (800136c <__aeabi_dadd+0x36c>)
 800116c:	42af      	cmp	r7, r5
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x172>
 8001170:	e1d5      	b.n	800151e <__aeabi_dadd+0x51e>
 8001172:	0027      	movs	r7, r4
 8001174:	e107      	b.n	8001386 <__aeabi_dadd+0x386>
 8001176:	2f00      	cmp	r7, #0
 8001178:	dc00      	bgt.n	800117c <__aeabi_dadd+0x17c>
 800117a:	e0b2      	b.n	80012e2 <__aeabi_dadd+0x2e2>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d047      	beq.n	8001210 <__aeabi_dadd+0x210>
 8001180:	4a7a      	ldr	r2, [pc, #488]	; (800136c <__aeabi_dadd+0x36c>)
 8001182:	4296      	cmp	r6, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x188>
 8001186:	e089      	b.n	800129c <__aeabi_dadd+0x29c>
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	464c      	mov	r4, r9
 800118c:	0412      	lsls	r2, r2, #16
 800118e:	4314      	orrs	r4, r2
 8001190:	46a1      	mov	r9, r4
 8001192:	2f38      	cmp	r7, #56	; 0x38
 8001194:	dc6b      	bgt.n	800126e <__aeabi_dadd+0x26e>
 8001196:	2f1f      	cmp	r7, #31
 8001198:	dc00      	bgt.n	800119c <__aeabi_dadd+0x19c>
 800119a:	e16e      	b.n	800147a <__aeabi_dadd+0x47a>
 800119c:	003a      	movs	r2, r7
 800119e:	4648      	mov	r0, r9
 80011a0:	3a20      	subs	r2, #32
 80011a2:	40d0      	lsrs	r0, r2
 80011a4:	4684      	mov	ip, r0
 80011a6:	2f20      	cmp	r7, #32
 80011a8:	d007      	beq.n	80011ba <__aeabi_dadd+0x1ba>
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	4648      	mov	r0, r9
 80011ae:	1bd2      	subs	r2, r2, r7
 80011b0:	4090      	lsls	r0, r2
 80011b2:	0002      	movs	r2, r0
 80011b4:	4640      	mov	r0, r8
 80011b6:	4310      	orrs	r0, r2
 80011b8:	4680      	mov	r8, r0
 80011ba:	4640      	mov	r0, r8
 80011bc:	1e42      	subs	r2, r0, #1
 80011be:	4190      	sbcs	r0, r2
 80011c0:	4662      	mov	r2, ip
 80011c2:	0004      	movs	r4, r0
 80011c4:	4314      	orrs	r4, r2
 80011c6:	e057      	b.n	8001278 <__aeabi_dadd+0x278>
 80011c8:	464a      	mov	r2, r9
 80011ca:	4302      	orrs	r2, r0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x1d0>
 80011ce:	e103      	b.n	80013d8 <__aeabi_dadd+0x3d8>
 80011d0:	1e7a      	subs	r2, r7, #1
 80011d2:	2f01      	cmp	r7, #1
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x1d8>
 80011d6:	e193      	b.n	8001500 <__aeabi_dadd+0x500>
 80011d8:	4c64      	ldr	r4, [pc, #400]	; (800136c <__aeabi_dadd+0x36c>)
 80011da:	42a7      	cmp	r7, r4
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dadd+0x1e0>
 80011de:	e18a      	b.n	80014f6 <__aeabi_dadd+0x4f6>
 80011e0:	0017      	movs	r7, r2
 80011e2:	e73b      	b.n	800105c <__aeabi_dadd+0x5c>
 80011e4:	4c63      	ldr	r4, [pc, #396]	; (8001374 <__aeabi_dadd+0x374>)
 80011e6:	1c72      	adds	r2, r6, #1
 80011e8:	4222      	tst	r2, r4
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x1ee>
 80011ec:	e0e0      	b.n	80013b0 <__aeabi_dadd+0x3b0>
 80011ee:	000a      	movs	r2, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_dadd+0x1f8>
 80011f6:	e174      	b.n	80014e2 <__aeabi_dadd+0x4e2>
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x1fe>
 80011fc:	e1d0      	b.n	80015a0 <__aeabi_dadd+0x5a0>
 80011fe:	464a      	mov	r2, r9
 8001200:	4302      	orrs	r2, r0
 8001202:	d000      	beq.n	8001206 <__aeabi_dadd+0x206>
 8001204:	e1e3      	b.n	80015ce <__aeabi_dadd+0x5ce>
 8001206:	074a      	lsls	r2, r1, #29
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	4313      	orrs	r3, r2
 800120c:	08c9      	lsrs	r1, r1, #3
 800120e:	e029      	b.n	8001264 <__aeabi_dadd+0x264>
 8001210:	464a      	mov	r2, r9
 8001212:	4302      	orrs	r2, r0
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x218>
 8001216:	e17d      	b.n	8001514 <__aeabi_dadd+0x514>
 8001218:	1e7a      	subs	r2, r7, #1
 800121a:	2f01      	cmp	r7, #1
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x220>
 800121e:	e0e0      	b.n	80013e2 <__aeabi_dadd+0x3e2>
 8001220:	4c52      	ldr	r4, [pc, #328]	; (800136c <__aeabi_dadd+0x36c>)
 8001222:	42a7      	cmp	r7, r4
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x228>
 8001226:	e166      	b.n	80014f6 <__aeabi_dadd+0x4f6>
 8001228:	0017      	movs	r7, r2
 800122a:	e7b2      	b.n	8001192 <__aeabi_dadd+0x192>
 800122c:	0010      	movs	r0, r2
 800122e:	3b1f      	subs	r3, #31
 8001230:	40d8      	lsrs	r0, r3
 8001232:	2920      	cmp	r1, #32
 8001234:	d003      	beq.n	800123e <__aeabi_dadd+0x23e>
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	409a      	lsls	r2, r3
 800123c:	4314      	orrs	r4, r2
 800123e:	1e63      	subs	r3, r4, #1
 8001240:	419c      	sbcs	r4, r3
 8001242:	2300      	movs	r3, #0
 8001244:	2600      	movs	r6, #0
 8001246:	469a      	mov	sl, r3
 8001248:	4304      	orrs	r4, r0
 800124a:	0763      	lsls	r3, r4, #29
 800124c:	d000      	beq.n	8001250 <__aeabi_dadd+0x250>
 800124e:	e755      	b.n	80010fc <__aeabi_dadd+0xfc>
 8001250:	4652      	mov	r2, sl
 8001252:	08e3      	lsrs	r3, r4, #3
 8001254:	0752      	lsls	r2, r2, #29
 8001256:	4313      	orrs	r3, r2
 8001258:	4652      	mov	r2, sl
 800125a:	0037      	movs	r7, r6
 800125c:	08d1      	lsrs	r1, r2, #3
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <__aeabi_dadd+0x36c>)
 8001260:	4297      	cmp	r7, r2
 8001262:	d01f      	beq.n	80012a4 <__aeabi_dadd+0x2a4>
 8001264:	0309      	lsls	r1, r1, #12
 8001266:	057a      	lsls	r2, r7, #21
 8001268:	0b0c      	lsrs	r4, r1, #12
 800126a:	0d52      	lsrs	r2, r2, #21
 800126c:	e764      	b.n	8001138 <__aeabi_dadd+0x138>
 800126e:	4642      	mov	r2, r8
 8001270:	464c      	mov	r4, r9
 8001272:	4314      	orrs	r4, r2
 8001274:	1e62      	subs	r2, r4, #1
 8001276:	4194      	sbcs	r4, r2
 8001278:	18e4      	adds	r4, r4, r3
 800127a:	429c      	cmp	r4, r3
 800127c:	4192      	sbcs	r2, r2
 800127e:	4252      	negs	r2, r2
 8001280:	4692      	mov	sl, r2
 8001282:	448a      	add	sl, r1
 8001284:	4653      	mov	r3, sl
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	d5df      	bpl.n	800124a <__aeabi_dadd+0x24a>
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <__aeabi_dadd+0x36c>)
 800128c:	3601      	adds	r6, #1
 800128e:	429e      	cmp	r6, r3
 8001290:	d000      	beq.n	8001294 <__aeabi_dadd+0x294>
 8001292:	e0b3      	b.n	80013fc <__aeabi_dadd+0x3fc>
 8001294:	0032      	movs	r2, r6
 8001296:	2400      	movs	r4, #0
 8001298:	2300      	movs	r3, #0
 800129a:	e74d      	b.n	8001138 <__aeabi_dadd+0x138>
 800129c:	074a      	lsls	r2, r1, #29
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	08c9      	lsrs	r1, r1, #3
 80012a4:	001a      	movs	r2, r3
 80012a6:	430a      	orrs	r2, r1
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x2ac>
 80012aa:	e200      	b.n	80016ae <__aeabi_dadd+0x6ae>
 80012ac:	2480      	movs	r4, #128	; 0x80
 80012ae:	0324      	lsls	r4, r4, #12
 80012b0:	430c      	orrs	r4, r1
 80012b2:	0324      	lsls	r4, r4, #12
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <__aeabi_dadd+0x36c>)
 80012b6:	0b24      	lsrs	r4, r4, #12
 80012b8:	e73e      	b.n	8001138 <__aeabi_dadd+0x138>
 80012ba:	0020      	movs	r0, r4
 80012bc:	f000 fdd4 	bl	8001e68 <__clzsi2>
 80012c0:	0003      	movs	r3, r0
 80012c2:	3318      	adds	r3, #24
 80012c4:	2b1f      	cmp	r3, #31
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_dadd+0x2ca>
 80012c8:	e6f7      	b.n	80010ba <__aeabi_dadd+0xba>
 80012ca:	0022      	movs	r2, r4
 80012cc:	3808      	subs	r0, #8
 80012ce:	4082      	lsls	r2, r0
 80012d0:	2400      	movs	r4, #0
 80012d2:	42b3      	cmp	r3, r6
 80012d4:	db00      	blt.n	80012d8 <__aeabi_dadd+0x2d8>
 80012d6:	e6fc      	b.n	80010d2 <__aeabi_dadd+0xd2>
 80012d8:	1af6      	subs	r6, r6, r3
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <__aeabi_dadd+0x370>)
 80012dc:	401a      	ands	r2, r3
 80012de:	4692      	mov	sl, r2
 80012e0:	e70a      	b.n	80010f8 <__aeabi_dadd+0xf8>
 80012e2:	2f00      	cmp	r7, #0
 80012e4:	d02b      	beq.n	800133e <__aeabi_dadd+0x33e>
 80012e6:	1b97      	subs	r7, r2, r6
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x2ee>
 80012ec:	e0b8      	b.n	8001460 <__aeabi_dadd+0x460>
 80012ee:	4c1f      	ldr	r4, [pc, #124]	; (800136c <__aeabi_dadd+0x36c>)
 80012f0:	42a2      	cmp	r2, r4
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x2f6>
 80012f4:	e11c      	b.n	8001530 <__aeabi_dadd+0x530>
 80012f6:	2480      	movs	r4, #128	; 0x80
 80012f8:	0424      	lsls	r4, r4, #16
 80012fa:	4321      	orrs	r1, r4
 80012fc:	2f38      	cmp	r7, #56	; 0x38
 80012fe:	dd00      	ble.n	8001302 <__aeabi_dadd+0x302>
 8001300:	e11e      	b.n	8001540 <__aeabi_dadd+0x540>
 8001302:	2f1f      	cmp	r7, #31
 8001304:	dd00      	ble.n	8001308 <__aeabi_dadd+0x308>
 8001306:	e19e      	b.n	8001646 <__aeabi_dadd+0x646>
 8001308:	2620      	movs	r6, #32
 800130a:	000c      	movs	r4, r1
 800130c:	1bf6      	subs	r6, r6, r7
 800130e:	0018      	movs	r0, r3
 8001310:	40b3      	lsls	r3, r6
 8001312:	40b4      	lsls	r4, r6
 8001314:	40f8      	lsrs	r0, r7
 8001316:	1e5e      	subs	r6, r3, #1
 8001318:	41b3      	sbcs	r3, r6
 800131a:	40f9      	lsrs	r1, r7
 800131c:	4304      	orrs	r4, r0
 800131e:	431c      	orrs	r4, r3
 8001320:	4489      	add	r9, r1
 8001322:	4444      	add	r4, r8
 8001324:	4544      	cmp	r4, r8
 8001326:	419b      	sbcs	r3, r3
 8001328:	425b      	negs	r3, r3
 800132a:	444b      	add	r3, r9
 800132c:	469a      	mov	sl, r3
 800132e:	0016      	movs	r6, r2
 8001330:	e7a8      	b.n	8001284 <__aeabi_dadd+0x284>
 8001332:	4642      	mov	r2, r8
 8001334:	464c      	mov	r4, r9
 8001336:	4314      	orrs	r4, r2
 8001338:	1e62      	subs	r2, r4, #1
 800133a:	4194      	sbcs	r4, r2
 800133c:	e6a6      	b.n	800108c <__aeabi_dadd+0x8c>
 800133e:	4c0d      	ldr	r4, [pc, #52]	; (8001374 <__aeabi_dadd+0x374>)
 8001340:	1c72      	adds	r2, r6, #1
 8001342:	4222      	tst	r2, r4
 8001344:	d000      	beq.n	8001348 <__aeabi_dadd+0x348>
 8001346:	e0a8      	b.n	800149a <__aeabi_dadd+0x49a>
 8001348:	000a      	movs	r2, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	2e00      	cmp	r6, #0
 800134e:	d000      	beq.n	8001352 <__aeabi_dadd+0x352>
 8001350:	e10a      	b.n	8001568 <__aeabi_dadd+0x568>
 8001352:	2a00      	cmp	r2, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x358>
 8001356:	e15e      	b.n	8001616 <__aeabi_dadd+0x616>
 8001358:	464a      	mov	r2, r9
 800135a:	4302      	orrs	r2, r0
 800135c:	d000      	beq.n	8001360 <__aeabi_dadd+0x360>
 800135e:	e161      	b.n	8001624 <__aeabi_dadd+0x624>
 8001360:	074a      	lsls	r2, r1, #29
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	4313      	orrs	r3, r2
 8001366:	08c9      	lsrs	r1, r1, #3
 8001368:	e77c      	b.n	8001264 <__aeabi_dadd+0x264>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	000007ff 	.word	0x000007ff
 8001370:	ff7fffff 	.word	0xff7fffff
 8001374:	000007fe 	.word	0x000007fe
 8001378:	4ccf      	ldr	r4, [pc, #828]	; (80016b8 <__aeabi_dadd+0x6b8>)
 800137a:	42a2      	cmp	r2, r4
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x380>
 800137e:	e0ce      	b.n	800151e <__aeabi_dadd+0x51e>
 8001380:	2480      	movs	r4, #128	; 0x80
 8001382:	0424      	lsls	r4, r4, #16
 8001384:	4321      	orrs	r1, r4
 8001386:	2f38      	cmp	r7, #56	; 0x38
 8001388:	dc5b      	bgt.n	8001442 <__aeabi_dadd+0x442>
 800138a:	2f1f      	cmp	r7, #31
 800138c:	dd00      	ble.n	8001390 <__aeabi_dadd+0x390>
 800138e:	e0dc      	b.n	800154a <__aeabi_dadd+0x54a>
 8001390:	2520      	movs	r5, #32
 8001392:	000c      	movs	r4, r1
 8001394:	1bed      	subs	r5, r5, r7
 8001396:	001e      	movs	r6, r3
 8001398:	40ab      	lsls	r3, r5
 800139a:	40ac      	lsls	r4, r5
 800139c:	40fe      	lsrs	r6, r7
 800139e:	1e5d      	subs	r5, r3, #1
 80013a0:	41ab      	sbcs	r3, r5
 80013a2:	4334      	orrs	r4, r6
 80013a4:	40f9      	lsrs	r1, r7
 80013a6:	431c      	orrs	r4, r3
 80013a8:	464b      	mov	r3, r9
 80013aa:	1a5b      	subs	r3, r3, r1
 80013ac:	4699      	mov	r9, r3
 80013ae:	e04c      	b.n	800144a <__aeabi_dadd+0x44a>
 80013b0:	464a      	mov	r2, r9
 80013b2:	1a1c      	subs	r4, r3, r0
 80013b4:	1a88      	subs	r0, r1, r2
 80013b6:	42a3      	cmp	r3, r4
 80013b8:	4192      	sbcs	r2, r2
 80013ba:	4252      	negs	r2, r2
 80013bc:	4692      	mov	sl, r2
 80013be:	0002      	movs	r2, r0
 80013c0:	4650      	mov	r0, sl
 80013c2:	1a12      	subs	r2, r2, r0
 80013c4:	4692      	mov	sl, r2
 80013c6:	0212      	lsls	r2, r2, #8
 80013c8:	d478      	bmi.n	80014bc <__aeabi_dadd+0x4bc>
 80013ca:	4653      	mov	r3, sl
 80013cc:	4323      	orrs	r3, r4
 80013ce:	d000      	beq.n	80013d2 <__aeabi_dadd+0x3d2>
 80013d0:	e66a      	b.n	80010a8 <__aeabi_dadd+0xa8>
 80013d2:	2100      	movs	r1, #0
 80013d4:	2500      	movs	r5, #0
 80013d6:	e745      	b.n	8001264 <__aeabi_dadd+0x264>
 80013d8:	074a      	lsls	r2, r1, #29
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	4313      	orrs	r3, r2
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	e73d      	b.n	800125e <__aeabi_dadd+0x25e>
 80013e2:	181c      	adds	r4, r3, r0
 80013e4:	429c      	cmp	r4, r3
 80013e6:	419b      	sbcs	r3, r3
 80013e8:	4449      	add	r1, r9
 80013ea:	468a      	mov	sl, r1
 80013ec:	425b      	negs	r3, r3
 80013ee:	449a      	add	sl, r3
 80013f0:	4653      	mov	r3, sl
 80013f2:	2601      	movs	r6, #1
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x3fa>
 80013f8:	e727      	b.n	800124a <__aeabi_dadd+0x24a>
 80013fa:	2602      	movs	r6, #2
 80013fc:	4652      	mov	r2, sl
 80013fe:	4baf      	ldr	r3, [pc, #700]	; (80016bc <__aeabi_dadd+0x6bc>)
 8001400:	2101      	movs	r1, #1
 8001402:	401a      	ands	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	4021      	ands	r1, r4
 8001408:	0862      	lsrs	r2, r4, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	07dc      	lsls	r4, r3, #31
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	469a      	mov	sl, r3
 8001412:	4314      	orrs	r4, r2
 8001414:	e670      	b.n	80010f8 <__aeabi_dadd+0xf8>
 8001416:	003a      	movs	r2, r7
 8001418:	464c      	mov	r4, r9
 800141a:	3a20      	subs	r2, #32
 800141c:	40d4      	lsrs	r4, r2
 800141e:	46a4      	mov	ip, r4
 8001420:	2f20      	cmp	r7, #32
 8001422:	d007      	beq.n	8001434 <__aeabi_dadd+0x434>
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	4648      	mov	r0, r9
 8001428:	1bd2      	subs	r2, r2, r7
 800142a:	4090      	lsls	r0, r2
 800142c:	0002      	movs	r2, r0
 800142e:	4640      	mov	r0, r8
 8001430:	4310      	orrs	r0, r2
 8001432:	4680      	mov	r8, r0
 8001434:	4640      	mov	r0, r8
 8001436:	1e42      	subs	r2, r0, #1
 8001438:	4190      	sbcs	r0, r2
 800143a:	4662      	mov	r2, ip
 800143c:	0004      	movs	r4, r0
 800143e:	4314      	orrs	r4, r2
 8001440:	e624      	b.n	800108c <__aeabi_dadd+0x8c>
 8001442:	4319      	orrs	r1, r3
 8001444:	000c      	movs	r4, r1
 8001446:	1e63      	subs	r3, r4, #1
 8001448:	419c      	sbcs	r4, r3
 800144a:	4643      	mov	r3, r8
 800144c:	1b1c      	subs	r4, r3, r4
 800144e:	45a0      	cmp	r8, r4
 8001450:	419b      	sbcs	r3, r3
 8001452:	4649      	mov	r1, r9
 8001454:	425b      	negs	r3, r3
 8001456:	1acb      	subs	r3, r1, r3
 8001458:	469a      	mov	sl, r3
 800145a:	4665      	mov	r5, ip
 800145c:	0016      	movs	r6, r2
 800145e:	e61b      	b.n	8001098 <__aeabi_dadd+0x98>
 8001460:	000c      	movs	r4, r1
 8001462:	431c      	orrs	r4, r3
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x468>
 8001466:	e0c7      	b.n	80015f8 <__aeabi_dadd+0x5f8>
 8001468:	1e7c      	subs	r4, r7, #1
 800146a:	2f01      	cmp	r7, #1
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x470>
 800146e:	e0f9      	b.n	8001664 <__aeabi_dadd+0x664>
 8001470:	4e91      	ldr	r6, [pc, #580]	; (80016b8 <__aeabi_dadd+0x6b8>)
 8001472:	42b7      	cmp	r7, r6
 8001474:	d05c      	beq.n	8001530 <__aeabi_dadd+0x530>
 8001476:	0027      	movs	r7, r4
 8001478:	e740      	b.n	80012fc <__aeabi_dadd+0x2fc>
 800147a:	2220      	movs	r2, #32
 800147c:	464c      	mov	r4, r9
 800147e:	4640      	mov	r0, r8
 8001480:	1bd2      	subs	r2, r2, r7
 8001482:	4094      	lsls	r4, r2
 8001484:	40f8      	lsrs	r0, r7
 8001486:	4304      	orrs	r4, r0
 8001488:	4640      	mov	r0, r8
 800148a:	4090      	lsls	r0, r2
 800148c:	1e42      	subs	r2, r0, #1
 800148e:	4190      	sbcs	r0, r2
 8001490:	464a      	mov	r2, r9
 8001492:	40fa      	lsrs	r2, r7
 8001494:	4304      	orrs	r4, r0
 8001496:	1889      	adds	r1, r1, r2
 8001498:	e6ee      	b.n	8001278 <__aeabi_dadd+0x278>
 800149a:	4c87      	ldr	r4, [pc, #540]	; (80016b8 <__aeabi_dadd+0x6b8>)
 800149c:	42a2      	cmp	r2, r4
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x4a2>
 80014a0:	e6f9      	b.n	8001296 <__aeabi_dadd+0x296>
 80014a2:	1818      	adds	r0, r3, r0
 80014a4:	4298      	cmp	r0, r3
 80014a6:	419b      	sbcs	r3, r3
 80014a8:	4449      	add	r1, r9
 80014aa:	425b      	negs	r3, r3
 80014ac:	18cb      	adds	r3, r1, r3
 80014ae:	07dc      	lsls	r4, r3, #31
 80014b0:	0840      	lsrs	r0, r0, #1
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	469a      	mov	sl, r3
 80014b6:	0016      	movs	r6, r2
 80014b8:	4304      	orrs	r4, r0
 80014ba:	e6c6      	b.n	800124a <__aeabi_dadd+0x24a>
 80014bc:	4642      	mov	r2, r8
 80014be:	1ad4      	subs	r4, r2, r3
 80014c0:	45a0      	cmp	r8, r4
 80014c2:	4180      	sbcs	r0, r0
 80014c4:	464b      	mov	r3, r9
 80014c6:	4240      	negs	r0, r0
 80014c8:	1a59      	subs	r1, r3, r1
 80014ca:	1a0b      	subs	r3, r1, r0
 80014cc:	469a      	mov	sl, r3
 80014ce:	4665      	mov	r5, ip
 80014d0:	e5ea      	b.n	80010a8 <__aeabi_dadd+0xa8>
 80014d2:	464b      	mov	r3, r9
 80014d4:	464a      	mov	r2, r9
 80014d6:	08c0      	lsrs	r0, r0, #3
 80014d8:	075b      	lsls	r3, r3, #29
 80014da:	4665      	mov	r5, ip
 80014dc:	4303      	orrs	r3, r0
 80014de:	08d1      	lsrs	r1, r2, #3
 80014e0:	e6bd      	b.n	800125e <__aeabi_dadd+0x25e>
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d000      	beq.n	80014e8 <__aeabi_dadd+0x4e8>
 80014e6:	e08e      	b.n	8001606 <__aeabi_dadd+0x606>
 80014e8:	464b      	mov	r3, r9
 80014ea:	4303      	orrs	r3, r0
 80014ec:	d117      	bne.n	800151e <__aeabi_dadd+0x51e>
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	2500      	movs	r5, #0
 80014f2:	0309      	lsls	r1, r1, #12
 80014f4:	e6da      	b.n	80012ac <__aeabi_dadd+0x2ac>
 80014f6:	074a      	lsls	r2, r1, #29
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	08c9      	lsrs	r1, r1, #3
 80014fe:	e6d1      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001500:	1a1c      	subs	r4, r3, r0
 8001502:	464a      	mov	r2, r9
 8001504:	42a3      	cmp	r3, r4
 8001506:	419b      	sbcs	r3, r3
 8001508:	1a89      	subs	r1, r1, r2
 800150a:	425b      	negs	r3, r3
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	469a      	mov	sl, r3
 8001510:	2601      	movs	r6, #1
 8001512:	e5c1      	b.n	8001098 <__aeabi_dadd+0x98>
 8001514:	074a      	lsls	r2, r1, #29
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	4313      	orrs	r3, r2
 800151a:	08c9      	lsrs	r1, r1, #3
 800151c:	e69f      	b.n	800125e <__aeabi_dadd+0x25e>
 800151e:	4643      	mov	r3, r8
 8001520:	08d8      	lsrs	r0, r3, #3
 8001522:	464b      	mov	r3, r9
 8001524:	464a      	mov	r2, r9
 8001526:	075b      	lsls	r3, r3, #29
 8001528:	4665      	mov	r5, ip
 800152a:	4303      	orrs	r3, r0
 800152c:	08d1      	lsrs	r1, r2, #3
 800152e:	e6b9      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001530:	4643      	mov	r3, r8
 8001532:	08d8      	lsrs	r0, r3, #3
 8001534:	464b      	mov	r3, r9
 8001536:	464a      	mov	r2, r9
 8001538:	075b      	lsls	r3, r3, #29
 800153a:	4303      	orrs	r3, r0
 800153c:	08d1      	lsrs	r1, r2, #3
 800153e:	e6b1      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001540:	4319      	orrs	r1, r3
 8001542:	000c      	movs	r4, r1
 8001544:	1e63      	subs	r3, r4, #1
 8001546:	419c      	sbcs	r4, r3
 8001548:	e6eb      	b.n	8001322 <__aeabi_dadd+0x322>
 800154a:	003c      	movs	r4, r7
 800154c:	000d      	movs	r5, r1
 800154e:	3c20      	subs	r4, #32
 8001550:	40e5      	lsrs	r5, r4
 8001552:	2f20      	cmp	r7, #32
 8001554:	d003      	beq.n	800155e <__aeabi_dadd+0x55e>
 8001556:	2440      	movs	r4, #64	; 0x40
 8001558:	1be4      	subs	r4, r4, r7
 800155a:	40a1      	lsls	r1, r4
 800155c:	430b      	orrs	r3, r1
 800155e:	001c      	movs	r4, r3
 8001560:	1e63      	subs	r3, r4, #1
 8001562:	419c      	sbcs	r4, r3
 8001564:	432c      	orrs	r4, r5
 8001566:	e770      	b.n	800144a <__aeabi_dadd+0x44a>
 8001568:	2a00      	cmp	r2, #0
 800156a:	d0e1      	beq.n	8001530 <__aeabi_dadd+0x530>
 800156c:	464a      	mov	r2, r9
 800156e:	4302      	orrs	r2, r0
 8001570:	d0c1      	beq.n	80014f6 <__aeabi_dadd+0x4f6>
 8001572:	074a      	lsls	r2, r1, #29
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	4313      	orrs	r3, r2
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	08c9      	lsrs	r1, r1, #3
 800157c:	0312      	lsls	r2, r2, #12
 800157e:	4211      	tst	r1, r2
 8001580:	d008      	beq.n	8001594 <__aeabi_dadd+0x594>
 8001582:	4648      	mov	r0, r9
 8001584:	08c4      	lsrs	r4, r0, #3
 8001586:	4214      	tst	r4, r2
 8001588:	d104      	bne.n	8001594 <__aeabi_dadd+0x594>
 800158a:	4643      	mov	r3, r8
 800158c:	0021      	movs	r1, r4
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	0742      	lsls	r2, r0, #29
 8001592:	4313      	orrs	r3, r2
 8001594:	0f5a      	lsrs	r2, r3, #29
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	0752      	lsls	r2, r2, #29
 800159a:	08db      	lsrs	r3, r3, #3
 800159c:	4313      	orrs	r3, r2
 800159e:	e681      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 80015a0:	464b      	mov	r3, r9
 80015a2:	4303      	orrs	r3, r0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x5a8>
 80015a6:	e714      	b.n	80013d2 <__aeabi_dadd+0x3d2>
 80015a8:	464b      	mov	r3, r9
 80015aa:	464a      	mov	r2, r9
 80015ac:	08c0      	lsrs	r0, r0, #3
 80015ae:	075b      	lsls	r3, r3, #29
 80015b0:	4665      	mov	r5, ip
 80015b2:	4303      	orrs	r3, r0
 80015b4:	08d1      	lsrs	r1, r2, #3
 80015b6:	e655      	b.n	8001264 <__aeabi_dadd+0x264>
 80015b8:	1ac4      	subs	r4, r0, r3
 80015ba:	45a0      	cmp	r8, r4
 80015bc:	4180      	sbcs	r0, r0
 80015be:	464b      	mov	r3, r9
 80015c0:	4240      	negs	r0, r0
 80015c2:	1a59      	subs	r1, r3, r1
 80015c4:	1a0b      	subs	r3, r1, r0
 80015c6:	469a      	mov	sl, r3
 80015c8:	4665      	mov	r5, ip
 80015ca:	2601      	movs	r6, #1
 80015cc:	e564      	b.n	8001098 <__aeabi_dadd+0x98>
 80015ce:	1a1c      	subs	r4, r3, r0
 80015d0:	464a      	mov	r2, r9
 80015d2:	42a3      	cmp	r3, r4
 80015d4:	4180      	sbcs	r0, r0
 80015d6:	1a8a      	subs	r2, r1, r2
 80015d8:	4240      	negs	r0, r0
 80015da:	1a12      	subs	r2, r2, r0
 80015dc:	4692      	mov	sl, r2
 80015de:	0212      	lsls	r2, r2, #8
 80015e0:	d549      	bpl.n	8001676 <__aeabi_dadd+0x676>
 80015e2:	4642      	mov	r2, r8
 80015e4:	1ad4      	subs	r4, r2, r3
 80015e6:	45a0      	cmp	r8, r4
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	464b      	mov	r3, r9
 80015ec:	4240      	negs	r0, r0
 80015ee:	1a59      	subs	r1, r3, r1
 80015f0:	1a0b      	subs	r3, r1, r0
 80015f2:	469a      	mov	sl, r3
 80015f4:	4665      	mov	r5, ip
 80015f6:	e57f      	b.n	80010f8 <__aeabi_dadd+0xf8>
 80015f8:	464b      	mov	r3, r9
 80015fa:	464a      	mov	r2, r9
 80015fc:	08c0      	lsrs	r0, r0, #3
 80015fe:	075b      	lsls	r3, r3, #29
 8001600:	4303      	orrs	r3, r0
 8001602:	08d1      	lsrs	r1, r2, #3
 8001604:	e62b      	b.n	800125e <__aeabi_dadd+0x25e>
 8001606:	464a      	mov	r2, r9
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	4302      	orrs	r2, r0
 800160c:	d138      	bne.n	8001680 <__aeabi_dadd+0x680>
 800160e:	074a      	lsls	r2, r1, #29
 8001610:	4313      	orrs	r3, r2
 8001612:	08c9      	lsrs	r1, r1, #3
 8001614:	e646      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 8001616:	464b      	mov	r3, r9
 8001618:	464a      	mov	r2, r9
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	075b      	lsls	r3, r3, #29
 800161e:	4303      	orrs	r3, r0
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	e61f      	b.n	8001264 <__aeabi_dadd+0x264>
 8001624:	181c      	adds	r4, r3, r0
 8001626:	429c      	cmp	r4, r3
 8001628:	419b      	sbcs	r3, r3
 800162a:	4449      	add	r1, r9
 800162c:	468a      	mov	sl, r1
 800162e:	425b      	negs	r3, r3
 8001630:	449a      	add	sl, r3
 8001632:	4653      	mov	r3, sl
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	d400      	bmi.n	800163a <__aeabi_dadd+0x63a>
 8001638:	e607      	b.n	800124a <__aeabi_dadd+0x24a>
 800163a:	4652      	mov	r2, sl
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <__aeabi_dadd+0x6bc>)
 800163e:	2601      	movs	r6, #1
 8001640:	401a      	ands	r2, r3
 8001642:	4692      	mov	sl, r2
 8001644:	e601      	b.n	800124a <__aeabi_dadd+0x24a>
 8001646:	003c      	movs	r4, r7
 8001648:	000e      	movs	r6, r1
 800164a:	3c20      	subs	r4, #32
 800164c:	40e6      	lsrs	r6, r4
 800164e:	2f20      	cmp	r7, #32
 8001650:	d003      	beq.n	800165a <__aeabi_dadd+0x65a>
 8001652:	2440      	movs	r4, #64	; 0x40
 8001654:	1be4      	subs	r4, r4, r7
 8001656:	40a1      	lsls	r1, r4
 8001658:	430b      	orrs	r3, r1
 800165a:	001c      	movs	r4, r3
 800165c:	1e63      	subs	r3, r4, #1
 800165e:	419c      	sbcs	r4, r3
 8001660:	4334      	orrs	r4, r6
 8001662:	e65e      	b.n	8001322 <__aeabi_dadd+0x322>
 8001664:	4443      	add	r3, r8
 8001666:	4283      	cmp	r3, r0
 8001668:	4180      	sbcs	r0, r0
 800166a:	4449      	add	r1, r9
 800166c:	468a      	mov	sl, r1
 800166e:	4240      	negs	r0, r0
 8001670:	001c      	movs	r4, r3
 8001672:	4482      	add	sl, r0
 8001674:	e6bc      	b.n	80013f0 <__aeabi_dadd+0x3f0>
 8001676:	4653      	mov	r3, sl
 8001678:	4323      	orrs	r3, r4
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x67e>
 800167c:	e6a9      	b.n	80013d2 <__aeabi_dadd+0x3d2>
 800167e:	e5e4      	b.n	800124a <__aeabi_dadd+0x24a>
 8001680:	074a      	lsls	r2, r1, #29
 8001682:	4313      	orrs	r3, r2
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	0312      	lsls	r2, r2, #12
 800168a:	4211      	tst	r1, r2
 800168c:	d009      	beq.n	80016a2 <__aeabi_dadd+0x6a2>
 800168e:	4648      	mov	r0, r9
 8001690:	08c4      	lsrs	r4, r0, #3
 8001692:	4214      	tst	r4, r2
 8001694:	d105      	bne.n	80016a2 <__aeabi_dadd+0x6a2>
 8001696:	4643      	mov	r3, r8
 8001698:	4665      	mov	r5, ip
 800169a:	0021      	movs	r1, r4
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	0742      	lsls	r2, r0, #29
 80016a0:	4313      	orrs	r3, r2
 80016a2:	0f5a      	lsrs	r2, r3, #29
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	0752      	lsls	r2, r2, #29
 80016aa:	4313      	orrs	r3, r2
 80016ac:	e5fa      	b.n	80012a4 <__aeabi_dadd+0x2a4>
 80016ae:	2300      	movs	r3, #0
 80016b0:	4a01      	ldr	r2, [pc, #4]	; (80016b8 <__aeabi_dadd+0x6b8>)
 80016b2:	001c      	movs	r4, r3
 80016b4:	e540      	b.n	8001138 <__aeabi_dadd+0x138>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	ff7fffff 	.word	0xff7fffff

080016c0 <__aeabi_ddiv>:
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	4657      	mov	r7, sl
 80016c4:	464e      	mov	r6, r9
 80016c6:	4645      	mov	r5, r8
 80016c8:	46de      	mov	lr, fp
 80016ca:	b5e0      	push	{r5, r6, r7, lr}
 80016cc:	030c      	lsls	r4, r1, #12
 80016ce:	001f      	movs	r7, r3
 80016d0:	004b      	lsls	r3, r1, #1
 80016d2:	4681      	mov	r9, r0
 80016d4:	4692      	mov	sl, r2
 80016d6:	0005      	movs	r5, r0
 80016d8:	b085      	sub	sp, #20
 80016da:	0b24      	lsrs	r4, r4, #12
 80016dc:	0d5b      	lsrs	r3, r3, #21
 80016de:	0fce      	lsrs	r6, r1, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x26>
 80016e4:	e152      	b.n	800198c <__aeabi_ddiv+0x2cc>
 80016e6:	4ad2      	ldr	r2, [pc, #840]	; (8001a30 <__aeabi_ddiv+0x370>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x2e>
 80016ec:	e16e      	b.n	80019cc <__aeabi_ddiv+0x30c>
 80016ee:	0f42      	lsrs	r2, r0, #29
 80016f0:	00e4      	lsls	r4, r4, #3
 80016f2:	4314      	orrs	r4, r2
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	0412      	lsls	r2, r2, #16
 80016f8:	4322      	orrs	r2, r4
 80016fa:	4690      	mov	r8, r2
 80016fc:	4acd      	ldr	r2, [pc, #820]	; (8001a34 <__aeabi_ddiv+0x374>)
 80016fe:	00c5      	lsls	r5, r0, #3
 8001700:	4693      	mov	fp, r2
 8001702:	449b      	add	fp, r3
 8001704:	2300      	movs	r3, #0
 8001706:	4699      	mov	r9, r3
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	033c      	lsls	r4, r7, #12
 800170c:	007b      	lsls	r3, r7, #1
 800170e:	4650      	mov	r0, sl
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	0fff      	lsrs	r7, r7, #31
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <__aeabi_ddiv+0x5c>
 800171a:	e11a      	b.n	8001952 <__aeabi_ddiv+0x292>
 800171c:	4ac4      	ldr	r2, [pc, #784]	; (8001a30 <__aeabi_ddiv+0x370>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x64>
 8001722:	e15e      	b.n	80019e2 <__aeabi_ddiv+0x322>
 8001724:	0f42      	lsrs	r2, r0, #29
 8001726:	00e4      	lsls	r4, r4, #3
 8001728:	4322      	orrs	r2, r4
 800172a:	2480      	movs	r4, #128	; 0x80
 800172c:	0424      	lsls	r4, r4, #16
 800172e:	4314      	orrs	r4, r2
 8001730:	4ac0      	ldr	r2, [pc, #768]	; (8001a34 <__aeabi_ddiv+0x374>)
 8001732:	00c1      	lsls	r1, r0, #3
 8001734:	4694      	mov	ip, r2
 8001736:	465a      	mov	r2, fp
 8001738:	4463      	add	r3, ip
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	469b      	mov	fp, r3
 800173e:	2000      	movs	r0, #0
 8001740:	0033      	movs	r3, r6
 8001742:	407b      	eors	r3, r7
 8001744:	469a      	mov	sl, r3
 8001746:	464b      	mov	r3, r9
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d827      	bhi.n	800179c <__aeabi_ddiv+0xdc>
 800174c:	4aba      	ldr	r2, [pc, #744]	; (8001a38 <__aeabi_ddiv+0x378>)
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	58d3      	ldr	r3, [r2, r3]
 8001752:	469f      	mov	pc, r3
 8001754:	46b2      	mov	sl, r6
 8001756:	9b00      	ldr	r3, [sp, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d016      	beq.n	800178a <__aeabi_ddiv+0xca>
 800175c:	2b03      	cmp	r3, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_ddiv+0xa2>
 8001760:	e287      	b.n	8001c72 <__aeabi_ddiv+0x5b2>
 8001762:	2b01      	cmp	r3, #1
 8001764:	d000      	beq.n	8001768 <__aeabi_ddiv+0xa8>
 8001766:	e0d5      	b.n	8001914 <__aeabi_ddiv+0x254>
 8001768:	2300      	movs	r3, #0
 800176a:	2200      	movs	r2, #0
 800176c:	2500      	movs	r5, #0
 800176e:	051b      	lsls	r3, r3, #20
 8001770:	4313      	orrs	r3, r2
 8001772:	4652      	mov	r2, sl
 8001774:	07d2      	lsls	r2, r2, #31
 8001776:	4313      	orrs	r3, r2
 8001778:	0028      	movs	r0, r5
 800177a:	0019      	movs	r1, r3
 800177c:	b005      	add	sp, #20
 800177e:	bcf0      	pop	{r4, r5, r6, r7}
 8001780:	46bb      	mov	fp, r7
 8001782:	46b2      	mov	sl, r6
 8001784:	46a9      	mov	r9, r5
 8001786:	46a0      	mov	r8, r4
 8001788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178a:	2200      	movs	r2, #0
 800178c:	2500      	movs	r5, #0
 800178e:	4ba8      	ldr	r3, [pc, #672]	; (8001a30 <__aeabi_ddiv+0x370>)
 8001790:	e7ed      	b.n	800176e <__aeabi_ddiv+0xae>
 8001792:	46ba      	mov	sl, r7
 8001794:	46a0      	mov	r8, r4
 8001796:	000d      	movs	r5, r1
 8001798:	9000      	str	r0, [sp, #0]
 800179a:	e7dc      	b.n	8001756 <__aeabi_ddiv+0x96>
 800179c:	4544      	cmp	r4, r8
 800179e:	d200      	bcs.n	80017a2 <__aeabi_ddiv+0xe2>
 80017a0:	e1c4      	b.n	8001b2c <__aeabi_ddiv+0x46c>
 80017a2:	d100      	bne.n	80017a6 <__aeabi_ddiv+0xe6>
 80017a4:	e1bf      	b.n	8001b26 <__aeabi_ddiv+0x466>
 80017a6:	2301      	movs	r3, #1
 80017a8:	425b      	negs	r3, r3
 80017aa:	469c      	mov	ip, r3
 80017ac:	002e      	movs	r6, r5
 80017ae:	4640      	mov	r0, r8
 80017b0:	2500      	movs	r5, #0
 80017b2:	44e3      	add	fp, ip
 80017b4:	0223      	lsls	r3, r4, #8
 80017b6:	0e0c      	lsrs	r4, r1, #24
 80017b8:	431c      	orrs	r4, r3
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	4699      	mov	r9, r3
 80017be:	0423      	lsls	r3, r4, #16
 80017c0:	020a      	lsls	r2, r1, #8
 80017c2:	0c1f      	lsrs	r7, r3, #16
 80017c4:	4649      	mov	r1, r9
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	9701      	str	r7, [sp, #4]
 80017ca:	f7fe fd49 	bl	8000260 <__aeabi_uidivmod>
 80017ce:	0002      	movs	r2, r0
 80017d0:	437a      	muls	r2, r7
 80017d2:	040b      	lsls	r3, r1, #16
 80017d4:	0c31      	lsrs	r1, r6, #16
 80017d6:	4680      	mov	r8, r0
 80017d8:	4319      	orrs	r1, r3
 80017da:	428a      	cmp	r2, r1
 80017dc:	d907      	bls.n	80017ee <__aeabi_ddiv+0x12e>
 80017de:	2301      	movs	r3, #1
 80017e0:	425b      	negs	r3, r3
 80017e2:	469c      	mov	ip, r3
 80017e4:	1909      	adds	r1, r1, r4
 80017e6:	44e0      	add	r8, ip
 80017e8:	428c      	cmp	r4, r1
 80017ea:	d800      	bhi.n	80017ee <__aeabi_ddiv+0x12e>
 80017ec:	e201      	b.n	8001bf2 <__aeabi_ddiv+0x532>
 80017ee:	1a88      	subs	r0, r1, r2
 80017f0:	4649      	mov	r1, r9
 80017f2:	f7fe fd35 	bl	8000260 <__aeabi_uidivmod>
 80017f6:	9a01      	ldr	r2, [sp, #4]
 80017f8:	0436      	lsls	r6, r6, #16
 80017fa:	4342      	muls	r2, r0
 80017fc:	0409      	lsls	r1, r1, #16
 80017fe:	0c36      	lsrs	r6, r6, #16
 8001800:	0003      	movs	r3, r0
 8001802:	430e      	orrs	r6, r1
 8001804:	42b2      	cmp	r2, r6
 8001806:	d904      	bls.n	8001812 <__aeabi_ddiv+0x152>
 8001808:	1936      	adds	r6, r6, r4
 800180a:	3b01      	subs	r3, #1
 800180c:	42b4      	cmp	r4, r6
 800180e:	d800      	bhi.n	8001812 <__aeabi_ddiv+0x152>
 8001810:	e1e9      	b.n	8001be6 <__aeabi_ddiv+0x526>
 8001812:	1ab0      	subs	r0, r6, r2
 8001814:	4642      	mov	r2, r8
 8001816:	9e00      	ldr	r6, [sp, #0]
 8001818:	0412      	lsls	r2, r2, #16
 800181a:	431a      	orrs	r2, r3
 800181c:	0c33      	lsrs	r3, r6, #16
 800181e:	001f      	movs	r7, r3
 8001820:	0c11      	lsrs	r1, r2, #16
 8001822:	4690      	mov	r8, r2
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	0413      	lsls	r3, r2, #16
 8001828:	0432      	lsls	r2, r6, #16
 800182a:	0c16      	lsrs	r6, r2, #16
 800182c:	0032      	movs	r2, r6
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	435a      	muls	r2, r3
 8001832:	9603      	str	r6, [sp, #12]
 8001834:	437b      	muls	r3, r7
 8001836:	434e      	muls	r6, r1
 8001838:	4379      	muls	r1, r7
 800183a:	0c17      	lsrs	r7, r2, #16
 800183c:	46bc      	mov	ip, r7
 800183e:	199b      	adds	r3, r3, r6
 8001840:	4463      	add	r3, ip
 8001842:	429e      	cmp	r6, r3
 8001844:	d903      	bls.n	800184e <__aeabi_ddiv+0x18e>
 8001846:	2680      	movs	r6, #128	; 0x80
 8001848:	0276      	lsls	r6, r6, #9
 800184a:	46b4      	mov	ip, r6
 800184c:	4461      	add	r1, ip
 800184e:	0c1e      	lsrs	r6, r3, #16
 8001850:	1871      	adds	r1, r6, r1
 8001852:	0416      	lsls	r6, r2, #16
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	0c36      	lsrs	r6, r6, #16
 8001858:	199e      	adds	r6, r3, r6
 800185a:	4288      	cmp	r0, r1
 800185c:	d302      	bcc.n	8001864 <__aeabi_ddiv+0x1a4>
 800185e:	d112      	bne.n	8001886 <__aeabi_ddiv+0x1c6>
 8001860:	42b5      	cmp	r5, r6
 8001862:	d210      	bcs.n	8001886 <__aeabi_ddiv+0x1c6>
 8001864:	4643      	mov	r3, r8
 8001866:	1e5a      	subs	r2, r3, #1
 8001868:	9b00      	ldr	r3, [sp, #0]
 800186a:	469c      	mov	ip, r3
 800186c:	4465      	add	r5, ip
 800186e:	001f      	movs	r7, r3
 8001870:	429d      	cmp	r5, r3
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	191b      	adds	r3, r3, r4
 8001878:	18c0      	adds	r0, r0, r3
 800187a:	4284      	cmp	r4, r0
 800187c:	d200      	bcs.n	8001880 <__aeabi_ddiv+0x1c0>
 800187e:	e19e      	b.n	8001bbe <__aeabi_ddiv+0x4fe>
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x1c4>
 8001882:	e199      	b.n	8001bb8 <__aeabi_ddiv+0x4f8>
 8001884:	4690      	mov	r8, r2
 8001886:	1bae      	subs	r6, r5, r6
 8001888:	42b5      	cmp	r5, r6
 800188a:	41ad      	sbcs	r5, r5
 800188c:	1a40      	subs	r0, r0, r1
 800188e:	426d      	negs	r5, r5
 8001890:	1b40      	subs	r0, r0, r5
 8001892:	4284      	cmp	r4, r0
 8001894:	d100      	bne.n	8001898 <__aeabi_ddiv+0x1d8>
 8001896:	e1d2      	b.n	8001c3e <__aeabi_ddiv+0x57e>
 8001898:	4649      	mov	r1, r9
 800189a:	f7fe fce1 	bl	8000260 <__aeabi_uidivmod>
 800189e:	9a01      	ldr	r2, [sp, #4]
 80018a0:	040b      	lsls	r3, r1, #16
 80018a2:	4342      	muls	r2, r0
 80018a4:	0c31      	lsrs	r1, r6, #16
 80018a6:	0005      	movs	r5, r0
 80018a8:	4319      	orrs	r1, r3
 80018aa:	428a      	cmp	r2, r1
 80018ac:	d900      	bls.n	80018b0 <__aeabi_ddiv+0x1f0>
 80018ae:	e16c      	b.n	8001b8a <__aeabi_ddiv+0x4ca>
 80018b0:	1a88      	subs	r0, r1, r2
 80018b2:	4649      	mov	r1, r9
 80018b4:	f7fe fcd4 	bl	8000260 <__aeabi_uidivmod>
 80018b8:	9a01      	ldr	r2, [sp, #4]
 80018ba:	0436      	lsls	r6, r6, #16
 80018bc:	4342      	muls	r2, r0
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	0c36      	lsrs	r6, r6, #16
 80018c2:	0003      	movs	r3, r0
 80018c4:	430e      	orrs	r6, r1
 80018c6:	42b2      	cmp	r2, r6
 80018c8:	d900      	bls.n	80018cc <__aeabi_ddiv+0x20c>
 80018ca:	e153      	b.n	8001b74 <__aeabi_ddiv+0x4b4>
 80018cc:	9803      	ldr	r0, [sp, #12]
 80018ce:	1ab6      	subs	r6, r6, r2
 80018d0:	0002      	movs	r2, r0
 80018d2:	042d      	lsls	r5, r5, #16
 80018d4:	431d      	orrs	r5, r3
 80018d6:	9f02      	ldr	r7, [sp, #8]
 80018d8:	042b      	lsls	r3, r5, #16
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	435a      	muls	r2, r3
 80018de:	437b      	muls	r3, r7
 80018e0:	469c      	mov	ip, r3
 80018e2:	0c29      	lsrs	r1, r5, #16
 80018e4:	4348      	muls	r0, r1
 80018e6:	0c13      	lsrs	r3, r2, #16
 80018e8:	4484      	add	ip, r0
 80018ea:	4463      	add	r3, ip
 80018ec:	4379      	muls	r1, r7
 80018ee:	4298      	cmp	r0, r3
 80018f0:	d903      	bls.n	80018fa <__aeabi_ddiv+0x23a>
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	0240      	lsls	r0, r0, #9
 80018f6:	4684      	mov	ip, r0
 80018f8:	4461      	add	r1, ip
 80018fa:	0c18      	lsrs	r0, r3, #16
 80018fc:	0412      	lsls	r2, r2, #16
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	0c12      	lsrs	r2, r2, #16
 8001902:	1840      	adds	r0, r0, r1
 8001904:	189b      	adds	r3, r3, r2
 8001906:	4286      	cmp	r6, r0
 8001908:	d200      	bcs.n	800190c <__aeabi_ddiv+0x24c>
 800190a:	e100      	b.n	8001b0e <__aeabi_ddiv+0x44e>
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0x250>
 800190e:	e0fb      	b.n	8001b08 <__aeabi_ddiv+0x448>
 8001910:	2301      	movs	r3, #1
 8001912:	431d      	orrs	r5, r3
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <__aeabi_ddiv+0x37c>)
 8001916:	445b      	add	r3, fp
 8001918:	2b00      	cmp	r3, #0
 800191a:	dc00      	bgt.n	800191e <__aeabi_ddiv+0x25e>
 800191c:	e0aa      	b.n	8001a74 <__aeabi_ddiv+0x3b4>
 800191e:	076a      	lsls	r2, r5, #29
 8001920:	d000      	beq.n	8001924 <__aeabi_ddiv+0x264>
 8001922:	e13d      	b.n	8001ba0 <__aeabi_ddiv+0x4e0>
 8001924:	08e9      	lsrs	r1, r5, #3
 8001926:	4642      	mov	r2, r8
 8001928:	01d2      	lsls	r2, r2, #7
 800192a:	d506      	bpl.n	800193a <__aeabi_ddiv+0x27a>
 800192c:	4642      	mov	r2, r8
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <__aeabi_ddiv+0x380>)
 8001930:	401a      	ands	r2, r3
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	4690      	mov	r8, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	445b      	add	r3, fp
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <__aeabi_ddiv+0x384>)
 800193c:	4293      	cmp	r3, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_ddiv+0x282>
 8001940:	e723      	b.n	800178a <__aeabi_ddiv+0xca>
 8001942:	4642      	mov	r2, r8
 8001944:	055b      	lsls	r3, r3, #21
 8001946:	0755      	lsls	r5, r2, #29
 8001948:	0252      	lsls	r2, r2, #9
 800194a:	430d      	orrs	r5, r1
 800194c:	0b12      	lsrs	r2, r2, #12
 800194e:	0d5b      	lsrs	r3, r3, #21
 8001950:	e70d      	b.n	800176e <__aeabi_ddiv+0xae>
 8001952:	4651      	mov	r1, sl
 8001954:	4321      	orrs	r1, r4
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0x29a>
 8001958:	e07c      	b.n	8001a54 <__aeabi_ddiv+0x394>
 800195a:	2c00      	cmp	r4, #0
 800195c:	d100      	bne.n	8001960 <__aeabi_ddiv+0x2a0>
 800195e:	e0fb      	b.n	8001b58 <__aeabi_ddiv+0x498>
 8001960:	0020      	movs	r0, r4
 8001962:	f000 fa81 	bl	8001e68 <__clzsi2>
 8001966:	0002      	movs	r2, r0
 8001968:	3a0b      	subs	r2, #11
 800196a:	231d      	movs	r3, #29
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	4652      	mov	r2, sl
 8001970:	0001      	movs	r1, r0
 8001972:	40da      	lsrs	r2, r3
 8001974:	4653      	mov	r3, sl
 8001976:	3908      	subs	r1, #8
 8001978:	408b      	lsls	r3, r1
 800197a:	408c      	lsls	r4, r1
 800197c:	0019      	movs	r1, r3
 800197e:	4314      	orrs	r4, r2
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <__aeabi_ddiv+0x388>)
 8001982:	4458      	add	r0, fp
 8001984:	469b      	mov	fp, r3
 8001986:	4483      	add	fp, r0
 8001988:	2000      	movs	r0, #0
 800198a:	e6d9      	b.n	8001740 <__aeabi_ddiv+0x80>
 800198c:	0003      	movs	r3, r0
 800198e:	4323      	orrs	r3, r4
 8001990:	4698      	mov	r8, r3
 8001992:	d044      	beq.n	8001a1e <__aeabi_ddiv+0x35e>
 8001994:	2c00      	cmp	r4, #0
 8001996:	d100      	bne.n	800199a <__aeabi_ddiv+0x2da>
 8001998:	e0cf      	b.n	8001b3a <__aeabi_ddiv+0x47a>
 800199a:	0020      	movs	r0, r4
 800199c:	f000 fa64 	bl	8001e68 <__clzsi2>
 80019a0:	0001      	movs	r1, r0
 80019a2:	0002      	movs	r2, r0
 80019a4:	390b      	subs	r1, #11
 80019a6:	231d      	movs	r3, #29
 80019a8:	1a5b      	subs	r3, r3, r1
 80019aa:	4649      	mov	r1, r9
 80019ac:	0010      	movs	r0, r2
 80019ae:	40d9      	lsrs	r1, r3
 80019b0:	3808      	subs	r0, #8
 80019b2:	4084      	lsls	r4, r0
 80019b4:	000b      	movs	r3, r1
 80019b6:	464d      	mov	r5, r9
 80019b8:	4323      	orrs	r3, r4
 80019ba:	4698      	mov	r8, r3
 80019bc:	4085      	lsls	r5, r0
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <__aeabi_ddiv+0x38c>)
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	469b      	mov	fp, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	4699      	mov	r9, r3
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	e69e      	b.n	800170a <__aeabi_ddiv+0x4a>
 80019cc:	0002      	movs	r2, r0
 80019ce:	4322      	orrs	r2, r4
 80019d0:	4690      	mov	r8, r2
 80019d2:	d11d      	bne.n	8001a10 <__aeabi_ddiv+0x350>
 80019d4:	2208      	movs	r2, #8
 80019d6:	469b      	mov	fp, r3
 80019d8:	2302      	movs	r3, #2
 80019da:	2500      	movs	r5, #0
 80019dc:	4691      	mov	r9, r2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	e693      	b.n	800170a <__aeabi_ddiv+0x4a>
 80019e2:	4651      	mov	r1, sl
 80019e4:	4321      	orrs	r1, r4
 80019e6:	d109      	bne.n	80019fc <__aeabi_ddiv+0x33c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	464a      	mov	r2, r9
 80019ec:	431a      	orrs	r2, r3
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <__aeabi_ddiv+0x390>)
 80019f0:	4691      	mov	r9, r2
 80019f2:	469c      	mov	ip, r3
 80019f4:	2400      	movs	r4, #0
 80019f6:	2002      	movs	r0, #2
 80019f8:	44e3      	add	fp, ip
 80019fa:	e6a1      	b.n	8001740 <__aeabi_ddiv+0x80>
 80019fc:	2303      	movs	r3, #3
 80019fe:	464a      	mov	r2, r9
 8001a00:	431a      	orrs	r2, r3
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <__aeabi_ddiv+0x390>)
 8001a04:	4691      	mov	r9, r2
 8001a06:	469c      	mov	ip, r3
 8001a08:	4651      	mov	r1, sl
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	44e3      	add	fp, ip
 8001a0e:	e697      	b.n	8001740 <__aeabi_ddiv+0x80>
 8001a10:	220c      	movs	r2, #12
 8001a12:	469b      	mov	fp, r3
 8001a14:	2303      	movs	r3, #3
 8001a16:	46a0      	mov	r8, r4
 8001a18:	4691      	mov	r9, r2
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	e675      	b.n	800170a <__aeabi_ddiv+0x4a>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	4699      	mov	r9, r3
 8001a22:	2300      	movs	r3, #0
 8001a24:	469b      	mov	fp, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	2500      	movs	r5, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	e66d      	b.n	800170a <__aeabi_ddiv+0x4a>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	000007ff 	.word	0x000007ff
 8001a34:	fffffc01 	.word	0xfffffc01
 8001a38:	0800aba4 	.word	0x0800aba4
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	feffffff 	.word	0xfeffffff
 8001a44:	000007fe 	.word	0x000007fe
 8001a48:	000003f3 	.word	0x000003f3
 8001a4c:	fffffc0d 	.word	0xfffffc0d
 8001a50:	fffff801 	.word	0xfffff801
 8001a54:	464a      	mov	r2, r9
 8001a56:	2301      	movs	r3, #1
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	4691      	mov	r9, r2
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2001      	movs	r0, #1
 8001a60:	e66e      	b.n	8001740 <__aeabi_ddiv+0x80>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	469a      	mov	sl, r3
 8001a68:	2500      	movs	r5, #0
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001a6c:	0312      	lsls	r2, r2, #12
 8001a6e:	e67e      	b.n	800176e <__aeabi_ddiv+0xae>
 8001a70:	2501      	movs	r5, #1
 8001a72:	426d      	negs	r5, r5
 8001a74:	2201      	movs	r2, #1
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	2a38      	cmp	r2, #56	; 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_ddiv+0x3be>
 8001a7c:	e674      	b.n	8001768 <__aeabi_ddiv+0xa8>
 8001a7e:	2a1f      	cmp	r2, #31
 8001a80:	dc00      	bgt.n	8001a84 <__aeabi_ddiv+0x3c4>
 8001a82:	e0bd      	b.n	8001c00 <__aeabi_ddiv+0x540>
 8001a84:	211f      	movs	r1, #31
 8001a86:	4249      	negs	r1, r1
 8001a88:	1acb      	subs	r3, r1, r3
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	000b      	movs	r3, r1
 8001a90:	2a20      	cmp	r2, #32
 8001a92:	d004      	beq.n	8001a9e <__aeabi_ddiv+0x3de>
 8001a94:	4641      	mov	r1, r8
 8001a96:	4a7e      	ldr	r2, [pc, #504]	; (8001c90 <__aeabi_ddiv+0x5d0>)
 8001a98:	445a      	add	r2, fp
 8001a9a:	4091      	lsls	r1, r2
 8001a9c:	430d      	orrs	r5, r1
 8001a9e:	0029      	movs	r1, r5
 8001aa0:	1e4a      	subs	r2, r1, #1
 8001aa2:	4191      	sbcs	r1, r2
 8001aa4:	4319      	orrs	r1, r3
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	001d      	movs	r5, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	400d      	ands	r5, r1
 8001aae:	420b      	tst	r3, r1
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_ddiv+0x3f4>
 8001ab2:	e0d0      	b.n	8001c56 <__aeabi_ddiv+0x596>
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	400a      	ands	r2, r1
 8001aba:	2a04      	cmp	r2, #4
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_ddiv+0x400>
 8001abe:	e0c7      	b.n	8001c50 <__aeabi_ddiv+0x590>
 8001ac0:	1d0a      	adds	r2, r1, #4
 8001ac2:	428a      	cmp	r2, r1
 8001ac4:	4189      	sbcs	r1, r1
 8001ac6:	4249      	negs	r1, r1
 8001ac8:	185b      	adds	r3, r3, r1
 8001aca:	0011      	movs	r1, r2
 8001acc:	021a      	lsls	r2, r3, #8
 8001ace:	d400      	bmi.n	8001ad2 <__aeabi_ddiv+0x412>
 8001ad0:	e0be      	b.n	8001c50 <__aeabi_ddiv+0x590>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	e649      	b.n	800176e <__aeabi_ddiv+0xae>
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	4643      	mov	r3, r8
 8001ade:	0312      	lsls	r2, r2, #12
 8001ae0:	4213      	tst	r3, r2
 8001ae2:	d008      	beq.n	8001af6 <__aeabi_ddiv+0x436>
 8001ae4:	4214      	tst	r4, r2
 8001ae6:	d106      	bne.n	8001af6 <__aeabi_ddiv+0x436>
 8001ae8:	4322      	orrs	r2, r4
 8001aea:	0312      	lsls	r2, r2, #12
 8001aec:	46ba      	mov	sl, r7
 8001aee:	000d      	movs	r5, r1
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001af2:	0b12      	lsrs	r2, r2, #12
 8001af4:	e63b      	b.n	800176e <__aeabi_ddiv+0xae>
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4643      	mov	r3, r8
 8001afa:	0312      	lsls	r2, r2, #12
 8001afc:	431a      	orrs	r2, r3
 8001afe:	0312      	lsls	r2, r2, #12
 8001b00:	46b2      	mov	sl, r6
 8001b02:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001b04:	0b12      	lsrs	r2, r2, #12
 8001b06:	e632      	b.n	800176e <__aeabi_ddiv+0xae>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x44e>
 8001b0c:	e702      	b.n	8001914 <__aeabi_ddiv+0x254>
 8001b0e:	19a6      	adds	r6, r4, r6
 8001b10:	1e6a      	subs	r2, r5, #1
 8001b12:	42a6      	cmp	r6, r4
 8001b14:	d200      	bcs.n	8001b18 <__aeabi_ddiv+0x458>
 8001b16:	e089      	b.n	8001c2c <__aeabi_ddiv+0x56c>
 8001b18:	4286      	cmp	r6, r0
 8001b1a:	d200      	bcs.n	8001b1e <__aeabi_ddiv+0x45e>
 8001b1c:	e09f      	b.n	8001c5e <__aeabi_ddiv+0x59e>
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_ddiv+0x462>
 8001b20:	e0af      	b.n	8001c82 <__aeabi_ddiv+0x5c2>
 8001b22:	0015      	movs	r5, r2
 8001b24:	e6f4      	b.n	8001910 <__aeabi_ddiv+0x250>
 8001b26:	42a9      	cmp	r1, r5
 8001b28:	d900      	bls.n	8001b2c <__aeabi_ddiv+0x46c>
 8001b2a:	e63c      	b.n	80017a6 <__aeabi_ddiv+0xe6>
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	07de      	lsls	r6, r3, #31
 8001b30:	0858      	lsrs	r0, r3, #1
 8001b32:	086b      	lsrs	r3, r5, #1
 8001b34:	431e      	orrs	r6, r3
 8001b36:	07ed      	lsls	r5, r5, #31
 8001b38:	e63c      	b.n	80017b4 <__aeabi_ddiv+0xf4>
 8001b3a:	f000 f995 	bl	8001e68 <__clzsi2>
 8001b3e:	0001      	movs	r1, r0
 8001b40:	0002      	movs	r2, r0
 8001b42:	3115      	adds	r1, #21
 8001b44:	3220      	adds	r2, #32
 8001b46:	291c      	cmp	r1, #28
 8001b48:	dc00      	bgt.n	8001b4c <__aeabi_ddiv+0x48c>
 8001b4a:	e72c      	b.n	80019a6 <__aeabi_ddiv+0x2e6>
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	3808      	subs	r0, #8
 8001b50:	4083      	lsls	r3, r0
 8001b52:	2500      	movs	r5, #0
 8001b54:	4698      	mov	r8, r3
 8001b56:	e732      	b.n	80019be <__aeabi_ddiv+0x2fe>
 8001b58:	f000 f986 	bl	8001e68 <__clzsi2>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	001a      	movs	r2, r3
 8001b60:	3215      	adds	r2, #21
 8001b62:	3020      	adds	r0, #32
 8001b64:	2a1c      	cmp	r2, #28
 8001b66:	dc00      	bgt.n	8001b6a <__aeabi_ddiv+0x4aa>
 8001b68:	e6ff      	b.n	800196a <__aeabi_ddiv+0x2aa>
 8001b6a:	4654      	mov	r4, sl
 8001b6c:	3b08      	subs	r3, #8
 8001b6e:	2100      	movs	r1, #0
 8001b70:	409c      	lsls	r4, r3
 8001b72:	e705      	b.n	8001980 <__aeabi_ddiv+0x2c0>
 8001b74:	1936      	adds	r6, r6, r4
 8001b76:	3b01      	subs	r3, #1
 8001b78:	42b4      	cmp	r4, r6
 8001b7a:	d900      	bls.n	8001b7e <__aeabi_ddiv+0x4be>
 8001b7c:	e6a6      	b.n	80018cc <__aeabi_ddiv+0x20c>
 8001b7e:	42b2      	cmp	r2, r6
 8001b80:	d800      	bhi.n	8001b84 <__aeabi_ddiv+0x4c4>
 8001b82:	e6a3      	b.n	80018cc <__aeabi_ddiv+0x20c>
 8001b84:	1e83      	subs	r3, r0, #2
 8001b86:	1936      	adds	r6, r6, r4
 8001b88:	e6a0      	b.n	80018cc <__aeabi_ddiv+0x20c>
 8001b8a:	1909      	adds	r1, r1, r4
 8001b8c:	3d01      	subs	r5, #1
 8001b8e:	428c      	cmp	r4, r1
 8001b90:	d900      	bls.n	8001b94 <__aeabi_ddiv+0x4d4>
 8001b92:	e68d      	b.n	80018b0 <__aeabi_ddiv+0x1f0>
 8001b94:	428a      	cmp	r2, r1
 8001b96:	d800      	bhi.n	8001b9a <__aeabi_ddiv+0x4da>
 8001b98:	e68a      	b.n	80018b0 <__aeabi_ddiv+0x1f0>
 8001b9a:	1e85      	subs	r5, r0, #2
 8001b9c:	1909      	adds	r1, r1, r4
 8001b9e:	e687      	b.n	80018b0 <__aeabi_ddiv+0x1f0>
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	402a      	ands	r2, r5
 8001ba4:	2a04      	cmp	r2, #4
 8001ba6:	d100      	bne.n	8001baa <__aeabi_ddiv+0x4ea>
 8001ba8:	e6bc      	b.n	8001924 <__aeabi_ddiv+0x264>
 8001baa:	1d29      	adds	r1, r5, #4
 8001bac:	42a9      	cmp	r1, r5
 8001bae:	41ad      	sbcs	r5, r5
 8001bb0:	426d      	negs	r5, r5
 8001bb2:	08c9      	lsrs	r1, r1, #3
 8001bb4:	44a8      	add	r8, r5
 8001bb6:	e6b6      	b.n	8001926 <__aeabi_ddiv+0x266>
 8001bb8:	42af      	cmp	r7, r5
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x4fe>
 8001bbc:	e662      	b.n	8001884 <__aeabi_ddiv+0x1c4>
 8001bbe:	4281      	cmp	r1, r0
 8001bc0:	d804      	bhi.n	8001bcc <__aeabi_ddiv+0x50c>
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_ddiv+0x506>
 8001bc4:	e65e      	b.n	8001884 <__aeabi_ddiv+0x1c4>
 8001bc6:	42ae      	cmp	r6, r5
 8001bc8:	d800      	bhi.n	8001bcc <__aeabi_ddiv+0x50c>
 8001bca:	e65b      	b.n	8001884 <__aeabi_ddiv+0x1c4>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	425b      	negs	r3, r3
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	44e0      	add	r8, ip
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	4465      	add	r5, ip
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	425b      	negs	r3, r3
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	18c0      	adds	r0, r0, r3
 8001be4:	e64f      	b.n	8001886 <__aeabi_ddiv+0x1c6>
 8001be6:	42b2      	cmp	r2, r6
 8001be8:	d800      	bhi.n	8001bec <__aeabi_ddiv+0x52c>
 8001bea:	e612      	b.n	8001812 <__aeabi_ddiv+0x152>
 8001bec:	1e83      	subs	r3, r0, #2
 8001bee:	1936      	adds	r6, r6, r4
 8001bf0:	e60f      	b.n	8001812 <__aeabi_ddiv+0x152>
 8001bf2:	428a      	cmp	r2, r1
 8001bf4:	d800      	bhi.n	8001bf8 <__aeabi_ddiv+0x538>
 8001bf6:	e5fa      	b.n	80017ee <__aeabi_ddiv+0x12e>
 8001bf8:	1e83      	subs	r3, r0, #2
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	1909      	adds	r1, r1, r4
 8001bfe:	e5f6      	b.n	80017ee <__aeabi_ddiv+0x12e>
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <__aeabi_ddiv+0x5d4>)
 8001c02:	0028      	movs	r0, r5
 8001c04:	445b      	add	r3, fp
 8001c06:	4641      	mov	r1, r8
 8001c08:	409d      	lsls	r5, r3
 8001c0a:	4099      	lsls	r1, r3
 8001c0c:	40d0      	lsrs	r0, r2
 8001c0e:	1e6b      	subs	r3, r5, #1
 8001c10:	419d      	sbcs	r5, r3
 8001c12:	4643      	mov	r3, r8
 8001c14:	4301      	orrs	r1, r0
 8001c16:	4329      	orrs	r1, r5
 8001c18:	40d3      	lsrs	r3, r2
 8001c1a:	074a      	lsls	r2, r1, #29
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x560>
 8001c1e:	e755      	b.n	8001acc <__aeabi_ddiv+0x40c>
 8001c20:	220f      	movs	r2, #15
 8001c22:	400a      	ands	r2, r1
 8001c24:	2a04      	cmp	r2, #4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_ddiv+0x56a>
 8001c28:	e74a      	b.n	8001ac0 <__aeabi_ddiv+0x400>
 8001c2a:	e74f      	b.n	8001acc <__aeabi_ddiv+0x40c>
 8001c2c:	0015      	movs	r5, r2
 8001c2e:	4286      	cmp	r6, r0
 8001c30:	d000      	beq.n	8001c34 <__aeabi_ddiv+0x574>
 8001c32:	e66d      	b.n	8001910 <__aeabi_ddiv+0x250>
 8001c34:	9a00      	ldr	r2, [sp, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d000      	beq.n	8001c3c <__aeabi_ddiv+0x57c>
 8001c3a:	e669      	b.n	8001910 <__aeabi_ddiv+0x250>
 8001c3c:	e66a      	b.n	8001914 <__aeabi_ddiv+0x254>
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <__aeabi_ddiv+0x5d8>)
 8001c40:	445b      	add	r3, fp
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_ddiv+0x588>
 8001c46:	e713      	b.n	8001a70 <__aeabi_ddiv+0x3b0>
 8001c48:	2501      	movs	r5, #1
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	44a8      	add	r8, r5
 8001c4e:	e66a      	b.n	8001926 <__aeabi_ddiv+0x266>
 8001c50:	075d      	lsls	r5, r3, #29
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	0b1a      	lsrs	r2, r3, #12
 8001c56:	08c9      	lsrs	r1, r1, #3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	430d      	orrs	r5, r1
 8001c5c:	e587      	b.n	800176e <__aeabi_ddiv+0xae>
 8001c5e:	9900      	ldr	r1, [sp, #0]
 8001c60:	3d02      	subs	r5, #2
 8001c62:	004a      	lsls	r2, r1, #1
 8001c64:	428a      	cmp	r2, r1
 8001c66:	41bf      	sbcs	r7, r7
 8001c68:	427f      	negs	r7, r7
 8001c6a:	193f      	adds	r7, r7, r4
 8001c6c:	19f6      	adds	r6, r6, r7
 8001c6e:	9200      	str	r2, [sp, #0]
 8001c70:	e7dd      	b.n	8001c2e <__aeabi_ddiv+0x56e>
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	4643      	mov	r3, r8
 8001c76:	0312      	lsls	r2, r2, #12
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	0312      	lsls	r2, r2, #12
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <__aeabi_ddiv+0x5cc>)
 8001c7e:	0b12      	lsrs	r2, r2, #12
 8001c80:	e575      	b.n	800176e <__aeabi_ddiv+0xae>
 8001c82:	9900      	ldr	r1, [sp, #0]
 8001c84:	4299      	cmp	r1, r3
 8001c86:	d3ea      	bcc.n	8001c5e <__aeabi_ddiv+0x59e>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	e7d3      	b.n	8001c34 <__aeabi_ddiv+0x574>
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	0000043e 	.word	0x0000043e
 8001c94:	0000041e 	.word	0x0000041e
 8001c98:	000003ff 	.word	0x000003ff

08001c9c <__aeabi_ui2d>:
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	1e04      	subs	r4, r0, #0
 8001ca0:	d010      	beq.n	8001cc4 <__aeabi_ui2d+0x28>
 8001ca2:	f000 f8e1 	bl	8001e68 <__clzsi2>
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <__aeabi_ui2d+0x48>)
 8001ca8:	1a1b      	subs	r3, r3, r0
 8001caa:	280a      	cmp	r0, #10
 8001cac:	dc11      	bgt.n	8001cd2 <__aeabi_ui2d+0x36>
 8001cae:	220b      	movs	r2, #11
 8001cb0:	0021      	movs	r1, r4
 8001cb2:	1a12      	subs	r2, r2, r0
 8001cb4:	40d1      	lsrs	r1, r2
 8001cb6:	3015      	adds	r0, #21
 8001cb8:	030a      	lsls	r2, r1, #12
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	4084      	lsls	r4, r0
 8001cbe:	0b12      	lsrs	r2, r2, #12
 8001cc0:	0d5b      	lsrs	r3, r3, #21
 8001cc2:	e001      	b.n	8001cc8 <__aeabi_ui2d+0x2c>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	051b      	lsls	r3, r3, #20
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	0020      	movs	r0, r4
 8001cce:	0019      	movs	r1, r3
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	0022      	movs	r2, r4
 8001cd4:	380b      	subs	r0, #11
 8001cd6:	4082      	lsls	r2, r0
 8001cd8:	055b      	lsls	r3, r3, #21
 8001cda:	0312      	lsls	r2, r2, #12
 8001cdc:	2400      	movs	r4, #0
 8001cde:	0b12      	lsrs	r2, r2, #12
 8001ce0:	0d5b      	lsrs	r3, r3, #21
 8001ce2:	e7f1      	b.n	8001cc8 <__aeabi_ui2d+0x2c>
 8001ce4:	0000041e 	.word	0x0000041e

08001ce8 <__aeabi_d2f>:
 8001ce8:	0002      	movs	r2, r0
 8001cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cec:	004b      	lsls	r3, r1, #1
 8001cee:	030d      	lsls	r5, r1, #12
 8001cf0:	0f40      	lsrs	r0, r0, #29
 8001cf2:	0d5b      	lsrs	r3, r3, #21
 8001cf4:	0fcc      	lsrs	r4, r1, #31
 8001cf6:	0a6d      	lsrs	r5, r5, #9
 8001cf8:	493a      	ldr	r1, [pc, #232]	; (8001de4 <__aeabi_d2f+0xfc>)
 8001cfa:	4305      	orrs	r5, r0
 8001cfc:	1c58      	adds	r0, r3, #1
 8001cfe:	00d7      	lsls	r7, r2, #3
 8001d00:	4208      	tst	r0, r1
 8001d02:	d00a      	beq.n	8001d1a <__aeabi_d2f+0x32>
 8001d04:	4938      	ldr	r1, [pc, #224]	; (8001de8 <__aeabi_d2f+0x100>)
 8001d06:	1859      	adds	r1, r3, r1
 8001d08:	29fe      	cmp	r1, #254	; 0xfe
 8001d0a:	dd16      	ble.n	8001d3a <__aeabi_d2f+0x52>
 8001d0c:	20ff      	movs	r0, #255	; 0xff
 8001d0e:	2200      	movs	r2, #0
 8001d10:	05c0      	lsls	r0, r0, #23
 8001d12:	4310      	orrs	r0, r2
 8001d14:	07e4      	lsls	r4, r4, #31
 8001d16:	4320      	orrs	r0, r4
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <__aeabi_d2f+0x44>
 8001d1e:	433d      	orrs	r5, r7
 8001d20:	d026      	beq.n	8001d70 <__aeabi_d2f+0x88>
 8001d22:	2205      	movs	r2, #5
 8001d24:	0192      	lsls	r2, r2, #6
 8001d26:	0a52      	lsrs	r2, r2, #9
 8001d28:	b2d8      	uxtb	r0, r3
 8001d2a:	e7f1      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d2c:	432f      	orrs	r7, r5
 8001d2e:	d0ed      	beq.n	8001d0c <__aeabi_d2f+0x24>
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	03d2      	lsls	r2, r2, #15
 8001d34:	20ff      	movs	r0, #255	; 0xff
 8001d36:	432a      	orrs	r2, r5
 8001d38:	e7ea      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	dd1b      	ble.n	8001d76 <__aeabi_d2f+0x8e>
 8001d3e:	0192      	lsls	r2, r2, #6
 8001d40:	1e50      	subs	r0, r2, #1
 8001d42:	4182      	sbcs	r2, r0
 8001d44:	00ed      	lsls	r5, r5, #3
 8001d46:	0f7f      	lsrs	r7, r7, #29
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	433a      	orrs	r2, r7
 8001d4c:	0753      	lsls	r3, r2, #29
 8001d4e:	d047      	beq.n	8001de0 <__aeabi_d2f+0xf8>
 8001d50:	230f      	movs	r3, #15
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_d2f+0x72>
 8001d58:	3204      	adds	r2, #4
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	04db      	lsls	r3, r3, #19
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d03e      	beq.n	8001de0 <__aeabi_d2f+0xf8>
 8001d62:	1c48      	adds	r0, r1, #1
 8001d64:	29fe      	cmp	r1, #254	; 0xfe
 8001d66:	d0d1      	beq.n	8001d0c <__aeabi_d2f+0x24>
 8001d68:	0192      	lsls	r2, r2, #6
 8001d6a:	0a52      	lsrs	r2, r2, #9
 8001d6c:	b2c0      	uxtb	r0, r0
 8001d6e:	e7cf      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d70:	2000      	movs	r0, #0
 8001d72:	2200      	movs	r2, #0
 8001d74:	e7cc      	b.n	8001d10 <__aeabi_d2f+0x28>
 8001d76:	000a      	movs	r2, r1
 8001d78:	3217      	adds	r2, #23
 8001d7a:	db2f      	blt.n	8001ddc <__aeabi_d2f+0xf4>
 8001d7c:	2680      	movs	r6, #128	; 0x80
 8001d7e:	0436      	lsls	r6, r6, #16
 8001d80:	432e      	orrs	r6, r5
 8001d82:	251e      	movs	r5, #30
 8001d84:	1a6d      	subs	r5, r5, r1
 8001d86:	2d1f      	cmp	r5, #31
 8001d88:	dd11      	ble.n	8001dae <__aeabi_d2f+0xc6>
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	1a52      	subs	r2, r2, r1
 8001d90:	0031      	movs	r1, r6
 8001d92:	40d1      	lsrs	r1, r2
 8001d94:	2d20      	cmp	r5, #32
 8001d96:	d004      	beq.n	8001da2 <__aeabi_d2f+0xba>
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <__aeabi_d2f+0x104>)
 8001d9a:	4694      	mov	ip, r2
 8001d9c:	4463      	add	r3, ip
 8001d9e:	409e      	lsls	r6, r3
 8001da0:	4337      	orrs	r7, r6
 8001da2:	003a      	movs	r2, r7
 8001da4:	1e53      	subs	r3, r2, #1
 8001da6:	419a      	sbcs	r2, r3
 8001da8:	430a      	orrs	r2, r1
 8001daa:	2100      	movs	r1, #0
 8001dac:	e7ce      	b.n	8001d4c <__aeabi_d2f+0x64>
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <__aeabi_d2f+0x108>)
 8001db0:	0038      	movs	r0, r7
 8001db2:	4694      	mov	ip, r2
 8001db4:	4463      	add	r3, ip
 8001db6:	4098      	lsls	r0, r3
 8001db8:	003a      	movs	r2, r7
 8001dba:	1e41      	subs	r1, r0, #1
 8001dbc:	4188      	sbcs	r0, r1
 8001dbe:	409e      	lsls	r6, r3
 8001dc0:	40ea      	lsrs	r2, r5
 8001dc2:	4330      	orrs	r0, r6
 8001dc4:	4302      	orrs	r2, r0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	0753      	lsls	r3, r2, #29
 8001dca:	d1c1      	bne.n	8001d50 <__aeabi_d2f+0x68>
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0013      	movs	r3, r2
 8001dd0:	04c9      	lsls	r1, r1, #19
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	420a      	tst	r2, r1
 8001dd8:	d1c6      	bne.n	8001d68 <__aeabi_d2f+0x80>
 8001dda:	e7a3      	b.n	8001d24 <__aeabi_d2f+0x3c>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e7a0      	b.n	8001d22 <__aeabi_d2f+0x3a>
 8001de0:	000b      	movs	r3, r1
 8001de2:	e79f      	b.n	8001d24 <__aeabi_d2f+0x3c>
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	fffffc80 	.word	0xfffffc80
 8001dec:	fffffca2 	.word	0xfffffca2
 8001df0:	fffffc82 	.word	0xfffffc82

08001df4 <__aeabi_cfrcmple>:
 8001df4:	4684      	mov	ip, r0
 8001df6:	0008      	movs	r0, r1
 8001df8:	4661      	mov	r1, ip
 8001dfa:	e7ff      	b.n	8001dfc <__aeabi_cfcmpeq>

08001dfc <__aeabi_cfcmpeq>:
 8001dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001dfe:	f000 f8c9 	bl	8001f94 <__lesf2>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d401      	bmi.n	8001e0a <__aeabi_cfcmpeq+0xe>
 8001e06:	2100      	movs	r1, #0
 8001e08:	42c8      	cmn	r0, r1
 8001e0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001e0c <__aeabi_fcmpeq>:
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	f000 f855 	bl	8001ebc <__eqsf2>
 8001e12:	4240      	negs	r0, r0
 8001e14:	3001      	adds	r0, #1
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <__aeabi_fcmplt>:
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	f000 f8bb 	bl	8001f94 <__lesf2>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	db01      	blt.n	8001e26 <__aeabi_fcmplt+0xe>
 8001e22:	2000      	movs	r0, #0
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	2001      	movs	r0, #1
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)

08001e2c <__aeabi_fcmple>:
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	f000 f8b1 	bl	8001f94 <__lesf2>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	dd01      	ble.n	8001e3a <__aeabi_fcmple+0xe>
 8001e36:	2000      	movs	r0, #0
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)

08001e40 <__aeabi_fcmpgt>:
 8001e40:	b510      	push	{r4, lr}
 8001e42:	f000 f861 	bl	8001f08 <__gesf2>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	dc01      	bgt.n	8001e4e <__aeabi_fcmpgt+0xe>
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	bd10      	pop	{r4, pc}
 8001e4e:	2001      	movs	r0, #1
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)

08001e54 <__aeabi_fcmpge>:
 8001e54:	b510      	push	{r4, lr}
 8001e56:	f000 f857 	bl	8001f08 <__gesf2>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	da01      	bge.n	8001e62 <__aeabi_fcmpge+0xe>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	2001      	movs	r0, #1
 8001e64:	bd10      	pop	{r4, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)

08001e68 <__clzsi2>:
 8001e68:	211c      	movs	r1, #28
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	4298      	cmp	r0, r3
 8001e70:	d301      	bcc.n	8001e76 <__clzsi2+0xe>
 8001e72:	0c00      	lsrs	r0, r0, #16
 8001e74:	3910      	subs	r1, #16
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	4298      	cmp	r0, r3
 8001e7a:	d301      	bcc.n	8001e80 <__clzsi2+0x18>
 8001e7c:	0a00      	lsrs	r0, r0, #8
 8001e7e:	3908      	subs	r1, #8
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	4298      	cmp	r0, r3
 8001e84:	d301      	bcc.n	8001e8a <__clzsi2+0x22>
 8001e86:	0900      	lsrs	r0, r0, #4
 8001e88:	3904      	subs	r1, #4
 8001e8a:	a202      	add	r2, pc, #8	; (adr r2, 8001e94 <__clzsi2+0x2c>)
 8001e8c:	5c10      	ldrb	r0, [r2, r0]
 8001e8e:	1840      	adds	r0, r0, r1
 8001e90:	4770      	bx	lr
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	02020304 	.word	0x02020304
 8001e98:	01010101 	.word	0x01010101
	...

08001ea4 <__clzdi2>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	2900      	cmp	r1, #0
 8001ea8:	d103      	bne.n	8001eb2 <__clzdi2+0xe>
 8001eaa:	f7ff ffdd 	bl	8001e68 <__clzsi2>
 8001eae:	3020      	adds	r0, #32
 8001eb0:	e002      	b.n	8001eb8 <__clzdi2+0x14>
 8001eb2:	0008      	movs	r0, r1
 8001eb4:	f7ff ffd8 	bl	8001e68 <__clzsi2>
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)

08001ebc <__eqsf2>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	0042      	lsls	r2, r0, #1
 8001ec0:	0245      	lsls	r5, r0, #9
 8001ec2:	024e      	lsls	r6, r1, #9
 8001ec4:	004c      	lsls	r4, r1, #1
 8001ec6:	0fc3      	lsrs	r3, r0, #31
 8001ec8:	0a6d      	lsrs	r5, r5, #9
 8001eca:	2001      	movs	r0, #1
 8001ecc:	0e12      	lsrs	r2, r2, #24
 8001ece:	0a76      	lsrs	r6, r6, #9
 8001ed0:	0e24      	lsrs	r4, r4, #24
 8001ed2:	0fc9      	lsrs	r1, r1, #31
 8001ed4:	2aff      	cmp	r2, #255	; 0xff
 8001ed6:	d006      	beq.n	8001ee6 <__eqsf2+0x2a>
 8001ed8:	2cff      	cmp	r4, #255	; 0xff
 8001eda:	d003      	beq.n	8001ee4 <__eqsf2+0x28>
 8001edc:	42a2      	cmp	r2, r4
 8001ede:	d101      	bne.n	8001ee4 <__eqsf2+0x28>
 8001ee0:	42b5      	cmp	r5, r6
 8001ee2:	d006      	beq.n	8001ef2 <__eqsf2+0x36>
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d1fc      	bne.n	8001ee4 <__eqsf2+0x28>
 8001eea:	2cff      	cmp	r4, #255	; 0xff
 8001eec:	d1fa      	bne.n	8001ee4 <__eqsf2+0x28>
 8001eee:	2e00      	cmp	r6, #0
 8001ef0:	d1f8      	bne.n	8001ee4 <__eqsf2+0x28>
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d006      	beq.n	8001f04 <__eqsf2+0x48>
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d1f3      	bne.n	8001ee4 <__eqsf2+0x28>
 8001efc:	0028      	movs	r0, r5
 8001efe:	1e43      	subs	r3, r0, #1
 8001f00:	4198      	sbcs	r0, r3
 8001f02:	e7ef      	b.n	8001ee4 <__eqsf2+0x28>
 8001f04:	2000      	movs	r0, #0
 8001f06:	e7ed      	b.n	8001ee4 <__eqsf2+0x28>

08001f08 <__gesf2>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	0042      	lsls	r2, r0, #1
 8001f0c:	0245      	lsls	r5, r0, #9
 8001f0e:	024e      	lsls	r6, r1, #9
 8001f10:	004c      	lsls	r4, r1, #1
 8001f12:	0fc3      	lsrs	r3, r0, #31
 8001f14:	0a6d      	lsrs	r5, r5, #9
 8001f16:	0e12      	lsrs	r2, r2, #24
 8001f18:	0a76      	lsrs	r6, r6, #9
 8001f1a:	0e24      	lsrs	r4, r4, #24
 8001f1c:	0fc8      	lsrs	r0, r1, #31
 8001f1e:	2aff      	cmp	r2, #255	; 0xff
 8001f20:	d01b      	beq.n	8001f5a <__gesf2+0x52>
 8001f22:	2cff      	cmp	r4, #255	; 0xff
 8001f24:	d00e      	beq.n	8001f44 <__gesf2+0x3c>
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	d11b      	bne.n	8001f62 <__gesf2+0x5a>
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d101      	bne.n	8001f32 <__gesf2+0x2a>
 8001f2e:	2e00      	cmp	r6, #0
 8001f30:	d01c      	beq.n	8001f6c <__gesf2+0x64>
 8001f32:	2d00      	cmp	r5, #0
 8001f34:	d00c      	beq.n	8001f50 <__gesf2+0x48>
 8001f36:	4283      	cmp	r3, r0
 8001f38:	d01c      	beq.n	8001f74 <__gesf2+0x6c>
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	1e58      	subs	r0, r3, #1
 8001f3e:	4008      	ands	r0, r1
 8001f40:	3801      	subs	r0, #1
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	2e00      	cmp	r6, #0
 8001f46:	d122      	bne.n	8001f8e <__gesf2+0x86>
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d1f4      	bne.n	8001f36 <__gesf2+0x2e>
 8001f4c:	2d00      	cmp	r5, #0
 8001f4e:	d1f2      	bne.n	8001f36 <__gesf2+0x2e>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d1f6      	bne.n	8001f42 <__gesf2+0x3a>
 8001f54:	2001      	movs	r0, #1
 8001f56:	4240      	negs	r0, r0
 8001f58:	e7f3      	b.n	8001f42 <__gesf2+0x3a>
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	d117      	bne.n	8001f8e <__gesf2+0x86>
 8001f5e:	2cff      	cmp	r4, #255	; 0xff
 8001f60:	d0f0      	beq.n	8001f44 <__gesf2+0x3c>
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	d1e7      	bne.n	8001f36 <__gesf2+0x2e>
 8001f66:	2e00      	cmp	r6, #0
 8001f68:	d1e5      	bne.n	8001f36 <__gesf2+0x2e>
 8001f6a:	e7e6      	b.n	8001f3a <__gesf2+0x32>
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	2d00      	cmp	r5, #0
 8001f70:	d0e7      	beq.n	8001f42 <__gesf2+0x3a>
 8001f72:	e7e2      	b.n	8001f3a <__gesf2+0x32>
 8001f74:	42a2      	cmp	r2, r4
 8001f76:	dc05      	bgt.n	8001f84 <__gesf2+0x7c>
 8001f78:	dbea      	blt.n	8001f50 <__gesf2+0x48>
 8001f7a:	42b5      	cmp	r5, r6
 8001f7c:	d802      	bhi.n	8001f84 <__gesf2+0x7c>
 8001f7e:	d3e7      	bcc.n	8001f50 <__gesf2+0x48>
 8001f80:	2000      	movs	r0, #0
 8001f82:	e7de      	b.n	8001f42 <__gesf2+0x3a>
 8001f84:	4243      	negs	r3, r0
 8001f86:	4158      	adcs	r0, r3
 8001f88:	0040      	lsls	r0, r0, #1
 8001f8a:	3801      	subs	r0, #1
 8001f8c:	e7d9      	b.n	8001f42 <__gesf2+0x3a>
 8001f8e:	2002      	movs	r0, #2
 8001f90:	4240      	negs	r0, r0
 8001f92:	e7d6      	b.n	8001f42 <__gesf2+0x3a>

08001f94 <__lesf2>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	0042      	lsls	r2, r0, #1
 8001f98:	0245      	lsls	r5, r0, #9
 8001f9a:	024e      	lsls	r6, r1, #9
 8001f9c:	004c      	lsls	r4, r1, #1
 8001f9e:	0fc3      	lsrs	r3, r0, #31
 8001fa0:	0a6d      	lsrs	r5, r5, #9
 8001fa2:	0e12      	lsrs	r2, r2, #24
 8001fa4:	0a76      	lsrs	r6, r6, #9
 8001fa6:	0e24      	lsrs	r4, r4, #24
 8001fa8:	0fc8      	lsrs	r0, r1, #31
 8001faa:	2aff      	cmp	r2, #255	; 0xff
 8001fac:	d00b      	beq.n	8001fc6 <__lesf2+0x32>
 8001fae:	2cff      	cmp	r4, #255	; 0xff
 8001fb0:	d00d      	beq.n	8001fce <__lesf2+0x3a>
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d11f      	bne.n	8001ff6 <__lesf2+0x62>
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	d116      	bne.n	8001fe8 <__lesf2+0x54>
 8001fba:	2e00      	cmp	r6, #0
 8001fbc:	d114      	bne.n	8001fe8 <__lesf2+0x54>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	d010      	beq.n	8001fe6 <__lesf2+0x52>
 8001fc4:	e009      	b.n	8001fda <__lesf2+0x46>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d10c      	bne.n	8001fe4 <__lesf2+0x50>
 8001fca:	2cff      	cmp	r4, #255	; 0xff
 8001fcc:	d113      	bne.n	8001ff6 <__lesf2+0x62>
 8001fce:	2e00      	cmp	r6, #0
 8001fd0:	d108      	bne.n	8001fe4 <__lesf2+0x50>
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d008      	beq.n	8001fe8 <__lesf2+0x54>
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	d012      	beq.n	8002000 <__lesf2+0x6c>
 8001fda:	2102      	movs	r1, #2
 8001fdc:	1e58      	subs	r0, r3, #1
 8001fde:	4008      	ands	r0, r1
 8001fe0:	3801      	subs	r0, #1
 8001fe2:	e000      	b.n	8001fe6 <__lesf2+0x52>
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d1f4      	bne.n	8001fd6 <__lesf2+0x42>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d1fa      	bne.n	8001fe6 <__lesf2+0x52>
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	4240      	negs	r0, r0
 8001ff4:	e7f7      	b.n	8001fe6 <__lesf2+0x52>
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d1ed      	bne.n	8001fd6 <__lesf2+0x42>
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d1eb      	bne.n	8001fd6 <__lesf2+0x42>
 8001ffe:	e7ec      	b.n	8001fda <__lesf2+0x46>
 8002000:	42a2      	cmp	r2, r4
 8002002:	dc05      	bgt.n	8002010 <__lesf2+0x7c>
 8002004:	dbf2      	blt.n	8001fec <__lesf2+0x58>
 8002006:	42b5      	cmp	r5, r6
 8002008:	d802      	bhi.n	8002010 <__lesf2+0x7c>
 800200a:	d3ef      	bcc.n	8001fec <__lesf2+0x58>
 800200c:	2000      	movs	r0, #0
 800200e:	e7ea      	b.n	8001fe6 <__lesf2+0x52>
 8002010:	4243      	negs	r3, r0
 8002012:	4158      	adcs	r0, r3
 8002014:	0040      	lsls	r0, r0, #1
 8002016:	3801      	subs	r0, #1
 8002018:	e7e5      	b.n	8001fe6 <__lesf2+0x52>
 800201a:	46c0      	nop			; (mov r8, r8)

0800201c <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800201c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800201e:	f000 f96d 	bl	80022fc <SystemApp_Init>
//  SubghzApp_Init();
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8002022:	bd10      	pop	{r4, pc}

08002024 <Error_Handler>:
		Error_Handler();
	}
}

void Error_Handler(void)
{
 8002024:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002026:	b672      	cpsid	i
	__disable_irq();
	MX_GPIO_Init();
 8002028:	f006 fde0 	bl	8008bec <MX_GPIO_Init>
	LOG(LOG_INFOR, "Error");
 800202c:	2004      	movs	r0, #4
 800202e:	4902      	ldr	r1, [pc, #8]	; (8002038 <Error_Handler+0x14>)
 8002030:	f007 fcc4 	bl	80099bc <LOG>
	while (1){}
 8002034:	e7fe      	b.n	8002034 <Error_Handler+0x10>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	0800ac4b 	.word	0x0800ac4b

0800203c <SystemClock_Config_MSI>:
{
 800203c:	b530      	push	{r4, r5, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203e:	2414      	movs	r4, #20
{
 8002040:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002042:	2238      	movs	r2, #56	; 0x38
 8002044:	2100      	movs	r1, #0
 8002046:	a80e      	add	r0, sp, #56	; 0x38
 8002048:	f007 ff70 	bl	8009f2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800204c:	0022      	movs	r2, r4
 800204e:	2100      	movs	r1, #0
 8002050:	4668      	mov	r0, sp
 8002052:	f007 ff6b 	bl	8009f2c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002056:	2224      	movs	r2, #36	; 0x24
 8002058:	2100      	movs	r1, #0
 800205a:	a805      	add	r0, sp, #20
 800205c:	f007 ff66 	bl	8009f2c <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	491f      	ldr	r1, [pc, #124]	; (80020e0 <SystemClock_Config_MSI+0xa4>)
 8002064:	4d1f      	ldr	r5, [pc, #124]	; (80020e4 <SystemClock_Config_MSI+0xa8>)
 8002066:	680a      	ldr	r2, [r1, #0]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	402a      	ands	r2, r5
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
	HAL_PWR_EnableBkUpAccess();
 8002070:	f001 fcb6 	bl	80039e0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <SystemClock_Config_MSI+0xac>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002076:	a80e      	add	r0, sp, #56	; 0x38
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002078:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800207a:	402b      	ands	r3, r5
 800207c:	6513      	str	r3, [r2, #80]	; 0x50
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002084:	22c0      	movs	r2, #192	; 0xc0
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002086:	3bff      	subs	r3, #255	; 0xff
 8002088:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800208a:	2300      	movs	r3, #0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800208c:	0212      	lsls	r2, r2, #8
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800208e:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002090:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002092:	9217      	str	r2, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002094:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002096:	f001 fd99 	bl	8003bcc <HAL_RCC_OscConfig>
 800209a:	1e01      	subs	r1, r0, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config_MSI+0x66>
		Error_Handler();
 800209e:	f7ff ffc1 	bl	8002024 <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80020a4:	9001      	str	r0, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a6:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a8:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020aa:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ac:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ae:	9300      	str	r3, [sp, #0]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020b0:	f002 f816 	bl	80040e0 <HAL_RCC_ClockConfig>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d1f2      	bne.n	800209e <SystemClock_Config_MSI+0x62>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80020b8:	23ab      	movs	r3, #171	; 0xab
 80020ba:	9305      	str	r3, [sp, #20]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80020bc:	23c0      	movs	r3, #192	; 0xc0
 80020be:	031b      	lsls	r3, r3, #12
 80020c0:	930c      	str	r3, [sp, #48]	; 0x30
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80020c2:	2304      	movs	r3, #4
 80020c4:	9308      	str	r3, [sp, #32]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020c6:	2380      	movs	r3, #128	; 0x80
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020c8:	9007      	str	r0, [sp, #28]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020ca:	900a      	str	r0, [sp, #40]	; 0x28
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020cc:	025b      	lsls	r3, r3, #9
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ce:	a805      	add	r0, sp, #20
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020d0:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d2:	f002 f8f3 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d1e1      	bne.n	800209e <SystemClock_Config_MSI+0x62>
}
 80020da:	b01d      	add	sp, #116	; 0x74
 80020dc:	bd30      	pop	{r4, r5, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40007000 	.word	0x40007000
 80020e4:	ffffe7ff 	.word	0xffffe7ff
 80020e8:	40021000 	.word	0x40021000

080020ec <main>:
{
 80020ec:	b510      	push	{r4, lr}
	HAL_Init();
 80020ee:	f000 fced 	bl	8002acc <HAL_Init>
		SystemClock_Config_MSI();
 80020f2:	f7ff ffa3 	bl	800203c <SystemClock_Config_MSI>
	MX_SubGHz_Phy_Init();
 80020f6:	f7ff ff91 	bl	800201c <MX_SubGHz_Phy_Init>
	Main_Task();
 80020fa:	f005 fb07 	bl	800770c <Main_Task>
}
 80020fe:	2000      	movs	r0, #0
 8002100:	bd10      	pop	{r4, pc}
	...

08002104 <HAL_RTC_MspInit>:
    Error_Handler();
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8002104:	b510      	push	{r4, lr}
 8002106:	0004      	movs	r4, r0
 8002108:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	2238      	movs	r2, #56	; 0x38
 800210c:	2100      	movs	r1, #0
 800210e:	4668      	mov	r0, sp
 8002110:	f007 ff0c 	bl	8009f2c <memset>
  if (rtcHandle->Instance == RTC)
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RTC_MspInit+0x50>)
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d118      	bne.n	800214e <HAL_RTC_MspInit+0x4a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800211c:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211e:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002120:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002122:	33fc      	adds	r3, #252	; 0xfc
 8002124:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002126:	f001 fd51 	bl	8003bcc <HAL_RCC_OscConfig>
 800212a:	2800      	cmp	r0, #0
 800212c:	d001      	beq.n	8002132 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 800212e:	f7ff ff79 	bl	8002024 <Error_Handler>
    }
    __HAL_RCC_RTC_ENABLE();
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RTC_MspInit+0x54>)
 8002136:	02db      	lsls	r3, r3, #11
 8002138:	6d11      	ldr	r1, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800213a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 800213c:	430b      	orrs	r3, r1
 800213e:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	0011      	movs	r1, r2
 8002144:	f001 f864 	bl	8003210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002148:	2002      	movs	r0, #2
 800214a:	f001 f88b 	bl	8003264 <HAL_NVIC_EnableIRQ>
  }
}
 800214e:	b00e      	add	sp, #56	; 0x38
 8002150:	bd10      	pop	{r4, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40002800 	.word	0x40002800
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_MspInit>:
#include "sys_debug.h"

#define ENABLE_FAST_WAKEUP
void HAL_MspInit(void)
{
	__HAL_RCC_PWR_CLK_ENABLE();
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_MspInit+0x28>)
 8002160:	055b      	lsls	r3, r3, #21
 8002162:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002164:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 8002166:	430b      	orrs	r3, r1
 8002168:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_DisablePVD();
 800216a:	f001 fc43 	bl	80039f4 <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 800216e:	f001 fcd1 	bl	8003b14 <HAL_PWREx_EnableUltraLowPower>
	__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002172:	2308      	movs	r3, #8
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_MspInit+0x2c>)
 8002176:	6811      	ldr	r1, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6013      	str	r3, [r2, #0]
	DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

	#ifdef ENABLE_FAST_WAKEUP
		HAL_PWREx_EnableFastWakeUp();
 800217c:	f001 fcb6 	bl	8003aec <HAL_PWREx_EnableFastWakeUp>
	#else
		HAL_PWREx_DisableFastWakeUp();
	#endif
}
 8002180:	bd10      	pop	{r4, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	40021000 	.word	0x40021000
 8002188:	40022000 	.word	0x40022000

0800218c <NMI_Handler>:
extern DMA_HandleTypeDef hdma_usart1_tx;
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart2_tx;
extern UART_HandleTypeDef huart2;

void NMI_Handler(void){ while (1){}}
 800218c:	e7fe      	b.n	800218c <NMI_Handler>

0800218e <HardFault_Handler>:
void HardFault_Handler(void){ while (1){}}
 800218e:	e7fe      	b.n	800218e <HardFault_Handler>

08002190 <SVC_Handler>:
void MemManage_Handler(void){ while (1){}}
void BusFault_Handler(void){ while (1){}}
void UsageFault_Handler(void){ while (1){}}
void SVC_Handler(void){}
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:
 8002192:	4770      	bx	lr

08002194 <SysTick_Handler>:
void DebugMon_Handler(void){}
void PendSV_Handler(void){}
void SysTick_Handler(void)
{
 8002194:	b510      	push	{r4, lr}
	RtCountSystick_u32++;
 8002196:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <SysTick_Handler+0x10>)
 8002198:	6813      	ldr	r3, [r2, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	6013      	str	r3, [r2, #0]
	HAL_IncTick();
 800219e:	f000 fca9 	bl	8002af4 <HAL_IncTick>
}
 80021a2:	bd10      	pop	{r4, pc}
 80021a4:	200013b8 	.word	0x200013b8

080021a8 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 80021a8:	b510      	push	{r4, lr}
	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_0);
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <EXTI0_1_IRQHandler+0x10>)
 80021ac:	f001 f92e 	bl	800340c <HAL_EXTI_IRQHandler>
		HAL_EXTI_IRQHandler(&H_EXTI_1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <EXTI0_1_IRQHandler+0x14>)
 80021b2:	f001 f92b 	bl	800340c <HAL_EXTI_IRQHandler>
	#endif
}
 80021b6:	bd10      	pop	{r4, pc}
 80021b8:	20000268 	.word	0x20000268
 80021bc:	20000260 	.word	0x20000260

080021c0 <EXTI2_3_IRQHandler>:
 80021c0:	4770      	bx	lr
	...

080021c4 <EXTI4_15_IRQHandler>:
		HAL_EXTI_IRQHandler(&H_EXTI_3);
	#endif
}

void EXTI4_15_IRQHandler(void)
{
 80021c4:	b510      	push	{r4, lr}
	HAL_EXTI_IRQHandler(&H_EXTI_4);
 80021c6:	4819      	ldr	r0, [pc, #100]	; (800222c <EXTI4_15_IRQHandler+0x68>)
 80021c8:	f001 f920 	bl	800340c <HAL_EXTI_IRQHandler>
	#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
		HAL_EXTI_IRQHandler(&H_EXTI_10);
	#endif

	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_13);
 80021cc:	4818      	ldr	r0, [pc, #96]	; (8002230 <EXTI4_15_IRQHandler+0x6c>)
 80021ce:	f001 f91d 	bl	800340c <HAL_EXTI_IRQHandler>
	#endif

	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 80021d2:	2010      	movs	r0, #16
 80021d4:	f001 fb88 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 80021d8:	2020      	movs	r0, #32
 80021da:	f001 fb85 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 80021de:	2040      	movs	r0, #64	; 0x40
 80021e0:	f001 fb82 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 80021e4:	2080      	movs	r0, #128	; 0x80
 80021e6:	f001 fb7f 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 80021ea:	2080      	movs	r0, #128	; 0x80
 80021ec:	0040      	lsls	r0, r0, #1
 80021ee:	f001 fb7b 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 80021f2:	2080      	movs	r0, #128	; 0x80
 80021f4:	0080      	lsls	r0, r0, #2
 80021f6:	f001 fb77 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 80021fa:	2080      	movs	r0, #128	; 0x80
 80021fc:	00c0      	lsls	r0, r0, #3
 80021fe:	f001 fb73 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8002202:	2080      	movs	r0, #128	; 0x80
 8002204:	0100      	lsls	r0, r0, #4
 8002206:	f001 fb6f 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800220a:	2080      	movs	r0, #128	; 0x80
 800220c:	0140      	lsls	r0, r0, #5
 800220e:	f001 fb6b 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8002212:	2080      	movs	r0, #128	; 0x80
 8002214:	0180      	lsls	r0, r0, #6
 8002216:	f001 fb67 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800221a:	2080      	movs	r0, #128	; 0x80
 800221c:	01c0      	lsls	r0, r0, #7
 800221e:	f001 fb63 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8002222:	2080      	movs	r0, #128	; 0x80
 8002224:	0200      	lsls	r0, r0, #8
 8002226:	f001 fb5f 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
}
 800222a:	bd10      	pop	{r4, pc}
 800222c:	20000258 	.word	0x20000258
 8002230:	20000270 	.word	0x20000270

08002234 <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler(void)
{
 8002234:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002236:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA1_Channel2_3_IRQHandler+0xc>)
 8002238:	f001 f88f 	bl	800335a <HAL_DMA_IRQHandler>
}
 800223c:	bd10      	pop	{r4, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20001210 	.word	0x20001210

08002244 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002244:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002246:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002248:	f001 f887 	bl	800335a <HAL_DMA_IRQHandler>
}
 800224c:	bd10      	pop	{r4, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	200011c8 	.word	0x200011c8

08002254 <USART1_IRQHandler>:
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
			sUartDebug.Length_u16 = 0;
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
	#else
		uint8_t	TempRecieve_u8 = 0;
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <USART1_IRQHandler+0x30>)
{
 8002256:	b570      	push	{r4, r5, r6, lr}
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 8002258:	6803      	ldr	r3, [r0, #0]
 800225a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <USART1_IRQHandler+0x34>)
 800225e:	889a      	ldrh	r2, [r3, #4]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	1c55      	adds	r5, r2, #1
 8002264:	809d      	strh	r5, [r3, #4]
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 8002266:	548c      	strb	r4, [r1, r2]
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
			sUartDebug.Length_u16 = 0;
 8002268:	2196      	movs	r1, #150	; 0x96
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
 800226a:	889a      	ldrh	r2, [r3, #4]
			sUartDebug.Length_u16 = 0;
 800226c:	00c9      	lsls	r1, r1, #3
 800226e:	428a      	cmp	r2, r1
 8002270:	4189      	sbcs	r1, r1
 8002272:	400a      	ands	r2, r1
 8002274:	809a      	strh	r2, [r3, #4]
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
 8002276:	2201      	movs	r2, #1
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <USART1_IRQHandler+0x38>)
 800227a:	3302      	adds	r3, #2
 800227c:	77da      	strb	r2, [r3, #31]
	#endif
	HAL_UART_IRQHandler(&huart1);
 800227e:	f002 ff09 	bl	8005094 <HAL_UART_IRQHandler>
}
 8002282:	bd70      	pop	{r4, r5, r6, pc}
 8002284:	200012dc 	.word	0x200012dc
 8002288:	200000b8 	.word	0x200000b8
 800228c:	20000024 	.word	0x20000024

08002290 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002290:	b510      	push	{r4, lr}
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
		sUartDebug.Length_u16 = 0;
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
	#else
	#endif
	HAL_UART_IRQHandler(&huart2);
 8002292:	4802      	ldr	r0, [pc, #8]	; (800229c <USART2_IRQHandler+0xc>)
 8002294:	f002 fefe 	bl	8005094 <HAL_UART_IRQHandler>
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20001258 	.word	0x20001258

080022a0 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 80022a0:	b510      	push	{r4, lr}
	HAL_RTC_AlarmIRQHandler(&hrtc);
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <RTC_IRQHandler+0xc>)
 80022a4:	f002 f948 	bl	8004538 <HAL_RTC_AlarmIRQHandler>
}
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	200001cc 	.word	0x200001cc

080022b0 <tiny_snprintf_like.constprop.0>:
void UTIL_ADV_TRACE_PostSendHook(void)
{
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80022b0:	b40c      	push	{r2, r3}
 80022b2:	b507      	push	{r0, r1, r2, lr}
{
	va_list vaArgs;
	va_start(vaArgs, strFormat);
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022b4:	2110      	movs	r1, #16
	va_start(vaArgs, strFormat);
 80022b6:	ab05      	add	r3, sp, #20
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022b8:	4a03      	ldr	r2, [pc, #12]	; (80022c8 <tiny_snprintf_like.constprop.0+0x18>)
	va_start(vaArgs, strFormat);
 80022ba:	9301      	str	r3, [sp, #4]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80022bc:	f007 fca0 	bl	8009c00 <tiny_vsnprintf_like>
	va_end(vaArgs);
}
 80022c0:	b003      	add	sp, #12
 80022c2:	bc08      	pop	{r3}
 80022c4:	b002      	add	sp, #8
 80022c6:	4718      	bx	r3
 80022c8:	0800abe4 	.word	0x0800abe4

080022cc <TimestampNow>:
{
 80022cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80022ce:	0004      	movs	r4, r0
	SysTime_t curtime = SysTimeGet();
 80022d0:	ae02      	add	r6, sp, #8
 80022d2:	0030      	movs	r0, r6
{
 80022d4:	000d      	movs	r5, r1
	SysTime_t curtime = SysTimeGet();
 80022d6:	f007 fc6b 	bl	8009bb0 <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80022da:	2104      	movs	r1, #4
 80022dc:	5e73      	ldrsh	r3, [r6, r1]
 80022de:	0020      	movs	r0, r4
 80022e0:	2110      	movs	r1, #16
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <TimestampNow+0x2c>)
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	9b02      	ldr	r3, [sp, #8]
 80022e8:	f7ff ffe2 	bl	80022b0 <tiny_snprintf_like.constprop.0>
	*size = strlen((char *)buff);
 80022ec:	0020      	movs	r0, r4
 80022ee:	f7fd ff0b 	bl	8000108 <strlen>
 80022f2:	8028      	strh	r0, [r5, #0]
}
 80022f4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	0800abe4 	.word	0x0800abe4

080022fc <SystemApp_Init>:
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2501      	movs	r5, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	2602      	movs	r6, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	2704      	movs	r7, #4
{
 8002304:	b08b      	sub	sp, #44	; 0x2c
	UTIL_TIMER_Init();
 8002306:	f007 f9b5 	bl	8009674 <UTIL_TIMER_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	220c      	movs	r2, #12
 800230c:	2100      	movs	r1, #0
 800230e:	a807      	add	r0, sp, #28
 8002310:	f007 fe0c 	bl	8009f2c <memset>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002314:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4c2c      	ldr	r4, [pc, #176]	; (80023c8 <SystemApp_Init+0xcc>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	a905      	add	r1, sp, #20
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	432b      	orrs	r3, r5
 8002320:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	402b      	ands	r3, r5
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800232e:	4333      	orrs	r3, r6
 8002330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002332:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002334:	4033      	ands	r3, r6
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800233c:	433b      	orrs	r3, r7
 800233e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002342:	403b      	ands	r3, r7
 8002344:	9303      	str	r3, [sp, #12]
 8002346:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800234a:	4313      	orrs	r3, r2
 800234c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800234e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002350:	4013      	ands	r3, r2
 8002352:	9304      	str	r3, [sp, #16]
 8002354:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002356:	2303      	movs	r3, #3
 8002358:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <SystemApp_Init+0xd0>)
 800235c:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	f001 f969 	bl	8003634 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <SystemApp_Init+0xd4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	a905      	add	r1, sp, #20
 8002366:	481b      	ldr	r0, [pc, #108]	; (80023d4 <SystemApp_Init+0xd8>)
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002368:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f001 f963 	bl	8003634 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236e:	a905      	add	r1, sp, #20
 8002370:	4819      	ldr	r0, [pc, #100]	; (80023d8 <SystemApp_Init+0xdc>)
 8002372:	f001 f95f 	bl	8003634 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002376:	a905      	add	r1, sp, #20
 8002378:	4818      	ldr	r0, [pc, #96]	; (80023dc <SystemApp_Init+0xe0>)
 800237a:	f001 f95b 	bl	8003634 <HAL_GPIO_Init>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 800237e:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8002380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002382:	43ab      	bics	r3, r5
 8002384:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8002386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002388:	43b3      	bics	r3, r6
 800238a:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 800238c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800238e:	43bb      	bics	r3, r7
 8002390:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8002392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002394:	4393      	bics	r3, r2
 8002396:	62e3      	str	r3, [r4, #44]	; 0x2c
	DBG_Disable();
 8002398:	f000 f83a 	bl	8002410 <DBG_Disable>
	DBG_ProbesInit();
 800239c:	f000 f83c 	bl	8002418 <DBG_ProbesInit>
	UTIL_ADV_TRACE_Init();
 80023a0:	f007 fb8e 	bl	8009ac0 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80023a4:	480e      	ldr	r0, [pc, #56]	; (80023e0 <SystemApp_Init+0xe4>)
 80023a6:	f007 fba5 	bl	8009af4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80023aa:	0030      	movs	r0, r6
 80023ac:	f007 fba8 	bl	8009b00 <UTIL_ADV_TRACE_SetVerboseLevel>
	Sx_Board_Bus_Init();
 80023b0:	f000 fb14 	bl	80029dc <CMWX1ZZABZ0XX_RADIO_Bus_Init>
	Sx_Board_IoInit();
 80023b4:	f000 f962 	bl	800267c <CMWX1ZZABZ0XX_RADIO_IoInit>
	UTIL_LPM_Init();
 80023b8:	f006 fe96 	bl	80090e8 <UTIL_LPM_Init>
		UTIL_LPM_SetStopMode( UTIL_LPM_DISABLE );
 80023bc:	0028      	movs	r0, r5
 80023be:	f006 fe65 	bl	800908c <UTIL_LPM_SetStopMode>
}
 80023c2:	b00b      	add	sp, #44	; 0x2c
 80023c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00009fff 	.word	0x00009fff
 80023d0:	0000ffff 	.word	0x0000ffff
 80023d4:	50000400 	.word	0x50000400
 80023d8:	50000800 	.word	0x50000800
 80023dc:	50001c00 	.word	0x50001c00
 80023e0:	080022cd 	.word	0x080022cd

080023e4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80023e4:	b510      	push	{r4, lr}
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f006 fe50 	bl	800908c <UTIL_LPM_SetStopMode>
}
 80023ec:	bd10      	pop	{r4, pc}
	...

080023f0 <DBG_ConfigForLpm.part.0>:
		#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
	#endif /* DEBUGGER_OFF */

	if (enable_dbg == 1)
	{
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	4a06      	ldr	r2, [pc, #24]	; (800240c <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 80023f4:	b510      	push	{r4, lr}
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 80023f6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80023f8:	03db      	lsls	r3, r3, #15
 80023fa:	430b      	orrs	r3, r1
 80023fc:	6353      	str	r3, [r2, #52]	; 0x34

		HAL_DBGMCU_EnableDBGSleepMode();
 80023fe:	f000 fbad 	bl	8002b5c <HAL_DBGMCU_EnableDBGSleepMode>
		HAL_DBGMCU_EnableDBGStopMode();
 8002402:	f000 fbbb 	bl	8002b7c <HAL_DBGMCU_EnableDBGStopMode>
		HAL_DBGMCU_EnableDBGStandbyMode();
 8002406:	f000 fbc9 	bl	8002b9c <HAL_DBGMCU_EnableDBGStandbyMode>
		HAL_DBGMCU_DisableDBGSleepMode();
		HAL_DBGMCU_DisableDBGStopMode();
		HAL_DBGMCU_DisableDBGStandbyMode();
		__HAL_RCC_DBGMCU_CLK_DISABLE();
	}
}
 800240a:	bd10      	pop	{r4, pc}
 800240c:	40021000 	.word	0x40021000

08002410 <DBG_Disable>:
{
 8002410:	b510      	push	{r4, lr}
 8002412:	f7ff ffed 	bl	80023f0 <DBG_ConfigForLpm.part.0>
}
 8002416:	bd10      	pop	{r4, pc}

08002418 <DBG_ProbesInit>:
		HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);

	#elif !defined (PROBE_PINS_ENABLED)
		#error "PROBE_PINS_ENABLED not defined or out of range <0,1>"
	#endif /* PROBE_PINS_ENABLED */
}
 8002418:	4770      	bx	lr
	...

0800241c <vcom_Init>:

static void (*TxCpltCallback)(void *);
static void (*RxCpltCallback)(uint8_t *rxChar, uint16_t size, uint8_t error);

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800241c:	b510      	push	{r4, lr}
	TxCpltCallback = cb;
 800241e:	4b03      	ldr	r3, [pc, #12]	; (800242c <vcom_Init+0x10>)
 8002420:	6018      	str	r0, [r3, #0]
	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
		MX_USART2_UART_Init();
	#else
		MX_USART1_UART_Init();
 8002422:	f006 fca5 	bl	8008d70 <MX_USART1_UART_Init>
	#endif
	return UTIL_ADV_TRACE_OK;
}
 8002426:	2000      	movs	r0, #0
 8002428:	bd10      	pop	{r4, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	200001f0 	.word	0x200001f0

08002430 <vcom_DeInit>:
	HAL_UART_MspDeInit(&huart1);
	__HAL_RCC_USART2_FORCE_RESET();
	__HAL_RCC_USART2_RELEASE_RESET();
	HAL_UART_MspDeInit(&huart2);
#else
	__HAL_RCC_USART1_FORCE_RESET();
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <vcom_DeInit+0x20>)
 8002434:	01d2      	lsls	r2, r2, #7
 8002436:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 8002438:	b510      	push	{r4, lr}
	__HAL_RCC_USART1_FORCE_RESET();
 800243a:	430a      	orrs	r2, r1
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_USART1_RELEASE_RESET();
 800243e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002440:	4904      	ldr	r1, [pc, #16]	; (8002454 <vcom_DeInit+0x24>)
	HAL_UART_MspDeInit(&huart1);
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <vcom_DeInit+0x28>)
	__HAL_RCC_USART1_RELEASE_RESET();
 8002444:	400a      	ands	r2, r1
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_UART_MspDeInit(&huart1);
 8002448:	f006 fd2a 	bl	8008ea0 <HAL_UART_MspDeInit>
#endif
	return UTIL_ADV_TRACE_OK;
}
 800244c:	2000      	movs	r0, #0
 800244e:	bd10      	pop	{r4, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	ffffbfff 	.word	0xffffbfff
 8002458:	200012dc 	.word	0x200012dc

0800245c <vcom_Trace_DMA>:
{
	#ifdef DEVICE_TYPE_STATION
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
		HAL_UART_Transmit(&huart2, p_data, size, 1000);
	#else
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 800245c:	23fa      	movs	r3, #250	; 0xfa
{
 800245e:	b510      	push	{r4, lr}
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8002460:	4c06      	ldr	r4, [pc, #24]	; (800247c <vcom_Trace_DMA+0x20>)
{
 8002462:	000a      	movs	r2, r1
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8002464:	0001      	movs	r1, r0
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	0020      	movs	r0, r4
 800246a:	f003 f977 	bl	800575c <HAL_UART_Transmit>
	#endif
	TxCpltCallback(NULL);
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <vcom_Trace_DMA+0x24>)
 8002470:	2000      	movs	r0, #0
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4798      	blx	r3
	return UTIL_ADV_TRACE_OK;
}
 8002476:	2000      	movs	r0, #0
 8002478:	bd10      	pop	{r4, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	200012dc 	.word	0x200012dc
 8002480:	200001f0 	.word	0x200001f0

08002484 <vcom_ReceiveInit>:
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
		HAL_UART_Receive_IT(&huart2, &charRx, 1);
	#else
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002484:	2280      	movs	r2, #128	; 0x80
{
 8002486:	b510      	push	{r4, lr}
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002488:	4808      	ldr	r0, [pc, #32]	; (80024ac <vcom_ReceiveInit+0x28>)
 800248a:	0252      	lsls	r2, r2, #9
 800248c:	6803      	ldr	r3, [r0, #0]
 800248e:	69d9      	ldr	r1, [r3, #28]
 8002490:	4211      	tst	r1, r2
 8002492:	d1fc      	bne.n	800248e <vcom_ReceiveInit+0xa>
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	69d9      	ldr	r1, [r3, #28]
 800249a:	4211      	tst	r1, r2
 800249c:	d0fc      	beq.n	8002498 <vcom_ReceiveInit+0x14>
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800249e:	4904      	ldr	r1, [pc, #16]	; (80024b0 <vcom_ReceiveInit+0x2c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	3104      	adds	r1, #4
 80024a4:	f003 fa7e 	bl	80059a4 <HAL_UART_Receive_IT>
	#endif

	return UTIL_ADV_TRACE_OK;
}
 80024a8:	2000      	movs	r0, #0
 80024aa:	bd10      	pop	{r4, pc}
 80024ac:	200012dc 	.word	0x200012dc
 80024b0:	200001f0 	.word	0x200001f0

080024b4 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
}
 80024b4:	4770      	bx	lr
	...

080024b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80024ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480d      	ldr	r0, [pc, #52]	; (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024be:	490e      	ldr	r1, [pc, #56]	; (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c0:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d4:	4c0b      	ldr	r4, [pc, #44]	; (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024e2:	f000 faa3 	bl	8002a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f007 fd2f 	bl	8009f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ea:	f7ff fdff 	bl	80020ec <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
   ldr   r0, =_estack
 80024f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80024fc:	0800b170 	.word	0x0800b170
  ldr r2, =_sbss
 8002500:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8002504:	2000182c 	.word	0x2000182c

08002508 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_COMP_IRQHandler>
	...

0800250c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <_sbrk+0x2c>)
{
 800250e:	0003      	movs	r3, r0
	if (heap_end == 0)
 8002510:	6811      	ldr	r1, [r2, #0]
{
 8002512:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002514:	2900      	cmp	r1, #0
 8002516:	d101      	bne.n	800251c <_sbrk+0x10>
		heap_end = &end;
 8002518:	4908      	ldr	r1, [pc, #32]	; (800253c <_sbrk+0x30>)
 800251a:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800251c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800251e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002520:	18c3      	adds	r3, r0, r3
 8002522:	428b      	cmp	r3, r1
 8002524:	d906      	bls.n	8002534 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002526:	f007 fd09 	bl	8009f3c <__errno>
 800252a:	230c      	movs	r3, #12
 800252c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800252e:	2001      	movs	r0, #1
 8002530:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002532:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002534:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002536:	e7fc      	b.n	8002532 <_sbrk+0x26>
 8002538:	200001f8 	.word	0x200001f8
 800253c:	20001830 	.word	0x20001830

08002540 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002540:	23fa      	movs	r3, #250	; 0xfa
{
 8002542:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002544:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002546:	009b      	lsls	r3, r3, #2
{
 8002548:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4806      	ldr	r0, [pc, #24]	; (8002568 <BSP_SPI1_SendRecv+0x28>)
 800254e:	0013      	movs	r3, r2
 8002550:	000a      	movs	r2, r1
 8002552:	0029      	movs	r1, r5
 8002554:	f002 fc04 	bl	8004d60 <HAL_SPI_TransmitReceive>
 8002558:	2800      	cmp	r0, #0
 800255a:	d101      	bne.n	8002560 <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 800255c:	0020      	movs	r0, r4
  }
  return ret;
}
 800255e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002560:	2006      	movs	r0, #6
 8002562:	4240      	negs	r0, r0
  return ret;
 8002564:	e7fb      	b.n	800255e <BSP_SPI1_SendRecv+0x1e>
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	20000200 	.word	0x20000200

0800256c <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <MX_SPI1_Init+0x54>)
{
 800256e:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8002570:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002572:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002574:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800257a:	33fc      	adds	r3, #252	; 0xfc
 800257c:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800257e:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002580:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002582:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002584:	6145      	str	r5, [r0, #20]
{
 8002586:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002588:	f001 fe88 	bl	800429c <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 800258c:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002590:	490d      	ldr	r1, [pc, #52]	; (80025c8 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002592:	4290      	cmp	r0, r2
 8002594:	d80d      	bhi.n	80025b2 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002596:	2300      	movs	r3, #0
 8002598:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800259a:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259c:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800259e:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80025a0:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 80025a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80025a4:	0020      	movs	r0, r4
 80025a6:	f002 fb73 	bl	8004c90 <HAL_SPI_Init>
 80025aa:	1e43      	subs	r3, r0, #1
 80025ac:	4198      	sbcs	r0, r3
  return ret;
 80025ae:	b2c0      	uxtb	r0, r0
}
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 80025b2:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 80025b4:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 80025b6:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d0ec      	beq.n	8002596 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80025bc:	0840      	lsrs	r0, r0, #1
 80025be:	e7e8      	b.n	8002592 <MX_SPI1_Init+0x26>
 80025c0:	40013000 	.word	0x40013000
 80025c4:	00989680 	.word	0x00989680
 80025c8:	0800a860 	.word	0x0800a860

080025cc <BSP_SPI1_Init>:
{
 80025cc:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 80025ce:	4d1b      	ldr	r5, [pc, #108]	; (800263c <BSP_SPI1_Init+0x70>)
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80025d2:	0028      	movs	r0, r5
{
 80025d4:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 80025d6:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80025d8:	f002 fd14 	bl	8005004 <HAL_SPI_GetState>
 80025dc:	1e04      	subs	r4, r0, #0
 80025de:	d002      	beq.n	80025e6 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80025e0:	2000      	movs	r0, #0
}
 80025e2:	b007      	add	sp, #28
 80025e4:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	4a16      	ldr	r2, [pc, #88]	; (8002644 <BSP_SPI1_Init+0x78>)
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80025f6:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80025f8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	3301      	adds	r3, #1
 80025fe:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002600:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002602:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002604:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002606:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002608:	f001 f814 	bl	8003634 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800260c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800260e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002610:	a901      	add	r1, sp, #4
 8002612:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002614:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002616:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002618:	f001 f80c 	bl	8003634 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800261c:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800261e:	480a      	ldr	r0, [pc, #40]	; (8002648 <BSP_SPI1_Init+0x7c>)
 8002620:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002622:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002624:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002626:	f001 f805 	bl	8003634 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800262a:	0028      	movs	r0, r5
 800262c:	f7ff ff9e 	bl	800256c <MX_SPI1_Init>
 8002630:	2800      	cmp	r0, #0
 8002632:	d0d5      	beq.n	80025e0 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002634:	2008      	movs	r0, #8
 8002636:	4240      	negs	r0, r0
  return ret;
 8002638:	e7d3      	b.n	80025e2 <BSP_SPI1_Init+0x16>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	20000200 	.word	0x20000200
 8002640:	40013000 	.word	0x40013000
 8002644:	40021000 	.word	0x40021000
 8002648:	50000400 	.word	0x50000400

0800264c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 800264c:	2005      	movs	r0, #5
 800264e:	4770      	bx	lr

08002650 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8002650:	0002      	movs	r2, r0
 8002652:	b510      	push	{r4, lr}

  if (state == SET)
 8002654:	2801      	cmp	r0, #1
 8002656:	d109      	bne.n	800266c <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	20a0      	movs	r0, #160	; 0xa0
 800265c:	0149      	lsls	r1, r1, #5
 800265e:	05c0      	lsls	r0, r0, #23
 8002660:	f001 f932 	bl	80038c8 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8002664:	2005      	movs	r0, #5
 8002666:	f000 fa57 	bl	8002b18 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 800266a:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	20a0      	movs	r0, #160	; 0xa0
 8002670:	2200      	movs	r2, #0
 8002672:	0149      	lsls	r1, r1, #5
 8002674:	05c0      	lsls	r0, r0, #23
 8002676:	f001 f927 	bl	80038c8 <HAL_GPIO_WritePin>
}
 800267a:	e7f6      	b.n	800266a <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

0800267c <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 800267c:	2300      	movs	r3, #0
{
 800267e:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002680:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002682:	2204      	movs	r2, #4
{
 8002684:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002686:	4c65      	ldr	r4, [pc, #404]	; (800281c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8002688:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800268a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 800268c:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800268e:	433b      	orrs	r3, r7
 8002690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002694:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002696:	403b      	ands	r3, r7
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800269c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 800269e:	4e60      	ldr	r6, [pc, #384]	; (8002820 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80026a0:	433b      	orrs	r3, r7
 80026a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026a6:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80026a8:	403b      	ands	r3, r7
 80026aa:	9302      	str	r3, [sp, #8]
 80026ac:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 80026ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026b0:	433b      	orrs	r3, r7
 80026b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026b6:	403b      	ands	r3, r7
 80026b8:	9303      	str	r3, [sp, #12]
 80026ba:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80026bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026be:	4313      	orrs	r3, r2
 80026c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80026c4:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80026c6:	4013      	ands	r3, r2
 80026c8:	9304      	str	r3, [sp, #16]
 80026ca:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026cc:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026ce:	0001      	movs	r1, r0
 80026d0:	4854      	ldr	r0, [pc, #336]	; (8002824 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026d2:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026d4:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 80026d6:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026d8:	f000 ffac 	bl	8003634 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026dc:	4b52      	ldr	r3, [pc, #328]	; (8002828 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026de:	a80c      	add	r0, sp, #48	; 0x30
 80026e0:	0001      	movs	r1, r0
 80026e2:	4850      	ldr	r0, [pc, #320]	; (8002824 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026e4:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026e6:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026e8:	f000 ffa4 	bl	8003634 <HAL_GPIO_Init>
 80026ec:	a80c      	add	r0, sp, #48	; 0x30
 80026ee:	0001      	movs	r1, r0
 80026f0:	484c      	ldr	r0, [pc, #304]	; (8002824 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80026f2:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026f4:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026f6:	f000 ff9d 	bl	8003634 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80026fa:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80026fc:	a80c      	add	r0, sp, #48	; 0x30
 80026fe:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002700:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002702:	484a      	ldr	r0, [pc, #296]	; (800282c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002704:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002706:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002708:	f000 ff94 	bl	8003634 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800270c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800270e:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002710:	433b      	orrs	r3, r7
 8002712:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002718:	403b      	ands	r3, r7
 800271a:	9309      	str	r3, [sp, #36]	; 0x24
 800271c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800271e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002720:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002722:	432b      	orrs	r3, r5
 8002724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002728:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800272a:	402b      	ands	r3, r5
 800272c:	930a      	str	r3, [sp, #40]	; 0x28
 800272e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002732:	432b      	orrs	r3, r5
 8002734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800273a:	402b      	ands	r3, r5
 800273c:	930b      	str	r3, [sp, #44]	; 0x2c
 800273e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002740:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002742:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002744:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002746:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002748:	3380      	adds	r3, #128	; 0x80
 800274a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800274e:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002750:	f000 ff70 	bl	8003634 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002754:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002756:	a811      	add	r0, sp, #68	; 0x44
 8002758:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 800275a:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800275c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800275e:	3340      	adds	r3, #64	; 0x40
 8002760:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002762:	f000 ff67 	bl	8003634 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002766:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002768:	a811      	add	r0, sp, #68	; 0x44
 800276a:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 800276c:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800276e:	482d      	ldr	r0, [pc, #180]	; (8002824 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002770:	3308      	adds	r3, #8
 8002772:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002774:	f000 ff5e 	bl	8003634 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002778:	2080      	movs	r0, #128	; 0x80
 800277a:	0200      	lsls	r0, r0, #8
 800277c:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8002780:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8002782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002784:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8002786:	432b      	orrs	r3, r5
 8002788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800278a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800278c:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 800278e:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002790:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8002792:	9305      	str	r3, [sp, #20]
 8002794:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002796:	f000 ff4d 	bl	8003634 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	002a      	movs	r2, r5
 800279e:	0030      	movs	r0, r6
 80027a0:	0209      	lsls	r1, r1, #8
 80027a2:	f001 f891 	bl	80038c8 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80027a6:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 80027a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80027aa:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 80027ac:	432b      	orrs	r3, r5
 80027ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80027b2:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 80027b4:	402b      	ands	r3, r5
 80027b6:	9306      	str	r3, [sp, #24]
 80027b8:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 80027ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027bc:	432b      	orrs	r3, r5
 80027be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027c2:	402b      	ands	r3, r5
 80027c4:	9307      	str	r3, [sp, #28]
 80027c6:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80027c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027ca:	4313      	orrs	r3, r2
 80027cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027d0:	4013      	ands	r3, r2
 80027d2:	9308      	str	r3, [sp, #32]
 80027d4:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80027d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027d8:	4313      	orrs	r3, r2
 80027da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027de:	0014      	movs	r4, r2
 80027e0:	4013      	ands	r3, r2
 80027e2:	9311      	str	r3, [sp, #68]	; 0x44
 80027e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80027ea:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 80027ec:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80027ee:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80027f0:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80027f2:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80027f6:	f000 ff1d 	bl	8003634 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80027fa:	0030      	movs	r0, r6
 80027fc:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80027fe:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002800:	f000 ff18 	bl	8003634 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002804:	a90c      	add	r1, sp, #48	; 0x30
 8002806:	4809      	ldr	r0, [pc, #36]	; (800282c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8002808:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 800280a:	f000 ff13 	bl	8003634 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8002810:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8002812:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002814:	f000 ff0e 	bl	8003634 <HAL_GPIO_Init>
}
 8002818:	b017      	add	sp, #92	; 0x5c
 800281a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	10110000 	.word	0x10110000
 8002824:	50000400 	.word	0x50000400
 8002828:	10310000 	.word	0x10310000
 800282c:	50000800 	.word	0x50000800

08002830 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8002832:	2608      	movs	r6, #8
{
 8002834:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8002836:	0032      	movs	r2, r6
 8002838:	2100      	movs	r1, #0
 800283a:	a803      	add	r0, sp, #12
 800283c:	f007 fb76 	bl	8009f2c <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8002840:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002842:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002844:	4c22      	ldr	r4, [pc, #136]	; (80028d0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002846:	4f23      	ldr	r7, [pc, #140]	; (80028d4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002848:	4669      	mov	r1, sp
 800284a:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 800284c:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 800284e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002850:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002852:	f000 feef 	bl	8003634 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002858:	4669      	mov	r1, sp
 800285a:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 800285c:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800285e:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002860:	f000 fee8 	bl	8003634 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002864:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002866:	4669      	mov	r1, sp
 8002868:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 800286a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800286c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800286e:	f000 fee1 	bl	8003634 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002872:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002874:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002876:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002878:	4818      	ldr	r0, [pc, #96]	; (80028dc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 800287a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800287c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800287e:	f000 fed9 	bl	8003634 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002882:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002884:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002888:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800288a:	05ed      	lsls	r5, r5, #23
 800288c:	0028      	movs	r0, r5
 800288e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002890:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002892:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002894:	f000 fece 	bl	8003634 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002898:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800289a:	0028      	movs	r0, r5
 800289c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800289e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80028a0:	f000 fec8 	bl	8003634 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80028a4:	0020      	movs	r0, r4
 80028a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80028a8:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80028aa:	f000 fec3 	bl	8003634 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80028ae:	0039      	movs	r1, r7
 80028b0:	0028      	movs	r0, r5
 80028b2:	2200      	movs	r2, #0
 80028b4:	f001 f808 	bl	80038c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80028b8:	0028      	movs	r0, r5
 80028ba:	2200      	movs	r2, #0
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	f001 f803 	bl	80038c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	0031      	movs	r1, r6
 80028c6:	0020      	movs	r0, r4
 80028c8:	f000 fffe 	bl	80038c8 <HAL_GPIO_WritePin>
}
 80028cc:	b00b      	add	sp, #44	; 0x2c
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d0:	50000400 	.word	0x50000400
 80028d4:	10110000 	.word	0x10110000
 80028d8:	10310000 	.word	0x10310000
 80028dc:	50000800 	.word	0x50000800

080028e0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 80028e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028e2:	9000      	str	r0, [sp, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e4:	f3ef 8310 	mrs	r3, PRIMASK
 80028e8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80028ea:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80028ec:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80028ee:	4e11      	ldr	r6, [pc, #68]	; (8002934 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 80028f0:	4d11      	ldr	r5, [pc, #68]	; (8002938 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 80028f2:	00e3      	lsls	r3, r4, #3
 80028f4:	18f6      	adds	r6, r6, r3
 80028f6:	00a7      	lsls	r7, r4, #2
 80028f8:	5979      	ldr	r1, [r7, r5]
 80028fa:	0030      	movs	r0, r6
 80028fc:	f000 fd7f 	bl	80033fe <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8002900:	9b00      	ldr	r3, [sp, #0]
 8002902:	2100      	movs	r1, #0
 8002904:	59da      	ldr	r2, [r3, r7]
 8002906:	0030      	movs	r0, r6
 8002908:	f000 fd72 	bl	80033f0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 800290c:	002b      	movs	r3, r5
 800290e:	3310      	adds	r3, #16
 8002910:	56e6      	ldrsb	r6, [r4, r3]
 8002912:	3514      	adds	r5, #20
 8002914:	2200      	movs	r2, #0
 8002916:	0030      	movs	r0, r6
 8002918:	5979      	ldr	r1, [r7, r5]
 800291a:	f000 fc79 	bl	8003210 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800291e:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8002920:	0030      	movs	r0, r6
 8002922:	f000 fc9f 	bl	8003264 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8002926:	2c04      	cmp	r4, #4
 8002928:	d1e1      	bne.n	80028ee <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292a:	9b01      	ldr	r3, [sp, #4]
 800292c:	f383 8810 	msr	PRIMASK, r3
}
 8002930:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000258 	.word	0x20000258
 8002938:	0800a880 	.word	0x0800a880

0800293c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 800293c:	2000      	movs	r0, #0
 800293e:	4770      	bx	lr

08002940 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8002940:	3801      	subs	r0, #1
{
 8002942:	b510      	push	{r4, lr}
  switch (state)
 8002944:	2803      	cmp	r0, #3
 8002946:	d811      	bhi.n	800296c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8002948:	f7fd fbf0 	bl	800012c <__gnu_thumb1_case_uqi>
 800294c:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8002950:	20a0      	movs	r0, #160	; 0xa0
 8002952:	2201      	movs	r2, #1
 8002954:	2102      	movs	r1, #2
 8002956:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002958:	f000 ffb6 	bl	80038c8 <HAL_GPIO_WritePin>
}
 800295c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800295e:	2201      	movs	r2, #1
 8002960:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002962:	4809      	ldr	r0, [pc, #36]	; (8002988 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8002964:	e7f8      	b.n	8002958 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8002966:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002968:	2102      	movs	r1, #2
 800296a:	e7fa      	b.n	8002962 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 800296c:	20a0      	movs	r0, #160	; 0xa0
 800296e:	2200      	movs	r2, #0
 8002970:	2102      	movs	r1, #2
 8002972:	05c0      	lsls	r0, r0, #23
 8002974:	f000 ffa8 	bl	80038c8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	2104      	movs	r1, #4
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 800297e:	f000 ffa3 	bl	80038c8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	e7f0      	b.n	8002968 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	50000800 	.word	0x50000800

0800298c <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 800298c:	2001      	movs	r0, #1
 800298e:	4770      	bx	lr

08002990 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8002990:	b530      	push	{r4, r5, lr}
 8002992:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8002994:	220c      	movs	r2, #12
 8002996:	2100      	movs	r1, #0
 8002998:	a803      	add	r0, sp, #12
 800299a:	f007 fac7 	bl	8009f2c <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80029a0:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029a2:	4d0d      	ldr	r5, [pc, #52]	; (80029d8 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 80029a4:	a901      	add	r1, sp, #4
 80029a6:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 80029a8:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80029ac:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029ae:	f000 fe41 	bl	8003634 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	0021      	movs	r1, r4
 80029b6:	0028      	movs	r0, r5
 80029b8:	f000 ff86 	bl	80038c8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80029bc:	0020      	movs	r0, r4
 80029be:	f000 f8ab 	bl	8002b18 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029c4:	0028      	movs	r0, r5
 80029c6:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 80029c8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80029ca:	f000 fe33 	bl	8003634 <HAL_GPIO_Init>
  HAL_Delay(6);
 80029ce:	2006      	movs	r0, #6
 80029d0:	f000 f8a2 	bl	8002b18 <HAL_Delay>
}
 80029d4:	b007      	add	sp, #28
 80029d6:	bd30      	pop	{r4, r5, pc}
 80029d8:	50000800 	.word	0x50000800

080029dc <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 80029dc:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80029de:	f7ff fdf5 	bl	80025cc <BSP_SPI1_Init>
}
 80029e2:	bd10      	pop	{r4, pc}

080029e4 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 80029e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80029e6:	240e      	movs	r4, #14
{
 80029e8:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80029ea:	446c      	add	r4, sp
{
 80029ec:	80d8      	strh	r0, [r3, #6]
 80029ee:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80029f0:	2201      	movs	r2, #1
 80029f2:	0021      	movs	r1, r4
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff fda3 	bl	8002540 <BSP_SPI1_SendRecv>
  return rxData;
 80029fa:	8820      	ldrh	r0, [r4, #0]
}
 80029fc:	b004      	add	sp, #16
 80029fe:	bd10      	pop	{r4, pc}

08002a00 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8002a00:	0002      	movs	r2, r0
 8002a02:	b510      	push	{r4, lr}
  if (state == 0)
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d106      	bne.n	8002a16 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	20a0      	movs	r0, #160	; 0xa0
 8002a0c:	0209      	lsls	r1, r1, #8
 8002a0e:	05c0      	lsls	r0, r0, #23
 8002a10:	f000 ff5a 	bl	80038c8 <HAL_GPIO_WritePin>
}
 8002a14:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002a16:	2201      	movs	r2, #1
 8002a18:	e7f6      	b.n	8002a08 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08002a1c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8002a1c:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8002a1e:	2102      	movs	r1, #2
 8002a20:	4801      	ldr	r0, [pc, #4]	; (8002a28 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8002a22:	f000 ff4b 	bl	80038bc <HAL_GPIO_ReadPin>
}
 8002a26:	bd10      	pop	{r4, pc}
 8002a28:	50000400 	.word	0x50000400

08002a2c <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <SystemInit+0x44>)
 8002a30:	0052      	lsls	r2, r2, #1
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	490e      	ldr	r1, [pc, #56]	; (8002a74 <SystemInit+0x48>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	490d      	ldr	r1, [pc, #52]	; (8002a78 <SystemInit+0x4c>)
 8002a44:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a46:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002a48:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	490a      	ldr	r1, [pc, #40]	; (8002a7c <SystemInit+0x50>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4909      	ldr	r1, [pc, #36]	; (8002a80 <SystemInit+0x54>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <SystemInit+0x58>)
 8002a68:	0512      	lsls	r2, r2, #20
 8002a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8002a6c:	4770      	bx	lr
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40021000 	.word	0x40021000
 8002a74:	88ff400c 	.word	0x88ff400c
 8002a78:	fef6fff6 	.word	0xfef6fff6
 8002a7c:	fffbffff 	.word	0xfffbffff
 8002a80:	ff02ffff 	.word	0xff02ffff
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	20fa      	movs	r0, #250	; 0xfa
 8002a8e:	4e0d      	ldr	r6, [pc, #52]	; (8002ac4 <HAL_InitTick+0x3c>)
 8002a90:	0080      	lsls	r0, r0, #2
 8002a92:	7831      	ldrb	r1, [r6, #0]
 8002a94:	f7fd fb5e 	bl	8000154 <__udivsi3>
 8002a98:	4c0b      	ldr	r4, [pc, #44]	; (8002ac8 <HAL_InitTick+0x40>)
 8002a9a:	0001      	movs	r1, r0
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	f7fd fb59 	bl	8000154 <__udivsi3>
 8002aa2:	f000 fbfb 	bl	800329c <HAL_SYSTICK_Config>
 8002aa6:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002aa8:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aaa:	2c00      	cmp	r4, #0
 8002aac:	d108      	bne.n	8002ac0 <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aae:	2d03      	cmp	r5, #3
 8002ab0:	d806      	bhi.n	8002ac0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab2:	3802      	subs	r0, #2
 8002ab4:	0022      	movs	r2, r4
 8002ab6:	0029      	movs	r1, r5
 8002ab8:	f000 fbaa 	bl	8003210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	0020      	movs	r0, r4
 8002abe:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002ac0:	bd70      	pop	{r4, r5, r6, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	2302      	movs	r3, #2
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_Init+0x24>)
{
 8002ad0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ada:	f7ff ffd5 	bl	8002a88 <HAL_InitTick>
 8002ade:	1e04      	subs	r4, r0, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_Init+0x1e>
    HAL_MspInit();
 8002ae2:	f7ff fb3b 	bl	800215c <HAL_MspInit>
}
 8002ae6:	0020      	movs	r0, r4
 8002ae8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002aea:	2401      	movs	r4, #1
 8002aec:	e7fb      	b.n	8002ae6 <HAL_Init+0x1a>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40022000 	.word	0x40022000

08002af4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <HAL_IncTick+0x10>)
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_IncTick+0x14>)
 8002af8:	6811      	ldr	r1, [r2, #0]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	185b      	adds	r3, r3, r1
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	4770      	bx	lr
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	20000278 	.word	0x20000278
 8002b08:	20000004 	.word	0x20000004

08002b0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b0c:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <HAL_GetTick+0x8>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
}
 8002b10:	4770      	bx	lr
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	20000278 	.word	0x20000278

08002b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fff6 	bl	8002b0c <HAL_GetTick>
 8002b20:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	1c63      	adds	r3, r4, #1
 8002b24:	d002      	beq.n	8002b2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_Delay+0x20>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	1b40      	subs	r0, r0, r5
 8002b32:	42a0      	cmp	r0, r4
 8002b34:	d3fa      	bcc.n	8002b2c <HAL_Delay+0x14>
  {
  }
}
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4a02      	ldr	r2, [pc, #8]	; (8002b48 <HAL_SuspendTick+0xc>)
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	438b      	bics	r3, r1
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	4770      	bx	lr
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	4a02      	ldr	r2, [pc, #8]	; (8002b58 <HAL_ResumeTick+0xc>)
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	6013      	str	r3, [r2, #0]
}
 8002b56:	4770      	bx	lr
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4a02      	ldr	r2, [pc, #8]	; (8002b68 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002b60:	6851      	ldr	r1, [r2, #4]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6053      	str	r3, [r2, #4]
}
 8002b66:	4770      	bx	lr
 8002b68:	40015800 	.word	0x40015800

08002b6c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4a02      	ldr	r2, [pc, #8]	; (8002b78 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002b70:	6853      	ldr	r3, [r2, #4]
 8002b72:	438b      	bics	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]
}
 8002b76:	4770      	bx	lr
 8002b78:	40015800 	.word	0x40015800

08002b7c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	4a02      	ldr	r2, [pc, #8]	; (8002b88 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002b80:	6851      	ldr	r1, [r2, #4]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6053      	str	r3, [r2, #4]
}
 8002b86:	4770      	bx	lr
 8002b88:	40015800 	.word	0x40015800

08002b8c <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4a02      	ldr	r2, [pc, #8]	; (8002b98 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002b90:	6853      	ldr	r3, [r2, #4]
 8002b92:	438b      	bics	r3, r1
 8002b94:	6053      	str	r3, [r2, #4]
}
 8002b96:	4770      	bx	lr
 8002b98:	40015800 	.word	0x40015800

08002b9c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	4a02      	ldr	r2, [pc, #8]	; (8002ba8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002ba0:	6851      	ldr	r1, [r2, #4]
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6053      	str	r3, [r2, #4]
}
 8002ba6:	4770      	bx	lr
 8002ba8:	40015800 	.word	0x40015800

08002bac <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002bac:	2104      	movs	r1, #4
 8002bae:	4a02      	ldr	r2, [pc, #8]	; (8002bb8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002bb0:	6853      	ldr	r3, [r2, #4]
 8002bb2:	438b      	bics	r3, r1
 8002bb4:	6053      	str	r3, [r2, #4]
}
 8002bb6:	4770      	bx	lr
 8002bb8:	40015800 	.word	0x40015800

08002bbc <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <ADC_DelayMicroSecond+0x24>)
{
 8002bbe:	b513      	push	{r0, r1, r4, lr}
 8002bc0:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <ADC_DelayMicroSecond+0x28>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f7fd fac5 	bl	8000154 <__udivsi3>
 8002bca:	4344      	muls	r4, r0
 8002bcc:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002bce:	9b01      	ldr	r3, [sp, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d100      	bne.n	8002bd6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8002bd4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002bd6:	9b01      	ldr	r3, [sp, #4]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	e7f7      	b.n	8002bce <ADC_DelayMicroSecond+0x12>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	20000000 	.word	0x20000000
 8002be4:	000f4240 	.word	0x000f4240

08002be8 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002be8:	2103      	movs	r1, #3
 8002bea:	6803      	ldr	r3, [r0, #0]
{
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bf0:	6898      	ldr	r0, [r3, #8]
 8002bf2:	4008      	ands	r0, r1
 8002bf4:	2801      	cmp	r0, #1
 8002bf6:	d001      	beq.n	8002bfc <ADC_Disable+0x14>
  return HAL_OK;
 8002bf8:	2000      	movs	r0, #0
}
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4202      	tst	r2, r0
 8002c00:	d0fa      	beq.n	8002bf8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c02:	2205      	movs	r2, #5
 8002c04:	689d      	ldr	r5, [r3, #8]
 8002c06:	4015      	ands	r5, r2
 8002c08:	2d01      	cmp	r5, #1
 8002c0a:	d119      	bne.n	8002c40 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8002c0c:	6898      	ldr	r0, [r3, #8]
 8002c0e:	3a03      	subs	r2, #3
 8002c10:	4302      	orrs	r2, r0
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002c16:	f7ff ff79 	bl	8002b0c <HAL_GetTick>
 8002c1a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	422b      	tst	r3, r5
 8002c22:	d0e9      	beq.n	8002bf8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c24:	f7ff ff72 	bl	8002b0c <HAL_GetTick>
 8002c28:	1b80      	subs	r0, r0, r6
 8002c2a:	280a      	cmp	r0, #10
 8002c2c:	d9f6      	bls.n	8002c1c <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2e:	2310      	movs	r3, #16
 8002c30:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c34:	4313      	orrs	r3, r2
 8002c36:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c3a:	432b      	orrs	r3, r5
 8002c3c:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002c3e:	e7dc      	b.n	8002bfa <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c40:	2310      	movs	r3, #16
 8002c42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c44:	4313      	orrs	r3, r2
 8002c46:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c4a:	4303      	orrs	r3, r0
 8002c4c:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002c4e:	e7d4      	b.n	8002bfa <ADC_Disable+0x12>

08002c50 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c50:	2103      	movs	r1, #3
 8002c52:	6803      	ldr	r3, [r0, #0]
{
 8002c54:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c56:	689a      	ldr	r2, [r3, #8]
{
 8002c58:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	2a01      	cmp	r2, #1
 8002c5e:	d104      	bne.n	8002c6a <ADC_Enable+0x1a>
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	4211      	tst	r1, r2
 8002c64:	d001      	beq.n	8002c6a <ADC_Enable+0x1a>
  return HAL_OK;
 8002c66:	2000      	movs	r0, #0
}
 8002c68:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <ADC_Enable+0x6c>)
 8002c6e:	4211      	tst	r1, r2
 8002c70:	d008      	beq.n	8002c84 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c74:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c7e:	4303      	orrs	r3, r0
 8002c80:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002c82:	e7f1      	b.n	8002c68 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8002c84:	2501      	movs	r5, #1
 8002c86:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002c88:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8002c8a:	432a      	orrs	r2, r5
 8002c8c:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002c8e:	f7ff ff95 	bl	8002bbc <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002c92:	f7ff ff3b 	bl	8002b0c <HAL_GetTick>
 8002c96:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	422b      	tst	r3, r5
 8002c9e:	d1e2      	bne.n	8002c66 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca0:	f7ff ff34 	bl	8002b0c <HAL_GetTick>
 8002ca4:	1b80      	subs	r0, r0, r6
 8002ca6:	280a      	cmp	r0, #10
 8002ca8:	d9f6      	bls.n	8002c98 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	2310      	movs	r3, #16
 8002cac:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cb6:	432b      	orrs	r3, r5
 8002cb8:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002cba:	e7d5      	b.n	8002c68 <ADC_Enable+0x18>
 8002cbc:	80000017 	.word	0x80000017

08002cc0 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	6803      	ldr	r3, [r0, #0]
{
 8002cc4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cc6:	6899      	ldr	r1, [r3, #8]
{
 8002cc8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cca:	4211      	tst	r1, r2
 8002ccc:	d101      	bne.n	8002cd2 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8002cce:	2000      	movs	r0, #0
}
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	4211      	tst	r1, r2
 8002cd6:	d006      	beq.n	8002ce6 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002cd8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cda:	0792      	lsls	r2, r2, #30
 8002cdc:	d403      	bmi.n	8002ce6 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002cde:	2210      	movs	r2, #16
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002ce6:	f7ff ff11 	bl	8002b0c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002cea:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8002cec:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4233      	tst	r3, r6
 8002cf4:	d0eb      	beq.n	8002cce <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002cf6:	f7ff ff09 	bl	8002b0c <HAL_GetTick>
 8002cfa:	1b40      	subs	r0, r0, r5
 8002cfc:	280a      	cmp	r0, #10
 8002cfe:	d9f6      	bls.n	8002cee <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d00:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002d06:	4313      	orrs	r3, r2
 8002d08:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d0c:	4303      	orrs	r3, r0
 8002d0e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002d10:	e7de      	b.n	8002cd0 <ADC_ConversionStop+0x10>
	...

08002d14 <HAL_ADC_Init>:
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002d18:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002d1a:	2c00      	cmp	r4, #0
 8002d1c:	d018      	beq.n	8002d50 <HAL_ADC_Init+0x3c>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002d24:	0022      	movs	r2, r4
 8002d26:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002d2a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002d2c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002d2e:	f005 ff0b 	bl	8008b48 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d34:	06db      	lsls	r3, r3, #27
 8002d36:	d403      	bmi.n	8002d40 <HAL_ADC_Init+0x2c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002d3c:	0752      	lsls	r2, r2, #29
 8002d3e:	d508      	bpl.n	8002d52 <HAL_ADC_Init+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d40:	2310      	movs	r3, #16
 8002d42:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002d44:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	4313      	orrs	r3, r2
 8002d48:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	3450      	adds	r4, #80	; 0x50
 8002d4e:	7023      	strb	r3, [r4, #0]
}
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8002d52:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002d54:	4a55      	ldr	r2, [pc, #340]	; (8002eac <HAL_ADC_Init+0x198>)
 8002d56:	4011      	ands	r1, r2
 8002d58:	3206      	adds	r2, #6
 8002d5a:	32ff      	adds	r2, #255	; 0xff
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d60:	2203      	movs	r2, #3
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	4011      	ands	r1, r2
 8002d66:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <HAL_ADC_Init+0x19c>)
 8002d68:	2901      	cmp	r1, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADC_Init+0x5e>
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	4208      	tst	r0, r1
 8002d70:	d119      	bne.n	8002da6 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002d72:	2580      	movs	r5, #128	; 0x80
 8002d74:	6861      	ldr	r1, [r4, #4]
 8002d76:	05ed      	lsls	r5, r5, #23
 8002d78:	0048      	lsls	r0, r1, #1
 8002d7a:	0840      	lsrs	r0, r0, #1
 8002d7c:	42a8      	cmp	r0, r5
 8002d7e:	d003      	beq.n	8002d88 <HAL_ADC_Init+0x74>
 8002d80:	2080      	movs	r0, #128	; 0x80
 8002d82:	0600      	lsls	r0, r0, #24
 8002d84:	4281      	cmp	r1, r0
 8002d86:	d176      	bne.n	8002e76 <HAL_ADC_Init+0x162>
 8002d88:	6918      	ldr	r0, [r3, #16]
 8002d8a:	0080      	lsls	r0, r0, #2
 8002d8c:	0880      	lsrs	r0, r0, #2
 8002d8e:	6118      	str	r0, [r3, #16]
 8002d90:	6918      	ldr	r0, [r3, #16]
 8002d92:	4301      	orrs	r1, r0
 8002d94:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002d96:	2018      	movs	r0, #24
 8002d98:	68d9      	ldr	r1, [r3, #12]
 8002d9a:	4381      	bics	r1, r0
 8002d9c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002d9e:	68d9      	ldr	r1, [r3, #12]
 8002da0:	68a0      	ldr	r0, [r4, #8]
 8002da2:	4301      	orrs	r1, r0
 8002da4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002da6:	6811      	ldr	r1, [r2, #0]
 8002da8:	4842      	ldr	r0, [pc, #264]	; (8002eb4 <HAL_ADC_Init+0x1a0>)
 8002daa:	4001      	ands	r1, r0
 8002dac:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002db0:	6810      	ldr	r0, [r2, #0]
 8002db2:	0649      	lsls	r1, r1, #25
 8002db4:	4301      	orrs	r1, r0
 8002db6:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	0552      	lsls	r2, r2, #21
 8002dbe:	4211      	tst	r1, r2
 8002dc0:	d102      	bne.n	8002dc8 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	493b      	ldr	r1, [pc, #236]	; (8002eb8 <HAL_ADC_Init+0x1a4>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dcc:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002dce:	400a      	ands	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dd2:	1c62      	adds	r2, r4, #1
 8002dd4:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dd6:	68e2      	ldr	r2, [r4, #12]
 8002dd8:	68d8      	ldr	r0, [r3, #12]
 8002dda:	432a      	orrs	r2, r5
 8002ddc:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002dde:	69a0      	ldr	r0, [r4, #24]
 8002de0:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002de2:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002de4:	69e0      	ldr	r0, [r4, #28]
 8002de6:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002de8:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dea:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002dec:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002dee:	0020      	movs	r0, r4
 8002df0:	302c      	adds	r0, #44	; 0x2c
 8002df2:	7800      	ldrb	r0, [r0, #0]
 8002df4:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002df6:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002df8:	6920      	ldr	r0, [r4, #16]
 8002dfa:	3802      	subs	r0, #2
 8002dfc:	4245      	negs	r5, r0
 8002dfe:	4168      	adcs	r0, r5
 8002e00:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e02:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e04:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002e06:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e0a:	30ff      	adds	r0, #255	; 0xff
 8002e0c:	4282      	cmp	r2, r0
 8002e0e:	d004      	beq.n	8002e1a <HAL_ADC_Init+0x106>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002e10:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002e12:	68d8      	ldr	r0, [r3, #12]
 8002e14:	432a      	orrs	r2, r5
 8002e16:	4302      	orrs	r2, r0
 8002e18:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e1a:	1ca2      	adds	r2, r4, #2
 8002e1c:	7fd2      	ldrb	r2, [r2, #31]
 8002e1e:	2a01      	cmp	r2, #1
 8002e20:	d106      	bne.n	8002e30 <HAL_ADC_Init+0x11c>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e22:	2900      	cmp	r1, #0
 8002e24:	d133      	bne.n	8002e8e <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	0252      	lsls	r2, r2, #9
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002e30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e32:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002e34:	2901      	cmp	r1, #1
 8002e36:	d132      	bne.n	8002e9e <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e38:	4820      	ldr	r0, [pc, #128]	; (8002ebc <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e3a:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e3c:	4002      	ands	r2, r0
 8002e3e:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e42:	6918      	ldr	r0, [r3, #16]
 8002e44:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8002e46:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002e48:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e4a:	4302      	orrs	r2, r0
 8002e4c:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	4311      	orrs	r1, r2
 8002e52:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e54:	2107      	movs	r1, #7
 8002e56:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e62:	430a      	orrs	r2, r1
 8002e64:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002e66:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002e68:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e6c:	439a      	bics	r2, r3
 8002e6e:	3b02      	subs	r3, #2
 8002e70:	4313      	orrs	r3, r2
 8002e72:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002e74:	e76c      	b.n	8002d50 <HAL_ADC_Init+0x3c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002e76:	6918      	ldr	r0, [r3, #16]
 8002e78:	4d11      	ldr	r5, [pc, #68]	; (8002ec0 <HAL_ADC_Init+0x1ac>)
 8002e7a:	0080      	lsls	r0, r0, #2
 8002e7c:	0880      	lsrs	r0, r0, #2
 8002e7e:	6118      	str	r0, [r3, #16]
 8002e80:	6810      	ldr	r0, [r2, #0]
 8002e82:	4028      	ands	r0, r5
 8002e84:	6010      	str	r0, [r2, #0]
 8002e86:	6810      	ldr	r0, [r2, #0]
 8002e88:	4301      	orrs	r1, r0
 8002e8a:	6011      	str	r1, [r2, #0]
 8002e8c:	e783      	b.n	8002d96 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8e:	2120      	movs	r1, #32
 8002e90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e92:	4301      	orrs	r1, r0
 8002e94:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	65a2      	str	r2, [r4, #88]	; 0x58
 8002e9c:	e7c8      	b.n	8002e30 <HAL_ADC_Init+0x11c>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	420a      	tst	r2, r1
 8002ea2:	d0d7      	beq.n	8002e54 <HAL_ADC_Init+0x140>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e7d3      	b.n	8002e54 <HAL_ADC_Init+0x140>
 8002eac:	fffffefd 	.word	0xfffffefd
 8002eb0:	40012708 	.word	0x40012708
 8002eb4:	fdffffff 	.word	0xfdffffff
 8002eb8:	fffe0219 	.word	0xfffe0219
 8002ebc:	fffffc03 	.word	0xfffffc03
 8002ec0:	ffc3ffff 	.word	0xffc3ffff

08002ec4 <HAL_ADC_DeInit>:
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002ec8:	2501      	movs	r5, #1
  if(hadc == NULL)
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d011      	beq.n	8002ef2 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002ece:	2302      	movs	r3, #2
 8002ed0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ed6:	f7ff fef3 	bl	8002cc0 <ADC_ConversionStop>
 8002eda:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8002edc:	d137      	bne.n	8002f4e <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8002ede:	0020      	movs	r0, r4
 8002ee0:	f7ff fe82 	bl	8002be8 <ADC_Disable>
 8002ee4:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8002ee6:	2801      	cmp	r0, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002eea:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8002eec:	2300      	movs	r3, #0
 8002eee:	3450      	adds	r4, #80	; 0x50
 8002ef0:	7023      	strb	r3, [r4, #0]
}
 8002ef2:	0028      	movs	r0, r5
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	4915      	ldr	r1, [pc, #84]	; (8002f54 <HAL_ADC_DeInit+0x90>)
 8002efe:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8002f00:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8002f02:	400a      	ands	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8002f08:	4914      	ldr	r1, [pc, #80]	; (8002f5c <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8002f0a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	400a      	ands	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	4912      	ldr	r1, [pc, #72]	; (8002f60 <HAL_ADC_DeInit+0x9c>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4911      	ldr	r1, [pc, #68]	; (8002f64 <HAL_ADC_DeInit+0xa0>)
 8002f1e:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8002f20:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8002f22:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	438a      	bics	r2, r1
 8002f28:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_ADC_DeInit+0xa4>)
 8002f2e:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002f30:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8002f32:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002f34:	33b4      	adds	r3, #180	; 0xb4
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	438a      	bics	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	438a      	bics	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8002f42:	f005 fe2b 	bl	8008b9c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f46:	2300      	movs	r3, #0
 8002f48:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8002f4a:	6563      	str	r3, [r4, #84]	; 0x54
 8002f4c:	e7ce      	b.n	8002eec <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8002f4e:	2801      	cmp	r0, #1
 8002f50:	d0cb      	beq.n	8002eea <HAL_ADC_DeInit+0x26>
 8002f52:	e7d2      	b.n	8002efa <HAL_ADC_DeInit+0x36>
 8002f54:	fffff760 	.word	0xfffff760
 8002f58:	0000089f 	.word	0x0000089f
 8002f5c:	efffffff 	.word	0xefffffff
 8002f60:	833e0200 	.word	0x833e0200
 8002f64:	3ffffc02 	.word	0x3ffffc02
 8002f68:	f000f000 	.word	0xf000f000

08002f6c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f6c:	6803      	ldr	r3, [r0, #0]
{
 8002f6e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f70:	689b      	ldr	r3, [r3, #8]
{
 8002f72:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8002f74:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f76:	075b      	lsls	r3, r3, #29
 8002f78:	d41a      	bmi.n	8002fb0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8002f7a:	0025      	movs	r5, r4
 8002f7c:	3550      	adds	r5, #80	; 0x50
 8002f7e:	782b      	ldrb	r3, [r5, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d015      	beq.n	8002fb0 <HAL_ADC_Start+0x44>
 8002f84:	2301      	movs	r3, #1
 8002f86:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f88:	69e3      	ldr	r3, [r4, #28]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d111      	bne.n	8002fb2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002f92:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002f94:	401a      	ands	r2, r3
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f9c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8002f9e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002fa2:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fa8:	6899      	ldr	r1, [r3, #8]
 8002faa:	3a18      	subs	r2, #24
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002fb2:	0020      	movs	r0, r4
 8002fb4:	f7ff fe4c 	bl	8002c50 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d0e8      	beq.n	8002f8e <HAL_ADC_Start+0x22>
 8002fbc:	e7f8      	b.n	8002fb0 <HAL_ADC_Start+0x44>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	fffff0fe 	.word	0xfffff0fe

08002fc4 <HAL_ADC_Stop>:
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002fc6:	0006      	movs	r6, r0
 8002fc8:	3650      	adds	r6, #80	; 0x50
 8002fca:	7833      	ldrb	r3, [r6, #0]
{
 8002fcc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002fce:	2002      	movs	r0, #2
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d012      	beq.n	8002ffa <HAL_ADC_Stop+0x36>
 8002fd4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fd6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8002fd8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fda:	f7ff fe71 	bl	8002cc0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002fe2:	0020      	movs	r0, r4
 8002fe4:	f7ff fe00 	bl	8002be8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8002fec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <HAL_ADC_Stop+0x38>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	431d      	orrs	r5, r3
 8002ff4:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	7033      	strb	r3, [r6, #0]
}
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	fffffefe 	.word	0xfffffefe

08003000 <HAL_ADC_PollForConversion>:
{
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003002:	6946      	ldr	r6, [r0, #20]
{
 8003004:	0004      	movs	r4, r0
 8003006:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003008:	2e08      	cmp	r6, #8
 800300a:	d00d      	beq.n	8003028 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800300c:	6803      	ldr	r3, [r0, #0]
 800300e:	2001      	movs	r0, #1
 8003010:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003012:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003014:	4203      	tst	r3, r0
 8003016:	d007      	beq.n	8003028 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003018:	2320      	movs	r3, #32
 800301a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800301c:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301e:	4313      	orrs	r3, r2
 8003020:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8003022:	2300      	movs	r3, #0
 8003024:	7023      	strb	r3, [r4, #0]
}
 8003026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003028:	f7ff fd70 	bl	8002b0c <HAL_GetTick>
 800302c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4216      	tst	r6, r2
 8003034:	d025      	beq.n	8003082 <HAL_ADC_PollForConversion+0x82>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	430a      	orrs	r2, r1
 800303e:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003040:	22c0      	movs	r2, #192	; 0xc0
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	4211      	tst	r1, r2
 8003048:	d114      	bne.n	8003074 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800304a:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800304c:	7fd2      	ldrb	r2, [r2, #31]
 800304e:	2a00      	cmp	r2, #0
 8003050:	d110      	bne.n	8003074 <HAL_ADC_PollForConversion+0x74>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	0712      	lsls	r2, r2, #28
 8003056:	d50d      	bpl.n	8003074 <HAL_ADC_PollForConversion+0x74>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	0752      	lsls	r2, r2, #29
 800305c:	d424      	bmi.n	80030a8 <HAL_ADC_PollForConversion+0xa8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800305e:	210c      	movs	r1, #12
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	438a      	bics	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003066:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <HAL_ADC_PollForConversion+0xbc>)
 800306a:	4011      	ands	r1, r2
 800306c:	3204      	adds	r2, #4
 800306e:	32ff      	adds	r2, #255	; 0xff
 8003070:	430a      	orrs	r2, r1
 8003072:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8003074:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003076:	69a2      	ldr	r2, [r4, #24]
 8003078:	4282      	cmp	r2, r0
 800307a:	d1d4      	bne.n	8003026 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800307c:	220c      	movs	r2, #12
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e7d1      	b.n	8003026 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8003082:	1c6a      	adds	r2, r5, #1
 8003084:	d0d4      	beq.n	8003030 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003086:	2d00      	cmp	r5, #0
 8003088:	d108      	bne.n	800309c <HAL_ADC_PollForConversion+0x9c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800308a:	2304      	movs	r3, #4
 800308c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800308e:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003090:	4313      	orrs	r3, r2
 8003092:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8003094:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003096:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8003098:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800309a:	e7c4      	b.n	8003026 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800309c:	f7ff fd36 	bl	8002b0c <HAL_GetTick>
 80030a0:	1bc0      	subs	r0, r0, r7
 80030a2:	42a8      	cmp	r0, r5
 80030a4:	d9c3      	bls.n	800302e <HAL_ADC_PollForConversion+0x2e>
 80030a6:	e7f0      	b.n	800308a <HAL_ADC_PollForConversion+0x8a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	2220      	movs	r2, #32
 80030aa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80030ac:	430a      	orrs	r2, r1
 80030ae:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b0:	2201      	movs	r2, #1
 80030b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030b4:	430a      	orrs	r2, r1
 80030b6:	65a2      	str	r2, [r4, #88]	; 0x58
 80030b8:	e7dc      	b.n	8003074 <HAL_ADC_PollForConversion+0x74>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	fffffefe 	.word	0xfffffefe

080030c0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80030c0:	6803      	ldr	r3, [r0, #0]
 80030c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_ADC_ConfigChannel>:
{
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80030ca:	0004      	movs	r4, r0
 80030cc:	3450      	adds	r4, #80	; 0x50
 80030ce:	7822      	ldrb	r2, [r4, #0]
{
 80030d0:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80030d2:	2002      	movs	r0, #2
 80030d4:	2a01      	cmp	r2, #1
 80030d6:	d00b      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0x28>
 80030d8:	3801      	subs	r0, #1
 80030da:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	6895      	ldr	r5, [r2, #8]
 80030e0:	076d      	lsls	r5, r5, #29
 80030e2:	d506      	bpl.n	80030f2 <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	2220      	movs	r2, #32
 80030e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030e8:	430a      	orrs	r2, r1
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80030ec:	2300      	movs	r3, #0
 80030ee:	7023      	strb	r3, [r4, #0]
}
 80030f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	2680      	movs	r6, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80030f6:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 80030f8:	4f19      	ldr	r7, [pc, #100]	; (8003160 <HAL_ADC_ConfigChannel+0x98>)
 80030fa:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80030fc:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80030fe:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003100:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003102:	402b      	ands	r3, r5
 8003104:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 8003106:	42b9      	cmp	r1, r7
 8003108:	d018      	beq.n	800313c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800310a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800310c:	4301      	orrs	r1, r0
 800310e:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <HAL_ADC_ConfigChannel+0x9c>)
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800311c:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800311e:	430b      	orrs	r3, r1
 8003120:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003122:	f7ff fd4b 	bl	8002bbc <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003126:	4235      	tst	r5, r6
 8003128:	d005      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_ADC_ConfigChannel+0x9c>)
 800312e:	03db      	lsls	r3, r3, #15
 8003130:	6811      	ldr	r1, [r2, #0]
 8003132:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003134:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003136:	2000      	movs	r0, #0
 8003138:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800313a:	e7d9      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800313c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800313e:	4381      	bics	r1, r0
 8003140:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_ADC_ConfigChannel+0x9c>)
 8003148:	4907      	ldr	r1, [pc, #28]	; (8003168 <HAL_ADC_ConfigChannel+0xa0>)
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	400b      	ands	r3, r1
 800314e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003150:	4235      	tst	r5, r6
 8003152:	d0f0      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003154:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_ADC_ConfigChannel+0x9c>)
 8003156:	4905      	ldr	r1, [pc, #20]	; (800316c <HAL_ADC_ConfigChannel+0xa4>)
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	400b      	ands	r3, r1
 800315c:	e7ea      	b.n	8003134 <HAL_ADC_ConfigChannel+0x6c>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	00001001 	.word	0x00001001
 8003164:	40012708 	.word	0x40012708
 8003168:	ff7fffff 	.word	0xff7fffff
 800316c:	ffbfffff 	.word	0xffbfffff

08003170 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003172:	0005      	movs	r5, r0
 8003174:	3550      	adds	r5, #80	; 0x50
 8003176:	782b      	ldrb	r3, [r5, #0]
{
 8003178:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800317a:	2002      	movs	r0, #2
 800317c:	2b01      	cmp	r3, #1
 800317e:	d043      	beq.n	8003208 <HAL_ADCEx_Calibration_Start+0x98>
 8003180:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003182:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8003184:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	6898      	ldr	r0, [r3, #8]
 800318a:	4010      	ands	r0, r2
 800318c:	2801      	cmp	r0, #1
 800318e:	d109      	bne.n	80031a4 <HAL_ADCEx_Calibration_Start+0x34>
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4202      	tst	r2, r0
 8003194:	d006      	beq.n	80031a4 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003196:	2320      	movs	r3, #32
 8003198:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800319a:	4313      	orrs	r3, r2
 800319c:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319e:	2300      	movs	r3, #0
 80031a0:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80031a2:	e031      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 80031a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_ADCEx_Calibration_Start+0x9c>)
 80031a8:	4011      	ands	r1, r2
 80031aa:	3206      	adds	r2, #6
 80031ac:	32ff      	adds	r2, #255	; 0xff
 80031ae:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031b0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80031b2:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031b4:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	438a      	bics	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	0612      	lsls	r2, r2, #24
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80031c6:	f7ff fca1 	bl	8002b0c <HAL_GetTick>
 80031ca:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	db0b      	blt.n	80031ec <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031d4:	2103      	movs	r1, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031d6:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031d8:	400e      	ands	r6, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031da:	4316      	orrs	r6, r2
 80031dc:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	2301      	movs	r3, #1
 80031e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e2:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80031e4:	438a      	bics	r2, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	6563      	str	r3, [r4, #84]	; 0x54
 80031ea:	e7d8      	b.n	800319e <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031ec:	f7ff fc8e 	bl	8002b0c <HAL_GetTick>
 80031f0:	1bc0      	subs	r0, r0, r7
 80031f2:	280a      	cmp	r0, #10
 80031f4:	d9ea      	bls.n	80031cc <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80031f6:	2312      	movs	r3, #18
 80031f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80031fc:	439a      	bics	r2, r3
 80031fe:	3b02      	subs	r3, #2
 8003200:	4313      	orrs	r3, r2
 8003202:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003204:	2300      	movs	r3, #0
 8003206:	702b      	strb	r3, [r5, #0]
}
 8003208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	fffffefd 	.word	0xfffffefd

08003210 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003210:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003212:	25ff      	movs	r5, #255	; 0xff
 8003214:	2403      	movs	r4, #3
 8003216:	002a      	movs	r2, r5
 8003218:	4004      	ands	r4, r0
 800321a:	00e4      	lsls	r4, r4, #3
 800321c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800321e:	0189      	lsls	r1, r1, #6
 8003220:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003222:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003224:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003226:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003228:	2800      	cmp	r0, #0
 800322a:	db0a      	blt.n	8003242 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322c:	24c0      	movs	r4, #192	; 0xc0
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_NVIC_SetPriority+0x4c>)
 8003230:	0880      	lsrs	r0, r0, #2
 8003232:	0080      	lsls	r0, r0, #2
 8003234:	18c0      	adds	r0, r0, r3
 8003236:	00a4      	lsls	r4, r4, #2
 8003238:	5903      	ldr	r3, [r0, r4]
 800323a:	4013      	ands	r3, r2
 800323c:	430b      	orrs	r3, r1
 800323e:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003240:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003242:	200f      	movs	r0, #15
 8003244:	4003      	ands	r3, r0
 8003246:	3b08      	subs	r3, #8
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <HAL_NVIC_SetPriority+0x50>)
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	181b      	adds	r3, r3, r0
 8003250:	69d8      	ldr	r0, [r3, #28]
 8003252:	4002      	ands	r2, r0
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
 8003258:	e7f2      	b.n	8003240 <HAL_NVIC_SetPriority+0x30>
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003264:	2800      	cmp	r0, #0
 8003266:	db05      	blt.n	8003274 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003268:	231f      	movs	r3, #31
 800326a:	4018      	ands	r0, r3
 800326c:	3b1e      	subs	r3, #30
 800326e:	4083      	lsls	r3, r0
 8003270:	4a01      	ldr	r2, [pc, #4]	; (8003278 <HAL_NVIC_EnableIRQ+0x14>)
 8003272:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	e000e100 	.word	0xe000e100

0800327c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800327c:	2800      	cmp	r0, #0
 800327e:	db09      	blt.n	8003294 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003280:	231f      	movs	r3, #31
 8003282:	4018      	ands	r0, r3
 8003284:	3b1e      	subs	r3, #30
 8003286:	4083      	lsls	r3, r0
 8003288:	4a03      	ldr	r2, [pc, #12]	; (8003298 <HAL_NVIC_DisableIRQ+0x1c>)
 800328a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800328c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003290:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003294:	4770      	bx	lr
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	e000e104 	.word	0xe000e104

0800329c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	1e43      	subs	r3, r0, #1
 80032a0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d20d      	bcs.n	80032c4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ac:	4807      	ldr	r0, [pc, #28]	; (80032cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ae:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032b0:	6a03      	ldr	r3, [r0, #32]
 80032b2:	0609      	lsls	r1, r1, #24
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80032c4:	4770      	bx	lr
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	e000e010 	.word	0xe000e010
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032d0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d2:	1d84      	adds	r4, r0, #6
 80032d4:	7fe2      	ldrb	r2, [r4, #31]
{
 80032d6:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d8:	2a02      	cmp	r2, #2
 80032da:	d006      	beq.n	80032ea <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032dc:	2204      	movs	r2, #4
 80032de:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80032e2:	2200      	movs	r2, #0
 80032e4:	3305      	adds	r3, #5
 80032e6:	77da      	strb	r2, [r3, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80032e8:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ea:	6802      	ldr	r2, [r0, #0]
 80032ec:	200e      	movs	r0, #14
 80032ee:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032f0:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f2:	4381      	bics	r1, r0
 80032f4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80032f6:	2101      	movs	r1, #1
 80032f8:	6810      	ldr	r0, [r2, #0]
 80032fa:	4388      	bics	r0, r1
 80032fc:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003300:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003302:	402a      	ands	r2, r5
 8003304:	000d      	movs	r5, r1
 8003306:	4095      	lsls	r5, r2
 8003308:	6045      	str	r5, [r0, #4]
    return status;
 800330a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800330c:	77e1      	strb	r1, [r4, #31]
    return status;
 800330e:	e7e8      	b.n	80032e2 <HAL_DMA_Abort+0x12>

08003310 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003310:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003312:	1d84      	adds	r4, r0, #6
 8003314:	7fe3      	ldrb	r3, [r4, #31]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331a:	2304      	movs	r3, #4
 800331c:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800331e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8003320:	0018      	movs	r0, r3
 8003322:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003324:	210e      	movs	r1, #14
 8003326:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003328:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003330:	2201      	movs	r2, #1
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	4391      	bics	r1, r2
 8003336:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003338:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800333a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800333c:	402b      	ands	r3, r5
 800333e:	0015      	movs	r5, r2
 8003340:	409d      	lsls	r5, r3
 8003342:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003344:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003346:	2400      	movs	r4, #0
 8003348:	1d43      	adds	r3, r0, #5
 800334a:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 800334c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003350:	42a2      	cmp	r2, r4
 8003352:	d0e5      	beq.n	8003320 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003354:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	0023      	movs	r3, r4
 8003358:	e7e2      	b.n	8003320 <HAL_DMA_Abort_IT+0x10>

0800335a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800335a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800335c:	261c      	movs	r6, #28
 800335e:	2704      	movs	r7, #4
 8003360:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003362:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003364:	4032      	ands	r2, r6
 8003366:	003e      	movs	r6, r7
 8003368:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800336a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003370:	4235      	tst	r5, r6
 8003372:	d00d      	beq.n	8003390 <HAL_DMA_IRQHandler+0x36>
 8003374:	423c      	tst	r4, r7
 8003376:	d00b      	beq.n	8003390 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	0692      	lsls	r2, r2, #26
 800337c:	d402      	bmi.n	8003384 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	43ba      	bics	r2, r7
 8003382:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003384:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003386:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003388:	2b00      	cmp	r3, #0
 800338a:	d019      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800338e:	e017      	b.n	80033c0 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003390:	2702      	movs	r7, #2
 8003392:	003e      	movs	r6, r7
 8003394:	4096      	lsls	r6, r2
 8003396:	4235      	tst	r5, r6
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x68>
 800339a:	423c      	tst	r4, r7
 800339c:	d011      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	0692      	lsls	r2, r2, #26
 80033a2:	d406      	bmi.n	80033b2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a4:	240a      	movs	r4, #10
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	43a2      	bics	r2, r4
 80033aa:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80033ac:	2201      	movs	r2, #1
 80033ae:	1d83      	adds	r3, r0, #6
 80033b0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80033b2:	2200      	movs	r2, #0
 80033b4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033b6:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80033b8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80033ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d1e5      	bne.n	800338c <HAL_DMA_IRQHandler+0x32>
}
 80033c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80033c2:	2608      	movs	r6, #8
 80033c4:	0037      	movs	r7, r6
 80033c6:	4097      	lsls	r7, r2
 80033c8:	423d      	tst	r5, r7
 80033ca:	d0f9      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x66>
 80033cc:	4234      	tst	r4, r6
 80033ce:	d0f7      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d0:	250e      	movs	r5, #14
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	43ac      	bics	r4, r5
 80033d6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033d8:	2301      	movs	r3, #1
 80033da:	001c      	movs	r4, r3
 80033dc:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80033de:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033e0:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033e2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80033e4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80033e6:	2200      	movs	r2, #0
 80033e8:	1d43      	adds	r3, r0, #5
 80033ea:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80033ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033ee:	e7e5      	b.n	80033bc <HAL_DMA_IRQHandler+0x62>

080033f0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80033f0:	0003      	movs	r3, r0
 80033f2:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80033f4:	d101      	bne.n	80033fa <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80033f6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80033f8:	4770      	bx	lr
      status = HAL_ERROR;
 80033fa:	2001      	movs	r0, #1
 80033fc:	e7fc      	b.n	80033f8 <HAL_EXTI_RegisterCallback+0x8>

080033fe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80033fe:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003400:	2001      	movs	r0, #1
  if (hexti == NULL)
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003406:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003408:	6019      	str	r1, [r3, #0]
  }
}
 800340a:	4770      	bx	lr

0800340c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800340c:	231f      	movs	r3, #31
 800340e:	6802      	ldr	r2, [r0, #0]
{
 8003410:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003412:	401a      	ands	r2, r3
 8003414:	3b1e      	subs	r3, #30
 8003416:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_EXTI_IRQHandler+0x20>)
 800341a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 800341c:	420b      	tst	r3, r1
 800341e:	d004      	beq.n	800342a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003420:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003422:	6843      	ldr	r3, [r0, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d000      	beq.n	800342a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003428:	4798      	blx	r3
    }
  }
}
 800342a:	bd10      	pop	{r4, pc}
 800342c:	40010400 	.word	0x40010400

08003430 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003430:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <FLASH_SetErrorCode+0xa4>)
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	6990      	ldr	r0, [r2, #24]
 8003436:	0049      	lsls	r1, r1, #1
 8003438:	0003      	movs	r3, r0
{
 800343a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800343c:	400b      	ands	r3, r1
 800343e:	4208      	tst	r0, r1
 8003440:	d005      	beq.n	800344e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003442:	2302      	movs	r3, #2
 8003444:	4824      	ldr	r0, [pc, #144]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
 8003446:	6944      	ldr	r4, [r0, #20]
 8003448:	4323      	orrs	r3, r4
 800344a:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800344c:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800344e:	2080      	movs	r0, #128	; 0x80
 8003450:	6991      	ldr	r1, [r2, #24]
 8003452:	0080      	lsls	r0, r0, #2
 8003454:	4201      	tst	r1, r0
 8003456:	d005      	beq.n	8003464 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003458:	2101      	movs	r1, #1
 800345a:	4c1f      	ldr	r4, [pc, #124]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800345c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800345e:	6965      	ldr	r5, [r4, #20]
 8003460:	4329      	orrs	r1, r5
 8003462:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003464:	2080      	movs	r0, #128	; 0x80
 8003466:	6991      	ldr	r1, [r2, #24]
 8003468:	00c0      	lsls	r0, r0, #3
 800346a:	4201      	tst	r1, r0
 800346c:	d005      	beq.n	800347a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800346e:	2108      	movs	r1, #8
 8003470:	4c19      	ldr	r4, [pc, #100]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8003472:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003474:	6965      	ldr	r5, [r4, #20]
 8003476:	4329      	orrs	r1, r5
 8003478:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800347a:	2080      	movs	r0, #128	; 0x80
 800347c:	6991      	ldr	r1, [r2, #24]
 800347e:	0100      	lsls	r0, r0, #4
 8003480:	4201      	tst	r1, r0
 8003482:	d005      	beq.n	8003490 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003484:	2104      	movs	r1, #4
 8003486:	4c14      	ldr	r4, [pc, #80]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003488:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800348a:	6965      	ldr	r5, [r4, #20]
 800348c:	4329      	orrs	r1, r5
 800348e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003490:	2080      	movs	r0, #128	; 0x80
 8003492:	6991      	ldr	r1, [r2, #24]
 8003494:	0180      	lsls	r0, r0, #6
 8003496:	4201      	tst	r1, r0
 8003498:	d005      	beq.n	80034a6 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800349a:	2110      	movs	r1, #16
 800349c:	4c0e      	ldr	r4, [pc, #56]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800349e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034a0:	6965      	ldr	r5, [r4, #20]
 80034a2:	4329      	orrs	r1, r5
 80034a4:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80034a6:	6991      	ldr	r1, [r2, #24]
 80034a8:	0389      	lsls	r1, r1, #14
 80034aa:	d505      	bpl.n	80034b8 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80034ac:	2020      	movs	r0, #32
 80034ae:	4c0a      	ldr	r4, [pc, #40]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80034b0:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80034b2:	6961      	ldr	r1, [r4, #20]
 80034b4:	4301      	orrs	r1, r0
 80034b6:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80034b8:	2080      	movs	r0, #128	; 0x80
 80034ba:	6991      	ldr	r1, [r2, #24]
 80034bc:	0240      	lsls	r0, r0, #9
 80034be:	4201      	tst	r1, r0
 80034c0:	d005      	beq.n	80034ce <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	4c04      	ldr	r4, [pc, #16]	; (80034d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80034c6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80034c8:	6965      	ldr	r5, [r4, #20]
 80034ca:	4329      	orrs	r1, r5
 80034cc:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034ce:	6193      	str	r3, [r2, #24]
}  
 80034d0:	bd30      	pop	{r4, r5, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	40022000 	.word	0x40022000
 80034d8:	2000027c 	.word	0x2000027c

080034dc <HAL_FLASH_Unlock>:
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80034dc:	2201      	movs	r2, #1
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_FLASH_Unlock+0x50>)
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	4211      	tst	r1, r2
 80034e4:	d106      	bne.n	80034f4 <HAL_FLASH_Unlock+0x18>
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	0008      	movs	r0, r1
 80034ec:	4010      	ands	r0, r2
 80034ee:	4211      	tst	r1, r2
 80034f0:	d10e      	bne.n	8003510 <HAL_FLASH_Unlock+0x34>
}
 80034f2:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80034fa:	480d      	ldr	r0, [pc, #52]	; (8003530 <HAL_FLASH_Unlock+0x54>)
 80034fc:	60d8      	str	r0, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80034fe:	480d      	ldr	r0, [pc, #52]	; (8003534 <HAL_FLASH_Unlock+0x58>)
 8003500:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	f381 8810 	msr	PRIMASK, r1
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003506:	6859      	ldr	r1, [r3, #4]
      return HAL_ERROR;
 8003508:	0010      	movs	r0, r2
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800350a:	4211      	tst	r1, r2
 800350c:	d0eb      	beq.n	80034e6 <HAL_FLASH_Unlock+0xa>
 800350e:	e7f0      	b.n	80034f2 <HAL_FLASH_Unlock+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003510:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <HAL_FLASH_Unlock+0x5c>)
 8003518:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800351a:	4908      	ldr	r1, [pc, #32]	; (800353c <HAL_FLASH_Unlock+0x60>)
 800351c:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	f382 8810 	msr	PRIMASK, r2
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8003522:	6858      	ldr	r0, [r3, #4]
 8003524:	0780      	lsls	r0, r0, #30
      return HAL_ERROR;
 8003526:	0fc0      	lsrs	r0, r0, #31
 8003528:	e7e3      	b.n	80034f2 <HAL_FLASH_Unlock+0x16>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	40022000 	.word	0x40022000
 8003530:	89abcdef 	.word	0x89abcdef
 8003534:	02030405 	.word	0x02030405
 8003538:	8c9daebf 	.word	0x8c9daebf
 800353c:	13141516 	.word	0x13141516

08003540 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8003540:	2202      	movs	r2, #2
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_FLASH_Lock+0x18>)
}
 8003544:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800354c:	2201      	movs	r2, #1
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
}
 8003554:	4770      	bx	lr
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	40022000 	.word	0x40022000

0800355c <FLASH_WaitForLastOperation>:
{
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff fad4 	bl	8002b0c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003564:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8003566:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003568:	4b18      	ldr	r3, [pc, #96]	; (80035cc <FLASH_WaitForLastOperation+0x70>)
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	4232      	tst	r2, r6
 800356e:	d121      	bne.n	80035b4 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003570:	2202      	movs	r2, #2
 8003572:	6999      	ldr	r1, [r3, #24]
 8003574:	4211      	tst	r1, r2
 8003576:	d000      	beq.n	800357a <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003578:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	05d2      	lsls	r2, r2, #23
 800357e:	d415      	bmi.n	80035ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003580:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003582:	0592      	lsls	r2, r2, #22
 8003584:	d412      	bmi.n	80035ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003586:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003588:	0552      	lsls	r2, r2, #21
 800358a:	d40f      	bmi.n	80035ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800358c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800358e:	0512      	lsls	r2, r2, #20
 8003590:	d40c      	bmi.n	80035ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003592:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003594:	0492      	lsls	r2, r2, #18
 8003596:	d409      	bmi.n	80035ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003598:	6999      	ldr	r1, [r3, #24]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0008      	movs	r0, r1
 800359e:	0292      	lsls	r2, r2, #10
 80035a0:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80035a2:	4211      	tst	r1, r2
 80035a4:	d102      	bne.n	80035ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80035a6:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80035a8:	03db      	lsls	r3, r3, #15
 80035aa:	d508      	bpl.n	80035be <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80035ac:	f7ff ff40 	bl	8003430 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035b0:	2001      	movs	r0, #1
 80035b2:	e004      	b.n	80035be <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	1c62      	adds	r2, r4, #1
 80035b6:	d0d8      	beq.n	800356a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035b8:	2c00      	cmp	r4, #0
 80035ba:	d101      	bne.n	80035c0 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 80035bc:	2003      	movs	r0, #3
}
 80035be:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035c0:	f7ff faa4 	bl	8002b0c <HAL_GetTick>
 80035c4:	1b40      	subs	r0, r0, r5
 80035c6:	42a0      	cmp	r0, r4
 80035c8:	d9ce      	bls.n	8003568 <FLASH_WaitForLastOperation+0xc>
 80035ca:	e7f7      	b.n	80035bc <FLASH_WaitForLastOperation+0x60>
 80035cc:	40022000 	.word	0x40022000

080035d0 <HAL_FLASH_Program>:
{
 80035d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 80035d2:	4c0b      	ldr	r4, [pc, #44]	; (8003600 <HAL_FLASH_Program+0x30>)
{
 80035d4:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 80035d6:	7c23      	ldrb	r3, [r4, #16]
{
 80035d8:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 80035da:	2002      	movs	r0, #2
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d00d      	beq.n	80035fc <HAL_FLASH_Program+0x2c>
 80035e0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035e2:	4808      	ldr	r0, [pc, #32]	; (8003604 <HAL_FLASH_Program+0x34>)
  __HAL_LOCK(&pFlash);
 80035e4:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035e6:	f7ff ffb9 	bl	800355c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_FLASH_Program+0x28>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035ee:	6160      	str	r0, [r4, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035f0:	4804      	ldr	r0, [pc, #16]	; (8003604 <HAL_FLASH_Program+0x34>)
    *(__IO uint32_t *)Address = Data;
 80035f2:	602e      	str	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035f4:	f7ff ffb2 	bl	800355c <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 80035f8:	2300      	movs	r3, #0
 80035fa:	7423      	strb	r3, [r4, #16]
}
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	2000027c 	.word	0x2000027c
 8003604:	0000c350 	.word	0x0000c350

08003608 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003608:	2100      	movs	r1, #0

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800360a:	2280      	movs	r2, #128	; 0x80
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <FLASH_PageErase+0x24>)
{
 800360e:	b510      	push	{r4, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003610:	6159      	str	r1, [r3, #20]
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <FLASH_PageErase+0x28>)
 8003614:	0092      	lsls	r2, r2, #2
 8003616:	685c      	ldr	r4, [r3, #4]
 8003618:	4322      	orrs	r2, r4
 800361a:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800361c:	2208      	movs	r2, #8
 800361e:	685c      	ldr	r4, [r3, #4]
 8003620:	4322      	orrs	r2, r4
 8003622:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8003624:	237f      	movs	r3, #127	; 0x7f
 8003626:	4398      	bics	r0, r3
 8003628:	6001      	str	r1, [r0, #0]
}
 800362a:	bd10      	pop	{r4, pc}
 800362c:	2000027c 	.word	0x2000027c
 8003630:	40022000 	.word	0x40022000

08003634 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003634:	4a59      	ldr	r2, [pc, #356]	; (800379c <HAL_GPIO_Init+0x168>)
{
 8003636:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003638:	1882      	adds	r2, r0, r2
 800363a:	1e54      	subs	r4, r2, #1
 800363c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800363e:	2300      	movs	r3, #0
{
 8003640:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003642:	3205      	adds	r2, #5
{
 8003644:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003646:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003648:	9a02      	ldr	r2, [sp, #8]
 800364a:	6814      	ldr	r4, [r2, #0]
 800364c:	0022      	movs	r2, r4
 800364e:	40da      	lsrs	r2, r3
 8003650:	d101      	bne.n	8003656 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003652:	b007      	add	sp, #28
 8003654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003656:	2201      	movs	r2, #1
 8003658:	0025      	movs	r5, r4
 800365a:	409a      	lsls	r2, r3
 800365c:	4015      	ands	r5, r2
 800365e:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8003660:	4214      	tst	r4, r2
 8003662:	d100      	bne.n	8003666 <HAL_GPIO_Init+0x32>
 8003664:	e098      	b.n	8003798 <HAL_GPIO_Init+0x164>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003666:	9902      	ldr	r1, [sp, #8]
 8003668:	2510      	movs	r5, #16
 800366a:	684c      	ldr	r4, [r1, #4]
 800366c:	005f      	lsls	r7, r3, #1
 800366e:	0026      	movs	r6, r4
 8003670:	43ae      	bics	r6, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003672:	3d0d      	subs	r5, #13
 8003674:	40bd      	lsls	r5, r7
 8003676:	43e9      	mvns	r1, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003678:	1e75      	subs	r5, r6, #1
 800367a:	46b4      	mov	ip, r6
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800367c:	9103      	str	r1, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800367e:	2d01      	cmp	r5, #1
 8003680:	d80d      	bhi.n	800369e <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8003682:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003684:	9903      	ldr	r1, [sp, #12]
 8003686:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003688:	9902      	ldr	r1, [sp, #8]
 800368a:	68cd      	ldr	r5, [r1, #12]
 800368c:	40bd      	lsls	r5, r7
 800368e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003690:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003692:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003694:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003696:	0922      	lsrs	r2, r4, #4
 8003698:	409a      	lsls	r2, r3
 800369a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800369c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800369e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a0:	9a03      	ldr	r2, [sp, #12]
 80036a2:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a4:	9a02      	ldr	r2, [sp, #8]
 80036a6:	6892      	ldr	r2, [r2, #8]
 80036a8:	40ba      	lsls	r2, r7
 80036aa:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80036ac:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ae:	4662      	mov	r2, ip
 80036b0:	2a02      	cmp	r2, #2
 80036b2:	d110      	bne.n	80036d6 <HAL_GPIO_Init+0xa2>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036b4:	2507      	movs	r5, #7
 80036b6:	210f      	movs	r1, #15
 80036b8:	401d      	ands	r5, r3
 80036ba:	00ad      	lsls	r5, r5, #2
 80036bc:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	0092      	lsls	r2, r2, #2
 80036c2:	1882      	adds	r2, r0, r2
 80036c4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036c6:	438e      	bics	r6, r1
 80036c8:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80036ca:	9902      	ldr	r1, [sp, #8]
 80036cc:	690e      	ldr	r6, [r1, #16]
 80036ce:	4661      	mov	r1, ip
 80036d0:	40ae      	lsls	r6, r5
 80036d2:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80036d4:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80036d6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d8:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036da:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036dc:	402a      	ands	r2, r5
 80036de:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e0:	0022      	movs	r2, r4
 80036e2:	4032      	ands	r2, r6
 80036e4:	40ba      	lsls	r2, r7
 80036e6:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 80036e8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ea:	00e2      	lsls	r2, r4, #3
 80036ec:	d554      	bpl.n	8003798 <HAL_GPIO_Init+0x164>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ee:	2701      	movs	r7, #1
 80036f0:	4d2b      	ldr	r5, [pc, #172]	; (80037a0 <HAL_GPIO_Init+0x16c>)
 80036f2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80036f4:	433a      	orrs	r2, r7
 80036f6:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80036f8:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_GPIO_Init+0x170>)
 80036fa:	089d      	lsrs	r5, r3, #2
 80036fc:	00ad      	lsls	r5, r5, #2
 80036fe:	18ad      	adds	r5, r5, r2
 8003700:	68aa      	ldr	r2, [r5, #8]
 8003702:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003704:	001a      	movs	r2, r3
 8003706:	4032      	ands	r2, r6
 8003708:	0092      	lsls	r2, r2, #2
 800370a:	9203      	str	r2, [sp, #12]
 800370c:	220f      	movs	r2, #15
 800370e:	9903      	ldr	r1, [sp, #12]
 8003710:	408a      	lsls	r2, r1
 8003712:	4661      	mov	r1, ip
 8003714:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003716:	22a0      	movs	r2, #160	; 0xa0
 8003718:	05d2      	lsls	r2, r2, #23
 800371a:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800371c:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800371e:	2200      	movs	r2, #0
 8003720:	4560      	cmp	r0, ip
 8003722:	d011      	beq.n	8003748 <HAL_GPIO_Init+0x114>
 8003724:	4a20      	ldr	r2, [pc, #128]	; (80037a8 <HAL_GPIO_Init+0x174>)
 8003726:	4694      	mov	ip, r2
 8003728:	003a      	movs	r2, r7
 800372a:	4560      	cmp	r0, ip
 800372c:	d00c      	beq.n	8003748 <HAL_GPIO_Init+0x114>
 800372e:	4f1f      	ldr	r7, [pc, #124]	; (80037ac <HAL_GPIO_Init+0x178>)
 8003730:	1892      	adds	r2, r2, r2
 8003732:	42b8      	cmp	r0, r7
 8003734:	d008      	beq.n	8003748 <HAL_GPIO_Init+0x114>
 8003736:	4f1e      	ldr	r7, [pc, #120]	; (80037b0 <HAL_GPIO_Init+0x17c>)
 8003738:	0032      	movs	r2, r6
 800373a:	42b8      	cmp	r0, r7
 800373c:	d004      	beq.n	8003748 <HAL_GPIO_Init+0x114>
 800373e:	4e1d      	ldr	r6, [pc, #116]	; (80037b4 <HAL_GPIO_Init+0x180>)
 8003740:	3201      	adds	r2, #1
 8003742:	42b0      	cmp	r0, r6
 8003744:	d000      	beq.n	8003748 <HAL_GPIO_Init+0x114>
 8003746:	9a05      	ldr	r2, [sp, #20]
 8003748:	9903      	ldr	r1, [sp, #12]
 800374a:	408a      	lsls	r2, r1
 800374c:	9904      	ldr	r1, [sp, #16]
 800374e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003750:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003752:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8003754:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_GPIO_Init+0x184>)
        temp &= ~((uint32_t)iocurrent);
 8003758:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800375a:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 800375c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375e:	03e1      	lsls	r1, r4, #15
 8003760:	d401      	bmi.n	8003766 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 8003762:	003e      	movs	r6, r7
 8003764:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003766:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003768:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 800376a:	9e01      	ldr	r6, [sp, #4]
 800376c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800376e:	03a1      	lsls	r1, r4, #14
 8003770:	d401      	bmi.n	8003776 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8003772:	003e      	movs	r6, r7
 8003774:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8003776:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003778:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 800377a:	9e01      	ldr	r6, [sp, #4]
 800377c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800377e:	02e1      	lsls	r1, r4, #11
 8003780:	d401      	bmi.n	8003786 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 8003782:	003e      	movs	r6, r7
 8003784:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8003786:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8003788:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800378a:	9f01      	ldr	r7, [sp, #4]
 800378c:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800378e:	02a4      	lsls	r4, r4, #10
 8003790:	d401      	bmi.n	8003796 <HAL_GPIO_Init+0x162>
        temp &= ~((uint32_t)iocurrent);
 8003792:	402e      	ands	r6, r5
 8003794:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8003796:	60d7      	str	r7, [r2, #12]
    position++;
 8003798:	3301      	adds	r3, #1
 800379a:	e755      	b.n	8003648 <HAL_GPIO_Init+0x14>
 800379c:	afffe400 	.word	0xafffe400
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40010000 	.word	0x40010000
 80037a8:	50000400 	.word	0x50000400
 80037ac:	50000800 	.word	0x50000800
 80037b0:	50000c00 	.word	0x50000c00
 80037b4:	50001000 	.word	0x50001000
 80037b8:	40010400 	.word	0x40010400

080037bc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037be:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <HAL_GPIO_DeInit+0xe4>)
{
 80037c0:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037c2:	1882      	adds	r2, r0, r2
{
 80037c4:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037c6:	1e51      	subs	r1, r2, #1
 80037c8:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 80037ca:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037cc:	3205      	adds	r2, #5
 80037ce:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 80037d0:	9a02      	ldr	r2, [sp, #8]
 80037d2:	40da      	lsrs	r2, r3
 80037d4:	d101      	bne.n	80037da <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 80037d6:	b007      	add	sp, #28
 80037d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80037da:	2701      	movs	r7, #1
 80037dc:	003a      	movs	r2, r7
 80037de:	409a      	lsls	r2, r3
 80037e0:	9c02      	ldr	r4, [sp, #8]
 80037e2:	9201      	str	r2, [sp, #4]
 80037e4:	4014      	ands	r4, r2
    if (iocurrent)
 80037e6:	9901      	ldr	r1, [sp, #4]
 80037e8:	9a02      	ldr	r2, [sp, #8]
 80037ea:	420a      	tst	r2, r1
 80037ec:	d056      	beq.n	800389c <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <HAL_GPIO_DeInit+0xe8>)
 80037f0:	0899      	lsrs	r1, r3, #2
 80037f2:	0089      	lsls	r1, r1, #2
 80037f4:	1889      	adds	r1, r1, r2
 80037f6:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80037f8:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80037fa:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80037fc:	2203      	movs	r2, #3
 80037fe:	4015      	ands	r5, r2
 8003800:	00ad      	lsls	r5, r5, #2
 8003802:	320c      	adds	r2, #12
 8003804:	40aa      	lsls	r2, r5
 8003806:	9203      	str	r2, [sp, #12]
 8003808:	4032      	ands	r2, r6
 800380a:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800380c:	22a0      	movs	r2, #160	; 0xa0
 800380e:	05d2      	lsls	r2, r2, #23
 8003810:	4694      	mov	ip, r2
 8003812:	2200      	movs	r2, #0
 8003814:	4560      	cmp	r0, ip
 8003816:	d011      	beq.n	800383c <HAL_GPIO_DeInit+0x80>
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_GPIO_DeInit+0xec>)
 800381a:	4694      	mov	ip, r2
 800381c:	003a      	movs	r2, r7
 800381e:	4560      	cmp	r0, ip
 8003820:	d00c      	beq.n	800383c <HAL_GPIO_DeInit+0x80>
 8003822:	4f22      	ldr	r7, [pc, #136]	; (80038ac <HAL_GPIO_DeInit+0xf0>)
 8003824:	1892      	adds	r2, r2, r2
 8003826:	42b8      	cmp	r0, r7
 8003828:	d008      	beq.n	800383c <HAL_GPIO_DeInit+0x80>
 800382a:	4f21      	ldr	r7, [pc, #132]	; (80038b0 <HAL_GPIO_DeInit+0xf4>)
 800382c:	3201      	adds	r2, #1
 800382e:	42b8      	cmp	r0, r7
 8003830:	d004      	beq.n	800383c <HAL_GPIO_DeInit+0x80>
 8003832:	4e20      	ldr	r6, [pc, #128]	; (80038b4 <HAL_GPIO_DeInit+0xf8>)
 8003834:	3201      	adds	r2, #1
 8003836:	42b0      	cmp	r0, r6
 8003838:	d000      	beq.n	800383c <HAL_GPIO_DeInit+0x80>
 800383a:	9a05      	ldr	r2, [sp, #20]
 800383c:	40aa      	lsls	r2, r5
 800383e:	9d04      	ldr	r5, [sp, #16]
 8003840:	42aa      	cmp	r2, r5
 8003842:	d110      	bne.n	8003866 <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003844:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_GPIO_DeInit+0xfc>)
 8003846:	6815      	ldr	r5, [r2, #0]
 8003848:	43a5      	bics	r5, r4
 800384a:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800384c:	6855      	ldr	r5, [r2, #4]
 800384e:	43a5      	bics	r5, r4
 8003850:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003852:	6895      	ldr	r5, [r2, #8]
 8003854:	43a5      	bics	r5, r4
 8003856:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003858:	68d5      	ldr	r5, [r2, #12]
 800385a:	43a5      	bics	r5, r4
 800385c:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800385e:	688a      	ldr	r2, [r1, #8]
 8003860:	9c03      	ldr	r4, [sp, #12]
 8003862:	43a2      	bics	r2, r4
 8003864:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003866:	2103      	movs	r1, #3
 8003868:	005c      	lsls	r4, r3, #1
 800386a:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800386c:	2407      	movs	r4, #7
 800386e:	260f      	movs	r6, #15
 8003870:	401c      	ands	r4, r3
 8003872:	00a4      	lsls	r4, r4, #2
 8003874:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003876:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003878:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800387a:	430a      	orrs	r2, r1
 800387c:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800387e:	08da      	lsrs	r2, r3, #3
 8003880:	0092      	lsls	r2, r2, #2
 8003882:	1882      	adds	r2, r0, r2
 8003884:	6a15      	ldr	r5, [r2, #32]
 8003886:	43b5      	bics	r5, r6
 8003888:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800388a:	68c2      	ldr	r2, [r0, #12]
 800388c:	438a      	bics	r2, r1
 800388e:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003890:	6842      	ldr	r2, [r0, #4]
 8003892:	43a2      	bics	r2, r4
 8003894:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003896:	6882      	ldr	r2, [r0, #8]
 8003898:	438a      	bics	r2, r1
 800389a:	6082      	str	r2, [r0, #8]
    position++;
 800389c:	3301      	adds	r3, #1
 800389e:	e797      	b.n	80037d0 <HAL_GPIO_DeInit+0x14>
 80038a0:	afffe400 	.word	0xafffe400
 80038a4:	40010000 	.word	0x40010000
 80038a8:	50000400 	.word	0x50000400
 80038ac:	50000800 	.word	0x50000800
 80038b0:	50000c00 	.word	0x50000c00
 80038b4:	50001000 	.word	0x50001000
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038bc:	6900      	ldr	r0, [r0, #16]
 80038be:	4008      	ands	r0, r1
 80038c0:	1e43      	subs	r3, r0, #1
 80038c2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80038c4:	b2c0      	uxtb	r0, r0
}
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c8:	2a00      	cmp	r2, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038cc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80038ce:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80038d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80038d2:	e7fc      	b.n	80038ce <HAL_GPIO_WritePin+0x6>

080038d4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038d4:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d6:	0013      	movs	r3, r2
 80038d8:	400b      	ands	r3, r1
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	4391      	bics	r1, r2
 80038de:	430b      	orrs	r3, r1
 80038e0:	6183      	str	r3, [r0, #24]
}
 80038e2:	4770      	bx	lr

080038e4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80038ea:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	4210      	tst	r0, r2
 80038f0:	d002      	beq.n	80038f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038f4:	f7ff fff6 	bl	80038e4 <HAL_GPIO_EXTI_Callback>
}
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8003904:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003906:	2c00      	cmp	r4, #0
 8003908:	d03f      	beq.n	800398a <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	0025      	movs	r5, r4
 800390c:	3541      	adds	r5, #65	; 0x41
 800390e:	782b      	ldrb	r3, [r5, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d105      	bne.n	8003922 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	0023      	movs	r3, r4
 8003918:	3340      	adds	r3, #64	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800391a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800391c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800391e:	f005 f9d9 	bl	8008cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003922:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003924:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003926:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003928:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800392a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800392c:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800392e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003930:	438a      	bics	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003934:	491a      	ldr	r1, [pc, #104]	; (80039a0 <HAL_I2C_Init+0xa0>)
 8003936:	6862      	ldr	r2, [r4, #4]
 8003938:	400a      	ands	r2, r1
 800393a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	4919      	ldr	r1, [pc, #100]	; (80039a4 <HAL_I2C_Init+0xa4>)
 8003940:	400a      	ands	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003944:	2801      	cmp	r0, #1
 8003946:	d121      	bne.n	800398c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	0212      	lsls	r2, r2, #8
 800394c:	4332      	orrs	r2, r6
 800394e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003950:	6858      	ldr	r0, [r3, #4]
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_I2C_Init+0xa8>)
 8003954:	4302      	orrs	r2, r0
 8003956:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003958:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800395a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800395c:	400a      	ands	r2, r1
 800395e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003960:	6961      	ldr	r1, [r4, #20]
 8003962:	6922      	ldr	r2, [r4, #16]
 8003964:	430a      	orrs	r2, r1
 8003966:	69a1      	ldr	r1, [r4, #24]
 8003968:	0209      	lsls	r1, r1, #8
 800396a:	430a      	orrs	r2, r1
 800396c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800396e:	6a21      	ldr	r1, [r4, #32]
 8003970:	69e2      	ldr	r2, [r4, #28]
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003976:	2201      	movs	r2, #1
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800397e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003984:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	3442      	adds	r4, #66	; 0x42
 8003988:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800398a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800398c:	2284      	movs	r2, #132	; 0x84
 800398e:	0212      	lsls	r2, r2, #8
 8003990:	4332      	orrs	r2, r6
 8003992:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003994:	2802      	cmp	r0, #2
 8003996:	d1db      	bne.n	8003950 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e7d7      	b.n	8003950 <HAL_I2C_Init+0x50>
 80039a0:	f0ffffff 	.word	0xf0ffffff
 80039a4:	ffff7fff 	.word	0xffff7fff
 80039a8:	02008000 	.word	0x02008000

080039ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80039b0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80039b2:	2c00      	cmp	r4, #0
 80039b4:	d013      	beq.n	80039de <HAL_I2C_DeInit+0x32>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b6:	0025      	movs	r5, r4
 80039b8:	2324      	movs	r3, #36	; 0x24
 80039ba:	3541      	adds	r5, #65	; 0x41
 80039bc:	702b      	strb	r3, [r5, #0]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039be:	6822      	ldr	r2, [r4, #0]
 80039c0:	6813      	ldr	r3, [r2, #0]
 80039c2:	4383      	bics	r3, r0
 80039c4:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039c6:	0020      	movs	r0, r4
 80039c8:	f005 f9b4 	bl	8008d34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 80039d4:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d6:	6320      	str	r0, [r4, #48]	; 0x30

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80039d8:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 80039dc:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80039de:	bd70      	pop	{r4, r5, r6, pc}

080039e0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <HAL_PWR_EnableBkUpAccess+0x10>)
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	6811      	ldr	r1, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	4770      	bx	lr
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	40007000 	.word	0x40007000

080039f4 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80039f4:	2110      	movs	r1, #16
 80039f6:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <HAL_PWR_DisablePVD+0xc>)
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	438b      	bics	r3, r1
 80039fc:	6013      	str	r3, [r2, #0]
}
 80039fe:	4770      	bx	lr
 8003a00:	40007000 	.word	0x40007000

08003a04 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8003a06:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a08:	681e      	ldr	r6, [r3, #0]
{
 8003a0a:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a0c:	2080      	movs	r0, #128	; 0x80
 8003a0e:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a10:	2701      	movs	r7, #1
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a14:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a16:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a18:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a1a:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003a1c:	4206      	tst	r6, r0
 8003a1e:	d005      	beq.n	8003a2c <HAL_PWR_EnterSLEEPMode+0x28>
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	4e11      	ldr	r6, [pc, #68]	; (8003a6c <HAL_PWR_EnterSLEEPMode+0x68>)
 8003a28:	4030      	ands	r0, r6
 8003a2a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a2c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003a2e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a30:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003a32:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003a34:	4d0e      	ldr	r5, [pc, #56]	; (8003a70 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003a36:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003a38:	6928      	ldr	r0, [r5, #16]
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	43b0      	bics	r0, r6
 8003a3e:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003a40:	2901      	cmp	r1, #1
 8003a42:	d10b      	bne.n	8003a5c <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003a44:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_PWR_EnterSLEEPMode+0x54>
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003a58:	46c0      	nop			; (mov r8, r8)

}
 8003a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003a5c:	bf40      	sev
    __WFE();
 8003a5e:	bf20      	wfe
    __WFE();
 8003a60:	bf20      	wfe
 8003a62:	e7f0      	b.n	8003a46 <HAL_PWR_EnterSLEEPMode+0x42>
 8003a64:	40007000 	.word	0x40007000
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	fffffdff 	.word	0xfffffdff
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_PWR_EnterSTOPMode+0x68>)
{
 8003a76:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a78:	681e      	ldr	r6, [r3, #0]
{
 8003a7a:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a7c:	2080      	movs	r0, #128	; 0x80
 8003a7e:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a80:	2701      	movs	r7, #1
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a84:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a86:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003a88:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003a8a:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003a8c:	4206      	tst	r6, r0
 8003a8e:	d005      	beq.n	8003a9c <HAL_PWR_EnterSTOPMode+0x28>
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	4e13      	ldr	r6, [pc, #76]	; (8003ae4 <HAL_PWR_EnterSTOPMode+0x70>)
 8003a98:	4030      	ands	r0, r6
 8003a9a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003a9c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003a9e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003aa0:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003aa2:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003aa4:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 8003aa6:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003aa8:	480f      	ldr	r0, [pc, #60]	; (8003ae8 <HAL_PWR_EnterSTOPMode+0x74>)
 8003aaa:	6906      	ldr	r6, [r0, #16]
 8003aac:	4335      	orrs	r5, r6
 8003aae:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003ab0:	2901      	cmp	r1, #1
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003ab4:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003ab6:	2504      	movs	r5, #4
 8003ab8:	6901      	ldr	r1, [r0, #16]
 8003aba:	43a9      	bics	r1, r5
 8003abc:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003abe:	2c00      	cmp	r4, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_PWR_EnterSTOPMode+0x5c>
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	0092      	lsls	r2, r2, #2
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
  }
}
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8003ad2:	bf40      	sev
    __WFE();
 8003ad4:	bf20      	wfe
    __WFE();
 8003ad6:	bf20      	wfe
 8003ad8:	e7ed      	b.n	8003ab6 <HAL_PWR_EnterSTOPMode+0x42>
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	fffffdff 	.word	0xfffffdff
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	4a03      	ldr	r2, [pc, #12]	; (8003afc <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	6811      	ldr	r1, [r2, #0]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	4770      	bx	lr
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	40007000 	.word	0x40007000

08003b00 <HAL_PWREx_DisableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_DisableFastWakeUp(void)
{
  /* Disable the fast wake up */
  CLEAR_BIT(PWR->CR, PWR_CR_FWU);
 8003b00:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_PWREx_DisableFastWakeUp+0xc>)
 8003b02:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_PWREx_DisableFastWakeUp+0x10>)
 8003b04:	6813      	ldr	r3, [r2, #0]
 8003b06:	400b      	ands	r3, r1
 8003b08:	6013      	str	r3, [r2, #0]
}
 8003b0a:	4770      	bx	lr
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	fffffbff 	.word	0xfffffbff

08003b14 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	6811      	ldr	r1, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	4770      	bx	lr
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	40007000 	.word	0x40007000

08003b28 <HAL_PWREx_DisableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_DisableUltraLowPower(void)
{
  /* Disable the Ultra Low Power mode */
  CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003b28:	4a02      	ldr	r2, [pc, #8]	; (8003b34 <HAL_PWREx_DisableUltraLowPower+0xc>)
 8003b2a:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_PWREx_DisableUltraLowPower+0x10>)
 8003b2c:	6813      	ldr	r3, [r2, #0]
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6013      	str	r3, [r2, #0]
}
 8003b32:	4770      	bx	lr
 8003b34:	40007000 	.word	0x40007000
 8003b38:	fffffdff 	.word	0xfffffdff

08003b3c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b3c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003b42:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b44:	4022      	ands	r2, r4
 8003b46:	2a08      	cmp	r2, #8
 8003b48:	d031      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x72>
 8003b4a:	2a0c      	cmp	r2, #12
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x26>
 8003b4e:	2a04      	cmp	r2, #4
 8003b50:	d125      	bne.n	8003b9e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b52:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003b54:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b56:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003b58:	17c0      	asrs	r0, r0, #31
 8003b5a:	4018      	ands	r0, r3
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x80>)
 8003b5e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b62:	02a2      	lsls	r2, r4, #10
 8003b64:	4816      	ldr	r0, [pc, #88]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x84>)
 8003b66:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b68:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b6c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b70:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b74:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b76:	4211      	tst	r1, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	f7fc fc7e 	bl	8000480 <__aeabi_lmul>
 8003b84:	0022      	movs	r2, r4
 8003b86:	2300      	movs	r3, #0
 8003b88:	f7fc fc5a 	bl	8000440 <__aeabi_uldivmod>
 8003b8c:	e7e8      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2310      	movs	r3, #16
 8003b92:	421a      	tst	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003b96:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003b98:	e7f0      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x80>)
 8003b9c:	e7ee      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b9e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ba0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ba2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4098      	lsls	r0, r3
      break;
 8003bac:	e7d8      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8003bb0:	e7d6      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x24>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	ff48e500 	.word	0xff48e500
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	0800a8a4 	.word	0x0800a8a4
 8003bc4:	007a1200 	.word	0x007a1200
 8003bc8:	003d0900 	.word	0x003d0900

08003bcc <HAL_RCC_OscConfig>:
{
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	0005      	movs	r5, r0
 8003bd0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d059      	beq.n	8003c8a <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	4cb8      	ldr	r4, [pc, #736]	; (8003ebc <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bdc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bde:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	025b      	lsls	r3, r3, #9
 8003be6:	0019      	movs	r1, r3
 8003be8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bea:	07d2      	lsls	r2, r2, #31
 8003bec:	d441      	bmi.n	8003c72 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d500      	bpl.n	8003bf6 <HAL_RCC_OscConfig+0x2a>
 8003bf4:	e08a      	b.n	8003d0c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	06db      	lsls	r3, r3, #27
 8003bfa:	d528      	bpl.n	8003c4e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	d000      	beq.n	8003c02 <HAL_RCC_OscConfig+0x36>
 8003c00:	e0e3      	b.n	8003dca <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	059b      	lsls	r3, r3, #22
 8003c06:	d502      	bpl.n	8003c0e <HAL_RCC_OscConfig+0x42>
 8003c08:	69eb      	ldr	r3, [r5, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d03d      	beq.n	8003c8a <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c0e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c10:	6862      	ldr	r2, [r4, #4]
 8003c12:	49ab      	ldr	r1, [pc, #684]	; (8003ec0 <HAL_RCC_OscConfig+0x2f4>)
 8003c14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c16:	400a      	ands	r2, r1
 8003c18:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c1a:	0b5b      	lsrs	r3, r3, #13
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	023f      	lsls	r7, r7, #8
 8003c20:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c22:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c24:	6861      	ldr	r1, [r4, #4]
 8003c26:	6a2a      	ldr	r2, [r5, #32]
 8003c28:	0209      	lsls	r1, r1, #8
 8003c2a:	0a09      	lsrs	r1, r1, #8
 8003c2c:	0612      	lsls	r2, r2, #24
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c32:	68e1      	ldr	r1, [r4, #12]
 8003c34:	48a3      	ldr	r0, [pc, #652]	; (8003ec4 <HAL_RCC_OscConfig+0x2f8>)
 8003c36:	060b      	lsls	r3, r1, #24
 8003c38:	0f1b      	lsrs	r3, r3, #28
 8003c3a:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c3c:	4aa2      	ldr	r2, [pc, #648]	; (8003ec8 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c3e:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8003c40:	4ba2      	ldr	r3, [pc, #648]	; (8003ecc <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c42:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f7fe ff1f 	bl	8002a88 <HAL_InitTick>
        if(status != HAL_OK)
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d134      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	d500      	bpl.n	8003c56 <HAL_RCC_OscConfig+0x8a>
 8003c54:	e0f0      	b.n	8003e38 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	075b      	lsls	r3, r3, #29
 8003c5a:	d500      	bpl.n	8003c5e <HAL_RCC_OscConfig+0x92>
 8003c5c:	e112      	b.n	8003e84 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	069b      	lsls	r3, r3, #26
 8003c62:	d500      	bpl.n	8003c66 <HAL_RCC_OscConfig+0x9a>
 8003c64:	e197      	b.n	8003f96 <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c66:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d000      	beq.n	8003c6e <HAL_RCC_OscConfig+0xa2>
 8003c6c:	e1c6      	b.n	8003ffc <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8003c6e:	2000      	movs	r0, #0
 8003c70:	e022      	b.n	8003cb8 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c72:	2e08      	cmp	r6, #8
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c76:	2e0c      	cmp	r6, #12
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_OscConfig+0xc2>
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	039b      	lsls	r3, r3, #14
 8003c82:	d5b4      	bpl.n	8003bee <HAL_RCC_OscConfig+0x22>
 8003c84:	686b      	ldr	r3, [r5, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1b1      	bne.n	8003bee <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8e:	686a      	ldr	r2, [r5, #4]
 8003c90:	428a      	cmp	r2, r1
 8003c92:	d113      	bne.n	8003cbc <HAL_RCC_OscConfig+0xf0>
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c9a:	f7fe ff37 	bl	8002b0c <HAL_GetTick>
 8003c9e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	0292      	lsls	r2, r2, #10
 8003ca6:	4213      	tst	r3, r2
 8003ca8:	d1a1      	bne.n	8003bee <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003caa:	f7fe ff2f 	bl	8002b0c <HAL_GetTick>
 8003cae:	9b00      	ldr	r3, [sp, #0]
 8003cb0:	1ac0      	subs	r0, r0, r3
 8003cb2:	2864      	cmp	r0, #100	; 0x64
 8003cb4:	d9f4      	bls.n	8003ca0 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8003cb6:	2003      	movs	r0, #3
}
 8003cb8:	b005      	add	sp, #20
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cbc:	21a0      	movs	r1, #160	; 0xa0
 8003cbe:	02c9      	lsls	r1, r1, #11
 8003cc0:	428a      	cmp	r2, r1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x104>
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	02d2      	lsls	r2, r2, #11
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	e7e1      	b.n	8003c94 <HAL_RCC_OscConfig+0xc8>
 8003cd0:	6821      	ldr	r1, [r4, #0]
 8003cd2:	487f      	ldr	r0, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x304>)
 8003cd4:	4001      	ands	r1, r0
 8003cd6:	6021      	str	r1, [r4, #0]
 8003cd8:	6821      	ldr	r1, [r4, #0]
 8003cda:	400b      	ands	r3, r1
 8003cdc:	9303      	str	r3, [sp, #12]
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	497c      	ldr	r1, [pc, #496]	; (8003ed4 <HAL_RCC_OscConfig+0x308>)
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	400b      	ands	r3, r1
 8003ce6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d1d6      	bne.n	8003c9a <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8003cec:	f7fe ff0e 	bl	8002b0c <HAL_GetTick>
 8003cf0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	0292      	lsls	r2, r2, #10
 8003cf8:	4213      	tst	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <HAL_RCC_OscConfig+0x132>
 8003cfc:	e777      	b.n	8003bee <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfe:	f7fe ff05 	bl	8002b0c <HAL_GetTick>
 8003d02:	9b00      	ldr	r3, [sp, #0]
 8003d04:	1ac0      	subs	r0, r0, r3
 8003d06:	2864      	cmp	r0, #100	; 0x64
 8003d08:	d9f3      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x126>
 8003d0a:	e7d4      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d0c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003d0e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d10:	4213      	tst	r3, r2
 8003d12:	d003      	beq.n	8003d1c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d14:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003d16:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d1c:	2e04      	cmp	r6, #4
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d20:	2e0c      	cmp	r6, #12
 8003d22:	d124      	bne.n	8003d6e <HAL_RCC_OscConfig+0x1a2>
 8003d24:	2f00      	cmp	r7, #0
 8003d26:	d122      	bne.n	8003d6e <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	0752      	lsls	r2, r2, #29
 8003d2c:	d501      	bpl.n	8003d32 <HAL_RCC_OscConfig+0x166>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ab      	beq.n	8003c8a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	6861      	ldr	r1, [r4, #4]
 8003d34:	692a      	ldr	r2, [r5, #16]
 8003d36:	4868      	ldr	r0, [pc, #416]	; (8003ed8 <HAL_RCC_OscConfig+0x30c>)
 8003d38:	0212      	lsls	r2, r2, #8
 8003d3a:	4001      	ands	r1, r0
 8003d3c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d3e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	438a      	bics	r2, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4a:	f7ff fef7 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_RCC_OscConfig+0x2f8>)
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	0f1b      	lsrs	r3, r3, #28
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	495b      	ldr	r1, [pc, #364]	; (8003ec8 <HAL_RCC_OscConfig+0x2fc>)
 8003d5a:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5e:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f7fe fe91 	bl	8002a88 <HAL_InitTick>
      if(status != HAL_OK)
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d100      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1a0>
 8003d6a:	e744      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2a>
 8003d6c:	e7a4      	b.n	8003cb8 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d019      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d72:	2109      	movs	r1, #9
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	438a      	bics	r2, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fec6 	bl	8002b0c <HAL_GetTick>
 8003d80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d82:	2204      	movs	r2, #4
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	4213      	tst	r3, r2
 8003d88:	d007      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	692b      	ldr	r3, [r5, #16]
 8003d8e:	4952      	ldr	r1, [pc, #328]	; (8003ed8 <HAL_RCC_OscConfig+0x30c>)
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	400a      	ands	r2, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	6063      	str	r3, [r4, #4]
 8003d98:	e72d      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fe feb7 	bl	8002b0c <HAL_GetTick>
 8003d9e:	1bc0      	subs	r0, r0, r7
 8003da0:	2802      	cmp	r0, #2
 8003da2:	d9ee      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1b6>
 8003da4:	e787      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8003da6:	2201      	movs	r2, #1
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	4393      	bics	r3, r2
 8003dac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dae:	f7fe fead 	bl	8002b0c <HAL_GetTick>
 8003db2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003db4:	2204      	movs	r2, #4
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	4213      	tst	r3, r2
 8003dba:	d100      	bne.n	8003dbe <HAL_RCC_OscConfig+0x1f2>
 8003dbc:	e71b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fea5 	bl	8002b0c <HAL_GetTick>
 8003dc2:	1bc0      	subs	r0, r0, r7
 8003dc4:	2802      	cmp	r0, #2
 8003dc6:	d9f5      	bls.n	8003db4 <HAL_RCC_OscConfig+0x1e8>
 8003dc8:	e775      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dca:	69eb      	ldr	r3, [r5, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dda:	f7fe fe97 	bl	8002b0c <HAL_GetTick>
 8003dde:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	4213      	tst	r3, r2
 8003de8:	d00d      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dea:	6863      	ldr	r3, [r4, #4]
 8003dec:	4a34      	ldr	r2, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x2f4>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003df2:	4313      	orrs	r3, r2
 8003df4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df6:	6862      	ldr	r2, [r4, #4]
 8003df8:	6a2b      	ldr	r3, [r5, #32]
 8003dfa:	0212      	lsls	r2, r2, #8
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	0a12      	lsrs	r2, r2, #8
 8003e00:	4313      	orrs	r3, r2
 8003e02:	6063      	str	r3, [r4, #4]
 8003e04:	e723      	b.n	8003c4e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e06:	f7fe fe81 	bl	8002b0c <HAL_GetTick>
 8003e0a:	1bc0      	subs	r0, r0, r7
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d9e7      	bls.n	8003de0 <HAL_RCC_OscConfig+0x214>
 8003e10:	e751      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	4a31      	ldr	r2, [pc, #196]	; (8003edc <HAL_RCC_OscConfig+0x310>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fe77 	bl	8002b0c <HAL_GetTick>
 8003e1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e20:	2280      	movs	r2, #128	; 0x80
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	0092      	lsls	r2, r2, #2
 8003e26:	4213      	tst	r3, r2
 8003e28:	d100      	bne.n	8003e2c <HAL_RCC_OscConfig+0x260>
 8003e2a:	e710      	b.n	8003c4e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e2c:	f7fe fe6e 	bl	8002b0c <HAL_GetTick>
 8003e30:	1bc0      	subs	r0, r0, r7
 8003e32:	2802      	cmp	r0, #2
 8003e34:	d9f4      	bls.n	8003e20 <HAL_RCC_OscConfig+0x254>
 8003e36:	e73e      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e38:	696a      	ldr	r2, [r5, #20]
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	2a00      	cmp	r2, #0
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8003e40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e42:	4313      	orrs	r3, r2
 8003e44:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e46:	f7fe fe61 	bl	8002b0c <HAL_GetTick>
 8003e4a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e50:	4213      	tst	r3, r2
 8003e52:	d000      	beq.n	8003e56 <HAL_RCC_OscConfig+0x28a>
 8003e54:	e6ff      	b.n	8003c56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fe fe59 	bl	8002b0c <HAL_GetTick>
 8003e5a:	1bc0      	subs	r0, r0, r7
 8003e5c:	2802      	cmp	r0, #2
 8003e5e:	d9f5      	bls.n	8003e4c <HAL_RCC_OscConfig+0x280>
 8003e60:	e729      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 8003e62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e64:	439a      	bics	r2, r3
 8003e66:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e68:	f7fe fe50 	bl	8002b0c <HAL_GetTick>
 8003e6c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e6e:	2202      	movs	r2, #2
 8003e70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e72:	4213      	tst	r3, r2
 8003e74:	d100      	bne.n	8003e78 <HAL_RCC_OscConfig+0x2ac>
 8003e76:	e6ee      	b.n	8003c56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe fe48 	bl	8002b0c <HAL_GetTick>
 8003e7c:	1bc0      	subs	r0, r0, r7
 8003e7e:	2802      	cmp	r0, #2
 8003e80:	d9f5      	bls.n	8003e6e <HAL_RCC_OscConfig+0x2a2>
 8003e82:	e718      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e84:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003e86:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e8a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003e8c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e8e:	421a      	tst	r2, r3
 8003e90:	d104      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e94:	4313      	orrs	r3, r2
 8003e96:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	4f10      	ldr	r7, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x314>)
 8003ea0:	0052      	lsls	r2, r2, #1
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	4213      	tst	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	68ab      	ldr	r3, [r5, #8]
 8003eac:	0052      	lsls	r2, r2, #1
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d12c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x340>
 8003eb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	6523      	str	r3, [r4, #80]	; 0x50
 8003eb8:	e04d      	b.n	8003f56 <HAL_RCC_OscConfig+0x38a>
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	ffff1fff 	.word	0xffff1fff
 8003ec4:	0800a8ad 	.word	0x0800a8ad
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	20000008 	.word	0x20000008
 8003ed0:	fffeffff 	.word	0xfffeffff
 8003ed4:	fffbffff 	.word	0xfffbffff
 8003ed8:	ffffe0ff 	.word	0xffffe0ff
 8003edc:	fffffeff 	.word	0xfffffeff
 8003ee0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	0052      	lsls	r2, r2, #1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003eee:	f7fe fe0d 	bl	8002b0c <HAL_GetTick>
 8003ef2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	0052      	lsls	r2, r2, #1
 8003efa:	4213      	tst	r3, r2
 8003efc:	d1d4      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe fe05 	bl	8002b0c <HAL_GetTick>
 8003f02:	9b01      	ldr	r3, [sp, #4]
 8003f04:	1ac0      	subs	r0, r0, r3
 8003f06:	2864      	cmp	r0, #100	; 0x64
 8003f08:	d9f4      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x328>
 8003f0a:	e6d4      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <HAL_RCC_OscConfig+0x372>
 8003f10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f12:	4a6b      	ldr	r2, [pc, #428]	; (80040c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	6523      	str	r3, [r4, #80]	; 0x50
 8003f18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f1a:	4a6a      	ldr	r2, [pc, #424]	; (80040c4 <HAL_RCC_OscConfig+0x4f8>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f20:	f7fe fdf4 	bl	8002b0c <HAL_GetTick>
 8003f24:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4213      	tst	r3, r2
 8003f2e:	d01a      	beq.n	8003f66 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fe fdec 	bl	8002b0c <HAL_GetTick>
 8003f34:	4b64      	ldr	r3, [pc, #400]	; (80040c8 <HAL_RCC_OscConfig+0x4fc>)
 8003f36:	1bc0      	subs	r0, r0, r7
 8003f38:	4298      	cmp	r0, r3
 8003f3a:	d9f4      	bls.n	8003f26 <HAL_RCC_OscConfig+0x35a>
 8003f3c:	e6bb      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	21a0      	movs	r1, #160	; 0xa0
 8003f40:	00c9      	lsls	r1, r1, #3
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3ac>
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6523      	str	r3, [r4, #80]	; 0x50
 8003f50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f52:	431a      	orrs	r2, r3
 8003f54:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f56:	f7fe fdd9 	bl	8002b0c <HAL_GetTick>
 8003f5a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f60:	0092      	lsls	r2, r2, #2
 8003f62:	4213      	tst	r3, r2
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8003f66:	9b00      	ldr	r3, [sp, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d000      	beq.n	8003f6e <HAL_RCC_OscConfig+0x3a2>
 8003f6c:	e677      	b.n	8003c5e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f70:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_RCC_OscConfig+0x500>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f76:	e672      	b.n	8003c5e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f7a:	4a51      	ldr	r2, [pc, #324]	; (80040c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	6523      	str	r3, [r4, #80]	; 0x50
 8003f80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f82:	4a50      	ldr	r2, [pc, #320]	; (80040c4 <HAL_RCC_OscConfig+0x4f8>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	e796      	b.n	8003eb6 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fe fdc0 	bl	8002b0c <HAL_GetTick>
 8003f8c:	4b4e      	ldr	r3, [pc, #312]	; (80040c8 <HAL_RCC_OscConfig+0x4fc>)
 8003f8e:	1bc0      	subs	r0, r0, r7
 8003f90:	4298      	cmp	r0, r3
 8003f92:	d9e3      	bls.n	8003f5c <HAL_RCC_OscConfig+0x390>
 8003f94:	e68f      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f96:	69aa      	ldr	r2, [r5, #24]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	d018      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8003fa0:	68a2      	ldr	r2, [r4, #8]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	60a2      	str	r2, [r4, #8]
 8003fa6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	6362      	str	r2, [r4, #52]	; 0x34
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	6a19      	ldr	r1, [r3, #32]
 8003fb0:	0192      	lsls	r2, r2, #6
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003fb6:	f7fe fda9 	bl	8002b0c <HAL_GetTick>
 8003fba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	4213      	tst	r3, r2
 8003fc2:	d000      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x3fa>
 8003fc4:	e64f      	b.n	8003c66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc6:	f7fe fda1 	bl	8002b0c <HAL_GetTick>
 8003fca:	1bc0      	subs	r0, r0, r7
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	d9f5      	bls.n	8003fbc <HAL_RCC_OscConfig+0x3f0>
 8003fd0:	e671      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8003fd2:	68a2      	ldr	r2, [r4, #8]
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	60a2      	str	r2, [r4, #8]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	493e      	ldr	r1, [pc, #248]	; (80040d4 <HAL_RCC_OscConfig+0x508>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fd94 	bl	8002b0c <HAL_GetTick>
 8003fe4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	4213      	tst	r3, r2
 8003fec:	d100      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x424>
 8003fee:	e63a      	b.n	8003c66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff0:	f7fe fd8c 	bl	8002b0c <HAL_GetTick>
 8003ff4:	1bc0      	subs	r0, r0, r7
 8003ff6:	2802      	cmp	r0, #2
 8003ff8:	d9f5      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x41a>
 8003ffa:	e65c      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffc:	2e0c      	cmp	r6, #12
 8003ffe:	d043      	beq.n	8004088 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004000:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <HAL_RCC_OscConfig+0x50c>)
 8004002:	2b02      	cmp	r3, #2
 8004004:	d12e      	bne.n	8004064 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 8004006:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004008:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800400a:	4013      	ands	r3, r2
 800400c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800400e:	f7fe fd7d 	bl	8002b0c <HAL_GetTick>
 8004012:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004014:	04bf      	lsls	r7, r7, #18
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	423b      	tst	r3, r7
 800401a:	d11d      	bne.n	8004058 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800401c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800401e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004020:	68e2      	ldr	r2, [r4, #12]
 8004022:	430b      	orrs	r3, r1
 8004024:	492d      	ldr	r1, [pc, #180]	; (80040dc <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004026:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004028:	400a      	ands	r2, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800402e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004030:	4313      	orrs	r3, r2
 8004032:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	045b      	lsls	r3, r3, #17
 800403a:	4313      	orrs	r3, r2
 800403c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800403e:	f7fe fd65 	bl	8002b0c <HAL_GetTick>
 8004042:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	4233      	tst	r3, r6
 8004048:	d000      	beq.n	800404c <HAL_RCC_OscConfig+0x480>
 800404a:	e610      	b.n	8003c6e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fd5e 	bl	8002b0c <HAL_GetTick>
 8004050:	1b40      	subs	r0, r0, r5
 8004052:	2802      	cmp	r0, #2
 8004054:	d9f6      	bls.n	8004044 <HAL_RCC_OscConfig+0x478>
 8004056:	e62e      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fe fd58 	bl	8002b0c <HAL_GetTick>
 800405c:	1b80      	subs	r0, r0, r6
 800405e:	2802      	cmp	r0, #2
 8004060:	d9d9      	bls.n	8004016 <HAL_RCC_OscConfig+0x44a>
 8004062:	e628      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8004064:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004066:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004068:	4013      	ands	r3, r2
 800406a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800406c:	f7fe fd4e 	bl	8002b0c <HAL_GetTick>
 8004070:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004072:	04b6      	lsls	r6, r6, #18
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	4233      	tst	r3, r6
 8004078:	d100      	bne.n	800407c <HAL_RCC_OscConfig+0x4b0>
 800407a:	e5f8      	b.n	8003c6e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407c:	f7fe fd46 	bl	8002b0c <HAL_GetTick>
 8004080:	1b40      	subs	r0, r0, r5
 8004082:	2802      	cmp	r0, #2
 8004084:	d9f6      	bls.n	8004074 <HAL_RCC_OscConfig+0x4a8>
 8004086:	e616      	b.n	8003cb6 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8004088:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408a:	2b01      	cmp	r3, #1
 800408c:	d100      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
 800408e:	e613      	b.n	8003cb8 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004092:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004094:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004096:	0252      	lsls	r2, r2, #9
 8004098:	401a      	ands	r2, r3
 800409a:	428a      	cmp	r2, r1
 800409c:	d000      	beq.n	80040a0 <HAL_RCC_OscConfig+0x4d4>
 800409e:	e5f4      	b.n	8003c8a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040a0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040a4:	0392      	lsls	r2, r2, #14
 80040a6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a8:	428a      	cmp	r2, r1
 80040aa:	d000      	beq.n	80040ae <HAL_RCC_OscConfig+0x4e2>
 80040ac:	e5ed      	b.n	8003c8a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80040ae:	22c0      	movs	r2, #192	; 0xc0
 80040b0:	0412      	lsls	r2, r2, #16
 80040b2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d100      	bne.n	80040bc <HAL_RCC_OscConfig+0x4f0>
 80040ba:	e5d8      	b.n	8003c6e <HAL_RCC_OscConfig+0xa2>
 80040bc:	e5e5      	b.n	8003c8a <HAL_RCC_OscConfig+0xbe>
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	fffffeff 	.word	0xfffffeff
 80040c4:	fffffbff 	.word	0xfffffbff
 80040c8:	00001388 	.word	0x00001388
 80040cc:	efffffff 	.word	0xefffffff
 80040d0:	40010000 	.word	0x40010000
 80040d4:	ffffdfff 	.word	0xffffdfff
 80040d8:	feffffff 	.word	0xfeffffff
 80040dc:	ff02ffff 	.word	0xff02ffff

080040e0 <HAL_RCC_ClockConfig>:
{
 80040e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040e2:	1e04      	subs	r4, r0, #0
 80040e4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80040e8:	2001      	movs	r0, #1
}
 80040ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	2501      	movs	r5, #1
 80040ee:	4e5b      	ldr	r6, [pc, #364]	; (800425c <HAL_RCC_ClockConfig+0x17c>)
 80040f0:	9a01      	ldr	r2, [sp, #4]
 80040f2:	6833      	ldr	r3, [r6, #0]
 80040f4:	402b      	ands	r3, r5
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d331      	bcc.n	800415e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	0793      	lsls	r3, r2, #30
 80040fe:	d443      	bmi.n	8004188 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004100:	07d2      	lsls	r2, r2, #31
 8004102:	d449      	bmi.n	8004198 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	2501      	movs	r5, #1
 8004106:	6833      	ldr	r3, [r6, #0]
 8004108:	9a01      	ldr	r2, [sp, #4]
 800410a:	402b      	ands	r3, r5
 800410c:	4293      	cmp	r3, r2
 800410e:	d909      	bls.n	8004124 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004110:	6833      	ldr	r3, [r6, #0]
 8004112:	43ab      	bics	r3, r5
 8004114:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004116:	f7fe fcf9 	bl	8002b0c <HAL_GetTick>
 800411a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	422b      	tst	r3, r5
 8004120:	d000      	beq.n	8004124 <HAL_RCC_ClockConfig+0x44>
 8004122:	e08c      	b.n	800423e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	4d4e      	ldr	r5, [pc, #312]	; (8004260 <HAL_RCC_ClockConfig+0x180>)
 8004128:	0753      	lsls	r3, r2, #29
 800412a:	d500      	bpl.n	800412e <HAL_RCC_ClockConfig+0x4e>
 800412c:	e08f      	b.n	800424e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	0712      	lsls	r2, r2, #28
 8004130:	d506      	bpl.n	8004140 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004132:	68ea      	ldr	r2, [r5, #12]
 8004134:	6923      	ldr	r3, [r4, #16]
 8004136:	494b      	ldr	r1, [pc, #300]	; (8004264 <HAL_RCC_ClockConfig+0x184>)
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	400a      	ands	r2, r1
 800413c:	4313      	orrs	r3, r2
 800413e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004140:	f7ff fcfc 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8004144:	68eb      	ldr	r3, [r5, #12]
 8004146:	4a48      	ldr	r2, [pc, #288]	; (8004268 <HAL_RCC_ClockConfig+0x188>)
 8004148:	061b      	lsls	r3, r3, #24
 800414a:	0f1b      	lsrs	r3, r3, #28
 800414c:	5cd3      	ldrb	r3, [r2, r3]
 800414e:	4947      	ldr	r1, [pc, #284]	; (800426c <HAL_RCC_ClockConfig+0x18c>)
 8004150:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004154:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	f7fe fc96 	bl	8002a88 <HAL_InitTick>
  if(status != HAL_OK)
 800415c:	e7c5      	b.n	80040ea <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	6833      	ldr	r3, [r6, #0]
 8004160:	9a01      	ldr	r2, [sp, #4]
 8004162:	43ab      	bics	r3, r5
 8004164:	4313      	orrs	r3, r2
 8004166:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004168:	f7fe fcd0 	bl	8002b0c <HAL_GetTick>
 800416c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	6833      	ldr	r3, [r6, #0]
 8004170:	9a01      	ldr	r2, [sp, #4]
 8004172:	402b      	ands	r3, r5
 8004174:	4293      	cmp	r3, r2
 8004176:	d0c0      	beq.n	80040fa <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fe fcc8 	bl	8002b0c <HAL_GetTick>
 800417c:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCC_ClockConfig+0x194>)
 800417e:	1bc0      	subs	r0, r0, r7
 8004180:	4298      	cmp	r0, r3
 8004182:	d9f4      	bls.n	800416e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004184:	2003      	movs	r0, #3
 8004186:	e7b0      	b.n	80040ea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004188:	20f0      	movs	r0, #240	; 0xf0
 800418a:	4935      	ldr	r1, [pc, #212]	; (8004260 <HAL_RCC_ClockConfig+0x180>)
 800418c:	68cb      	ldr	r3, [r1, #12]
 800418e:	4383      	bics	r3, r0
 8004190:	68a0      	ldr	r0, [r4, #8]
 8004192:	4303      	orrs	r3, r0
 8004194:	60cb      	str	r3, [r1, #12]
 8004196:	e7b3      	b.n	8004100 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004198:	4d31      	ldr	r5, [pc, #196]	; (8004260 <HAL_RCC_ClockConfig+0x180>)
 800419a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800419c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	2a02      	cmp	r2, #2
 80041a0:	d118      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a2:	039b      	lsls	r3, r3, #14
 80041a4:	d5a0      	bpl.n	80040e8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	2103      	movs	r1, #3
 80041a8:	68eb      	ldr	r3, [r5, #12]
 80041aa:	438b      	bics	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80041b0:	f7fe fcac 	bl	8002b0c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80041b6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d118      	bne.n	80041ee <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041bc:	220c      	movs	r2, #12
 80041be:	68eb      	ldr	r3, [r5, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d09e      	beq.n	8004104 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c6:	f7fe fca1 	bl	8002b0c <HAL_GetTick>
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_RCC_ClockConfig+0x194>)
 80041cc:	1bc0      	subs	r0, r0, r7
 80041ce:	4298      	cmp	r0, r3
 80041d0:	d9f4      	bls.n	80041bc <HAL_RCC_ClockConfig+0xdc>
 80041d2:	e7d7      	b.n	8004184 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d4:	2a03      	cmp	r2, #3
 80041d6:	d102      	bne.n	80041de <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d8:	019b      	lsls	r3, r3, #6
 80041da:	d4e4      	bmi.n	80041a6 <HAL_RCC_ClockConfig+0xc6>
 80041dc:	e784      	b.n	80040e8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041de:	2a01      	cmp	r2, #1
 80041e0:	d102      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e2:	075b      	lsls	r3, r3, #29
 80041e4:	d4df      	bmi.n	80041a6 <HAL_RCC_ClockConfig+0xc6>
 80041e6:	e77f      	b.n	80040e8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041e8:	059b      	lsls	r3, r3, #22
 80041ea:	d4dc      	bmi.n	80041a6 <HAL_RCC_ClockConfig+0xc6>
 80041ec:	e77c      	b.n	80040e8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d10b      	bne.n	800420a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f2:	220c      	movs	r2, #12
 80041f4:	68eb      	ldr	r3, [r5, #12]
 80041f6:	4013      	ands	r3, r2
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d083      	beq.n	8004104 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fe fc86 	bl	8002b0c <HAL_GetTick>
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_RCC_ClockConfig+0x194>)
 8004202:	1bc0      	subs	r0, r0, r7
 8004204:	4298      	cmp	r0, r3
 8004206:	d9f4      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x112>
 8004208:	e7bc      	b.n	8004184 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800420a:	2b01      	cmp	r3, #1
 800420c:	d011      	beq.n	8004232 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800420e:	220c      	movs	r2, #12
 8004210:	68eb      	ldr	r3, [r5, #12]
 8004212:	4213      	tst	r3, r2
 8004214:	d100      	bne.n	8004218 <HAL_RCC_ClockConfig+0x138>
 8004216:	e775      	b.n	8004104 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe fc78 	bl	8002b0c <HAL_GetTick>
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_RCC_ClockConfig+0x194>)
 800421e:	1bc0      	subs	r0, r0, r7
 8004220:	4298      	cmp	r0, r3
 8004222:	d9f4      	bls.n	800420e <HAL_RCC_ClockConfig+0x12e>
 8004224:	e7ae      	b.n	8004184 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004226:	f7fe fc71 	bl	8002b0c <HAL_GetTick>
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x194>)
 800422c:	1bc0      	subs	r0, r0, r7
 800422e:	4298      	cmp	r0, r3
 8004230:	d8a8      	bhi.n	8004184 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004232:	220c      	movs	r2, #12
 8004234:	68eb      	ldr	r3, [r5, #12]
 8004236:	4013      	ands	r3, r2
 8004238:	2b04      	cmp	r3, #4
 800423a:	d1f4      	bne.n	8004226 <HAL_RCC_ClockConfig+0x146>
 800423c:	e762      	b.n	8004104 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423e:	f7fe fc65 	bl	8002b0c <HAL_GetTick>
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCC_ClockConfig+0x194>)
 8004244:	1bc0      	subs	r0, r0, r7
 8004246:	4298      	cmp	r0, r3
 8004248:	d800      	bhi.n	800424c <HAL_RCC_ClockConfig+0x16c>
 800424a:	e767      	b.n	800411c <HAL_RCC_ClockConfig+0x3c>
 800424c:	e79a      	b.n	8004184 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424e:	68eb      	ldr	r3, [r5, #12]
 8004250:	4909      	ldr	r1, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x198>)
 8004252:	400b      	ands	r3, r1
 8004254:	68e1      	ldr	r1, [r4, #12]
 8004256:	430b      	orrs	r3, r1
 8004258:	60eb      	str	r3, [r5, #12]
 800425a:	e768      	b.n	800412e <HAL_RCC_ClockConfig+0x4e>
 800425c:	40022000 	.word	0x40022000
 8004260:	40021000 	.word	0x40021000
 8004264:	ffffc7ff 	.word	0xffffc7ff
 8004268:	0800a8ad 	.word	0x0800a8ad
 800426c:	20000000 	.word	0x20000000
 8004270:	20000008 	.word	0x20000008
 8004274:	00001388 	.word	0x00001388
 8004278:	fffff8ff 	.word	0xfffff8ff

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4905      	ldr	r1, [pc, #20]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004284:	055b      	lsls	r3, r3, #21
 8004286:	0f5b      	lsrs	r3, r3, #29
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	6810      	ldr	r0, [r2, #0]
 800428c:	40d8      	lsrs	r0, r3
}
 800428e:	4770      	bx	lr
 8004290:	40021000 	.word	0x40021000
 8004294:	20000000 	.word	0x20000000
 8004298:	0800a8bd 	.word	0x0800a8bd

0800429c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800429c:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4905      	ldr	r1, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042a4:	049b      	lsls	r3, r3, #18
 80042a6:	0f5b      	lsrs	r3, r3, #29
 80042a8:	5ccb      	ldrb	r3, [r1, r3]
 80042aa:	6810      	ldr	r0, [r2, #0]
 80042ac:	40d8      	lsrs	r0, r3
}
 80042ae:	4770      	bx	lr
 80042b0:	40021000 	.word	0x40021000
 80042b4:	20000000 	.word	0x20000000
 80042b8:	0800a8bd 	.word	0x0800a8bd

080042bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042bc:	6803      	ldr	r3, [r0, #0]
{
 80042be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c2:	069b      	lsls	r3, r3, #26
 80042c4:	d53d      	bpl.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80042c8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ca:	4c5f      	ldr	r4, [pc, #380]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80042cc:	055b      	lsls	r3, r3, #21
 80042ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80042d0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d2:	421a      	tst	r2, r3
 80042d4:	d104      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042d8:	4313      	orrs	r3, r2
 80042da:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80042dc:	2301      	movs	r3, #1
 80042de:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	2780      	movs	r7, #128	; 0x80
 80042e2:	4e5a      	ldr	r6, [pc, #360]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80042e4:	007f      	lsls	r7, r7, #1
 80042e6:	6833      	ldr	r3, [r6, #0]
 80042e8:	423b      	tst	r3, r7
 80042ea:	d06c      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042ec:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80042ee:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042f0:	0001      	movs	r1, r0
 80042f2:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042f4:	4042      	eors	r2, r0
 80042f6:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042f8:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042fa:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042fc:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042fe:	4202      	tst	r2, r0
 8004300:	d000      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004302:	e071      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004304:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004306:	0010      	movs	r0, r2
 8004308:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800430a:	421a      	tst	r2, r3
 800430c:	d000      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800430e:	e074      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004310:	6869      	ldr	r1, [r5, #4]
 8004312:	23c0      	movs	r3, #192	; 0xc0
 8004314:	000a      	movs	r2, r1
 8004316:	029b      	lsls	r3, r3, #10
 8004318:	401a      	ands	r2, r3
 800431a:	429a      	cmp	r2, r3
 800431c:	d107      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	484b      	ldr	r0, [pc, #300]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004322:	4003      	ands	r3, r0
 8004324:	20c0      	movs	r0, #192	; 0xc0
 8004326:	0380      	lsls	r0, r0, #14
 8004328:	4001      	ands	r1, r0
 800432a:	430b      	orrs	r3, r1
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004330:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004332:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004334:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004336:	2b01      	cmp	r3, #1
 8004338:	d103      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800433c:	4a45      	ldr	r2, [pc, #276]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800433e:	4013      	ands	r3, r2
 8004340:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	07da      	lsls	r2, r3, #31
 8004346:	d506      	bpl.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004348:	2003      	movs	r0, #3
 800434a:	493f      	ldr	r1, [pc, #252]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800434c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800434e:	4382      	bics	r2, r0
 8004350:	68a8      	ldr	r0, [r5, #8]
 8004352:	4302      	orrs	r2, r0
 8004354:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004356:	079a      	lsls	r2, r3, #30
 8004358:	d506      	bpl.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800435a:	200c      	movs	r0, #12
 800435c:	493a      	ldr	r1, [pc, #232]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800435e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004360:	4382      	bics	r2, r0
 8004362:	68e8      	ldr	r0, [r5, #12]
 8004364:	4302      	orrs	r2, r0
 8004366:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004368:	075a      	lsls	r2, r3, #29
 800436a:	d506      	bpl.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436c:	4936      	ldr	r1, [pc, #216]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800436e:	483a      	ldr	r0, [pc, #232]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004370:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004372:	4002      	ands	r2, r0
 8004374:	6928      	ldr	r0, [r5, #16]
 8004376:	4302      	orrs	r2, r0
 8004378:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800437a:	071a      	lsls	r2, r3, #28
 800437c:	d506      	bpl.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800437e:	4932      	ldr	r1, [pc, #200]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004380:	4836      	ldr	r0, [pc, #216]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004382:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004384:	4002      	ands	r2, r0
 8004386:	6968      	ldr	r0, [r5, #20]
 8004388:	4302      	orrs	r2, r0
 800438a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800438c:	05da      	lsls	r2, r3, #23
 800438e:	d506      	bpl.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004390:	492d      	ldr	r1, [pc, #180]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004392:	4833      	ldr	r0, [pc, #204]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004394:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004396:	4002      	ands	r2, r0
 8004398:	69a8      	ldr	r0, [r5, #24]
 800439a:	4302      	orrs	r2, r0
 800439c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800439e:	065a      	lsls	r2, r3, #25
 80043a0:	d506      	bpl.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a2:	4929      	ldr	r1, [pc, #164]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80043a4:	482f      	ldr	r0, [pc, #188]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043a6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80043a8:	4002      	ands	r2, r0
 80043aa:	6a28      	ldr	r0, [r5, #32]
 80043ac:	4302      	orrs	r2, r0
 80043ae:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80043b0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	d517      	bpl.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80043b8:	492b      	ldr	r1, [pc, #172]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043bc:	400b      	ands	r3, r1
 80043be:	69e9      	ldr	r1, [r5, #28]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043c4:	e00f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c6:	6833      	ldr	r3, [r6, #0]
 80043c8:	433b      	orrs	r3, r7
 80043ca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043cc:	f7fe fb9e 	bl	8002b0c <HAL_GetTick>
 80043d0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	6833      	ldr	r3, [r6, #0]
 80043d4:	423b      	tst	r3, r7
 80043d6:	d189      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d8:	f7fe fb98 	bl	8002b0c <HAL_GetTick>
 80043dc:	9b01      	ldr	r3, [sp, #4]
 80043de:	1ac0      	subs	r0, r0, r3
 80043e0:	2864      	cmp	r0, #100	; 0x64
 80043e2:	d9f6      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 80043e4:	2003      	movs	r0, #3
}
 80043e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d000      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x132>
 80043ec:	e78a      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043ee:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043f2:	0392      	lsls	r2, r2, #14
 80043f4:	d400      	bmi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043f6:	e785      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80043f8:	e7f5      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80043fa:	4288      	cmp	r0, r1
 80043fc:	d100      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80043fe:	e787      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	069b      	lsls	r3, r3, #26
 8004404:	d400      	bmi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004406:	e783      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004408:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800440a:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800440c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800440e:	0309      	lsls	r1, r1, #12
 8004410:	4301      	orrs	r1, r0
 8004412:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004414:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004418:	4814      	ldr	r0, [pc, #80]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800441a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441c:	4001      	ands	r1, r0
 800441e:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004420:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004422:	05db      	lsls	r3, r3, #23
 8004424:	d400      	bmi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004426:	e773      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8004428:	f7fe fb70 	bl	8002b0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800442c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800442e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004430:	00bf      	lsls	r7, r7, #2
 8004432:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004434:	423b      	tst	r3, r7
 8004436:	d000      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004438:	e76a      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fe fb67 	bl	8002b0c <HAL_GetTick>
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004440:	1b80      	subs	r0, r0, r6
 8004442:	4298      	cmp	r0, r3
 8004444:	d9f5      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004446:	e7cd      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
 8004450:	ffcfffff 	.word	0xffcfffff
 8004454:	efffffff 	.word	0xefffffff
 8004458:	fffff3ff 	.word	0xfffff3ff
 800445c:	ffffcfff 	.word	0xffffcfff
 8004460:	fffcffff 	.word	0xfffcffff
 8004464:	fbffffff 	.word	0xfbffffff
 8004468:	fff3ffff 	.word	0xfff3ffff
 800446c:	fff7ffff 	.word	0xfff7ffff
 8004470:	00001388 	.word	0x00001388

08004474 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004476:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004478:	1c45      	adds	r5, r0, #1
 800447a:	7feb      	ldrb	r3, [r5, #31]
{
 800447c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800447e:	0038      	movs	r0, r7
 8004480:	2b01      	cmp	r3, #1
 8004482:	d027      	beq.n	80044d4 <HAL_RTC_DeactivateAlarm+0x60>
 8004484:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004486:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004488:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 800448a:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800448c:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
 8004492:	3a77      	subs	r2, #119	; 0x77
 8004494:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004496:	32ad      	adds	r2, #173	; 0xad
 8004498:	4291      	cmp	r1, r2
 800449a:	d12a      	bne.n	80044f2 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	4922      	ldr	r1, [pc, #136]	; (8004528 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044a0:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80044a2:	400a      	ands	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	4920      	ldr	r1, [pc, #128]	; (800452c <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044aa:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80044ac:	400a      	ands	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80044b0:	f7fe fb2c 	bl	8002b0c <HAL_GetTick>
 80044b4:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80044b6:	2201      	movs	r2, #1
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	401a      	ands	r2, r3
 80044be:	9201      	str	r2, [sp, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	4213      	tst	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c6:	22ff      	movs	r2, #255	; 0xff
 80044c8:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044ca:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80044ce:	2301      	movs	r3, #1
 80044d0:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80044d2:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80044d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044d6:	f7fe fb19 	bl	8002b0c <HAL_GetTick>
 80044da:	9b00      	ldr	r3, [sp, #0]
 80044dc:	1ac0      	subs	r0, r0, r3
 80044de:	42b8      	cmp	r0, r7
 80044e0:	d9e9      	bls.n	80044b6 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e2:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e4:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044ea:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80044ec:	9b01      	ldr	r3, [sp, #4]
 80044ee:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 80044f0:	e7f0      	b.n	80044d4 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	490e      	ldr	r1, [pc, #56]	; (8004530 <HAL_RTC_DeactivateAlarm+0xbc>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	490d      	ldr	r1, [pc, #52]	; (8004534 <HAL_RTC_DeactivateAlarm+0xc0>)
 80044fe:	400a      	ands	r2, r1
 8004500:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004502:	f7fe fb03 	bl	8002b0c <HAL_GetTick>
 8004506:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	001a      	movs	r2, r3
 800450e:	403a      	ands	r2, r7
 8004510:	9201      	str	r2, [sp, #4]
 8004512:	423b      	tst	r3, r7
 8004514:	d1d7      	bne.n	80044c6 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004516:	f7fe faf9 	bl	8002b0c <HAL_GetTick>
 800451a:	9b00      	ldr	r3, [sp, #0]
 800451c:	1ac0      	subs	r0, r0, r3
 800451e:	23fa      	movs	r3, #250	; 0xfa
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4298      	cmp	r0, r3
 8004524:	d9f0      	bls.n	8004508 <HAL_RTC_DeactivateAlarm+0x94>
 8004526:	e7dc      	b.n	80044e2 <HAL_RTC_DeactivateAlarm+0x6e>
 8004528:	fffffeff 	.word	0xfffffeff
 800452c:	ffffefff 	.word	0xffffefff
 8004530:	fffffdff 	.word	0xfffffdff
 8004534:	ffffdfff 	.word	0xffffdfff

08004538 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004538:	6803      	ldr	r3, [r0, #0]
{
 800453a:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800453c:	689a      	ldr	r2, [r3, #8]
{
 800453e:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004540:	04d2      	lsls	r2, r2, #19
 8004542:	d50a      	bpl.n	800455a <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	d507      	bpl.n	800455a <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800454a:	f004 ff97 	bl	800947c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800454e:	6821      	ldr	r1, [r4, #0]
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <HAL_RTC_AlarmIRQHandler+0x54>)
 8004552:	68ca      	ldr	r2, [r1, #12]
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	4313      	orrs	r3, r2
 8004558:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	0492      	lsls	r2, r2, #18
 8004560:	d50b      	bpl.n	800457a <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	059b      	lsls	r3, r3, #22
 8004566:	d508      	bpl.n	800457a <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004568:	0020      	movs	r0, r4
 800456a:	f000 faf9 	bl	8004b60 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RTC_AlarmIRQHandler+0x58>)
 8004572:	68ca      	ldr	r2, [r1, #12]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	4313      	orrs	r3, r2
 8004578:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800457e:	0292      	lsls	r2, r2, #10
 8004580:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004582:	2301      	movs	r3, #1
 8004584:	3402      	adds	r4, #2
 8004586:	77e3      	strb	r3, [r4, #31]
}
 8004588:	bd10      	pop	{r4, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	fffffe7f 	.word	0xfffffe7f
 8004590:	fffffd7f 	.word	0xfffffd7f
 8004594:	40010400 	.word	0x40010400

08004598 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004598:	21a0      	movs	r1, #160	; 0xa0
 800459a:	6802      	ldr	r2, [r0, #0]
{
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800459e:	68d3      	ldr	r3, [r2, #12]
{
 80045a0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045a2:	438b      	bics	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80045a6:	f7fe fab1 	bl	8002b0c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045aa:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80045ac:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045ae:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045b0:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4233      	tst	r3, r6
 80045b8:	d001      	beq.n	80045be <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80045ba:	2000      	movs	r0, #0
}
 80045bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045be:	f7fe faa5 	bl	8002b0c <HAL_GetTick>
 80045c2:	1b40      	subs	r0, r0, r5
 80045c4:	42b8      	cmp	r0, r7
 80045c6:	d9f4      	bls.n	80045b2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80045c8:	2003      	movs	r0, #3
 80045ca:	e7f7      	b.n	80045bc <HAL_RTC_WaitForSynchro+0x24>

080045cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045ce:	2640      	movs	r6, #64	; 0x40
 80045d0:	6803      	ldr	r3, [r0, #0]
{
 80045d2:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	4232      	tst	r2, r6
 80045d8:	d001      	beq.n	80045de <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80045da:	2000      	movs	r0, #0
}
 80045dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045de:	2201      	movs	r2, #1
 80045e0:	4252      	negs	r2, r2
 80045e2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80045e4:	f7fe fa92 	bl	8002b0c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045e8:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80045ea:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045ec:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	4233      	tst	r3, r6
 80045f4:	d1f1      	bne.n	80045da <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045f6:	f7fe fa89 	bl	8002b0c <HAL_GetTick>
 80045fa:	1b40      	subs	r0, r0, r5
 80045fc:	42b8      	cmp	r0, r7
 80045fe:	d9f6      	bls.n	80045ee <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004600:	2003      	movs	r0, #3
 8004602:	e7eb      	b.n	80045dc <RTC_EnterInitMode+0x10>

08004604 <HAL_RTC_Init>:
{
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004608:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800460a:	2800      	cmp	r0, #0
 800460c:	d01a      	beq.n	8004644 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800460e:	1c86      	adds	r6, r0, #2
 8004610:	7ff3      	ldrb	r3, [r6, #31]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004618:	1943      	adds	r3, r0, r5
 800461a:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 800461c:	f7fd fd72 	bl	8002104 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004620:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004622:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004624:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004626:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004628:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
 800462c:	3a77      	subs	r2, #119	; 0x77
 800462e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004630:	f7ff ffcc 	bl	80045cc <RTC_EnterInitMode>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	1e05      	subs	r5, r0, #0
 8004638:	d006      	beq.n	8004648 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800463e:	2304      	movs	r3, #4
 8004640:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8004642:	2501      	movs	r5, #1
}
 8004644:	0028      	movs	r0, r5
 8004646:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	491b      	ldr	r1, [pc, #108]	; (80046b8 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800464c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800464e:	400a      	ands	r2, r1
 8004650:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004652:	6862      	ldr	r2, [r4, #4]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	4302      	orrs	r2, r0
 8004658:	69a0      	ldr	r0, [r4, #24]
 800465a:	4302      	orrs	r2, r0
 800465c:	430a      	orrs	r2, r1
 800465e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004660:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004662:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004664:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004666:	68a2      	ldr	r2, [r4, #8]
 8004668:	6919      	ldr	r1, [r3, #16]
 800466a:	0412      	lsls	r2, r2, #16
 800466c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800466e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004670:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	438a      	bics	r2, r1
 8004676:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800467a:	397d      	subs	r1, #125	; 0x7d
 800467c:	438a      	bics	r2, r1
 800467e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004680:	69e2      	ldr	r2, [r4, #28]
 8004682:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004684:	4302      	orrs	r2, r0
 8004686:	430a      	orrs	r2, r1
 8004688:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	d40c      	bmi.n	80046aa <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004690:	0020      	movs	r0, r4
 8004692:	f7ff ff81 	bl	8004598 <HAL_RTC_WaitForSynchro>
 8004696:	2800      	cmp	r0, #0
 8004698:	d007      	beq.n	80046aa <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800469e:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046a2:	2304      	movs	r3, #4
 80046a4:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80046a6:	77e5      	strb	r5, [r4, #31]
 80046a8:	e7cb      	b.n	8004642 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046aa:	22ff      	movs	r2, #255	; 0xff
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80046b0:	2301      	movs	r3, #1
 80046b2:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80046b4:	e7c6      	b.n	8004644 <HAL_RTC_Init+0x40>
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	ff8fffbf 	.word	0xff8fffbf

080046bc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80046bc:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80046be:	2809      	cmp	r0, #9
 80046c0:	d803      	bhi.n	80046ca <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	4318      	orrs	r0, r3
 80046c6:	b2c0      	uxtb	r0, r0
}
 80046c8:	4770      	bx	lr
    Param -= 10U;
 80046ca:	380a      	subs	r0, #10
    bcdhigh++;
 80046cc:	3301      	adds	r3, #1
    Param -= 10U;
 80046ce:	b2c0      	uxtb	r0, r0
 80046d0:	e7f5      	b.n	80046be <RTC_ByteToBcd2+0x2>
	...

080046d4 <HAL_RTC_SetTime>:
{
 80046d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80046d6:	1c43      	adds	r3, r0, #1
{
 80046d8:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80046da:	9301      	str	r3, [sp, #4]
{
 80046dc:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80046de:	7fd9      	ldrb	r1, [r3, #31]
 80046e0:	2302      	movs	r3, #2
{
 80046e2:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80046e4:	001f      	movs	r7, r3
 80046e6:	2901      	cmp	r1, #1
 80046e8:	d036      	beq.n	8004758 <HAL_RTC_SetTime+0x84>
 80046ea:	2101      	movs	r1, #1
 80046ec:	1840      	adds	r0, r0, r1
 80046ee:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046f0:	18e9      	adds	r1, r5, r3
 80046f2:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046f4:	682f      	ldr	r7, [r5, #0]
 80046f6:	7820      	ldrb	r0, [r4, #0]
 80046f8:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046fa:	9102      	str	r1, [sp, #8]
 80046fc:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80046fe:	2a00      	cmp	r2, #0
 8004700:	d12d      	bne.n	800475e <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	0011      	movs	r1, r2
 8004706:	4019      	ands	r1, r3
 8004708:	421a      	tst	r2, r3
 800470a:	d100      	bne.n	800470e <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 800470c:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800470e:	f7ff ffd5 	bl	80046bc <RTC_ByteToBcd2>
 8004712:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004714:	0030      	movs	r0, r6
 8004716:	f7ff ffd1 	bl	80046bc <RTC_ByteToBcd2>
 800471a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800471c:	78a0      	ldrb	r0, [r4, #2]
 800471e:	f7ff ffcd 	bl	80046bc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004722:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004724:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004726:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004728:	4303      	orrs	r3, r0
 800472a:	0412      	lsls	r2, r2, #16
 800472c:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800472e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004730:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004732:	23ca      	movs	r3, #202	; 0xca
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	3b77      	subs	r3, #119	; 0x77
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800473a:	0028      	movs	r0, r5
 800473c:	f7ff ff46 	bl	80045cc <RTC_EnterInitMode>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	1e07      	subs	r7, r0, #0
 8004744:	d019      	beq.n	800477a <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004746:	22ff      	movs	r2, #255	; 0xff
 8004748:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800474a:	2304      	movs	r3, #4
 800474c:	9a02      	ldr	r2, [sp, #8]
 800474e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004750:	2300      	movs	r3, #0
 8004752:	9a01      	ldr	r2, [sp, #4]
 8004754:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8004756:	2701      	movs	r7, #1
}
 8004758:	0038      	movs	r0, r7
 800475a:	b005      	add	sp, #20
 800475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	0011      	movs	r1, r2
 8004762:	4019      	ands	r1, r3
 8004764:	421a      	tst	r2, r3
 8004766:	d100      	bne.n	800476a <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004768:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 800476a:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800476c:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800476e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004770:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004772:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004774:	78e3      	ldrb	r3, [r4, #3]
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	e7da      	b.n	8004730 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800477a:	4a16      	ldr	r2, [pc, #88]	; (80047d4 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800477c:	4916      	ldr	r1, [pc, #88]	; (80047d8 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800477e:	4016      	ands	r6, r2
 8004780:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004782:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004784:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004786:	400a      	ands	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800478a:	68e2      	ldr	r2, [r4, #12]
 800478c:	6899      	ldr	r1, [r3, #8]
 800478e:	4302      	orrs	r2, r0
 8004790:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004792:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004794:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	438a      	bics	r2, r1
 800479a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	069b      	lsls	r3, r3, #26
 80047a0:	d40d      	bmi.n	80047be <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047a2:	0028      	movs	r0, r5
 80047a4:	f7ff fef8 	bl	8004598 <HAL_RTC_WaitForSynchro>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d008      	beq.n	80047be <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047b2:	2304      	movs	r3, #4
 80047b4:	9a02      	ldr	r2, [sp, #8]
 80047b6:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	77df      	strb	r7, [r3, #31]
 80047bc:	e7cb      	b.n	8004756 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047be:	22ff      	movs	r2, #255	; 0xff
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80047c4:	2301      	movs	r3, #1
 80047c6:	9a02      	ldr	r2, [sp, #8]
 80047c8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80047ca:	2300      	movs	r3, #0
 80047cc:	9a01      	ldr	r2, [sp, #4]
 80047ce:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 80047d0:	e7c2      	b.n	8004758 <HAL_RTC_SetTime+0x84>
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	007f7f7f 	.word	0x007f7f7f
 80047d8:	fffbffff 	.word	0xfffbffff

080047dc <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 80047dc:	2302      	movs	r3, #2
{
 80047de:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80047e0:	1c47      	adds	r7, r0, #1
{
 80047e2:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80047e4:	7ff9      	ldrb	r1, [r7, #31]
{
 80047e6:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80047e8:	001d      	movs	r5, r3
{
 80047ea:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80047ec:	2901      	cmp	r1, #1
 80047ee:	d036      	beq.n	800485e <HAL_RTC_SetDate+0x82>
 80047f0:	2101      	movs	r1, #1
 80047f2:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047f4:	18c1      	adds	r1, r0, r3
 80047f6:	77cb      	strb	r3, [r1, #31]
 80047f8:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 80047fa:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80047fc:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 80047fe:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004800:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004802:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004804:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004806:	2a00      	cmp	r2, #0
 8004808:	d14c      	bne.n	80048a4 <HAL_RTC_SetDate+0xc8>
 800480a:	3210      	adds	r2, #16
 800480c:	4213      	tst	r3, r2
 800480e:	d002      	beq.n	8004816 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004810:	4393      	bics	r3, r2
 8004812:	330a      	adds	r3, #10
 8004814:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004816:	f7ff ff51 	bl	80046bc <RTC_ByteToBcd2>
 800481a:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800481c:	7870      	ldrb	r0, [r6, #1]
 800481e:	f7ff ff4d 	bl	80046bc <RTC_ByteToBcd2>
 8004822:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004824:	0028      	movs	r0, r5
 8004826:	f7ff ff49 	bl	80046bc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	9a02      	ldr	r2, [sp, #8]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	4310      	orrs	r0, r2
 8004832:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004834:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004836:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004838:	22ca      	movs	r2, #202	; 0xca
 800483a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800483c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
 8004840:	3a77      	subs	r2, #119	; 0x77
 8004842:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004844:	f7ff fec2 	bl	80045cc <RTC_EnterInitMode>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	1e05      	subs	r5, r0, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800484e:	22ff      	movs	r2, #255	; 0xff
 8004850:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004852:	2304      	movs	r3, #4
 8004854:	9a01      	ldr	r2, [sp, #4]
 8004856:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800485c:	2501      	movs	r5, #1
}
 800485e:	0028      	movs	r0, r5
 8004860:	b005      	add	sp, #20
 8004862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004864:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <HAL_RTC_SetDate+0xd8>)
 8004868:	4032      	ands	r2, r6
 800486a:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	438a      	bics	r2, r1
 8004870:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	069b      	lsls	r3, r3, #26
 8004876:	d40c      	bmi.n	8004892 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004878:	0020      	movs	r0, r4
 800487a:	f7ff fe8d 	bl	8004598 <HAL_RTC_WaitForSynchro>
 800487e:	2800      	cmp	r0, #0
 8004880:	d007      	beq.n	8004892 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004888:	2304      	movs	r3, #4
 800488a:	9a01      	ldr	r2, [sp, #4]
 800488c:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800488e:	77fd      	strb	r5, [r7, #31]
 8004890:	e7e4      	b.n	800485c <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004898:	2301      	movs	r3, #1
 800489a:	9a01      	ldr	r2, [sp, #4]
 800489c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800489e:	2300      	movs	r3, #0
 80048a0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80048a2:	e7dc      	b.n	800485e <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80048a4:	9a02      	ldr	r2, [sp, #8]
 80048a6:	0400      	lsls	r0, r0, #16
 80048a8:	4310      	orrs	r0, r2
 80048aa:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->Month) << 8U) | \
 80048ac:	021e      	lsls	r6, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80048ae:	4306      	orrs	r6, r0
 80048b0:	e7c2      	b.n	8004838 <HAL_RTC_SetDate+0x5c>
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	00ffff3f 	.word	0x00ffff3f

080048b8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80048b8:	2302      	movs	r3, #2
{
 80048ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048bc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80048be:	1c41      	adds	r1, r0, #1
 80048c0:	7fce      	ldrb	r6, [r1, #31]
{
 80048c2:	0004      	movs	r4, r0
 80048c4:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80048c6:	0018      	movs	r0, r3
 80048c8:	2e01      	cmp	r6, #1
 80048ca:	d100      	bne.n	80048ce <HAL_RTC_SetAlarm_IT+0x16>
 80048cc:	e097      	b.n	80049fe <HAL_RTC_SetAlarm_IT+0x146>
 80048ce:	3801      	subs	r0, #1
 80048d0:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d2:	18e1      	adds	r1, r4, r3
 80048d4:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80048d6:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048d8:	6826      	ldr	r6, [r4, #0]
 80048da:	9101      	str	r1, [sp, #4]
 80048dc:	7828      	ldrb	r0, [r5, #0]
 80048de:	78af      	ldrb	r7, [r5, #2]
 80048e0:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80048e2:	2a00      	cmp	r2, #0
 80048e4:	d165      	bne.n	80049b2 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048e6:	68b2      	ldr	r2, [r6, #8]
 80048e8:	0011      	movs	r1, r2
 80048ea:	4019      	ands	r1, r3
 80048ec:	421a      	tst	r2, r3
 80048ee:	d100      	bne.n	80048f2 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048f0:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80048f2:	f7ff fee3 	bl	80046bc <RTC_ByteToBcd2>
 80048f6:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048f8:	9801      	ldr	r0, [sp, #4]
 80048fa:	f7ff fedf 	bl	80046bc <RTC_ByteToBcd2>
 80048fe:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004900:	0038      	movs	r0, r7
 8004902:	f7ff fedb 	bl	80046bc <RTC_ByteToBcd2>
 8004906:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004908:	1c6b      	adds	r3, r5, #1
 800490a:	7fd8      	ldrb	r0, [r3, #31]
 800490c:	f7ff fed6 	bl	80046bc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004910:	696a      	ldr	r2, [r5, #20]
 8004912:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004914:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004916:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004918:	78ea      	ldrb	r2, [r5, #3]
 800491a:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800491c:	4313      	orrs	r3, r2
 800491e:	431f      	orrs	r7, r3
 8004920:	9b02      	ldr	r3, [sp, #8]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800492a:	431f      	orrs	r7, r3
 800492c:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800492e:	69ab      	ldr	r3, [r5, #24]
 8004930:	686a      	ldr	r2, [r5, #4]
 8004932:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004934:	23ca      	movs	r3, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004936:	9201      	str	r2, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004938:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800493a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800493c:	3b77      	subs	r3, #119	; 0x77
 800493e:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004940:	33ad      	adds	r3, #173	; 0xad
 8004942:	429a      	cmp	r2, r3
 8004944:	d15d      	bne.n	8004a02 <HAL_RTC_SetAlarm_IT+0x14a>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004946:	68b3      	ldr	r3, [r6, #8]
 8004948:	4a42      	ldr	r2, [pc, #264]	; (8004a54 <HAL_RTC_SetAlarm_IT+0x19c>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800494a:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800494c:	4013      	ands	r3, r2
 800494e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004950:	68f2      	ldr	r2, [r6, #12]
 8004952:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	4313      	orrs	r3, r2
 8004958:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800495a:	f7fe f8d7 	bl	8002b0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800495e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004960:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004962:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	0011      	movs	r1, r2
 800496a:	4029      	ands	r1, r5
 800496c:	9103      	str	r1, [sp, #12]
 800496e:	422a      	tst	r2, r5
 8004970:	d036      	beq.n	80049e0 <HAL_RTC_SetAlarm_IT+0x128>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004972:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004974:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004976:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	6899      	ldr	r1, [r3, #8]
 800497c:	0052      	lsls	r2, r2, #1
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800498c:	2280      	movs	r2, #128	; 0x80
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x1a4>)
 8004990:	0292      	lsls	r2, r2, #10
 8004992:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8004994:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004996:	4311      	orrs	r1, r2
 8004998:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800499a:	6899      	ldr	r1, [r3, #8]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80049a6:	3afe      	subs	r2, #254	; 0xfe
 80049a8:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80049aa:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80049ac:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80049ae:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80049b0:	e025      	b.n	80049fe <HAL_RTC_SetAlarm_IT+0x146>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049b2:	68b2      	ldr	r2, [r6, #8]
 80049b4:	0011      	movs	r1, r2
 80049b6:	4019      	ands	r1, r3
 80049b8:	421a      	tst	r2, r3
 80049ba:	d100      	bne.n	80049be <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049bc:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049be:	69eb      	ldr	r3, [r5, #28]
 80049c0:	696a      	ldr	r2, [r5, #20]
 80049c2:	0400      	lsls	r0, r0, #16
 80049c4:	4313      	orrs	r3, r2
 80049c6:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80049c8:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049ca:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80049cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049ce:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80049d0:	78eb      	ldrb	r3, [r5, #3]
 80049d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049d4:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80049d6:	1c6b      	adds	r3, r5, #1
 80049d8:	7fdb      	ldrb	r3, [r3, #31]
 80049da:	061b      	lsls	r3, r3, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80049dc:	431f      	orrs	r7, r3
 80049de:	e7a6      	b.n	800492e <HAL_RTC_SetAlarm_IT+0x76>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049e0:	f7fe f894 	bl	8002b0c <HAL_GetTick>
 80049e4:	9b02      	ldr	r3, [sp, #8]
 80049e6:	1ac0      	subs	r0, r0, r3
 80049e8:	42b0      	cmp	r0, r6
 80049ea:	d9bb      	bls.n	8004964 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ec:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ee:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049f4:	1ca3      	adds	r3, r4, #2
 80049f6:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	3401      	adds	r4, #1
 80049fc:	77e3      	strb	r3, [r4, #31]
}
 80049fe:	b005      	add	sp, #20
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004a02:	68b3      	ldr	r3, [r6, #8]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_RTC_SetAlarm_IT+0x1a8>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a06:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004a0c:	68f2      	ldr	r2, [r6, #12]
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_RTC_SetAlarm_IT+0x1ac>)
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004a16:	f7fe f879 	bl	8002b0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a1a:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004a1c:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a1e:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	0011      	movs	r1, r2
 8004a26:	4029      	ands	r1, r5
 8004a28:	9103      	str	r1, [sp, #12]
 8004a2a:	422a      	tst	r2, r5
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RTC_SetAlarm_IT+0x18e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a2e:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004a30:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a32:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	0192      	lsls	r2, r2, #6
 8004a44:	e7a0      	b.n	8004988 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a46:	f7fe f861 	bl	8002b0c <HAL_GetTick>
 8004a4a:	9b02      	ldr	r3, [sp, #8]
 8004a4c:	1ac0      	subs	r0, r0, r3
 8004a4e:	42b0      	cmp	r0, r6
 8004a50:	d9e6      	bls.n	8004a20 <HAL_RTC_SetAlarm_IT+0x168>
 8004a52:	e7cb      	b.n	80049ec <HAL_RTC_SetAlarm_IT+0x134>
 8004a54:	fffffeff 	.word	0xfffffeff
 8004a58:	fffffe7f 	.word	0xfffffe7f
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	fffffdff 	.word	0xfffffdff
 8004a64:	fffffd7f 	.word	0xfffffd7f

08004a68 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004a68:	0902      	lsrs	r2, r0, #4
{
 8004a6a:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004a6c:	200a      	movs	r0, #10
 8004a6e:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004a70:	220f      	movs	r2, #15
 8004a72:	4013      	ands	r3, r2
 8004a74:	18c0      	adds	r0, r0, r3
 8004a76:	b2c0      	uxtb	r0, r0
}
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_RTC_GetTime>:
{
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a80:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a82:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004a86:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a88:	690b      	ldr	r3, [r1, #16]
 8004a8a:	045b      	lsls	r3, r3, #17
 8004a8c:	0c5b      	lsrs	r3, r3, #17
 8004a8e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a90:	680b      	ldr	r3, [r1, #0]
 8004a92:	490e      	ldr	r1, [pc, #56]	; (8004acc <HAL_RTC_GetTime+0x50>)
 8004a94:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a96:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004a98:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004a9a:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004a9c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a9e:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004aa0:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004aa2:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004aa4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004aa6:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004aa8:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004aaa:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d10a      	bne.n	8004ac6 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ab0:	f7ff ffda 	bl	8004a68 <RTC_Bcd2ToByte>
 8004ab4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ab6:	0030      	movs	r0, r6
 8004ab8:	f7ff ffd6 	bl	8004a68 <RTC_Bcd2ToByte>
 8004abc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004abe:	0028      	movs	r0, r5
 8004ac0:	f7ff ffd2 	bl	8004a68 <RTC_Bcd2ToByte>
 8004ac4:	70a0      	strb	r0, [r4, #2]
}
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	007f7f7f 	.word	0x007f7f7f

08004ad0 <HAL_RTC_GetDate>:
{
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ad4:	6803      	ldr	r3, [r0, #0]
 8004ad6:	490e      	ldr	r1, [pc, #56]	; (8004b10 <HAL_RTC_GetDate+0x40>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004adc:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ade:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ae0:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ae2:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ae4:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ae6:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004ae8:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004aea:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004aec:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004aee:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	d10a      	bne.n	8004b0a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004af4:	f7ff ffb8 	bl	8004a68 <RTC_Bcd2ToByte>
 8004af8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004afa:	0028      	movs	r0, r5
 8004afc:	f7ff ffb4 	bl	8004a68 <RTC_Bcd2ToByte>
 8004b00:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b02:	0030      	movs	r0, r6
 8004b04:	f7ff ffb0 	bl	8004a68 <RTC_Bcd2ToByte>
 8004b08:	70a0      	strb	r0, [r4, #2]
}
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	00ffff3f 	.word	0x00ffff3f

08004b14 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b14:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004b16:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b18:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004b1a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004b1c:	600a      	str	r2, [r1, #0]
}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b20:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004b22:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004b24:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004b26:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004b28:	6808      	ldr	r0, [r1, #0]
}
 8004b2a:	4770      	bx	lr

08004b2c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b2c:	2202      	movs	r2, #2
{
 8004b2e:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004b30:	1c41      	adds	r1, r0, #1
 8004b32:	7fcc      	ldrb	r4, [r1, #31]
{
 8004b34:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8004b36:	0010      	movs	r0, r2
 8004b38:	2c01      	cmp	r4, #1
 8004b3a:	d010      	beq.n	8004b5e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b3c:	1898      	adds	r0, r3, r2
 8004b3e:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	32c8      	adds	r2, #200	; 0xc8
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
 8004b46:	3a77      	subs	r2, #119	; 0x77
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004b4a:	689c      	ldr	r4, [r3, #8]
 8004b4c:	3a33      	subs	r2, #51	; 0x33
 8004b4e:	4322      	orrs	r2, r4
 8004b50:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b56:	2301      	movs	r3, #1
 8004b58:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004b5e:	bd10      	pop	{r4, pc}

08004b60 <HAL_RTCEx_AlarmBEventCallback>:
 8004b60:	4770      	bx	lr
	...

08004b64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b66:	001f      	movs	r7, r3
 8004b68:	b085      	sub	sp, #20
 8004b6a:	000e      	movs	r6, r1
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b70:	f7fd ffcc 	bl	8002b0c <HAL_GetTick>
 8004b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b76:	19dd      	adds	r5, r3, r7
 8004b78:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004b7a:	f7fd ffc7 	bl	8002b0c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7e:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 8004b80:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	015b      	lsls	r3, r3, #5
 8004b86:	0d1b      	lsrs	r3, r3, #20
 8004b88:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004b8c:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8e:	6893      	ldr	r3, [r2, #8]
 8004b90:	4033      	ands	r3, r6
 8004b92:	1b9b      	subs	r3, r3, r6
 8004b94:	4259      	negs	r1, r3
 8004b96:	414b      	adcs	r3, r1
 8004b98:	9901      	ldr	r1, [sp, #4]
 8004b9a:	428b      	cmp	r3, r1
 8004b9c:	d101      	bne.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e032      	b.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	1c7b      	adds	r3, r7, #1
 8004ba4:	d0f3      	beq.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ba6:	f7fd ffb1 	bl	8002b0c <HAL_GetTick>
 8004baa:	9b00      	ldr	r3, [sp, #0]
 8004bac:	1ac0      	subs	r0, r0, r3
 8004bae:	42a8      	cmp	r0, r5
 8004bb0:	d32c      	bcc.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bb2:	21e0      	movs	r1, #224	; 0xe0
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	438a      	bics	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	2282      	movs	r2, #130	; 0x82
 8004bbe:	6861      	ldr	r1, [r4, #4]
 8004bc0:	0052      	lsls	r2, r2, #1
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	d10c      	bne.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x7c>
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	68a2      	ldr	r2, [r4, #8]
 8004bca:	0209      	lsls	r1, r1, #8
 8004bcc:	428a      	cmp	r2, r1
 8004bce:	d003      	beq.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	00c9      	lsls	r1, r1, #3
 8004bd4:	428a      	cmp	r2, r1
 8004bd6:	d103      	bne.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	438a      	bics	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004be4:	0189      	lsls	r1, r1, #6
 8004be6:	428a      	cmp	r2, r1
 8004be8:	d106      	bne.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	480c      	ldr	r0, [pc, #48]	; (8004c20 <SPI_WaitFlagStateUntilTimeout+0xbc>)
 8004bee:	4001      	ands	r1, r0
 8004bf0:	6019      	str	r1, [r3, #0]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004bf8:	0023      	movs	r3, r4
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	3351      	adds	r3, #81	; 0x51
 8004bfe:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004c00:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004c04:	3450      	adds	r4, #80	; 0x50
 8004c06:	7023      	strb	r3, [r4, #0]
}
 8004c08:	b005      	add	sp, #20
 8004c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004c0c:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004c0e:	1e5a      	subs	r2, r3, #1
 8004c10:	4193      	sbcs	r3, r2
 8004c12:	425b      	negs	r3, r3
 8004c14:	401d      	ands	r5, r3
      count--;
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	e7b6      	b.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0x26>
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	ffffdfff 	.word	0xffffdfff

08004c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <SPI_EndRxTxTransaction+0x60>)
{
 8004c28:	0004      	movs	r4, r0
 8004c2a:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	4916      	ldr	r1, [pc, #88]	; (8004c88 <SPI_EndRxTxTransaction+0x64>)
{
 8004c30:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c32:	f7fb fa8f 	bl	8000154 <__udivsi3>
 8004c36:	23fa      	movs	r3, #250	; 0xfa
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4343      	muls	r3, r0
 8004c3c:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3e:	2382      	movs	r3, #130	; 0x82
 8004c40:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c42:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4299      	cmp	r1, r3
 8004c48:	d10f      	bne.n	8004c6a <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4a:	002b      	movs	r3, r5
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	0020      	movs	r0, r4
 8004c52:	9600      	str	r6, [sp, #0]
 8004c54:	f7ff ff86 	bl	8004b64 <SPI_WaitFlagStateUntilTimeout>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d010      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5c:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004c5e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c62:	4313      	orrs	r3, r2
 8004c64:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004c66:	b004      	add	sp, #16
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x5a>
      count--;
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4213      	tst	r3, r2
 8004c7c:	d1f5      	bne.n	8004c6a <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e7f1      	b.n	8004c66 <SPI_EndRxTxTransaction+0x42>
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	20000000 	.word	0x20000000
 8004c88:	016e3600 	.word	0x016e3600

08004c8c <HAL_SPI_MspInit>:
}
 8004c8c:	4770      	bx	lr
	...

08004c90 <HAL_SPI_Init>:
{
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004c94:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004c96:	2c00      	cmp	r4, #0
 8004c98:	d05a      	beq.n	8004d50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d158      	bne.n	8004d52 <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca0:	2282      	movs	r2, #130	; 0x82
 8004ca2:	6861      	ldr	r1, [r4, #4]
 8004ca4:	0052      	lsls	r2, r2, #1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	d000      	beq.n	8004cac <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004caa:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cac:	0025      	movs	r5, r4
 8004cae:	3551      	adds	r5, #81	; 0x51
 8004cb0:	782b      	ldrb	r3, [r5, #0]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8004cb8:	0023      	movs	r3, r4
 8004cba:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8004cbc:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004cbe:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004cc0:	f7ff ffe4 	bl	8004c8c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cc4:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 8004cc6:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc8:	2682      	movs	r6, #130	; 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cca:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ccc:	2784      	movs	r7, #132	; 0x84
  __HAL_SPI_DISABLE(hspi);
 8004cce:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd0:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 8004cd2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd4:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 8004cd6:	4393      	bics	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	69a2      	ldr	r2, [r4, #24]
 8004cde:	4033      	ands	r3, r6
 8004ce0:	68a6      	ldr	r6, [r4, #8]
 8004ce2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ce4:	403e      	ands	r6, r7
 8004ce6:	2780      	movs	r7, #128	; 0x80
 8004ce8:	4333      	orrs	r3, r6
 8004cea:	68e6      	ldr	r6, [r4, #12]
 8004cec:	013f      	lsls	r7, r7, #4
 8004cee:	403e      	ands	r6, r7
 8004cf0:	2702      	movs	r7, #2
 8004cf2:	4333      	orrs	r3, r6
 8004cf4:	6926      	ldr	r6, [r4, #16]
 8004cf6:	403e      	ands	r6, r7
 8004cf8:	4333      	orrs	r3, r6
 8004cfa:	6966      	ldr	r6, [r4, #20]
 8004cfc:	3f01      	subs	r7, #1
 8004cfe:	403e      	ands	r6, r7
 8004d00:	4333      	orrs	r3, r6
 8004d02:	2680      	movs	r6, #128	; 0x80
 8004d04:	00b6      	lsls	r6, r6, #2
 8004d06:	4016      	ands	r6, r2
 8004d08:	4333      	orrs	r3, r6
 8004d0a:	69e6      	ldr	r6, [r4, #28]
 8004d0c:	3737      	adds	r7, #55	; 0x37
 8004d0e:	403e      	ands	r6, r7
 8004d10:	4333      	orrs	r3, r6
 8004d12:	6a26      	ldr	r6, [r4, #32]
 8004d14:	3748      	adds	r7, #72	; 0x48
 8004d16:	403e      	ands	r6, r7
 8004d18:	4333      	orrs	r3, r6
 8004d1a:	2680      	movs	r6, #128	; 0x80
 8004d1c:	0007      	movs	r7, r0
 8004d1e:	01b6      	lsls	r6, r6, #6
 8004d20:	4037      	ands	r7, r6
 8004d22:	433b      	orrs	r3, r7
 8004d24:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d26:	2304      	movs	r3, #4
 8004d28:	2710      	movs	r7, #16
 8004d2a:	0c12      	lsrs	r2, r2, #16
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d30:	403b      	ands	r3, r7
 8004d32:	431a      	orrs	r2, r3
 8004d34:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d36:	42b0      	cmp	r0, r6
 8004d38:	d102      	bne.n	8004d40 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d40:	69cb      	ldr	r3, [r1, #28]
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d44:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d46:	4013      	ands	r3, r2
 8004d48:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d4c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4e:	702b      	strb	r3, [r5, #0]
}
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d52:	2300      	movs	r3, #0
 8004d54:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d56:	6163      	str	r3, [r4, #20]
 8004d58:	e7a8      	b.n	8004cac <HAL_SPI_Init+0x1c>
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	fffff7ff 	.word	0xfffff7ff

08004d60 <HAL_SPI_TransmitReceive>:
{
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8004d64:	0003      	movs	r3, r0
{
 8004d66:	b087      	sub	sp, #28
 8004d68:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8004d6a:	3350      	adds	r3, #80	; 0x50
 8004d6c:	781a      	ldrb	r2, [r3, #0]
{
 8004d6e:	0004      	movs	r4, r0
 8004d70:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 8004d72:	2502      	movs	r5, #2
 8004d74:	2a01      	cmp	r2, #1
 8004d76:	d100      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x1a>
 8004d78:	e0a8      	b.n	8004ecc <HAL_SPI_TransmitReceive+0x16c>
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004d7e:	f7fd fec5 	bl	8002b0c <HAL_GetTick>
  tmp_state           = hspi->State;
 8004d82:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004d84:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8004d86:	3351      	adds	r3, #81	; 0x51
 8004d88:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004d8a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004d8c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d00b      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x4a>
 8004d92:	2382      	movs	r3, #130	; 0x82
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4299      	cmp	r1, r3
 8004d98:	d000      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x3c>
 8004d9a:	e090      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d9c:	68a3      	ldr	r3, [r4, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d000      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x44>
 8004da2:	e08c      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
 8004da4:	2a04      	cmp	r2, #4
 8004da6:	d000      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x4a>
 8004da8:	e089      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 8004daa:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dac:	2e00      	cmp	r6, #0
 8004dae:	d100      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x52>
 8004db0:	e085      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x5a>
 8004db8:	e081      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
 8004dba:	2f00      	cmp	r7, #0
 8004dbc:	d100      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x60>
 8004dbe:	e07e      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dc0:	0023      	movs	r3, r4
 8004dc2:	3351      	adds	r3, #81	; 0x51
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	2a04      	cmp	r2, #4
 8004dc8:	d001      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dca:	2205      	movs	r2, #5
 8004dcc:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dce:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd0:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dd2:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dd6:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8004dda:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ddc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dde:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8004de0:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 8004de2:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004de4:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004de6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004de8:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dea:	0180      	lsls	r0, r0, #6
 8004dec:	4282      	cmp	r2, r0
 8004dee:	d106      	bne.n	8004dfe <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	4d82      	ldr	r5, [pc, #520]	; (8004ffc <HAL_SPI_TransmitReceive+0x29c>)
 8004df4:	4028      	ands	r0, r5
 8004df6:	6018      	str	r0, [r3, #0]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	4302      	orrs	r2, r0
 8004dfc:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	4210      	tst	r0, r2
 8004e04:	d102      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	4302      	orrs	r2, r0
 8004e0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	68e0      	ldr	r0, [r4, #12]
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	4290      	cmp	r0, r2
 8004e14:	d000      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0xb8>
 8004e16:	e072      	b.n	8004efe <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0xc0>
 8004e1c:	2f01      	cmp	r7, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e20:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e22:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e24:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004e26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e28:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e30:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 8004e32:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e34:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e36:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x110>
 8004e3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d115      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e48:	019b      	lsls	r3, r3, #6
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d000      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0xf0>
 8004e4e:	e0b1      	b.n	8004fb4 <HAL_SPI_TransmitReceive+0x254>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004e50:	2201      	movs	r2, #1
 8004e52:	9b02      	ldr	r3, [sp, #8]
 8004e54:	0011      	movs	r1, r2
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	0020      	movs	r0, r4
 8004e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e5c:	f7ff fe82 	bl	8004b64 <SPI_WaitFlagStateUntilTimeout>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d100      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x106>
 8004e64:	e0a4      	b.n	8004fb0 <HAL_SPI_TransmitReceive+0x250>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e66:	2302      	movs	r3, #2
 8004e68:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	6563      	str	r3, [r4, #84]	; 0x54
 8004e6e:	e025      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	4232      	tst	r2, r6
 8004e76:	d005      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x124>
 8004e78:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x124>
 8004e7e:	2d01      	cmp	r5, #1
 8004e80:	d027      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x172>
{
 8004e82:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e84:	6898      	ldr	r0, [r3, #8]
 8004e86:	2101      	movs	r1, #1
 8004e88:	0002      	movs	r2, r0
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	4208      	tst	r0, r1
 8004e8e:	d00c      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x14a>
 8004e90:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004e92:	2900      	cmp	r1, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 8004e96:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e98:	68d9      	ldr	r1, [r3, #12]
 8004e9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e9c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eaa:	f7fd fe2f 	bl	8002b0c <HAL_GetTick>
 8004eae:	9b02      	ldr	r3, [sp, #8]
 8004eb0:	1ac0      	subs	r0, r0, r3
 8004eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eb4:	4298      	cmp	r0, r3
 8004eb6:	d3bf      	bcc.n	8004e38 <HAL_SPI_TransmitReceive+0xd8>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	d0bd      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8004ebc:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004ebe:	0023      	movs	r3, r4
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	3351      	adds	r3, #81	; 0x51
 8004ec4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	3450      	adds	r4, #80	; 0x50
 8004eca:	7023      	strb	r3, [r4, #0]
}
 8004ecc:	0028      	movs	r0, r5
 8004ece:	b007      	add	sp, #28
 8004ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ed4:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed6:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed8:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eda:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004edc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004ede:	3a01      	subs	r2, #1
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004ee4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004ee6:	b295      	uxth	r5, r2
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	d1ca      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x122>
 8004eec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004eee:	42ba      	cmp	r2, r7
 8004ef0:	d1c7      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004ef2:	2280      	movs	r2, #128	; 0x80
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	0152      	lsls	r2, r2, #5
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e7c2      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efe:	2900      	cmp	r1, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x1a6>
 8004f02:	2f01      	cmp	r7, #1
 8004f04:	d108      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f06:	7832      	ldrb	r2, [r6, #0]
 8004f08:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f18:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 8004f1a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f1c:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f1e:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x1ce>
 8004f26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d100      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x1ce>
 8004f2c:	e78a      	b.n	8004e44 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	4232      	tst	r2, r6
 8004f34:	d005      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x1e2>
 8004f36:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x1e2>
 8004f3c:	2d01      	cmp	r5, #1
 8004f3e:	d01f      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 8004f40:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	2101      	movs	r1, #1
 8004f46:	6898      	ldr	r0, [r3, #8]
 8004f48:	0002      	movs	r2, r0
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	4208      	tst	r0, r1
 8004f4e:	d00d      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x20c>
 8004f50:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004f52:	2900      	cmp	r1, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x20c>
        txallowed = 1U;
 8004f56:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f5c:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f60:	3301      	adds	r3, #1
 8004f62:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f6c:	f7fd fdce 	bl	8002b0c <HAL_GetTick>
 8004f70:	9b02      	ldr	r3, [sp, #8]
 8004f72:	1ac0      	subs	r0, r0, r3
 8004f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f76:	4298      	cmp	r0, r3
 8004f78:	d3d2      	bcc.n	8004f20 <HAL_SPI_TransmitReceive+0x1c0>
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	d0d0      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x1c0>
 8004f7e:	e79d      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x15c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f82:	7812      	ldrb	r2, [r2, #0]
 8004f84:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f88:	3301      	adds	r3, #1
 8004f8a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f96:	b29d      	uxth	r5, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1d1      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x1e0>
 8004f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f9e:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004fa0:	42bb      	cmp	r3, r7
 8004fa2:	d1cd      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	6811      	ldr	r1, [r2, #0]
 8004fa8:	015b      	lsls	r3, r3, #5
 8004faa:	430b      	orrs	r3, r1
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e7c8      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x1e2>
    READ_REG(hspi->Instance->DR);
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004fb4:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fb6:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004fb8:	6893      	ldr	r3, [r2, #8]
 8004fba:	06db      	lsls	r3, r3, #27
 8004fbc:	d506      	bpl.n	8004fcc <HAL_SPI_TransmitReceive+0x26c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fc2:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_SPI_TransmitReceive+0x2a0>)
 8004fca:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	0020      	movs	r0, r4
 8004fce:	9a02      	ldr	r2, [sp, #8]
 8004fd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fd2:	f7ff fe27 	bl	8004c24 <SPI_EndRxTxTransaction>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0x282>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fda:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004fdc:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fde:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8004fe0:	e76d      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d000      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x28a>
 8004fe8:	e769      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fea:	9305      	str	r3, [sp, #20]
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	9205      	str	r2, [sp, #20]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	9b05      	ldr	r3, [sp, #20]
 8004ff8:	e761      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x15e>
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	ffffdfff 	.word	0xffffdfff
 8005000:	0000ffef 	.word	0x0000ffef

08005004 <HAL_SPI_GetState>:
  return hspi->State;
 8005004:	3051      	adds	r0, #81	; 0x51
 8005006:	7800      	ldrb	r0, [r0, #0]
 8005008:	b2c0      	uxtb	r0, r0
}
 800500a:	4770      	bx	lr

0800500c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500c:	6803      	ldr	r3, [r0, #0]
 800500e:	490b      	ldr	r1, [pc, #44]	; (800503c <UART_EndRxTransfer+0x30>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	400a      	ands	r2, r1
 8005014:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	3123      	adds	r1, #35	; 0x23
 800501a:	31ff      	adds	r1, #255	; 0xff
 800501c:	438a      	bics	r2, r1
 800501e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005020:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005022:	428a      	cmp	r2, r1
 8005024:	d103      	bne.n	800502e <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	310f      	adds	r1, #15
 800502a:	438a      	bics	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800502e:	2320      	movs	r3, #32
 8005030:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005032:	2300      	movs	r3, #0
 8005034:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005036:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005038:	4770      	bx	lr
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	fffffedf 	.word	0xfffffedf

08005040 <HAL_UART_DeInit>:
{
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005044:	2001      	movs	r0, #1
  if (huart == NULL)
 8005046:	2c00      	cmp	r4, #0
 8005048:	d014      	beq.n	8005074 <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 800504a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 800504c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800504e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4382      	bics	r2, r0
 8005056:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8005058:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0U;
 800505a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800505c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800505e:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8005060:	f003 ff1e 	bl	8008ea0 <HAL_UART_MspDeInit>
  return HAL_OK;
 8005064:	0028      	movs	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005066:	1d23      	adds	r3, r4, #4
 8005068:	67dd      	str	r5, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800506a:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800506c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506e:	6625      	str	r5, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005070:	3474      	adds	r4, #116	; 0x74
 8005072:	7025      	strb	r5, [r4, #0]
}
 8005074:	bd70      	pop	{r4, r5, r6, pc}

08005076 <HAL_UART_RxCpltCallback>:
 8005076:	4770      	bx	lr

08005078 <HAL_UART_ErrorCallback>:
 8005078:	4770      	bx	lr

0800507a <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800507a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	0002      	movs	r2, r0
{
 8005080:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005082:	325a      	adds	r2, #90	; 0x5a
 8005084:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005086:	3a08      	subs	r2, #8
 8005088:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800508a:	f7ff fff5 	bl	8005078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508e:	bd10      	pop	{r4, pc}

08005090 <HAL_UARTEx_RxEventCallback>:
}
 8005090:	4770      	bx	lr
	...

08005094 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005094:	6803      	ldr	r3, [r0, #0]
{
 8005096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005098:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800509a:	4a85      	ldr	r2, [pc, #532]	; (80052b0 <HAL_UART_IRQHandler+0x21c>)
{
 800509c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800509e:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a0:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80050a2:	4211      	tst	r1, r2
 80050a4:	d10b      	bne.n	80050be <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050a6:	2220      	movs	r2, #32
 80050a8:	4211      	tst	r1, r2
 80050aa:	d100      	bne.n	80050ae <HAL_UART_IRQHandler+0x1a>
 80050ac:	e076      	b.n	800519c <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050ae:	4210      	tst	r0, r2
 80050b0:	d100      	bne.n	80050b4 <HAL_UART_IRQHandler+0x20>
 80050b2:	e073      	b.n	800519c <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80050b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 80050b6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d165      	bne.n	8005188 <HAL_UART_IRQHandler+0xf4>
 80050bc:	e065      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050be:	2201      	movs	r2, #1
 80050c0:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050c2:	4d7c      	ldr	r5, [pc, #496]	; (80052b4 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050c4:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050c6:	4005      	ands	r5, r0
 80050c8:	433d      	orrs	r5, r7
 80050ca:	d067      	beq.n	800519c <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050cc:	1d25      	adds	r5, r4, #4
 80050ce:	4211      	tst	r1, r2
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0x4a>
 80050d2:	05c6      	lsls	r6, r0, #23
 80050d4:	d503      	bpl.n	80050de <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050d6:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d8:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80050da:	4332      	orrs	r2, r6
 80050dc:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050de:	2202      	movs	r2, #2
 80050e0:	4211      	tst	r1, r2
 80050e2:	d006      	beq.n	80050f2 <HAL_UART_IRQHandler+0x5e>
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	d004      	beq.n	80050f2 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ea:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80050ec:	1892      	adds	r2, r2, r2
 80050ee:	4332      	orrs	r2, r6
 80050f0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f2:	2204      	movs	r2, #4
 80050f4:	4211      	tst	r1, r2
 80050f6:	d006      	beq.n	8005106 <HAL_UART_IRQHandler+0x72>
 80050f8:	2f00      	cmp	r7, #0
 80050fa:	d004      	beq.n	8005106 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050fc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050fe:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005100:	3a02      	subs	r2, #2
 8005102:	4332      	orrs	r2, r6
 8005104:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005106:	2208      	movs	r2, #8
 8005108:	4211      	tst	r1, r2
 800510a:	d007      	beq.n	800511c <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800510c:	2620      	movs	r6, #32
 800510e:	4006      	ands	r6, r0
 8005110:	433e      	orrs	r6, r7
 8005112:	d003      	beq.n	800511c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005114:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005116:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005118:	4332      	orrs	r2, r6
 800511a:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800511c:	2280      	movs	r2, #128	; 0x80
 800511e:	0112      	lsls	r2, r2, #4
 8005120:	4211      	tst	r1, r2
 8005122:	d006      	beq.n	8005132 <HAL_UART_IRQHandler+0x9e>
 8005124:	0146      	lsls	r6, r0, #5
 8005126:	d504      	bpl.n	8005132 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005128:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800512a:	2320      	movs	r3, #32
 800512c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800512e:	4313      	orrs	r3, r2
 8005130:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005132:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d028      	beq.n	800518a <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005138:	2320      	movs	r3, #32
 800513a:	4219      	tst	r1, r3
 800513c:	d006      	beq.n	800514c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800513e:	4218      	tst	r0, r3
 8005140:	d004      	beq.n	800514c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8005142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8005148:	0020      	movs	r0, r4
 800514a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514c:	2240      	movs	r2, #64	; 0x40
 800514e:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 8005150:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005152:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 8005154:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005156:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005158:	3a18      	subs	r2, #24
 800515a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800515c:	431e      	orrs	r6, r3
 800515e:	d019      	beq.n	8005194 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8005160:	f7ff ff54 	bl	800500c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	2240      	movs	r2, #64	; 0x40
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4213      	tst	r3, r2
 800516a:	d00f      	beq.n	800518c <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516c:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 800516e:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005170:	4393      	bics	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8005174:	2800      	cmp	r0, #0
 8005176:	d009      	beq.n	800518c <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005178:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <HAL_UART_IRQHandler+0x224>)
 800517a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517c:	f7fe f8c8 	bl	8003310 <HAL_DMA_Abort_IT>
 8005180:	2800      	cmp	r0, #0
 8005182:	d002      	beq.n	800518a <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005184:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005186:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005188:	4798      	blx	r3
}
 800518a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800518c:	0020      	movs	r0, r4
 800518e:	f7ff ff73 	bl	8005078 <HAL_UART_ErrorCallback>
 8005192:	e7fa      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8005194:	f7ff ff70 	bl	8005078 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	67ee      	str	r6, [r5, #124]	; 0x7c
 800519a:	e7f6      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800519e:	2d01      	cmp	r5, #1
 80051a0:	d161      	bne.n	8005266 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80051a2:	2210      	movs	r2, #16
 80051a4:	4211      	tst	r1, r2
 80051a6:	d05e      	beq.n	8005266 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80051a8:	4210      	tst	r0, r2
 80051aa:	d05c      	beq.n	8005266 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ac:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ae:	6899      	ldr	r1, [r3, #8]
 80051b0:	2640      	movs	r6, #64	; 0x40
 80051b2:	000f      	movs	r7, r1
 80051b4:	4037      	ands	r7, r6
 80051b6:	4231      	tst	r1, r6
 80051b8:	d038      	beq.n	800522c <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ba:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80051bc:	680f      	ldr	r7, [r1, #0]
 80051be:	9100      	str	r1, [sp, #0]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d0e0      	beq.n	800518a <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051c8:	2058      	movs	r0, #88	; 0x58
 80051ca:	4684      	mov	ip, r0
 80051cc:	44a4      	add	ip, r4
 80051ce:	4660      	mov	r0, ip
 80051d0:	8800      	ldrh	r0, [r0, #0]
 80051d2:	4288      	cmp	r0, r1
 80051d4:	d9d9      	bls.n	800518a <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 80051d6:	205a      	movs	r0, #90	; 0x5a
 80051d8:	4684      	mov	ip, r0
 80051da:	44a4      	add	ip, r4
 80051dc:	4660      	mov	r0, ip
 80051de:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051e0:	683f      	ldr	r7, [r7, #0]
 80051e2:	2120      	movs	r1, #32
 80051e4:	0038      	movs	r0, r7
 80051e6:	4008      	ands	r0, r1
 80051e8:	9001      	str	r0, [sp, #4]
 80051ea:	420f      	tst	r7, r1
 80051ec:	d112      	bne.n	8005214 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ee:	681f      	ldr	r7, [r3, #0]
 80051f0:	4832      	ldr	r0, [pc, #200]	; (80052bc <HAL_UART_IRQHandler+0x228>)
 80051f2:	4007      	ands	r7, r0
 80051f4:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f8:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	43af      	bics	r7, r5
 80051fc:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fe:	689d      	ldr	r5, [r3, #8]
 8005200:	43b5      	bics	r5, r6
 8005202:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8005204:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	9901      	ldr	r1, [sp, #4]
 8005208:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	4391      	bics	r1, r2
 800520e:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005210:	f7fe f85e 	bl	80032d0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005214:	0023      	movs	r3, r4
 8005216:	0022      	movs	r2, r4
 8005218:	335a      	adds	r3, #90	; 0x5a
 800521a:	3258      	adds	r2, #88	; 0x58
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	8811      	ldrh	r1, [r2, #0]
 8005220:	1ac9      	subs	r1, r1, r3
 8005222:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005224:	0020      	movs	r0, r4
 8005226:	f7ff ff33 	bl	8005090 <HAL_UARTEx_RxEventCallback>
 800522a:	e7ae      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800522c:	0026      	movs	r6, r4
 800522e:	0021      	movs	r1, r4
 8005230:	365a      	adds	r6, #90	; 0x5a
 8005232:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8005234:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005236:	3158      	adds	r1, #88	; 0x58
 8005238:	8809      	ldrh	r1, [r1, #0]
 800523a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800523c:	2e00      	cmp	r6, #0
 800523e:	d0a4      	beq.n	800518a <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005240:	1a09      	subs	r1, r1, r0
 8005242:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005244:	2900      	cmp	r1, #0
 8005246:	d0a0      	beq.n	800518a <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	4e1d      	ldr	r6, [pc, #116]	; (80052c0 <HAL_UART_IRQHandler+0x22c>)
 800524c:	4030      	ands	r0, r6
 800524e:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	6898      	ldr	r0, [r3, #8]
 8005252:	43a8      	bics	r0, r5
 8005254:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005256:	2020      	movs	r0, #32
 8005258:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 800525e:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	4390      	bics	r0, r2
 8005262:	6018      	str	r0, [r3, #0]
 8005264:	e7de      	b.n	8005224 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	0352      	lsls	r2, r2, #13
 800526a:	4211      	tst	r1, r2
 800526c:	d006      	beq.n	800527c <HAL_UART_IRQHandler+0x1e8>
 800526e:	0276      	lsls	r6, r6, #9
 8005270:	d504      	bpl.n	800527c <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8005272:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005274:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005276:	f000 fbc9 	bl	8005a0c <HAL_UARTEx_WakeupCallback>
    return;
 800527a:	e786      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800527c:	2280      	movs	r2, #128	; 0x80
 800527e:	4211      	tst	r1, r2
 8005280:	d003      	beq.n	800528a <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005282:	4210      	tst	r0, r2
 8005284:	d001      	beq.n	800528a <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8005286:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005288:	e715      	b.n	80050b6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800528a:	2540      	movs	r5, #64	; 0x40
 800528c:	4229      	tst	r1, r5
 800528e:	d100      	bne.n	8005292 <HAL_UART_IRQHandler+0x1fe>
 8005290:	e77b      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
 8005292:	4228      	tst	r0, r5
 8005294:	d100      	bne.n	8005298 <HAL_UART_IRQHandler+0x204>
 8005296:	e778      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005298:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800529a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800529c:	43aa      	bics	r2, r5
 800529e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	2320      	movs	r3, #32
 80052a2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80052a8:	f7fd f904 	bl	80024b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ac:	e76d      	b.n	800518a <HAL_UART_IRQHandler+0xf6>
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	0000080f 	.word	0x0000080f
 80052b4:	04000120 	.word	0x04000120
 80052b8:	0800507b 	.word	0x0800507b
 80052bc:	fffffeff 	.word	0xfffffeff
 80052c0:	fffffedf 	.word	0xfffffedf

080052c4 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80052c4:	0003      	movs	r3, r0
{
 80052c6:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c8:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 80052ca:	335c      	adds	r3, #92	; 0x5c
 80052cc:	881a      	ldrh	r2, [r3, #0]
{
 80052ce:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d2:	2922      	cmp	r1, #34	; 0x22
 80052d4:	d131      	bne.n	800533a <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052d8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80052da:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80052dc:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052de:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 80052e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052e2:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80052e4:	3301      	adds	r3, #1
 80052e6:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052e8:	8813      	ldrh	r3, [r2, #0]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80052f0:	8813      	ldrh	r3, [r2, #0]
 80052f2:	b299      	uxth	r1, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11b      	bne.n	8005330 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f8:	6803      	ldr	r3, [r0, #0]
 80052fa:	4812      	ldr	r0, [pc, #72]	; (8005344 <UART_RxISR_8BIT+0x80>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4002      	ands	r2, r0
 8005300:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	3023      	adds	r0, #35	; 0x23
 8005306:	30ff      	adds	r0, #255	; 0xff
 8005308:	4382      	bics	r2, r0
 800530a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530c:	2220      	movs	r2, #32
 800530e:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8005312:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	4282      	cmp	r2, r0
 8005316:	d10c      	bne.n	8005332 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	2110      	movs	r1, #16
 800531a:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531c:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531e:	438a      	bics	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005322:	0023      	movs	r3, r4
 8005324:	3358      	adds	r3, #88	; 0x58
 8005326:	8819      	ldrh	r1, [r3, #0]
 8005328:	f7ff feb2 	bl	8005090 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532c:	2300      	movs	r3, #0
 800532e:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005330:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005332:	0020      	movs	r0, r4
 8005334:	f7ff fe9f 	bl	8005076 <HAL_UART_RxCpltCallback>
 8005338:	e7f8      	b.n	800532c <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800533a:	2208      	movs	r2, #8
 800533c:	6999      	ldr	r1, [r3, #24]
 800533e:	430a      	orrs	r2, r1
 8005340:	619a      	str	r2, [r3, #24]
}
 8005342:	e7f5      	b.n	8005330 <UART_RxISR_8BIT+0x6c>
 8005344:	fffffedf 	.word	0xfffffedf

08005348 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005348:	b510      	push	{r4, lr}
 800534a:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800534c:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8005350:	335c      	adds	r3, #92	; 0x5c
 8005352:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005354:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005356:	2a22      	cmp	r2, #34	; 0x22
 8005358:	d12f      	bne.n	80053ba <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800535a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800535c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800535e:	4001      	ands	r1, r0
 8005360:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8005362:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8005364:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8005366:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005368:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 800536a:	880a      	ldrh	r2, [r1, #0]
 800536c:	3a01      	subs	r2, #1
 800536e:	b292      	uxth	r2, r2
 8005370:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8005372:	880a      	ldrh	r2, [r1, #0]
 8005374:	b291      	uxth	r1, r2
 8005376:	2a00      	cmp	r2, #0
 8005378:	d11a      	bne.n	80053b0 <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4811      	ldr	r0, [pc, #68]	; (80053c4 <UART_RxISR_16BIT+0x7c>)
 800537e:	4002      	ands	r2, r0
 8005380:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	3023      	adds	r0, #35	; 0x23
 8005386:	30ff      	adds	r0, #255	; 0xff
 8005388:	4382      	bics	r2, r0
 800538a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800538c:	2220      	movs	r2, #32
 800538e:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8005392:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	4282      	cmp	r2, r0
 8005396:	d10c      	bne.n	80053b2 <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	2110      	movs	r1, #16
 800539a:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800539c:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	438a      	bics	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053a2:	0023      	movs	r3, r4
 80053a4:	3358      	adds	r3, #88	; 0x58
 80053a6:	8819      	ldrh	r1, [r3, #0]
 80053a8:	f7ff fe72 	bl	8005090 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	2300      	movs	r3, #0
 80053ae:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053b0:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80053b2:	0020      	movs	r0, r4
 80053b4:	f7ff fe5f 	bl	8005076 <HAL_UART_RxCpltCallback>
 80053b8:	e7f8      	b.n	80053ac <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ba:	2208      	movs	r2, #8
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	430a      	orrs	r2, r1
 80053c0:	619a      	str	r2, [r3, #24]
}
 80053c2:	e7f5      	b.n	80053b0 <UART_RxISR_16BIT+0x68>
 80053c4:	fffffedf 	.word	0xfffffedf

080053c8 <UART_SetConfig>:
{
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053cc:	6925      	ldr	r5, [r4, #16]
 80053ce:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80053d0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d2:	4329      	orrs	r1, r5
 80053d4:	6965      	ldr	r5, [r4, #20]
 80053d6:	69c3      	ldr	r3, [r0, #28]
 80053d8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053da:	6810      	ldr	r0, [r2, #0]
 80053dc:	4d78      	ldr	r5, [pc, #480]	; (80055c0 <UART_SetConfig+0x1f8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053de:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053e0:	4028      	ands	r0, r5
 80053e2:	4301      	orrs	r1, r0
 80053e4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e6:	6851      	ldr	r1, [r2, #4]
 80053e8:	4876      	ldr	r0, [pc, #472]	; (80055c4 <UART_SetConfig+0x1fc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ea:	4d77      	ldr	r5, [pc, #476]	; (80055c8 <UART_SetConfig+0x200>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	4001      	ands	r1, r0
 80053ee:	68e0      	ldr	r0, [r4, #12]
 80053f0:	4301      	orrs	r1, r0
 80053f2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f6:	42aa      	cmp	r2, r5
 80053f8:	d001      	beq.n	80053fe <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80053fa:	6a21      	ldr	r1, [r4, #32]
 80053fc:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053fe:	6891      	ldr	r1, [r2, #8]
 8005400:	4e72      	ldr	r6, [pc, #456]	; (80055cc <UART_SetConfig+0x204>)
 8005402:	4031      	ands	r1, r6
 8005404:	4301      	orrs	r1, r0
 8005406:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005408:	4971      	ldr	r1, [pc, #452]	; (80055d0 <UART_SetConfig+0x208>)
 800540a:	428a      	cmp	r2, r1
 800540c:	d10f      	bne.n	800542e <UART_SetConfig+0x66>
 800540e:	2103      	movs	r1, #3
 8005410:	4a70      	ldr	r2, [pc, #448]	; (80055d4 <UART_SetConfig+0x20c>)
 8005412:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005414:	400a      	ands	r2, r1
 8005416:	3a01      	subs	r2, #1
 8005418:	496f      	ldr	r1, [pc, #444]	; (80055d8 <UART_SetConfig+0x210>)
 800541a:	2a02      	cmp	r2, #2
 800541c:	d910      	bls.n	8005440 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800541e:	2280      	movs	r2, #128	; 0x80
 8005420:	0212      	lsls	r2, r2, #8
 8005422:	4293      	cmp	r3, r2
 8005424:	d000      	beq.n	8005428 <UART_SetConfig+0x60>
 8005426:	e0a2      	b.n	800556e <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe ff38 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 800542c:	e0c3      	b.n	80055b6 <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542e:	496b      	ldr	r1, [pc, #428]	; (80055dc <UART_SetConfig+0x214>)
 8005430:	428a      	cmp	r2, r1
 8005432:	d118      	bne.n	8005466 <UART_SetConfig+0x9e>
 8005434:	200c      	movs	r0, #12
 8005436:	4a67      	ldr	r2, [pc, #412]	; (80055d4 <UART_SetConfig+0x20c>)
 8005438:	4967      	ldr	r1, [pc, #412]	; (80055d8 <UART_SetConfig+0x210>)
 800543a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800543c:	3103      	adds	r1, #3
 800543e:	4002      	ands	r2, r0
 8005440:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	0212      	lsls	r2, r2, #8
 8005446:	4293      	cmp	r3, r2
 8005448:	d000      	beq.n	800544c <UART_SetConfig+0x84>
 800544a:	e082      	b.n	8005552 <UART_SetConfig+0x18a>
    switch (clocksource)
 800544c:	2808      	cmp	r0, #8
 800544e:	d824      	bhi.n	800549a <UART_SetConfig+0xd2>
 8005450:	f7fa fe76 	bl	8000140 <__gnu_thumb1_case_shi>
 8005454:	ffea00af 	.word	0xffea00af
 8005458:	0023005c 	.word	0x0023005c
 800545c:	0023007c 	.word	0x0023007c
 8005460:	00230023 	.word	0x00230023
 8005464:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005466:	495e      	ldr	r1, [pc, #376]	; (80055e0 <UART_SetConfig+0x218>)
 8005468:	428a      	cmp	r2, r1
 800546a:	d100      	bne.n	800546e <UART_SetConfig+0xa6>
 800546c:	e09d      	b.n	80055aa <UART_SetConfig+0x1e2>
 800546e:	495d      	ldr	r1, [pc, #372]	; (80055e4 <UART_SetConfig+0x21c>)
 8005470:	428a      	cmp	r2, r1
 8005472:	d100      	bne.n	8005476 <UART_SetConfig+0xae>
 8005474:	e099      	b.n	80055aa <UART_SetConfig+0x1e2>
 8005476:	42aa      	cmp	r2, r5
 8005478:	d10f      	bne.n	800549a <UART_SetConfig+0xd2>
 800547a:	21c0      	movs	r1, #192	; 0xc0
 800547c:	2080      	movs	r0, #128	; 0x80
 800547e:	4a55      	ldr	r2, [pc, #340]	; (80055d4 <UART_SetConfig+0x20c>)
 8005480:	0109      	lsls	r1, r1, #4
 8005482:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005484:	0100      	lsls	r0, r0, #4
 8005486:	400b      	ands	r3, r1
 8005488:	4283      	cmp	r3, r0
 800548a:	d016      	beq.n	80054ba <UART_SetConfig+0xf2>
 800548c:	d807      	bhi.n	800549e <UART_SetConfig+0xd6>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <UART_SetConfig+0xe0>
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	00d2      	lsls	r2, r2, #3
 8005496:	4293      	cmp	r3, r2
 8005498:	d035      	beq.n	8005506 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549a:	2001      	movs	r0, #1
 800549c:	e009      	b.n	80054b2 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549e:	428b      	cmp	r3, r1
 80054a0:	d1fb      	bne.n	800549a <UART_SetConfig+0xd2>
 80054a2:	2080      	movs	r0, #128	; 0x80
 80054a4:	0200      	lsls	r0, r0, #8
 80054a6:	e012      	b.n	80054ce <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a8:	f7fe fee8 	bl	800427c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d10e      	bne.n	80054ce <UART_SetConfig+0x106>
 80054b0:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80054b6:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80054b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054ba:	2310      	movs	r3, #16
 80054bc:	6810      	ldr	r0, [r2, #0]
 80054be:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054c0:	4243      	negs	r3, r0
 80054c2:	4158      	adcs	r0, r3
 80054c4:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <UART_SetConfig+0x220>)
 80054c6:	4240      	negs	r0, r0
 80054c8:	4018      	ands	r0, r3
 80054ca:	4b48      	ldr	r3, [pc, #288]	; (80055ec <UART_SetConfig+0x224>)
 80054cc:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054ce:	2203      	movs	r2, #3
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	435a      	muls	r2, r3
 80054d4:	4290      	cmp	r0, r2
 80054d6:	d3e0      	bcc.n	800549a <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054d8:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054da:	4290      	cmp	r0, r2
 80054dc:	d8dd      	bhi.n	800549a <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054de:	2700      	movs	r7, #0
 80054e0:	0e02      	lsrs	r2, r0, #24
 80054e2:	0201      	lsls	r1, r0, #8
 80054e4:	085e      	lsrs	r6, r3, #1
 80054e6:	1989      	adds	r1, r1, r6
 80054e8:	417a      	adcs	r2, r7
 80054ea:	0008      	movs	r0, r1
 80054ec:	0011      	movs	r1, r2
 80054ee:	001a      	movs	r2, r3
 80054f0:	003b      	movs	r3, r7
 80054f2:	f7fa ffa5 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <UART_SetConfig+0x228>)
 80054f8:	18c2      	adds	r2, r0, r3
 80054fa:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <UART_SetConfig+0x22c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d8cc      	bhi.n	800549a <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	60d8      	str	r0, [r3, #12]
 8005504:	e7d4      	b.n	80054b0 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005506:	f7fe fb19 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
        break;
 800550a:	e7cf      	b.n	80054ac <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	2210      	movs	r2, #16
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <UART_SetConfig+0x20c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005514:	425a      	negs	r2, r3
 8005516:	4153      	adcs	r3, r2
 8005518:	4a33      	ldr	r2, [pc, #204]	; (80055e8 <UART_SetConfig+0x220>)
 800551a:	425b      	negs	r3, r3
 800551c:	4013      	ands	r3, r2
 800551e:	4a33      	ldr	r2, [pc, #204]	; (80055ec <UART_SetConfig+0x224>)
 8005520:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005522:	6861      	ldr	r1, [r4, #4]
 8005524:	0058      	lsls	r0, r3, #1
 8005526:	084b      	lsrs	r3, r1, #1
 8005528:	18c0      	adds	r0, r0, r3
 800552a:	f7fa fe13 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552e:	4932      	ldr	r1, [pc, #200]	; (80055f8 <UART_SetConfig+0x230>)
 8005530:	b282      	uxth	r2, r0
 8005532:	3a10      	subs	r2, #16
 8005534:	0403      	lsls	r3, r0, #16
 8005536:	428a      	cmp	r2, r1
 8005538:	d8af      	bhi.n	800549a <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800553a:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800553c:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800553e:	4390      	bics	r0, r2
 8005540:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005542:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005544:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005546:	4318      	orrs	r0, r3
 8005548:	60d0      	str	r0, [r2, #12]
 800554a:	e7b1      	b.n	80054b0 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800554c:	f7fe faf6 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8005550:	e031      	b.n	80055b6 <UART_SetConfig+0x1ee>
    switch (clocksource)
 8005552:	2808      	cmp	r0, #8
 8005554:	d8a1      	bhi.n	800549a <UART_SetConfig+0xd2>
 8005556:	f7fa fddf 	bl	8000118 <__gnu_thumb1_case_sqi>
 800555a:	0a05      	.short	0x0a05
 800555c:	a022a00d 	.word	0xa022a00d
 8005560:	a0a0      	.short	0xa0a0
 8005562:	25          	.byte	0x25
 8005563:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005564:	f7fe fe8a 	bl	800427c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005568:	2800      	cmp	r0, #0
 800556a:	d0a1      	beq.n	80054b0 <UART_SetConfig+0xe8>
 800556c:	e00d      	b.n	800558a <UART_SetConfig+0x1c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800556e:	f7fe fe95 	bl	800429c <HAL_RCC_GetPCLK2Freq>
        break;
 8005572:	e7f9      	b.n	8005568 <UART_SetConfig+0x1a0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005574:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <UART_SetConfig+0x20c>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	2310      	movs	r3, #16
 800557a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800557c:	4243      	negs	r3, r0
 800557e:	4158      	adcs	r0, r3
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <UART_SetConfig+0x220>)
 8005582:	4240      	negs	r0, r0
 8005584:	4018      	ands	r0, r3
 8005586:	4b19      	ldr	r3, [pc, #100]	; (80055ec <UART_SetConfig+0x224>)
 8005588:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800558a:	6861      	ldr	r1, [r4, #4]
 800558c:	084b      	lsrs	r3, r1, #1
 800558e:	1818      	adds	r0, r3, r0
 8005590:	f7fa fde0 	bl	8000154 <__udivsi3>
 8005594:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005596:	0002      	movs	r2, r0
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <UART_SetConfig+0x230>)
 800559a:	3a10      	subs	r2, #16
 800559c:	e7ae      	b.n	80054fc <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe facd 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
        break;
 80055a2:	e7e1      	b.n	8005568 <UART_SetConfig+0x1a0>
    switch (clocksource)
 80055a4:	2080      	movs	r0, #128	; 0x80
 80055a6:	0200      	lsls	r0, r0, #8
 80055a8:	e7ef      	b.n	800558a <UART_SetConfig+0x1c2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	0212      	lsls	r2, r2, #8
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d1d8      	bne.n	8005564 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b2:	f7fe fe63 	bl	800427c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80055b6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80055b8:	d100      	bne.n	80055bc <UART_SetConfig+0x1f4>
 80055ba:	e779      	b.n	80054b0 <UART_SetConfig+0xe8>
 80055bc:	e7b1      	b.n	8005522 <UART_SetConfig+0x15a>
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	efff69f3 	.word	0xefff69f3
 80055c4:	ffffcfff 	.word	0xffffcfff
 80055c8:	40004800 	.word	0x40004800
 80055cc:	fffff4ff 	.word	0xfffff4ff
 80055d0:	40013800 	.word	0x40013800
 80055d4:	40021000 	.word	0x40021000
 80055d8:	0800a8c5 	.word	0x0800a8c5
 80055dc:	40004400 	.word	0x40004400
 80055e0:	40004c00 	.word	0x40004c00
 80055e4:	40005000 	.word	0x40005000
 80055e8:	00b71b00 	.word	0x00b71b00
 80055ec:	003d0900 	.word	0x003d0900
 80055f0:	fffffd00 	.word	0xfffffd00
 80055f4:	000ffcff 	.word	0x000ffcff
 80055f8:	0000ffef 	.word	0x0000ffef

080055fc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80055fe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005600:	07da      	lsls	r2, r3, #31
 8005602:	d506      	bpl.n	8005612 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005604:	6801      	ldr	r1, [r0, #0]
 8005606:	4c28      	ldr	r4, [pc, #160]	; (80056a8 <UART_AdvFeatureConfig+0xac>)
 8005608:	684a      	ldr	r2, [r1, #4]
 800560a:	4022      	ands	r2, r4
 800560c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800560e:	4322      	orrs	r2, r4
 8005610:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005612:	079a      	lsls	r2, r3, #30
 8005614:	d506      	bpl.n	8005624 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005616:	6801      	ldr	r1, [r0, #0]
 8005618:	4c24      	ldr	r4, [pc, #144]	; (80056ac <UART_AdvFeatureConfig+0xb0>)
 800561a:	684a      	ldr	r2, [r1, #4]
 800561c:	4022      	ands	r2, r4
 800561e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005620:	4322      	orrs	r2, r4
 8005622:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005624:	075a      	lsls	r2, r3, #29
 8005626:	d506      	bpl.n	8005636 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005628:	6801      	ldr	r1, [r0, #0]
 800562a:	4c21      	ldr	r4, [pc, #132]	; (80056b0 <UART_AdvFeatureConfig+0xb4>)
 800562c:	684a      	ldr	r2, [r1, #4]
 800562e:	4022      	ands	r2, r4
 8005630:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005632:	4322      	orrs	r2, r4
 8005634:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005636:	071a      	lsls	r2, r3, #28
 8005638:	d506      	bpl.n	8005648 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800563a:	6801      	ldr	r1, [r0, #0]
 800563c:	4c1d      	ldr	r4, [pc, #116]	; (80056b4 <UART_AdvFeatureConfig+0xb8>)
 800563e:	684a      	ldr	r2, [r1, #4]
 8005640:	4022      	ands	r2, r4
 8005642:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005644:	4322      	orrs	r2, r4
 8005646:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005648:	06da      	lsls	r2, r3, #27
 800564a:	d506      	bpl.n	800565a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800564c:	6801      	ldr	r1, [r0, #0]
 800564e:	4c1a      	ldr	r4, [pc, #104]	; (80056b8 <UART_AdvFeatureConfig+0xbc>)
 8005650:	688a      	ldr	r2, [r1, #8]
 8005652:	4022      	ands	r2, r4
 8005654:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005656:	4322      	orrs	r2, r4
 8005658:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565a:	069a      	lsls	r2, r3, #26
 800565c:	d506      	bpl.n	800566c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800565e:	6801      	ldr	r1, [r0, #0]
 8005660:	4c16      	ldr	r4, [pc, #88]	; (80056bc <UART_AdvFeatureConfig+0xc0>)
 8005662:	688a      	ldr	r2, [r1, #8]
 8005664:	4022      	ands	r2, r4
 8005666:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005668:	4322      	orrs	r2, r4
 800566a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800566c:	065a      	lsls	r2, r3, #25
 800566e:	d510      	bpl.n	8005692 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005670:	6801      	ldr	r1, [r0, #0]
 8005672:	4d13      	ldr	r5, [pc, #76]	; (80056c0 <UART_AdvFeatureConfig+0xc4>)
 8005674:	684a      	ldr	r2, [r1, #4]
 8005676:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005678:	402a      	ands	r2, r5
 800567a:	4322      	orrs	r2, r4
 800567c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	0352      	lsls	r2, r2, #13
 8005682:	4294      	cmp	r4, r2
 8005684:	d105      	bne.n	8005692 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005686:	684a      	ldr	r2, [r1, #4]
 8005688:	4c0e      	ldr	r4, [pc, #56]	; (80056c4 <UART_AdvFeatureConfig+0xc8>)
 800568a:	4022      	ands	r2, r4
 800568c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800568e:	4322      	orrs	r2, r4
 8005690:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005692:	061b      	lsls	r3, r3, #24
 8005694:	d506      	bpl.n	80056a4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005696:	6802      	ldr	r2, [r0, #0]
 8005698:	490b      	ldr	r1, [pc, #44]	; (80056c8 <UART_AdvFeatureConfig+0xcc>)
 800569a:	6853      	ldr	r3, [r2, #4]
 800569c:	400b      	ands	r3, r1
 800569e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6053      	str	r3, [r2, #4]
}
 80056a4:	bd30      	pop	{r4, r5, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	fffdffff 	.word	0xfffdffff
 80056ac:	fffeffff 	.word	0xfffeffff
 80056b0:	fffbffff 	.word	0xfffbffff
 80056b4:	ffff7fff 	.word	0xffff7fff
 80056b8:	ffffefff 	.word	0xffffefff
 80056bc:	ffffdfff 	.word	0xffffdfff
 80056c0:	ffefffff 	.word	0xffefffff
 80056c4:	ff9fffff 	.word	0xff9fffff
 80056c8:	fff7ffff 	.word	0xfff7ffff

080056cc <UART_WaitOnFlagUntilTimeout>:
{
 80056cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ce:	2780      	movs	r7, #128	; 0x80
{
 80056d0:	0004      	movs	r4, r0
 80056d2:	000d      	movs	r5, r1
 80056d4:	0016      	movs	r6, r2
 80056d6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	69d3      	ldr	r3, [r2, #28]
 80056de:	402b      	ands	r3, r5
 80056e0:	1b5b      	subs	r3, r3, r5
 80056e2:	4259      	negs	r1, r3
 80056e4:	414b      	adcs	r3, r1
 80056e6:	42b3      	cmp	r3, r6
 80056e8:	d001      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80056ea:	2000      	movs	r0, #0
 80056ec:	e01c      	b.n	8005728 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	9b08      	ldr	r3, [sp, #32]
 80056f0:	3301      	adds	r3, #1
 80056f2:	d0f3      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7fd fa0a 	bl	8002b0c <HAL_GetTick>
 80056f8:	9b01      	ldr	r3, [sp, #4]
 80056fa:	9a08      	ldr	r2, [sp, #32]
 80056fc:	1ac0      	subs	r0, r0, r3
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	4290      	cmp	r0, r2
 8005702:	d801      	bhi.n	8005708 <UART_WaitOnFlagUntilTimeout+0x3c>
 8005704:	2a00      	cmp	r2, #0
 8005706:	d110      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4913      	ldr	r1, [pc, #76]	; (8005758 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800570c:	400a      	ands	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	31a3      	adds	r1, #163	; 0xa3
 8005714:	31ff      	adds	r1, #255	; 0xff
 8005716:	438a      	bics	r2, r1
 8005718:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800571a:	2320      	movs	r3, #32
 800571c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800571e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005720:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005722:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005724:	3474      	adds	r4, #116	; 0x74
 8005726:	7023      	strb	r3, [r4, #0]
}
 8005728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800572a:	2104      	movs	r1, #4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	420a      	tst	r2, r1
 8005730:	d0d3      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	423a      	tst	r2, r7
 8005736:	d0d0      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005738:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4906      	ldr	r1, [pc, #24]	; (8005758 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800573e:	400a      	ands	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	31a3      	adds	r1, #163	; 0xa3
 8005746:	31ff      	adds	r1, #255	; 0xff
 8005748:	438a      	bics	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800574c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800574e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8005750:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005752:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005754:	67d3      	str	r3, [r2, #124]	; 0x7c
 8005756:	e7e3      	b.n	8005720 <UART_WaitOnFlagUntilTimeout+0x54>
 8005758:	fffffe5f 	.word	0xfffffe5f

0800575c <HAL_UART_Transmit>:
{
 800575c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575e:	b087      	sub	sp, #28
 8005760:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8005762:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8005764:	0004      	movs	r4, r0
 8005766:	000d      	movs	r5, r1
 8005768:	0016      	movs	r6, r2
    return HAL_BUSY;
 800576a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800576c:	2b20      	cmp	r3, #32
 800576e:	d151      	bne.n	8005814 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8005770:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005772:	2900      	cmp	r1, #0
 8005774:	d04e      	beq.n	8005814 <HAL_UART_Transmit+0xb8>
 8005776:	2a00      	cmp	r2, #0
 8005778:	d04c      	beq.n	8005814 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577a:	2380      	movs	r3, #128	; 0x80
 800577c:	68a2      	ldr	r2, [r4, #8]
 800577e:	015b      	lsls	r3, r3, #5
 8005780:	429a      	cmp	r2, r3
 8005782:	d104      	bne.n	800578e <HAL_UART_Transmit+0x32>
 8005784:	6923      	ldr	r3, [r4, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800578a:	4201      	tst	r1, r0
 800578c:	d142      	bne.n	8005814 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800578e:	0023      	movs	r3, r4
 8005790:	3374      	adds	r3, #116	; 0x74
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8005796:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005798:	2b01      	cmp	r3, #1
 800579a:	d03b      	beq.n	8005814 <HAL_UART_Transmit+0xb8>
 800579c:	2301      	movs	r3, #1
 800579e:	9a03      	ldr	r2, [sp, #12]
 80057a0:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a2:	2200      	movs	r2, #0
 80057a4:	1d23      	adds	r3, r4, #4
 80057a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a8:	2321      	movs	r3, #33	; 0x21
 80057aa:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80057ac:	f7fd f9ae 	bl	8002b0c <HAL_GetTick>
    huart->TxXferSize  = Size;
 80057b0:	0023      	movs	r3, r4
 80057b2:	3350      	adds	r3, #80	; 0x50
 80057b4:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80057b6:	3302      	adds	r3, #2
 80057b8:	801e      	strh	r6, [r3, #0]
 80057ba:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80057c0:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80057c2:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c4:	015b      	lsls	r3, r3, #5
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d104      	bne.n	80057d4 <HAL_UART_Transmit+0x78>
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	42b3      	cmp	r3, r6
 80057ce:	d101      	bne.n	80057d4 <HAL_UART_Transmit+0x78>
 80057d0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80057d2:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80057d4:	2300      	movs	r3, #0
 80057d6:	9a03      	ldr	r2, [sp, #12]
 80057d8:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80057da:	0023      	movs	r3, r4
 80057dc:	3352      	adds	r3, #82	; 0x52
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057e6:	9b05      	ldr	r3, [sp, #20]
 80057e8:	2140      	movs	r1, #64	; 0x40
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	0020      	movs	r0, r4
 80057ee:	003b      	movs	r3, r7
 80057f0:	f7ff ff6c 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d10c      	bne.n	8005812 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80057f8:	2320      	movs	r3, #32
 80057fa:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80057fc:	e00a      	b.n	8005814 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	9b05      	ldr	r3, [sp, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2180      	movs	r1, #128	; 0x80
 8005806:	003b      	movs	r3, r7
 8005808:	0020      	movs	r0, r4
 800580a:	f7ff ff5f 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 800580e:	2800      	cmp	r0, #0
 8005810:	d002      	beq.n	8005818 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 8005812:	2003      	movs	r0, #3
}
 8005814:	b007      	add	sp, #28
 8005816:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005818:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800581a:	2d00      	cmp	r5, #0
 800581c:	d10b      	bne.n	8005836 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800581e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8005820:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005822:	05db      	lsls	r3, r3, #23
 8005824:	0ddb      	lsrs	r3, r3, #23
 8005826:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005828:	9b04      	ldr	r3, [sp, #16]
 800582a:	9a04      	ldr	r2, [sp, #16]
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	b29b      	uxth	r3, r3
 8005832:	8013      	strh	r3, [r2, #0]
 8005834:	e7d1      	b.n	80057da <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005836:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8005838:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800583a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800583c:	e7f4      	b.n	8005828 <HAL_UART_Transmit+0xcc>
	...

08005840 <UART_CheckIdleState>:
{
 8005840:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	2600      	movs	r6, #0
{
 8005844:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005846:	1d03      	adds	r3, r0, #4
 8005848:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800584a:	f7fd f95f 	bl	8002b0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005850:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	d416      	bmi.n	8005886 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	075b      	lsls	r3, r3, #29
 800585e:	d50a      	bpl.n	8005876 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005860:	2180      	movs	r1, #128	; 0x80
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <UART_CheckIdleState+0x60>)
 8005864:	2200      	movs	r2, #0
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	0020      	movs	r0, r4
 800586a:	002b      	movs	r3, r5
 800586c:	03c9      	lsls	r1, r1, #15
 800586e:	f7ff ff2d 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8005872:	2800      	cmp	r0, #0
 8005874:	d112      	bne.n	800589c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8005876:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005878:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800587a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800587c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005880:	3474      	adds	r4, #116	; 0x74
 8005882:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005884:	e00b      	b.n	800589e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <UART_CheckIdleState+0x60>)
 800588a:	0032      	movs	r2, r6
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	0389      	lsls	r1, r1, #14
 8005890:	0003      	movs	r3, r0
 8005892:	0020      	movs	r0, r4
 8005894:	f7ff ff1a 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8005898:	2800      	cmp	r0, #0
 800589a:	d0dd      	beq.n	8005858 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800589c:	2003      	movs	r0, #3
}
 800589e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80058a0:	01ffffff 	.word	0x01ffffff

080058a4 <HAL_UART_Init>:
{
 80058a4:	b510      	push	{r4, lr}
 80058a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80058aa:	2001      	movs	r0, #1
}
 80058ac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80058ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80058b4:	0002      	movs	r2, r0
 80058b6:	3274      	adds	r2, #116	; 0x74
 80058b8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80058ba:	f003 fa75 	bl	8008da8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80058be:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80058c0:	2101      	movs	r1, #1
 80058c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058c4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80058c6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80058ca:	438b      	bics	r3, r1
 80058cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ce:	f7ff fd7b 	bl	80053c8 <UART_SetConfig>
 80058d2:	2801      	cmp	r0, #1
 80058d4:	d0e9      	beq.n	80058aa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80058dc:	0020      	movs	r0, r4
 80058de:	f7ff fe8d 	bl	80055fc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	4907      	ldr	r1, [pc, #28]	; (8005904 <HAL_UART_Init+0x60>)
 80058e6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80058e8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	438a      	bics	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80058f6:	2201      	movs	r2, #1
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80058fe:	f7ff ff9f 	bl	8005840 <UART_CheckIdleState>
 8005902:	e7d3      	b.n	80058ac <HAL_UART_Init+0x8>
 8005904:	ffffb7ff 	.word	0xffffb7ff

08005908 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005908:	0003      	movs	r3, r0
 800590a:	3358      	adds	r3, #88	; 0x58
{
 800590c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800590e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005910:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8005912:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	6881      	ldr	r1, [r0, #8]
 8005918:	015b      	lsls	r3, r3, #5
 800591a:	4299      	cmp	r1, r3
 800591c:	d128      	bne.n	8005970 <UART_Start_Receive_IT+0x68>
 800591e:	6903      	ldr	r3, [r0, #16]
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	4193      	sbcs	r3, r2
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	425b      	negs	r3, r3
 8005928:	4393      	bics	r3, r2
 800592a:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <UART_Start_Receive_IT+0x90>)
 800592c:	189b      	adds	r3, r3, r2
 800592e:	0002      	movs	r2, r0
 8005930:	325c      	adds	r2, #92	; 0x5c
 8005932:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005934:	2200      	movs	r2, #0
 8005936:	1d03      	adds	r3, r0, #4
 8005938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800593a:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593c:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800593e:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	6894      	ldr	r4, [r2, #8]
 8005942:	3b21      	subs	r3, #33	; 0x21
 8005944:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005946:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005948:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594a:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <UART_Start_Receive_IT+0x94>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594e:	42a1      	cmp	r1, r4
 8005950:	d103      	bne.n	800595a <UART_Start_Receive_IT+0x52>
 8005952:	6901      	ldr	r1, [r0, #16]
 8005954:	2900      	cmp	r1, #0
 8005956:	d100      	bne.n	800595a <UART_Start_Receive_IT+0x52>
    huart->RxISR = UART_RxISR_16BIT;
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <UART_Start_Receive_IT+0x98>)
 800595a:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800595c:	0003      	movs	r3, r0
 800595e:	2000      	movs	r0, #0
 8005960:	3374      	adds	r3, #116	; 0x74
 8005962:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005964:	2390      	movs	r3, #144	; 0x90
 8005966:	6811      	ldr	r1, [r2, #0]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	430b      	orrs	r3, r1
 800596c:	6013      	str	r3, [r2, #0]
}
 800596e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005970:	2900      	cmp	r1, #0
 8005972:	d105      	bne.n	8005980 <UART_Start_Receive_IT+0x78>
 8005974:	6902      	ldr	r2, [r0, #16]
 8005976:	237f      	movs	r3, #127	; 0x7f
 8005978:	2a00      	cmp	r2, #0
 800597a:	d1d8      	bne.n	800592e <UART_Start_Receive_IT+0x26>
 800597c:	3380      	adds	r3, #128	; 0x80
 800597e:	e7d6      	b.n	800592e <UART_Start_Receive_IT+0x26>
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	2300      	movs	r3, #0
 8005984:	0552      	lsls	r2, r2, #21
 8005986:	4291      	cmp	r1, r2
 8005988:	d1d1      	bne.n	800592e <UART_Start_Receive_IT+0x26>
 800598a:	6902      	ldr	r2, [r0, #16]
 800598c:	337f      	adds	r3, #127	; 0x7f
 800598e:	2a00      	cmp	r2, #0
 8005990:	d0cd      	beq.n	800592e <UART_Start_Receive_IT+0x26>
 8005992:	3b40      	subs	r3, #64	; 0x40
 8005994:	e7cb      	b.n	800592e <UART_Start_Receive_IT+0x26>
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	000001ff 	.word	0x000001ff
 800599c:	080052c5 	.word	0x080052c5
 80059a0:	08005349 	.word	0x08005349

080059a4 <HAL_UART_Receive_IT>:
{
 80059a4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a6:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 80059a8:	0003      	movs	r3, r0
    return HAL_BUSY;
 80059aa:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ac:	2c20      	cmp	r4, #32
 80059ae:	d129      	bne.n	8005a04 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80059b0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d026      	beq.n	8005a04 <HAL_UART_Receive_IT+0x60>
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d024      	beq.n	8005a04 <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ba:	2080      	movs	r0, #128	; 0x80
 80059bc:	689c      	ldr	r4, [r3, #8]
 80059be:	0140      	lsls	r0, r0, #5
 80059c0:	4284      	cmp	r4, r0
 80059c2:	d106      	bne.n	80059d2 <HAL_UART_Receive_IT+0x2e>
 80059c4:	6918      	ldr	r0, [r3, #16]
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d103      	bne.n	80059d2 <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80059ca:	2401      	movs	r4, #1
      return HAL_ERROR;
 80059cc:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80059ce:	4221      	tst	r1, r4
 80059d0:	d118      	bne.n	8005a04 <HAL_UART_Receive_IT+0x60>
    __HAL_LOCK(huart);
 80059d2:	001c      	movs	r4, r3
 80059d4:	3474      	adds	r4, #116	; 0x74
 80059d6:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80059d8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80059da:	2d01      	cmp	r5, #1
 80059dc:	d012      	beq.n	8005a04 <HAL_UART_Receive_IT+0x60>
 80059de:	3801      	subs	r0, #1
 80059e0:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059e4:	4c08      	ldr	r4, [pc, #32]	; (8005a08 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	6618      	str	r0, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	42a0      	cmp	r0, r4
 80059ec:	d007      	beq.n	80059fe <HAL_UART_Receive_IT+0x5a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059ee:	6844      	ldr	r4, [r0, #4]
 80059f0:	0224      	lsls	r4, r4, #8
 80059f2:	d504      	bpl.n	80059fe <HAL_UART_Receive_IT+0x5a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059f4:	2480      	movs	r4, #128	; 0x80
 80059f6:	6805      	ldr	r5, [r0, #0]
 80059f8:	04e4      	lsls	r4, r4, #19
 80059fa:	432c      	orrs	r4, r5
 80059fc:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7ff ff82 	bl	8005908 <UART_Start_Receive_IT>
}
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	40004800 	.word	0x40004800

08005a0c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a0c:	4770      	bx	lr
	...

08005a10 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 8005a10:	4b01      	ldr	r3, [pc, #4]	; (8005a18 <SX1276GetStatus+0x8>)
 8005a12:	7918      	ldrb	r0, [r3, #4]
}
 8005a14:	4770      	bx	lr
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	20000294 	.word	0x20000294

08005a1c <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <GetFskBandwidthRegValue+0x28>)
{
 8005a1e:	2300      	movs	r3, #0
 8005a20:	0011      	movs	r1, r2
 8005a22:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005a24:	6814      	ldr	r4, [r2, #0]
 8005a26:	4284      	cmp	r4, r0
 8005a28:	d802      	bhi.n	8005a30 <GetFskBandwidthRegValue+0x14>
 8005a2a:	6894      	ldr	r4, [r2, #8]
 8005a2c:	4284      	cmp	r4, r0
 8005a2e:	d804      	bhi.n	8005a3a <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005a30:	3301      	adds	r3, #1
 8005a32:	3208      	adds	r2, #8
 8005a34:	2b15      	cmp	r3, #21
 8005a36:	d1f5      	bne.n	8005a24 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005a38:	e7fe      	b.n	8005a38 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	18c9      	adds	r1, r1, r3
 8005a3e:	7908      	ldrb	r0, [r1, #4]
}
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	0800a914 	.word	0x0800a914

08005a48 <SX1276GetTimeOnAir>:
{
 8005a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a4a:	0014      	movs	r4, r2
 8005a4c:	aa08      	add	r2, sp, #32
 8005a4e:	8816      	ldrh	r6, [r2, #0]
 8005a50:	aa09      	add	r2, sp, #36	; 0x24
 8005a52:	000d      	movs	r5, r1
 8005a54:	7811      	ldrb	r1, [r2, #0]
 8005a56:	aa0a      	add	r2, sp, #40	; 0x28
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	af0b      	add	r7, sp, #44	; 0x2c
 8005a5c:	4694      	mov	ip, r2
 8005a5e:	783f      	ldrb	r7, [r7, #0]
    switch( modem )
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d009      	beq.n	8005a78 <SX1276GetTimeOnAir+0x30>
 8005a64:	2801      	cmp	r0, #1
 8005a66:	d014      	beq.n	8005a92 <SX1276GetTimeOnAir+0x4a>
 8005a68:	2401      	movs	r4, #1
 8005a6a:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8005a6c:	1900      	adds	r0, r0, r4
 8005a6e:	0021      	movs	r1, r4
 8005a70:	3801      	subs	r0, #1
 8005a72:	f7fa fb6f 	bl	8000154 <__udivsi3>
}
 8005a76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005a78:	2301      	movs	r3, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005a7a:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005a7c:	404b      	eors	r3, r1
    return ( preambleLen << 3 ) +
 8005a7e:	18f3      	adds	r3, r6, r3
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005a80:	007f      	lsls	r7, r7, #1
    return ( preambleLen << 3 ) +
 8005a82:	00db      	lsls	r3, r3, #3
               ( 0 ) + // Address filter size
 8005a84:	4467      	add	r7, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005a86:	3318      	adds	r3, #24
               ) << 3 
 8005a88:	00ff      	lsls	r7, r7, #3
             ( syncWordLength << 3 ) +
 8005a8a:	19df      	adds	r7, r3, r7
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005a8c:	0080      	lsls	r0, r0, #2
 8005a8e:	4378      	muls	r0, r7
        break;
 8005a90:	e7ec      	b.n	8005a6c <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 8005a92:	3304      	adds	r3, #4
 8005a94:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005a96:	1f63      	subs	r3, r4, #5
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d804      	bhi.n	8005aa6 <SX1276GetTimeOnAir+0x5e>
    {
        if( preambleLen < 12 )
 8005a9c:	1c33      	adds	r3, r6, #0
 8005a9e:	2e0c      	cmp	r6, #12
 8005aa0:	d200      	bcs.n	8005aa4 <SX1276GetTimeOnAir+0x5c>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	d135      	bne.n	8005b16 <SX1276GetTimeOnAir+0xce>
 8005aaa:	0023      	movs	r3, r4
 8005aac:	2001      	movs	r0, #1
 8005aae:	002a      	movs	r2, r5
 8005ab0:	3b0b      	subs	r3, #11
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	416a      	adcs	r2, r5
 8005ab6:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ab8:	b2db      	uxtb	r3, r3
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005aba:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8005abc:	013f      	lsls	r7, r7, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005abe:	00d2      	lsls	r2, r2, #3
 8005ac0:	19d2      	adds	r2, r2, r7
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 8005ac2:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 8005ac4:	00a0      	lsls	r0, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8005ac6:	1a12      	subs	r2, r2, r0
                            ( fixLen ? 0 : 20 );
 8005ac8:	42b9      	cmp	r1, r7
 8005aca:	d100      	bne.n	8005ace <SX1276GetTimeOnAir+0x86>
 8005acc:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 8005ace:	19d2      	adds	r2, r2, r7

    if( datarate <= 6 )
    {
        ceilDenominator = 4 * datarate;
 8005ad0:	0001      	movs	r1, r0
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005ad2:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8005ad4:	2c06      	cmp	r4, #6
 8005ad6:	d903      	bls.n	8005ae0 <SX1276GetTimeOnAir+0x98>
        ceilNumerator += 8;
 8005ad8:	3208      	adds	r2, #8
        if( lowDatareOptimize == true )
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d000      	beq.n	8005ae0 <SX1276GetTimeOnAir+0x98>
            ceilDenominator = 4 * ( datarate - 2 );
 8005ade:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005ae0:	43d3      	mvns	r3, r2
 8005ae2:	17db      	asrs	r3, r3, #31
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	1852      	adds	r2, r2, r1
 8005ae8:	1e50      	subs	r0, r2, #1
 8005aea:	f7fa fbbd 	bl	8000268 <__divsi3>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	4343      	muls	r3, r0
 8005af2:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 8005af4:	0003      	movs	r3, r0
 8005af6:	330e      	adds	r3, #14
    if( datarate <= 6 )
 8005af8:	2c06      	cmp	r4, #6
 8005afa:	d900      	bls.n	8005afe <SX1276GetTimeOnAir+0xb6>
    int32_t intermediate =
 8005afc:	3b02      	subs	r3, #2
    switch( bw )
 8005afe:	2d02      	cmp	r5, #2
 8005b00:	d811      	bhi.n	8005b26 <SX1276GetTimeOnAir+0xde>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b02:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8005b04:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b06:	3301      	adds	r3, #1
 8005b08:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8005b0a:	0080      	lsls	r0, r0, #2
 8005b0c:	4358      	muls	r0, r3
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <SX1276GetTimeOnAir+0xe0>)
 8005b10:	00ad      	lsls	r5, r5, #2
 8005b12:	58ec      	ldr	r4, [r5, r3]
 8005b14:	e7aa      	b.n	8005a6c <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8005b16:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005b18:	2d01      	cmp	r5, #1
 8005b1a:	d1ce      	bne.n	8005aba <SX1276GetTimeOnAir+0x72>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005b1c:	0023      	movs	r3, r4
 8005b1e:	3b0c      	subs	r3, #12
 8005b20:	4258      	negs	r0, r3
 8005b22:	4143      	adcs	r3, r0
 8005b24:	e7c8      	b.n	8005ab8 <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
 8005b26:	deff      	udf	#255	; 0xff
 8005b28:	0800a8d8 	.word	0x0800a8d8

08005b2c <SX1276GetWakeupTime>:
{
 8005b2c:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8005b2e:	f7fc fd8d 	bl	800264c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8005b32:	3002      	adds	r0, #2
}
 8005b34:	bd10      	pop	{r4, pc}

08005b36 <SX1276WriteBuffer>:
{
 8005b36:	b570      	push	{r4, r5, r6, lr}
 8005b38:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8005b3a:	2000      	movs	r0, #0
{
 8005b3c:	000c      	movs	r4, r1
 8005b3e:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 8005b40:	f7fc ff5e 	bl	8002a00 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8005b44:	2080      	movs	r0, #128	; 0x80
 8005b46:	4330      	orrs	r0, r6
 8005b48:	b280      	uxth	r0, r0
 8005b4a:	f7fc ff4b 	bl	80029e4 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005b4e:	1965      	adds	r5, r4, r5
 8005b50:	42ac      	cmp	r4, r5
 8005b52:	d103      	bne.n	8005b5c <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 8005b54:	2001      	movs	r0, #1
 8005b56:	f7fc ff53 	bl	8002a00 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8005b5c:	7820      	ldrb	r0, [r4, #0]
 8005b5e:	f7fc ff41 	bl	80029e4 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005b62:	3401      	adds	r4, #1
 8005b64:	e7f4      	b.n	8005b50 <SX1276WriteBuffer+0x1a>

08005b66 <SX1276Write>:
{
 8005b66:	b507      	push	{r0, r1, r2, lr}
 8005b68:	466b      	mov	r3, sp
 8005b6a:	71d9      	strb	r1, [r3, #7]
 8005b6c:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8005b6e:	2201      	movs	r2, #1
 8005b70:	0019      	movs	r1, r3
 8005b72:	f7ff ffe0 	bl	8005b36 <SX1276WriteBuffer>
}
 8005b76:	bd07      	pop	{r0, r1, r2, pc}

08005b78 <SX1276SetChannel>:
{
 8005b78:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005b7a:	4911      	ldr	r1, [pc, #68]	; (8005bc0 <SX1276SetChannel+0x48>)
{
 8005b7c:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005b7e:	f7fa fb6f 	bl	8000260 <__aeabi_uidivmod>
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <SX1276SetChannel+0x4c>)
 8005b84:	0208      	lsls	r0, r1, #8
 8005b86:	18c0      	adds	r0, r0, r3
 8005b88:	490d      	ldr	r1, [pc, #52]	; (8005bc0 <SX1276SetChannel+0x48>)
 8005b8a:	f7fa fae3 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005b8e:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005b90:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005b92:	0028      	movs	r0, r5
 8005b94:	f7fa fade 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8005b98:	0200      	lsls	r0, r0, #8
 8005b9a:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005b9e:	0c21      	lsrs	r1, r4, #16
 8005ba0:	2006      	movs	r0, #6
 8005ba2:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 8005ba4:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005ba6:	f7ff ffde 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8005baa:	0a21      	lsrs	r1, r4, #8
 8005bac:	2007      	movs	r0, #7
 8005bae:	b2c9      	uxtb	r1, r1
 8005bb0:	f7ff ffd9 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8005bb4:	2008      	movs	r0, #8
 8005bb6:	b2e1      	uxtb	r1, r4
 8005bb8:	f7ff ffd5 	bl	8005b66 <SX1276Write>
}
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	00003d09 	.word	0x00003d09
 8005bc4:	00001e84 	.word	0x00001e84
 8005bc8:	20000294 	.word	0x20000294

08005bcc <SX1276ReadBuffer>:
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 8005bd0:	2000      	movs	r0, #0
{
 8005bd2:	000c      	movs	r4, r1
 8005bd4:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 8005bd6:	f7fc ff13 	bl	8002a00 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 8005bda:	207f      	movs	r0, #127	; 0x7f
 8005bdc:	4028      	ands	r0, r5
 8005bde:	f7fc ff01 	bl	80029e4 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005be2:	19a6      	adds	r6, r4, r6
 8005be4:	42b4      	cmp	r4, r6
 8005be6:	d103      	bne.n	8005bf0 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 8005be8:	2001      	movs	r0, #1
 8005bea:	f7fc ff09 	bl	8002a00 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	f7fc fef7 	bl	80029e4 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8005bf6:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	e7f3      	b.n	8005be4 <SX1276ReadBuffer+0x18>

08005bfc <SX1276Read>:
{
 8005bfc:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8005bfe:	466b      	mov	r3, sp
 8005c00:	1ddc      	adds	r4, r3, #7
 8005c02:	2201      	movs	r2, #1
 8005c04:	0021      	movs	r1, r4
 8005c06:	f7ff ffe1 	bl	8005bcc <SX1276ReadBuffer>
    return data;
 8005c0a:	7820      	ldrb	r0, [r4, #0]
}
 8005c0c:	bd16      	pop	{r1, r2, r4, pc}
	...

08005c10 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 8005c10:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8005c12:	4c2c      	ldr	r4, [pc, #176]	; (8005cc4 <SX1276OnDio2Irq+0xb4>)
 8005c14:	7925      	ldrb	r5, [r4, #4]
 8005c16:	2d01      	cmp	r5, #1
 8005c18:	d002      	beq.n	8005c20 <SX1276OnDio2Irq+0x10>
 8005c1a:	2d02      	cmp	r5, #2
 8005c1c:	d049      	beq.n	8005cb2 <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005c20:	7963      	ldrb	r3, [r4, #5]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d017      	beq.n	8005c56 <SX1276OnDio2Irq+0x46>
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d1f9      	bne.n	8005c1e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005c2a:	3453      	adds	r4, #83	; 0x53
 8005c2c:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005c2e:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f4      	beq.n	8005c1e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005c34:	2012      	movs	r0, #18
 8005c36:	f7ff ff96 	bl	8005b66 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005c3a:	4b23      	ldr	r3, [pc, #140]	; (8005cc8 <SX1276OnDio2Irq+0xb8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ed      	beq.n	8005c1e <SX1276OnDio2Irq+0xe>
 8005c42:	695c      	ldr	r4, [r3, #20]
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d0ea      	beq.n	8005c1e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005c48:	201c      	movs	r0, #28
 8005c4a:	f7ff ffd7 	bl	8005bfc <SX1276Read>
 8005c4e:	233f      	movs	r3, #63	; 0x3f
 8005c50:	4018      	ands	r0, r3
 8005c52:	47a0      	blx	r4
}
 8005c54:	e7e3      	b.n	8005c1e <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005c56:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005c58:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005c5a:	3330      	adds	r3, #48	; 0x30
 8005c5c:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005c5e:	3631      	adds	r6, #49	; 0x31
 8005c60:	7833      	ldrb	r3, [r6, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1db      	bne.n	8005c1e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8005c66:	0020      	movs	r0, r4
 8005c68:	3068      	adds	r0, #104	; 0x68
 8005c6a:	f003 fd6d 	bl	8009748 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005c6e:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005c70:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005c72:	f7ff ffc3 	bl	8005bfc <SX1276Read>
 8005c76:	0023      	movs	r3, r4
 8005c78:	0840      	lsrs	r0, r0, #1
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4240      	negs	r0, r0
 8005c7e:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c80:	201b      	movs	r0, #27
 8005c82:	f7ff ffbb 	bl	8005bfc <SX1276Read>
 8005c86:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8005c88:	201c      	movs	r0, #28
 8005c8a:	f7ff ffb7 	bl	8005bfc <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c8e:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005c92:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005c94:	b2c0      	uxtb	r0, r0
 8005c96:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8005c98:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005c9a:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005c9c:	3080      	adds	r0, #128	; 0x80
 8005c9e:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005ca0:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005ca2:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005ca4:	200c      	movs	r0, #12
 8005ca6:	f7ff ffa9 	bl	8005bfc <SX1276Read>
 8005caa:	3438      	adds	r4, #56	; 0x38
 8005cac:	0940      	lsrs	r0, r0, #5
 8005cae:	7020      	strb	r0, [r4, #0]
 8005cb0:	e7b5      	b.n	8005c1e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8005cb2:	7963      	ldrb	r3, [r4, #5]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d1b2      	bne.n	8005c1e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005cb8:	3453      	adds	r4, #83	; 0x53
 8005cba:	7823      	ldrb	r3, [r4, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ae      	beq.n	8005c1e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005cc0:	0029      	movs	r1, r5
 8005cc2:	e7b7      	b.n	8005c34 <SX1276OnDio2Irq+0x24>
 8005cc4:	20000294 	.word	0x20000294
 8005cc8:	20000314 	.word	0x20000314
 8005ccc:	00003d09 	.word	0x00003d09

08005cd0 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <SX1276OnDio4Irq+0x18>)
 8005cd2:	795a      	ldrb	r2, [r3, #5]
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	d105      	bne.n	8005ce4 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005cd8:	3330      	adds	r3, #48	; 0x30
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	d101      	bne.n	8005ce4 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005ce0:	3201      	adds	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8005ce4:	4770      	bx	lr
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	20000294 	.word	0x20000294

08005cec <SX1276OnDio3Irq>:
{
 8005cec:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <SX1276OnDio3Irq+0x4c>)
 8005cf0:	795c      	ldrb	r4, [r3, #5]
 8005cf2:	2c01      	cmp	r4, #1
 8005cf4:	d112      	bne.n	8005d1c <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005cf6:	2012      	movs	r0, #18
 8005cf8:	f7ff ff80 	bl	8005bfc <SX1276Read>
 8005cfc:	0005      	movs	r5, r0
 8005cfe:	4e0f      	ldr	r6, [pc, #60]	; (8005d3c <SX1276OnDio3Irq+0x50>)
 8005d00:	4025      	ands	r5, r4
 8005d02:	4220      	tst	r0, r4
 8005d04:	d00b      	beq.n	8005d1e <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005d06:	2105      	movs	r1, #5
 8005d08:	2012      	movs	r0, #18
 8005d0a:	f7ff ff2c 	bl	8005b66 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d0e:	6833      	ldr	r3, [r6, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <SX1276OnDio3Irq+0x30>
 8005d14:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8005d16:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10b      	bne.n	8005d34 <SX1276OnDio3Irq+0x48>
}
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005d1e:	2104      	movs	r1, #4
 8005d20:	2012      	movs	r0, #18
 8005d22:	f7ff ff20 	bl	8005b66 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f7      	beq.n	8005d1c <SX1276OnDio3Irq+0x30>
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f4      	beq.n	8005d1c <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 8005d32:	0028      	movs	r0, r5
 8005d34:	4798      	blx	r3
}
 8005d36:	e7f1      	b.n	8005d1c <SX1276OnDio3Irq+0x30>
 8005d38:	20000294 	.word	0x20000294
 8005d3c:	20000314 	.word	0x20000314

08005d40 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8005d44:	2805      	cmp	r0, #5
 8005d46:	d111      	bne.n	8005d6c <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f7fc fc81 	bl	8002650 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7fc fdf6 	bl	8002940 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7ff ff51 	bl	8005bfc <SX1276Read>
 8005d5a:	2307      	movs	r3, #7
 8005d5c:	0001      	movs	r1, r0
 8005d5e:	4399      	bics	r1, r3
 8005d60:	4321      	orrs	r1, r4
 8005d62:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005d64:	2001      	movs	r0, #1
 8005d66:	f7ff fefe 	bl	8005b66 <SX1276Write>
}
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005d6c:	2009      	movs	r0, #9
 8005d6e:	f7ff ff45 	bl	8005bfc <SX1276Read>
 8005d72:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8005d74:	2001      	movs	r0, #1
 8005d76:	f7fc fc6b 	bl	8002650 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8005d7a:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005d7c:	062d      	lsls	r5, r5, #24
 8005d7e:	d400      	bmi.n	8005d82 <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8005d80:	2002      	movs	r0, #2
 8005d82:	f7fc fddd 	bl	8002940 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005d86:	2001      	movs	r0, #1
 8005d88:	f7ff ff38 	bl	8005bfc <SX1276Read>
 8005d8c:	2307      	movs	r3, #7
 8005d8e:	4398      	bics	r0, r3
 8005d90:	4304      	orrs	r4, r0
 8005d92:	b2e1      	uxtb	r1, r4
 8005d94:	e7e6      	b.n	8005d64 <SX1276SetOpMode.part.0+0x24>
	...

08005d98 <SX1276SetStby>:
{
 8005d98:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8005d9a:	4c09      	ldr	r4, [pc, #36]	; (8005dc0 <SX1276SetStby+0x28>)
 8005d9c:	1d20      	adds	r0, r4, #4
 8005d9e:	f003 fcd3 	bl	8009748 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8005da2:	0020      	movs	r0, r4
 8005da4:	301c      	adds	r0, #28
 8005da6:	f003 fccf 	bl	8009748 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8005daa:	4c06      	ldr	r4, [pc, #24]	; (8005dc4 <SX1276SetStby+0x2c>)
 8005dac:	0020      	movs	r0, r4
 8005dae:	3068      	adds	r0, #104	; 0x68
 8005db0:	f003 fcca 	bl	8009748 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 8005db4:	2001      	movs	r0, #1
 8005db6:	f7ff ffc3 	bl	8005d40 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	7123      	strb	r3, [r4, #4]
}
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	20000314 	.word	0x20000314
 8005dc4:	20000294 	.word	0x20000294

08005dc8 <SX1276SetRx>:
    TimerStop( &TxTimeoutTimer );
 8005dc8:	4b7b      	ldr	r3, [pc, #492]	; (8005fb8 <SX1276SetRx+0x1f0>)
{
 8005dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dcc:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 8005dce:	0018      	movs	r0, r3
 8005dd0:	301c      	adds	r0, #28
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f003 fcb8 	bl	8009748 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8005dd8:	4c78      	ldr	r4, [pc, #480]	; (8005fbc <SX1276SetRx+0x1f4>)
 8005dda:	7965      	ldrb	r5, [r4, #5]
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	d02f      	beq.n	8005e40 <SX1276SetRx+0x78>
 8005de0:	2600      	movs	r6, #0
 8005de2:	2d01      	cmp	r5, #1
 8005de4:	d151      	bne.n	8005e8a <SX1276SetRx+0xc2>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005de6:	0023      	movs	r3, r4
 8005de8:	3355      	adds	r3, #85	; 0x55
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005dee:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d100      	bne.n	8005df6 <SX1276SetRx+0x2e>
 8005df4:	e06f      	b.n	8005ed6 <SX1276SetRx+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005df6:	f7ff ff01 	bl	8005bfc <SX1276Read>
 8005dfa:	4330      	orrs	r0, r6
 8005dfc:	b2c1      	uxtb	r1, r0
 8005dfe:	2033      	movs	r0, #51	; 0x33
 8005e00:	f7ff feb1 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005e04:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005e06:	203b      	movs	r0, #59	; 0x3b
 8005e08:	f7ff fead 	bl	8005b66 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005e0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005e0e:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d900      	bls.n	8005e16 <SX1276SetRx+0x4e>
 8005e14:	e0b7      	b.n	8005f86 <SX1276SetRx+0x1be>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005e16:	f7ff fef1 	bl	8005bfc <SX1276Read>
 8005e1a:	217f      	movs	r1, #127	; 0x7f
 8005e1c:	4001      	ands	r1, r0
 8005e1e:	2031      	movs	r0, #49	; 0x31
 8005e20:	f7ff fea1 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8005e24:	2030      	movs	r0, #48	; 0x30
 8005e26:	2100      	movs	r1, #0
 8005e28:	f7ff fe9d 	bl	8005b66 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8005e2c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005e2e:	2808      	cmp	r0, #8
 8005e30:	d864      	bhi.n	8005efc <SX1276SetRx+0x134>
 8005e32:	f7fa f97b 	bl	800012c <__gnu_thumb1_case_uqi>
 8005e36:	805a      	.short	0x805a
 8005e38:	9c958e87 	.word	0x9c958e87
 8005e3c:	a3a3      	.short	0xa3a3
 8005e3e:	a3          	.byte	0xa3
 8005e3f:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005e40:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e42:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005e44:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e46:	f7ff fed9 	bl	8005bfc <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005e4a:	2303      	movs	r3, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e4c:	210c      	movs	r1, #12
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005e4e:	4018      	ands	r0, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005e50:	4301      	orrs	r1, r0
 8005e52:	2040      	movs	r0, #64	; 0x40
 8005e54:	f7ff fe87 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005e58:	2041      	movs	r0, #65	; 0x41
 8005e5a:	f7ff fecf 	bl	8005bfc <SX1276Read>
 8005e5e:	213f      	movs	r1, #63	; 0x3f
 8005e60:	4249      	negs	r1, r1
 8005e62:	4301      	orrs	r1, r0
 8005e64:	b2c9      	uxtb	r1, r1
 8005e66:	2041      	movs	r0, #65	; 0x41
 8005e68:	f7ff fe7d 	bl	8005b66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005e6c:	2035      	movs	r0, #53	; 0x35
 8005e6e:	f7ff fec5 	bl	8005bfc <SX1276Read>
 8005e72:	233f      	movs	r3, #63	; 0x3f
 8005e74:	4018      	ands	r0, r3
 8005e76:	0023      	movs	r3, r4
 8005e78:	333e      	adds	r3, #62	; 0x3e
 8005e7a:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8005e7c:	211e      	movs	r1, #30
 8005e7e:	200d      	movs	r0, #13
 8005e80:	f7ff fe71 	bl	8005b66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005e84:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005e86:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005e88:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	484c      	ldr	r0, [pc, #304]	; (8005fc0 <SX1276SetRx+0x1f8>)
 8005e90:	0052      	lsls	r2, r2, #1
 8005e92:	f004 f84b 	bl	8009f2c <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8005e96:	2301      	movs	r3, #1
 8005e98:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8005e9a:	2f00      	cmp	r7, #0
 8005e9c:	d008      	beq.n	8005eb0 <SX1276SetRx+0xe8>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005e9e:	9d01      	ldr	r5, [sp, #4]
 8005ea0:	0039      	movs	r1, r7
 8005ea2:	3504      	adds	r5, #4
 8005ea4:	0028      	movs	r0, r5
 8005ea6:	f003 fcd9 	bl	800985c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005eaa:	0028      	movs	r0, r5
 8005eac:	f003 fc9e 	bl	80097ec <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8005eb0:	7963      	ldrb	r3, [r4, #5]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d000      	beq.n	8005eb8 <SX1276SetRx+0xf0>
 8005eb6:	e077      	b.n	8005fa8 <SX1276SetRx+0x1e0>
    if( opMode == RF_OPMODE_SLEEP )
 8005eb8:	2005      	movs	r0, #5
 8005eba:	f7ff ff41 	bl	8005d40 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d108      	bne.n	8005ed4 <SX1276SetRx+0x10c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8005ec2:	0025      	movs	r5, r4
 8005ec4:	3568      	adds	r5, #104	; 0x68
 8005ec6:	0028      	movs	r0, r5
 8005ec8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005eca:	f003 fcc7 	bl	800985c <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8005ece:	0028      	movs	r0, r5
 8005ed0:	f003 fc8c 	bl	80097ec <UTIL_TIMER_Start>
}
 8005ed4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8005ed6:	f7ff fe91 	bl	8005bfc <SX1276Read>
 8005eda:	43b0      	bics	r0, r6
 8005edc:	4305      	orrs	r5, r0
 8005ede:	b2e9      	uxtb	r1, r5
 8005ee0:	2033      	movs	r0, #51	; 0x33
 8005ee2:	f7ff fe40 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005ee6:	211d      	movs	r1, #29
 8005ee8:	e78d      	b.n	8005e06 <SX1276SetRx+0x3e>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8005eea:	202f      	movs	r0, #47	; 0x2f
 8005eec:	2148      	movs	r1, #72	; 0x48
 8005eee:	f7ff fe3a 	bl	8005b66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8005ef2:	68a0      	ldr	r0, [r4, #8]
 8005ef4:	4b33      	ldr	r3, [pc, #204]	; (8005fc4 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005ef6:	18c0      	adds	r0, r0, r3
 8005ef8:	f7ff fe3e 	bl	8005b78 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8005efc:	0023      	movs	r3, r4
 8005efe:	3356      	adds	r3, #86	; 0x56
 8005f00:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005f02:	0023      	movs	r3, r4
 8005f04:	3353      	adds	r3, #83	; 0x53
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d044      	beq.n	8005f96 <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f0c:	211d      	movs	r1, #29
 8005f0e:	2011      	movs	r0, #17
 8005f10:	f7ff fe29 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8005f14:	2040      	movs	r0, #64	; 0x40
 8005f16:	f7ff fe71 	bl	8005bfc <SX1276Read>
 8005f1a:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005f1c:	4001      	ands	r1, r0
 8005f1e:	2040      	movs	r0, #64	; 0x40
 8005f20:	f7ff fe21 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8005f24:	2100      	movs	r1, #0
 8005f26:	200f      	movs	r0, #15
 8005f28:	f7ff fe1d 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	200d      	movs	r0, #13
 8005f30:	f7ff fe19 	bl	8005b66 <SX1276Write>
        break;
 8005f34:	e7a9      	b.n	8005e8a <SX1276SetRx+0xc2>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f36:	202f      	movs	r0, #47	; 0x2f
 8005f38:	2144      	movs	r1, #68	; 0x44
 8005f3a:	f7ff fe14 	bl	8005b66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8005f3e:	68a0      	ldr	r0, [r4, #8]
 8005f40:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <SX1276SetRx+0x200>)
 8005f42:	e7d8      	b.n	8005ef6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f44:	202f      	movs	r0, #47	; 0x2f
 8005f46:	2144      	movs	r1, #68	; 0x44
 8005f48:	f7ff fe0d 	bl	8005b66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8005f4c:	68a0      	ldr	r0, [r4, #8]
 8005f4e:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <SX1276SetRx+0x204>)
 8005f50:	e7d1      	b.n	8005ef6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f52:	202f      	movs	r0, #47	; 0x2f
 8005f54:	2144      	movs	r1, #68	; 0x44
 8005f56:	f7ff fe06 	bl	8005b66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8005f5a:	68a0      	ldr	r0, [r4, #8]
 8005f5c:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <SX1276SetRx+0x208>)
 8005f5e:	e7ca      	b.n	8005ef6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f60:	202f      	movs	r0, #47	; 0x2f
 8005f62:	2144      	movs	r1, #68	; 0x44
 8005f64:	f7ff fdff 	bl	8005b66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8005f68:	68a0      	ldr	r0, [r4, #8]
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <SX1276SetRx+0x20c>)
 8005f6c:	e7c3      	b.n	8005ef6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005f6e:	202f      	movs	r0, #47	; 0x2f
 8005f70:	2144      	movs	r1, #68	; 0x44
 8005f72:	f7ff fdf8 	bl	8005b66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005f76:	68a0      	ldr	r0, [r4, #8]
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <SX1276SetRx+0x210>)
 8005f7a:	e7bc      	b.n	8005ef6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8005f7c:	2140      	movs	r1, #64	; 0x40
 8005f7e:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8005f80:	f7ff fdf1 	bl	8005b66 <SX1276Write>
 8005f84:	e7ba      	b.n	8005efc <SX1276SetRx+0x134>
 8005f86:	f7ff fe39 	bl	8005bfc <SX1276Read>
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	4249      	negs	r1, r1
 8005f8e:	4301      	orrs	r1, r0
 8005f90:	b2c9      	uxtb	r1, r1
 8005f92:	2031      	movs	r0, #49	; 0x31
 8005f94:	e7f4      	b.n	8005f80 <SX1276SetRx+0x1b8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f96:	211f      	movs	r1, #31
 8005f98:	2011      	movs	r0, #17
 8005f9a:	f7ff fde4 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005f9e:	2040      	movs	r0, #64	; 0x40
 8005fa0:	f7ff fe2c 	bl	8005bfc <SX1276Read>
 8005fa4:	213f      	movs	r1, #63	; 0x3f
 8005fa6:	e7b9      	b.n	8005f1c <SX1276SetRx+0x154>
        if( rxContinuous == true )
 8005fa8:	2005      	movs	r0, #5
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	d100      	bne.n	8005fb0 <SX1276SetRx+0x1e8>
    if( opMode == RF_OPMODE_SLEEP )
 8005fae:	2006      	movs	r0, #6
 8005fb0:	f7ff fec6 	bl	8005d40 <SX1276SetOpMode.part.0>
}
 8005fb4:	e78e      	b.n	8005ed4 <SX1276SetRx+0x10c>
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	20000314 	.word	0x20000314
 8005fbc:	20000294 	.word	0x20000294
 8005fc0:	20000348 	.word	0x20000348
 8005fc4:	00001e82 	.word	0x00001e82
 8005fc8:	000028b4 	.word	0x000028b4
 8005fcc:	00003d04 	.word	0x00003d04
 8005fd0:	0000515e 	.word	0x0000515e
 8005fd4:	00007a12 	.word	0x00007a12
 8005fd8:	0000a2c6 	.word	0x0000a2c6

08005fdc <SX1276StartCad>:
{
 8005fdc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005fde:	4c0b      	ldr	r4, [pc, #44]	; (800600c <SX1276StartCad+0x30>)
 8005fe0:	7963      	ldrb	r3, [r4, #5]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d110      	bne.n	8006008 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005fe6:	21fa      	movs	r1, #250	; 0xfa
 8005fe8:	2011      	movs	r0, #17
 8005fea:	f7ff fdbc 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8005fee:	2040      	movs	r0, #64	; 0x40
 8005ff0:	f7ff fe04 	bl	8005bfc <SX1276Read>
 8005ff4:	2503      	movs	r5, #3
 8005ff6:	43a8      	bics	r0, r5
 8005ff8:	b2c1      	uxtb	r1, r0
 8005ffa:	2040      	movs	r0, #64	; 0x40
 8005ffc:	f7ff fdb3 	bl	8005b66 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8006000:	2007      	movs	r0, #7
 8006002:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 8006004:	f7ff fe9c 	bl	8005d40 <SX1276SetOpMode.part.0>
}
 8006008:	bd70      	pop	{r4, r5, r6, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20000294 	.word	0x20000294

08006010 <SX1276ReadRssi>:
{
 8006010:	b510      	push	{r4, lr}
    switch( modem )
 8006012:	2800      	cmp	r0, #0
 8006014:	d004      	beq.n	8006020 <SX1276ReadRssi+0x10>
 8006016:	2801      	cmp	r0, #1
 8006018:	d00a      	beq.n	8006030 <SX1276ReadRssi+0x20>
 800601a:	2001      	movs	r0, #1
 800601c:	4240      	negs	r0, r0
}
 800601e:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006020:	2011      	movs	r0, #17
 8006022:	f7ff fdeb 	bl	8005bfc <SX1276Read>
 8006026:	0840      	lsrs	r0, r0, #1
 8006028:	b2c0      	uxtb	r0, r0
 800602a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800602c:	b200      	sxth	r0, r0
 800602e:	e7f6      	b.n	800601e <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <SX1276ReadRssi+0x3c>)
 8006032:	4a07      	ldr	r2, [pc, #28]	; (8006050 <SX1276ReadRssi+0x40>)
 8006034:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006036:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006038:	4293      	cmp	r3, r2
 800603a:	d903      	bls.n	8006044 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800603c:	f7ff fdde 	bl	8005bfc <SX1276Read>
 8006040:	389d      	subs	r0, #157	; 0x9d
 8006042:	e7f3      	b.n	800602c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006044:	f7ff fdda 	bl	8005bfc <SX1276Read>
 8006048:	38a4      	subs	r0, #164	; 0xa4
 800604a:	e7ef      	b.n	800602c <SX1276ReadRssi+0x1c>
 800604c:	20000294 	.word	0x20000294
 8006050:	1f4add40 	.word	0x1f4add40

08006054 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8006054:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006056:	2001      	movs	r0, #1
 8006058:	f7ff fdd0 	bl	8005bfc <SX1276Read>
 800605c:	21f8      	movs	r1, #248	; 0xf8
 800605e:	4001      	ands	r1, r0
 8006060:	2001      	movs	r0, #1
 8006062:	f7ff fd80 	bl	8005b66 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 8006066:	2000      	movs	r0, #0
 8006068:	f7fc fc6a 	bl	8002940 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800606c:	2000      	movs	r0, #0
 800606e:	f7fc faef 	bl	8002650 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 8006072:	bd10      	pop	{r4, pc}

08006074 <SX1276SetModem>:
{
 8006074:	b510      	push	{r4, lr}
 8006076:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8006078:	2001      	movs	r0, #1
 800607a:	f7ff fdbf 	bl	8005bfc <SX1276Read>
 800607e:	b2c0      	uxtb	r0, r0
 8006080:	4b16      	ldr	r3, [pc, #88]	; (80060dc <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 8006082:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 8006084:	42a0      	cmp	r0, r4
 8006086:	d101      	bne.n	800608c <SX1276SetModem+0x18>
 8006088:	7158      	strb	r0, [r3, #5]
}
 800608a:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800608c:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800608e:	2c01      	cmp	r4, #1
 8006090:	d012      	beq.n	80060b8 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006092:	f7ff ffdf 	bl	8006054 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006096:	2001      	movs	r0, #1
 8006098:	f7ff fdb0 	bl	8005bfc <SX1276Read>
 800609c:	217f      	movs	r1, #127	; 0x7f
 800609e:	4001      	ands	r1, r0
 80060a0:	2001      	movs	r0, #1
 80060a2:	f7ff fd60 	bl	8005b66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80060a6:	2100      	movs	r1, #0
 80060a8:	2040      	movs	r0, #64	; 0x40
 80060aa:	f7ff fd5c 	bl	8005b66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80060ae:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80060b0:	2041      	movs	r0, #65	; 0x41
 80060b2:	f7ff fd58 	bl	8005b66 <SX1276Write>
        break;
 80060b6:	e7e8      	b.n	800608a <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80060b8:	f7ff ffcc 	bl	8006054 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80060bc:	0020      	movs	r0, r4
 80060be:	f7ff fd9d 	bl	8005bfc <SX1276Read>
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	4249      	negs	r1, r1
 80060c6:	4301      	orrs	r1, r0
 80060c8:	b2c9      	uxtb	r1, r1
 80060ca:	0020      	movs	r0, r4
 80060cc:	f7ff fd4b 	bl	8005b66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80060d0:	2100      	movs	r1, #0
 80060d2:	2040      	movs	r0, #64	; 0x40
 80060d4:	f7ff fd47 	bl	8005b66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80060d8:	2100      	movs	r1, #0
 80060da:	e7e9      	b.n	80060b0 <SX1276SetModem+0x3c>
 80060dc:	20000294 	.word	0x20000294

080060e0 <SX1276SetMaxPayloadLength>:
{
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	0004      	movs	r4, r0
 80060e4:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80060e6:	f7ff ffc5 	bl	8006074 <SX1276SetModem>
    switch( modem )
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d002      	beq.n	80060f4 <SX1276SetMaxPayloadLength+0x14>
 80060ee:	2c01      	cmp	r4, #1
 80060f0:	d00a      	beq.n	8006108 <SX1276SetMaxPayloadLength+0x28>
}
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <SX1276SetMaxPayloadLength+0x30>)
 80060f6:	3303      	adds	r3, #3
 80060f8:	7fdb      	ldrb	r3, [r3, #31]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f9      	bne.n	80060f2 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80060fe:	0029      	movs	r1, r5
 8006100:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006102:	f7ff fd30 	bl	8005b66 <SX1276Write>
}
 8006106:	e7f4      	b.n	80060f2 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006108:	0029      	movs	r1, r5
 800610a:	2023      	movs	r0, #35	; 0x23
 800610c:	e7f9      	b.n	8006102 <SX1276SetMaxPayloadLength+0x22>
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	20000294 	.word	0x20000294

08006114 <SX1276SetPublicNetwork>:
{
 8006114:	b510      	push	{r4, lr}
 8006116:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8006118:	2001      	movs	r0, #1
 800611a:	f7ff ffab 	bl	8006074 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006120:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006122:	335c      	adds	r3, #92	; 0x5c
 8006124:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8006126:	2c00      	cmp	r4, #0
 8006128:	d100      	bne.n	800612c <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800612a:	2112      	movs	r1, #18
 800612c:	2039      	movs	r0, #57	; 0x39
 800612e:	f7ff fd1a 	bl	8005b66 <SX1276Write>
}
 8006132:	bd10      	pop	{r4, pc}
 8006134:	20000294 	.word	0x20000294

08006138 <SX1276SetRxConfig>:
{
 8006138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613a:	b08b      	sub	sp, #44	; 0x2c
 800613c:	9305      	str	r3, [sp, #20]
 800613e:	ab10      	add	r3, sp, #64	; 0x40
 8006140:	cb80      	ldmia	r3!, {r7}
 8006142:	0014      	movs	r4, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	aa0a      	add	r2, sp, #40	; 0x28
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	ab12      	add	r3, sp, #72	; 0x48
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	0005      	movs	r5, r0
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	ab13      	add	r3, sp, #76	; 0x4c
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	000e      	movs	r6, r1
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	ab14      	add	r3, sp, #80	; 0x50
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	ab15      	add	r3, sp, #84	; 0x54
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	ab16      	add	r3, sp, #88	; 0x58
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	9308      	str	r3, [sp, #32]
 800616c:	ab17      	add	r3, sp, #92	; 0x5c
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	9309      	str	r3, [sp, #36]	; 0x24
 8006172:	2319      	movs	r3, #25
 8006174:	189b      	adds	r3, r3, r2
 8006176:	7fdb      	ldrb	r3, [r3, #31]
 8006178:	9306      	str	r3, [sp, #24]
 800617a:	231d      	movs	r3, #29
 800617c:	189b      	adds	r3, r3, r2
 800617e:	7fdb      	ldrb	r3, [r3, #31]
 8006180:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 8006182:	f7ff ff77 	bl	8006074 <SX1276SetModem>
    switch( modem )
 8006186:	2d00      	cmp	r5, #0
 8006188:	d003      	beq.n	8006192 <SX1276SetRxConfig+0x5a>
 800618a:	2d01      	cmp	r5, #1
 800618c:	d067      	beq.n	800625e <SX1276SetRxConfig+0x126>
}
 800618e:	b00b      	add	sp, #44	; 0x2c
 8006190:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8006192:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006194:	4d99      	ldr	r5, [pc, #612]	; (80063fc <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006196:	9a01      	ldr	r2, [sp, #4]
 8006198:	1ceb      	adds	r3, r5, #3
 800619a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800619c:	9a02      	ldr	r2, [sp, #8]
 800619e:	1d2b      	adds	r3, r5, #4
 80061a0:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80061a2:	9a03      	ldr	r2, [sp, #12]
 80061a4:	1d6b      	adds	r3, r5, #5
 80061a6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80061a8:	9a06      	ldr	r2, [sp, #24]
 80061aa:	1dab      	adds	r3, r5, #6
 80061ac:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80061ae:	9a07      	ldr	r2, [sp, #28]
 80061b0:	1deb      	adds	r3, r5, #7
 80061b2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80061b4:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061b6:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80061b8:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	0021      	movs	r1, r4
 80061be:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 80061c0:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80061c2:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80061c4:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061c6:	f7f9 ffc5 	bl	8000154 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80061ca:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80061cc:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80061ce:	488c      	ldr	r0, [pc, #560]	; (8006400 <SX1276SetRxConfig+0x2c8>)
 80061d0:	f7f9 ffc0 	bl	8000154 <__udivsi3>
 80061d4:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80061d6:	0a01      	lsrs	r1, r0, #8
 80061d8:	b2c9      	uxtb	r1, r1
 80061da:	2002      	movs	r0, #2
 80061dc:	f7ff fcc3 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80061e0:	b2e1      	uxtb	r1, r4
 80061e2:	2003      	movs	r0, #3
 80061e4:	f7ff fcbf 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80061e8:	0030      	movs	r0, r6
 80061ea:	f7ff fc17 	bl	8005a1c <GetFskBandwidthRegValue>
 80061ee:	0001      	movs	r1, r0
 80061f0:	2012      	movs	r0, #18
 80061f2:	f7ff fcb8 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80061f6:	0038      	movs	r0, r7
 80061f8:	f7ff fc10 	bl	8005a1c <GetFskBandwidthRegValue>
 80061fc:	0001      	movs	r1, r0
 80061fe:	2013      	movs	r0, #19
 8006200:	f7ff fcb1 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	2025      	movs	r0, #37	; 0x25
 8006208:	0a19      	lsrs	r1, r3, #8
 800620a:	f7ff fcac 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800620e:	466b      	mov	r3, sp
 8006210:	2026      	movs	r0, #38	; 0x26
 8006212:	7819      	ldrb	r1, [r3, #0]
 8006214:	f7ff fca7 	bl	8005b66 <SX1276Write>
            if( fixLen == 1 )
 8006218:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800621a:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800621c:	2b00      	cmp	r3, #0
 800621e:	d100      	bne.n	8006222 <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006220:	21ff      	movs	r1, #255	; 0xff
 8006222:	2032      	movs	r0, #50	; 0x32
 8006224:	f7ff fc9f 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006228:	2030      	movs	r0, #48	; 0x30
 800622a:	f7ff fce7 	bl	8005bfc <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800622e:	2101      	movs	r1, #1
 8006230:	9b01      	ldr	r3, [sp, #4]
 8006232:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 8006234:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006236:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8006238:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800623a:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800623c:	236f      	movs	r3, #111	; 0x6f
 800623e:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006240:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8006242:	b2c9      	uxtb	r1, r1
 8006244:	2030      	movs	r0, #48	; 0x30
 8006246:	f7ff fc8e 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800624a:	2031      	movs	r0, #49	; 0x31
 800624c:	f7ff fcd6 	bl	8005bfc <SX1276Read>
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	4301      	orrs	r1, r0
 8006254:	2031      	movs	r0, #49	; 0x31
 8006256:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006258:	f7ff fc85 	bl	8005b66 <SX1276Write>
}
 800625c:	e797      	b.n	800618e <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800625e:	2e02      	cmp	r6, #2
 8006260:	d900      	bls.n	8006264 <SX1276SetRxConfig+0x12c>
                while( 1 );
 8006262:	e7fe      	b.n	8006262 <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006264:	4b65      	ldr	r3, [pc, #404]	; (80063fc <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8006266:	9905      	ldr	r1, [sp, #20]
 8006268:	001a      	movs	r2, r3
 800626a:	324d      	adds	r2, #77	; 0x4d
 800626c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800626e:	001a      	movs	r2, r3
 8006270:	9900      	ldr	r1, [sp, #0]
 8006272:	324e      	adds	r2, #78	; 0x4e
 8006274:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006276:	001a      	movs	r2, r3
 8006278:	9901      	ldr	r1, [sp, #4]
 800627a:	3250      	adds	r2, #80	; 0x50
 800627c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800627e:	001a      	movs	r2, r3
 8006280:	9902      	ldr	r1, [sp, #8]
 8006282:	3251      	adds	r2, #81	; 0x51
 8006284:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006286:	001a      	movs	r2, r3
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	3252      	adds	r2, #82	; 0x52
 800628c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800628e:	001a      	movs	r2, r3
 8006290:	9908      	ldr	r1, [sp, #32]
 8006292:	3253      	adds	r2, #83	; 0x53
 8006294:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006296:	001a      	movs	r2, r3
 8006298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800629a:	3254      	adds	r2, #84	; 0x54
 800629c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800629e:	001a      	movs	r2, r3
 80062a0:	9906      	ldr	r1, [sp, #24]
 80062a2:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80062a4:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80062a6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80062a8:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80062aa:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80062ac:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80062ae:	3356      	adds	r3, #86	; 0x56
 80062b0:	0025      	movs	r5, r4
 80062b2:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 80062b4:	2c06      	cmp	r4, #6
 80062b6:	d300      	bcc.n	80062ba <SX1276SetRxConfig+0x182>
 80062b8:	e081      	b.n	80063be <SX1276SetRxConfig+0x286>
 80062ba:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80062bc:	2f07      	cmp	r7, #7
 80062be:	d000      	beq.n	80062c2 <SX1276SetRxConfig+0x18a>
 80062c0:	e082      	b.n	80063c8 <SX1276SetRxConfig+0x290>
 80062c2:	002a      	movs	r2, r5
 80062c4:	2300      	movs	r3, #0
 80062c6:	2101      	movs	r1, #1
 80062c8:	3a0b      	subs	r2, #11
 80062ca:	4291      	cmp	r1, r2
 80062cc:	415b      	adcs	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4a4c      	ldr	r2, [pc, #304]	; (8006404 <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062d2:	201d      	movs	r0, #29
 80062d4:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062d6:	4e49      	ldr	r6, [pc, #292]	; (80063fc <SX1276SetRxConfig+0x2c4>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062d8:	f7ff fc90 	bl	8005bfc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062dc:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062de:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062e0:	0059      	lsls	r1, r3, #1
 80062e2:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062e4:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062e6:	4319      	orrs	r1, r3
 80062e8:	013b      	lsls	r3, r7, #4
 80062ea:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062ec:	b2c9      	uxtb	r1, r1
 80062ee:	f7ff fc3a 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80062f2:	201e      	movs	r0, #30
 80062f4:	f7ff fc82 	bl	8005bfc <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062f8:	9b04      	ldr	r3, [sp, #16]
 80062fa:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062fc:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062fe:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006300:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006302:	4319      	orrs	r1, r3
 8006304:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8006306:	2508      	movs	r5, #8
 8006308:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800630a:	4301      	orrs	r1, r0
 800630c:	b2c9      	uxtb	r1, r1
 800630e:	201e      	movs	r0, #30
 8006310:	f7ff fc29 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006314:	2026      	movs	r0, #38	; 0x26
 8006316:	f7ff fc71 	bl	8005bfc <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800631a:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800631c:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800631e:	7819      	ldrb	r1, [r3, #0]
 8006320:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006322:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006324:	b2c9      	uxtb	r1, r1
 8006326:	2026      	movs	r0, #38	; 0x26
 8006328:	f7ff fc1d 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800632c:	466b      	mov	r3, sp
 800632e:	201f      	movs	r0, #31
 8006330:	7c19      	ldrb	r1, [r3, #16]
 8006332:	f7ff fc18 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006336:	9b00      	ldr	r3, [sp, #0]
 8006338:	2020      	movs	r0, #32
 800633a:	0a19      	lsrs	r1, r3, #8
 800633c:	f7ff fc13 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006340:	466b      	mov	r3, sp
 8006342:	2021      	movs	r0, #33	; 0x21
 8006344:	7819      	ldrb	r1, [r3, #0]
 8006346:	f7ff fc0e 	bl	8005b66 <SX1276Write>
            if( fixLen == 1 )
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <SX1276SetRxConfig+0x220>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8006350:	2022      	movs	r0, #34	; 0x22
 8006352:	9902      	ldr	r1, [sp, #8]
 8006354:	f7ff fc07 	bl	8005b66 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006358:	0033      	movs	r3, r6
 800635a:	3353      	adds	r3, #83	; 0x53
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00f      	beq.n	8006382 <SX1276SetRxConfig+0x24a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006362:	2044      	movs	r0, #68	; 0x44
 8006364:	f7ff fc4a 	bl	8005bfc <SX1276Read>
 8006368:	2180      	movs	r1, #128	; 0x80
 800636a:	4249      	negs	r1, r1
 800636c:	4301      	orrs	r1, r0
 800636e:	b2c9      	uxtb	r1, r1
 8006370:	2044      	movs	r0, #68	; 0x44
 8006372:	f7ff fbf8 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006376:	0033      	movs	r3, r6
 8006378:	3354      	adds	r3, #84	; 0x54
 800637a:	2024      	movs	r0, #36	; 0x24
 800637c:	7819      	ldrb	r1, [r3, #0]
 800637e:	f7ff fbf2 	bl	8005b66 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006382:	2f09      	cmp	r7, #9
 8006384:	d12c      	bne.n	80063e0 <SX1276SetRxConfig+0x2a8>
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <SX1276SetRxConfig+0x2d0>)
 8006388:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800638a:	2102      	movs	r1, #2
 800638c:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800638e:	429a      	cmp	r2, r3
 8006390:	d922      	bls.n	80063d8 <SX1276SetRxConfig+0x2a0>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006392:	f7ff fbe8 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8006396:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006398:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800639a:	f7ff fbe4 	bl	8005b66 <SX1276Write>
            if( datarate == 6 )
 800639e:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063a0:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80063a2:	2c06      	cmp	r4, #6
 80063a4:	d81f      	bhi.n	80063e6 <SX1276SetRxConfig+0x2ae>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063a6:	f7ff fc29 	bl	8005bfc <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063aa:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063ac:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063ae:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063b0:	b2c9      	uxtb	r1, r1
 80063b2:	2031      	movs	r0, #49	; 0x31
 80063b4:	f7ff fbd7 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063b8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063ba:	2037      	movs	r0, #55	; 0x37
 80063bc:	e74c      	b.n	8006258 <SX1276SetRxConfig+0x120>
 80063be:	2c0c      	cmp	r4, #12
 80063c0:	d800      	bhi.n	80063c4 <SX1276SetRxConfig+0x28c>
 80063c2:	e77b      	b.n	80062bc <SX1276SetRxConfig+0x184>
 80063c4:	250c      	movs	r5, #12
 80063c6:	e779      	b.n	80062bc <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80063c8:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80063ca:	2f08      	cmp	r7, #8
 80063cc:	d180      	bne.n	80062d0 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80063ce:	330b      	adds	r3, #11
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	419b      	sbcs	r3, r3
 80063d4:	425b      	negs	r3, r3
 80063d6:	e77b      	b.n	80062d0 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80063d8:	f7ff fbc5 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80063dc:	217f      	movs	r1, #127	; 0x7f
 80063de:	e7db      	b.n	8006398 <SX1276SetRxConfig+0x260>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80063e0:	2103      	movs	r1, #3
 80063e2:	2036      	movs	r0, #54	; 0x36
 80063e4:	e7d9      	b.n	800639a <SX1276SetRxConfig+0x262>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063e6:	f7ff fc09 	bl	8005bfc <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063ea:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063ec:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063ee:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063f0:	b2c9      	uxtb	r1, r1
 80063f2:	2031      	movs	r0, #49	; 0x31
 80063f4:	f7ff fbb7 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063f8:	210a      	movs	r1, #10
 80063fa:	e7de      	b.n	80063ba <SX1276SetRxConfig+0x282>
 80063fc:	20000294 	.word	0x20000294
 8006400:	01e84800 	.word	0x01e84800
 8006404:	200002e0 	.word	0x200002e0
 8006408:	1f4add40 	.word	0x1f4add40

0800640c <SX1276SetSleep>:
{
 800640c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800640e:	4c0a      	ldr	r4, [pc, #40]	; (8006438 <SX1276SetSleep+0x2c>)
 8006410:	1d20      	adds	r0, r4, #4
 8006412:	f003 f999 	bl	8009748 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8006416:	0020      	movs	r0, r4
 8006418:	301c      	adds	r0, #28
 800641a:	f003 f995 	bl	8009748 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800641e:	4c07      	ldr	r4, [pc, #28]	; (800643c <SX1276SetSleep+0x30>)
 8006420:	0020      	movs	r0, r4
 8006422:	3068      	adds	r0, #104	; 0x68
 8006424:	f003 f990 	bl	8009748 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006428:	f7ff fe14 	bl	8006054 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800642c:	2000      	movs	r0, #0
 800642e:	f7fc f90f 	bl	8002650 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 8006432:	2300      	movs	r3, #0
 8006434:	7123      	strb	r3, [r4, #4]
}
 8006436:	bd10      	pop	{r4, pc}
 8006438:	20000314 	.word	0x20000314
 800643c:	20000294 	.word	0x20000294

08006440 <SX1276IsChannelFree>:
{
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	0007      	movs	r7, r0
 8006444:	000c      	movs	r4, r1
 8006446:	0016      	movs	r6, r2
 8006448:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800644a:	f7ff ffdf 	bl	800640c <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800644e:	2000      	movs	r0, #0
 8006450:	f7ff fe10 	bl	8006074 <SX1276SetModem>
    SX1276SetChannel( freq );
 8006454:	0038      	movs	r0, r7
 8006456:	f7ff fb8f 	bl	8005b78 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800645a:	0020      	movs	r0, r4
 800645c:	f7ff fade 	bl	8005a1c <GetFskBandwidthRegValue>
 8006460:	0004      	movs	r4, r0
 8006462:	0001      	movs	r1, r0
 8006464:	2012      	movs	r0, #18
 8006466:	f7ff fb7e 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800646a:	0021      	movs	r1, r4
 800646c:	2013      	movs	r0, #19
 800646e:	f7ff fb7a 	bl	8005b66 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 8006472:	2005      	movs	r0, #5
 8006474:	f7ff fc64 	bl	8005d40 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8006478:	2001      	movs	r0, #1
 800647a:	f7fc fb4d 	bl	8002b18 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800647e:	f003 f921 	bl	80096c4 <UTIL_TIMER_GetCurrentTime>
 8006482:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006484:	0020      	movs	r0, r4
 8006486:	f003 f927 	bl	80096d8 <UTIL_TIMER_GetElapsedTime>
 800648a:	42a8      	cmp	r0, r5
 800648c:	d304      	bcc.n	8006498 <SX1276IsChannelFree+0x58>
    bool status = true;
 800648e:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8006490:	f7ff ffbc 	bl	800640c <SX1276SetSleep>
}
 8006494:	0020      	movs	r0, r4
 8006496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8006498:	2000      	movs	r0, #0
 800649a:	f7ff fdb9 	bl	8006010 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800649e:	42b0      	cmp	r0, r6
 80064a0:	ddf0      	ble.n	8006484 <SX1276IsChannelFree+0x44>
            status = false;
 80064a2:	2400      	movs	r4, #0
 80064a4:	e7f4      	b.n	8006490 <SX1276IsChannelFree+0x50>

080064a6 <SX1276Random>:
{
 80064a6:	b570      	push	{r4, r5, r6, lr}
 80064a8:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 80064aa:	2001      	movs	r0, #1
 80064ac:	f7ff fde2 	bl	8006074 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80064b0:	21ff      	movs	r1, #255	; 0xff
 80064b2:	2011      	movs	r0, #17
 80064b4:	f7ff fb57 	bl	8005b66 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 80064b8:	2005      	movs	r0, #5
 80064ba:	f7ff fc41 	bl	8005d40 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 80064be:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 80064c0:	2601      	movs	r6, #1
 80064c2:	0030      	movs	r0, r6
 80064c4:	f7fc fb28 	bl	8002b18 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80064c8:	202c      	movs	r0, #44	; 0x2c
 80064ca:	f7ff fb97 	bl	8005bfc <SX1276Read>
 80064ce:	4030      	ands	r0, r6
 80064d0:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 80064d2:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80064d4:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80064d6:	2c20      	cmp	r4, #32
 80064d8:	d1f3      	bne.n	80064c2 <SX1276Random+0x1c>
    SX1276SetSleep( );
 80064da:	f7ff ff97 	bl	800640c <SX1276SetSleep>
}
 80064de:	0028      	movs	r0, r5
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080064e4 <SX1276SetTxConfig>:
{
 80064e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e6:	b08d      	sub	sp, #52	; 0x34
 80064e8:	9306      	str	r3, [sp, #24]
 80064ea:	ab12      	add	r3, sp, #72	; 0x48
 80064ec:	cb40      	ldmia	r3!, {r6}
 80064ee:	9002      	str	r0, [sp, #8]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	9205      	str	r2, [sp, #20]
 80064f4:	9307      	str	r3, [sp, #28]
 80064f6:	ab14      	add	r3, sp, #80	; 0x50
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	000c      	movs	r4, r1
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	ab15      	add	r3, sp, #84	; 0x54
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	9303      	str	r3, [sp, #12]
 8006504:	ab16      	add	r3, sp, #88	; 0x58
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	ab17      	add	r3, sp, #92	; 0x5c
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	9308      	str	r3, [sp, #32]
 8006510:	ab18      	add	r3, sp, #96	; 0x60
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	930a      	str	r3, [sp, #40]	; 0x28
 8006516:	ab19      	add	r3, sp, #100	; 0x64
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800651c:	4bb8      	ldr	r3, [pc, #736]	; (8006800 <SX1276SetTxConfig+0x31c>)
 800651e:	791d      	ldrb	r5, [r3, #4]
 8006520:	2d01      	cmp	r5, #1
 8006522:	d106      	bne.n	8006532 <SX1276SetTxConfig+0x4e>
 8006524:	2800      	cmp	r0, #0
 8006526:	d104      	bne.n	8006532 <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8006528:	f7ff ff70 	bl	800640c <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800652c:	0028      	movs	r0, r5
 800652e:	f7fc faf3 	bl	8002b18 <HAL_Delay>
    SX1276SetModem( modem );
 8006532:	9802      	ldr	r0, [sp, #8]
 8006534:	f7ff fd9e 	bl	8006074 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8006538:	2009      	movs	r0, #9
 800653a:	f7ff fb5f 	bl	8005bfc <SX1276Read>
 800653e:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 8006540:	204d      	movs	r0, #77	; 0x4d
 8006542:	f7ff fb5b 	bl	8005bfc <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8006546:	4bae      	ldr	r3, [pc, #696]	; (8006800 <SX1276SetTxConfig+0x31c>)
    paDac = SX1276Read( REG_PADAC );
 8006548:	0007      	movs	r7, r0
 800654a:	0005      	movs	r5, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800654c:	6898      	ldr	r0, [r3, #8]
 800654e:	f7fc f9f5 	bl	800293c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 8006552:	2800      	cmp	r0, #0
 8006554:	d02c      	beq.n	80065b0 <SX1276SetTxConfig+0xcc>
 8006556:	2300      	movs	r3, #0
 8006558:	2201      	movs	r2, #1
 800655a:	3802      	subs	r0, #2
 800655c:	b2c0      	uxtb	r0, r0
 800655e:	4282      	cmp	r2, r0
 8006560:	415b      	adcs	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8006562:	217f      	movs	r1, #127	; 0x7f
 8006564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if (power > 14)
 8006566:	01db      	lsls	r3, r3, #7
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8006568:	400a      	ands	r2, r1
 800656a:	0011      	movs	r1, r2
        if (power > 14)
 800656c:	b2db      	uxtb	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800656e:	4319      	orrs	r1, r3
 8006570:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006572:	2900      	cmp	r1, #0
 8006574:	da2b      	bge.n	80065ce <SX1276SetTxConfig+0xea>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006576:	23f0      	movs	r3, #240	; 0xf0
 8006578:	2507      	movs	r5, #7
 800657a:	4019      	ands	r1, r3
        if( power > 17 )
 800657c:	2c11      	cmp	r4, #17
 800657e:	dd1c      	ble.n	80065ba <SX1276SetTxConfig+0xd6>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006580:	433d      	orrs	r5, r7
 8006582:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006584:	1c23      	adds	r3, r4, #0
 8006586:	2c14      	cmp	r4, #20
 8006588:	dd00      	ble.n	800658c <SX1276SetTxConfig+0xa8>
 800658a:	2314      	movs	r3, #20
 800658c:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800658e:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 8006590:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8006592:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8006594:	f7ff fae7 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8006598:	0029      	movs	r1, r5
 800659a:	204d      	movs	r0, #77	; 0x4d
 800659c:	f7ff fae3 	bl	8005b66 <SX1276Write>
    switch( modem )
 80065a0:	9b02      	ldr	r3, [sp, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d022      	beq.n	80065ec <SX1276SetTxConfig+0x108>
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d100      	bne.n	80065ac <SX1276SetTxConfig+0xc8>
 80065aa:	e080      	b.n	80066ae <SX1276SetTxConfig+0x1ca>
}
 80065ac:	b00d      	add	sp, #52	; 0x34
 80065ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 80065b0:	2301      	movs	r3, #1
 80065b2:	2c0e      	cmp	r4, #14
 80065b4:	dcd5      	bgt.n	8006562 <SX1276SetTxConfig+0x7e>
 80065b6:	1c03      	adds	r3, r0, #0
 80065b8:	e7d3      	b.n	8006562 <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80065ba:	43af      	bics	r7, r5
 80065bc:	2504      	movs	r5, #4
 80065be:	433d      	orrs	r5, r7
 80065c0:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80065c2:	1c23      	adds	r3, r4, #0
 80065c4:	2c02      	cmp	r4, #2
 80065c6:	da00      	bge.n	80065ca <SX1276SetTxConfig+0xe6>
 80065c8:	2302      	movs	r3, #2
 80065ca:	3b02      	subs	r3, #2
 80065cc:	e7df      	b.n	800658e <SX1276SetTxConfig+0xaa>
        if( power > 0 )
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	dd05      	ble.n	80065de <SX1276SetTxConfig+0xfa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80065d2:	1c23      	adds	r3, r4, #0
 80065d4:	2c0f      	cmp	r4, #15
 80065d6:	dd00      	ble.n	80065da <SX1276SetTxConfig+0xf6>
 80065d8:	230f      	movs	r3, #15
 80065da:	2170      	movs	r1, #112	; 0x70
 80065dc:	e7d7      	b.n	800658e <SX1276SetTxConfig+0xaa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80065de:	1c21      	adds	r1, r4, #0
 80065e0:	1d23      	adds	r3, r4, #4
 80065e2:	da01      	bge.n	80065e8 <SX1276SetTxConfig+0x104>
 80065e4:	4b87      	ldr	r3, [pc, #540]	; (8006804 <SX1276SetTxConfig+0x320>)
 80065e6:	7819      	ldrb	r1, [r3, #0]
 80065e8:	3104      	adds	r1, #4
 80065ea:	e7d1      	b.n	8006590 <SX1276SetTxConfig+0xac>
            SX1276.Settings.Fsk.Power = power;
 80065ec:	4b84      	ldr	r3, [pc, #528]	; (8006800 <SX1276SetTxConfig+0x31c>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80065ee:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80065f0:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80065f2:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80065f4:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.Power = power;
 80065f6:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80065f8:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80065fa:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80065fc:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80065fe:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006600:	1cda      	adds	r2, r3, #3
 8006602:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006604:	9904      	ldr	r1, [sp, #16]
 8006606:	1d5a      	adds	r2, r3, #5
 8006608:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800660a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800660c:	1d9a      	adds	r2, r3, #6
 800660e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006610:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 8006612:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006614:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006616:	497c      	ldr	r1, [pc, #496]	; (8006808 <SX1276SetTxConfig+0x324>)
 8006618:	f7f9 fe22 	bl	8000260 <__aeabi_uidivmod>
 800661c:	4b7b      	ldr	r3, [pc, #492]	; (800680c <SX1276SetTxConfig+0x328>)
 800661e:	0208      	lsls	r0, r1, #8
 8006620:	18c0      	adds	r0, r0, r3
 8006622:	4979      	ldr	r1, [pc, #484]	; (8006808 <SX1276SetTxConfig+0x324>)
 8006624:	f7f9 fd96 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006628:	4977      	ldr	r1, [pc, #476]	; (8006808 <SX1276SetTxConfig+0x324>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800662a:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800662c:	9805      	ldr	r0, [sp, #20]
 800662e:	f7f9 fd91 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006632:	0200      	lsls	r0, r0, #8
 8006634:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8006636:	0a21      	lsrs	r1, r4, #8
 8006638:	2004      	movs	r0, #4
 800663a:	b2c9      	uxtb	r1, r1
 800663c:	f7ff fa93 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8006640:	b2e1      	uxtb	r1, r4
 8006642:	2005      	movs	r0, #5
 8006644:	f7ff fa8f 	bl	8005b66 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006648:	0031      	movs	r1, r6
 800664a:	4871      	ldr	r0, [pc, #452]	; (8006810 <SX1276SetTxConfig+0x32c>)
 800664c:	f7f9 fd82 	bl	8000154 <__udivsi3>
 8006650:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006652:	0a01      	lsrs	r1, r0, #8
 8006654:	b2c9      	uxtb	r1, r1
 8006656:	2002      	movs	r0, #2
 8006658:	f7ff fa85 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800665c:	2003      	movs	r0, #3
 800665e:	b2e1      	uxtb	r1, r4
 8006660:	f7ff fa81 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	2025      	movs	r0, #37	; 0x25
 8006668:	0a19      	lsrs	r1, r3, #8
 800666a:	f7ff fa7c 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800666e:	466b      	mov	r3, sp
 8006670:	2026      	movs	r0, #38	; 0x26
 8006672:	7919      	ldrb	r1, [r3, #4]
 8006674:	f7ff fa77 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006678:	2030      	movs	r0, #48	; 0x30
 800667a:	f7ff fabf 	bl	8005bfc <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800667e:	2101      	movs	r1, #1
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 8006684:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006686:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8006688:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800668a:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800668c:	236f      	movs	r3, #111	; 0x6f
 800668e:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006690:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8006692:	b2c9      	uxtb	r1, r1
 8006694:	2030      	movs	r0, #48	; 0x30
 8006696:	f7ff fa66 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800669a:	2031      	movs	r0, #49	; 0x31
 800669c:	f7ff faae 	bl	8005bfc <SX1276Read>
 80066a0:	2140      	movs	r1, #64	; 0x40
 80066a2:	4301      	orrs	r1, r0
 80066a4:	2031      	movs	r0, #49	; 0x31
 80066a6:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80066a8:	f7ff fa5d 	bl	8005b66 <SX1276Write>
}
 80066ac:	e77e      	b.n	80065ac <SX1276SetTxConfig+0xc8>
            SX1276.Settings.LoRa.Power = power;
 80066ae:	4b54      	ldr	r3, [pc, #336]	; (8006800 <SX1276SetTxConfig+0x31c>)
 80066b0:	001a      	movs	r2, r3
 80066b2:	3240      	adds	r2, #64	; 0x40
 80066b4:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 80066b6:	9a06      	ldr	r2, [sp, #24]
 80066b8:	2a02      	cmp	r2, #2
 80066ba:	d900      	bls.n	80066be <SX1276SetTxConfig+0x1da>
                while( 1 );
 80066bc:	e7fe      	b.n	80066bc <SX1276SetTxConfig+0x1d8>
            SX1276.Settings.LoRa.Coderate = coderate;
 80066be:	001a      	movs	r2, r3
 80066c0:	9907      	ldr	r1, [sp, #28]
 80066c2:	324d      	adds	r2, #77	; 0x4d
 80066c4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80066c6:	001a      	movs	r2, r3
 80066c8:	9901      	ldr	r1, [sp, #4]
 80066ca:	324e      	adds	r2, #78	; 0x4e
 80066cc:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80066ce:	001a      	movs	r2, r3
 80066d0:	9903      	ldr	r1, [sp, #12]
 80066d2:	3250      	adds	r2, #80	; 0x50
 80066d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80066d6:	001a      	movs	r2, r3
 80066d8:	9908      	ldr	r1, [sp, #32]
 80066da:	3253      	adds	r2, #83	; 0x53
 80066dc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80066de:	001a      	movs	r2, r3
 80066e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066e2:	3254      	adds	r2, #84	; 0x54
 80066e4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80066e6:	001a      	movs	r2, r3
 80066e8:	9904      	ldr	r1, [sp, #16]
 80066ea:	3252      	adds	r2, #82	; 0x52
 80066ec:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80066ee:	001a      	movs	r2, r3
 80066f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f2:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80066f4:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80066f6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80066f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 80066fa:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80066fc:	0034      	movs	r4, r6
 80066fe:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8006700:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006702:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8006704:	2e06      	cmp	r6, #6
 8006706:	d263      	bcs.n	80067d0 <SX1276SetTxConfig+0x2ec>
 8006708:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800670a:	2d07      	cmp	r5, #7
 800670c:	d164      	bne.n	80067d8 <SX1276SetTxConfig+0x2f4>
 800670e:	0022      	movs	r2, r4
 8006710:	2300      	movs	r3, #0
 8006712:	2101      	movs	r1, #1
 8006714:	3a0b      	subs	r2, #11
 8006716:	4291      	cmp	r1, r2
 8006718:	415b      	adcs	r3, r3
 800671a:	b2db      	uxtb	r3, r3
 800671c:	4f38      	ldr	r7, [pc, #224]	; (8006800 <SX1276SetTxConfig+0x31c>)
 800671e:	003a      	movs	r2, r7
 8006720:	324c      	adds	r2, #76	; 0x4c
 8006722:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006724:	9b08      	ldr	r3, [sp, #32]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00f      	beq.n	800674a <SX1276SetTxConfig+0x266>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800672a:	2044      	movs	r0, #68	; 0x44
 800672c:	f7ff fa66 	bl	8005bfc <SX1276Read>
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	4249      	negs	r1, r1
 8006734:	4301      	orrs	r1, r0
 8006736:	b2c9      	uxtb	r1, r1
 8006738:	2044      	movs	r0, #68	; 0x44
 800673a:	f7ff fa14 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800673e:	003b      	movs	r3, r7
 8006740:	3354      	adds	r3, #84	; 0x54
 8006742:	2024      	movs	r0, #36	; 0x24
 8006744:	7819      	ldrb	r1, [r3, #0]
 8006746:	f7ff fa0e 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800674a:	201d      	movs	r0, #29
 800674c:	f7ff fa56 	bl	8005bfc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006750:	9b07      	ldr	r3, [sp, #28]
 8006752:	012d      	lsls	r5, r5, #4
 8006754:	0059      	lsls	r1, r3, #1
 8006756:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006758:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800675a:	430b      	orrs	r3, r1
 800675c:	0019      	movs	r1, r3
 800675e:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006760:	b2c9      	uxtb	r1, r1
 8006762:	f7ff fa00 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006766:	201e      	movs	r0, #30
 8006768:	f7ff fa48 	bl	8005bfc <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	0124      	lsls	r4, r4, #4
 8006770:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006772:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8006774:	230b      	movs	r3, #11
 8006776:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006778:	4304      	orrs	r4, r0
 800677a:	b2e1      	uxtb	r1, r4
 800677c:	201e      	movs	r0, #30
 800677e:	f7ff f9f2 	bl	8005b66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006782:	2026      	movs	r0, #38	; 0x26
 8006784:	f7ff fa3a 	bl	8005bfc <SX1276Read>
 8006788:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800678a:	374c      	adds	r7, #76	; 0x4c
 800678c:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800678e:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006790:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006792:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006794:	b2c9      	uxtb	r1, r1
 8006796:	2026      	movs	r0, #38	; 0x26
 8006798:	f7ff f9e5 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800679c:	9b01      	ldr	r3, [sp, #4]
 800679e:	2020      	movs	r0, #32
 80067a0:	0a19      	lsrs	r1, r3, #8
 80067a2:	f7ff f9e0 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80067a6:	466b      	mov	r3, sp
 80067a8:	2021      	movs	r0, #33	; 0x21
 80067aa:	7919      	ldrb	r1, [r3, #4]
 80067ac:	f7ff f9db 	bl	8005b66 <SX1276Write>
            if( datarate == 6 )
 80067b0:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067b2:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80067b4:	2e06      	cmp	r6, #6
 80067b6:	d817      	bhi.n	80067e8 <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067b8:	f7ff fa20 	bl	8005bfc <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067bc:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067be:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067c0:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80067c2:	b2c9      	uxtb	r1, r1
 80067c4:	2031      	movs	r0, #49	; 0x31
 80067c6:	f7ff f9ce 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067ca:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067cc:	2037      	movs	r0, #55	; 0x37
 80067ce:	e76b      	b.n	80066a8 <SX1276SetTxConfig+0x1c4>
 80067d0:	2e0c      	cmp	r6, #12
 80067d2:	d99a      	bls.n	800670a <SX1276SetTxConfig+0x226>
 80067d4:	240c      	movs	r4, #12
 80067d6:	e798      	b.n	800670a <SX1276SetTxConfig+0x226>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80067d8:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80067da:	2d08      	cmp	r5, #8
 80067dc:	d19e      	bne.n	800671c <SX1276SetTxConfig+0x238>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80067de:	330b      	adds	r3, #11
 80067e0:	42b3      	cmp	r3, r6
 80067e2:	419b      	sbcs	r3, r3
 80067e4:	425b      	negs	r3, r3
 80067e6:	e799      	b.n	800671c <SX1276SetTxConfig+0x238>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067e8:	f7ff fa08 	bl	8005bfc <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067ec:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80067ee:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80067f0:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80067f2:	b2c9      	uxtb	r1, r1
 80067f4:	2031      	movs	r0, #49	; 0x31
 80067f6:	f7ff f9b6 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067fa:	210a      	movs	r1, #10
 80067fc:	e7e6      	b.n	80067cc <SX1276SetTxConfig+0x2e8>
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	20000294 	.word	0x20000294
 8006804:	0800abed 	.word	0x0800abed
 8006808:	00003d09 	.word	0x00003d09
 800680c:	00001e84 	.word	0x00001e84
 8006810:	01e84800 	.word	0x01e84800

08006814 <SX1276SetTxContinuousWave>:
{
 8006814:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 8006816:	24fa      	movs	r4, #250	; 0xfa
{
 8006818:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800681a:	00a4      	lsls	r4, r4, #2
 800681c:	4354      	muls	r4, r2
{
 800681e:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8006820:	f7ff f9aa 	bl	8005b78 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006824:	2305      	movs	r3, #5
 8006826:	9302      	str	r3, [sp, #8]
 8006828:	2396      	movs	r3, #150	; 0x96
 800682a:	2000      	movs	r0, #0
 800682c:	015b      	lsls	r3, r3, #5
 800682e:	0002      	movs	r2, r0
 8006830:	0029      	movs	r1, r5
 8006832:	9007      	str	r0, [sp, #28]
 8006834:	9006      	str	r0, [sp, #24]
 8006836:	9005      	str	r0, [sp, #20]
 8006838:	9004      	str	r0, [sp, #16]
 800683a:	9003      	str	r0, [sp, #12]
 800683c:	9001      	str	r0, [sp, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	9408      	str	r4, [sp, #32]
 8006842:	0003      	movs	r3, r0
 8006844:	f7ff fe4e 	bl	80064e4 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006848:	2031      	movs	r0, #49	; 0x31
 800684a:	f7ff f9d7 	bl	8005bfc <SX1276Read>
 800684e:	2540      	movs	r5, #64	; 0x40
 8006850:	43a8      	bics	r0, r5
 8006852:	b2c1      	uxtb	r1, r0
 8006854:	2031      	movs	r0, #49	; 0x31
 8006856:	f7ff f986 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800685a:	0028      	movs	r0, r5
 800685c:	21f0      	movs	r1, #240	; 0xf0
 800685e:	f7ff f982 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006862:	21a0      	movs	r1, #160	; 0xa0
 8006864:	2041      	movs	r0, #65	; 0x41
 8006866:	f7ff f97e 	bl	8005b66 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800686a:	4d08      	ldr	r5, [pc, #32]	; (800688c <SX1276SetTxContinuousWave+0x78>)
 800686c:	0021      	movs	r1, r4
 800686e:	351c      	adds	r5, #28
 8006870:	0028      	movs	r0, r5
 8006872:	f002 fff3 	bl	800985c <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 8006876:	2202      	movs	r2, #2
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800687a:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800687c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800687e:	f002 ffb5 	bl	80097ec <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8006882:	2003      	movs	r0, #3
 8006884:	f7ff fa5c 	bl	8005d40 <SX1276SetOpMode.part.0>
}
 8006888:	b00b      	add	sp, #44	; 0x2c
 800688a:	bd30      	pop	{r4, r5, pc}
 800688c:	20000314 	.word	0x20000314
 8006890:	20000294 	.word	0x20000294

08006894 <RxChainCalibration>:
{
 8006894:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8006896:	2009      	movs	r0, #9
 8006898:	f7ff f9b0 	bl	8005bfc <SX1276Read>
 800689c:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800689e:	2006      	movs	r0, #6
 80068a0:	f7ff f9ac 	bl	8005bfc <SX1276Read>
 80068a4:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80068a6:	2007      	movs	r0, #7
 80068a8:	f7ff f9a8 	bl	8005bfc <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80068ac:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80068ae:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80068b0:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80068b2:	2008      	movs	r0, #8
 80068b4:	f7ff f9a2 	bl	8005bfc <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80068ba:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80068bc:	b2c0      	uxtb	r0, r0
 80068be:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80068c0:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80068c2:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80068c4:	3080      	adds	r0, #128	; 0x80
 80068c6:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80068c8:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80068ca:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 80068cc:	2009      	movs	r0, #9
 80068ce:	f7ff f94a 	bl	8005b66 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80068d2:	203b      	movs	r0, #59	; 0x3b
 80068d4:	f7ff f992 	bl	8005bfc <SX1276Read>
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	4301      	orrs	r1, r0
 80068dc:	b2c9      	uxtb	r1, r1
 80068de:	203b      	movs	r0, #59	; 0x3b
 80068e0:	f7ff f941 	bl	8005b66 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80068e4:	2620      	movs	r6, #32
 80068e6:	203b      	movs	r0, #59	; 0x3b
 80068e8:	f7ff f988 	bl	8005bfc <SX1276Read>
 80068ec:	4230      	tst	r0, r6
 80068ee:	d1fa      	bne.n	80068e6 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80068f0:	480d      	ldr	r0, [pc, #52]	; (8006928 <RxChainCalibration+0x94>)
 80068f2:	f7ff f941 	bl	8005b78 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80068f6:	203b      	movs	r0, #59	; 0x3b
 80068f8:	f7ff f980 	bl	8005bfc <SX1276Read>
 80068fc:	2140      	movs	r1, #64	; 0x40
 80068fe:	4301      	orrs	r1, r0
 8006900:	b2c9      	uxtb	r1, r1
 8006902:	203b      	movs	r0, #59	; 0x3b
 8006904:	f7ff f92f 	bl	8005b66 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006908:	2620      	movs	r6, #32
 800690a:	203b      	movs	r0, #59	; 0x3b
 800690c:	f7ff f976 	bl	8005bfc <SX1276Read>
 8006910:	4230      	tst	r0, r6
 8006912:	d1fa      	bne.n	800690a <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8006914:	0029      	movs	r1, r5
 8006916:	2009      	movs	r0, #9
 8006918:	f7ff f925 	bl	8005b66 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800691c:	0020      	movs	r0, r4
 800691e:	f7ff f92b 	bl	8005b78 <SX1276SetChannel>
}
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	00003d09 	.word	0x00003d09
 8006928:	33bca100 	.word	0x33bca100

0800692c <SX1276Init>:
{
 800692c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800692e:	4e21      	ldr	r6, [pc, #132]	; (80069b4 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006930:	2400      	movs	r4, #0
    RadioEvents = events;
 8006932:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006934:	2101      	movs	r1, #1
 8006936:	0030      	movs	r0, r6
 8006938:	4d1f      	ldr	r5, [pc, #124]	; (80069b8 <SX1276Init+0x8c>)
 800693a:	0022      	movs	r2, r4
 800693c:	002b      	movs	r3, r5
 800693e:	9400      	str	r4, [sp, #0]
 8006940:	4249      	negs	r1, r1
 8006942:	301c      	adds	r0, #28
 8006944:	f002 fea2 	bl	800968c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006948:	2101      	movs	r1, #1
 800694a:	002b      	movs	r3, r5
 800694c:	0022      	movs	r2, r4
 800694e:	1d30      	adds	r0, r6, #4
 8006950:	9400      	str	r4, [sp, #0]
 8006952:	4249      	negs	r1, r1
 8006954:	f002 fe9a 	bl	800968c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006958:	4e18      	ldr	r6, [pc, #96]	; (80069bc <SX1276Init+0x90>)
 800695a:	2101      	movs	r1, #1
 800695c:	0030      	movs	r0, r6
 800695e:	002b      	movs	r3, r5
 8006960:	0022      	movs	r2, r4
 8006962:	4249      	negs	r1, r1
 8006964:	9400      	str	r4, [sp, #0]
 8006966:	3068      	adds	r0, #104	; 0x68
 8006968:	f002 fe90 	bl	800968c <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800696c:	2001      	movs	r0, #1
 800696e:	f7fb fe6f 	bl	8002650 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 8006972:	f7fc f80d 	bl	8002990 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 8006976:	f7ff ff8d 	bl	8006894 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800697a:	f7ff fb6b 	bl	8006054 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 800697e:	4810      	ldr	r0, [pc, #64]	; (80069c0 <SX1276Init+0x94>)
 8006980:	f7fb ffae 	bl	80028e0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006984:	4d0f      	ldr	r5, [pc, #60]	; (80069c4 <SX1276Init+0x98>)
 8006986:	002c      	movs	r4, r5
 8006988:	353c      	adds	r5, #60	; 0x3c
 800698a:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 800698c:	7820      	ldrb	r0, [r4, #0]
 800698e:	f7ff fb71 	bl	8006074 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006992:	78a1      	ldrb	r1, [r4, #2]
 8006994:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006996:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006998:	f7ff f8e5 	bl	8005b66 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800699c:	42ac      	cmp	r4, r5
 800699e:	d1f5      	bne.n	800698c <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 80069a0:	2000      	movs	r0, #0
 80069a2:	f7ff fb67 	bl	8006074 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80069aa:	f7fb fe4f 	bl	800264c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80069ae:	3002      	adds	r0, #2
}
 80069b0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	20000314 	.word	0x20000314
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	20000294 	.word	0x20000294
 80069c0:	2000000c 	.word	0x2000000c
 80069c4:	0800a8d8 	.word	0x0800a8d8

080069c8 <SX1276OnTimeoutIrq>:
{
 80069c8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80069ca:	4c2a      	ldr	r4, [pc, #168]	; (8006a74 <SX1276OnTimeoutIrq+0xac>)
 80069cc:	7923      	ldrb	r3, [r4, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d002      	beq.n	80069d8 <SX1276OnTimeoutIrq+0x10>
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d02a      	beq.n	8006a2c <SX1276OnTimeoutIrq+0x64>
}
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80069d8:	7963      	ldrb	r3, [r4, #5]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d117      	bne.n	8006a0e <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80069de:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80069e0:	210b      	movs	r1, #11
 80069e2:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80069e4:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80069e6:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80069e8:	f7ff f8bd 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80069ec:	2110      	movs	r1, #16
 80069ee:	203f      	movs	r0, #63	; 0x3f
 80069f0:	f7ff f8b9 	bl	8005b66 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80069f4:	1de3      	adds	r3, r4, #7
 80069f6:	7fdb      	ldrb	r3, [r3, #31]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d011      	beq.n	8006a20 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80069fc:	200d      	movs	r0, #13
 80069fe:	f7ff f8fd 	bl	8005bfc <SX1276Read>
 8006a02:	2140      	movs	r1, #64	; 0x40
 8006a04:	4301      	orrs	r1, r0
 8006a06:	b2c9      	uxtb	r1, r1
 8006a08:	200d      	movs	r0, #13
 8006a0a:	f7ff f8ac 	bl	8005b66 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006a0e:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <SX1276OnTimeoutIrq+0xb0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0df      	beq.n	80069d6 <SX1276OnTimeoutIrq+0xe>
 8006a16:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0dc      	beq.n	80069d6 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8006a1c:	4798      	blx	r3
}
 8006a1e:	e7da      	b.n	80069d6 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8006a20:	0020      	movs	r0, r4
 8006a22:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 8006a24:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8006a26:	f002 fe8f 	bl	8009748 <UTIL_TIMER_Stop>
 8006a2a:	e7f0      	b.n	8006a0e <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 8006a2c:	f7fb ffb0 	bl	8002990 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 8006a30:	f7ff ff30 	bl	8006894 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006a34:	f7ff fb0e 	bl	8006054 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a38:	4e10      	ldr	r6, [pc, #64]	; (8006a7c <SX1276OnTimeoutIrq+0xb4>)
 8006a3a:	0035      	movs	r5, r6
 8006a3c:	363c      	adds	r6, #60	; 0x3c
 8006a3e:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 8006a40:	7828      	ldrb	r0, [r5, #0]
 8006a42:	f7ff fb17 	bl	8006074 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006a46:	78a9      	ldrb	r1, [r5, #2]
 8006a48:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a4a:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006a4c:	f7ff f88b 	bl	8005b66 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a50:	42b5      	cmp	r5, r6
 8006a52:	d1f5      	bne.n	8006a40 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 8006a54:	2000      	movs	r0, #0
 8006a56:	f7ff fb0d 	bl	8006074 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8006a5a:	0023      	movs	r3, r4
 8006a5c:	335c      	adds	r3, #92	; 0x5c
 8006a5e:	7818      	ldrb	r0, [r3, #0]
 8006a60:	f7ff fb58 	bl	8006114 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006a68:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <SX1276OnTimeoutIrq+0xb0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0b2      	beq.n	80069d6 <SX1276OnTimeoutIrq+0xe>
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	e7d1      	b.n	8006a18 <SX1276OnTimeoutIrq+0x50>
 8006a74:	20000294 	.word	0x20000294
 8006a78:	20000314 	.word	0x20000314
 8006a7c:	0800a8d8 	.word	0x0800a8d8

08006a80 <SX1276OnDio0Irq>:
{
 8006a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 8006a82:	466b      	mov	r3, sp
 8006a84:	1dde      	adds	r6, r3, #7
 8006a86:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8006a88:	4c8b      	ldr	r4, [pc, #556]	; (8006cb8 <SX1276OnDio0Irq+0x238>)
    volatile uint8_t irqFlags = 0;
 8006a8a:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 8006a8c:	7923      	ldrb	r3, [r4, #4]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d003      	beq.n	8006a9a <SX1276OnDio0Irq+0x1a>
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d100      	bne.n	8006a98 <SX1276OnDio0Irq+0x18>
 8006a96:	e0fa      	b.n	8006c8e <SX1276OnDio0Irq+0x20e>
}
 8006a98:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8006a9a:	7963      	ldrb	r3, [r4, #5]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d023      	beq.n	8006ae8 <SX1276OnDio0Irq+0x68>
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d1f9      	bne.n	8006a98 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8006aa4:	2140      	movs	r1, #64	; 0x40
 8006aa6:	2012      	movs	r0, #18
 8006aa8:	f7ff f85d 	bl	8005b66 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006aac:	2012      	movs	r0, #18
 8006aae:	f7ff f8a5 	bl	8005bfc <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006ab2:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006ab4:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006ab6:	7833      	ldrb	r3, [r6, #0]
 8006ab8:	4d80      	ldr	r5, [pc, #512]	; (8006cbc <SX1276OnDio0Irq+0x23c>)
 8006aba:	420b      	tst	r3, r1
 8006abc:	d100      	bne.n	8006ac0 <SX1276OnDio0Irq+0x40>
 8006abe:	e08a      	b.n	8006bd6 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8006ac0:	2012      	movs	r0, #18
 8006ac2:	f7ff f850 	bl	8005b66 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8006ac6:	0023      	movs	r3, r4
 8006ac8:	3356      	adds	r3, #86	; 0x56
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d100      	bne.n	8006ad2 <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 8006ad0:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8006ad2:	1d28      	adds	r0, r5, #4
 8006ad4:	f002 fe38 	bl	8009748 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0dc      	beq.n	8006a98 <SX1276OnDio0Irq+0x18>
 8006ade:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0d9      	beq.n	8006a98 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8006ae4:	4798      	blx	r3
}
 8006ae6:	e7d7      	b.n	8006a98 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006ae8:	1d63      	adds	r3, r4, #5
 8006aea:	7fdb      	ldrb	r3, [r3, #31]
 8006aec:	4d73      	ldr	r5, [pc, #460]	; (8006cbc <SX1276OnDio0Irq+0x23c>)
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d030      	beq.n	8006b54 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006af2:	203f      	movs	r0, #63	; 0x3f
 8006af4:	f7ff f882 	bl	8005bfc <SX1276Read>
 8006af8:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006afa:	7833      	ldrb	r3, [r6, #0]
 8006afc:	079b      	lsls	r3, r3, #30
 8006afe:	d429      	bmi.n	8006b54 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006b00:	210b      	movs	r1, #11
 8006b02:	203e      	movs	r0, #62	; 0x3e
 8006b04:	f7ff f82f 	bl	8005b66 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006b08:	2110      	movs	r1, #16
 8006b0a:	203f      	movs	r0, #63	; 0x3f
 8006b0c:	f7ff f82b 	bl	8005b66 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006b10:	1d28      	adds	r0, r5, #4
 8006b12:	f002 fe19 	bl	8009748 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006b16:	1de3      	adds	r3, r4, #7
 8006b18:	7fde      	ldrb	r6, [r3, #31]
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d110      	bne.n	8006b40 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 8006b1e:	0020      	movs	r0, r4
 8006b20:	3068      	adds	r0, #104	; 0x68
 8006b22:	f002 fe11 	bl	8009748 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8006b26:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <SX1276OnDio0Irq+0xb6>
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d000      	beq.n	8006b36 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8006b34:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006b36:	2300      	movs	r3, #0
 8006b38:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006b3a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006b3c:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8006b3e:	e7ab      	b.n	8006a98 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006b40:	200d      	movs	r0, #13
 8006b42:	f7ff f85b 	bl	8005bfc <SX1276Read>
 8006b46:	2140      	movs	r1, #64	; 0x40
 8006b48:	4301      	orrs	r1, r0
 8006b4a:	b2c9      	uxtb	r1, r1
 8006b4c:	200d      	movs	r0, #13
 8006b4e:	f7ff f80a 	bl	8005b66 <SX1276Write>
 8006b52:	e7e9      	b.n	8006b28 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006b54:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8006b56:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006b58:	0013      	movs	r3, r2
 8006b5a:	4e59      	ldr	r6, [pc, #356]	; (8006cc0 <SX1276OnDio0Irq+0x240>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	d10a      	bne.n	8006b76 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006b60:	1ce3      	adds	r3, r4, #3
 8006b62:	7fd8      	ldrb	r0, [r3, #31]
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d127      	bne.n	8006bb8 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8006b68:	0021      	movs	r1, r4
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	313a      	adds	r1, #58	; 0x3a
 8006b6e:	f7ff f82d 	bl	8005bcc <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b72:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006b74:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b76:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006b78:	2000      	movs	r0, #0
 8006b7a:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b7c:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006b7e:	f7ff f825 	bl	8005bcc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b82:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8006b84:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006b86:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8006b88:	f002 fdde 	bl	8009748 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006b8c:	1de3      	adds	r3, r4, #7
 8006b8e:	7fdb      	ldrb	r3, [r3, #31]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d116      	bne.n	8006bc2 <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8006b94:	0020      	movs	r0, r4
 8006b96:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 8006b98:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8006b9a:	f002 fdd5 	bl	8009748 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0c8      	beq.n	8006b36 <SX1276OnDio0Irq+0xb6>
 8006ba4:	689d      	ldr	r5, [r3, #8]
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	d0c5      	beq.n	8006b36 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006baa:	2232      	movs	r2, #50	; 0x32
 8006bac:	2300      	movs	r3, #0
 8006bae:	0030      	movs	r0, r6
 8006bb0:	56a2      	ldrsb	r2, [r4, r2]
 8006bb2:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8006bb4:	47a8      	blx	r5
 8006bb6:	e7be      	b.n	8006b36 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006bb8:	2032      	movs	r0, #50	; 0x32
 8006bba:	f7ff f81f 	bl	8005bfc <SX1276Read>
 8006bbe:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006bc0:	e7d7      	b.n	8006b72 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006bc2:	200d      	movs	r0, #13
 8006bc4:	f7ff f81a 	bl	8005bfc <SX1276Read>
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	4301      	orrs	r1, r0
 8006bcc:	b2c9      	uxtb	r1, r1
 8006bce:	200d      	movs	r0, #13
 8006bd0:	f7fe ffc9 	bl	8005b66 <SX1276Write>
 8006bd4:	e7e3      	b.n	8006b9e <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006bd6:	2019      	movs	r0, #25
 8006bd8:	f7ff f810 	bl	8005bfc <SX1276Read>
 8006bdc:	0026      	movs	r6, r4
 8006bde:	b240      	sxtb	r0, r0
 8006be0:	3002      	adds	r0, #2
 8006be2:	1080      	asrs	r0, r0, #2
 8006be4:	3660      	adds	r6, #96	; 0x60
 8006be6:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006be8:	201a      	movs	r0, #26
 8006bea:	f7ff f807 	bl	8005bfc <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006bee:	2200      	movs	r2, #0
 8006bf0:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006bf2:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006bf4:	4933      	ldr	r1, [pc, #204]	; (8006cc4 <SX1276OnDio0Irq+0x244>)
 8006bf6:	111b      	asrs	r3, r3, #4
 8006bf8:	b280      	uxth	r0, r0
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	da3e      	bge.n	8006c7c <SX1276OnDio0Irq+0x1fc>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006bfe:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8006c00:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006c02:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006c04:	428e      	cmp	r6, r1
 8006c06:	d937      	bls.n	8006c78 <SX1276OnDio0Irq+0x1f8>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006c08:	3a9d      	subs	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c0a:	1882      	adds	r2, r0, r2
 8006c0c:	189b      	adds	r3, r3, r2
 8006c0e:	0022      	movs	r2, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006c10:	b21b      	sxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c12:	3262      	adds	r2, #98	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006c14:	2013      	movs	r0, #19
 8006c16:	0026      	movs	r6, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c18:	8013      	strh	r3, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006c1a:	f7fe ffef 	bl	8005bfc <SX1276Read>
 8006c1e:	3664      	adds	r6, #100	; 0x64
 8006c20:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006c22:	2010      	movs	r0, #16
 8006c24:	f7fe ffea 	bl	8005bfc <SX1276Read>
 8006c28:	0001      	movs	r1, r0
 8006c2a:	200d      	movs	r0, #13
 8006c2c:	f7fe ff9b 	bl	8005b66 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8006c30:	7832      	ldrb	r2, [r6, #0]
 8006c32:	4e23      	ldr	r6, [pc, #140]	; (8006cc0 <SX1276OnDio0Irq+0x240>)
 8006c34:	2000      	movs	r0, #0
 8006c36:	0031      	movs	r1, r6
 8006c38:	f7fe ffc8 	bl	8005bcc <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006c3c:	0023      	movs	r3, r4
 8006c3e:	3356      	adds	r3, #86	; 0x56
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d100      	bne.n	8006c48 <SX1276OnDio0Irq+0x1c8>
                        SX1276.Settings.State = RF_IDLE;
 8006c46:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8006c48:	1d28      	adds	r0, r5, #4
 8006c4a:	f002 fd7d 	bl	8009748 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006c4e:	682b      	ldr	r3, [r5, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d100      	bne.n	8006c56 <SX1276OnDio0Irq+0x1d6>
 8006c54:	e720      	b.n	8006a98 <SX1276OnDio0Irq+0x18>
 8006c56:	689d      	ldr	r5, [r3, #8]
 8006c58:	2d00      	cmp	r5, #0
 8006c5a:	d100      	bne.n	8006c5e <SX1276OnDio0Irq+0x1de>
 8006c5c:	e71c      	b.n	8006a98 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006c5e:	0023      	movs	r3, r4
 8006c60:	0022      	movs	r2, r4
 8006c62:	3360      	adds	r3, #96	; 0x60
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	3464      	adds	r4, #100	; 0x64
 8006c68:	3262      	adds	r2, #98	; 0x62
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	5e52      	ldrsh	r2, [r2, r1]
 8006c6e:	0030      	movs	r0, r6
 8006c70:	7821      	ldrb	r1, [r4, #0]
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	47a8      	blx	r5
 8006c76:	e70f      	b.n	8006a98 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006c78:	3aa4      	subs	r2, #164	; 0xa4
 8006c7a:	e7c6      	b.n	8006c0a <SX1276OnDio0Irq+0x18a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006c7c:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006c7e:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006c80:	428a      	cmp	r2, r1
 8006c82:	d902      	bls.n	8006c8a <SX1276OnDio0Irq+0x20a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006c84:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006c86:	181b      	adds	r3, r3, r0
 8006c88:	e7c1      	b.n	8006c0e <SX1276OnDio0Irq+0x18e>
 8006c8a:	38a4      	subs	r0, #164	; 0xa4
 8006c8c:	e7fb      	b.n	8006c86 <SX1276OnDio0Irq+0x206>
            TimerStop( &TxTimeoutTimer );
 8006c8e:	4d0b      	ldr	r5, [pc, #44]	; (8006cbc <SX1276OnDio0Irq+0x23c>)
 8006c90:	0028      	movs	r0, r5
 8006c92:	301c      	adds	r0, #28
 8006c94:	f002 fd58 	bl	8009748 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8006c98:	7963      	ldrb	r3, [r4, #5]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d103      	bne.n	8006ca6 <SX1276OnDio0Irq+0x226>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8006c9e:	2108      	movs	r1, #8
 8006ca0:	2012      	movs	r0, #18
 8006ca2:	f7fe ff60 	bl	8005b66 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d100      	bne.n	8006cb2 <SX1276OnDio0Irq+0x232>
 8006cb0:	e6f2      	b.n	8006a98 <SX1276OnDio0Irq+0x18>
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	e714      	b.n	8006ae0 <SX1276OnDio0Irq+0x60>
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	20000294 	.word	0x20000294
 8006cbc:	20000314 	.word	0x20000314
 8006cc0:	20000348 	.word	0x20000348
 8006cc4:	1f4add40 	.word	0x1f4add40

08006cc8 <SX1276Send>:
{
 8006cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cca:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8006ccc:	4c5f      	ldr	r4, [pc, #380]	; (8006e4c <SX1276Send+0x184>)
{
 8006cce:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8006cd0:	7965      	ldrb	r5, [r4, #5]
{
 8006cd2:	1ddf      	adds	r7, r3, #7
 8006cd4:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	d01c      	beq.n	8006d14 <SX1276Send+0x4c>
 8006cda:	2d01      	cmp	r5, #1
 8006cdc:	d040      	beq.n	8006d60 <SX1276Send+0x98>
 8006cde:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 8006ce0:	4d5b      	ldr	r5, [pc, #364]	; (8006e50 <SX1276Send+0x188>)
 8006ce2:	1d28      	adds	r0, r5, #4
 8006ce4:	f002 fd30 	bl	8009748 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006ce8:	0028      	movs	r0, r5
 8006cea:	0031      	movs	r1, r6
 8006cec:	301c      	adds	r0, #28
 8006cee:	f002 fdb5 	bl	800985c <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8006cf2:	7963      	ldrb	r3, [r4, #5]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d100      	bne.n	8006cfa <SX1276Send+0x32>
 8006cf8:	e071      	b.n	8006dde <SX1276Send+0x116>
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d100      	bne.n	8006d00 <SX1276Send+0x38>
 8006cfe:	e087      	b.n	8006e10 <SX1276Send+0x148>
    TimerStart( &TxTimeoutTimer );
 8006d00:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8006d02:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8006d04:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 8006d06:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8006d08:	f002 fd70 	bl	80097ec <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8006d0c:	2003      	movs	r0, #3
 8006d0e:	f7ff f817 	bl	8005d40 <SX1276SetOpMode.part.0>
}
 8006d12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 8006d14:	7839      	ldrb	r1, [r7, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006d16:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8006d18:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8006d1a:	1ce3      	adds	r3, r4, #3
 8006d1c:	7fd8      	ldrb	r0, [r3, #31]
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d11a      	bne.n	8006d58 <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 8006d22:	2201      	movs	r2, #1
 8006d24:	0039      	movs	r1, r7
 8006d26:	f7fe ff06 	bl	8005b36 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006d2a:	783a      	ldrb	r2, [r7, #0]
 8006d2c:	1e53      	subs	r3, r2, #1
 8006d2e:	2b3f      	cmp	r3, #63	; 0x3f
 8006d30:	d905      	bls.n	8006d3e <SX1276Send+0x76>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8006d32:	b292      	uxth	r2, r2
 8006d34:	0031      	movs	r1, r6
 8006d36:	4847      	ldr	r0, [pc, #284]	; (8006e54 <SX1276Send+0x18c>)
 8006d38:	f002 ff2c 	bl	8009b94 <UTIL_MEM_cpy_8>
 8006d3c:	2220      	movs	r2, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006d3e:	0025      	movs	r5, r4
    SX1276WriteBuffer( 0, buffer, size );
 8006d40:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006d42:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8006d44:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006d46:	702a      	strb	r2, [r5, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8006d48:	f7fe fef5 	bl	8005b36 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006d4c:	782b      	ldrb	r3, [r5, #0]
 8006d4e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006d50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 8006d56:	e7c3      	b.n	8006ce0 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006d58:	2032      	movs	r0, #50	; 0x32
 8006d5a:	f7fe ff04 	bl	8005b66 <SX1276Write>
 8006d5e:	e7e4      	b.n	8006d2a <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006d60:	0023      	movs	r3, r4
 8006d62:	3355      	adds	r3, #85	; 0x55
 8006d64:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006d66:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d02d      	beq.n	8006dc8 <SX1276Send+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006d6c:	f7fe ff46 	bl	8005bfc <SX1276Read>
 8006d70:	2341      	movs	r3, #65	; 0x41
 8006d72:	4398      	bics	r0, r3
 8006d74:	b2c1      	uxtb	r1, r0
 8006d76:	2033      	movs	r0, #51	; 0x33
 8006d78:	f7fe fef5 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006d7c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006d7e:	203b      	movs	r0, #59	; 0x3b
 8006d80:	f7fe fef1 	bl	8005b66 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006d84:	0023      	movs	r3, r4
 8006d86:	783d      	ldrb	r5, [r7, #0]
 8006d88:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006d8a:	0029      	movs	r1, r5
 8006d8c:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006d8e:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006d90:	f7fe fee9 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006d94:	2100      	movs	r1, #0
 8006d96:	200e      	movs	r0, #14
 8006d98:	f7fe fee5 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	200d      	movs	r0, #13
 8006da0:	f7fe fee1 	bl	8005b66 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006da4:	2001      	movs	r0, #1
 8006da6:	f7fe ff29 	bl	8005bfc <SX1276Read>
 8006daa:	23f8      	movs	r3, #248	; 0xf8
 8006dac:	4398      	bics	r0, r3
 8006dae:	d104      	bne.n	8006dba <SX1276Send+0xf2>
                SX1276SetStby( );
 8006db0:	f7fe fff2 	bl	8005d98 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8006db4:	2001      	movs	r0, #1
 8006db6:	f7fb feaf 	bl	8002b18 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 8006dba:	0031      	movs	r1, r6
 8006dbc:	002a      	movs	r2, r5
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f7fe feb9 	bl	8005b36 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006dc4:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 8006dc6:	e78b      	b.n	8006ce0 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006dc8:	f7fe ff18 	bl	8005bfc <SX1276Read>
 8006dcc:	2341      	movs	r3, #65	; 0x41
 8006dce:	4398      	bics	r0, r3
 8006dd0:	4305      	orrs	r5, r0
 8006dd2:	b2e9      	uxtb	r1, r5
 8006dd4:	2033      	movs	r0, #51	; 0x33
 8006dd6:	f7fe fec6 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006dda:	211d      	movs	r1, #29
 8006ddc:	e7cf      	b.n	8006d7e <SX1276Send+0xb6>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006dde:	2040      	movs	r0, #64	; 0x40
 8006de0:	f7fe ff0c 	bl	8005bfc <SX1276Read>
 8006de4:	2103      	movs	r1, #3
 8006de6:	4001      	ands	r1, r0
 8006de8:	2040      	movs	r0, #64	; 0x40
 8006dea:	f7fe febc 	bl	8005b66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006dee:	2041      	movs	r0, #65	; 0x41
 8006df0:	f7fe ff04 	bl	8005bfc <SX1276Read>
 8006df4:	213e      	movs	r1, #62	; 0x3e
 8006df6:	4001      	ands	r1, r0
 8006df8:	2041      	movs	r0, #65	; 0x41
 8006dfa:	f7fe feb4 	bl	8005b66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006dfe:	2035      	movs	r0, #53	; 0x35
 8006e00:	f7fe fefc 	bl	8005bfc <SX1276Read>
 8006e04:	233f      	movs	r3, #63	; 0x3f
 8006e06:	4018      	ands	r0, r3
 8006e08:	0023      	movs	r3, r4
 8006e0a:	333e      	adds	r3, #62	; 0x3e
 8006e0c:	7018      	strb	r0, [r3, #0]
        break;
 8006e0e:	e777      	b.n	8006d00 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006e10:	0023      	movs	r3, r4
 8006e12:	3353      	adds	r3, #83	; 0x53
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <SX1276Send+0x170>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006e1a:	21f5      	movs	r1, #245	; 0xf5
 8006e1c:	2011      	movs	r0, #17
 8006e1e:	f7fe fea2 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006e22:	2040      	movs	r0, #64	; 0x40
 8006e24:	f7fe feea 	bl	8005bfc <SX1276Read>
 8006e28:	2333      	movs	r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006e2a:	0001      	movs	r1, r0
 8006e2c:	2040      	movs	r0, #64	; 0x40
 8006e2e:	4019      	ands	r1, r3
 8006e30:	4301      	orrs	r1, r0
 8006e32:	f7fe fe98 	bl	8005b66 <SX1276Write>
 8006e36:	e763      	b.n	8006d00 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006e38:	21f7      	movs	r1, #247	; 0xf7
 8006e3a:	2011      	movs	r0, #17
 8006e3c:	f7fe fe93 	bl	8005b66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006e40:	2040      	movs	r0, #64	; 0x40
 8006e42:	f7fe fedb 	bl	8005bfc <SX1276Read>
 8006e46:	233f      	movs	r3, #63	; 0x3f
 8006e48:	e7ef      	b.n	8006e2a <SX1276Send+0x162>
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	20000294 	.word	0x20000294
 8006e50:	20000314 	.word	0x20000314
 8006e54:	20000348 	.word	0x20000348

08006e58 <SX1276OnDio1Irq>:
{
 8006e58:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006e5a:	4c39      	ldr	r4, [pc, #228]	; (8006f40 <SX1276OnDio1Irq+0xe8>)
 8006e5c:	7925      	ldrb	r5, [r4, #4]
 8006e5e:	2d01      	cmp	r5, #1
 8006e60:	d002      	beq.n	8006e68 <SX1276OnDio1Irq+0x10>
 8006e62:	2d02      	cmp	r5, #2
 8006e64:	d050      	beq.n	8006f08 <SX1276OnDio1Irq+0xb0>
}
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8006e68:	7963      	ldrb	r3, [r4, #5]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <SX1276OnDio1Irq+0x46>
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d1f9      	bne.n	8006e66 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006e72:	f7fb fdd3 	bl	8002a1c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d0f5      	beq.n	8006e66 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8006e7a:	4d32      	ldr	r5, [pc, #200]	; (8006f44 <SX1276OnDio1Irq+0xec>)
 8006e7c:	1d28      	adds	r0, r5, #4
 8006e7e:	f002 fc63 	bl	8009748 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006e82:	2180      	movs	r1, #128	; 0x80
 8006e84:	2012      	movs	r0, #18
 8006e86:	f7fe fe6e 	bl	8005b66 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0e8      	beq.n	8006e66 <SX1276OnDio1Irq+0xe>
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0e5      	beq.n	8006e66 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8006e9a:	4798      	blx	r3
 8006e9c:	e7e3      	b.n	8006e66 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006e9e:	f7fb fdbd 	bl	8002a1c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d0df      	beq.n	8006e66 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8006ea6:	0020      	movs	r0, r4
 8006ea8:	3068      	adds	r0, #104	; 0x68
 8006eaa:	f002 fc4d 	bl	8009748 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006eae:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006eb0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006eb6:	1ce3      	adds	r3, r4, #3
 8006eb8:	7fd8      	ldrb	r0, [r3, #31]
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d119      	bne.n	8006ef2 <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8006ebe:	0021      	movs	r1, r4
 8006ec0:	002a      	movs	r2, r5
 8006ec2:	313a      	adds	r1, #58	; 0x3a
 8006ec4:	f7fe fe82 	bl	8005bcc <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006ec8:	0025      	movs	r5, r4
 8006eca:	353e      	adds	r5, #62	; 0x3e
 8006ecc:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006ece:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006ed0:	491d      	ldr	r1, [pc, #116]	; (8006f48 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006ed2:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006ed4:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006ed6:	1a1b      	subs	r3, r3, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	db0f      	blt.n	8006efc <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006edc:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f7fe fe73 	bl	8005bcc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006ee6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006ee8:	782b      	ldrb	r3, [r5, #0]
 8006eea:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006eec:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006eee:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8006ef0:	e7b9      	b.n	8006e66 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006ef2:	2032      	movs	r0, #50	; 0x32
 8006ef4:	f7fe fe82 	bl	8005bfc <SX1276Read>
 8006ef8:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006efa:	e7e5      	b.n	8006ec8 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8006efc:	2000      	movs	r0, #0
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	f7fe fe64 	bl	8005bcc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006f04:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006f06:	e7f2      	b.n	8006eee <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8006f08:	7965      	ldrb	r5, [r4, #5]
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	d1ab      	bne.n	8006e66 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8006f0e:	f7fb fd85 	bl	8002a1c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006f12:	2801      	cmp	r0, #1
 8006f14:	d0a7      	beq.n	8006e66 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006f16:	0026      	movs	r6, r4
 8006f18:	363f      	adds	r6, #63	; 0x3f
 8006f1a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006f1c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006f1e:	490a      	ldr	r1, [pc, #40]	; (8006f48 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006f20:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006f22:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006f24:	1a1b      	subs	r3, r3, r0
 8006f26:	4293      	cmp	r3, r2
 8006f28:	dd05      	ble.n	8006f36 <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 8006f2a:	0028      	movs	r0, r5
 8006f2c:	f7fe fe03 	bl	8005b36 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006f30:	7833      	ldrb	r3, [r6, #0]
 8006f32:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006f34:	e7da      	b.n	8006eec <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 8006f36:	0028      	movs	r0, r5
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	f7fe fdfc 	bl	8005b36 <SX1276WriteBuffer>
 8006f3e:	e7e1      	b.n	8006f04 <SX1276OnDio1Irq+0xac>
 8006f40:	20000294 	.word	0x20000294
 8006f44:	20000314 	.word	0x20000314
 8006f48:	20000348 	.word	0x20000348

08006f4c <_Cb_Timer_Lora_Tx>:
	UTIL_TIMER_IRQ_Handler();
	return 1;
}

static uint8_t _Cb_Timer_Lora_Tx(uint8_t event)
{
 8006f4c:	b510      	push	{r4, lr}
	#ifdef DEVICE_TYPE_STATION
		sModem.Mode = _MODE_SLEEP;
	#else
		UTIL_TIMER_Stop (&TimerLoraTx);
 8006f4e:	4c0a      	ldr	r4, [pc, #40]	; (8006f78 <_Cb_Timer_Lora_Tx+0x2c>)
 8006f50:	0020      	movs	r0, r4
 8006f52:	f002 fbf9 	bl	8009748 <UTIL_TIMER_Stop>
		UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
 8006f56:	21fa      	movs	r1, #250	; 0xfa
 8006f58:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <_Cb_Timer_Lora_Tx+0x30>)
 8006f5a:	0089      	lsls	r1, r1, #2
 8006f5c:	885b      	ldrh	r3, [r3, #2]
 8006f5e:	0020      	movs	r0, r4
 8006f60:	4359      	muls	r1, r3
 8006f62:	f002 fc7b 	bl	800985c <UTIL_TIMER_SetPeriod>
		UTIL_TIMER_Start (&TimerLoraTx);
 8006f66:	0020      	movs	r0, r4
 8006f68:	f002 fc40 	bl	80097ec <UTIL_TIMER_Start>
		USER_Payload_Node_Single(sModem.TimeDelaySingle_u32);
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <_Cb_Timer_Lora_Tx+0x34>)
 8006f6e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006f70:	f001 fa82 	bl	8008478 <USER_Payload_Node_Single>
	#endif
    return 1;
}
 8006f74:	2001      	movs	r0, #1
 8006f76:	bd10      	pop	{r4, pc}
 8006f78:	20000448 	.word	0x20000448
 8006f7c:	20000114 	.word	0x20000114
 8006f80:	200000c0 	.word	0x200000c0

08006f84 <_Cb_Timer_Start>:
{
 8006f84:	b510      	push	{r4, lr}
	UTIL_TIMER_IRQ_Handler();
 8006f86:	f002 fc85 	bl	8009894 <UTIL_TIMER_IRQ_Handler>
}
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	bd10      	pop	{r4, pc}
	...

08006f90 <AppCom_IRQ_Timer_CallBack>:
{
 8006f90:	b510      	push	{r4, lr}
    fevent_active(sEventAppCom, _EVENT_TIMER_START);
 8006f92:	2100      	movs	r1, #0
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <AppCom_IRQ_Timer_CallBack+0xc>)
 8006f96:	f001 ffb1 	bl	8008efc <fevent_active>
}
 8006f9a:	bd10      	pop	{r4, pc}
 8006f9c:	20000024 	.word	0x20000024

08006fa0 <_Cb_Idle_Handler>:
	}
	return 1;
}

static uint8_t _Cb_Idle_Handler(uint8_t event)
{
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	#ifdef DEVICE_TYPE_STATION
		fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
		LED_TOGGLE(__LED_MODE);
	#else
		if (sModem.CheckInit == 0){
 8006fa2:	4b25      	ldr	r3, [pc, #148]	; (8007038 <_Cb_Idle_Handler+0x98>)
{
 8006fa4:	0006      	movs	r6, r0
		if (sModem.CheckInit == 0){
 8006fa6:	781d      	ldrb	r5, [r3, #0]
 8006fa8:	4c24      	ldr	r4, [pc, #144]	; (800703c <_Cb_Idle_Handler+0x9c>)
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	d112      	bne.n	8006fd4 <_Cb_Idle_Handler+0x34>
			if (sModem.CheckJoin == 0)
			{
				sModem.CountSleep ++;
 8006fae:	0022      	movs	r2, r4
 8006fb0:	3253      	adds	r2, #83	; 0x53
 8006fb2:	7813      	ldrb	r3, [r2, #0]
			if (sModem.CheckJoin == 0)
 8006fb4:	4922      	ldr	r1, [pc, #136]	; (8007040 <_Cb_Idle_Handler+0xa0>)
				sModem.CountSleep ++;
 8006fb6:	3301      	adds	r3, #1
			if (sModem.CheckJoin == 0)
 8006fb8:	780f      	ldrb	r7, [r1, #0]
				sModem.CountSleep ++;
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	7013      	strb	r3, [r2, #0]
			if (sModem.CheckJoin == 0)
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d125      	bne.n	800700e <_Cb_Idle_Handler+0x6e>
				if(sModem.CountSleep <= 2){
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d808      	bhi.n	8006fd8 <_Cb_Idle_Handler+0x38>
					USER_Payload_Node_Join(sModem.TimeDelaySingle_u32);
 8006fc6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006fc8:	f001 fbb4 	bl	8008734 <USER_Payload_Node_Join>
			} else {
				sModem.CountSleep ++;
				if(sModem.CountSleep < 100){
					LED_TOGGLE(__LED_MODE);
					Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
					fevent_enable(sEventAppCom, event);
 8006fcc:	0031      	movs	r1, r6
 8006fce:	481d      	ldr	r0, [pc, #116]	; (8007044 <_Cb_Idle_Handler+0xa4>)
 8006fd0:	f001 ff9b 	bl	8008f0a <fevent_enable>
				}
			}
		}
	#endif
	return 1;
}
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					LED_OFF(__LED_MODE);
 8006fd8:	0038      	movs	r0, r7
 8006fda:	f002 fd49 	bl	8009a70 <LED_OFF>
					sModem.CheckInit = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4a15      	ldr	r2, [pc, #84]	; (8007038 <_Cb_Idle_Handler+0x98>)
					sModem.Mode = 0;
 8006fe2:	7667      	strb	r7, [r4, #25]
					sModem.CheckInit = 1;
 8006fe4:	7013      	strb	r3, [r2, #0]
					sModem.CheckJoin = 1;
 8006fe6:	4a16      	ldr	r2, [pc, #88]	; (8007040 <_Cb_Idle_Handler+0xa0>)
 8006fe8:	8013      	strh	r3, [r2, #0]
					USER_Payload_Node_Mode(sModem.TimeDelaySingle_u32);
 8006fea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006fec:	f001 fb58 	bl	80086a0 <USER_Payload_Node_Mode>
					UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000 - sModem.TimeDelaySingle_u32);
 8006ff0:	21fa      	movs	r1, #250	; 0xfa
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <_Cb_Idle_Handler+0xa8>)
 8006ff4:	0089      	lsls	r1, r1, #2
 8006ff6:	885b      	ldrh	r3, [r3, #2]
 8006ff8:	4359      	muls	r1, r3
 8006ffa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ffc:	4c13      	ldr	r4, [pc, #76]	; (800704c <_Cb_Idle_Handler+0xac>)
 8006ffe:	1ac9      	subs	r1, r1, r3
 8007000:	0020      	movs	r0, r4
 8007002:	f002 fc2b 	bl	800985c <UTIL_TIMER_SetPeriod>
					UTIL_TIMER_Start(&TimerLoraTx);
 8007006:	0020      	movs	r0, r4
 8007008:	f002 fbf0 	bl	80097ec <UTIL_TIMER_Start>
 800700c:	e7e2      	b.n	8006fd4 <_Cb_Idle_Handler+0x34>
					LED_TOGGLE(__LED_MODE);
 800700e:	0028      	movs	r0, r5
 8007010:	4f0f      	ldr	r7, [pc, #60]	; (8007050 <_Cb_Idle_Handler+0xb0>)
				if(sModem.CountSleep < 100){
 8007012:	2b63      	cmp	r3, #99	; 0x63
 8007014:	d805      	bhi.n	8007022 <_Cb_Idle_Handler+0x82>
					LED_TOGGLE(__LED_MODE);
 8007016:	f002 fd3b 	bl	8009a90 <LED_TOGGLE>
					Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	480d      	ldr	r0, [pc, #52]	; (8007054 <_Cb_Idle_Handler+0xb4>)
 800701e:	4798      	blx	r3
 8007020:	e7d4      	b.n	8006fcc <_Cb_Idle_Handler+0x2c>
					LED_OFF(__LED_MODE);
 8007022:	f002 fd25 	bl	8009a70 <LED_OFF>
					sModem.CheckInit = 1;
 8007026:	2301      	movs	r3, #1
 8007028:	4a03      	ldr	r2, [pc, #12]	; (8007038 <_Cb_Idle_Handler+0x98>)
					sModem.Mode = 0;
 800702a:	7665      	strb	r5, [r4, #25]
					sModem.CheckInit = 1;
 800702c:	7013      	strb	r3, [r2, #0]
					sModem.CheckJoin = 1;
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <_Cb_Idle_Handler+0xa0>)
 8007030:	8013      	strh	r3, [r2, #0]
					Radio.Sleep();
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	4798      	blx	r3
 8007036:	e7d8      	b.n	8006fea <_Cb_Idle_Handler+0x4a>
 8007038:	20000111 	.word	0x20000111
 800703c:	200000c0 	.word	0x200000c0
 8007040:	20000112 	.word	0x20000112
 8007044:	20000024 	.word	0x20000024
 8007048:	20000114 	.word	0x20000114
 800704c:	20000448 	.word	0x20000448
 8007050:	0800a9c4 	.word	0x0800a9c4
 8007054:	000493e0 	.word	0x000493e0

08007058 <_Cb_Uart_Debug>:
{
 8007058:	b510      	push	{r4, lr}
	if (MarkFirstRecvUart == 0)
 800705a:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <_Cb_Uart_Debug+0x38>)
{
 800705c:	0001      	movs	r1, r0
		LastLengthRecv = sUartDebug.Length_u16;
 800705e:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <_Cb_Uart_Debug+0x3c>)
	if (MarkFirstRecvUart == 0)
 8007060:	7e18      	ldrb	r0, [r3, #24]
		LastLengthRecv = sUartDebug.Length_u16;
 8007062:	88a2      	ldrh	r2, [r4, #4]
	if (MarkFirstRecvUart == 0)
 8007064:	2800      	cmp	r0, #0
 8007066:	d106      	bne.n	8007076 <_Cb_Uart_Debug+0x1e>
		MarkFirstRecvUart = 1;
 8007068:	3001      	adds	r0, #1
 800706a:	7618      	strb	r0, [r3, #24]
			fevent_enable(sEventAppCom, event);
 800706c:	480a      	ldr	r0, [pc, #40]	; (8007098 <_Cb_Uart_Debug+0x40>)
			LastLengthRecv = sUartDebug.Length_u16;
 800706e:	835a      	strh	r2, [r3, #26]
			fevent_enable(sEventAppCom, event);
 8007070:	f001 ff4b 	bl	8008f0a <fevent_enable>
 8007074:	e00a      	b.n	800708c <_Cb_Uart_Debug+0x34>
		if (sUartDebug.Length_u16 == LastLengthRecv)
 8007076:	8b58      	ldrh	r0, [r3, #26]
 8007078:	4290      	cmp	r0, r2
 800707a:	d1f7      	bne.n	800706c <_Cb_Uart_Debug+0x14>
			MarkFirstRecvUart = 0;
 800707c:	2200      	movs	r2, #0
			Check_AT_User(&sUartDebug);
 800707e:	0020      	movs	r0, r4
			MarkFirstRecvUart = 0;
 8007080:	761a      	strb	r2, [r3, #24]
			Check_AT_User(&sUartDebug);
 8007082:	f000 ff8b 	bl	8007f9c <Check_AT_User>
			Reset_Buff(&sUartDebug);
 8007086:	0020      	movs	r0, r4
 8007088:	f002 fc88 	bl	800999c <Reset_Buff>
}
 800708c:	2001      	movs	r0, #1
 800708e:	bd10      	pop	{r4, pc}
 8007090:	20000448 	.word	0x20000448
 8007094:	200000b8 	.word	0x200000b8
 8007098:	20000024 	.word	0x20000024

0800709c <AppCom_Task>:
	uint8_t Result = 0;
 800709c:	2000      	movs	r0, #0
{
 800709e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < _EVENT_END_COMM; i++)
 80070a0:	0005      	movs	r5, r0
            Result = 1;
 80070a2:	2701      	movs	r7, #1
 80070a4:	4c0f      	ldr	r4, [pc, #60]	; (80070e4 <AppCom_Task+0x48>)
		if (sEventAppCom[i].e_status == 1)
 80070a6:	7866      	ldrb	r6, [r4, #1]
 80070a8:	2e01      	cmp	r6, #1
 80070aa:	d10b      	bne.n	80070c4 <AppCom_Task+0x28>
			if ((sEventAppCom[i].e_systick == 0) ||
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <AppCom_Task+0x34>
                sEventAppCom[i].e_status = 0;  //Disable event
 80070b2:	2300      	movs	r3, #0
 80070b4:	7063      	strb	r3, [r4, #1]
				sEventAppCom[i].e_systick = HAL_GetTick();
 80070b6:	f7fb fd29 	bl	8002b0c <HAL_GetTick>
				sEventAppCom[i].e_function_handler(i);
 80070ba:	68e3      	ldr	r3, [r4, #12]
				sEventAppCom[i].e_systick = HAL_GetTick();
 80070bc:	6060      	str	r0, [r4, #4]
				sEventAppCom[i].e_function_handler(i);
 80070be:	0028      	movs	r0, r5
 80070c0:	4798      	blx	r3
            Result = 1;
 80070c2:	0030      	movs	r0, r6
	for (i = 0; i < _EVENT_END_COMM; i++)
 80070c4:	3501      	adds	r5, #1
 80070c6:	b2ed      	uxtb	r5, r5
 80070c8:	3410      	adds	r4, #16
 80070ca:	2d04      	cmp	r5, #4
 80070cc:	d1eb      	bne.n	80070a6 <AppCom_Task+0xa>
}
 80070ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					((HAL_GetTick() - sEventAppCom[i].e_systick)  >=  sEventAppCom[i].e_period))
 80070d0:	f7fb fd1c 	bl	8002b0c <HAL_GetTick>
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	1ac0      	subs	r0, r0, r3
			if ((sEventAppCom[i].e_systick == 0) ||
 80070d8:	68a3      	ldr	r3, [r4, #8]
 80070da:	4298      	cmp	r0, r3
 80070dc:	d2e9      	bcs.n	80070b2 <AppCom_Task+0x16>
            Result = 1;
 80070de:	0038      	movs	r0, r7
 80070e0:	e7f0      	b.n	80070c4 <AppCom_Task+0x28>
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	20000024 	.word	0x20000024

080070e8 <AppCom_Cacul_Random_Delay>:
{
 80070e8:	b570      	push	{r4, r5, r6, lr}
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 80070ea:	4c11      	ldr	r4, [pc, #68]	; (8007130 <AppCom_Cacul_Random_Delay+0x48>)
 80070ec:	88a5      	ldrh	r5, [r4, #4]
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80070ee:	6823      	ldr	r3, [r4, #0]
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 80070f0:	3d01      	subs	r5, #1
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80070f2:	b2ad      	uxth	r5, r5
 80070f4:	5d58      	ldrb	r0, [r3, r5]
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <AppCom_Cacul_Random_Delay+0x4c>)
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 80070f8:	3830      	subs	r0, #48	; 0x30
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 80070fa:	8859      	ldrh	r1, [r3, #2]
 80070fc:	f7f9 f8b0 	bl	8000260 <__aeabi_uidivmod>
	if(sModem.TimeDelayTx_u32 == 0){
 8007100:	2900      	cmp	r1, #0
 8007102:	d100      	bne.n	8007106 <AppCom_Cacul_Random_Delay+0x1e>
		sModem.TimeDelayTx_u32 += 10;
 8007104:	310a      	adds	r1, #10
	sModem.TimeDelayTx_u32 *= 1000;
 8007106:	23fa      	movs	r3, #250	; 0xfa
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	434b      	muls	r3, r1
 800710c:	6423      	str	r3, [r4, #64]	; 0x40
	sModem.TimeDelaySingle_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY;
 800710e:	23fa      	movs	r3, #250	; 0xfa
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 8007110:	22fa      	movs	r2, #250	; 0xfa
	sModem.TimeDelaySingle_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY;
 8007112:	015b      	lsls	r3, r3, #5
 8007114:	434b      	muls	r3, r1
 8007116:	6463      	str	r3, [r4, #68]	; 0x44
	sModem.TimeDelayCalib_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_CALIB_DELAY;
 8007118:	64a3      	str	r3, [r4, #72]	; 0x48
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 800711a:	68a3      	ldr	r3, [r4, #8]
 800711c:	00d2      	lsls	r2, r2, #3
 800711e:	5d5b      	ldrb	r3, [r3, r5]
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 8007120:	2004      	movs	r0, #4
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 8007122:	3b30      	subs	r3, #48	; 0x30
 8007124:	435a      	muls	r2, r3
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 8007126:	4904      	ldr	r1, [pc, #16]	; (8007138 <AppCom_Cacul_Random_Delay+0x50>)
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 8007128:	64e2      	str	r2, [r4, #76]	; 0x4c
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 800712a:	f002 fc47 	bl	80099bc <LOG>
}
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	200000c0 	.word	0x200000c0
 8007134:	20000114 	.word	0x20000114
 8007138:	0800abee 	.word	0x0800abee

0800713c <AppCom_Init>:
    	sModem.TypeModem_u8 = _LORA_NODE_VP;
 800713c:	2201      	movs	r2, #1
 800713e:	4b06      	ldr	r3, [pc, #24]	; (8007158 <AppCom_Init+0x1c>)
{
 8007140:	b510      	push	{r4, lr}
    	sModem.TypeModem_u8 = _LORA_NODE_VP;
 8007142:	761a      	strb	r2, [r3, #24]
    pModemProcessIRQTimer = AppCom_IRQ_Timer_CallBack;
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <AppCom_Init+0x20>)
 8007146:	4a06      	ldr	r2, [pc, #24]	; (8007160 <AppCom_Init+0x24>)
 8007148:	601a      	str	r2, [r3, #0]
    sLPMFeatureHandler = &sModemLPMHandler;
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <AppCom_Init+0x28>)
 800714c:	4a06      	ldr	r2, [pc, #24]	; (8007168 <AppCom_Init+0x2c>)
 800714e:	601a      	str	r2, [r3, #0]
    AppCom_Cacul_Random_Delay();
 8007150:	f7ff ffca 	bl	80070e8 <AppCom_Cacul_Random_Delay>
}
 8007154:	bd10      	pop	{r4, pc}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	200000c0 	.word	0x200000c0
 800715c:	200013b0 	.word	0x200013b0
 8007160:	08006f91 	.word	0x08006f91
 8007164:	20001360 	.word	0x20001360
 8007168:	20000118 	.word	0x20000118

0800716c <_Cb_Active_Lora_Tx_Event>:

void _Cb_Active_Lora_Tx_Event(void *context)
{
 800716c:	b510      	push	{r4, lr}
	 fevent_active(sEventAppCom, _EVENT_TIMER_LORA_TX);
 800716e:	2101      	movs	r1, #1
 8007170:	4801      	ldr	r0, [pc, #4]	; (8007178 <_Cb_Active_Lora_Tx_Event+0xc>)
 8007172:	f001 fec3 	bl	8008efc <fevent_active>
}
 8007176:	bd10      	pop	{r4, pc}
 8007178:	20000024 	.word	0x20000024

0800717c <_Cb_Lora_Tx>:
    return 1;
}
static uint8_t _Cb_Lora_Tx(uint8_t event)
{
    return 1;
}
 800717c:	2001      	movs	r0, #1
 800717e:	4770      	bx	lr

08007180 <_Cb_Timer_Lora_Tx_Again>:
}

static void _Cb_Timer_Lora_Tx_Again(void *context)
{

}
 8007180:	4770      	bx	lr
	...

08007184 <_Cb_Timer_Send_Event>:

static void _Cb_Timer_Send_Event(void *context)
{
 8007184:	b510      	push	{r4, lr}
	Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <_Cb_Timer_Send_Event+0x18>)
 8007188:	4a05      	ldr	r2, [pc, #20]	; (80071a0 <_Cb_Timer_Send_Event+0x1c>)
 800718a:	8c19      	ldrh	r1, [r3, #32]
 800718c:	69d8      	ldr	r0, [r3, #28]
 800718e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007190:	b2c9      	uxtb	r1, r1
 8007192:	4790      	blx	r2
    LED_OFF(__LED_MEASURE);
 8007194:	2001      	movs	r0, #1
 8007196:	f002 fc6b 	bl	8009a70 <LED_OFF>
}
 800719a:	bd10      	pop	{r4, pc}
 800719c:	200000c0 	.word	0x200000c0
 80071a0:	0800a9c4 	.word	0x0800a9c4

080071a4 <_Cb_Lora_IRQ>:
{
 80071a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    Radio.Sleep();
 80071a6:	4d64      	ldr	r5, [pc, #400]	; (8007338 <_Cb_Lora_IRQ+0x194>)
{
 80071a8:	b085      	sub	sp, #20
    Radio.Sleep();
 80071aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80071ac:	4798      	blx	r3
    switch (State)
 80071ae:	4b63      	ldr	r3, [pc, #396]	; (800733c <_Cb_Lora_IRQ+0x198>)
 80071b0:	7818      	ldrb	r0, [r3, #0]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	2804      	cmp	r0, #4
 80071b6:	d837      	bhi.n	8007228 <_Cb_Lora_IRQ+0x84>
 80071b8:	f7f8 ffb8 	bl	800012c <__gnu_thumb1_case_uqi>
 80071bc:	4b9e6403 	.word	0x4b9e6403
 80071c0:	5f          	.byte	0x5f
 80071c1:	00          	.byte	0x00
				sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 80071c2:	2701      	movs	r7, #1
				sModem.TimeTrySendAgain = 0;
 80071c4:	2600      	movs	r6, #0
				sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 80071c6:	4c5e      	ldr	r4, [pc, #376]	; (8007340 <_Cb_Lora_IRQ+0x19c>)
				Reset_Buff(&sModem.sBackup);
 80071c8:	485e      	ldr	r0, [pc, #376]	; (8007344 <_Cb_Lora_IRQ+0x1a0>)
				sModem.TimeTrySendAgain = 0;
 80071ca:	1de3      	adds	r3, r4, #7
				sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 80071cc:	84a7      	strh	r7, [r4, #36]	; 0x24
				sModem.TimeTrySendAgain = 0;
 80071ce:	77de      	strb	r6, [r3, #31]
				Reset_Buff(&sModem.sBackup);
 80071d0:	f002 fbe4 	bl	800999c <Reset_Buff>
	        	LOG(LOG_DEBUG, "OnRxDone");
 80071d4:	0038      	movs	r0, r7
 80071d6:	495c      	ldr	r1, [pc, #368]	; (8007348 <_Cb_Lora_IRQ+0x1a4>)
 80071d8:	f002 fbf0 	bl	80099bc <LOG>
	        	if (Protocol_Extract_Rx(BufferRx, RxBufferSize, 0, &sLoraVar.sFrameRx) == TRUE)
 80071dc:	9a01      	ldr	r2, [sp, #4]
 80071de:	4b5b      	ldr	r3, [pc, #364]	; (800734c <_Cb_Lora_IRQ+0x1a8>)
 80071e0:	7891      	ldrb	r1, [r2, #2]
 80071e2:	485b      	ldr	r0, [pc, #364]	; (8007350 <_Cb_Lora_IRQ+0x1ac>)
 80071e4:	0032      	movs	r2, r6
 80071e6:	3310      	adds	r3, #16
 80071e8:	f001 fc00 	bl	80089ec <Protocol_Extract_Rx>
					LOG(LOG_DEBUG, "Protocol Process Done!");
 80071ec:	4959      	ldr	r1, [pc, #356]	; (8007354 <_Cb_Lora_IRQ+0x1b0>)
	        	if (Protocol_Extract_Rx(BufferRx, RxBufferSize, 0, &sLoraVar.sFrameRx) == TRUE)
 80071ee:	42b8      	cmp	r0, r7
 80071f0:	d045      	beq.n	800727e <_Cb_Lora_IRQ+0xda>
					if (sModem.Mode == 0)
 80071f2:	0026      	movs	r6, r4
 80071f4:	7e63      	ldrb	r3, [r4, #25]
			        	Radio.Rx(RX_TIMEOUT_VALUE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 80071f6:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80071f8:	ad02      	add	r5, sp, #8
			        	sModem.RxTimeAfter = SysTimeGet();
 80071fa:	0028      	movs	r0, r5
 80071fc:	3630      	adds	r6, #48	; 0x30
					if (sModem.Mode == 0)
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d115      	bne.n	800722e <_Cb_Lora_IRQ+0x8a>
			        	sModem.RxTimeAfter = SysTimeGet();
 8007202:	f002 fcd5 	bl	8009bb0 <SysTimeGet>
 8007206:	cd06      	ldmia	r5!, {r1, r2}
 8007208:	c606      	stmia	r6!, {r1, r2}
			        	Radio.Rx(RX_TIMEOUT_VALUE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 800720a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800720c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	23fa      	movs	r3, #250	; 0xfa
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4353      	muls	r3, r2
 8007216:	2134      	movs	r1, #52	; 0x34
 8007218:	5e62      	ldrsh	r2, [r4, r1]
 800721a:	202c      	movs	r0, #44	; 0x2c
 800721c:	5e21      	ldrsh	r1, [r4, r0]
 800721e:	484e      	ldr	r0, [pc, #312]	; (8007358 <_Cb_Lora_IRQ+0x1b4>)
 8007220:	1a52      	subs	r2, r2, r1
 8007222:	189b      	adds	r3, r3, r2
			        	Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 8007224:	1ac0      	subs	r0, r0, r3
 8007226:	47b8      	blx	r7
}
 8007228:	2001      	movs	r0, #1
 800722a:	b005      	add	sp, #20
 800722c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			        	sModem.RxTimeAfter = SysTimeGet();
 800722e:	f002 fcbf 	bl	8009bb0 <SysTimeGet>
 8007232:	cd06      	ldmia	r5!, {r1, r2}
 8007234:	c606      	stmia	r6!, {r1, r2}
			        	Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 8007236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007238:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	23fa      	movs	r3, #250	; 0xfa
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4353      	muls	r3, r2
 8007242:	2134      	movs	r1, #52	; 0x34
 8007244:	5e62      	ldrsh	r2, [r4, r1]
 8007246:	202c      	movs	r0, #44	; 0x2c
 8007248:	5e21      	ldrsh	r1, [r4, r0]
 800724a:	4844      	ldr	r0, [pc, #272]	; (800735c <_Cb_Lora_IRQ+0x1b8>)
 800724c:	1a52      	subs	r2, r2, r1
 800724e:	189b      	adds	r3, r3, r2
 8007250:	e7e8      	b.n	8007224 <_Cb_Lora_IRQ+0x80>
        	sModem.RxTimeBefore = SysTimeGet();
 8007252:	4c3b      	ldr	r4, [pc, #236]	; (8007340 <_Cb_Lora_IRQ+0x19c>)
 8007254:	ae02      	add	r6, sp, #8
 8007256:	0030      	movs	r0, r6
 8007258:	f002 fcaa 	bl	8009bb0 <SysTimeGet>
 800725c:	0022      	movs	r2, r4
 800725e:	0023      	movs	r3, r4
 8007260:	3228      	adds	r2, #40	; 0x28
 8007262:	ce03      	ldmia	r6!, {r0, r1}
 8007264:	c203      	stmia	r2!, {r0, r1}
				if(sModem.CheckInit == 0)
 8007266:	3351      	adds	r3, #81	; 0x51
 8007268:	781b      	ldrb	r3, [r3, #0]
			        	Radio.Rx(RX_TIMEOUT_VALUE - (sModem.RxTimeAfter.Seconds - sModem.RxTimeBefore.Seconds) * 1000 - (sModem.RxTimeAfter.SubSeconds - sModem.RxTimeBefore.SubSeconds));
 800726a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				if(sModem.CheckInit == 0)
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <_Cb_Lora_IRQ+0xd2>
					Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
 8007270:	483a      	ldr	r0, [pc, #232]	; (800735c <_Cb_Lora_IRQ+0x1b8>)
					Radio.Rx(RX_TIMEOUT_VALUE);
 8007272:	4790      	blx	r2
 8007274:	e7d8      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
 8007276:	4838      	ldr	r0, [pc, #224]	; (8007358 <_Cb_Lora_IRQ+0x1b4>)
 8007278:	e7fb      	b.n	8007272 <_Cb_Lora_IRQ+0xce>
        	LOG(LOG_DEBUG, "OnTxTimeOut");
 800727a:	2001      	movs	r0, #1
 800727c:	4938      	ldr	r1, [pc, #224]	; (8007360 <_Cb_Lora_IRQ+0x1bc>)
 800727e:	f002 fb9d 	bl	80099bc <LOG>
            break;
 8007282:	e7d1      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
        	LOG(LOG_DEBUG, "OnRxTimeOut");
 8007284:	2001      	movs	r0, #1
 8007286:	4937      	ldr	r1, [pc, #220]	; (8007364 <_Cb_Lora_IRQ+0x1c0>)
 8007288:	f002 fb98 	bl	80099bc <LOG>
				if (sModem.bNeedConfirm == DATA_CONFIRMED_UP)
 800728c:	4c2c      	ldr	r4, [pc, #176]	; (8007340 <_Cb_Lora_IRQ+0x19c>)
 800728e:	1d63      	adds	r3, r4, #5
 8007290:	7fdb      	ldrb	r3, [r3, #31]
 8007292:	2b03      	cmp	r3, #3
 8007294:	d11f      	bne.n	80072d6 <_Cb_Lora_IRQ+0x132>
					LOG(LOG_INFOR, "Time retry: %d", sModem.TimeTrySendAgain);
 8007296:	1de6      	adds	r6, r4, #7
 8007298:	2004      	movs	r0, #4
 800729a:	7ff2      	ldrb	r2, [r6, #31]
 800729c:	4932      	ldr	r1, [pc, #200]	; (8007368 <_Cb_Lora_IRQ+0x1c4>)
 800729e:	f002 fb8d 	bl	80099bc <LOG>
					if (sModem.TimeTrySendAgain < 2)
 80072a2:	7ff3      	ldrb	r3, [r6, #31]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d80b      	bhi.n	80072c0 <_Cb_Lora_IRQ+0x11c>
						Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 80072a8:	8c21      	ldrh	r1, [r4, #32]
 80072aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80072ac:	69e0      	ldr	r0, [r4, #28]
 80072ae:	b2c9      	uxtb	r1, r1
 80072b0:	4798      	blx	r3
						LED_OFF(__LED_MEASURE);
 80072b2:	2001      	movs	r0, #1
 80072b4:	f002 fbdc 	bl	8009a70 <LED_OFF>
						sModem.TimeTrySendAgain++;
 80072b8:	7ff3      	ldrb	r3, [r6, #31]
 80072ba:	3301      	adds	r3, #1
 80072bc:	77f3      	strb	r3, [r6, #31]
 80072be:	e7b3      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
						sModem.Mode = 0;
 80072c0:	2200      	movs	r2, #0
						sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 80072c2:	2101      	movs	r1, #1
						sModem.Mode = 0;
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <_Cb_Lora_IRQ+0x19c>)
						Reset_Buff(&sModem.sBackup);
 80072c6:	481f      	ldr	r0, [pc, #124]	; (8007344 <_Cb_Lora_IRQ+0x1a0>)
						sModem.Mode = 0;
 80072c8:	765a      	strb	r2, [r3, #25]
						sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 80072ca:	8499      	strh	r1, [r3, #36]	; 0x24
						sModem.TimeTrySendAgain = 0;
 80072cc:	3307      	adds	r3, #7
 80072ce:	77da      	strb	r2, [r3, #31]
						Reset_Buff(&sModem.sBackup);
 80072d0:	f002 fb64 	bl	800999c <Reset_Buff>
 80072d4:	e7a8      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
					if (sModem.CheckInit == 1)
 80072d6:	0023      	movs	r3, r4
 80072d8:	3351      	adds	r3, #81	; 0x51
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d1a3      	bne.n	8007228 <_Cb_Lora_IRQ+0x84>
						if(sModem.Mode == _MODE_WAKEUP)
 80072e0:	7e63      	ldrb	r3, [r4, #25]
							UTIL_TIMER_Start (&TimerLoraTx);
 80072e2:	4822      	ldr	r0, [pc, #136]	; (800736c <_Cb_Lora_IRQ+0x1c8>)
						if(sModem.Mode == _MODE_WAKEUP)
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d19f      	bne.n	8007228 <_Cb_Lora_IRQ+0x84>
							UTIL_TIMER_Start (&TimerLoraTx);
 80072e8:	f002 fa80 	bl	80097ec <UTIL_TIMER_Start>
							sModem.Mode = _MODE_SLEEP;
 80072ec:	2300      	movs	r3, #0
							USER_Payload_Node_Mode(sModem.TimeDelaySingle_u32);
 80072ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
							sModem.Mode = _MODE_SLEEP;
 80072f0:	7663      	strb	r3, [r4, #25]
							USER_Payload_Node_Mode(sModem.TimeDelaySingle_u32);
 80072f2:	f001 f9d5 	bl	80086a0 <USER_Payload_Node_Mode>
 80072f6:	e797      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
        	LOG(LOG_DEBUG, "OnRxError");
 80072f8:	2001      	movs	r0, #1
 80072fa:	491d      	ldr	r1, [pc, #116]	; (8007370 <_Cb_Lora_IRQ+0x1cc>)
 80072fc:	f002 fb5e 	bl	80099bc <LOG>
				if (sModem.bNeedConfirm == DATA_CONFIRMED_UP)
 8007300:	4c0f      	ldr	r4, [pc, #60]	; (8007340 <_Cb_Lora_IRQ+0x19c>)
 8007302:	1d63      	adds	r3, r4, #5
 8007304:	7fdb      	ldrb	r3, [r3, #31]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d0c5      	beq.n	8007296 <_Cb_Lora_IRQ+0xf2>
					if (sModem.CheckInit == 1)
 800730a:	0023      	movs	r3, r4
 800730c:	3351      	adds	r3, #81	; 0x51
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d000      	beq.n	8007316 <_Cb_Lora_IRQ+0x172>
 8007314:	e788      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
						if(sModem.Mode == _MODE_WAKEUP)
 8007316:	7e63      	ldrb	r3, [r4, #25]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d000      	beq.n	800731e <_Cb_Lora_IRQ+0x17a>
 800731c:	e784      	b.n	8007228 <_Cb_Lora_IRQ+0x84>
							UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000 - sModem.TimeDelayTx_u32);
 800731e:	21fa      	movs	r1, #250	; 0xfa
 8007320:	4b14      	ldr	r3, [pc, #80]	; (8007374 <_Cb_Lora_IRQ+0x1d0>)
 8007322:	0089      	lsls	r1, r1, #2
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	4d11      	ldr	r5, [pc, #68]	; (800736c <_Cb_Lora_IRQ+0x1c8>)
 8007328:	4359      	muls	r1, r3
 800732a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800732c:	0028      	movs	r0, r5
 800732e:	1ac9      	subs	r1, r1, r3
 8007330:	f002 fa94 	bl	800985c <UTIL_TIMER_SetPeriod>
							UTIL_TIMER_Start (&TimerLoraTx);
 8007334:	0028      	movs	r0, r5
 8007336:	e7d7      	b.n	80072e8 <_Cb_Lora_IRQ+0x144>
 8007338:	0800a9c4 	.word	0x0800a9c4
 800733c:	20000464 	.word	0x20000464
 8007340:	200000c0 	.word	0x200000c0
 8007344:	200000dc 	.word	0x200000dc
 8007348:	0800ac00 	.word	0x0800ac00
 800734c:	20000064 	.word	0x20000064
 8007350:	200007b4 	.word	0x200007b4
 8007354:	0800ac09 	.word	0x0800ac09
 8007358:	0000157c 	.word	0x0000157c
 800735c:	000493e0 	.word	0x000493e0
 8007360:	0800ac20 	.word	0x0800ac20
 8007364:	0800ac2c 	.word	0x0800ac2c
 8007368:	0800ac38 	.word	0x0800ac38
 800736c:	20000448 	.word	0x20000448
 8007370:	0800ac47 	.word	0x0800ac47
 8007374:	20000114 	.word	0x20000114

08007378 <OnRxError>:
    Radio.Sleep();
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <OnRxError+0x1c>)
{
 800737a:	b510      	push	{r4, lr}
    Radio.Sleep();
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	4798      	blx	r3
    State = RX_ERROR;
 8007380:	2202      	movs	r2, #2
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007382:	4805      	ldr	r0, [pc, #20]	; (8007398 <OnRxError+0x20>)
    State = RX_ERROR;
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <OnRxError+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007386:	2101      	movs	r1, #1
 8007388:	3024      	adds	r0, #36	; 0x24
    State = RX_ERROR;
 800738a:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800738c:	f001 fdb6 	bl	8008efc <fevent_active>
}
 8007390:	bd10      	pop	{r4, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	0800a9c4 	.word	0x0800a9c4
 8007398:	20000064 	.word	0x20000064
 800739c:	20000464 	.word	0x20000464

080073a0 <OnRxTimeout>:
    Radio.Sleep();
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <OnRxTimeout+0x18>)
{
 80073a2:	b510      	push	{r4, lr}
    Radio.Sleep();
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	4798      	blx	r3
    State = RX_TIMEOUT;
 80073a8:	2101      	movs	r1, #1
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073aa:	4804      	ldr	r0, [pc, #16]	; (80073bc <OnRxTimeout+0x1c>)
    State = RX_TIMEOUT;
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <OnRxTimeout+0x20>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073ae:	3024      	adds	r0, #36	; 0x24
    State = RX_TIMEOUT;
 80073b0:	7019      	strb	r1, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073b2:	f001 fda3 	bl	8008efc <fevent_active>
}
 80073b6:	bd10      	pop	{r4, pc}
 80073b8:	0800a9c4 	.word	0x0800a9c4
 80073bc:	20000064 	.word	0x20000064
 80073c0:	20000464 	.word	0x20000464

080073c4 <OnTxTimeout>:
    Radio.Sleep();
 80073c4:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <OnTxTimeout+0x1c>)
{
 80073c6:	b510      	push	{r4, lr}
    Radio.Sleep();
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	4798      	blx	r3
    State = TX_TIMEOUT;
 80073cc:	2204      	movs	r2, #4
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073ce:	4805      	ldr	r0, [pc, #20]	; (80073e4 <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <OnTxTimeout+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073d2:	2101      	movs	r1, #1
 80073d4:	3024      	adds	r0, #36	; 0x24
    State = TX_TIMEOUT;
 80073d6:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073d8:	f001 fd90 	bl	8008efc <fevent_active>
}
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	0800a9c4 	.word	0x0800a9c4
 80073e4:	20000064 	.word	0x20000064
 80073e8:	20000464 	.word	0x20000464

080073ec <OnTxDone>:
    Radio.Sleep();
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <OnTxDone+0x1c>)
{
 80073ee:	b510      	push	{r4, lr}
    Radio.Sleep();
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	4798      	blx	r3
    State = TX;
 80073f4:	2203      	movs	r2, #3
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073f6:	4805      	ldr	r0, [pc, #20]	; (800740c <OnTxDone+0x20>)
    State = TX;
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <OnTxDone+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80073fa:	2101      	movs	r1, #1
 80073fc:	3024      	adds	r0, #36	; 0x24
    State = TX;
 80073fe:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007400:	f001 fd7c 	bl	8008efc <fevent_active>
}
 8007404:	bd10      	pop	{r4, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	0800a9c4 	.word	0x0800a9c4
 800740c:	20000064 	.word	0x20000064
 8007410:	20000464 	.word	0x20000464

08007414 <OnRxDone>:
{
 8007414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007416:	9301      	str	r3, [sp, #4]
    Radio.Sleep();
 8007418:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <OnRxDone+0x44>)
{
 800741a:	000c      	movs	r4, r1
    Radio.Sleep();
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800741e:	0006      	movs	r6, r0
 8007420:	9200      	str	r2, [sp, #0]
    Radio.Sleep();
 8007422:	4798      	blx	r3
    State = RX;
 8007424:	2100      	movs	r1, #0
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8007426:	4f0d      	ldr	r7, [pc, #52]	; (800745c <OnRxDone+0x48>)
    State = RX;
 8007428:	4d0d      	ldr	r5, [pc, #52]	; (8007460 <OnRxDone+0x4c>)
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	0038      	movs	r0, r7
    State = RX;
 800742e:	7029      	strb	r1, [r5, #0]
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8007430:	f002 fd7c 	bl	8009f2c <memset>
    RxBufferSize = size;
 8007434:	806c      	strh	r4, [r5, #2]
    if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 8007436:	2cff      	cmp	r4, #255	; 0xff
 8007438:	d804      	bhi.n	8007444 <OnRxDone+0x30>
        memcpy(BufferRx, payload, RxBufferSize);
 800743a:	0022      	movs	r2, r4
 800743c:	0031      	movs	r1, r6
 800743e:	0038      	movs	r0, r7
 8007440:	f002 fda8 	bl	8009f94 <memcpy>
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 8007444:	4807      	ldr	r0, [pc, #28]	; (8007464 <OnRxDone+0x50>)
 8007446:	9b01      	ldr	r3, [sp, #4]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007448:	2101      	movs	r1, #1
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 800744a:	7043      	strb	r3, [r0, #1]
    sLoraVar.Rssi_u8 = rssi;
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	7003      	strb	r3, [r0, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8007450:	3024      	adds	r0, #36	; 0x24
 8007452:	f001 fd53 	bl	8008efc <fevent_active>
}
 8007456:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007458:	0800a9c4 	.word	0x0800a9c4
 800745c:	200007b4 	.word	0x200007b4
 8007460:	20000464 	.word	0x20000464
 8007464:	20000064 	.word	0x20000064

08007468 <_Cb_Lora_Led>:
 8007468:	2001      	movs	r0, #1
 800746a:	4770      	bx	lr

0800746c <AppLora_Init>:
{
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioEvents.TxDone = 	OnTxDone;
 800746e:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <AppLora_Init+0xb8>)
 8007470:	4d2d      	ldr	r5, [pc, #180]	; (8007528 <AppLora_Init+0xbc>)
{
 8007472:	b08d      	sub	sp, #52	; 0x34
    RadioEvents.TxDone = 	OnTxDone;
 8007474:	606b      	str	r3, [r5, #4]
    RadioEvents.RxDone = 	OnRxDone;
 8007476:	4b2d      	ldr	r3, [pc, #180]	; (800752c <AppLora_Init+0xc0>)
    Radio.Init(&RadioEvents);
 8007478:	1d28      	adds	r0, r5, #4
    RadioEvents.RxDone = 	OnRxDone;
 800747a:	60eb      	str	r3, [r5, #12]
    RadioEvents.TxTimeout = OnTxTimeout;
 800747c:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <AppLora_Init+0xc4>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800747e:	2400      	movs	r4, #0
    RadioEvents.TxTimeout = OnTxTimeout;
 8007480:	60ab      	str	r3, [r5, #8]
    RadioEvents.RxTimeout = OnRxTimeout;
 8007482:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <AppLora_Init+0xc8>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8007484:	2701      	movs	r7, #1
    RadioEvents.RxTimeout = OnRxTimeout;
 8007486:	612b      	str	r3, [r5, #16]
    RadioEvents.RxError = 	OnRxError;
 8007488:	4b2b      	ldr	r3, [pc, #172]	; (8007538 <AppLora_Init+0xcc>)
 800748a:	616b      	str	r3, [r5, #20]
    Radio.Init(&RadioEvents);
 800748c:	4b2b      	ldr	r3, [pc, #172]	; (800753c <AppLora_Init+0xd0>)
 800748e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4798      	blx	r3
    random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8007494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	4828      	ldr	r0, [pc, #160]	; (8007540 <AppLora_Init+0xd4>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80074a2:	4b28      	ldr	r3, [pc, #160]	; (8007544 <AppLora_Init+0xd8>)
 80074a4:	220a      	movs	r2, #10
 80074a6:	9308      	str	r3, [sp, #32]
 80074a8:	2308      	movs	r3, #8
 80074aa:	9302      	str	r3, [sp, #8]
 80074ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ae:	9200      	str	r2, [sp, #0]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	0038      	movs	r0, r7
 80074b4:	0016      	movs	r6, r2
 80074b6:	0023      	movs	r3, r4
 80074b8:	0022      	movs	r2, r4
 80074ba:	2113      	movs	r1, #19
 80074bc:	9407      	str	r4, [sp, #28]
 80074be:	9406      	str	r4, [sp, #24]
 80074c0:	9405      	str	r4, [sp, #20]
 80074c2:	9704      	str	r7, [sp, #16]
 80074c4:	9403      	str	r4, [sp, #12]
 80074c6:	9701      	str	r7, [sp, #4]
 80074c8:	47b0      	blx	r6
		Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80074ca:	2305      	movs	r3, #5
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	3303      	adds	r3, #3
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d4:	220a      	movs	r2, #10
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	0021      	movs	r1, r4
 80074da:	001e      	movs	r6, r3
 80074dc:	0038      	movs	r0, r7
 80074de:	003b      	movs	r3, r7
 80074e0:	9709      	str	r7, [sp, #36]	; 0x24
 80074e2:	9408      	str	r4, [sp, #32]
 80074e4:	9407      	str	r4, [sp, #28]
 80074e6:	9406      	str	r4, [sp, #24]
 80074e8:	9705      	str	r7, [sp, #20]
 80074ea:	9404      	str	r4, [sp, #16]
 80074ec:	9403      	str	r4, [sp, #12]
 80074ee:	9400      	str	r4, [sp, #0]
 80074f0:	47b0      	blx	r6
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80074f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f4:	0038      	movs	r0, r7
 80074f6:	21ff      	movs	r1, #255	; 0xff
 80074f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
	UTIL_TIMER_Create(&TimerSend, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Send_Event, NULL);
 80074fa:	2601      	movs	r6, #1
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80074fc:	4798      	blx	r3
	UTIL_TIMER_Create(&TimerSend, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Send_Event, NULL);
 80074fe:	0028      	movs	r0, r5
 8007500:	4276      	negs	r6, r6
 8007502:	0022      	movs	r2, r4
 8007504:	0031      	movs	r1, r6
 8007506:	4b10      	ldr	r3, [pc, #64]	; (8007548 <AppLora_Init+0xdc>)
 8007508:	9400      	str	r4, [sp, #0]
 800750a:	3020      	adds	r0, #32
 800750c:	f002 f8be 	bl	800968c <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&TimerLoraTxAgain, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Lora_Tx_Again, NULL);
 8007510:	0028      	movs	r0, r5
 8007512:	0022      	movs	r2, r4
 8007514:	0031      	movs	r1, r6
 8007516:	4b0d      	ldr	r3, [pc, #52]	; (800754c <AppLora_Init+0xe0>)
 8007518:	9400      	str	r4, [sp, #0]
 800751a:	3038      	adds	r0, #56	; 0x38
 800751c:	f002 f8b6 	bl	800968c <UTIL_TIMER_Create>
}
 8007520:	b00d      	add	sp, #52	; 0x34
 8007522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007524:	080073ed 	.word	0x080073ed
 8007528:	20000464 	.word	0x20000464
 800752c:	08007415 	.word	0x08007415
 8007530:	080073c5 	.word	0x080073c5
 8007534:	080073a1 	.word	0x080073a1
 8007538:	08007379 	.word	0x08007379
 800753c:	0800a9c4 	.word	0x0800a9c4
 8007540:	3703dcc0 	.word	0x3703dcc0
 8007544:	0000157c 	.word	0x0000157c
 8007548:	08007185 	.word	0x08007185
 800754c:	08007181 	.word	0x08007181

08007550 <AppLora_Send>:
{
 8007550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007552:	b085      	sub	sp, #20
 8007554:	000d      	movs	r5, r1
 8007556:	0007      	movs	r7, r0
 8007558:	0011      	movs	r1, r2
 800755a:	ae01      	add	r6, sp, #4
 800755c:	001a      	movs	r2, r3
    if (Length != 0) // Co payload
 800755e:	2d00      	cmp	r5, #0
 8007560:	d03e      	beq.n	80075e0 <AppLora_Send+0x90>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, DataType);
 8007562:	0030      	movs	r0, r6
 8007564:	f001 fa94 	bl	8008a90 <Protocol_Packet_Header>
        UTIL_MEM_set( aLORA_TX, 0, sizeof(aLORA_TX) );
 8007568:	4c2a      	ldr	r4, [pc, #168]	; (8007614 <AppLora_Send+0xc4>)
 800756a:	22ff      	movs	r2, #255	; 0xff
 800756c:	2100      	movs	r1, #0
 800756e:	0020      	movs	r0, r4
 8007570:	f002 fa20 	bl	80099b4 <UTIL_MEM_set>
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 8007574:	7833      	ldrb	r3, [r6, #0]
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 8007576:	4928      	ldr	r1, [pc, #160]	; (8007618 <AppLora_Send+0xc8>)
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 8007578:	7023      	strb	r3, [r4, #0]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 24);
 800757a:	6873      	ldr	r3, [r6, #4]
 800757c:	0e1a      	lsrs	r2, r3, #24
 800757e:	7062      	strb	r2, [r4, #1]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 16);
 8007580:	0c1a      	lsrs	r2, r3, #16
 8007582:	70a2      	strb	r2, [r4, #2]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.DevAddr;
 8007584:	7123      	strb	r3, [r4, #4]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 8007586:	0a1a      	lsrs	r2, r3, #8
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 8007588:	68b3      	ldr	r3, [r6, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 800758a:	70e2      	strb	r2, [r4, #3]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 800758c:	0e1a      	lsrs	r2, r3, #24
 800758e:	7162      	strb	r2, [r4, #5]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 16);
 8007590:	0c1a      	lsrs	r2, r3, #16
 8007592:	71a2      	strb	r2, [r4, #6]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.NetAddr;
 8007594:	7223      	strb	r3, [r4, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 8007596:	0a1a      	lsrs	r2, r3, #8
        for (i = 0; i < Length; i++)
 8007598:	2300      	movs	r3, #0
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 800759a:	71e2      	strb	r2, [r4, #7]
        for (i = 0; i < Length; i++)
 800759c:	001e      	movs	r6, r3
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	3609      	adds	r6, #9
 80075a2:	b2b6      	uxth	r6, r6
 80075a4:	42aa      	cmp	r2, r5
 80075a6:	d324      	bcc.n	80075f2 <AppLora_Send+0xa2>
 80075a8:	2300      	movs	r3, #0
        	*(sModem.sBackup.Data_a8 + i) = *(sMessTx.Data_a8 + i);
 80075aa:	491c      	ldr	r1, [pc, #112]	; (800761c <AppLora_Send+0xcc>)
 80075ac:	5ce0      	ldrb	r0, [r4, r3]
 80075ae:	69ca      	ldr	r2, [r1, #28]
 80075b0:	54d0      	strb	r0, [r2, r3]
        for (i = 0; i < sMessTx.Length_u16; i++)
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	b2d3      	uxtb	r3, r2
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	42b2      	cmp	r2, r6
 80075ba:	d3f7      	bcc.n	80075ac <AppLora_Send+0x5c>
    	LED_ON(__LED_MEASURE);
 80075bc:	2001      	movs	r0, #1
        sModem.sBackup.Length_u16 = sMessTx.Length_u16;
 80075be:	840e      	strh	r6, [r1, #32]
    	LED_ON(__LED_MEASURE);
 80075c0:	f002 fa46 	bl	8009a50 <LED_ON>
        if (delay != 0)
 80075c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01b      	beq.n	8007602 <AppLora_Send+0xb2>
        	UTIL_TIMER_SetPeriod(&TimerSend, delay);
 80075ca:	4c15      	ldr	r4, [pc, #84]	; (8007620 <AppLora_Send+0xd0>)
 80075cc:	0019      	movs	r1, r3
 80075ce:	3420      	adds	r4, #32
 80075d0:	0020      	movs	r0, r4
 80075d2:	f002 f943 	bl	800985c <UTIL_TIMER_SetPeriod>
        	UTIL_TIMER_Start(&TimerSend);
 80075d6:	0020      	movs	r0, r4
 80075d8:	f002 f908 	bl	80097ec <UTIL_TIMER_Start>
        return 1;
 80075dc:	2501      	movs	r5, #1
 80075de:	e005      	b.n	80075ec <AppLora_Send+0x9c>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, _DATA_NONE);
 80075e0:	002a      	movs	r2, r5
 80075e2:	0030      	movs	r0, r6
 80075e4:	f001 fa54 	bl	8008a90 <Protocol_Packet_Header>
    if ( (Length != 0) || (CheckACKRequest == TRUE) )
 80075e8:	2801      	cmp	r0, #1
 80075ea:	d0bd      	beq.n	8007568 <AppLora_Send+0x18>
}
 80075ec:	0028      	movs	r0, r5
 80075ee:	b005      	add	sp, #20
 80075f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (sMessTx.Length_u16 >= sizeof(aLORA_TX) )
 80075f2:	2bf6      	cmp	r3, #246	; 0xf6
 80075f4:	d003      	beq.n	80075fe <AppLora_Send+0xae>
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 80075f6:	5cfa      	ldrb	r2, [r7, r3]
 80075f8:	54ca      	strb	r2, [r1, r3]
        for (i = 0; i < Length; i++)
 80075fa:	3301      	adds	r3, #1
 80075fc:	e7ce      	b.n	800759c <AppLora_Send+0x4c>
 80075fe:	26ff      	movs	r6, #255	; 0xff
 8007600:	e7d2      	b.n	80075a8 <AppLora_Send+0x58>
        	Radio.Send(sMessTx.Data_a8, sMessTx.Length_u16);
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <AppLora_Send+0xd4>)
 8007604:	0020      	movs	r0, r4
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	b2f1      	uxtb	r1, r6
 800760a:	4798      	blx	r3
            LED_OFF(__LED_MEASURE);
 800760c:	2001      	movs	r0, #1
 800760e:	f002 fa2f 	bl	8009a70 <LED_OFF>
 8007612:	e7e3      	b.n	80075dc <AppLora_Send+0x8c>
 8007614:	200006b5 	.word	0x200006b5
 8007618:	200006be 	.word	0x200006be
 800761c:	200000c0 	.word	0x200000c0
 8007620:	20000464 	.word	0x20000464
 8007624:	0800a9c4 	.word	0x0800a9c4

08007628 <AppLora_Task>:
{
 8007628:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < _EVENT_LORA_END; i++)
 800762a:	2500      	movs	r5, #0
 800762c:	4c0f      	ldr	r4, [pc, #60]	; (800766c <AppLora_Task+0x44>)
 800762e:	3424      	adds	r4, #36	; 0x24
		if (sEventAppLora[i].e_status == 1)
 8007630:	7863      	ldrb	r3, [r4, #1]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d10a      	bne.n	800764c <AppLora_Task+0x24>
			if ((sEventAppLora[i].e_systick == 0) ||
 8007636:	6863      	ldr	r3, [r4, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10e      	bne.n	800765a <AppLora_Task+0x32>
                sEventAppLora[i].e_status = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	7063      	strb	r3, [r4, #1]
				sEventAppLora[i].e_systick = HAL_GetTick();
 8007640:	f7fb fa64 	bl	8002b0c <HAL_GetTick>
				sEventAppLora[i].e_function_handler(i);
 8007644:	68e3      	ldr	r3, [r4, #12]
				sEventAppLora[i].e_systick = HAL_GetTick();
 8007646:	6060      	str	r0, [r4, #4]
				sEventAppLora[i].e_function_handler(i);
 8007648:	0028      	movs	r0, r5
 800764a:	4798      	blx	r3
	for (i = 0; i < _EVENT_LORA_END; i++)
 800764c:	3501      	adds	r5, #1
 800764e:	b2ed      	uxtb	r5, r5
 8007650:	3410      	adds	r4, #16
 8007652:	2d03      	cmp	r5, #3
 8007654:	d1ec      	bne.n	8007630 <AppLora_Task+0x8>
}
 8007656:	2000      	movs	r0, #0
 8007658:	bd70      	pop	{r4, r5, r6, pc}
					((HAL_GetTick() - sEventAppLora[i].e_systick)  >=  sEventAppLora[i].e_period))
 800765a:	f7fb fa57 	bl	8002b0c <HAL_GetTick>
 800765e:	6863      	ldr	r3, [r4, #4]
 8007660:	1ac0      	subs	r0, r0, r3
			if ((sEventAppLora[i].e_systick == 0) ||
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	4298      	cmp	r0, r3
 8007666:	d2e9      	bcs.n	800763c <AppLora_Task+0x14>
 8007668:	e7f0      	b.n	800764c <AppLora_Task+0x24>
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	20000064 	.word	0x20000064

08007670 <AppLora_Deinit_IO_Radio>:
{
 8007670:	b510      	push	{r4, lr}
    Sx_Board_IoDeInit();
 8007672:	f7fb f8dd 	bl	8002830 <CMWX1ZZABZ0XX_RADIO_IoDeInit>
}
 8007676:	bd10      	pop	{r4, pc}

08007678 <AppLora_Init_IO_Radio>:
{
 8007678:	b510      	push	{r4, lr}
    Sx_Board_IoInit();
 800767a:	f7fa ffff 	bl	800267c <CMWX1ZZABZ0XX_RADIO_IoInit>
}
 800767e:	bd10      	pop	{r4, pc}

08007680 <SysApp_Init>:
#include "i2c.h"
#include "radio.h"

/* Exported functions --------------------------------------------------------*/
void SysApp_Init (void)
{
 8007680:	b510      	push	{r4, lr}
	MX_GPIO_Init();
 8007682:	f001 fab3 	bl	8008bec <MX_GPIO_Init>

	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
		MX_USART2_UART_Init();
	#else
		MX_USART1_UART_Init();
 8007686:	f001 fb73 	bl	8008d70 <MX_USART1_UART_Init>
		MX_ADC_Init();
 800768a:	f001 fa2b 	bl	8008ae4 <MX_ADC_Init>
		MX_I2C1_Init();
 800768e:	f001 fb05 	bl	8008c9c <MX_I2C1_Init>
	#endif

	AppLora_Init ();
 8007692:	f7ff feeb 	bl	800746c <AppLora_Init>
	UTIL_LPM_Init();
 8007696:	f001 fd27 	bl	80090e8 <UTIL_LPM_Init>
	Init_Uart_Module();
 800769a:	f000 fd13 	bl	80080c4 <Init_Uart_Module>
	Init_Memory_Infor();
 800769e:	f000 fedf 	bl	8008460 <Init_Memory_Infor>
	AppCom_Init();
 80076a2:	f7ff fd4b 	bl	800713c <AppCom_Init>
}
 80076a6:	bd10      	pop	{r4, pc}

080076a8 <SysApp_Start>:

void SysApp_Start(void)
{
 80076a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG(LOG_DEBUG, "Main task start");
 80076aa:	2001      	movs	r0, #1
 80076ac:	4911      	ldr	r1, [pc, #68]	; (80076f4 <SysApp_Start+0x4c>)
 80076ae:	f002 f985 	bl	80099bc <LOG>
	UTIL_TIMER_Create(&TimerLoraTx,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Active_Lora_Tx_Event, NULL);
 80076b2:	2500      	movs	r5, #0
 80076b4:	2101      	movs	r1, #1
 80076b6:	4c10      	ldr	r4, [pc, #64]	; (80076f8 <SysApp_Start+0x50>)
 80076b8:	002a      	movs	r2, r5
 80076ba:	9500      	str	r5, [sp, #0]
 80076bc:	0020      	movs	r0, r4
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <SysApp_Start+0x54>)
 80076c0:	4249      	negs	r1, r1
 80076c2:	f001 ffe3 	bl	800968c <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
 80076c6:	21fa      	movs	r1, #250	; 0xfa
 80076c8:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <SysApp_Start+0x58>)
 80076ca:	0089      	lsls	r1, r1, #2
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	0020      	movs	r0, r4
 80076d0:	4359      	muls	r1, r3
 80076d2:	f002 f8c3 	bl	800985c <UTIL_TIMER_SetPeriod>
	#ifdef DEVICE_TYPE_STATION
		LED_OFF(__LED_MODE);
		Radio.Rx(RX_TIMEOUT_VALUE);
	#else
		LED_ON(__LED_MODE);
 80076d6:	0028      	movs	r0, r5
 80076d8:	f002 f9ba 	bl	8009a50 <LED_ON>
		LED_OFF(__LED_MEASURE);
 80076dc:	2001      	movs	r0, #1
 80076de:	f002 f9c7 	bl	8009a70 <LED_OFF>
		USER_Payload_Node_Join(sModem.TimeDelaySingle_u32);
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <SysApp_Start+0x5c>)
 80076e4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80076e6:	f001 f825 	bl	8008734 <USER_Payload_Node_Join>
	#endif
	fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 80076ea:	2103      	movs	r1, #3
 80076ec:	4806      	ldr	r0, [pc, #24]	; (8007708 <SysApp_Start+0x60>)
 80076ee:	f001 fc0c 	bl	8008f0a <fevent_enable>
}
 80076f2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80076f4:	0800ac51 	.word	0x0800ac51
 80076f8:	20000448 	.word	0x20000448
 80076fc:	0800716d 	.word	0x0800716d
 8007700:	20000114 	.word	0x20000114
 8007704:	200000c0 	.word	0x200000c0
 8007708:	20000024 	.word	0x20000024

0800770c <Main_Task>:

void Main_Task (void)
{
 800770c:	b510      	push	{r4, lr}
    uint8_t TaskStatus_u8 = 0;

    SysApp_Init();
 800770e:	f7ff ffb7 	bl	8007680 <SysApp_Init>
    SysApp_Start();
 8007712:	f7ff ffc9 	bl	80076a8 <SysApp_Start>
	for (;;)
	{
		TaskStatus_u8 = 0;

		TaskStatus_u8 |= AppCom_Task();
 8007716:	f7ff fcc1 	bl	800709c <AppCom_Task>
 800771a:	0004      	movs	r4, r0

		TaskStatus_u8 |= AppLora_Task();
 800771c:	f7ff ff84 	bl	8007628 <AppLora_Task>

		#ifdef DEVICE_TYPE_STATION
		#else

			if ((TaskStatus_u8 == 0) && (sModem.Mode == 0))
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <Main_Task+0x44>)
		TaskStatus_u8 |= AppLora_Task();
 8007722:	4320      	orrs	r0, r4
			if ((TaskStatus_u8 == 0) && (sModem.Mode == 0))
 8007724:	7e5c      	ldrb	r4, [r3, #25]
 8007726:	4304      	orrs	r4, r0
 8007728:	b2e4      	uxtb	r4, r4
 800772a:	2c00      	cmp	r4, #0
 800772c:	d1f3      	bne.n	8007716 <Main_Task+0xa>
			{
				LED_OFF(__LED_MODE);
 800772e:	0020      	movs	r0, r4
 8007730:	f002 f99e 	bl	8009a70 <LED_OFF>
				LED_OFF(__LED_MEASURE);
 8007734:	2001      	movs	r0, #1
 8007736:	f002 f99b 	bl	8009a70 <LED_OFF>
				LOG(LOG_DEBUG, "Low power mode");
 800773a:	4906      	ldr	r1, [pc, #24]	; (8007754 <Main_Task+0x48>)
 800773c:	2001      	movs	r0, #1
 800773e:	f002 f93d 	bl	80099bc <LOG>
				UTIL_LPM_SetStopMode((UTIL_LPM_State_t) LPM_FALSE);
 8007742:	0020      	movs	r0, r4
 8007744:	f001 fca2 	bl	800908c <UTIL_LPM_SetStopMode>
				UTIL_LPM_EnterLowPower();
 8007748:	f001 fca6 	bl	8009098 <UTIL_LPM_EnterLowPower>
 800774c:	e7e3      	b.n	8007716 <Main_Task+0xa>
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	200000c0 	.word	0x200000c0
 8007754:	0800ac61 	.word	0x0800ac61

08007758 <STM32_MX_ADC1_Init>:
/* Private variables ---------------------------------------------------------*/
uint8_t AdcInitialized = 0;

/*===================== Funcion ===================== */
void STM32_MX_ADC1_Init(void)
{
 8007758:	b513      	push	{r0, r1, r4, lr}
    ADC_ChannelConfTypeDef sConfig = {0};
 800775a:	2208      	movs	r2, #8
 800775c:	2100      	movs	r1, #0
 800775e:	4668      	mov	r0, sp
 8007760:	f002 fbe4 	bl	8009f2c <memset>
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    hadc1.Init.LowPowerAutoWait = DISABLE;
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc1.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8007764:	2307      	movs	r3, #7
    hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8007766:	2201      	movs	r2, #1
    hadc1.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8007768:	4c1b      	ldr	r4, [pc, #108]	; (80077d8 <STM32_MX_ADC1_Init+0x80>)
 800776a:	63a3      	str	r3, [r4, #56]	; 0x38
    hadc1.Instance = ADC1;
 800776c:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <STM32_MX_ADC1_Init+0x84>)
    hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800776e:	6362      	str	r2, [r4, #52]	; 0x34
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007770:	6122      	str	r2, [r4, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007772:	3203      	adds	r2, #3
    hadc1.Instance = ADC1;
 8007774:	6023      	str	r3, [r4, #0]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007776:	6162      	str	r2, [r4, #20]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007778:	2380      	movs	r3, #128	; 0x80
    hadc1.Init.LowPowerAutoPowerOff = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800777a:	22c2      	movs	r2, #194	; 0xc2
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800777c:	061b      	lsls	r3, r3, #24
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800777e:	32ff      	adds	r2, #255	; 0xff
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007780:	6063      	str	r3, [r4, #4]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007782:	6262      	str	r2, [r4, #36]	; 0x24
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007784:	2300      	movs	r3, #0
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8007786:	0022      	movs	r2, r4
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
    hadc1.Init.OversamplingMode = DISABLE;
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007788:	0020      	movs	r0, r4
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800778a:	322c      	adds	r2, #44	; 0x2c
    hadc1.Init.ContinuousConvMode = DISABLE;
 800778c:	8423      	strh	r3, [r4, #32]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800778e:	60a3      	str	r3, [r4, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007790:	60e3      	str	r3, [r4, #12]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8007792:	61a3      	str	r3, [r4, #24]
    hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8007794:	61e3      	str	r3, [r4, #28]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007796:	62a3      	str	r3, [r4, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8007798:	7013      	strb	r3, [r2, #0]
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800779a:	6323      	str	r3, [r4, #48]	; 0x30
    hadc1.Init.OversamplingMode = DISABLE;
 800779c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800779e:	f7fb fab9 	bl	8002d14 <HAL_ADC_Init>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d001      	beq.n	80077aa <STM32_MX_ADC1_Init+0x52>
    {
        Error_Handler();
 80077a6:	f7fa fc3d 	bl	8002024 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80077aa:	2100      	movs	r1, #0
 80077ac:	0020      	movs	r0, r4
 80077ae:	f7fb fcdf 	bl	8003170 <HAL_ADCEx_Calibration_Start>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d001      	beq.n	80077ba <STM32_MX_ADC1_Init+0x62>
    {
        Error_Handler();
 80077b6:	f7fa fc35 	bl	8002024 <Error_Handler>
    }
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <STM32_MX_ADC1_Init+0x88>)
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077bc:	4669      	mov	r1, sp
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80077be:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80077c0:	2380      	movs	r3, #128	; 0x80
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077c2:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80077c4:	015b      	lsls	r3, r3, #5
 80077c6:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077c8:	f7fb fc7e 	bl	80030c8 <HAL_ADC_ConfigChannel>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d001      	beq.n	80077d4 <STM32_MX_ADC1_Init+0x7c>
    {
        Error_Handler();
 80077d0:	f7fa fc28 	bl	8002024 <Error_Handler>
    }
}
 80077d4:	bd13      	pop	{r0, r1, r4, pc}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	20001120 	.word	0x20001120
 80077dc:	40012400 	.word	0x40012400
 80077e0:	44020000 	.word	0x44020000

080077e4 <HW_AdcReadChannel>:

uint16_t HW_AdcReadChannel (uint32_t Channel)
{
 80077e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e6:	0005      	movs	r5, r0
    ADC_ChannelConfTypeDef  sConfig;
    uint16_t adcData = 0;

	STM32_MX_ADC1_Init();
 80077e8:	f7ff ffb6 	bl	8007758 <STM32_MX_ADC1_Init>

	 /* wait the the Vrefint used by adc is set */
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80077ec:	2308      	movs	r3, #8
 80077ee:	491d      	ldr	r1, [pc, #116]	; (8007864 <HW_AdcReadChannel+0x80>)
 80077f0:	684a      	ldr	r2, [r1, #4]
 80077f2:	421a      	tst	r2, r3
 80077f4:	d0fc      	beq.n	80077f0 <HW_AdcReadChannel+0xc>

	__HAL_RCC_ADC1_CLK_ENABLE() ;
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	4e1b      	ldr	r6, [pc, #108]	; (8007868 <HW_AdcReadChannel+0x84>)

	/*calibrate ADC if any calibraiton hardware*/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80077fa:	4c1c      	ldr	r4, [pc, #112]	; (800786c <HW_AdcReadChannel+0x88>)
	__HAL_RCC_ADC1_CLK_ENABLE() ;
 80077fc:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4313      	orrs	r3, r2
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007802:	2100      	movs	r1, #0
	__HAL_RCC_ADC1_CLK_ENABLE() ;
 8007804:	6373      	str	r3, [r6, #52]	; 0x34
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007806:	0020      	movs	r0, r4
 8007808:	f7fb fcb2 	bl	8003170 <HAL_ADCEx_Calibration_Start>

	/* Deselects all channels*/
	sConfig.Channel = ADC_CHANNEL_MASK;
 800780c:	4b18      	ldr	r3, [pc, #96]	; (8007870 <HW_AdcReadChannel+0x8c>)
	sConfig.Rank = ADC_RANK_NONE;
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 800780e:	4669      	mov	r1, sp
	sConfig.Channel = ADC_CHANNEL_MASK;
 8007810:	9300      	str	r3, [sp, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <HW_AdcReadChannel+0x90>)
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007814:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 8007816:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007818:	f7fb fc56 	bl	80030c8 <HAL_ADC_ConfigChannel>

	/* configure adc channel */
	sConfig.Channel = Channel;
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800781c:	2380      	movs	r3, #128	; 0x80
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 800781e:	4669      	mov	r1, sp
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007820:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007822:	0020      	movs	r0, r4
	sConfig.Channel = Channel;
 8007824:	9500      	str	r5, [sp, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007826:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel( &hadc1, &sConfig);
 8007828:	f7fb fc4e 	bl	80030c8 <HAL_ADC_ConfigChannel>

	/* Start the conversion process */
	if (HAL_ADC_Start(&hadc) != HAL_OK)
 800782c:	0020      	movs	r0, r4
 800782e:	f7fb fb9d 	bl	8002f6c <HAL_ADC_Start>
 8007832:	2800      	cmp	r0, #0
 8007834:	d001      	beq.n	800783a <HW_AdcReadChannel+0x56>
	{
		/* Start Error */
		Error_Handler();
 8007836:	f7fa fbf5 	bl	8002024 <Error_Handler>
	}
	/* Wait for the end of conversion */
	HAL_ADC_PollForConversion( &hadc1, HAL_MAX_DELAY );
 800783a:	2101      	movs	r1, #1
 800783c:	0020      	movs	r0, r4
 800783e:	4249      	negs	r1, r1
 8007840:	f7fb fbde 	bl	8003000 <HAL_ADC_PollForConversion>

	HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8007844:	0020      	movs	r0, r4
 8007846:	f7fb fbbd 	bl	8002fc4 <HAL_ADC_Stop>
	/* Get the converted value of regular channel */
	adcData = HAL_ADC_GetValue ( &hadc1);
 800784a:	0020      	movs	r0, r4
 800784c:	f7fb fc38 	bl	80030c0 <HAL_ADC_GetValue>
 8007850:	0005      	movs	r5, r0
	 HAL_ADC_DeInit(&hadc1);
 8007852:	0020      	movs	r0, r4
 8007854:	f7fb fb36 	bl	8002ec4 <HAL_ADC_DeInit>
	__HAL_RCC_ADC1_CLK_DISABLE() ;
 8007858:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800785a:	4a07      	ldr	r2, [pc, #28]	; (8007878 <HW_AdcReadChannel+0x94>)
    return adcData;
 800785c:	b2a8      	uxth	r0, r5
	__HAL_RCC_ADC1_CLK_DISABLE() ;
 800785e:	4013      	ands	r3, r2
 8007860:	6373      	str	r3, [r6, #52]	; 0x34
}
 8007862:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007864:	40007000 	.word	0x40007000
 8007868:	40021000 	.word	0x40021000
 800786c:	20001120 	.word	0x20001120
 8007870:	0007ffff 	.word	0x0007ffff
 8007874:	00001001 	.word	0x00001001
 8007878:	fffffdff 	.word	0xfffffdff

0800787c <ADC_Desequence_Powerhungry_Channels>:

void ADC_Desequence_Powerhungry_Channels(void)
{
 800787c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined (STM32L072xx) || defined (STM32L082xx)
     ADC_ChannelConfTypeDef sConfig;

    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 800787e:	4c08      	ldr	r4, [pc, #32]	; (80078a0 <ADC_Desequence_Powerhungry_Channels+0x24>)
    sConfig.Rank = ADC_RANK_NONE;
 8007880:	4d08      	ldr	r5, [pc, #32]	; (80078a4 <ADC_Desequence_Powerhungry_Channels+0x28>)
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <ADC_Desequence_Powerhungry_Channels+0x2c>)
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007884:	4669      	mov	r1, sp
 8007886:	0020      	movs	r0, r4
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007888:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_NONE;
 800788a:	9501      	str	r5, [sp, #4]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 800788c:	f7fb fc1c 	bl	80030c8 <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <ADC_Desequence_Powerhungry_Channels+0x30>)
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 8007892:	4669      	mov	r1, sp
 8007894:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_NONE;
 8007896:	9501      	str	r5, [sp, #4]
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8007898:	9300      	str	r3, [sp, #0]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 800789a:	f7fb fc15 	bl	80030c8 <HAL_ADC_ConfigChannel>
#endif
}
 800789e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80078a0:	20001120 	.word	0x20001120
 80078a4:	00001001 	.word	0x00001001
 80078a8:	48040000 	.word	0x48040000
 80078ac:	44020000 	.word	0x44020000

080078b0 <Get_Vol_VNA>:

uint16_t Get_Vol_VNA (void)
{
 80078b0:	b510      	push	{r4, lr}
	uint16_t Value_ADC_u16;
	uint16_t Temp_mV = 0;
    Value_ADC_u16 = HW_AdcReadChannel(ADC_CHANNEL_2);
 80078b2:	4805      	ldr	r0, [pc, #20]	; (80078c8 <Get_Vol_VNA+0x18>)
 80078b4:	f7ff ff96 	bl	80077e4 <HW_AdcReadChannel>
	Temp_mV = (VREF * Value_ADC_u16) / 4095 + DEFAULT_OFFSET_ADC_VNA / 2;
 80078b8:	4b04      	ldr	r3, [pc, #16]	; (80078cc <Get_Vol_VNA+0x1c>)
 80078ba:	4905      	ldr	r1, [pc, #20]	; (80078d0 <Get_Vol_VNA+0x20>)
 80078bc:	4358      	muls	r0, r3
 80078be:	f7f8 fc49 	bl	8000154 <__udivsi3>
 80078c2:	300f      	adds	r0, #15
	return Temp_mV;
 80078c4:	b280      	uxth	r0, r0
}
 80078c6:	bd10      	pop	{r4, pc}
 80078c8:	08000004 	.word	0x08000004
 80078cc:	00000bb8 	.word	0x00000bb8
 80078d0:	00000fff 	.word	0x00000fff

080078d4 <Get_Vol_VP>:

uint16_t Get_Vol_VP (void)
{
 80078d4:	b510      	push	{r4, lr}
	uint16_t Value_ADC_u16;
	uint16_t Temp_mV = 0;
    Value_ADC_u16 = HW_AdcReadChannel(ADC_CHANNEL_3);
 80078d6:	4805      	ldr	r0, [pc, #20]	; (80078ec <Get_Vol_VP+0x18>)
 80078d8:	f7ff ff84 	bl	80077e4 <HW_AdcReadChannel>
	Temp_mV = (VREF * Value_ADC_u16) / 4095 + DEFAULT_OFFSET_ADC_VP / 2;
 80078dc:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <Get_Vol_VP+0x1c>)
 80078de:	4905      	ldr	r1, [pc, #20]	; (80078f4 <Get_Vol_VP+0x20>)
 80078e0:	4358      	muls	r0, r3
 80078e2:	f7f8 fc37 	bl	8000154 <__udivsi3>
 80078e6:	300f      	adds	r0, #15
	return Temp_mV;
 80078e8:	b280      	uxth	r0, r0
}
 80078ea:	bd10      	pop	{r4, pc}
 80078ec:	0c000008 	.word	0x0c000008
 80078f0:	00000bb8 	.word	0x00000bb8
 80078f4:	00000fff 	.word	0x00000fff

080078f8 <Get_Vol_BAT>:

uint8_t Get_Vol_BAT (void)
{
 80078f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t Value_ADC_u16;
	float Temp_mV = 0;
	float PercentBat;
    Value_ADC_u16 = HW_AdcReadChannel(ADC_CHANNEL_4);
 80078fa:	481d      	ldr	r0, [pc, #116]	; (8007970 <Get_Vol_BAT+0x78>)
 80078fc:	f7ff ff72 	bl	80077e4 <HW_AdcReadChannel>
	Temp_mV = (VREF * Value_ADC_u16) / 4095.0 / 1000.0 * 2;
 8007900:	4b1c      	ldr	r3, [pc, #112]	; (8007974 <Get_Vol_BAT+0x7c>)
 8007902:	4358      	muls	r0, r3
 8007904:	f7fa f9ca 	bl	8001c9c <__aeabi_ui2d>
 8007908:	2200      	movs	r2, #0
 800790a:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <Get_Vol_BAT+0x80>)
 800790c:	f7f9 fed8 	bl	80016c0 <__aeabi_ddiv>
 8007910:	2200      	movs	r2, #0
 8007912:	4b1a      	ldr	r3, [pc, #104]	; (800797c <Get_Vol_BAT+0x84>)
 8007914:	f7f9 fed4 	bl	80016c0 <__aeabi_ddiv>
 8007918:	0002      	movs	r2, r0
 800791a:	000b      	movs	r3, r1
 800791c:	f7f9 fb70 	bl	8001000 <__aeabi_dadd>
 8007920:	f7fa f9e2 	bl	8001ce8 <__aeabi_d2f>
	PercentBat = 579*Temp_mV*Temp_mV - 1936*Temp_mV + 2089 - 55*Temp_mV*Temp_mV*Temp_mV;
 8007924:	4916      	ldr	r1, [pc, #88]	; (8007980 <Get_Vol_BAT+0x88>)
	Temp_mV = (VREF * Value_ADC_u16) / 4095.0 / 1000.0 * 2;
 8007926:	1c04      	adds	r4, r0, #0
	PercentBat = 579*Temp_mV*Temp_mV - 1936*Temp_mV + 2089 - 55*Temp_mV*Temp_mV*Temp_mV;
 8007928:	f7f9 f85c 	bl	80009e4 <__aeabi_fmul>
 800792c:	1c21      	adds	r1, r4, #0
 800792e:	f7f9 f859 	bl	80009e4 <__aeabi_fmul>
 8007932:	4914      	ldr	r1, [pc, #80]	; (8007984 <Get_Vol_BAT+0x8c>)
 8007934:	1c05      	adds	r5, r0, #0
 8007936:	1c20      	adds	r0, r4, #0
 8007938:	f7f9 f854 	bl	80009e4 <__aeabi_fmul>
 800793c:	1c01      	adds	r1, r0, #0
 800793e:	1c28      	adds	r0, r5, #0
 8007940:	f7f9 f99e 	bl	8000c80 <__aeabi_fsub>
 8007944:	4910      	ldr	r1, [pc, #64]	; (8007988 <Get_Vol_BAT+0x90>)
 8007946:	f7f8 fead 	bl	80006a4 <__aeabi_fadd>
 800794a:	4910      	ldr	r1, [pc, #64]	; (800798c <Get_Vol_BAT+0x94>)
 800794c:	1c05      	adds	r5, r0, #0
 800794e:	1c20      	adds	r0, r4, #0
 8007950:	f7f9 f848 	bl	80009e4 <__aeabi_fmul>
 8007954:	1c21      	adds	r1, r4, #0
 8007956:	f7f9 f845 	bl	80009e4 <__aeabi_fmul>
 800795a:	1c21      	adds	r1, r4, #0
 800795c:	f7f9 f842 	bl	80009e4 <__aeabi_fmul>
 8007960:	1c01      	adds	r1, r0, #0
 8007962:	1c28      	adds	r0, r5, #0
 8007964:	f7f9 f98c 	bl	8000c80 <__aeabi_fsub>
	return PercentBat;
 8007968:	f7f8 fdb8 	bl	80004dc <__aeabi_f2uiz>
 800796c:	b2c0      	uxtb	r0, r0
}
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	10000010 	.word	0x10000010
 8007974:	00000bb8 	.word	0x00000bb8
 8007978:	40affe00 	.word	0x40affe00
 800797c:	408f4000 	.word	0x408f4000
 8007980:	4410c000 	.word	0x4410c000
 8007984:	44f20000 	.word	0x44f20000
 8007988:	45029000 	.word	0x45029000
 800798c:	425c0000 	.word	0x425c0000

08007990 <_fAT_SET_LED>:
}

void _fAT_SET_LED(sData *str_Receiv, uint16_t Pos)
{

}
 8007990:	4770      	bx	lr
	...

08007994 <_fAT_GET_DEVICE_ID>:
{
 8007994:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sDCU_id.Data_a8, sModem.sDCU_id.Length_u16);
 8007996:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <_fAT_GET_DEVICE_ID+0x10>)
 8007998:	8899      	ldrh	r1, [r3, #4]
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	f000 fbb2 	bl	8008104 <DCU_Response_AT>
}
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	200000c0 	.word	0x200000c0

080079a8 <_fAT_GET_NETWORK_ID>:
{
 80079a8:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sNET_id.Data_a8, sModem.sNET_id.Length_u16);
 80079aa:	4b03      	ldr	r3, [pc, #12]	; (80079b8 <_fAT_GET_NETWORK_ID+0x10>)
 80079ac:	8999      	ldrh	r1, [r3, #12]
 80079ae:	6898      	ldr	r0, [r3, #8]
 80079b0:	f000 fba8 	bl	8008104 <DCU_Response_AT>
}
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	200000c0 	.word	0x200000c0

080079bc <_fAT_GET_DUTY_WAKEUP>:
{
 80079bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t     aTemp[14] = {0};
 80079be:	240a      	movs	r4, #10
 80079c0:	0022      	movs	r2, r4
 80079c2:	2100      	movs	r1, #0
 80079c4:	a801      	add	r0, sp, #4
 80079c6:	f002 fab1 	bl	8009f2c <memset>
    aTemp[length++] = 'F';
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <_fAT_GET_DUTY_WAKEUP+0x70>)
    aTemp[length++] = '=';
 80079cc:	466a      	mov	r2, sp
    aTemp[length++] = 'F';
 80079ce:	9300      	str	r3, [sp, #0]
    aTemp[length++] = '=';
 80079d0:	233d      	movs	r3, #61	; 0x3d
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 80079d2:	4d17      	ldr	r5, [pc, #92]	; (8007a30 <_fAT_GET_DUTY_WAKEUP+0x74>)
    aTemp[length++] = '=';
 80079d4:	7113      	strb	r3, [r2, #4]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 80079d6:	782e      	ldrb	r6, [r5, #0]
 80079d8:	0021      	movs	r1, r4
 80079da:	0030      	movs	r0, r6
 80079dc:	f7f8 fbba 	bl	8000154 <__udivsi3>
 80079e0:	466b      	mov	r3, sp
 80079e2:	3030      	adds	r0, #48	; 0x30
 80079e4:	7158      	strb	r0, [r3, #5]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 80079e6:	0021      	movs	r1, r4
 80079e8:	0030      	movs	r0, r6
 80079ea:	f7f8 fc39 	bl	8000260 <__aeabi_uidivmod>
 80079ee:	466b      	mov	r3, sp
 80079f0:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = 'x';
 80079f2:	466a      	mov	r2, sp
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 80079f4:	7199      	strb	r1, [r3, #6]
    aTemp[length++] = 'x';
 80079f6:	2378      	movs	r3, #120	; 0x78
 80079f8:	71d3      	strb	r3, [r2, #7]
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 80079fa:	886d      	ldrh	r5, [r5, #2]
 80079fc:	0021      	movs	r1, r4
 80079fe:	0028      	movs	r0, r5
 8007a00:	f7f8 fba8 	bl	8000154 <__udivsi3>
 8007a04:	0021      	movs	r1, r4
 8007a06:	b280      	uxth	r0, r0
 8007a08:	f7f8 fc2a 	bl	8000260 <__aeabi_uidivmod>
 8007a0c:	466b      	mov	r3, sp
 8007a0e:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8007a10:	0028      	movs	r0, r5
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 8007a12:	7219      	strb	r1, [r3, #8]
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8007a14:	0021      	movs	r1, r4
 8007a16:	f7f8 fc23 	bl	8000260 <__aeabi_uidivmod>
 8007a1a:	466b      	mov	r3, sp
 8007a1c:	3130      	adds	r1, #48	; 0x30
 8007a1e:	7259      	strb	r1, [r3, #9]
    DCU_Response_AT(&aTemp[0], length);
 8007a20:	4668      	mov	r0, sp
 8007a22:	0021      	movs	r1, r4
 8007a24:	f000 fb6e 	bl	8008104 <DCU_Response_AT>
}
 8007a28:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	51455246 	.word	0x51455246
 8007a30:	20000114 	.word	0x20000114

08007a34 <_fAT_GET_TYPE_MODEM>:
{
 8007a34:	b510      	push	{r4, lr}
 8007a36:	b08e      	sub	sp, #56	; 0x38
    uint8_t     aTemp[50] = {0};
 8007a38:	222e      	movs	r2, #46	; 0x2e
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	a802      	add	r0, sp, #8
 8007a3e:	f002 fa75 	bl	8009f2c <memset>
    aTemp[length++] = 'T';
 8007a42:	4b27      	ldr	r3, [pc, #156]	; (8007ae0 <_fAT_GET_TYPE_MODEM+0xac>)
    uint8_t     aTemp[50] = {0};
 8007a44:	ac01      	add	r4, sp, #4
    aTemp[length++] = 'T';
 8007a46:	9301      	str	r3, [sp, #4]
    aTemp[length++] = ':';
 8007a48:	4b26      	ldr	r3, [pc, #152]	; (8007ae4 <_fAT_GET_TYPE_MODEM+0xb0>)
 8007a4a:	80a3      	strh	r3, [r4, #4]
    switch (sModem.TypeModem_u8)
 8007a4c:	4b26      	ldr	r3, [pc, #152]	; (8007ae8 <_fAT_GET_TYPE_MODEM+0xb4>)
 8007a4e:	7e1b      	ldrb	r3, [r3, #24]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d041      	beq.n	8007ad8 <_fAT_GET_TYPE_MODEM+0xa4>
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d041      	beq.n	8007adc <_fAT_GET_TYPE_MODEM+0xa8>
 8007a58:	2106      	movs	r1, #6
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d136      	bne.n	8007acc <_fAT_GET_TYPE_MODEM+0x98>
    	    aTemp[length++] = 'A';
 8007a5e:	220e      	movs	r2, #14
    	    aTemp[length++] = 'N';
 8007a60:	4b22      	ldr	r3, [pc, #136]	; (8007aec <_fAT_GET_TYPE_MODEM+0xb8>)
 8007a62:	80e3      	strh	r3, [r4, #6]
    	    aTemp[length++] = 'D';
 8007a64:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <_fAT_GET_TYPE_MODEM+0xbc>)
 8007a66:	9303      	str	r3, [sp, #12]
    	    aTemp[length++] = 'N';
 8007a68:	4b22      	ldr	r3, [pc, #136]	; (8007af4 <_fAT_GET_TYPE_MODEM+0xc0>)
 8007a6a:	81a3      	strh	r3, [r4, #12]
    	    aTemp[length++] = 'N';
 8007a6c:	234e      	movs	r3, #78	; 0x4e
    	    aTemp[length++] = 'O';
 8007a6e:	214f      	movs	r1, #79	; 0x4f
    	    aTemp[length++] = 'N';
 8007a70:	54a3      	strb	r3, [r4, r2]
    	    aTemp[length++] = 'O';
 8007a72:	1c53      	adds	r3, r2, #1
 8007a74:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'D';
 8007a76:	1c93      	adds	r3, r2, #2
 8007a78:	390b      	subs	r1, #11
 8007a7a:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'E';
 8007a7c:	1cd3      	adds	r3, r2, #3
 8007a7e:	3101      	adds	r1, #1
 8007a80:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = ' ';
 8007a82:	1d13      	adds	r3, r2, #4
 8007a84:	3925      	subs	r1, #37	; 0x25
 8007a86:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'V';
 8007a88:	1d53      	adds	r3, r2, #5
 8007a8a:	3136      	adds	r1, #54	; 0x36
 8007a8c:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'P';
 8007a8e:	1dd3      	adds	r3, r2, #7
 8007a90:	3906      	subs	r1, #6
 8007a92:	3206      	adds	r2, #6
 8007a94:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'S';
 8007a96:	2253      	movs	r2, #83	; 0x53
    	    aTemp[length++] = 'T';
 8007a98:	2154      	movs	r1, #84	; 0x54
    	    aTemp[length++] = 'A';
 8007a9a:	2041      	movs	r0, #65	; 0x41
    	    aTemp[length++] = 'S';
 8007a9c:	54e2      	strb	r2, [r4, r3]
 8007a9e:	1c5a      	adds	r2, r3, #1
    	    aTemp[length++] = 'T';
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	54a1      	strb	r1, [r4, r2]
 8007aa4:	1c9a      	adds	r2, r3, #2
    	    aTemp[length++] = 'A';
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	54a0      	strb	r0, [r4, r2]
 8007aaa:	1cda      	adds	r2, r3, #3
    	    aTemp[length++] = 'T';
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	54a1      	strb	r1, [r4, r2]
 8007ab0:	1d1a      	adds	r2, r3, #4
    	    aTemp[length++] = 'I';
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	390b      	subs	r1, #11
 8007ab6:	54a1      	strb	r1, [r4, r2]
 8007ab8:	1d5a      	adds	r2, r3, #5
    	    aTemp[length++] = 'O';
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	3106      	adds	r1, #6
 8007abe:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'N';
 8007ac0:	224e      	movs	r2, #78	; 0x4e
 8007ac2:	1dd9      	adds	r1, r3, #7
    	    aTemp[length++] = 'O';
 8007ac4:	3306      	adds	r3, #6
    	    aTemp[length++] = 'N';
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	b2c9      	uxtb	r1, r1
 8007aca:	54e2      	strb	r2, [r4, r3]
    DCU_Response_AT(&aTemp[0], length);
 8007acc:	0020      	movs	r0, r4
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	f000 fb18 	bl	8008104 <DCU_Response_AT>
}
 8007ad4:	b00e      	add	sp, #56	; 0x38
 8007ad6:	bd10      	pop	{r4, pc}
    switch (sModem.TypeModem_u8)
 8007ad8:	2206      	movs	r2, #6
 8007ada:	e7c7      	b.n	8007a6c <_fAT_GET_TYPE_MODEM+0x38>
 8007adc:	2306      	movs	r3, #6
 8007ade:	e7da      	b.n	8007a96 <_fAT_GET_TYPE_MODEM+0x62>
 8007ae0:	45505954 	.word	0x45505954
 8007ae4:	0000203a 	.word	0x0000203a
 8007ae8:	200000c0 	.word	0x200000c0
 8007aec:	00004f4e 	.word	0x00004f4e
 8007af0:	56204544 	.word	0x56204544
 8007af4:	0000414e 	.word	0x0000414e

08007af8 <_fAT_GET_RTC>:
{
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
    uint8_t aTEMP_RTC[40] = {0};
 8007afc:	2224      	movs	r2, #36	; 0x24
 8007afe:	2100      	movs	r1, #0
 8007b00:	a801      	add	r0, sp, #4
 8007b02:	f002 fa13 	bl	8009f2c <memset>
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8007b06:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <_fAT_GET_RTC+0xfc>)
    aTEMP_RTC[length++] = '=';
 8007b08:	466a      	mov	r2, sp
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8007b0a:	9300      	str	r3, [sp, #0]
    aTEMP_RTC[length++] = '=';
 8007b0c:	233d      	movs	r3, #61	; 0x3d
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 8007b0e:	4c3a      	ldr	r4, [pc, #232]	; (8007bf8 <_fAT_GET_RTC+0x100>)
    aTEMP_RTC[length++] = '=';
 8007b10:	7113      	strb	r3, [r2, #4]
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 8007b12:	7825      	ldrb	r5, [r4, #0]
 8007b14:	210a      	movs	r1, #10
 8007b16:	0028      	movs	r0, r5
 8007b18:	f7f8 fb1c 	bl	8000154 <__udivsi3>
 8007b1c:	466b      	mov	r3, sp
 8007b1e:	3030      	adds	r0, #48	; 0x30
 8007b20:	7158      	strb	r0, [r3, #5]
 8007b22:	210a      	movs	r1, #10
 8007b24:	0028      	movs	r0, r5
 8007b26:	f7f8 fb9b 	bl	8000260 <__aeabi_uidivmod>
 8007b2a:	253a      	movs	r5, #58	; 0x3a
 8007b2c:	466b      	mov	r3, sp
 8007b2e:	3130      	adds	r1, #48	; 0x30
 8007b30:	7199      	strb	r1, [r3, #6]
 8007b32:	71dd      	strb	r5, [r3, #7]
	aTEMP_RTC[length++] = sRTC.min / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.min % 10 + 0x30;     aTEMP_RTC[length++] = ':';
 8007b34:	7866      	ldrb	r6, [r4, #1]
 8007b36:	210a      	movs	r1, #10
 8007b38:	0030      	movs	r0, r6
 8007b3a:	f7f8 fb0b 	bl	8000154 <__udivsi3>
 8007b3e:	466b      	mov	r3, sp
 8007b40:	3030      	adds	r0, #48	; 0x30
 8007b42:	7218      	strb	r0, [r3, #8]
 8007b44:	210a      	movs	r1, #10
 8007b46:	0030      	movs	r0, r6
 8007b48:	f7f8 fb8a 	bl	8000260 <__aeabi_uidivmod>
 8007b4c:	466b      	mov	r3, sp
 8007b4e:	3130      	adds	r1, #48	; 0x30
 8007b50:	7259      	strb	r1, [r3, #9]
 8007b52:	729d      	strb	r5, [r3, #10]
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 8007b54:	78a5      	ldrb	r5, [r4, #2]
 8007b56:	210a      	movs	r1, #10
 8007b58:	0028      	movs	r0, r5
 8007b5a:	f7f8 fafb 	bl	8000154 <__udivsi3>
 8007b5e:	466b      	mov	r3, sp
 8007b60:	3030      	adds	r0, #48	; 0x30
 8007b62:	72d8      	strb	r0, [r3, #11]
 8007b64:	210a      	movs	r1, #10
 8007b66:	0028      	movs	r0, r5
 8007b68:	f7f8 fb7a 	bl	8000260 <__aeabi_uidivmod>
 8007b6c:	466b      	mov	r3, sp
 8007b6e:	3130      	adds	r1, #48	; 0x30
 8007b70:	466a      	mov	r2, sp
 8007b72:	7319      	strb	r1, [r3, #12]
 8007b74:	233b      	movs	r3, #59	; 0x3b
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 8007b76:	252d      	movs	r5, #45	; 0x2d
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 8007b78:	7353      	strb	r3, [r2, #13]
    aTEMP_RTC[length++] = 0x0D;
 8007b7a:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <_fAT_GET_RTC+0x104>)
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 8007b7c:	210a      	movs	r1, #10
    aTEMP_RTC[length++] = 0x0D;
 8007b7e:	81d3      	strh	r3, [r2, #14]
	aTEMP_RTC[length++] = 'D'; aTEMP_RTC[length++] = 'A'; aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'E';
 8007b80:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <_fAT_GET_RTC+0x108>)
 8007b82:	9304      	str	r3, [sp, #16]
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 8007b84:	78e3      	ldrb	r3, [r4, #3]
 8007b86:	7555      	strb	r5, [r2, #21]
 8007b88:	3331      	adds	r3, #49	; 0x31
 8007b8a:	7513      	strb	r3, [r2, #20]
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 8007b8c:	7926      	ldrb	r6, [r4, #4]
 8007b8e:	0030      	movs	r0, r6
 8007b90:	f7f8 fae0 	bl	8000154 <__udivsi3>
 8007b94:	466b      	mov	r3, sp
 8007b96:	3030      	adds	r0, #48	; 0x30
 8007b98:	7598      	strb	r0, [r3, #22]
 8007b9a:	210a      	movs	r1, #10
 8007b9c:	0030      	movs	r0, r6
 8007b9e:	f7f8 fb5f 	bl	8000260 <__aeabi_uidivmod>
 8007ba2:	466b      	mov	r3, sp
 8007ba4:	3130      	adds	r1, #48	; 0x30
 8007ba6:	75d9      	strb	r1, [r3, #23]
 8007ba8:	761d      	strb	r5, [r3, #24]
	aTEMP_RTC[length++] = sRTC.month / 10 + 0x30;   aTEMP_RTC[length++] = sRTC.month % 10 + 0x30;     aTEMP_RTC[length++] = '-';
 8007baa:	7966      	ldrb	r6, [r4, #5]
 8007bac:	210a      	movs	r1, #10
 8007bae:	0030      	movs	r0, r6
 8007bb0:	f7f8 fad0 	bl	8000154 <__udivsi3>
 8007bb4:	466b      	mov	r3, sp
 8007bb6:	3030      	adds	r0, #48	; 0x30
 8007bb8:	7658      	strb	r0, [r3, #25]
 8007bba:	210a      	movs	r1, #10
 8007bbc:	0030      	movs	r0, r6
 8007bbe:	f7f8 fb4f 	bl	8000260 <__aeabi_uidivmod>
 8007bc2:	466b      	mov	r3, sp
 8007bc4:	3130      	adds	r1, #48	; 0x30
 8007bc6:	7699      	strb	r1, [r3, #26]
 8007bc8:	76dd      	strb	r5, [r3, #27]
	aTEMP_RTC[length++] = sRTC.year / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.year % 10 + 0x30;
 8007bca:	79a4      	ldrb	r4, [r4, #6]
 8007bcc:	210a      	movs	r1, #10
 8007bce:	0020      	movs	r0, r4
 8007bd0:	f7f8 fac0 	bl	8000154 <__udivsi3>
 8007bd4:	466b      	mov	r3, sp
 8007bd6:	3030      	adds	r0, #48	; 0x30
 8007bd8:	7718      	strb	r0, [r3, #28]
 8007bda:	210a      	movs	r1, #10
 8007bdc:	0020      	movs	r0, r4
 8007bde:	f7f8 fb3f 	bl	8000260 <__aeabi_uidivmod>
 8007be2:	466b      	mov	r3, sp
 8007be4:	3130      	adds	r1, #48	; 0x30
 8007be6:	7759      	strb	r1, [r3, #29]
	DCU_Response_AT(aTEMP_RTC, length);
 8007be8:	4668      	mov	r0, sp
 8007bea:	211e      	movs	r1, #30
 8007bec:	f000 fa8a 	bl	8008104 <DCU_Response_AT>
}
 8007bf0:	b00a      	add	sp, #40	; 0x28
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	454d4954 	.word	0x454d4954
 8007bf8:	200013c0 	.word	0x200013c0
 8007bfc:	0000440d 	.word	0x0000440d
 8007c00:	3d455441 	.word	0x3d455441

08007c04 <_fAT_GET_AUTHOR>:
{
//    DCU_Response_AT(sFirmVersion.Data_a8, sFirmVersion.Length_u16);
}

void _fAT_GET_AUTHOR(sData *str_Receiv, uint16_t Pos)
{
 8007c04:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"Hello, we are the developers of this project.", 45);
 8007c06:	212d      	movs	r1, #45	; 0x2d
 8007c08:	481f      	ldr	r0, [pc, #124]	; (8007c88 <_fAT_GET_AUTHOR+0x84>)
 8007c0a:	f000 fa7b 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hanoi University of Science and Technology.", 43);
 8007c0e:	212b      	movs	r1, #43	; 0x2b
 8007c10:	481e      	ldr	r0, [pc, #120]	; (8007c8c <_fAT_GET_AUTHOR+0x88>)
 8007c12:	f000 fa77 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Industrial Instrumentation & IoT Laboratory.", 44);
 8007c16:	212c      	movs	r1, #44	; 0x2c
 8007c18:	481d      	ldr	r0, [pc, #116]	; (8007c90 <_fAT_GET_AUTHOR+0x8c>)
 8007c1a:	f000 fa73 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"List of project participants:", 29);
 8007c1e:	211d      	movs	r1, #29
 8007c20:	481c      	ldr	r0, [pc, #112]	; (8007c94 <_fAT_GET_AUTHOR+0x90>)
 8007c22:	f000 fa6f 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Project Manager: Nguyen Quang Huy", 33);
 8007c26:	2121      	movs	r1, #33	; 0x21
 8007c28:	481b      	ldr	r0, [pc, #108]	; (8007c98 <_fAT_GET_AUTHOR+0x94>)
 8007c2a:	f000 fa6b 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hardware Designer: Ninh La Van Canh", 35);
 8007c2e:	2123      	movs	r1, #35	; 0x23
 8007c30:	481a      	ldr	r0, [pc, #104]	; (8007c9c <_fAT_GET_AUTHOR+0x98>)
 8007c32:	f000 fa67 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Software Developer: Huy Hung\r\n", 28);
 8007c36:	211c      	movs	r1, #28
 8007c38:	4819      	ldr	r0, [pc, #100]	; (8007ca0 <_fAT_GET_AUTHOR+0x9c>)
 8007c3a:	f000 fa63 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"and me.", 7);
 8007c3e:	2107      	movs	r1, #7
 8007c40:	4818      	ldr	r0, [pc, #96]	; (8007ca4 <_fAT_GET_AUTHOR+0xa0>)
 8007c42:	f000 fa5f 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"  ______   _____   _______  _______  _______ ", 45);
 8007c46:	212d      	movs	r1, #45	; 0x2d
 8007c48:	4817      	ldr	r0, [pc, #92]	; (8007ca8 <_fAT_GET_AUTHOR+0xa4>)
 8007c4a:	f000 fa5b 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" / _____) / ___ \\ /  _____)|__   __||__   __|", 45);
 8007c4e:	212d      	movs	r1, #45	; 0x2d
 8007c50:	4816      	ldr	r0, [pc, #88]	; (8007cac <_fAT_GET_AUTHOR+0xa8>)
 8007c52:	f000 fa57 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"( (____  / /___\\ \\| |  ___    | |      | |   ", 42);
 8007c56:	212a      	movs	r1, #42	; 0x2a
 8007c58:	4815      	ldr	r0, [pc, #84]	; (8007cb0 <_fAT_GET_AUTHOR+0xac>)
 8007c5a:	f000 fa53 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" \\____ \\ |  ___  || | |__ |   | |      | |   ", 42);
 8007c5e:	212a      	movs	r1, #42	; 0x2a
 8007c60:	4814      	ldr	r0, [pc, #80]	; (8007cb4 <_fAT_GET_AUTHOR+0xb0>)
 8007c62:	f000 fa4f 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" _____) )| |   | || |___/ | __| |__    | |   ", 42);
 8007c66:	212a      	movs	r1, #42	; 0x2a
 8007c68:	4813      	ldr	r0, [pc, #76]	; (8007cb8 <_fAT_GET_AUTHOR+0xb4>)
 8007c6a:	f000 fa4b 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"(______/ |_|   |_|\\_______/|_______|   |_|   ", 42);
 8007c6e:	212a      	movs	r1, #42	; 0x2a
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <_fAT_GET_AUTHOR+0xb8>)
 8007c72:	f000 fa47 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"/******(C) COPYRIGHT by Bui Viet Duc ******/ ", 42);
 8007c76:	212a      	movs	r1, #42	; 0x2a
 8007c78:	4811      	ldr	r0, [pc, #68]	; (8007cc0 <_fAT_GET_AUTHOR+0xbc>)
 8007c7a:	f000 fa43 	bl	8008104 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Thank you for everything. Good luck. See you again.", 51);
 8007c7e:	2133      	movs	r1, #51	; 0x33
 8007c80:	4810      	ldr	r0, [pc, #64]	; (8007cc4 <_fAT_GET_AUTHOR+0xc0>)
 8007c82:	f000 fa3f 	bl	8008104 <DCU_Response_AT>
}
 8007c86:	bd10      	pop	{r4, pc}
 8007c88:	0800ac70 	.word	0x0800ac70
 8007c8c:	0800ac9e 	.word	0x0800ac9e
 8007c90:	0800acca 	.word	0x0800acca
 8007c94:	0800acf7 	.word	0x0800acf7
 8007c98:	0800ad15 	.word	0x0800ad15
 8007c9c:	0800ad37 	.word	0x0800ad37
 8007ca0:	0800ad5b 	.word	0x0800ad5b
 8007ca4:	0800ad7a 	.word	0x0800ad7a
 8007ca8:	0800ad82 	.word	0x0800ad82
 8007cac:	0800adb0 	.word	0x0800adb0
 8007cb0:	0800adde 	.word	0x0800adde
 8007cb4:	0800ae0c 	.word	0x0800ae0c
 8007cb8:	0800ae3a 	.word	0x0800ae3a
 8007cbc:	0800ae68 	.word	0x0800ae68
 8007cc0:	0800ae96 	.word	0x0800ae96
 8007cc4:	0800aec4 	.word	0x0800aec4

08007cc8 <_fAT_SET_DUTY_WAKEUP>:
{
 8007cc8:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 < (Pos + 5))
 8007cca:	8883      	ldrh	r3, [r0, #4]
 8007ccc:	1d0c      	adds	r4, r1, #4
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	db04      	blt.n	8007cdc <_fAT_SET_DUTY_WAKEUP+0x14>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	4815      	ldr	r0, [pc, #84]	; (8007d2c <_fAT_SET_DUTY_WAKEUP+0x64>)
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8007cd6:	f000 fa15 	bl	8008104 <DCU_Response_AT>
}
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cdc:	220a      	movs	r2, #10
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cde:	6800      	ldr	r0, [r0, #0]
 8007ce0:	1c4d      	adds	r5, r1, #1
 8007ce2:	5c43      	ldrb	r3, [r0, r1]
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007ce4:	b2ad      	uxth	r5, r5
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007ce6:	3b30      	subs	r3, #48	; 0x30
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007ce8:	4353      	muls	r3, r2
 8007cea:	5d45      	ldrb	r5, [r0, r5]
    Pos++;
 8007cec:	3103      	adds	r1, #3
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cee:	195b      	adds	r3, r3, r5
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cf0:	b289      	uxth	r1, r1
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cf2:	b2db      	uxtb	r3, r3
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cf4:	b2a4      	uxth	r4, r4
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cf6:	5c45      	ldrb	r5, [r0, r1]
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007cf8:	5d01      	ldrb	r1, [r0, r4]
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	3831      	subs	r0, #49	; 0x31
 8007cfe:	2809      	cmp	r0, #9
 8007d00:	d811      	bhi.n	8007d26 <_fAT_SET_DUTY_WAKEUP+0x5e>
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007d02:	3d30      	subs	r5, #48	; 0x30
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007d04:	436a      	muls	r2, r5
 8007d06:	3930      	subs	r1, #48	; 0x30
 8007d08:	1852      	adds	r2, r2, r1
 8007d0a:	b292      	uxth	r2, r2
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 8007d0c:	2a64      	cmp	r2, #100	; 0x64
 8007d0e:	d80a      	bhi.n	8007d26 <_fAT_SET_DUTY_WAKEUP+0x5e>
        sFreqInfor.NumWakeup_u8 = TempNum;
 8007d10:	4907      	ldr	r1, [pc, #28]	; (8007d30 <_fAT_SET_DUTY_WAKEUP+0x68>)
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007d12:	3b30      	subs	r3, #48	; 0x30
        sFreqInfor.NumWakeup_u8 = TempNum;
 8007d14:	700b      	strb	r3, [r1, #0]
        sFreqInfor.FreqWakeup_u32 = TempFre;
 8007d16:	804a      	strh	r2, [r1, #2]
        Save_Freq_Send_Data();
 8007d18:	f000 fb12 	bl	8008340 <Save_Freq_Send_Data>
        Reset_Chip_Immediately();
 8007d1c:	f000 f9e4 	bl	80080e8 <Reset_Chip_Immediately>
        DCU_Response_AT ((uint8_t *)"OK", 2);
 8007d20:	2102      	movs	r1, #2
 8007d22:	4804      	ldr	r0, [pc, #16]	; (8007d34 <_fAT_SET_DUTY_WAKEUP+0x6c>)
 8007d24:	e7d7      	b.n	8007cd6 <_fAT_SET_DUTY_WAKEUP+0xe>
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8007d26:	2105      	movs	r1, #5
 8007d28:	4803      	ldr	r0, [pc, #12]	; (8007d38 <_fAT_SET_DUTY_WAKEUP+0x70>)
 8007d2a:	e7d4      	b.n	8007cd6 <_fAT_SET_DUTY_WAKEUP+0xe>
 8007d2c:	0800aef8 	.word	0x0800aef8
 8007d30:	20000114 	.word	0x20000114
 8007d34:	0800aefd 	.word	0x0800aefd
 8007d38:	0800af00 	.word	0x0800af00

08007d3c <_fAT_SET_TYPE_MODEM>:
{
 8007d3c:	b510      	push	{r4, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8007d3e:	8883      	ldrh	r3, [r0, #4]
 8007d40:	428b      	cmp	r3, r1
 8007d42:	d804      	bhi.n	8007d4e <_fAT_SET_TYPE_MODEM+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8007d44:	2104      	movs	r1, #4
 8007d46:	480b      	ldr	r0, [pc, #44]	; (8007d74 <_fAT_SET_TYPE_MODEM+0x38>)
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 8007d48:	f000 f9dc 	bl	8008104 <DCU_Response_AT>
}
 8007d4c:	bd10      	pop	{r4, pc}
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007d4e:	6803      	ldr	r3, [r0, #0]
 8007d50:	5c5b      	ldrb	r3, [r3, r1]
 8007d52:	3b30      	subs	r3, #48	; 0x30
 8007d54:	b2db      	uxtb	r3, r3
		if (TempNum == 0)
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <_fAT_SET_TYPE_MODEM+0x2c>
			sModem.TypeModem_u8 = _LORA_NODE_VP;
 8007d5a:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <_fAT_SET_TYPE_MODEM+0x3c>)
 8007d5c:	7613      	strb	r3, [r2, #24]
			Save_Device_Type();
 8007d5e:	f000 fb3f 	bl	80083e0 <Save_Device_Type>
			DCU_Response_AT ((uint8_t *)"OK", 2);
 8007d62:	2102      	movs	r1, #2
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <_fAT_SET_TYPE_MODEM+0x40>)
 8007d66:	e7ef      	b.n	8007d48 <_fAT_SET_TYPE_MODEM+0xc>
		} else if (TempNum == 1)
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d0f6      	beq.n	8007d5a <_fAT_SET_TYPE_MODEM+0x1e>
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 8007d6c:	2105      	movs	r1, #5
 8007d6e:	4804      	ldr	r0, [pc, #16]	; (8007d80 <_fAT_SET_TYPE_MODEM+0x44>)
 8007d70:	e7ea      	b.n	8007d48 <_fAT_SET_TYPE_MODEM+0xc>
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	0800aef8 	.word	0x0800aef8
 8007d78:	200000c0 	.word	0x200000c0
 8007d7c:	0800aefd 	.word	0x0800aefd
 8007d80:	0800af00 	.word	0x0800af00

08007d84 <_fAT_RESET_MODEM>:
{
 8007d84:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"OK", 2);
 8007d86:	2102      	movs	r1, #2
 8007d88:	4808      	ldr	r0, [pc, #32]	; (8007dac <_fAT_RESET_MODEM+0x28>)
 8007d8a:	f000 f9bb 	bl	8008104 <DCU_Response_AT>
	sFreqInfor.NumWakeup_u8 = 1;
 8007d8e:	2401      	movs	r4, #1
	sFreqInfor.FreqWakeup_u32 = 100;
 8007d90:	2264      	movs	r2, #100	; 0x64
	sFreqInfor.NumWakeup_u8 = 1;
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <_fAT_RESET_MODEM+0x2c>)
	sFreqInfor.FreqWakeup_u32 = 100;
 8007d94:	805a      	strh	r2, [r3, #2]
	sFreqInfor.NumWakeup_u8 = 1;
 8007d96:	701c      	strb	r4, [r3, #0]
	Save_Freq_Send_Data();
 8007d98:	f000 fad2 	bl	8008340 <Save_Freq_Send_Data>
		sModem.TypeModem_u8 = _LORA_NODE_VP;
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_fAT_RESET_MODEM+0x30>)
 8007d9e:	761c      	strb	r4, [r3, #24]
	Save_Device_Type();
 8007da0:	f000 fb1e 	bl	80083e0 <Save_Device_Type>
    Reset_Chip_Immediately();
 8007da4:	f000 f9a0 	bl	80080e8 <Reset_Chip_Immediately>
}
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	0800aefd 	.word	0x0800aefd
 8007db0:	20000114 	.word	0x20000114
 8007db4:	200000c0 	.word	0x200000c0

08007db8 <_fAT_SET_RTC>:
{
 8007db8:	b530      	push	{r4, r5, lr}
 8007dba:	0005      	movs	r5, r0
 8007dbc:	b085      	sub	sp, #20
	ST_TIME_FORMAT    sRTC_temp = {0};
 8007dbe:	ac01      	add	r4, sp, #4
 8007dc0:	220c      	movs	r2, #12
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	0020      	movs	r0, r4
 8007dc6:	f002 f8b1 	bl	8009f2c <memset>
	if((*(str_Receiv->Data_a8+1)!= '-')||(*(str_Receiv->Data_a8+4)!= '-')|| (*(str_Receiv->Data_a8+7)!= '-') ||
 8007dca:	682b      	ldr	r3, [r5, #0]
 8007dcc:	785a      	ldrb	r2, [r3, #1]
 8007dce:	2a2d      	cmp	r2, #45	; 0x2d
 8007dd0:	d10e      	bne.n	8007df0 <_fAT_SET_RTC+0x38>
 8007dd2:	791a      	ldrb	r2, [r3, #4]
 8007dd4:	2a2d      	cmp	r2, #45	; 0x2d
 8007dd6:	d10b      	bne.n	8007df0 <_fAT_SET_RTC+0x38>
 8007dd8:	79da      	ldrb	r2, [r3, #7]
 8007dda:	2a2d      	cmp	r2, #45	; 0x2d
 8007ddc:	d108      	bne.n	8007df0 <_fAT_SET_RTC+0x38>
 8007dde:	7a9a      	ldrb	r2, [r3, #10]
 8007de0:	2a2c      	cmp	r2, #44	; 0x2c
 8007de2:	d105      	bne.n	8007df0 <_fAT_SET_RTC+0x38>
		(*(str_Receiv->Data_a8+10)!= ',')||(*(str_Receiv->Data_a8+13)!= ':')||(*(str_Receiv->Data_a8+16)!= ':'))
 8007de4:	7b5a      	ldrb	r2, [r3, #13]
 8007de6:	2a3a      	cmp	r2, #58	; 0x3a
 8007de8:	d102      	bne.n	8007df0 <_fAT_SET_RTC+0x38>
 8007dea:	7c1a      	ldrb	r2, [r3, #16]
 8007dec:	2a3a      	cmp	r2, #58	; 0x3a
 8007dee:	d005      	beq.n	8007dfc <_fAT_SET_RTC+0x44>
		DCU_Response_AT((uint8_t *)"ERROR", 5);
 8007df0:	2105      	movs	r1, #5
 8007df2:	4820      	ldr	r0, [pc, #128]	; (8007e74 <_fAT_SET_RTC+0xbc>)
			DCU_Response_AT((uint8_t *)"OK", 2);
 8007df4:	f000 f986 	bl	8008104 <DCU_Response_AT>
}
 8007df8:	b005      	add	sp, #20
 8007dfa:	bd30      	pop	{r4, r5, pc}
		sRTC_temp.day   = (*(str_Receiv->Data_a8))-0x30 - 1;
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	3a31      	subs	r2, #49	; 0x31
 8007e00:	70e2      	strb	r2, [r4, #3]
		sRTC_temp.date  = ((*(str_Receiv->Data_a8 + 2))-0x30)*10 + (*(str_Receiv->Data_a8 + 3) - 0x30);
 8007e02:	220a      	movs	r2, #10
 8007e04:	7899      	ldrb	r1, [r3, #2]
 8007e06:	78d8      	ldrb	r0, [r3, #3]
 8007e08:	4351      	muls	r1, r2
 8007e0a:	3810      	subs	r0, #16
 8007e0c:	1809      	adds	r1, r1, r0
 8007e0e:	7121      	strb	r1, [r4, #4]
		sRTC_temp.month = ((*(str_Receiv->Data_a8 + 5))-0x30)*10 + (*(str_Receiv->Data_a8 + 6) - 0x30);
 8007e10:	7959      	ldrb	r1, [r3, #5]
 8007e12:	7998      	ldrb	r0, [r3, #6]
 8007e14:	4351      	muls	r1, r2
 8007e16:	3810      	subs	r0, #16
 8007e18:	1809      	adds	r1, r1, r0
 8007e1a:	7161      	strb	r1, [r4, #5]
		sRTC_temp.year  = ((*(str_Receiv->Data_a8 + 8))-0x30)*10 + (*(str_Receiv->Data_a8 + 9) - 0x30);
 8007e1c:	7a19      	ldrb	r1, [r3, #8]
 8007e1e:	7a58      	ldrb	r0, [r3, #9]
 8007e20:	4351      	muls	r1, r2
 8007e22:	3810      	subs	r0, #16
 8007e24:	1809      	adds	r1, r1, r0
 8007e26:	71a1      	strb	r1, [r4, #6]
		sRTC_temp.hour  = ((*(str_Receiv->Data_a8 + 11))-0x30)*10 + (*(str_Receiv->Data_a8 + 12) - 0x30);
 8007e28:	7ad9      	ldrb	r1, [r3, #11]
 8007e2a:	7b18      	ldrb	r0, [r3, #12]
 8007e2c:	4351      	muls	r1, r2
 8007e2e:	3810      	subs	r0, #16
 8007e30:	1809      	adds	r1, r1, r0
 8007e32:	7021      	strb	r1, [r4, #0]
		sRTC_temp.min   = ((*(str_Receiv->Data_a8 + 14))-0x30)*10 + (*(str_Receiv->Data_a8 + 15) - 0x30);
 8007e34:	7b99      	ldrb	r1, [r3, #14]
 8007e36:	7bd8      	ldrb	r0, [r3, #15]
 8007e38:	4351      	muls	r1, r2
 8007e3a:	3810      	subs	r0, #16
 8007e3c:	1809      	adds	r1, r1, r0
 8007e3e:	7061      	strb	r1, [r4, #1]
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 8007e40:	7c59      	ldrb	r1, [r3, #17]
 8007e42:	7c9b      	ldrb	r3, [r3, #18]
 8007e44:	434a      	muls	r2, r1
 8007e46:	3b10      	subs	r3, #16
 8007e48:	18d2      	adds	r2, r2, r3
		if (Check_update_Time(&sRTC_temp) != 1)
 8007e4a:	0020      	movs	r0, r4
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 8007e4c:	70a2      	strb	r2, [r4, #2]
		if (Check_update_Time(&sRTC_temp) != 1)
 8007e4e:	f001 fbbe 	bl	80095ce <Check_update_Time>
 8007e52:	2801      	cmp	r0, #1
 8007e54:	d1cc      	bne.n	8007df0 <_fAT_SET_RTC+0x38>
			sRTCSet.hour    = sRTC_temp.hour;
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <_fAT_SET_RTC+0xc0>)
			sRTCSet.year    = sRTC_temp.year;
 8007e58:	79a2      	ldrb	r2, [r4, #6]
			sRTCSet.date    = sRTC_temp.date;
 8007e5a:	88a1      	ldrh	r1, [r4, #4]
			sRTCSet.hour    = sRTC_temp.hour;
 8007e5c:	9801      	ldr	r0, [sp, #4]
			sRTCSet.year    = sRTC_temp.year;
 8007e5e:	719a      	strb	r2, [r3, #6]
			sRTCSet.date    = sRTC_temp.date;
 8007e60:	8099      	strh	r1, [r3, #4]
			Set_RTC(sRTCSet);
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	689a      	ldr	r2, [r3, #8]
			sRTCSet.hour    = sRTC_temp.hour;
 8007e66:	6018      	str	r0, [r3, #0]
			Set_RTC(sRTCSet);
 8007e68:	f001 fbce 	bl	8009608 <Set_RTC>
			DCU_Response_AT((uint8_t *)"OK", 2);
 8007e6c:	2102      	movs	r1, #2
 8007e6e:	4803      	ldr	r0, [pc, #12]	; (8007e7c <_fAT_SET_RTC+0xc4>)
 8007e70:	e7c0      	b.n	8007df4 <_fAT_SET_RTC+0x3c>
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	0800af00 	.word	0x0800af00
 8007e78:	20001110 	.word	0x20001110
 8007e7c:	0800aefd 	.word	0x0800aefd

08007e80 <_fAT_SET_DEVICE_ID>:
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8007e80:	000b      	movs	r3, r1
{
 8007e82:	b570      	push	{r4, r5, r6, lr}
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8007e84:	8882      	ldrh	r2, [r0, #4]
 8007e86:	3314      	adds	r3, #20
{
 8007e88:	0005      	movs	r5, r0
 8007e8a:	000c      	movs	r4, r1
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	dc21      	bgt.n	8007ed4 <_fAT_SET_DEVICE_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8007e90:	2102      	movs	r1, #2
 8007e92:	4813      	ldr	r0, [pc, #76]	; (8007ee0 <_fAT_SET_DEVICE_ID+0x60>)
 8007e94:	f000 f936 	bl	8008104 <DCU_Response_AT>
        UTIL_MEM_set(&aDCU_ID, 0, sizeof(aDCU_ID));
 8007e98:	2214      	movs	r2, #20
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4811      	ldr	r0, [pc, #68]	; (8007ee4 <_fAT_SET_DEVICE_ID+0x64>)
 8007e9e:	f001 fd89 	bl	80099b4 <UTIL_MEM_set>
        sModem.sDCU_id.Length_u16 = 0;
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <_fAT_SET_DEVICE_ID+0x68>)
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8007ea6:	b2e1      	uxtb	r1, r4
        sModem.sDCU_id.Length_u16 = 0;
 8007ea8:	809a      	strh	r2, [r3, #4]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8007eaa:	88aa      	ldrh	r2, [r5, #4]
 8007eac:	428a      	cmp	r2, r1
 8007eae:	d805      	bhi.n	8007ebc <_fAT_SET_DEVICE_ID+0x3c>
        Save_ID(0);
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f000 f9dd 	bl	8008270 <Save_ID>
        Reset_Chip_Immediately();
 8007eb6:	f000 f917 	bl	80080e8 <Reset_Chip_Immediately>
}
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sDCU_id.Length_u16 >= sizeof(aDCU_ID))
 8007ebc:	889a      	ldrh	r2, [r3, #4]
 8007ebe:	2a13      	cmp	r2, #19
 8007ec0:	d8f6      	bhi.n	8007eb0 <_fAT_SET_DEVICE_ID+0x30>
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8007ec2:	682c      	ldr	r4, [r5, #0]
 8007ec4:	1c56      	adds	r6, r2, #1
 8007ec6:	809e      	strh	r6, [r3, #4]
 8007ec8:	5c64      	ldrb	r4, [r4, r1]
 8007eca:	6818      	ldr	r0, [r3, #0]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8007ecc:	3101      	adds	r1, #1
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8007ece:	5484      	strb	r4, [r0, r2]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8007ed0:	b2c9      	uxtb	r1, r1
 8007ed2:	e7ea      	b.n	8007eaa <_fAT_SET_DEVICE_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8007ed4:	2104      	movs	r1, #4
 8007ed6:	4805      	ldr	r0, [pc, #20]	; (8007eec <_fAT_SET_DEVICE_ID+0x6c>)
 8007ed8:	f000 f914 	bl	8008104 <DCU_Response_AT>
}
 8007edc:	e7ed      	b.n	8007eba <_fAT_SET_DEVICE_ID+0x3a>
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	0800aefd 	.word	0x0800aefd
 8007ee4:	2000013c 	.word	0x2000013c
 8007ee8:	200000c0 	.word	0x200000c0
 8007eec:	0800aef8 	.word	0x0800aef8

08007ef0 <_fAT_SET_NETWORK_ID>:
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8007ef0:	000b      	movs	r3, r1
{
 8007ef2:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8007ef4:	8882      	ldrh	r2, [r0, #4]
 8007ef6:	3314      	adds	r3, #20
{
 8007ef8:	0005      	movs	r5, r0
 8007efa:	000c      	movs	r4, r1
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8007efc:	429a      	cmp	r2, r3
 8007efe:	dc21      	bgt.n	8007f44 <_fAT_SET_NETWORK_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8007f00:	2102      	movs	r1, #2
 8007f02:	4813      	ldr	r0, [pc, #76]	; (8007f50 <_fAT_SET_NETWORK_ID+0x60>)
 8007f04:	f000 f8fe 	bl	8008104 <DCU_Response_AT>
        UTIL_MEM_set(&aNET_ID, 0, sizeof(aNET_ID));
 8007f08:	2214      	movs	r2, #20
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4811      	ldr	r0, [pc, #68]	; (8007f54 <_fAT_SET_NETWORK_ID+0x64>)
 8007f0e:	f001 fd51 	bl	80099b4 <UTIL_MEM_set>
        sModem.sNET_id.Length_u16 = 0;
 8007f12:	2200      	movs	r2, #0
 8007f14:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <_fAT_SET_NETWORK_ID+0x68>)
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8007f16:	b2e1      	uxtb	r1, r4
        sModem.sNET_id.Length_u16 = 0;
 8007f18:	819a      	strh	r2, [r3, #12]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8007f1a:	88aa      	ldrh	r2, [r5, #4]
 8007f1c:	428a      	cmp	r2, r1
 8007f1e:	d805      	bhi.n	8007f2c <_fAT_SET_NETWORK_ID+0x3c>
        Save_ID(1);
 8007f20:	2001      	movs	r0, #1
 8007f22:	f000 f9a5 	bl	8008270 <Save_ID>
        Reset_Chip_Immediately();
 8007f26:	f000 f8df 	bl	80080e8 <Reset_Chip_Immediately>
}
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sNET_id.Length_u16 >= sizeof(aNET_ID))
 8007f2c:	899a      	ldrh	r2, [r3, #12]
 8007f2e:	2a13      	cmp	r2, #19
 8007f30:	d8f6      	bhi.n	8007f20 <_fAT_SET_NETWORK_ID+0x30>
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 8007f32:	682c      	ldr	r4, [r5, #0]
 8007f34:	1c56      	adds	r6, r2, #1
 8007f36:	819e      	strh	r6, [r3, #12]
 8007f38:	5c64      	ldrb	r4, [r4, r1]
 8007f3a:	6898      	ldr	r0, [r3, #8]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8007f3c:	3101      	adds	r1, #1
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 8007f3e:	5484      	strb	r4, [r0, r2]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8007f40:	b2c9      	uxtb	r1, r1
 8007f42:	e7ea      	b.n	8007f1a <_fAT_SET_NETWORK_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8007f44:	2104      	movs	r1, #4
 8007f46:	4805      	ldr	r0, [pc, #20]	; (8007f5c <_fAT_SET_NETWORK_ID+0x6c>)
 8007f48:	f000 f8dc 	bl	8008104 <DCU_Response_AT>
}
 8007f4c:	e7ed      	b.n	8007f2a <_fAT_SET_NETWORK_ID+0x3a>
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	0800aefd 	.word	0x0800aefd
 8007f54:	20000128 	.word	0x20000128
 8007f58:	200000c0 	.word	0x200000c0
 8007f5c:	0800aef8 	.word	0x0800aef8

08007f60 <_fAT_SET_MODE>:
{
 8007f60:	b510      	push	{r4, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8007f62:	8883      	ldrh	r3, [r0, #4]
 8007f64:	428b      	cmp	r3, r1
 8007f66:	d804      	bhi.n	8007f72 <_fAT_SET_MODE+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8007f68:	2104      	movs	r1, #4
 8007f6a:	4808      	ldr	r0, [pc, #32]	; (8007f8c <_fAT_SET_MODE+0x2c>)
 8007f6c:	f000 f8ca 	bl	8008104 <DCU_Response_AT>
}
 8007f70:	bd10      	pop	{r4, pc}
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007f72:	6803      	ldr	r3, [r0, #0]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8007f74:	2004      	movs	r0, #4
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007f76:	5c5c      	ldrb	r4, [r3, r1]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8007f78:	4905      	ldr	r1, [pc, #20]	; (8007f90 <_fAT_SET_MODE+0x30>)
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8007f7a:	3c30      	subs	r4, #48	; 0x30
 8007f7c:	b2e4      	uxtb	r4, r4
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8007f7e:	0022      	movs	r2, r4
 8007f80:	f001 fd1c 	bl	80099bc <LOG>
		sModem.Mode = TempMode;
 8007f84:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <_fAT_SET_MODE+0x34>)
 8007f86:	765c      	strb	r4, [r3, #25]
 8007f88:	e7f2      	b.n	8007f70 <_fAT_SET_MODE+0x10>
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	0800aef8 	.word	0x0800aef8
 8007f90:	0800af06 	.word	0x0800af06
 8007f94:	200000c0 	.word	0x200000c0

08007f98 <_fAT_GET_FIRM_VER>:
 8007f98:	4770      	bx	lr
	...

08007f9c <Check_AT_User>:
{
 8007f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8007f9e:	4b39      	ldr	r3, [pc, #228]	; (8008084 <Check_AT_User+0xe8>)
{
 8007fa0:	b085      	sub	sp, #20
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8007fa2:	9302      	str	r3, [sp, #8]
 8007fa4:	2300      	movs	r3, #0
{
 8007fa6:	0004      	movs	r4, r0
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8007fa8:	2102      	movs	r1, #2
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8007faa:	aa02      	add	r2, sp, #8
 8007fac:	8093      	strh	r3, [r2, #4]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 8007fae:	88a2      	ldrh	r2, [r4, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d825      	bhi.n	8008000 <Check_AT_User+0x64>
 8007fb4:	2500      	movs	r5, #0
 8007fb6:	4f34      	ldr	r7, [pc, #208]	; (8008088 <Check_AT_User+0xec>)
		Pos_Str = Find_String_V2((sData*) &CheckList_AT_CONFIG[var].sTempReceiver, StrUartRecei);
 8007fb8:	0038      	movs	r0, r7
 8007fba:	0021      	movs	r1, r4
 8007fbc:	3008      	adds	r0, #8
 8007fbe:	f001 fa8d 	bl	80094dc <Find_String_V2>
 8007fc2:	1e06      	subs	r6, r0, #0
		if ((Pos_Str >= 0) && (CheckList_AT_CONFIG[var].CallBack != NULL))
 8007fc4:	db58      	blt.n	8008078 <Check_AT_User+0xdc>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d054      	beq.n	8008078 <Check_AT_User+0xdc>
			Reset_Buff(&sModem.strATCmd);
 8007fce:	482f      	ldr	r0, [pc, #188]	; (800808c <Check_AT_User+0xf0>)
 8007fd0:	f001 fce4 	bl	800999c <Reset_Buff>
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8007fd4:	2300      	movs	r3, #0
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8007fd6:	4a2e      	ldr	r2, [pc, #184]	; (8008090 <Check_AT_User+0xf4>)
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8007fd8:	88a1      	ldrh	r1, [r4, #4]
 8007fda:	1b89      	subs	r1, r1, r6
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	db1f      	blt.n	8008020 <Check_AT_User+0x84>
			Pos_Str += CheckList_AT_CONFIG[var].sTempReceiver.Length_u16;
 8007fe0:	4b29      	ldr	r3, [pc, #164]	; (8008088 <Check_AT_User+0xec>)
 8007fe2:	012d      	lsls	r5, r5, #4
 8007fe4:	195b      	adds	r3, r3, r5
 8007fe6:	899b      	ldrh	r3, [r3, #12]
 8007fe8:	199b      	adds	r3, r3, r6
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 8007fea:	88a2      	ldrh	r2, [r4, #4]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d82b      	bhi.n	800804a <Check_AT_User+0xae>
			CheckList_AT_CONFIG[var].CallBack(&sDataConfig, 0);
 8007ff2:	a802      	add	r0, sp, #8
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	4798      	blx	r3
			return 1;
 8007ffa:	2001      	movs	r0, #1
}
 8007ffc:	b005      	add	sp, #20
 8007ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	18d0      	adds	r0, r2, r3
 8008004:	5cd2      	ldrb	r2, [r2, r3]
 8008006:	0015      	movs	r5, r2
 8008008:	438d      	bics	r5, r1
 800800a:	2d3d      	cmp	r5, #61	; 0x3d
 800800c:	d0d2      	beq.n	8007fb4 <Check_AT_User+0x18>
		if ((*(StrUartRecei->Data_a8 + i) >= 0x41) && (*(StrUartRecei->Data_a8 + i) <= 0x5A))
 800800e:	0015      	movs	r5, r2
 8008010:	3d41      	subs	r5, #65	; 0x41
 8008012:	2d19      	cmp	r5, #25
 8008014:	d801      	bhi.n	800801a <Check_AT_User+0x7e>
			*(StrUartRecei->Data_a8 + i) = *(StrUartRecei->Data_a8 + i) + 0x20;
 8008016:	3220      	adds	r2, #32
 8008018:	7002      	strb	r2, [r0, #0]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 800801a:	3301      	adds	r3, #1
 800801c:	b29b      	uxth	r3, r3
 800801e:	e7c6      	b.n	8007fae <Check_AT_User+0x12>
				if ((*(StrUartRecei->Data_a8 + Pos_Str + i) == '?') || (*(StrUartRecei->Data_a8+Pos_Str+i) == '=') \
 8008020:	6827      	ldr	r7, [r4, #0]
 8008022:	1999      	adds	r1, r3, r6
 8008024:	1878      	adds	r0, r7, r1
 8008026:	5c79      	ldrb	r1, [r7, r1]
 8008028:	2702      	movs	r7, #2
 800802a:	43b9      	bics	r1, r7
 800802c:	293d      	cmp	r1, #61	; 0x3d
 800802e:	d0d7      	beq.n	8007fe0 <Check_AT_User+0x44>
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8008030:	8f91      	ldrh	r1, [r2, #60]	; 0x3c
 8008032:	29ff      	cmp	r1, #255	; 0xff
 8008034:	d8d4      	bhi.n	8007fe0 <Check_AT_User+0x44>
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8008036:	6b97      	ldr	r7, [r2, #56]	; 0x38
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8008038:	3301      	adds	r3, #1
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 800803a:	46bc      	mov	ip, r7
 800803c:	1c4f      	adds	r7, r1, #1
 800803e:	8797      	strh	r7, [r2, #60]	; 0x3c
 8008040:	4667      	mov	r7, ip
 8008042:	7800      	ldrb	r0, [r0, #0]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8008044:	b29b      	uxth	r3, r3
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8008046:	5478      	strb	r0, [r7, r1]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8008048:	e7c6      	b.n	8007fd8 <Check_AT_User+0x3c>
				if (*(StrUartRecei->Data_a8 + i) == 0x0D)
 800804a:	6821      	ldr	r1, [r4, #0]
 800804c:	18c8      	adds	r0, r1, r3
 800804e:	5cc9      	ldrb	r1, [r1, r3]
 8008050:	290d      	cmp	r1, #13
 8008052:	d105      	bne.n	8008060 <Check_AT_User+0xc4>
					if ( (i < (StrUartRecei->Length_u16 - 1)) && (*(StrUartRecei->Data_a8 + i + 1) == 0x0A) )
 8008054:	3a01      	subs	r2, #1
 8008056:	4293      	cmp	r3, r2
 8008058:	da02      	bge.n	8008060 <Check_AT_User+0xc4>
 800805a:	7842      	ldrb	r2, [r0, #1]
 800805c:	2a0a      	cmp	r2, #10
 800805e:	d0c8      	beq.n	8007ff2 <Check_AT_User+0x56>
				if ( sDataConfig.Length_u16 < sizeof(aDATA_CONFIG) )
 8008060:	aa02      	add	r2, sp, #8
 8008062:	8892      	ldrh	r2, [r2, #4]
 8008064:	2a7f      	cmp	r2, #127	; 0x7f
 8008066:	d805      	bhi.n	8008074 <Check_AT_User+0xd8>
					*(sDataConfig.Data_a8 + sDataConfig.Length_u16++) = *(StrUartRecei->Data_a8 + i);
 8008068:	1c55      	adds	r5, r2, #1
 800806a:	ae02      	add	r6, sp, #8
 800806c:	80b5      	strh	r5, [r6, #4]
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	7800      	ldrb	r0, [r0, #0]
 8008072:	5488      	strb	r0, [r1, r2]
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 8008074:	3301      	adds	r3, #1
 8008076:	e7b8      	b.n	8007fea <Check_AT_User+0x4e>
	for (var = _AT_SET_DEVICE_ID; var <= _END_AT_CMD; var++)
 8008078:	3501      	adds	r5, #1
 800807a:	3710      	adds	r7, #16
 800807c:	2d10      	cmp	r5, #16
 800807e:	d19b      	bne.n	8007fb8 <Check_AT_User+0x1c>
	return 0;
 8008080:	2000      	movs	r0, #0
 8008082:	e7bb      	b.n	8007ffc <Check_AT_User+0x60>
 8008084:	200008b4 	.word	0x200008b4
 8008088:	0800aa30 	.word	0x0800aa30
 800808c:	200000f8 	.word	0x200000f8
 8008090:	200000c0 	.word	0x200000c0

08008094 <Flash_Get_Infor>:

/**
 * @brief	Init Infor from Flash
 */
void Flash_Get_Infor (uint32_t AddStart, uint8_t *pData, uint16_t *Length, uint8_t MAX_LEGNTH_INFOR)
{
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	0017      	movs	r7, r2
    uint8_t LenTemp = 0;

    LenTemp = *(__IO uint8_t*) (AddStart);
 8008098:	7802      	ldrb	r2, [r0, #0]
{
 800809a:	0005      	movs	r5, r0
    LenTemp = *(__IO uint8_t*) (AddStart);
 800809c:	b2d2      	uxtb	r2, r2
{
 800809e:	000e      	movs	r6, r1
 80080a0:	1c14      	adds	r4, r2, #0
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d900      	bls.n	80080a8 <Flash_Get_Infor+0x14>
 80080a6:	1c1c      	adds	r4, r3, #0
 80080a8:	b2e4      	uxtb	r4, r4

    if (LenTemp > MAX_LEGNTH_INFOR)
        LenTemp = MAX_LEGNTH_INFOR;
    //clear buff
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 80080aa:	0030      	movs	r0, r6
 80080ac:	b29a      	uxth	r2, r3
    //Read flash
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 80080ae:	b2a4      	uxth	r4, r4
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 80080b0:	2100      	movs	r1, #0
 80080b2:	f001 fc7f 	bl	80099b4 <UTIL_MEM_set>
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 80080b6:	0031      	movs	r1, r6
 80080b8:	1c68      	adds	r0, r5, #1
 80080ba:	0022      	movs	r2, r4
 80080bc:	f000 ff8d 	bl	8008fda <OnchipFlashReadData>
    *Length = LenTemp;
 80080c0:	803c      	strh	r4, [r7, #0]
}
 80080c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080c4 <Init_Uart_Module>:
{
	#ifdef DEVICE_TYPE_STATION
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
		__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
	#else
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <Init_Uart_Module+0x10>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	2320      	movs	r3, #32
 80080ca:	6811      	ldr	r1, [r2, #0]
 80080cc:	430b      	orrs	r3, r1
 80080ce:	6013      	str	r3, [r2, #0]
	#endif
}
 80080d0:	4770      	bx	lr
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	200012dc 	.word	0x200012dc

080080d8 <Modem_Init_Before_IRQ_Handle>:

	#endif
}

void Modem_Init_Before_IRQ_Handle (void)
{
 80080d8:	b510      	push	{r4, lr}
	AppLora_Init_IO_Radio();
 80080da:	f7ff facd 	bl	8007678 <AppLora_Init_IO_Radio>
}
 80080de:	bd10      	pop	{r4, pc}

080080e0 <Modem_Deinit_Before_IRQ_Handle>:

void Modem_Deinit_Before_IRQ_Handle (void)
{
 80080e0:	b510      	push	{r4, lr}
	AppLora_Deinit_IO_Radio();
 80080e2:	f7ff fac5 	bl	8007670 <AppLora_Deinit_IO_Radio>
}
 80080e6:	bd10      	pop	{r4, pc}

080080e8 <Reset_Chip_Immediately>:
  __ASM volatile ("cpsid i" : : : "memory");
 80080e8:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 80080ea:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080ee:	4b03      	ldr	r3, [pc, #12]	; (80080fc <Reset_Chip_Immediately+0x14>)
 80080f0:	4a03      	ldr	r2, [pc, #12]	; (8008100 <Reset_Chip_Immediately+0x18>)
 80080f2:	60da      	str	r2, [r3, #12]
 80080f4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80080f8:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80080fa:	e7fd      	b.n	80080f8 <Reset_Chip_Immediately+0x10>
 80080fc:	e000ed00 	.word	0xe000ed00
 8008100:	05fa0004 	.word	0x05fa0004

08008104 <DCU_Response_AT>:
{
 8008104:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 8008106:	25fa      	movs	r5, #250	; 0xfa
 8008108:	4c07      	ldr	r4, [pc, #28]	; (8008128 <DCU_Response_AT+0x24>)
 800810a:	00ad      	lsls	r5, r5, #2
 800810c:	002b      	movs	r3, r5
{
 800810e:	000a      	movs	r2, r1
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 8008110:	0001      	movs	r1, r0
 8008112:	0020      	movs	r0, r4
 8008114:	f7fd fb22 	bl	800575c <HAL_UART_Transmit>
	HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n", 2, 1000);
 8008118:	002b      	movs	r3, r5
 800811a:	2202      	movs	r2, #2
 800811c:	0020      	movs	r0, r4
 800811e:	4903      	ldr	r1, [pc, #12]	; (800812c <DCU_Response_AT+0x28>)
 8008120:	f7fd fb1c 	bl	800575c <HAL_UART_Transmit>
}
 8008124:	bd70      	pop	{r4, r5, r6, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	200012dc 	.word	0x200012dc
 800812c:	0800ad77 	.word	0x0800ad77

08008130 <MX_GPIO_DeInit>:

void MX_GPIO_DeInit(void)
{
 8008130:	b570      	push	{r4, r5, r6, lr}
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
	#else
		GPIO_InitTypeDef GPIO_InitStruct ={0};

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008132:	2601      	movs	r6, #1
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008134:	2502      	movs	r5, #2
{
 8008136:	b088      	sub	sp, #32
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008138:	4c11      	ldr	r4, [pc, #68]	; (8008180 <MX_GPIO_DeInit+0x50>)
		GPIO_InitTypeDef GPIO_InitStruct ={0};
 800813a:	220c      	movs	r2, #12
 800813c:	2100      	movs	r1, #0
 800813e:	a805      	add	r0, sp, #20
 8008140:	f001 fef4 	bl	8009f2c <memset>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull   = GPIO_NOPULL;

		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008146:	480f      	ldr	r0, [pc, #60]	; (8008184 <MX_GPIO_DeInit+0x54>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008148:	4333      	orrs	r3, r6
 800814a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800814c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800814e:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008150:	4033      	ands	r3, r6
 8008152:	9301      	str	r3, [sp, #4]
 8008154:	9b01      	ldr	r3, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008158:	432b      	orrs	r3, r5
 800815a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800815e:	402b      	ands	r3, r5
 8008160:	9302      	str	r3, [sp, #8]
 8008162:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8008164:	2303      	movs	r3, #3
 8008166:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8008168:	3361      	adds	r3, #97	; 0x61
 800816a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800816c:	f7fb fa62 	bl	8003634 <HAL_GPIO_Init>

		  /* Disable GPIOs clock */
		__HAL_RCC_GPIOA_CLK_DISABLE();
 8008170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008172:	43b3      	bics	r3, r6
 8008174:	62e3      	str	r3, [r4, #44]	; 0x2c
		__HAL_RCC_GPIOB_CLK_DISABLE();
 8008176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008178:	43ab      	bics	r3, r5
 800817a:	62e3      	str	r3, [r4, #44]	; 0x2c
	#endif
}
 800817c:	b008      	add	sp, #32
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	40021000 	.word	0x40021000
 8008184:	50000400 	.word	0x50000400

08008188 <Modem_Deinit_Peripheral>:
{
 8008188:	b510      	push	{r4, lr}
    MX_GPIO_DeInit();
 800818a:	f7ff ffd1 	bl	8008130 <MX_GPIO_DeInit>
	ADC_Desequence_Powerhungry_Channels();
 800818e:	f7ff fb75 	bl	800787c <ADC_Desequence_Powerhungry_Channels>
    HAL_ADC_DeInit(&hadc);
 8008192:	4807      	ldr	r0, [pc, #28]	; (80081b0 <Modem_Deinit_Peripheral+0x28>)
 8008194:	f7fa fe96 	bl	8002ec4 <HAL_ADC_DeInit>
    	__HAL_UART_DISABLE_IT(&uart_debug, UART_IT_RXNE);
 8008198:	2120      	movs	r1, #32
 800819a:	4806      	ldr	r0, [pc, #24]	; (80081b4 <Modem_Deinit_Peripheral+0x2c>)
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	438b      	bics	r3, r1
 80081a2:	6013      	str	r3, [r2, #0]
    	HAL_UART_DeInit(&uart_debug);
 80081a4:	f7fc ff4c 	bl	8005040 <HAL_UART_DeInit>
    	HAL_I2C_DeInit(&hi2c1);
 80081a8:	4803      	ldr	r0, [pc, #12]	; (80081b8 <Modem_Deinit_Peripheral+0x30>)
 80081aa:	f7fb fbff 	bl	80039ac <HAL_I2C_DeInit>
}
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	20001120 	.word	0x20001120
 80081b4:	200012dc 	.word	0x200012dc
 80081b8:	2000117c 	.word	0x2000117c

080081bc <Modem_Init_Gpio_Again>:

void Modem_Init_Gpio_Again(void)
{
 80081bc:	b5f0      	push	{r4, r5, r6, r7, lr}
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80081be:	2501      	movs	r5, #1
{
 80081c0:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c2:	2214      	movs	r2, #20
 80081c4:	2100      	movs	r1, #0
 80081c6:	a803      	add	r0, sp, #12
 80081c8:	f001 feb0 	bl	8009f2c <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80081cc:	2202      	movs	r2, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80081ce:	4c1b      	ldr	r4, [pc, #108]	; (800823c <Modem_Init_Gpio_Again+0x80>)

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80081d0:	4f1b      	ldr	r7, [pc, #108]	; (8008240 <Modem_Init_Gpio_Again+0x84>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80081d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80081d4:	0038      	movs	r0, r7
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80081d6:	432b      	orrs	r3, r5
 80081d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80081dc:	2164      	movs	r1, #100	; 0x64
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80081de:	402b      	ands	r3, r5
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	9b00      	ldr	r3, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80081e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

		/*Configure GPIO pins : PBPin PBPin PBPin */
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2600      	movs	r6, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80081e8:	4313      	orrs	r3, r2
 80081ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081ee:	4013      	ands	r3, r2
 80081f0:	9301      	str	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80081f2:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80081f4:	9b01      	ldr	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80081f6:	f7fb fb67 	bl	80038c8 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 80081fa:	2364      	movs	r3, #100	; 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081fc:	0038      	movs	r0, r7
 80081fe:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8008200:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008202:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	9605      	str	r6, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008206:	9606      	str	r6, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008208:	f7fb fa14 	bl	8003634 <HAL_GPIO_Init>

		__HAL_RCC_ADC1_CLK_ENABLE();
 800820c:	2380      	movs	r3, #128	; 0x80
 800820e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4313      	orrs	r3, r2
 8008214:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008216:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008218:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800821a:	432b      	orrs	r3, r5
 800821c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800821e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008220:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008222:	402b      	ands	r3, r5
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	9b02      	ldr	r3, [sp, #8]
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008228:	231c      	movs	r3, #28
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800822a:	05c0      	lsls	r0, r0, #23
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 800822c:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800822e:	3b19      	subs	r3, #25
 8008230:	9304      	str	r3, [sp, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008232:	9605      	str	r6, [sp, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008234:	f7fb f9fe 	bl	8003634 <HAL_GPIO_Init>
	#endif
}
 8008238:	b009      	add	sp, #36	; 0x24
 800823a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800823c:	40021000 	.word	0x40021000
 8008240:	50000400 	.word	0x50000400

08008244 <Modem_Init_Peripheral>:
{
 8008244:	b510      	push	{r4, lr}
    Modem_Init_Gpio_Again();
 8008246:	f7ff ffb9 	bl	80081bc <Modem_Init_Gpio_Again>
    AdcInitialized = 0;
 800824a:	2200      	movs	r2, #0
 800824c:	4b06      	ldr	r3, [pc, #24]	; (8008268 <Modem_Init_Peripheral+0x24>)
 800824e:	701a      	strb	r2, [r3, #0]
    	MX_USART1_UART_Init();
 8008250:	f000 fd8e 	bl	8008d70 <MX_USART1_UART_Init>
    	__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <Modem_Init_Peripheral+0x28>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	2320      	movs	r3, #32
 800825a:	6811      	ldr	r1, [r2, #0]
 800825c:	430b      	orrs	r3, r1
 800825e:	6013      	str	r3, [r2, #0]
    	MX_I2C1_Init();
 8008260:	f000 fd1c 	bl	8008c9c <MX_I2C1_Init>
}
 8008264:	bd10      	pop	{r4, pc}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	200008b3 	.word	0x200008b3
 800826c:	200012dc 	.word	0x200012dc

08008270 <Save_ID>:
/**
 * @param	0: DCU_ID
 * 			1: NET_ID
 */
void Save_ID(uint8_t type)
{
 8008270:	b530      	push	{r4, r5, lr}
    uint8_t i=0;
	uint8_t temp_arr[40] = {0};
 8008272:	2400      	movs	r4, #0
{
 8008274:	b08b      	sub	sp, #44	; 0x2c
	uint8_t temp_arr[40] = {0};
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	0021      	movs	r1, r4
{
 800827a:	0005      	movs	r5, r0
	uint8_t temp_arr[40] = {0};
 800827c:	a801      	add	r0, sp, #4
 800827e:	9400      	str	r4, [sp, #0]
 8008280:	f001 fe54 	bl	8009f2c <memset>

	if(type == 0)
 8008284:	22aa      	movs	r2, #170	; 0xaa
	{
		temp_arr[0] = BYTE_TEMP_FIRST;
 8008286:	4669      	mov	r1, sp
 8008288:	4b16      	ldr	r3, [pc, #88]	; (80082e4 <Save_ID+0x74>)
 800828a:	700a      	strb	r2, [r1, #0]
	if(type == 0)
 800828c:	42a5      	cmp	r5, r4
 800828e:	d115      	bne.n	80082bc <Save_ID+0x4c>
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8008290:	889a      	ldrh	r2, [r3, #4]

		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 8008292:	681b      	ldr	r3, [r3, #0]
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8008294:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 8008296:	42aa      	cmp	r2, r5
 8008298:	d809      	bhi.n	80082ae <Save_ID+0x3e>

		OnchipFlashPageErase(ADDR_DCUID);
 800829a:	4813      	ldr	r0, [pc, #76]	; (80082e8 <Save_ID+0x78>)
 800829c:	f000 fe6c 	bl	8008f78 <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_DCUID, temp_arr, 40);
 80082a0:	2228      	movs	r2, #40	; 0x28
 80082a2:	4669      	mov	r1, sp
 80082a4:	4810      	ldr	r0, [pc, #64]	; (80082e8 <Save_ID+0x78>)

		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];

		OnchipFlashPageErase(ADDR_NETID);
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 80082a6:	f000 fe40 	bl	8008f2a <OnchipFlashWriteData>
	}
}
 80082aa:	b00b      	add	sp, #44	; 0x2c
 80082ac:	bd30      	pop	{r4, r5, pc}
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 80082ae:	0029      	movs	r1, r5
 80082b0:	5d58      	ldrb	r0, [r3, r5]
 80082b2:	4469      	add	r1, sp
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 80082b4:	3501      	adds	r5, #1
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 80082b6:	7088      	strb	r0, [r1, #2]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 80082b8:	b2ed      	uxtb	r5, r5
 80082ba:	e7ec      	b.n	8008296 <Save_ID+0x26>
		temp_arr[1] = sModem.sNET_id.Length_u16;
 80082bc:	899a      	ldrh	r2, [r3, #12]
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80082be:	689b      	ldr	r3, [r3, #8]
		temp_arr[1] = sModem.sNET_id.Length_u16;
 80082c0:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80082c2:	0021      	movs	r1, r4
 80082c4:	428a      	cmp	r2, r1
 80082c6:	d806      	bhi.n	80082d6 <Save_ID+0x66>
		OnchipFlashPageErase(ADDR_NETID);
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <Save_ID+0x7c>)
 80082ca:	f000 fe55 	bl	8008f78 <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 80082ce:	2228      	movs	r2, #40	; 0x28
 80082d0:	4669      	mov	r1, sp
 80082d2:	4806      	ldr	r0, [pc, #24]	; (80082ec <Save_ID+0x7c>)
 80082d4:	e7e7      	b.n	80082a6 <Save_ID+0x36>
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80082d6:	0008      	movs	r0, r1
 80082d8:	5c5c      	ldrb	r4, [r3, r1]
 80082da:	4468      	add	r0, sp
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80082dc:	3101      	adds	r1, #1
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80082de:	7084      	strb	r4, [r0, #2]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80082e0:	b2c9      	uxtb	r1, r1
 80082e2:	e7ef      	b.n	80082c4 <Save_ID+0x54>
 80082e4:	200000c0 	.word	0x200000c0
 80082e8:	0802f500 	.word	0x0802f500
 80082ec:	0802f580 	.word	0x0802f580

080082f0 <Init_ID>:
{
 80082f0:	b510      	push	{r4, lr}
    if(type == 0)
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d10c      	bne.n	8008310 <Init_ID+0x20>
    	temp = *(__IO uint8_t*) ADDR_DCUID;
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <Init_ID+0x3c>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b2d8      	uxtb	r0, r3
    	if (temp != FLASH_BYTE_EMPTY)
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d012      	beq.n	8008326 <Init_ID+0x36>
            Flash_Get_Infor ((ADDR_DCUID + 1), sModem.sDCU_id.Data_a8, &sModem.sDCU_id.Length_u16, 10);
 8008300:	230a      	movs	r3, #10
 8008302:	490b      	ldr	r1, [pc, #44]	; (8008330 <Init_ID+0x40>)
 8008304:	480b      	ldr	r0, [pc, #44]	; (8008334 <Init_ID+0x44>)
 8008306:	1d0a      	adds	r2, r1, #4
 8008308:	6809      	ldr	r1, [r1, #0]
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 800830a:	f7ff fec3 	bl	8008094 <Flash_Get_Infor>
}
 800830e:	bd10      	pop	{r4, pc}
    	temp = *(__IO uint8_t*) ADDR_NETID;
 8008310:	4b09      	ldr	r3, [pc, #36]	; (8008338 <Init_ID+0x48>)
 8008312:	781b      	ldrb	r3, [r3, #0]
    	if (temp != FLASH_BYTE_EMPTY)
 8008314:	2b00      	cmp	r3, #0
 8008316:	d006      	beq.n	8008326 <Init_ID+0x36>
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 8008318:	4905      	ldr	r1, [pc, #20]	; (8008330 <Init_ID+0x40>)
 800831a:	230a      	movs	r3, #10
 800831c:	000a      	movs	r2, r1
 800831e:	4807      	ldr	r0, [pc, #28]	; (800833c <Init_ID+0x4c>)
 8008320:	6889      	ldr	r1, [r1, #8]
 8008322:	320c      	adds	r2, #12
 8008324:	e7f1      	b.n	800830a <Init_ID+0x1a>
    		Save_ID(type);
 8008326:	f7ff ffa3 	bl	8008270 <Save_ID>
}
 800832a:	e7f0      	b.n	800830e <Init_ID+0x1e>
 800832c:	0802f500 	.word	0x0802f500
 8008330:	200000c0 	.word	0x200000c0
 8008334:	0802f501 	.word	0x0802f501
 8008338:	0802f580 	.word	0x0802f580
 800833c:	0802f581 	.word	0x0802f581

08008340 <Save_Freq_Send_Data>:
        Save_Freq_Send_Data();
    }
}

void Save_Freq_Send_Data (void)
{
 8008340:	b510      	push	{r4, lr}
 8008342:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 8008344:	2214      	movs	r2, #20
 8008346:	2100      	movs	r1, #0
 8008348:	a801      	add	r0, sp, #4
 800834a:	f001 fdef 	bl	8009f2c <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 800834e:	466a      	mov	r2, sp
    Buff_temp[1] = 3;
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8008350:	4669      	mov	r1, sp
    Buff_temp[0] = BYTE_TEMP_FIRST;
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <Save_Freq_Send_Data+0x40>)

    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;

    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 8008354:	4c0b      	ldr	r4, [pc, #44]	; (8008384 <Save_Freq_Send_Data+0x44>)
    Buff_temp[0] = BYTE_TEMP_FIRST;
 8008356:	8013      	strh	r3, [r2, #0]
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <Save_Freq_Send_Data+0x48>)
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 800835a:	0020      	movs	r0, r4
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 800835c:	3354      	adds	r3, #84	; 0x54
 800835e:	781a      	ldrb	r2, [r3, #0]
 8008360:	708a      	strb	r2, [r1, #2]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 8008362:	885b      	ldrh	r3, [r3, #2]
 8008364:	0a1a      	lsrs	r2, r3, #8
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;
 8008366:	710b      	strb	r3, [r1, #4]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 8008368:	70ca      	strb	r2, [r1, #3]
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 800836a:	2101      	movs	r1, #1
 800836c:	f000 fe28 	bl	8008fc0 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 16);
 8008370:	2210      	movs	r2, #16
 8008372:	4669      	mov	r1, sp
 8008374:	0020      	movs	r0, r4
 8008376:	f000 fdd8 	bl	8008f2a <OnchipFlashWriteData>
}
 800837a:	b006      	add	sp, #24
 800837c:	bd10      	pop	{r4, pc}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	000003aa 	.word	0x000003aa
 8008384:	0802f600 	.word	0x0802f600
 8008388:	200000c0 	.word	0x200000c0

0800838c <Init_Timer_Send>:
{
 800838c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 800838e:	2100      	movs	r1, #0
 8008390:	2214      	movs	r2, #20
 8008392:	a801      	add	r0, sp, #4
 8008394:	9100      	str	r1, [sp, #0]
 8008396:	f001 fdc9 	bl	8009f2c <memset>
    temp = *(__IO uint8_t*) (ADDR_FREQ_ACTIVE);
 800839a:	480f      	ldr	r0, [pc, #60]	; (80083d8 <Init_Timer_Send+0x4c>)
 800839c:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d016      	beq.n	80083d0 <Init_Timer_Send+0x44>
        OnchipFlashReadData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 24);
 80083a2:	2218      	movs	r2, #24
 80083a4:	4669      	mov	r1, sp
 80083a6:	f000 fe18 	bl	8008fda <OnchipFlashReadData>
        if (Length < 24)
 80083aa:	466b      	mov	r3, sp
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b17      	cmp	r3, #23
 80083b0:	d80c      	bhi.n	80083cc <Init_Timer_Send+0x40>
            sFreqInfor.NumWakeup_u8 = Buff_temp[2];
 80083b2:	466b      	mov	r3, sp
 80083b4:	4a09      	ldr	r2, [pc, #36]	; (80083dc <Init_Timer_Send+0x50>)
 80083b6:	789b      	ldrb	r3, [r3, #2]
 80083b8:	3254      	adds	r2, #84	; 0x54
 80083ba:	7013      	strb	r3, [r2, #0]
            sFreqInfor.FreqWakeup_u32 = (sFreqInfor.FreqWakeup_u32 << 8) | Buff_temp[4];
 80083bc:	466b      	mov	r3, sp
 80083be:	78d9      	ldrb	r1, [r3, #3]
 80083c0:	3303      	adds	r3, #3
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	430b      	orrs	r3, r1
 80083c8:	ba5b      	rev16	r3, r3
 80083ca:	8053      	strh	r3, [r2, #2]
}
 80083cc:	b007      	add	sp, #28
 80083ce:	bd00      	pop	{pc}
        Save_Freq_Send_Data();
 80083d0:	f7ff ffb6 	bl	8008340 <Save_Freq_Send_Data>
}
 80083d4:	e7fa      	b.n	80083cc <Init_Timer_Send+0x40>
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	0802f600 	.word	0x0802f600
 80083dc:	200000c0 	.word	0x200000c0

080083e0 <Save_Device_Type>:
    }
}

void Save_Device_Type (void)
{
    uint8_t Buff_temp[24] = {0};
 80083e0:	2100      	movs	r1, #0
{
 80083e2:	b510      	push	{r4, lr}
 80083e4:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 80083e6:	2214      	movs	r2, #20
 80083e8:	a801      	add	r0, sp, #4
 80083ea:	9100      	str	r1, [sp, #0]
 80083ec:	f001 fd9e 	bl	8009f2c <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 80083f0:	23d5      	movs	r3, #213	; 0xd5
 80083f2:	466a      	mov	r2, sp
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	8013      	strh	r3, [r2, #0]
    Buff_temp[1] = 1;
    Buff_temp[2] = sModem.TypeModem_u8;
 80083f8:	4b07      	ldr	r3, [pc, #28]	; (8008418 <Save_Device_Type+0x38>)

    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 80083fa:	4c08      	ldr	r4, [pc, #32]	; (800841c <Save_Device_Type+0x3c>)
    Buff_temp[2] = sModem.TypeModem_u8;
 80083fc:	7e1b      	ldrb	r3, [r3, #24]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 80083fe:	0020      	movs	r0, r4
    Buff_temp[2] = sModem.TypeModem_u8;
 8008400:	7093      	strb	r3, [r2, #2]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 8008402:	2101      	movs	r1, #1
 8008404:	f000 fddc 	bl	8008fc0 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_DEVICE_TYPE, &Buff_temp[0], 16);
 8008408:	2210      	movs	r2, #16
 800840a:	4669      	mov	r1, sp
 800840c:	0020      	movs	r0, r4
 800840e:	f000 fd8c 	bl	8008f2a <OnchipFlashWriteData>
}
 8008412:	b006      	add	sp, #24
 8008414:	bd10      	pop	{r4, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	200000c0 	.word	0x200000c0
 800841c:	0802f680 	.word	0x0802f680

08008420 <Init_Device_Type>:
{
 8008420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 8008422:	2100      	movs	r1, #0
 8008424:	2214      	movs	r2, #20
 8008426:	a801      	add	r0, sp, #4
 8008428:	9100      	str	r1, [sp, #0]
 800842a:	f001 fd7f 	bl	8009f2c <memset>
    temp = *(__IO uint8_t*) (ADDR_DEVICE_TYPE);
 800842e:	480a      	ldr	r0, [pc, #40]	; (8008458 <Init_Device_Type+0x38>)
 8008430:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00d      	beq.n	8008452 <Init_Device_Type+0x32>
        OnchipFlashReadData(ADDR_DEVICE_TYPE, &Buff_temp[0], 24);
 8008436:	2218      	movs	r2, #24
 8008438:	4669      	mov	r1, sp
 800843a:	f000 fdce 	bl	8008fda <OnchipFlashReadData>
        if (Length < 24)
 800843e:	466b      	mov	r3, sp
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	2b17      	cmp	r3, #23
 8008444:	d803      	bhi.n	800844e <Init_Device_Type+0x2e>
            sModem.TypeModem_u8 = Buff_temp[2];
 8008446:	466a      	mov	r2, sp
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <Init_Device_Type+0x3c>)
 800844a:	7892      	ldrb	r2, [r2, #2]
 800844c:	761a      	strb	r2, [r3, #24]
}
 800844e:	b007      	add	sp, #28
 8008450:	bd00      	pop	{pc}
        Save_Device_Type();
 8008452:	f7ff ffc5 	bl	80083e0 <Save_Device_Type>
}
 8008456:	e7fa      	b.n	800844e <Init_Device_Type+0x2e>
 8008458:	0802f680 	.word	0x0802f680
 800845c:	200000c0 	.word	0x200000c0

08008460 <Init_Memory_Infor>:
{
 8008460:	b510      	push	{r4, lr}
    Init_Timer_Send();
 8008462:	f7ff ff93 	bl	800838c <Init_Timer_Send>
    Init_Device_Type();
 8008466:	f7ff ffdb 	bl	8008420 <Init_Device_Type>
	Init_ID(0);
 800846a:	2000      	movs	r0, #0
 800846c:	f7ff ff40 	bl	80082f0 <Init_ID>
	Init_ID(1);
 8008470:	2001      	movs	r0, #1
 8008472:	f7ff ff3d 	bl	80082f0 <Init_ID>
}
 8008476:	bd10      	pop	{r4, pc}

08008478 <USER_Payload_Node_Single>:
{

}

void USER_Payload_Node_Single(uint32_t delay)
{
 8008478:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Single");
	uint8_t     pData[128] = {0};
 800847a:	2600      	movs	r6, #0
{
 800847c:	b0a7      	sub	sp, #156	; 0x9c
	LOG(LOG_DEBUG, "USER_Payload_Node_Single");
 800847e:	4944      	ldr	r1, [pc, #272]	; (8008590 <USER_Payload_Node_Single+0x118>)
{
 8008480:	9004      	str	r0, [sp, #16]
	LOG(LOG_DEBUG, "USER_Payload_Node_Single");
 8008482:	2001      	movs	r0, #1
 8008484:	f001 fa9a 	bl	80099bc <LOG>
	uint8_t     pData[128] = {0};
 8008488:	227c      	movs	r2, #124	; 0x7c
 800848a:	0031      	movs	r1, r6
 800848c:	a807      	add	r0, sp, #28
 800848e:	9606      	str	r6, [sp, #24]
 8008490:	240a      	movs	r4, #10
 8008492:	f001 fd4b 	bl	8009f2c <memset>
	uint16_t	Value_Measure_Battery = 0;

	/* Measure */
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
	{
		switch(sModem.TypeModem_u8)
 8008496:	4d3f      	ldr	r5, [pc, #252]	; (8008594 <USER_Payload_Node_Single+0x11c>)
 8008498:	7e2b      	ldrb	r3, [r5, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d060      	beq.n	8008560 <USER_Payload_Node_Single+0xe8>
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d063      	beq.n	800856a <USER_Payload_Node_Single+0xf2>
				Value_Measure_Single += Get_Vol_VP();
				break;
			default:
				break;
		}
		HAL_Delay(DELAY_MEASURE_SINGLE);
 80084a2:	2064      	movs	r0, #100	; 0x64
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
 80084a4:	3c01      	subs	r4, #1
		HAL_Delay(DELAY_MEASURE_SINGLE);
 80084a6:	f7fa fb37 	bl	8002b18 <HAL_Delay>
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
 80084aa:	b2a4      	uxth	r4, r4
		LED_TOGGLE(__LED_MEASURE);
 80084ac:	2001      	movs	r0, #1
 80084ae:	f001 faef 	bl	8009a90 <LED_TOGGLE>
	for( i = 0; i < TIME_MEASURE_SINGLE; i++)
 80084b2:	2c00      	cmp	r4, #0
 80084b4:	d1ef      	bne.n	8008496 <USER_Payload_Node_Single+0x1e>
	}
	Value_Measure_Single /= TIME_MEASURE_SINGLE;
 80084b6:	210a      	movs	r1, #10
 80084b8:	0030      	movs	r0, r6
 80084ba:	f7f7 fe4b 	bl	8000154 <__udivsi3>
 80084be:	b283      	uxth	r3, r0
 80084c0:	9302      	str	r3, [sp, #8]
	Value_Measure_Battery = Get_Vol_BAT();
 80084c2:	f7ff fa19 	bl	80078f8 <Get_Vol_BAT>

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 80084c6:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80084c8:	0022      	movs	r2, r4
	Value_Measure_Battery = Get_Vol_BAT();
 80084ca:	9005      	str	r0, [sp, #20]
	pData[length++] = OBIS_ID_SENSOR;
 80084cc:	a806      	add	r0, sp, #24
 80084ce:	7003      	strb	r3, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 80084d0:	88af      	ldrh	r7, [r5, #4]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80084d2:	682b      	ldr	r3, [r5, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 80084d4:	b2f9      	uxtb	r1, r7
 80084d6:	7041      	strb	r1, [r0, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	1c93      	adds	r3, r2, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80084dc:	b296      	uxth	r6, r2
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80084de:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80084e0:	42b7      	cmp	r7, r6
 80084e2:	d845      	bhi.n	8008570 <USER_Payload_Node_Single+0xf8>

	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 80084e4:	4a2b      	ldr	r2, [pc, #172]	; (8008594 <USER_Payload_Node_Single+0x11c>)
 80084e6:	1c88      	adds	r0, r1, #2
 80084e8:	7e17      	ldrb	r7, [r2, #24]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80084ea:	3103      	adds	r1, #3
 80084ec:	b2c0      	uxtb	r0, r0
 80084ee:	b2c9      	uxtb	r1, r1
	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 80084f0:	aa06      	add	r2, sp, #24
 80084f2:	2f00      	cmp	r7, #0
 80084f4:	d141      	bne.n	800857a <USER_Payload_Node_Single+0x102>
	{
		pData[length++] = OBIS_VOL_VNA;
 80084f6:	2007      	movs	r0, #7
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
	{
		pData[length++] = OBIS_VOL_VP;
 80084f8:	54d0      	strb	r0, [r2, r3]
	}
	pData[length++] = 0x02;
 80084fa:	2302      	movs	r3, #2
	pData[length++] = (Value_Measure_Single >> 8) & 0xFF;
 80084fc:	9802      	ldr	r0, [sp, #8]
	pData[length++] = 0x02;
 80084fe:	5453      	strb	r3, [r2, r1]
 8008500:	1c4b      	adds	r3, r1, #1
	pData[length++] = (Value_Measure_Single >> 8) & 0xFF;
 8008502:	b2db      	uxtb	r3, r3
 8008504:	0a00      	lsrs	r0, r0, #8
 8008506:	54d0      	strb	r0, [r2, r3]
	pData[length++] = Value_Measure_Single & 0xFF;
 8008508:	9802      	ldr	r0, [sp, #8]
	pData[length++] = (Value_Measure_Single >> 8) & 0xFF;
 800850a:	1c8b      	adds	r3, r1, #2
	pData[length++] = Value_Measure_Single & 0xFF;
 800850c:	b2db      	uxtb	r3, r3
 800850e:	54d0      	strb	r0, [r2, r3]

	pData[length++] = OBIS_VOL_BAT;
 8008510:	2009      	movs	r0, #9
	pData[length++] = Value_Measure_Single & 0xFF;
 8008512:	1ccb      	adds	r3, r1, #3
	pData[length++] = OBIS_VOL_BAT;
 8008514:	b2db      	uxtb	r3, r3
 8008516:	54d0      	strb	r0, [r2, r3]
 8008518:	1d0b      	adds	r3, r1, #4
	pData[length++] = 0x01;
 800851a:	b2db      	uxtb	r3, r3
 800851c:	3808      	subs	r0, #8
 800851e:	54d0      	strb	r0, [r2, r3]
	pData[length++] = Value_Measure_Battery & 0xFF;
 8008520:	9805      	ldr	r0, [sp, #20]
	pData[length++] = 0x01;
 8008522:	1d4b      	adds	r3, r1, #5
	pData[length++] = Value_Measure_Battery & 0xFF;
 8008524:	b2db      	uxtb	r3, r3
 8008526:	54d0      	strb	r0, [r2, r3]
	pData[length++] = 0x00;
 8008528:	2300      	movs	r3, #0
	pData[length++] = Value_Measure_Battery & 0xFF;
 800852a:	1d88      	adds	r0, r1, #6

	length++;
 800852c:	3108      	adds	r1, #8
	pData[length++] = 0x00;
 800852e:	b2c0      	uxtb	r0, r0
	length++;
 8008530:	b2ce      	uxtb	r6, r1
	pData[length++] = 0x00;
 8008532:	5413      	strb	r3, [r2, r0]
	for (i = 0; i < (length - 1); i++)
 8008534:	1e72      	subs	r2, r6, #1
		TempCrc ^= pData[i];
 8008536:	2008      	movs	r0, #8
 8008538:	a904      	add	r1, sp, #16
 800853a:	1809      	adds	r1, r1, r0
	for (i = 0; i < (length - 1); i++)
 800853c:	4294      	cmp	r4, r2
 800853e:	db22      	blt.n	8008586 <USER_Payload_Node_Single+0x10e>

	pData[length-1] = TempCrc;
 8008540:	548b      	strb	r3, [r1, r2]

	LED_OFF(__LED_MEASURE);
 8008542:	3807      	subs	r0, #7
 8008544:	f001 fa94 	bl	8009a70 <LED_OFF>
	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008548:	4b13      	ldr	r3, [pc, #76]	; (8008598 <USER_Payload_Node_Single+0x120>)
	sModem.TypeDataMessage = _DATA_SINGLE;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_SINGLE, delay);
 800854a:	2201      	movs	r2, #1
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 800854c:	84ab      	strh	r3, [r5, #36]	; 0x24
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_SINGLE, delay);
 800854e:	9b04      	ldr	r3, [sp, #16]
 8008550:	0031      	movs	r1, r6
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	a806      	add	r0, sp, #24
 8008556:	2303      	movs	r3, #3
 8008558:	f7fe fffa 	bl	8007550 <AppLora_Send>
}
 800855c:	b027      	add	sp, #156	; 0x9c
 800855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Value_Measure_Single += Get_Vol_VNA();
 8008560:	f7ff f9a6 	bl	80078b0 <Get_Vol_VNA>
				Value_Measure_Single += Get_Vol_VP();
 8008564:	1986      	adds	r6, r0, r6
 8008566:	b2b6      	uxth	r6, r6
				break;
 8008568:	e79b      	b.n	80084a2 <USER_Payload_Node_Single+0x2a>
				Value_Measure_Single += Get_Vol_VP();
 800856a:	f7ff f9b3 	bl	80078d4 <Get_Vol_VP>
 800856e:	e7f9      	b.n	8008564 <USER_Payload_Node_Single+0xec>
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008570:	9e03      	ldr	r6, [sp, #12]
 8008572:	5cb6      	ldrb	r6, [r6, r2]
 8008574:	3201      	adds	r2, #1
 8008576:	54c6      	strb	r6, [r0, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008578:	e7af      	b.n	80084da <USER_Payload_Node_Single+0x62>
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
 800857a:	2f01      	cmp	r7, #1
 800857c:	d101      	bne.n	8008582 <USER_Payload_Node_Single+0x10a>
		pData[length++] = OBIS_VOL_VP;
 800857e:	2008      	movs	r0, #8
 8008580:	e7ba      	b.n	80084f8 <USER_Payload_Node_Single+0x80>
 8008582:	0001      	movs	r1, r0
 8008584:	e7b9      	b.n	80084fa <USER_Payload_Node_Single+0x82>
		TempCrc ^= pData[i];
 8008586:	5d09      	ldrb	r1, [r1, r4]
	for (i = 0; i < (length - 1); i++)
 8008588:	3401      	adds	r4, #1
		TempCrc ^= pData[i];
 800858a:	404b      	eors	r3, r1
	for (i = 0; i < (length - 1); i++)
 800858c:	b2a4      	uxth	r4, r4
 800858e:	e7d2      	b.n	8008536 <USER_Payload_Node_Single+0xbe>
 8008590:	0800afa4 	.word	0x0800afa4
 8008594:	200000c0 	.word	0x200000c0
 8008598:	00000303 	.word	0x00000303

0800859c <USER_Payload_Node_Calib>:

void USER_Payload_Node_Calib(uint32_t delay)
{
 800859c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859e:	2500      	movs	r5, #0
 80085a0:	b0bf      	sub	sp, #252	; 0xfc
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Calib");
 80085a2:	493c      	ldr	r1, [pc, #240]	; (8008694 <USER_Payload_Node_Calib+0xf8>)
{
 80085a4:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Calib");
 80085a6:	2001      	movs	r0, #1
 80085a8:	f001 fa08 	bl	80099bc <LOG>
	uint8_t     pData[128] = {0};
 80085ac:	227c      	movs	r2, #124	; 0x7c
 80085ae:	0029      	movs	r1, r5
 80085b0:	a81f      	add	r0, sp, #124	; 0x7c
 80085b2:	951e      	str	r5, [sp, #120]	; 0x78
 80085b4:	f001 fcba 	bl	8009f2c <memset>
	uint8_t		Value_Measure_Calib[TIME_MEASURE_CALIB*2];
	uint16_t	Value;
	uint8_t		Pos = 0;

	/* Measure */
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 80085b8:	ab05      	add	r3, sp, #20
	uint8_t     pData[128] = {0};
 80085ba:	001e      	movs	r6, r3
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	ac1e      	add	r4, sp, #120	; 0x78
	{
		switch(sModem.TypeModem_u8)
 80085c0:	4f35      	ldr	r7, [pc, #212]	; (8008698 <USER_Payload_Node_Calib+0xfc>)
 80085c2:	7e3b      	ldrb	r3, [r7, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d04e      	beq.n	8008666 <USER_Payload_Node_Calib+0xca>
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d050      	beq.n	800866e <USER_Payload_Node_Calib+0xd2>
				Value = Get_Vol_VP();
				break;
			default:
				break;
		}
		Value_Measure_Calib[Pos++] = (uint8_t) (Value >> 8);
 80085cc:	0a2b      	lsrs	r3, r5, #8
 80085ce:	7033      	strb	r3, [r6, #0]
		Value_Measure_Calib[Pos++] = (uint8_t) Value;
		HAL_Delay(DELAY_MEASURE_CALIB);
 80085d0:	2064      	movs	r0, #100	; 0x64
		Value_Measure_Calib[Pos++] = (uint8_t) Value;
 80085d2:	7075      	strb	r5, [r6, #1]
		HAL_Delay(DELAY_MEASURE_CALIB);
 80085d4:	f7fa faa0 	bl	8002b18 <HAL_Delay>
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 80085d8:	3602      	adds	r6, #2
		LED_TOGGLE(__LED_MEASURE);
 80085da:	2001      	movs	r0, #1
 80085dc:	f001 fa58 	bl	8009a90 <LED_TOGGLE>
	for(i = 0; i < TIME_MEASURE_CALIB; i++)
 80085e0:	42a6      	cmp	r6, r4
 80085e2:	d1ed      	bne.n	80085c0 <USER_Payload_Node_Calib+0x24>
	}

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 80085e4:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80085e6:	2200      	movs	r2, #0
	pData[length++] = OBIS_ID_SENSOR;
 80085e8:	7023      	strb	r3, [r4, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 80085ea:	88b8      	ldrh	r0, [r7, #4]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80085ec:	683e      	ldr	r6, [r7, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 80085ee:	b2c1      	uxtb	r1, r0
 80085f0:	7061      	strb	r1, [r4, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80085f2:	af1e      	add	r7, sp, #120	; 0x78
 80085f4:	1c93      	adds	r3, r2, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80085f6:	b295      	uxth	r5, r2
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80085f8:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80085fa:	42a8      	cmp	r0, r5
 80085fc:	d83a      	bhi.n	8008674 <USER_Payload_Node_Calib+0xd8>

	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 80085fe:	4d26      	ldr	r5, [pc, #152]	; (8008698 <USER_Payload_Node_Calib+0xfc>)
 8008600:	1c8a      	adds	r2, r1, #2
 8008602:	7e28      	ldrb	r0, [r5, #24]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008604:	3103      	adds	r1, #3
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	b2c9      	uxtb	r1, r1
	if (sModem.TypeModem_u8 == _LORA_NODE_VNA)
 800860a:	2800      	cmp	r0, #0
 800860c:	d136      	bne.n	800867c <USER_Payload_Node_Calib+0xe0>
	{
		pData[length++] = OBIS_VOL_VNA;
 800860e:	2207      	movs	r2, #7
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
	{
		pData[length++] = OBIS_VOL_VP;
 8008610:	54e2      	strb	r2, [r4, r3]
	}
	pData[length++] = 0x64;
 8008612:	2264      	movs	r2, #100	; 0x64
 8008614:	5462      	strb	r2, [r4, r1]
 8008616:	000a      	movs	r2, r1
 8008618:	1c4b      	adds	r3, r1, #1
 800861a:	3265      	adds	r2, #101	; 0x65
 800861c:	b2db      	uxtb	r3, r3
	for (i = 0; i < 100; i++)
 800861e:	b2d2      	uxtb	r2, r2
	{
		pData[length++] = Value_Measure_Calib[i];
 8008620:	0018      	movs	r0, r3
 8008622:	9e02      	ldr	r6, [sp, #8]
 8008624:	3301      	adds	r3, #1
 8008626:	7836      	ldrb	r6, [r6, #0]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	5426      	strb	r6, [r4, r0]
	for (i = 0; i < 100; i++)
 800862c:	9802      	ldr	r0, [sp, #8]
 800862e:	3001      	adds	r0, #1
 8008630:	9002      	str	r0, [sp, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	d1f4      	bne.n	8008620 <USER_Payload_Node_Calib+0x84>
	}
	pData[length++] = 0x00;
 8008636:	2300      	movs	r3, #0
 8008638:	54a3      	strb	r3, [r4, r2]
	uint8_t     TempCrc = 0;
 800863a:	001a      	movs	r2, r3

	length++;
 800863c:	3167      	adds	r1, #103	; 0x67
 800863e:	b2ce      	uxtb	r6, r1
	for (i = 0; i < (length - 1); i++)
 8008640:	1e71      	subs	r1, r6, #1
 8008642:	428b      	cmp	r3, r1
 8008644:	db20      	blt.n	8008688 <USER_Payload_Node_Calib+0xec>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;
	LED_OFF(__LED_MEASURE);
 8008646:	2001      	movs	r0, #1
	pData[length-1] = TempCrc;
 8008648:	5462      	strb	r2, [r4, r1]
	LED_OFF(__LED_MEASURE);
 800864a:	f001 fa11 	bl	8009a70 <LED_OFF>

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <USER_Payload_Node_Calib+0x100>)
	sModem.TypeDataMessage = _DATA_MULTI;
	AppLora_Send(pData, length, DATA_CONFIRMED_UP, _DATA_MULTI, delay);
 8008650:	2203      	movs	r2, #3
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008652:	84ab      	strh	r3, [r5, #36]	; 0x24
	AppLora_Send(pData, length, DATA_CONFIRMED_UP, _DATA_MULTI, delay);
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	0031      	movs	r1, r6
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	0020      	movs	r0, r4
 800865c:	2304      	movs	r3, #4
 800865e:	f7fe ff77 	bl	8007550 <AppLora_Send>
}
 8008662:	b03f      	add	sp, #252	; 0xfc
 8008664:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Value = Get_Vol_VNA();
 8008666:	f7ff f923 	bl	80078b0 <Get_Vol_VNA>
				Value = Get_Vol_VP();
 800866a:	0005      	movs	r5, r0
				break;
 800866c:	e7ae      	b.n	80085cc <USER_Payload_Node_Calib+0x30>
				Value = Get_Vol_VP();
 800866e:	f7ff f931 	bl	80078d4 <Get_Vol_VP>
 8008672:	e7fa      	b.n	800866a <USER_Payload_Node_Calib+0xce>
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008674:	5cb5      	ldrb	r5, [r6, r2]
 8008676:	3201      	adds	r2, #1
 8008678:	54fd      	strb	r5, [r7, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800867a:	e7bb      	b.n	80085f4 <USER_Payload_Node_Calib+0x58>
	} else if (sModem.TypeModem_u8 == _LORA_NODE_VP)
 800867c:	2801      	cmp	r0, #1
 800867e:	d101      	bne.n	8008684 <USER_Payload_Node_Calib+0xe8>
		pData[length++] = OBIS_VOL_VP;
 8008680:	2208      	movs	r2, #8
 8008682:	e7c5      	b.n	8008610 <USER_Payload_Node_Calib+0x74>
 8008684:	0011      	movs	r1, r2
 8008686:	e7c4      	b.n	8008612 <USER_Payload_Node_Calib+0x76>
		TempCrc ^= pData[i];
 8008688:	5ce0      	ldrb	r0, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 800868a:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 800868c:	4042      	eors	r2, r0
	for (i = 0; i < (length - 1); i++)
 800868e:	b29b      	uxth	r3, r3
 8008690:	e7d7      	b.n	8008642 <USER_Payload_Node_Calib+0xa6>
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	0800afbd 	.word	0x0800afbd
 8008698:	200000c0 	.word	0x200000c0
 800869c:	00000403 	.word	0x00000403

080086a0 <USER_Payload_Node_Mode>:

void USER_Payload_Node_Mode(uint32_t delay)
{
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Mode");
	uint8_t     pData[128] = {0};
 80086a2:	2600      	movs	r6, #0
{
 80086a4:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Node_Mode");
 80086a6:	4920      	ldr	r1, [pc, #128]	; (8008728 <USER_Payload_Node_Mode+0x88>)
{
 80086a8:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Mode");
 80086aa:	2001      	movs	r0, #1
 80086ac:	f001 f986 	bl	80099bc <LOG>
	uint8_t     pData[128] = {0};
 80086b0:	227c      	movs	r2, #124	; 0x7c
 80086b2:	0031      	movs	r1, r6
 80086b4:	a805      	add	r0, sp, #20
 80086b6:	9604      	str	r6, [sp, #16]
 80086b8:	f001 fc38 	bl	8009f2c <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 80086bc:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;
 80086be:	481b      	ldr	r0, [pc, #108]	; (800872c <USER_Payload_Node_Mode+0x8c>)
	uint8_t     pData[128] = {0};
 80086c0:	ac04      	add	r4, sp, #16
	pData[length++] = OBIS_ID_SENSOR;
 80086c2:	7023      	strb	r3, [r4, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 80086c4:	8881      	ldrh	r1, [r0, #4]

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80086c6:	6807      	ldr	r7, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 80086c8:	b2ca      	uxtb	r2, r1
 80086ca:	7062      	strb	r2, [r4, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80086cc:	1cb3      	adds	r3, r6, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80086ce:	b2b5      	uxth	r5, r6
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80086d0:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80086d2:	42a9      	cmp	r1, r5
 80086d4:	d81f      	bhi.n	8008716 <USER_Payload_Node_Mode+0x76>

	pData[length++] = OBIS_MODE;
 80086d6:	2104      	movs	r1, #4
 80086d8:	54e1      	strb	r1, [r4, r3]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80086da:	1cd3      	adds	r3, r2, #3
	pData[length++] = 0x01;
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	3903      	subs	r1, #3
 80086e0:	54e1      	strb	r1, [r4, r3]
	pData[length++] = sModem.Mode & 0xFF;
 80086e2:	7e41      	ldrb	r1, [r0, #25]
	pData[length++] = 0x01;
 80086e4:	1d13      	adds	r3, r2, #4
	pData[length++] = sModem.Mode & 0xFF;
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	54e1      	strb	r1, [r4, r3]
	pData[length++] = 0x00;
 80086ea:	2300      	movs	r3, #0
	pData[length++] = sModem.Mode & 0xFF;
 80086ec:	1d51      	adds	r1, r2, #5
	pData[length++] = 0x00;
 80086ee:	b2c9      	uxtb	r1, r1

	length++;
 80086f0:	3207      	adds	r2, #7
	pData[length++] = 0x00;
 80086f2:	5463      	strb	r3, [r4, r1]
	length++;
 80086f4:	b2d1      	uxtb	r1, r2
	uint8_t     TempCrc = 0;
 80086f6:	001a      	movs	r2, r3
	for (i = 0; i < (length - 1); i++)
 80086f8:	1e4e      	subs	r6, r1, #1
 80086fa:	42b3      	cmp	r3, r6
 80086fc:	db0f      	blt.n	800871e <USER_Payload_Node_Mode+0x7e>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 80086fe:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <USER_Payload_Node_Mode+0x90>)
	pData[length-1] = TempCrc;
 8008700:	55a2      	strb	r2, [r4, r6]
	sModem.bNeedConfirm = DATA_CONFIRMED_UP;
 8008702:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_MODE;
	AppLora_Send(pData, length, DATA_CONFIRMED_UP, _DATA_MODE, delay);
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	2203      	movs	r2, #3
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	0020      	movs	r0, r4
 800870c:	2305      	movs	r3, #5
 800870e:	f7fe ff1f 	bl	8007550 <AppLora_Send>
}
 8008712:	b025      	add	sp, #148	; 0x94
 8008714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008716:	5dbd      	ldrb	r5, [r7, r6]
 8008718:	3601      	adds	r6, #1
 800871a:	54e5      	strb	r5, [r4, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800871c:	e7d6      	b.n	80086cc <USER_Payload_Node_Mode+0x2c>
		TempCrc ^= pData[i];
 800871e:	5ce7      	ldrb	r7, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 8008720:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 8008722:	407a      	eors	r2, r7
	for (i = 0; i < (length - 1); i++)
 8008724:	b29b      	uxth	r3, r3
 8008726:	e7e8      	b.n	80086fa <USER_Payload_Node_Mode+0x5a>
 8008728:	0800afd5 	.word	0x0800afd5
 800872c:	200000c0 	.word	0x200000c0
 8008730:	00000503 	.word	0x00000503

08008734 <USER_Payload_Node_Join>:

void USER_Payload_Node_Join(uint32_t delay)
{
 8008734:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Join");
	uint8_t     pData[128] = {0};
 8008736:	2600      	movs	r6, #0
{
 8008738:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Node_Join");
 800873a:	4921      	ldr	r1, [pc, #132]	; (80087c0 <USER_Payload_Node_Join+0x8c>)
{
 800873c:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Join");
 800873e:	2001      	movs	r0, #1
 8008740:	f001 f93c 	bl	80099bc <LOG>
	uint8_t     pData[128] = {0};
 8008744:	227c      	movs	r2, #124	; 0x7c
 8008746:	0031      	movs	r1, r6
 8008748:	a805      	add	r0, sp, #20
 800874a:	9604      	str	r6, [sp, #16]
 800874c:	f001 fbee 	bl	8009f2c <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

	/* Packet */
	pData[length++] = OBIS_ID_SENSOR;
 8008750:	2301      	movs	r3, #1
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008752:	481c      	ldr	r0, [pc, #112]	; (80087c4 <USER_Payload_Node_Join+0x90>)
	uint8_t     pData[128] = {0};
 8008754:	ac04      	add	r4, sp, #16
	pData[length++] = OBIS_ID_SENSOR;
 8008756:	7023      	strb	r3, [r4, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8008758:	8881      	ldrh	r1, [r0, #4]

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800875a:	6807      	ldr	r7, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 800875c:	b2ca      	uxtb	r2, r1
 800875e:	7062      	strb	r2, [r4, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008760:	1cb3      	adds	r3, r6, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008762:	b2b5      	uxth	r5, r6
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008764:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008766:	42a9      	cmp	r1, r5
 8008768:	d820      	bhi.n	80087ac <USER_Payload_Node_Join+0x78>

	pData[length++] = OBIS_MODE;
 800876a:	2104      	movs	r1, #4
 800876c:	54e1      	strb	r1, [r4, r3]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800876e:	1cd3      	adds	r3, r2, #3
	pData[length++] = 0x01;
 8008770:	b2db      	uxtb	r3, r3
 8008772:	3903      	subs	r1, #3
 8008774:	54e1      	strb	r1, [r4, r3]
	pData[length++] = sModem.Mode & 0xFF;
 8008776:	7e41      	ldrb	r1, [r0, #25]
	pData[length++] = 0x01;
 8008778:	1d13      	adds	r3, r2, #4
	pData[length++] = sModem.Mode & 0xFF;
 800877a:	b2db      	uxtb	r3, r3
 800877c:	54e1      	strb	r1, [r4, r3]
	pData[length++] = 0x00;
 800877e:	2300      	movs	r3, #0
	pData[length++] = sModem.Mode & 0xFF;
 8008780:	1d51      	adds	r1, r2, #5
	pData[length++] = 0x00;
 8008782:	b2c9      	uxtb	r1, r1

	length++;
 8008784:	3207      	adds	r2, #7
	pData[length++] = 0x00;
 8008786:	5463      	strb	r3, [r4, r1]
	length++;
 8008788:	b2d1      	uxtb	r1, r2
	uint8_t     TempCrc = 0;
 800878a:	001a      	movs	r2, r3
	for (i = 0; i < (length - 1); i++)
 800878c:	1e4e      	subs	r6, r1, #1
 800878e:	42b3      	cmp	r3, r6
 8008790:	db10      	blt.n	80087b4 <USER_Payload_Node_Join+0x80>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;

	/* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 8008792:	2302      	movs	r3, #2
 8008794:	33ff      	adds	r3, #255	; 0xff
 8008796:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_JOIN;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_JOIN, delay);
 8008798:	9b03      	ldr	r3, [sp, #12]
	pData[length-1] = TempCrc;
 800879a:	55a2      	strb	r2, [r4, r6]
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_JOIN, delay);
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	2301      	movs	r3, #1
 80087a0:	0020      	movs	r0, r4
 80087a2:	001a      	movs	r2, r3
 80087a4:	f7fe fed4 	bl	8007550 <AppLora_Send>
}
 80087a8:	b025      	add	sp, #148	; 0x94
 80087aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80087ac:	5dbd      	ldrb	r5, [r7, r6]
 80087ae:	3601      	adds	r6, #1
 80087b0:	54e5      	strb	r5, [r4, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80087b2:	e7d5      	b.n	8008760 <USER_Payload_Node_Join+0x2c>
		TempCrc ^= pData[i];
 80087b4:	5ce7      	ldrb	r7, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 80087b6:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 80087b8:	407a      	eors	r2, r7
	for (i = 0; i < (length - 1); i++)
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	e7e7      	b.n	800878e <USER_Payload_Node_Join+0x5a>
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	0800afec 	.word	0x0800afec
 80087c4:	200000c0 	.word	0x200000c0

080087c8 <USER_Payload_Node_Confirm>:

void USER_Payload_Node_Confirm(uint32_t delay)
{
 80087c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Node_Confirm");
	uint8_t     pData[128] = {0};
 80087ca:	2400      	movs	r4, #0
{
 80087cc:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Node_Confirm");
 80087ce:	491c      	ldr	r1, [pc, #112]	; (8008840 <USER_Payload_Node_Confirm+0x78>)
{
 80087d0:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Node_Confirm");
 80087d2:	2001      	movs	r0, #1
 80087d4:	f001 f8f2 	bl	80099bc <LOG>
	uint8_t     pData[128] = {0};
 80087d8:	227c      	movs	r2, #124	; 0x7c
 80087da:	0021      	movs	r1, r4
 80087dc:	a805      	add	r0, sp, #20
 80087de:	9404      	str	r4, [sp, #16]
 80087e0:	f001 fba4 	bl	8009f2c <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Packet */
    pData[length++] = OBIS_ID_SENSOR;
 80087e4:	2301      	movs	r3, #1
    pData[length++] = sModem.sDCU_id.Length_u16;
 80087e6:	4817      	ldr	r0, [pc, #92]	; (8008844 <USER_Payload_Node_Confirm+0x7c>)
	uint8_t     pData[128] = {0};
 80087e8:	ad04      	add	r5, sp, #16
    pData[length++] = OBIS_ID_SENSOR;
 80087ea:	702b      	strb	r3, [r5, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80087ec:	8882      	ldrh	r2, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80087ee:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80087f0:	b2d1      	uxtb	r1, r2
 80087f2:	7069      	strb	r1, [r5, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80087f4:	1ca3      	adds	r3, r4, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80087f6:	b2a6      	uxth	r6, r4
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80087f8:	b2db      	uxtb	r3, r3
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80087fa:	42b2      	cmp	r2, r6
 80087fc:	d817      	bhi.n	800882e <USER_Payload_Node_Confirm+0x66>

    pData[length++] = OBIS_CONFIRM;
 80087fe:	2211      	movs	r2, #17
 8008800:	54ea      	strb	r2, [r5, r3]
    pData[length++] = 0x00;
 8008802:	2300      	movs	r3, #0
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8008804:	1cca      	adds	r2, r1, #3
    pData[length++] = 0x00;
 8008806:	b2d2      	uxtb	r2, r2
 8008808:	54ab      	strb	r3, [r5, r2]

    length++;
	for (i = 0; i < (length - 1); i++)
 800880a:	001a      	movs	r2, r3
    length++;
 800880c:	3105      	adds	r1, #5
 800880e:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 8008810:	1e4c      	subs	r4, r1, #1
 8008812:	42a2      	cmp	r2, r4
 8008814:	db0f      	blt.n	8008836 <USER_Payload_Node_Confirm+0x6e>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 8008816:	552b      	strb	r3, [r5, r4]

    /* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 8008818:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <USER_Payload_Node_Confirm+0x80>)
	sModem.TypeDataMessage = _DATA_CONFIRM;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_CONFIRM, delay);
 800881a:	2201      	movs	r2, #1
	sModem.bNeedConfirm = DATA_UNCONFIRMED_UP;
 800881c:	8483      	strh	r3, [r0, #36]	; 0x24
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_CONFIRM, delay);
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	0028      	movs	r0, r5
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	2307      	movs	r3, #7
 8008826:	f7fe fe93 	bl	8007550 <AppLora_Send>
}
 800882a:	b025      	add	sp, #148	; 0x94
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800882e:	5d3e      	ldrb	r6, [r7, r4]
 8008830:	3401      	adds	r4, #1
 8008832:	54ee      	strb	r6, [r5, r3]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8008834:	e7de      	b.n	80087f4 <USER_Payload_Node_Confirm+0x2c>
		TempCrc ^= pData[i];
 8008836:	5caf      	ldrb	r7, [r5, r2]
	for (i = 0; i < (length - 1); i++)
 8008838:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 800883a:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 800883c:	b292      	uxth	r2, r2
 800883e:	e7e8      	b.n	8008812 <USER_Payload_Node_Confirm+0x4a>
 8008840:	0800b003 	.word	0x0800b003
 8008844:	200000c0 	.word	0x200000c0
 8008848:	00000701 	.word	0x00000701

0800884c <Protocol_Process_Rx>:
    			break;
    	}
    	length_data = 0;
	#else
        uint8_t 	length_data = 0;
	    switch(DataType)
 800884c:	3802      	subs	r0, #2
{
 800884e:	b570      	push	{r4, r5, r6, lr}
 8008850:	000c      	movs	r4, r1
 8008852:	0015      	movs	r5, r2
	    switch(DataType)
 8008854:	2805      	cmp	r0, #5
 8008856:	d80e      	bhi.n	8008876 <Protocol_Process_Rx+0x2a>
 8008858:	f7f7 fc68 	bl	800012c <__gnu_thumb1_case_uqi>
 800885c:	6f0d0dac 	.word	0x6f0d0dac
 8008860:	a53b      	.short	0xa53b
	    {
	    	case _DATA_RTC:
				while (Pos < (Length - 1))  //bo crc
				{
					Obis = *(pData + Pos++);
 8008862:	5ce1      	ldrb	r1, [r4, r3]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	b2d2      	uxtb	r2, r2
					switch (Obis)
 8008868:	2902      	cmp	r1, #2
 800886a:	d006      	beq.n	800887a <Protocol_Process_Rx+0x2e>
 800886c:	2903      	cmp	r1, #3
 800886e:	d008      	beq.n	8008882 <Protocol_Process_Rx+0x36>
					Obis = *(pData + Pos++);
 8008870:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 8008872:	4283      	cmp	r3, r0
 8008874:	dbf5      	blt.n	8008862 <Protocol_Process_Rx+0x16>
	    	default:
	    		break;
		}
	#endif
    return 1;
}
 8008876:	2001      	movs	r0, #1
 8008878:	bd70      	pop	{r4, r5, r6, pc}
							Pos++;
 800887a:	3306      	adds	r3, #6
 800887c:	b2db      	uxtb	r3, r3
				while (Pos < (Length - 1))  //bo crc
 800887e:	1e68      	subs	r0, r5, #1
 8008880:	e7f7      	b.n	8008872 <Protocol_Process_Rx+0x26>
							if ( (Pos + length_data) <= Length )
 8008882:	5ca1      	ldrb	r1, [r4, r2]
							length_data = *(pData + Pos++);
 8008884:	1c9e      	adds	r6, r3, #2
 8008886:	b2f6      	uxtb	r6, r6
							if ( (Pos + length_data) <= Length )
 8008888:	1989      	adds	r1, r1, r6
 800888a:	4a51      	ldr	r2, [pc, #324]	; (80089d0 <Protocol_Process_Rx+0x184>)
 800888c:	42a9      	cmp	r1, r5
 800888e:	dc18      	bgt.n	80088c2 <Protocol_Process_Rx+0x76>
								sRTCSet.year    = *(pData + Pos++);
 8008890:	5da1      	ldrb	r1, [r4, r6]
								sRTCSet.sec     = *(pData + Pos++);
 8008892:	001e      	movs	r6, r3
								sRTCSet.year    = *(pData + Pos++);
 8008894:	7191      	strb	r1, [r2, #6]
 8008896:	1cd9      	adds	r1, r3, #3
								sRTCSet.month   = *(pData + Pos++);
 8008898:	b2c9      	uxtb	r1, r1
 800889a:	5c61      	ldrb	r1, [r4, r1]
								sRTCSet.sec     = *(pData + Pos++);
 800889c:	3608      	adds	r6, #8
								sRTCSet.month   = *(pData + Pos++);
 800889e:	7151      	strb	r1, [r2, #5]
 80088a0:	1d19      	adds	r1, r3, #4
								sRTCSet.date    = *(pData + Pos++);
 80088a2:	b2c9      	uxtb	r1, r1
 80088a4:	5c61      	ldrb	r1, [r4, r1]
								sRTCSet.sec     = *(pData + Pos++);
 80088a6:	b2f6      	uxtb	r6, r6
								sRTCSet.date    = *(pData + Pos++);
 80088a8:	7111      	strb	r1, [r2, #4]
 80088aa:	1d59      	adds	r1, r3, #5
								sRTCSet.hour    = *(pData + Pos++);
 80088ac:	b2c9      	uxtb	r1, r1
 80088ae:	5c61      	ldrb	r1, [r4, r1]
 80088b0:	7011      	strb	r1, [r2, #0]
 80088b2:	1d99      	adds	r1, r3, #6
								sRTCSet.min     = *(pData + Pos++);
 80088b4:	b2c9      	uxtb	r1, r1
 80088b6:	5c61      	ldrb	r1, [r4, r1]
 80088b8:	3307      	adds	r3, #7
 80088ba:	7051      	strb	r1, [r2, #1]
								sRTCSet.sec     = *(pData + Pos++);
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	5ce3      	ldrb	r3, [r4, r3]
 80088c0:	7093      	strb	r3, [r2, #2]
						    UTIL_Set_RTC(sRTCSet);
 80088c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80088c4:	f001 f824 	bl	8009910 <UTIL_Set_RTC>
						    USER_Payload_Node_Confirm(0);
 80088c8:	2000      	movs	r0, #0
 80088ca:	f7ff ff7d 	bl	80087c8 <USER_Payload_Node_Confirm>
							break;
 80088ce:	0033      	movs	r3, r6
 80088d0:	e7d5      	b.n	800887e <Protocol_Process_Rx+0x32>
	    switch(DataType)
 80088d2:	2300      	movs	r3, #0
 80088d4:	e7d3      	b.n	800887e <Protocol_Process_Rx+0x32>
					Obis = *(pData + Pos++);
 80088d6:	5ce1      	ldrb	r1, [r4, r3]
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	b2d2      	uxtb	r2, r2
					switch (Obis)
 80088dc:	2902      	cmp	r1, #2
 80088de:	d022      	beq.n	8008926 <Protocol_Process_Rx+0xda>
 80088e0:	2904      	cmp	r1, #4
 80088e2:	d023      	beq.n	800892c <Protocol_Process_Rx+0xe0>
 80088e4:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 80088e6:	42ab      	cmp	r3, r5
 80088e8:	dbf5      	blt.n	80088d6 <Protocol_Process_Rx+0x8a>
				switch(sModem.Mode)
 80088ea:	4c3a      	ldr	r4, [pc, #232]	; (80089d4 <Protocol_Process_Rx+0x188>)
 80088ec:	7e60      	ldrb	r0, [r4, #25]
 80088ee:	2801      	cmp	r0, #1
 80088f0:	d027      	beq.n	8008942 <Protocol_Process_Rx+0xf6>
 80088f2:	2802      	cmp	r0, #2
 80088f4:	d033      	beq.n	800895e <Protocol_Process_Rx+0x112>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1bd      	bne.n	8008876 <Protocol_Process_Rx+0x2a>
						LED_OFF(__LED_MODE);
 80088fa:	f001 f8b9 	bl	8009a70 <LED_OFF>
						sModem.CheckInit = 1;
 80088fe:	0023      	movs	r3, r4
 8008900:	2201      	movs	r2, #1
 8008902:	3351      	adds	r3, #81	; 0x51
						fevent_disable(sEventAppCom, _EVENT_IDLE_HANDLER);
 8008904:	2103      	movs	r1, #3
 8008906:	4834      	ldr	r0, [pc, #208]	; (80089d8 <Protocol_Process_Rx+0x18c>)
						sModem.CheckInit = 1;
 8008908:	701a      	strb	r2, [r3, #0]
						fevent_disable(sEventAppCom, _EVENT_IDLE_HANDLER);
 800890a:	f000 fb08 	bl	8008f1e <fevent_disable>
						HAL_Delay(10000 - sModem.TimeDelayNetwork_u32);
 800890e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008910:	4832      	ldr	r0, [pc, #200]	; (80089dc <Protocol_Process_Rx+0x190>)
 8008912:	1ac0      	subs	r0, r0, r3
 8008914:	f7fa f900 	bl	8002b18 <HAL_Delay>
						USER_Payload_Node_Mode(sModem.TimeDelaySingle_u32);
 8008918:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800891a:	f7ff fec1 	bl	80086a0 <USER_Payload_Node_Mode>
						UTIL_TIMER_Start (&TimerLoraTx);
 800891e:	4830      	ldr	r0, [pc, #192]	; (80089e0 <Protocol_Process_Rx+0x194>)
 8008920:	f000 ff64 	bl	80097ec <UTIL_TIMER_Start>
						break;
 8008924:	e7a7      	b.n	8008876 <Protocol_Process_Rx+0x2a>
							Pos++;
 8008926:	3306      	adds	r3, #6
 8008928:	b2db      	uxtb	r3, r3
							break;
 800892a:	e7dc      	b.n	80088e6 <Protocol_Process_Rx+0x9a>
							length_data = *(pData + Pos++);
 800892c:	1c9a      	adds	r2, r3, #2
 800892e:	b2d2      	uxtb	r2, r2
							sModem.Mode = *(pData + Pos++);
 8008930:	5ca2      	ldrb	r2, [r4, r2]
 8008932:	3303      	adds	r3, #3
 8008934:	b2db      	uxtb	r3, r3
 8008936:	7642      	strb	r2, [r0, #25]
							break;
 8008938:	e7d5      	b.n	80088e6 <Protocol_Process_Rx+0x9a>
	    switch(DataType)
 800893a:	2300      	movs	r3, #0
							sModem.Mode = *(pData + Pos++);
 800893c:	4825      	ldr	r0, [pc, #148]	; (80089d4 <Protocol_Process_Rx+0x188>)
				while (Pos < (Length - 1))  //bo crc
 800893e:	3d01      	subs	r5, #1
 8008940:	e7d1      	b.n	80088e6 <Protocol_Process_Rx+0x9a>
						LED_ON(__LED_MODE);
 8008942:	2000      	movs	r0, #0
 8008944:	f001 f884 	bl	8009a50 <LED_ON>
						UTIL_TIMER_Stop(&TimerLoraTx);
 8008948:	4825      	ldr	r0, [pc, #148]	; (80089e0 <Protocol_Process_Rx+0x194>)
 800894a:	f000 fefd 	bl	8009748 <UTIL_TIMER_Stop>
						USER_Payload_Node_Mode(0);
 800894e:	2000      	movs	r0, #0
 8008950:	f7ff fea6 	bl	80086a0 <USER_Payload_Node_Mode>
				Radio.Rx(RX_TIMEOUT_VALUE_ACTIVE);
 8008954:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <Protocol_Process_Rx+0x198>)
 8008956:	4824      	ldr	r0, [pc, #144]	; (80089e8 <Protocol_Process_Rx+0x19c>)
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	4798      	blx	r3
	       		break;
 800895c:	e78b      	b.n	8008876 <Protocol_Process_Rx+0x2a>
						LED_ON(__LED_MODE);
 800895e:	2000      	movs	r0, #0
 8008960:	f001 f876 	bl	8009a50 <LED_ON>
						HAL_Delay(10000 - sModem.TimeDelayNetwork_u32);
 8008964:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008966:	481d      	ldr	r0, [pc, #116]	; (80089dc <Protocol_Process_Rx+0x190>)
 8008968:	1ac0      	subs	r0, r0, r3
 800896a:	f7fa f8d5 	bl	8002b18 <HAL_Delay>
						USER_Payload_Node_Calib(sModem.TimeDelayCalib_u32);
 800896e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008970:	f7ff fe14 	bl	800859c <USER_Payload_Node_Calib>
 8008974:	e7d3      	b.n	800891e <Protocol_Process_Rx+0xd2>
					Obis = *(pData + Pos++);
 8008976:	5ce1      	ldrb	r1, [r4, r3]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	b2d2      	uxtb	r2, r2
					switch (Obis)
 800897c:	2902      	cmp	r1, #2
 800897e:	d00f      	beq.n	80089a0 <Protocol_Process_Rx+0x154>
							length_data = *(pData + Pos++);
 8008980:	3302      	adds	r3, #2
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2911      	cmp	r1, #17
 8008986:	d000      	beq.n	800898a <Protocol_Process_Rx+0x13e>
 8008988:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 800898a:	42ab      	cmp	r3, r5
 800898c:	dbf3      	blt.n	8008976 <Protocol_Process_Rx+0x12a>
				if(sModem.Mode == _MODE_MEASURE)
 800898e:	4a11      	ldr	r2, [pc, #68]	; (80089d4 <Protocol_Process_Rx+0x188>)
 8008990:	7e53      	ldrb	r3, [r2, #25]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d10a      	bne.n	80089ac <Protocol_Process_Rx+0x160>
					sModem.Mode = _MODE_SLEEP;
 8008996:	2000      	movs	r0, #0
 8008998:	7650      	strb	r0, [r2, #25]
					USER_Payload_Node_Mode(0);
 800899a:	f7ff fe81 	bl	80086a0 <USER_Payload_Node_Mode>
 800899e:	e76a      	b.n	8008876 <Protocol_Process_Rx+0x2a>
							Pos++;
 80089a0:	3306      	adds	r3, #6
 80089a2:	b2db      	uxtb	r3, r3
							break;
 80089a4:	e7f1      	b.n	800898a <Protocol_Process_Rx+0x13e>
	    switch(DataType)
 80089a6:	2300      	movs	r3, #0
				while (Pos < (Length - 1))  //bo crc
 80089a8:	3d01      	subs	r5, #1
 80089aa:	e7ee      	b.n	800898a <Protocol_Process_Rx+0x13e>
				} else if(sModem.Mode == _MODE_WAKEUP)
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d000      	beq.n	80089b2 <Protocol_Process_Rx+0x166>
 80089b0:	e761      	b.n	8008876 <Protocol_Process_Rx+0x2a>
 80089b2:	e7cf      	b.n	8008954 <Protocol_Process_Rx+0x108>
	       		sModem.CheckJoin = 1;
 80089b4:	4c07      	ldr	r4, [pc, #28]	; (80089d4 <Protocol_Process_Rx+0x188>)
 80089b6:	2501      	movs	r5, #1
 80089b8:	0023      	movs	r3, r4
 80089ba:	3352      	adds	r3, #82	; 0x52
 80089bc:	701d      	strb	r5, [r3, #0]
				sEventAppCom[_EVENT_IDLE_HANDLER].e_period = 1000;
 80089be:	23fa      	movs	r3, #250	; 0xfa
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <Protocol_Process_Rx+0x18c>)
 80089c2:	009b      	lsls	r3, r3, #2
				fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 80089c4:	2103      	movs	r1, #3
				sEventAppCom[_EVENT_IDLE_HANDLER].e_period = 1000;
 80089c6:	6383      	str	r3, [r0, #56]	; 0x38
				fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 80089c8:	f000 fa9f 	bl	8008f0a <fevent_enable>
				sModem.Mode = _MODE_WAKEUP;
 80089cc:	7665      	strb	r5, [r4, #25]
 80089ce:	e7c1      	b.n	8008954 <Protocol_Process_Rx+0x108>
 80089d0:	20001110 	.word	0x20001110
 80089d4:	200000c0 	.word	0x200000c0
 80089d8:	20000024 	.word	0x20000024
 80089dc:	00002710 	.word	0x00002710
 80089e0:	20000448 	.word	0x20000448
 80089e4:	0800a9c4 	.word	0x0800a9c4
 80089e8:	000493e0 	.word	0x000493e0

080089ec <Protocol_Extract_Rx>:
{
 80089ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    sFrameRx->Header.Value 	= 	*(pData);
 80089ee:	7802      	ldrb	r2, [r0, #0]
 80089f0:	4e25      	ldr	r6, [pc, #148]	; (8008a88 <Protocol_Extract_Rx+0x9c>)
 80089f2:	701a      	strb	r2, [r3, #0]
    DevAddrRx = DevAddrRx << 8 | *(pData + 1);
 80089f4:	7884      	ldrb	r4, [r0, #2]
 80089f6:	7845      	ldrb	r5, [r0, #1]
 80089f8:	0224      	lsls	r4, r4, #8
 80089fa:	432c      	orrs	r4, r5
 80089fc:	78c5      	ldrb	r5, [r0, #3]
 80089fe:	042d      	lsls	r5, r5, #16
 8008a00:	4325      	orrs	r5, r4
 8008a02:	7904      	ldrb	r4, [r0, #4]
 8008a04:	0624      	lsls	r4, r4, #24
 8008a06:	432c      	orrs	r4, r5
 8008a08:	ba24      	rev	r4, r4
    sFrameRx->DevAddr = DevAddrRx;
 8008a0a:	605c      	str	r4, [r3, #4]
    NetAddrRx = NetAddrRx << 8 | *(pData + 5);
 8008a0c:	1d44      	adds	r4, r0, #5
 8008a0e:	9401      	str	r4, [sp, #4]
 8008a10:	7984      	ldrb	r4, [r0, #6]
 8008a12:	7945      	ldrb	r5, [r0, #5]
 8008a14:	0224      	lsls	r4, r4, #8
 8008a16:	432c      	orrs	r4, r5
 8008a18:	79c5      	ldrb	r5, [r0, #7]
 8008a1a:	042d      	lsls	r5, r5, #16
 8008a1c:	4325      	orrs	r5, r4
 8008a1e:	7a04      	ldrb	r4, [r0, #8]
 8008a20:	0624      	lsls	r4, r4, #24
 8008a22:	432c      	orrs	r4, r5
 8008a24:	ba24      	rev	r4, r4
    sFrameRx->NetAddr = NetAddrRx;
 8008a26:	609c      	str	r4, [r3, #8]
		if (sFrameRx->Header.Bits.SendAll == 0){
 8008a28:	b254      	sxtb	r4, r2
 8008a2a:	2c00      	cmp	r4, #0
 8008a2c:	db0a      	blt.n	8008a44 <Protocol_Extract_Rx+0x58>
				if ( *(pData + 1 + i) != *(sModem.sDCU_id.Data_a8 + i))
 8008a2e:	2401      	movs	r4, #1
 8008a30:	6835      	ldr	r5, [r6, #0]
 8008a32:	3d01      	subs	r5, #1
 8008a34:	5d07      	ldrb	r7, [r0, r4]
 8008a36:	46bc      	mov	ip, r7
 8008a38:	5d2f      	ldrb	r7, [r5, r4]
 8008a3a:	45bc      	cmp	ip, r7
 8008a3c:	d121      	bne.n	8008a82 <Protocol_Extract_Rx+0x96>
			for (i = 0; i < 4; i++){
 8008a3e:	3401      	adds	r4, #1
 8008a40:	2c05      	cmp	r4, #5
 8008a42:	d1f7      	bne.n	8008a34 <Protocol_Extract_Rx+0x48>
			if ( *(pData + 5 + i) != *(sModem.sNET_id.Data_a8 + i))
 8008a44:	2400      	movs	r4, #0
 8008a46:	68b5      	ldr	r5, [r6, #8]
 8008a48:	9e01      	ldr	r6, [sp, #4]
 8008a4a:	5d37      	ldrb	r7, [r6, r4]
 8008a4c:	5d2e      	ldrb	r6, [r5, r4]
 8008a4e:	42b7      	cmp	r7, r6
 8008a50:	d117      	bne.n	8008a82 <Protocol_Extract_Rx+0x96>
		for (i = 0; i < 4; i++){
 8008a52:	3401      	adds	r4, #1
 8008a54:	2c04      	cmp	r4, #4
 8008a56:	d1f7      	bne.n	8008a48 <Protocol_Extract_Rx+0x5c>
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_DOWN )
 8008a58:	3403      	adds	r4, #3
 8008a5a:	4022      	ands	r2, r4
    uint8_t 	Result = FALSE;
 8008a5c:	2400      	movs	r4, #0
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_DOWN )
 8008a5e:	2a04      	cmp	r2, #4
 8008a60:	d102      	bne.n	8008a68 <Protocol_Extract_Rx+0x7c>
			sCtrlLora.CtrlACK_u8 = TRUE;
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <Protocol_Extract_Rx+0xa0>)
 8008a64:	3401      	adds	r4, #1
 8008a66:	7014      	strb	r4, [r2, #0]
		if (Length > 9)
 8008a68:	2909      	cmp	r1, #9
 8008a6a:	d908      	bls.n	8008a7e <Protocol_Extract_Rx+0x92>
			Protocol_Process_Rx (sFrameRx->Header.Bits.DataType_u8, pData + 9, Length - 9);
 8008a6c:	3909      	subs	r1, #9
 8008a6e:	b2ca      	uxtb	r2, r1
 8008a70:	0001      	movs	r1, r0
 8008a72:	7818      	ldrb	r0, [r3, #0]
 8008a74:	3109      	adds	r1, #9
 8008a76:	0680      	lsls	r0, r0, #26
 8008a78:	0f40      	lsrs	r0, r0, #29
 8008a7a:	f7ff fee7 	bl	800884c <Protocol_Process_Rx>
}
 8008a7e:	0020      	movs	r0, r4
 8008a80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					return FALSE;
 8008a82:	2400      	movs	r4, #0
 8008a84:	e7fb      	b.n	8008a7e <Protocol_Extract_Rx+0x92>
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	200000c0 	.word	0x200000c0
 8008a8c:	2000111c 	.word	0x2000111c

08008a90 <Protocol_Packet_Header>:

uint8_t Protocol_Packet_Header (LoRaFrame_t *pFrame, uint8_t RespondType, uint8_t DataType)
{
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8008a90:	2338      	movs	r3, #56	; 0x38
 8008a92:	00d2      	lsls	r2, r2, #3
 8008a94:	401a      	ands	r2, r3
 8008a96:	3b31      	subs	r3, #49	; 0x31
 8008a98:	4019      	ands	r1, r3
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	2140      	movs	r1, #64	; 0x40
{
 8008a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	pFrame->Header.Bits.DataType_u8 = DataType;
	pFrame->Header.Bits.ACK_u8 = sCtrlLora.CtrlACK_u8;
 8008aa0:	4c0e      	ldr	r4, [pc, #56]	; (8008adc <Protocol_Packet_Header+0x4c>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8008aa2:	7823      	ldrb	r3, [r4, #0]
 8008aa4:	019b      	lsls	r3, r3, #6
 8008aa6:	400b      	ands	r3, r1
 8008aa8:	431a      	orrs	r2, r3
		uint32_t NETID_u32 = 0;
		uint8_t i = 0;

		for (i = 0; i < 4; i++)
		{
			DCUID_u32 = (DCUID_u32 << 8) + *(sModem.sDCU_id.Data_a8 + i);
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <Protocol_Packet_Header+0x50>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8008aac:	7002      	strb	r2, [r0, #0]
			DCUID_u32 = (DCUID_u32 << 8) + *(sModem.sDCU_id.Data_a8 + i);
 8008aae:	681d      	ldr	r5, [r3, #0]
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 8008ab0:	689e      	ldr	r6, [r3, #8]
 8008ab2:	2300      	movs	r3, #0
		uint32_t NETID_u32 = 0;
 8008ab4:	001a      	movs	r2, r3
		uint32_t DCUID_u32 = 0;
 8008ab6:	0019      	movs	r1, r3
			DCUID_u32 = (DCUID_u32 << 8) + *(sModem.sDCU_id.Data_a8 + i);
 8008ab8:	5cef      	ldrb	r7, [r5, r3]
 8008aba:	0209      	lsls	r1, r1, #8
 8008abc:	1879      	adds	r1, r7, r1
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 8008abe:	5cf7      	ldrb	r7, [r6, r3]
 8008ac0:	0212      	lsls	r2, r2, #8
		for (i = 0; i < 4; i++)
 8008ac2:	3301      	adds	r3, #1
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 8008ac4:	18ba      	adds	r2, r7, r2
		for (i = 0; i < 4; i++)
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d1f6      	bne.n	8008ab8 <Protocol_Packet_Header+0x28>

		pFrame->DevAddr = DCUID_u32;
		pFrame->NetAddr = NETID_u32;
	#endif

	sCtrlLora.CtrlACK_u8 = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	7023      	strb	r3, [r4, #0]
		pFrame->DevAddr = DCUID_u32;
 8008ace:	6041      	str	r1, [r0, #4]
		pFrame->NetAddr = NETID_u32;
 8008ad0:	6082      	str	r2, [r0, #8]

    if (pFrame->Header.Bits.ACK_u8 != 0)
 8008ad2:	7800      	ldrb	r0, [r0, #0]
 8008ad4:	0640      	lsls	r0, r0, #25
    {
        return 1;
    }
    return 0;
}
 8008ad6:	0fc0      	lsrs	r0, r0, #31
 8008ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	2000111c 	.word	0x2000111c
 8008ae0:	200000c0 	.word	0x200000c0

08008ae4 <MX_ADC_Init>:
		/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)*/
		hadc.Instance = ADC1;
		hadc.Init.OversamplingMode = DISABLE;
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
		hadc.Init.Resolution = ADC_RESOLUTION_12B;
		hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8008ae4:	2207      	movs	r2, #7
{
 8008ae6:	b510      	push	{r4, lr}
		hadc.Init.OversamplingMode = DISABLE;
 8008ae8:	4c15      	ldr	r4, [pc, #84]	; (8008b40 <MX_ADC_Init+0x5c>)
 8008aea:	2300      	movs	r3, #0
		hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8008aec:	63a2      	str	r2, [r4, #56]	; 0x38
		hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
		hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
		hadc.Init.ContinuousConvMode = DISABLE;
		hadc.Init.DiscontinuousConvMode = DISABLE;
		hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
		hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008aee:	22c2      	movs	r2, #194	; 0xc2
 8008af0:	32ff      	adds	r2, #255	; 0xff
 8008af2:	6262      	str	r2, [r4, #36]	; 0x24
		hadc.Init.DMAContinuousRequests = DISABLE;
 8008af4:	0022      	movs	r2, r4
		hadc.Instance = ADC1;
 8008af6:	4913      	ldr	r1, [pc, #76]	; (8008b44 <MX_ADC_Init+0x60>)
		hadc.Init.DMAContinuousRequests = DISABLE;
 8008af8:	322c      	adds	r2, #44	; 0x2c
 8008afa:	7013      	strb	r3, [r2, #0]
		hadc.Instance = ADC1;
 8008afc:	6021      	str	r1, [r4, #0]
		hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
		hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
		hadc.Init.LowPowerAutoWait = DISABLE;
		hadc.Init.LowPowerFrequencyMode = ENABLE;
 8008afe:	2201      	movs	r2, #1
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008b00:	21c0      	movs	r1, #192	; 0xc0
		hadc.Init.LowPowerFrequencyMode = ENABLE;
 8008b02:	6362      	str	r2, [r4, #52]	; 0x34
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008b04:	0609      	lsls	r1, r1, #24
		hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b06:	6122      	str	r2, [r4, #16]
		hadc.Init.LowPowerAutoPowerOff = DISABLE;
		if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008b08:	0020      	movs	r0, r4
		hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b0a:	3203      	adds	r2, #3
		hadc.Init.ContinuousConvMode = DISABLE;
 8008b0c:	8423      	strh	r3, [r4, #32]
		hadc.Init.OversamplingMode = DISABLE;
 8008b0e:	63e3      	str	r3, [r4, #60]	; 0x3c
		hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b10:	62a3      	str	r3, [r4, #40]	; 0x28
		hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008b12:	6323      	str	r3, [r4, #48]	; 0x30
		hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008b14:	6061      	str	r1, [r4, #4]
		hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b16:	60a3      	str	r3, [r4, #8]
		hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b18:	60e3      	str	r3, [r4, #12]
		hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b1a:	6162      	str	r2, [r4, #20]
		hadc.Init.LowPowerAutoWait = DISABLE;
 8008b1c:	61a3      	str	r3, [r4, #24]
		hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008b1e:	61e3      	str	r3, [r4, #28]
		if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008b20:	f7fa f8f8 	bl	8002d14 <HAL_ADC_Init>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d001      	beq.n	8008b2c <MX_ADC_Init+0x48>
		{
		Error_Handler();
 8008b28:	f7f9 fa7c 	bl	8002024 <Error_Handler>
		}

		if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	0020      	movs	r0, r4
 8008b30:	f7fa fb1e 	bl	8003170 <HAL_ADCEx_Calibration_Start>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d001      	beq.n	8008b3c <MX_ADC_Init+0x58>
		{
		Error_Handler();
 8008b38:	f7f9 fa74 	bl	8002024 <Error_Handler>
		}
	#endif
}
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	20001120 	.word	0x20001120
 8008b44:	40012400 	.word	0x40012400

08008b48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	0004      	movs	r4, r0
 8008b4c:	b086      	sub	sp, #24
	#ifdef DEVICE_TYPE_STATION
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b4e:	2214      	movs	r2, #20
 8008b50:	2100      	movs	r1, #0
 8008b52:	a801      	add	r0, sp, #4
 8008b54:	f001 f9ea 	bl	8009f2c <memset>
		if(adcHandle->Instance==ADC1)
 8008b58:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <HAL_ADC_MspInit+0x4c>)
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d116      	bne.n	8008b8e <HAL_ADC_MspInit+0x46>
		{
			__HAL_RCC_ADC1_CLK_ENABLE();
 8008b60:	2280      	movs	r2, #128	; 0x80
 8008b62:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <HAL_ADC_MspInit+0x50>)
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	6b59      	ldr	r1, [r3, #52]	; 0x34
			__HAL_RCC_GPIOA_CLK_ENABLE();
		    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
		    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		    GPIO_InitStruct.Pull = GPIO_NOPULL;
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b68:	20a0      	movs	r0, #160	; 0xa0
			__HAL_RCC_ADC1_CLK_ENABLE();
 8008b6a:	430a      	orrs	r2, r1
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b6c:	2101      	movs	r1, #1
			__HAL_RCC_ADC1_CLK_ENABLE();
 8008b6e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b72:	05c0      	lsls	r0, r0, #23
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b74:	430a      	orrs	r2, r1
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	400b      	ands	r3, r1
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	9b00      	ldr	r3, [sp, #0]
		    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008b80:	231c      	movs	r3, #28
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b82:	a901      	add	r1, sp, #4
		    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008b84:	9301      	str	r3, [sp, #4]
		    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b86:	3b19      	subs	r3, #25
 8008b88:	9302      	str	r3, [sp, #8]
		    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b8a:	f7fa fd53 	bl	8003634 <HAL_GPIO_Init>
		}
	#endif
}
 8008b8e:	b006      	add	sp, #24
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	40012400 	.word	0x40012400
 8008b98:	40021000 	.word	0x40021000

08008b9c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
	#ifdef DEVICE_TYPE_STATION
	#else
	if(adcHandle->Instance==ADC1)
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <HAL_ADC_MspDeInit+0x44>)
 8008b9e:	6802      	ldr	r2, [r0, #0]
{
 8008ba0:	b510      	push	{r4, lr}
	if(adcHandle->Instance==ADC1)
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d11b      	bne.n	8008bde <HAL_ADC_MspDeInit+0x42>
	{
		__HAL_RCC_ADC1_FORCE_RESET();
 8008ba6:	2280      	movs	r2, #128	; 0x80
		__HAL_RCC_ADC1_RELEASE_RESET();
		__HAL_RCC_ADC1_CLK_DISABLE();
	    HAL_GPIO_DeInit(ADC_VNA_GPIO_Port, ADC_VNA_Pin);
 8008ba8:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_ADC1_FORCE_RESET();
 8008baa:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <HAL_ADC_MspDeInit+0x48>)
 8008bac:	0092      	lsls	r2, r2, #2
 8008bae:	6a59      	ldr	r1, [r3, #36]	; 0x24
	    HAL_GPIO_DeInit(ADC_VNA_GPIO_Port, ADC_VNA_Pin);
 8008bb0:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_ADC1_FORCE_RESET();
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RCC_ADC1_RELEASE_RESET();
 8008bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb8:	490b      	ldr	r1, [pc, #44]	; (8008be8 <HAL_ADC_MspDeInit+0x4c>)
 8008bba:	400a      	ands	r2, r1
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RCC_ADC1_CLK_DISABLE();
 8008bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc0:	400a      	ands	r2, r1
 8008bc2:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_GPIO_DeInit(ADC_VNA_GPIO_Port, ADC_VNA_Pin);
 8008bc4:	2104      	movs	r1, #4
 8008bc6:	f7fa fdf9 	bl	80037bc <HAL_GPIO_DeInit>
	    HAL_GPIO_DeInit(ADC_VP_GPIO_Port, ADC_VP_Pin);
 8008bca:	20a0      	movs	r0, #160	; 0xa0
 8008bcc:	2108      	movs	r1, #8
 8008bce:	05c0      	lsls	r0, r0, #23
 8008bd0:	f7fa fdf4 	bl	80037bc <HAL_GPIO_DeInit>
	    HAL_GPIO_DeInit(ADC_BAT_GPIO_Port, ADC_BAT_Pin);
 8008bd4:	20a0      	movs	r0, #160	; 0xa0
 8008bd6:	2110      	movs	r1, #16
 8008bd8:	05c0      	lsls	r0, r0, #23
 8008bda:	f7fa fdef 	bl	80037bc <HAL_GPIO_DeInit>
	}
	#endif
}
 8008bde:	bd10      	pop	{r4, pc}
 8008be0:	40012400 	.word	0x40012400
 8008be4:	40021000 	.word	0x40021000
 8008be8:	fffffdff 	.word	0xfffffdff

08008bec <MX_GPIO_Init>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* Exported functions --------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 8008bec:	b5f0      	push	{r4, r5, r6, r7, lr}
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bee:	2501      	movs	r5, #1
{
 8008bf0:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf2:	2214      	movs	r2, #20
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	a803      	add	r0, sp, #12
 8008bf8:	f001 f998 	bl	8009f2c <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008bfc:	2202      	movs	r2, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bfe:	4c24      	ldr	r4, [pc, #144]	; (8008c90 <MX_GPIO_Init+0xa4>)

		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8008c00:	4f24      	ldr	r7, [pc, #144]	; (8008c94 <MX_GPIO_Init+0xa8>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8008c04:	0038      	movs	r0, r7
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c06:	432b      	orrs	r3, r5
 8008c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8008c0c:	2164      	movs	r1, #100	; 0x64
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c0e:	402b      	ands	r3, r5
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	9b00      	ldr	r3, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

		GPIO_InitStruct.Pin = RTC_INT_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c16:	2600      	movs	r6, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c1e:	4013      	ands	r3, r2
 8008c20:	9301      	str	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8008c22:	002a      	movs	r2, r5
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008c24:	9b01      	ldr	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOB, RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8008c26:	f7fa fe4f 	bl	80038c8 <HAL_GPIO_WritePin>
		HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8008c2a:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <MX_GPIO_Init+0xac>)
		HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8008c2e:	a903      	add	r1, sp, #12
 8008c30:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c32:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pin = RTC_INT_Pin;
 8008c34:	9503      	str	r5, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c36:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8008c38:	f7fa fcfc 	bl	8003634 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8008c3c:	2364      	movs	r3, #100	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c3e:	0038      	movs	r0, r7
 8008c40:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = RTC_RST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8008c42:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c44:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c46:	9605      	str	r6, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c48:	9606      	str	r6, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c4a:	f7fa fcf3 	bl	8003634 <HAL_GPIO_Init>

		__HAL_RCC_ADC1_CLK_ENABLE();
 8008c4e:	2380      	movs	r3, #128	; 0x80
 8008c50:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4313      	orrs	r3, r2
 8008c56:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c5a:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c5c:	432b      	orrs	r3, r5
 8008c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c62:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c64:	402b      	ands	r3, r5
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008c6a:	231c      	movs	r3, #28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c6c:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
 8008c6e:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c70:	3b19      	subs	r3, #25
 8008c72:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c74:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c76:	f7fa fcdd 	bl	8003634 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8008c7a:	0032      	movs	r2, r6
 8008c7c:	0029      	movs	r1, r5
 8008c7e:	2007      	movs	r0, #7
 8008c80:	f7fa fac6 	bl	8003210 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008c84:	2007      	movs	r0, #7
 8008c86:	f7fa faed 	bl	8003264 <HAL_NVIC_EnableIRQ>
		#endif
}
 8008c8a:	b009      	add	sp, #36	; 0x24
 8008c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	40021000 	.word	0x40021000
 8008c94:	50000400 	.word	0x50000400
 8008c98:	10110000 	.word	0x10110000

08008c9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
 8008c9c:	480b      	ldr	r0, [pc, #44]	; (8008ccc <MX_I2C1_Init+0x30>)
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <MX_I2C1_Init+0x34>)
{
 8008ca0:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8008ca2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000708;
 8008ca4:	23e1      	movs	r3, #225	; 0xe1
 8008ca6:	00db      	lsls	r3, r3, #3
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008ca8:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00000708;
 8008caa:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008cac:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008cae:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8008cb0:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008cb2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008cb4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008cb6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008cb8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008cba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008cbc:	f7fa fe20 	bl	8003900 <HAL_I2C_Init>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8008cc4:	f7f9 f9ae 	bl	8002024 <Error_Handler>
  }
}
 8008cc8:	bd10      	pop	{r4, pc}
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	2000117c 	.word	0x2000117c
 8008cd0:	40005400 	.word	0x40005400

08008cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	0004      	movs	r4, r0
 8008cd8:	b086      	sub	sp, #24

	#ifdef DEVICE_TYPE_STATION
	#else
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cda:	2214      	movs	r2, #20
 8008cdc:	2100      	movs	r1, #0
 8008cde:	a801      	add	r0, sp, #4
 8008ce0:	f001 f924 	bl	8009f2c <memset>
	#endif

  if(i2cHandle->Instance==I2C1)
 8008ce4:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <HAL_I2C_MspInit+0x54>)
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d11a      	bne.n	8008d22 <HAL_I2C_MspInit+0x4e>
  {
	#ifdef DEVICE_TYPE_STATION
	#else
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008cec:	2202      	movs	r2, #2
 8008cee:	4c0f      	ldr	r4, [pc, #60]	; (8008d2c <HAL_I2C_MspInit+0x58>)
		GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cf0:	480f      	ldr	r0, [pc, #60]	; (8008d30 <HAL_I2C_MspInit+0x5c>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008cf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cf4:	a901      	add	r1, sp, #4
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	9b00      	ldr	r3, [sp, #0]
		GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8008d02:	23c0      	movs	r3, #192	; 0xc0
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d08:	2312      	movs	r3, #18
 8008d0a:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d0c:	3b0f      	subs	r3, #15
 8008d0e:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008d10:	3301      	adds	r3, #1
 8008d12:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d14:	f7fa fc8e 	bl	8003634 <HAL_GPIO_Init>

		__HAL_RCC_I2C1_CLK_ENABLE();
 8008d18:	2380      	movs	r3, #128	; 0x80
 8008d1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d1c:	039b      	lsls	r3, r3, #14
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	63a3      	str	r3, [r4, #56]	; 0x38
	#endif
  }
}
 8008d22:	b006      	add	sp, #24
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	40005400 	.word	0x40005400
 8008d2c:	40021000 	.word	0x40021000
 8008d30:	50000400 	.word	0x50000400

08008d34 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <HAL_I2C_MspDeInit+0x2c>)
 8008d36:	6802      	ldr	r2, [r0, #0]
{
 8008d38:	b510      	push	{r4, lr}
  if(i2cHandle->Instance==I2C1)
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d10e      	bne.n	8008d5c <HAL_I2C_MspDeInit+0x28>
  {
	#ifdef DEVICE_TYPE_STATION
	#else
		__HAL_RCC_I2C1_CLK_DISABLE();
 8008d3e:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <HAL_I2C_MspDeInit+0x30>)
 8008d40:	4909      	ldr	r1, [pc, #36]	; (8008d68 <HAL_I2C_MspDeInit+0x34>)
 8008d42:	6b93      	ldr	r3, [r2, #56]	; 0x38
		/**I2C1 GPIO Configuration
		PB8     ------> I2C1_SCL
		PB9     ------> I2C1_SDA
		*/
		HAL_GPIO_DeInit(RTC_SCL_GPIO_Port, RTC_SCL_Pin);
 8008d44:	4809      	ldr	r0, [pc, #36]	; (8008d6c <HAL_I2C_MspDeInit+0x38>)
		__HAL_RCC_I2C1_CLK_DISABLE();
 8008d46:	400b      	ands	r3, r1
		HAL_GPIO_DeInit(RTC_SCL_GPIO_Port, RTC_SCL_Pin);
 8008d48:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_I2C1_CLK_DISABLE();
 8008d4a:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_GPIO_DeInit(RTC_SCL_GPIO_Port, RTC_SCL_Pin);
 8008d4c:	0049      	lsls	r1, r1, #1
 8008d4e:	f7fa fd35 	bl	80037bc <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(RTC_SDA_GPIO_Port, RTC_SDA_Pin);
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	4805      	ldr	r0, [pc, #20]	; (8008d6c <HAL_I2C_MspDeInit+0x38>)
 8008d56:	0089      	lsls	r1, r1, #2
 8008d58:	f7fa fd30 	bl	80037bc <HAL_GPIO_DeInit>
	#endif
  }
}
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	40005400 	.word	0x40005400
 8008d64:	40021000 	.word	0x40021000
 8008d68:	ffdfffff 	.word	0xffdfffff
 8008d6c:	50000400 	.word	0x50000400

08008d70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart2_tx;

void MX_USART1_UART_Init(void)
{
	huart1.Instance = USART1;
 8008d70:	480b      	ldr	r0, [pc, #44]	; (8008da0 <MX_USART1_UART_Init+0x30>)
 8008d72:	4b0c      	ldr	r3, [pc, #48]	; (8008da4 <MX_USART1_UART_Init+0x34>)
{
 8008d74:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 8008d76:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8008d78:	23e1      	movs	r3, #225	; 0xe1
 8008d7a:	025b      	lsls	r3, r3, #9
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008d7c:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 8008d7e:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d80:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008d82:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d84:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8008d86:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8008d88:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d8a:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d8c:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d8e:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d90:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d92:	f7fc fd87 	bl	80058a4 <HAL_UART_Init>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d001      	beq.n	8008d9e <MX_USART1_UART_Init+0x2e>
	{
		Error_Handler();
 8008d9a:	f7f9 f943 	bl	8002024 <Error_Handler>
	}
}
 8008d9e:	bd10      	pop	{r4, pc}
 8008da0:	200012dc 	.word	0x200012dc
 8008da4:	40013800 	.word	0x40013800

08008da8 <HAL_UART_MspInit>:
		Error_Handler();
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8008da8:	b510      	push	{r4, lr}
 8008daa:	0004      	movs	r4, r0
 8008dac:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dae:	2214      	movs	r2, #20
 8008db0:	2100      	movs	r1, #0
 8008db2:	a802      	add	r0, sp, #8
 8008db4:	f001 f8ba 	bl	8009f2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008db8:	2224      	movs	r2, #36	; 0x24
 8008dba:	2100      	movs	r1, #0
 8008dbc:	a807      	add	r0, sp, #28
 8008dbe:	f001 f8b5 	bl	8009f2c <memset>

  if(uartHandle->Instance==USART1)
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	4a33      	ldr	r2, [pc, #204]	; (8008e94 <HAL_UART_MspInit+0xec>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d130      	bne.n	8008e2c <HAL_UART_MspInit+0x84>
  {
	    __HAL_RCC_USART1_CLK_ENABLE();
 8008dca:	2280      	movs	r2, #128	; 0x80
 8008dcc:	4b32      	ldr	r3, [pc, #200]	; (8008e98 <HAL_UART_MspInit+0xf0>)
 8008dce:	01d2      	lsls	r2, r2, #7
 8008dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();

	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dd2:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART1_CLK_ENABLE();
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008dd8:	2201      	movs	r2, #1
 8008dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ddc:	4311      	orrs	r1, r2
 8008dde:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008de2:	9207      	str	r2, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008de4:	4013      	ands	r3, r2
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	9b00      	ldr	r3, [sp, #0]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8008dea:	920a      	str	r2, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dec:	f7fb fa66 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d001      	beq.n	8008df8 <HAL_UART_MspInit+0x50>
	    {
	    	Error_Handler();
 8008df4:	f7f9 f916 	bl	8002024 <Error_Handler>
		PA10     ------> USART1_RX
		*/
		#ifdef DEVICE_TYPE_STATION
				GPIO_InitStruct.Pin = MCU_TX_Pin|MCU_RX_Pin;
		#else
				GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008df8:	23c0      	movs	r3, #192	; 0xc0
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	9302      	str	r3, [sp, #8]
		#endif
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dfe:	2302      	movs	r3, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e00:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e02:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e04:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e06:	3301      	adds	r3, #1
 8008e08:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0a:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008e0c:	3301      	adds	r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0e:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008e10:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e12:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e14:	f7fa fc0e 	bl	8003634 <HAL_GPIO_Init>

	    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8008e18:	201b      	movs	r0, #27
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	0021      	movs	r1, r4
 8008e1e:	f7fa f9f7 	bl	8003210 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e22:	201b      	movs	r0, #27
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008e24:	f7fa fa1e 	bl	8003264 <HAL_NVIC_EnableIRQ>
//	    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
//	#else
//	#endif
  }
}
 8008e28:	b010      	add	sp, #64	; 0x40
 8008e2a:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <HAL_UART_MspInit+0xf4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d1fa      	bne.n	8008e28 <HAL_UART_MspInit+0x80>
	    __HAL_RCC_USART2_CLK_ENABLE();
 8008e32:	2280      	movs	r2, #128	; 0x80
 8008e34:	4b18      	ldr	r3, [pc, #96]	; (8008e98 <HAL_UART_MspInit+0xf0>)
 8008e36:	0292      	lsls	r2, r2, #10
 8008e38:	6b99      	ldr	r1, [r3, #56]	; 0x38
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e3a:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART2_CLK_ENABLE();
 8008e3c:	430a      	orrs	r2, r1
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3e:	2101      	movs	r1, #1
	    __HAL_RCC_USART2_CLK_ENABLE();
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e44:	430a      	orrs	r2, r1
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	400b      	ands	r3, r1
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	9b01      	ldr	r3, [sp, #4]
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008e50:	2302      	movs	r3, #2
 8008e52:	9307      	str	r3, [sp, #28]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8008e54:	18db      	adds	r3, r3, r3
 8008e56:	930a      	str	r3, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e58:	f7fb fa30 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d001      	beq.n	8008e64 <HAL_UART_MspInit+0xbc>
	    	Error_Handler();
 8008e60:	f7f9 f8e0 	bl	8002024 <Error_Handler>
	    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008e64:	23c0      	movs	r3, #192	; 0xc0
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e6a:	2302      	movs	r3, #2
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e6c:	20a0      	movs	r0, #160	; 0xa0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e6e:	2400      	movs	r4, #0
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e70:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e72:	3301      	adds	r3, #1
 8008e74:	9305      	str	r3, [sp, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e76:	a902      	add	r1, sp, #8
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8008e78:	3301      	adds	r3, #1
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7a:	05c0      	lsls	r0, r0, #23
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8008e7c:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e7e:	9404      	str	r4, [sp, #16]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e80:	f7fa fbd8 	bl	8003634 <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8008e84:	201c      	movs	r0, #28
 8008e86:	2201      	movs	r2, #1
 8008e88:	0021      	movs	r1, r4
 8008e8a:	f7fa f9c1 	bl	8003210 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008e8e:	201c      	movs	r0, #28
 8008e90:	e7c8      	b.n	8008e24 <HAL_UART_MspInit+0x7c>
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	40013800 	.word	0x40013800
 8008e98:	40021000 	.word	0x40021000
 8008e9c:	40004400 	.word	0x40004400

08008ea0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if(uartHandle->Instance==USART1)
 8008ea0:	6803      	ldr	r3, [r0, #0]
 8008ea2:	4a11      	ldr	r2, [pc, #68]	; (8008ee8 <HAL_UART_MspDeInit+0x48>)
{
 8008ea4:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d10e      	bne.n	8008ec8 <HAL_UART_MspDeInit+0x28>
  {
		__HAL_RCC_USART1_CLK_DISABLE();
 8008eaa:	4a10      	ldr	r2, [pc, #64]	; (8008eec <HAL_UART_MspDeInit+0x4c>)
 8008eac:	4910      	ldr	r1, [pc, #64]	; (8008ef0 <HAL_UART_MspDeInit+0x50>)
 8008eae:	6b53      	ldr	r3, [r2, #52]	; 0x34
		PA10     ------> USART1_RX
		*/
//		#ifdef DEVICE_TYPE_STATION
//				HAL_GPIO_DeInit(GPIOA, MCU_TX_Pin|MCU_RX_Pin);
//		#else
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8008eb0:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_USART1_CLK_DISABLE();
 8008eb2:	400b      	ands	r3, r1
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8008eb4:	21c0      	movs	r1, #192	; 0xc0
 8008eb6:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_USART1_CLK_DISABLE();
 8008eb8:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8008eba:	00c9      	lsls	r1, r1, #3
 8008ebc:	f7fa fc7e 	bl	80037bc <HAL_GPIO_DeInit>
//		#endif
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8008ec0:	201b      	movs	r0, #27
	    /**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	    */
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8008ec2:	f7fa f9db 	bl	800327c <HAL_NVIC_DisableIRQ>
//	    HAL_DMA_DeInit(uartHandle->hdmatx);
//	#endif
  }
}
 8008ec6:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8008ec8:	4a0a      	ldr	r2, [pc, #40]	; (8008ef4 <HAL_UART_MspDeInit+0x54>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d1fb      	bne.n	8008ec6 <HAL_UART_MspDeInit+0x26>
	    __HAL_RCC_USART2_CLK_DISABLE();
 8008ece:	4a07      	ldr	r2, [pc, #28]	; (8008eec <HAL_UART_MspDeInit+0x4c>)
 8008ed0:	4909      	ldr	r1, [pc, #36]	; (8008ef8 <HAL_UART_MspDeInit+0x58>)
 8008ed2:	6b93      	ldr	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8008ed4:	20a0      	movs	r0, #160	; 0xa0
	    __HAL_RCC_USART2_CLK_DISABLE();
 8008ed6:	400b      	ands	r3, r1
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8008ed8:	21c0      	movs	r1, #192	; 0xc0
 8008eda:	05c0      	lsls	r0, r0, #23
	    __HAL_RCC_USART2_CLK_DISABLE();
 8008edc:	6393      	str	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8008ede:	00c9      	lsls	r1, r1, #3
 8008ee0:	f7fa fc6c 	bl	80037bc <HAL_GPIO_DeInit>
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8008ee4:	201c      	movs	r0, #28
 8008ee6:	e7ec      	b.n	8008ec2 <HAL_UART_MspDeInit+0x22>
 8008ee8:	40013800 	.word	0x40013800
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	ffffbfff 	.word	0xffffbfff
 8008ef4:	40004400 	.word	0x40004400
 8008ef8:	fffdffff 	.word	0xfffdffff

08008efc <fevent_active>:
 * @brief	Active 1 event len
 * @note	Cho event thuc hien luon
 */
uint8_t fevent_active(sEvent_struct *event_struct, uint8_t event_name)
{
	event_struct[event_name].e_status = 1;
 8008efc:	0109      	lsls	r1, r1, #4
 8008efe:	1841      	adds	r1, r0, r1
	event_struct[event_name].e_systick = 0;
 8008f00:	2300      	movs	r3, #0
	event_struct[event_name].e_status = 1;
 8008f02:	2001      	movs	r0, #1
 8008f04:	7048      	strb	r0, [r1, #1]
	event_struct[event_name].e_systick = 0;
 8008f06:	604b      	str	r3, [r1, #4]
	return 1;
}
 8008f08:	4770      	bx	lr

08008f0a <fevent_enable>:
/**
 * @brief	Enable 1 event len
 * @note	Cho phep mot event kich hoat sau period cua no
 */
uint8_t fevent_enable(sEvent_struct *event_struct, uint8_t event_name)
{
 8008f0a:	b570      	push	{r4, r5, r6, lr}
	event_struct[event_name].e_status = 1;
 8008f0c:	2501      	movs	r5, #1
 8008f0e:	010c      	lsls	r4, r1, #4
 8008f10:	1904      	adds	r4, r0, r4
 8008f12:	7065      	strb	r5, [r4, #1]
	event_struct[event_name].e_systick = HAL_GetTick();
 8008f14:	f7f9 fdfa 	bl	8002b0c <HAL_GetTick>
 8008f18:	6060      	str	r0, [r4, #4]
	return 1;
}
 8008f1a:	0028      	movs	r0, r5
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}

08008f1e <fevent_disable>:
/**
 * @brief	Disable 1 event
 */
uint8_t fevent_disable(sEvent_struct *event_struct, uint8_t event_name)
{
	event_struct[event_name].e_status = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	0109      	lsls	r1, r1, #4
 8008f22:	1840      	adds	r0, r0, r1
 8008f24:	7043      	strb	r3, [r0, #1]
	return 1;
}
 8008f26:	2001      	movs	r0, #1
 8008f28:	4770      	bx	lr

08008f2a <OnchipFlashWriteData>:
/* Exported functions --------------------------------------------------------*/
/**
 * @note	So luong bien truyen vao Phai la Boi cua 8
 */
HAL_StatusTypeDef	OnchipFlashWriteData (uint32_t andress, uint8_t	*data_address, uint32_t data_length)
{
 8008f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef   status = HAL_ERROR;

	temp_data_address = data_address;
	temp_write_address = andress;

	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	0014      	movs	r4, r2
{
 8008f30:	000f      	movs	r7, r1
	HAL_StatusTypeDef   status = HAL_ERROR;
 8008f32:	2501      	movs	r5, #1
{
 8008f34:	9001      	str	r0, [sp, #4]
	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 8008f36:	401c      	ands	r4, r3
 8008f38:	421a      	tst	r2, r3
 8008f3a:	d110      	bne.n	8008f5e <OnchipFlashWriteData+0x34>
	{
		//Calculate number of word to write
		writetime = data_length / FLASH_BYTE_WRTIE;
 8008f3c:	0893      	lsrs	r3, r2, #2
 8008f3e:	9300      	str	r3, [sp, #0]
		//Unlock flash
		HAL_FLASH_Unlock();
 8008f40:	f7fa facc 	bl	80034dc <HAL_FLASH_Unlock>
		//Wait for last operation to be completed
        FLASH_WaitForLastOperation(1000);
 8008f44:	20fa      	movs	r0, #250	; 0xfa
 8008f46:	0080      	lsls	r0, r0, #2
 8008f48:	f7fa fb08 	bl	800355c <FLASH_WaitForLastOperation>
	temp_data_address = data_address;
 8008f4c:	003e      	movs	r6, r7
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	1bd9      	subs	r1, r3, r7
		//Change bytes order then write
		for (i = 0; i < writetime; i++)
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	1871      	adds	r1, r6, r1
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	d803      	bhi.n	8008f62 <OnchipFlashWriteData+0x38>
				break;
			temp_write_address = temp_write_address + FLASH_BYTE_WRTIE;
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
		}
		//Lock flash
		HAL_FLASH_Lock();
 8008f5a:	f7fa faf1 	bl	8003540 <HAL_FLASH_Lock>
	}
	return status;
}
 8008f5e:	0028      	movs	r0, r5
 8008f60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 8008f62:	2002      	movs	r0, #2
			WriteData = *(__IO uint32_t*)(temp_data_address);
 8008f64:	6832      	ldr	r2, [r6, #0]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 8008f66:	f7fa fb33 	bl	80035d0 <HAL_FLASH_Program>
 8008f6a:	0005      	movs	r5, r0
			if (status == HAL_ERROR)
 8008f6c:	2801      	cmp	r0, #1
 8008f6e:	d0f4      	beq.n	8008f5a <OnchipFlashWriteData+0x30>
		for (i = 0; i < writetime; i++)
 8008f70:	3401      	adds	r4, #1
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
 8008f72:	3604      	adds	r6, #4
		for (i = 0; i < writetime; i++)
 8008f74:	b2a4      	uxth	r4, r4
 8008f76:	e7ea      	b.n	8008f4e <OnchipFlashWriteData+0x24>

08008f78 <OnchipFlashPageErase>:
	}
	return status;
}

HAL_StatusTypeDef OnchipFlashPageErase (uint32_t pageaddress)
{
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	0004      	movs	r4, r0
	HAL_StatusTypeDef status = HAL_ERROR;
    //Unlock flash
    status = HAL_FLASH_Unlock();
 8008f7c:	f7fa faae 	bl	80034dc <HAL_FLASH_Unlock>
 8008f80:	0005      	movs	r5, r0
    //Wait for last operation to be completed
    FLASH_WaitForLastOperation(1000);
 8008f82:	20fa      	movs	r0, #250	; 0xfa
 8008f84:	0080      	lsls	r0, r0, #2
 8008f86:	f7fa fae9 	bl	800355c <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation(1000);
        //Disable the PER Bit
        CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
    #else
        //If the previous operation is completed, proceed to erase the page
        if (status == HAL_OK)
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	d102      	bne.n	8008f94 <OnchipFlashPageErase+0x1c>
            FLASH_PageErase(pageaddress);
 8008f8e:	0020      	movs	r0, r4
 8008f90:	f7fa fb3a 	bl	8003608 <FLASH_PageErase>
        //Wait for last operation to be completed
        status = FLASH_WaitForLastOperation(1000);
 8008f94:	20fa      	movs	r0, #250	; 0xfa
 8008f96:	0080      	lsls	r0, r0, #2
 8008f98:	f7fa fae0 	bl	800355c <FLASH_WaitForLastOperation>
        //Disable the PER Bit
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <OnchipFlashPageErase+0x40>)
 8008f9e:	4907      	ldr	r1, [pc, #28]	; (8008fbc <OnchipFlashPageErase+0x44>)
 8008fa0:	685a      	ldr	r2, [r3, #4]
        status = FLASH_WaitForLastOperation(1000);
 8008fa2:	0004      	movs	r4, r0
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8008fa4:	400a      	ands	r2, r1
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8008fa6:	2108      	movs	r1, #8
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8008fa8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	438a      	bics	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
    #endif
    HAL_FLASH_Lock();
 8008fb0:	f7fa fac6 	bl	8003540 <HAL_FLASH_Lock>
	return status;
}
 8008fb4:	0020      	movs	r0, r4
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	40022000 	.word	0x40022000
 8008fbc:	fffffdff 	.word	0xfffffdff

08008fc0 <Erase_Firmware>:

void Erase_Firmware(uint32_t Add_Flash_update, uint32_t Total_page)
{
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	0006      	movs	r6, r0
 8008fc4:	000d      	movs	r5, r1
	uint32_t var;
	for (var = 0; var < Total_page; var++)
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	42ac      	cmp	r4, r5
 8008fca:	d100      	bne.n	8008fce <Erase_Firmware+0xe>
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
}
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
 8008fce:	01e0      	lsls	r0, r4, #7
 8008fd0:	1980      	adds	r0, r0, r6
 8008fd2:	f7ff ffd1 	bl	8008f78 <OnchipFlashPageErase>
	for (var = 0; var < Total_page; var++)
 8008fd6:	3401      	adds	r4, #1
 8008fd8:	e7f6      	b.n	8008fc8 <Erase_Firmware+0x8>

08008fda <OnchipFlashReadData>:
	uint16_t    i=0;
	uint32_t    temp_address;
	uint8_t     *temp_destination;
	temp_address = address;
	temp_destination = destination;
	for (i = 0; i < length_inByte; i++)
 8008fda:	2300      	movs	r3, #0
{
 8008fdc:	b510      	push	{r4, lr}
	for (i = 0; i < length_inByte; i++)
 8008fde:	b29c      	uxth	r4, r3
 8008fe0:	42a2      	cmp	r2, r4
 8008fe2:	d800      	bhi.n	8008fe6 <OnchipFlashReadData+0xc>
	{
		*temp_destination = *(__IO uint8_t*)temp_address;
		temp_destination++;
		temp_address++;
	}
}
 8008fe4:	bd10      	pop	{r4, pc}
		*temp_destination = *(__IO uint8_t*)temp_address;
 8008fe6:	18c4      	adds	r4, r0, r3
 8008fe8:	7824      	ldrb	r4, [r4, #0]
 8008fea:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < length_inByte; i++)
 8008fec:	3301      	adds	r3, #1
 8008fee:	e7f6      	b.n	8008fde <OnchipFlashReadData+0x4>

08008ff0 <PWR_EnterStopMode>:

/**
 * @brief	Ham xu ly lpm trong chip
 */
void PWR_EnterStopMode(void)
{
 8008ff0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008ff6:	b672      	cpsid	i
    UTILS_ENTER_CRITICAL_SECTION();
    if (sLPMFeatureHandler->LPM_Deinit_Before_IRQ_Handle!= NULL)
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <PWR_EnterStopMode+0x34>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d000      	beq.n	8009004 <PWR_EnterStopMode+0x14>
        sLPMFeatureHandler->LPM_Deinit_Before_IRQ_Handle();
 8009002:	4798      	blx	r3

	#if defined (STM32L072xx) || defined (STM32L082xx)
		/*clear wake up flag*/
		SET_BIT(PWR->CR, PWR_CR_CWUF);
 8009004:	2304      	movs	r3, #4
 8009006:	4a08      	ldr	r2, [pc, #32]	; (8009028 <PWR_EnterStopMode+0x38>)
 8009008:	6811      	ldr	r1, [r2, #0]
 800900a:	430b      	orrs	r3, r1
 800900c:	6013      	str	r3, [r2, #0]

		HAL_PWREx_EnableUltraLowPower();
 800900e:	f7fa fd81 	bl	8003b14 <HAL_PWREx_EnableUltraLowPower>

		HAL_PWREx_EnableFastWakeUp();
 8009012:	f7fa fd6b 	bl	8003aec <HAL_PWREx_EnableFastWakeUp>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009016:	f384 8810 	msr	PRIMASK, r4

		UTILS_EXIT_CRITICAL_SECTION();
		/* Enter Stop Mode */
		HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 800901a:	2101      	movs	r1, #1
 800901c:	0008      	movs	r0, r1
 800901e:	f7fa fd29 	bl	8003a74 <HAL_PWR_EnterSTOPMode>
	#endif
}
 8009022:	bd10      	pop	{r4, pc}
 8009024:	20001360 	.word	0x20001360
 8009028:	40007000 	.word	0x40007000

0800902c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800902c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009032:	b672      	cpsid	i
	/* Disable IRQ while the MCU is not running on HSI */
	UTILS_ENTER_CRITICAL_SECTION();

	#if defined (STM32L072xx) || defined (STM32L082xx)
		HAL_PWREx_DisableUltraLowPower();
 8009034:	f7fa fd78 	bl	8003b28 <HAL_PWREx_DisableUltraLowPower>
		HAL_PWREx_DisableFastWakeUp();
 8009038:	f7fa fd62 	bl	8003b00 <HAL_PWREx_DisableFastWakeUp>
		{
		}
	#else
		/* After wake-up from STOP reconfigure the system clock */
		/* Enable HSI */
		__HAL_RCC_MSI_ENABLE();
 800903c:	2280      	movs	r2, #128	; 0x80
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <PWR_ExitStopMode+0x48>)
 8009040:	0052      	lsls	r2, r2, #1
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	601a      	str	r2, [r3, #0]

		/* Wait till HSI is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8009048:	2280      	movs	r2, #128	; 0x80
 800904a:	0092      	lsls	r2, r2, #2
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	4211      	tst	r1, r2
 8009050:	d0fc      	beq.n	800904c <PWR_ExitStopMode+0x20>
		{
		}

		/* Select PLL as system clock source */
		__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);
 8009052:	2103      	movs	r1, #3
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	438a      	bics	r2, r1
 8009058:	60da      	str	r2, [r3, #12]

		/* Wait till PLL is used as system clock source */
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800905a:	220c      	movs	r2, #12
 800905c:	68d9      	ldr	r1, [r3, #12]
 800905e:	4211      	tst	r1, r2
 8009060:	d1fc      	bne.n	800905c <PWR_ExitStopMode+0x30>
		{
		}
	#endif

    if (sLPMFeatureHandler->LPM_Init_Before_IRQ_Handle!= NULL)
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <PWR_ExitStopMode+0x4c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d000      	beq.n	800906e <PWR_ExitStopMode+0x42>
    {
        sLPMFeatureHandler->LPM_Init_Before_IRQ_Handle();
 800906c:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800906e:	f384 8810 	msr	PRIMASK, r4
    }
	UTILS_EXIT_CRITICAL_SECTION();
}
 8009072:	bd10      	pop	{r4, pc}
 8009074:	40021000 	.word	0x40021000
 8009078:	20001360 	.word	0x20001360

0800907c <PWR_EnterSleepMode>:
        sLPMFeatureHandler->LPM_Init_Peripheral();
    UTILS_EXIT_CRITICAL_SECTION();
}

void PWR_EnterSleepMode(void)
{
 800907c:	b510      	push	{r4, lr}
	HAL_SuspendTick();
 800907e:	f7f9 fd5d 	bl	8002b3c <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8009082:	2101      	movs	r1, #1
 8009084:	2000      	movs	r0, #0
 8009086:	f7fa fcbd 	bl	8003a04 <HAL_PWR_EnterSLEEPMode>
}
 800908a:	bd10      	pop	{r4, pc}

0800908c <UTIL_LPM_SetStopMode>:
	StopModeDisable = state;
 800908c:	4b01      	ldr	r3, [pc, #4]	; (8009094 <UTIL_LPM_SetStopMode+0x8>)
 800908e:	7118      	strb	r0, [r3, #4]
}
 8009090:	4770      	bx	lr
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	20001360 	.word	0x20001360

08009098 <UTIL_LPM_EnterLowPower>:
{
 8009098:	b570      	push	{r4, r5, r6, lr}
	if (StopModeDisable != LPM_FALSE)
 800909a:	4c0e      	ldr	r4, [pc, #56]	; (80090d4 <UTIL_LPM_EnterLowPower+0x3c>)
 800909c:	7923      	ldrb	r3, [r4, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <UTIL_LPM_EnterLowPower+0x14>
		UTIL_PowerDriver.EnterSleepMode();
 80090a2:	f7ff ffeb 	bl	800907c <PWR_EnterSleepMode>

void PWR_ExitSleepMode(void)
{
	HAL_ResumeTick();
 80090a6:	f7f9 fd51 	bl	8002b4c <HAL_ResumeTick>
}
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
        if (sLPMFeatureHandler->LPM_Deinit_Peripheral != NULL)
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d000      	beq.n	80090b6 <UTIL_LPM_EnterLowPower+0x1e>
            sLPMFeatureHandler->LPM_Deinit_Peripheral();
 80090b4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80090ba:	b672      	cpsid	i
		UTIL_PowerDriver.EnterStopMode();
 80090bc:	f7ff ff98 	bl	8008ff0 <PWR_EnterStopMode>
		UTIL_PowerDriver.ExitStopMode();
 80090c0:	f7ff ffb4 	bl	800902c <PWR_ExitStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	f385 8810 	msr	PRIMASK, r5
        if (sLPMFeatureHandler->LPM_Init_Peripheral != NULL)
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0ec      	beq.n	80090aa <UTIL_LPM_EnterLowPower+0x12>
            sLPMFeatureHandler->LPM_Init_Peripheral();
 80090d0:	4798      	blx	r3
}
 80090d2:	e7ea      	b.n	80090aa <UTIL_LPM_EnterLowPower+0x12>
 80090d4:	20001360 	.word	0x20001360

080090d8 <UTIL_LPM_Dis_Debug_STlink>:
}

void UTIL_LPM_Dis_Debug_STlink (void)
{
 80090d8:	b510      	push	{r4, lr}
	HAL_DBGMCU_DisableDBGSleepMode( );
 80090da:	f7f9 fd47 	bl	8002b6c <HAL_DBGMCU_DisableDBGSleepMode>
	HAL_DBGMCU_DisableDBGStopMode( );
 80090de:	f7f9 fd55 	bl	8002b8c <HAL_DBGMCU_DisableDBGStopMode>
	HAL_DBGMCU_DisableDBGStandbyMode( );
 80090e2:	f7f9 fd63 	bl	8002bac <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80090e6:	bd10      	pop	{r4, pc}

080090e8 <UTIL_LPM_Init>:
	StopModeDisable = LPM_TRUE;
 80090e8:	2201      	movs	r2, #1
{
 80090ea:	b510      	push	{r4, lr}
	StopModeDisable = LPM_TRUE;
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <UTIL_LPM_Init+0x10>)
 80090ee:	711a      	strb	r2, [r3, #4]
	UTIL_LPM_Dis_Debug_STlink();
 80090f0:	f7ff fff2 	bl	80090d8 <UTIL_LPM_Dis_Debug_STlink>
}
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	20001360 	.word	0x20001360

080090fc <RTC_IF_GetTimerContext>:
 */
uint32_t RTC_IF_GetTimerContext(void)
{
	RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
	/*return time context*/
	return (uint32_t) RtcTimerContext.Rtc_Time;
 80090fc:	4b01      	ldr	r3, [pc, #4]	; (8009104 <RTC_IF_GetTimerContext+0x8>)
 80090fe:	6818      	ldr	r0, [r3, #0]
}
 8009100:	4770      	bx	lr
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	20001368 	.word	0x20001368

08009108 <RTC_IF_GetMinimumTimeout>:
 * @retval minimum value for a timeout in ticks
 */
uint32_t RTC_IF_GetMinimumTimeout(void)
{
	return (MIN_ALARM_DELAY);
}
 8009108:	2003      	movs	r0, #3
 800910a:	4770      	bx	lr

0800910c <RTC_IF_Convert_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800910c:	b510      	push	{r4, lr}
	return (uint32_t) ((((uint64_t) timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800910e:	0e41      	lsrs	r1, r0, #25
 8009110:	227d      	movs	r2, #125	; 0x7d
 8009112:	2300      	movs	r3, #0
 8009114:	01c0      	lsls	r0, r0, #7
 8009116:	f7f7 f993 	bl	8000440 <__aeabi_uldivmod>
}
 800911a:	bd10      	pop	{r4, pc}

0800911c <RTC_IF_Convert_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in timer milliseconds
 */
uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 800911c:	b510      	push	{r4, lr}
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 800911e:	227d      	movs	r2, #125	; 0x7d
 8009120:	2300      	movs	r3, #0
 8009122:	2100      	movs	r1, #0
 8009124:	f7f7 f9ac 	bl	8000480 <__aeabi_lmul>
 8009128:	0649      	lsls	r1, r1, #25
 800912a:	09c0      	lsrs	r0, r0, #7
 800912c:	4308      	orrs	r0, r1
}
 800912e:	bd10      	pop	{r4, pc}

08009130 <RTC_IF_StopTimer>:
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8009130:	4806      	ldr	r0, [pc, #24]	; (800914c <RTC_IF_StopTimer+0x1c>)
 8009132:	4b07      	ldr	r3, [pc, #28]	; (8009150 <RTC_IF_StopTimer+0x20>)
 8009134:	6801      	ldr	r1, [r0, #0]
{
 8009136:	b510      	push	{r4, lr}
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8009138:	68ca      	ldr	r2, [r1, #12]
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	4313      	orrs	r3, r2
 800913e:	60cb      	str	r3, [r1, #12]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8009140:	2180      	movs	r1, #128	; 0x80
 8009142:	0049      	lsls	r1, r1, #1
 8009144:	f7fb f996 	bl	8004474 <HAL_RTC_DeactivateAlarm>
}
 8009148:	2000      	movs	r0, #0
 800914a:	bd10      	pop	{r4, pc}
 800914c:	200001cc 	.word	0x200001cc
 8009150:	fffffe7f 	.word	0xfffffe7f

08009154 <RTC_IF_StartTimer>:
{
 8009154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009156:	0006      	movs	r6, r0
	uint16_t rtcAlarmSubSeconds = 0;
	uint16_t rtcAlarmSeconds = 0;
	uint16_t rtcAlarmMinutes = 0;
	uint16_t rtcAlarmHours = 0;
	uint16_t rtcAlarmDays = 0;
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8009158:	4c41      	ldr	r4, [pc, #260]	; (8009260 <RTC_IF_StartTimer+0x10c>)
{
 800915a:	b087      	sub	sp, #28
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800915c:	7923      	ldrb	r3, [r4, #4]
 800915e:	68a7      	ldr	r7, [r4, #8]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	7963      	ldrb	r3, [r4, #5]
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	79a3      	ldrb	r3, [r4, #6]
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	79e3      	ldrb	r3, [r4, #7]
 800916c:	9303      	str	r3, [sp, #12]
	RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800916e:	7e63      	ldrb	r3, [r4, #25]
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	7ee3      	ldrb	r3, [r4, #27]
 8009174:	7ea5      	ldrb	r5, [r4, #26]
 8009176:	9305      	str	r3, [sp, #20]
	RTC_IF_StopTimer();
 8009178:	f7ff ffda 	bl	8009130 <RTC_IF_StopTimer>
	/*reverse counter */
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800917c:	4b39      	ldr	r3, [pc, #228]	; (8009264 <RTC_IF_StartTimer+0x110>)
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
	/* convert timeout  to seconds */
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
	/*convert microsecs to RTC format and add to 'Now' */
	rtcAlarmDays = RTC_DateStruct.Date;
	while (timeoutValue >= SECONDS_IN_1DAY )
 800917e:	493a      	ldr	r1, [pc, #232]	; (8009268 <RTC_IF_StartTimer+0x114>)
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8009180:	1bdf      	subs	r7, r3, r7
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8009182:	05b3      	lsls	r3, r6, #22
 8009184:	0d9b      	lsrs	r3, r3, #22
 8009186:	18ff      	adds	r7, r7, r3
 8009188:	b2ba      	uxth	r2, r7
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
 800918a:	0ab3      	lsrs	r3, r6, #10
	rtcAlarmDays = RTC_DateStruct.Date;
 800918c:	b2a8      	uxth	r0, r5
	while (timeoutValue >= SECONDS_IN_1DAY )
 800918e:	428b      	cmp	r3, r1
 8009190:	d846      	bhi.n	8009220 <RTC_IF_StartTimer+0xcc>
	{
		timeoutValue -= SECONDS_IN_1DAY;
		rtcAlarmDays++;
	}
	/* calc hours */
	rtcAlarmHours = RTC_TimeStruct.Hours;
 8009192:	4669      	mov	r1, sp
 8009194:	880e      	ldrh	r6, [r1, #0]
	while (timeoutValue >= SECONDS_IN_1HOUR )
 8009196:	21e1      	movs	r1, #225	; 0xe1
 8009198:	0109      	lsls	r1, r1, #4
 800919a:	428b      	cmp	r3, r1
 800919c:	d245      	bcs.n	800922a <RTC_IF_StartTimer+0xd6>
	{
		timeoutValue -= SECONDS_IN_1HOUR;
		rtcAlarmHours++;
	}
	/* calc minutes */
	rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800919e:	4669      	mov	r1, sp
 80091a0:	888f      	ldrh	r7, [r1, #4]
	while (timeoutValue >= SECONDS_IN_1MINUTE )
 80091a2:	2b3b      	cmp	r3, #59	; 0x3b
 80091a4:	d846      	bhi.n	8009234 <RTC_IF_StartTimer+0xe0>
		rtcAlarmMinutes++;
	}
	/* calc seconds */
	rtcAlarmSeconds = RTC_TimeStruct.Seconds + timeoutValue;
	/***** correct for modulo********/
	while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80091a6:	0a95      	lsrs	r5, r2, #10
 80091a8:	02a9      	lsls	r1, r5, #10
 80091aa:	1a52      	subs	r2, r2, r1
 80091ac:	b292      	uxth	r2, r2
 80091ae:	9200      	str	r2, [sp, #0]
 80091b0:	9a02      	ldr	r2, [sp, #8]
 80091b2:	18ad      	adds	r5, r5, r2
 80091b4:	18ed      	adds	r5, r5, r3
 80091b6:	b2ad      	uxth	r5, r5
	{
		rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
		rtcAlarmSeconds++;
	}
	while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 80091b8:	2d3b      	cmp	r5, #59	; 0x3b
 80091ba:	d83f      	bhi.n	800923c <RTC_IF_StartTimer+0xe8>
	{
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
		rtcAlarmMinutes++;
	}
	while (rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 80091bc:	2f3b      	cmp	r7, #59	; 0x3b
 80091be:	d842      	bhi.n	8009246 <RTC_IF_StartTimer+0xf2>
	{
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
		rtcAlarmHours++;
	}
	while (rtcAlarmHours >= HOURS_IN_1DAY )
 80091c0:	2e17      	cmp	r6, #23
 80091c2:	d845      	bhi.n	8009250 <RTC_IF_StartTimer+0xfc>
		rtcAlarmHours -= HOURS_IN_1DAY;
		rtcAlarmDays++;
	}
	if (RTC_DateStruct.Year % 4 == 0)
	{
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 80091c4:	9a04      	ldr	r2, [sp, #16]
	if (RTC_DateStruct.Year % 4 == 0)
 80091c6:	9905      	ldr	r1, [sp, #20]
 80091c8:	4b28      	ldr	r3, [pc, #160]	; (800926c <RTC_IF_StartTimer+0x118>)
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 80091ca:	3a01      	subs	r2, #1
	if (RTC_DateStruct.Year % 4 == 0)
 80091cc:	0789      	lsls	r1, r1, #30
 80091ce:	d144      	bne.n	800925a <RTC_IF_StartTimer+0x106>
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 80091d0:	5c99      	ldrb	r1, [r3, r2]
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[RTC_DateStruct.Month - 1];
		}
	} else
	{
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 80091d2:	4288      	cmp	r0, r1
 80091d4:	d902      	bls.n	80091dc <RTC_IF_StartTimer+0x88>
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonth[RTC_DateStruct.Month - 1];
 80091d6:	f7f7 f92d 	bl	8000434 <__aeabi_idivmod>
 80091da:	b288      	uxth	r0, r1
		}
	}
	/* Set RTC_AlarmStructure with calculated values*/
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80091dc:	9a00      	ldr	r2, [sp, #0]
 80091de:	4b21      	ldr	r3, [pc, #132]	; (8009264 <RTC_IF_StartTimer+0x110>)
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
	RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80091e0:	77a5      	strb	r5, [r4, #30]
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	6223      	str	r3, [r4, #32]
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
 80091e6:	23a0      	movs	r3, #160	; 0xa0
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	6363      	str	r3, [r4, #52]	; 0x34
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 80091ec:	0023      	movs	r3, r4
 80091ee:	333c      	adds	r3, #60	; 0x3c
 80091f0:	7018      	strb	r0, [r3, #0]
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 80091f2:	9b03      	ldr	r3, [sp, #12]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80091f4:	2500      	movs	r5, #0
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 80091f6:	77e3      	strb	r3, [r4, #31]
	RTC_AlarmStructure.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;   // RTC_ALARMMASK_DATEWEEKDAY  ; Old: RTC_ALARMMASK_NONE
 80091f8:	2380      	movs	r3, #128	; 0x80
 80091fa:	061b      	lsls	r3, r3, #24
 80091fc:	6323      	str	r3, [r4, #48]	; 0x30
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 80091fe:	0021      	movs	r1, r4
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009200:	2380      	movs	r3, #128	; 0x80
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	/* Set RTC_Alarm */
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8009202:	002a      	movs	r2, r5
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009204:	005b      	lsls	r3, r3, #1
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8009206:	311c      	adds	r1, #28
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8009208:	4819      	ldr	r0, [pc, #100]	; (8009270 <RTC_IF_StartTimer+0x11c>)
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800920a:	7767      	strb	r7, [r4, #29]
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
 800920c:	7726      	strb	r6, [r4, #28]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800920e:	63a5      	str	r5, [r4, #56]	; 0x38
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009210:	6423      	str	r3, [r4, #64]	; 0x40
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009212:	62a5      	str	r5, [r4, #40]	; 0x28
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009214:	62e5      	str	r5, [r4, #44]	; 0x2c
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8009216:	f7fb fb4f 	bl	80048b8 <HAL_RTC_SetAlarm_IT>
}
 800921a:	0028      	movs	r0, r5
 800921c:	b007      	add	sp, #28
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		timeoutValue -= SECONDS_IN_1DAY;
 8009220:	4d14      	ldr	r5, [pc, #80]	; (8009274 <RTC_IF_StartTimer+0x120>)
		rtcAlarmDays++;
 8009222:	3001      	adds	r0, #1
		timeoutValue -= SECONDS_IN_1DAY;
 8009224:	195b      	adds	r3, r3, r5
		rtcAlarmDays++;
 8009226:	b280      	uxth	r0, r0
 8009228:	e7b1      	b.n	800918e <RTC_IF_StartTimer+0x3a>
		timeoutValue -= SECONDS_IN_1HOUR;
 800922a:	4d13      	ldr	r5, [pc, #76]	; (8009278 <RTC_IF_StartTimer+0x124>)
		rtcAlarmHours++;
 800922c:	3601      	adds	r6, #1
		timeoutValue -= SECONDS_IN_1HOUR;
 800922e:	195b      	adds	r3, r3, r5
		rtcAlarmHours++;
 8009230:	b2b6      	uxth	r6, r6
 8009232:	e7b2      	b.n	800919a <RTC_IF_StartTimer+0x46>
		rtcAlarmMinutes++;
 8009234:	3701      	adds	r7, #1
		timeoutValue -= SECONDS_IN_1MINUTE;
 8009236:	3b3c      	subs	r3, #60	; 0x3c
		rtcAlarmMinutes++;
 8009238:	b2bf      	uxth	r7, r7
 800923a:	e7b2      	b.n	80091a2 <RTC_IF_StartTimer+0x4e>
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800923c:	3d3c      	subs	r5, #60	; 0x3c
		rtcAlarmMinutes++;
 800923e:	3701      	adds	r7, #1
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8009240:	b2ad      	uxth	r5, r5
		rtcAlarmMinutes++;
 8009242:	b2bf      	uxth	r7, r7
 8009244:	e7b8      	b.n	80091b8 <RTC_IF_StartTimer+0x64>
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8009246:	3f3c      	subs	r7, #60	; 0x3c
		rtcAlarmHours++;
 8009248:	3601      	adds	r6, #1
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800924a:	b2bf      	uxth	r7, r7
		rtcAlarmHours++;
 800924c:	b2b6      	uxth	r6, r6
 800924e:	e7b5      	b.n	80091bc <RTC_IF_StartTimer+0x68>
		rtcAlarmHours -= HOURS_IN_1DAY;
 8009250:	3e18      	subs	r6, #24
		rtcAlarmDays++;
 8009252:	3001      	adds	r0, #1
		rtcAlarmHours -= HOURS_IN_1DAY;
 8009254:	b2b6      	uxth	r6, r6
		rtcAlarmDays++;
 8009256:	b280      	uxth	r0, r0
 8009258:	e7b2      	b.n	80091c0 <RTC_IF_StartTimer+0x6c>
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 800925a:	189b      	adds	r3, r3, r2
 800925c:	7b19      	ldrb	r1, [r3, #12]
 800925e:	e7b8      	b.n	80091d2 <RTC_IF_StartTimer+0x7e>
 8009260:	20001368 	.word	0x20001368
 8009264:	000003ff 	.word	0x000003ff
 8009268:	0001517f 	.word	0x0001517f
 800926c:	0800ab30 	.word	0x0800ab30
 8009270:	200001cc 	.word	0x200001cc
 8009274:	fffeae80 	.word	0xfffeae80
 8009278:	fffff1f0 	.word	0xfffff1f0

0800927c <RTC_GetCalendarValue>:
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct,
		RTC_TimeTypeDef *RTC_TimeStruct)
{
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	000c      	movs	r4, r1
	uint32_t calendarValue = 0;
	uint32_t correction;
	/* Get Time and Date*/
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8009280:	4e1e      	ldr	r6, [pc, #120]	; (80092fc <RTC_GetCalendarValue+0x80>)
{
 8009282:	0005      	movs	r5, r0
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8009284:	0001      	movs	r1, r0
 8009286:	2200      	movs	r2, #0
 8009288:	0030      	movs	r0, r6
 800928a:	f7fb fc21 	bl	8004ad0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800928e:	0021      	movs	r1, r4
 8009290:	2200      	movs	r2, #0
 8009292:	0030      	movs	r0, r6
 8009294:	f7fb fbf2 	bl	8004a7c <HAL_RTC_GetTime>
	/* calculte amount of elapsed days since 01/01/2000 */
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

	correction = ((RTC_DateStruct->Year % 4) == 0) ?
 8009298:	2103      	movs	r1, #3
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800929a:	78ea      	ldrb	r2, [r5, #3]
 800929c:	4818      	ldr	r0, [pc, #96]	; (8009300 <RTC_GetCalendarValue+0x84>)
					DAYS_IN_MONTH_CORRECTION_LEAP :
					DAYS_IN_MONTH_CORRECTION_NORM;

	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800929e:	786e      	ldrb	r6, [r5, #1]
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80092a0:	4350      	muls	r0, r2
					DAYS_IN_MONTH_CORRECTION_LEAP :
 80092a2:	400a      	ands	r2, r1
 80092a4:	4253      	negs	r3, r2
 80092a6:	415a      	adcs	r2, r3
 80092a8:	4253      	negs	r3, r2
 80092aa:	4a16      	ldr	r2, [pc, #88]	; (8009304 <RTC_GetCalendarValue+0x88>)
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80092ac:	3e01      	subs	r6, #1
					DAYS_IN_MONTH_CORRECTION_LEAP :
 80092ae:	4013      	ands	r3, r2
 80092b0:	4a15      	ldr	r2, [pc, #84]	; (8009308 <RTC_GetCalendarValue+0x8c>)
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

	calendarValue += (RTC_DateStruct->Date - 1);
 80092b2:	78ad      	ldrb	r5, [r5, #2]
					DAYS_IN_MONTH_CORRECTION_LEAP :
 80092b4:	189b      	adds	r3, r3, r2
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80092b6:	223d      	movs	r2, #61	; 0x3d
 80092b8:	4372      	muls	r2, r6
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80092ba:	0076      	lsls	r6, r6, #1
 80092bc:	40f3      	lsrs	r3, r6
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80092be:	3201      	adds	r2, #1
 80092c0:	0fd7      	lsrs	r7, r2, #31
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80092c2:	3003      	adds	r0, #3
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80092c4:	18ba      	adds	r2, r7, r2
 80092c6:	3d01      	subs	r5, #1
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80092c8:	0880      	lsrs	r0, r0, #2
	calendarValue += (RTC_DateStruct->Date - 1);
 80092ca:	1828      	adds	r0, r5, r0
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80092cc:	1052      	asrs	r2, r2, #1
 80092ce:	1812      	adds	r2, r2, r0
	/* convert from days to seconds */
	calendarValue *= SECONDS_IN_1DAY;

	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 80092d0:	20e1      	movs	r0, #225	; 0xe1
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80092d2:	400b      	ands	r3, r1
	calendarValue += (RTC_DateStruct->Date - 1);
 80092d4:	1ad3      	subs	r3, r2, r3
	calendarValue *= SECONDS_IN_1DAY;
 80092d6:	4a0d      	ldr	r2, [pc, #52]	; (800930c <RTC_GetCalendarValue+0x90>)
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 80092d8:	0100      	lsls	r0, r0, #4
	calendarValue *= SECONDS_IN_1DAY;
 80092da:	4353      	muls	r3, r2
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 80092dc:	7822      	ldrb	r2, [r4, #0]
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 80092de:	7861      	ldrb	r1, [r4, #1]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 80092e0:	4350      	muls	r0, r2
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 80092e2:	223c      	movs	r2, #60	; 0x3c
 80092e4:	434a      	muls	r2, r1
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 80092e6:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 80092e8:	78a2      	ldrb	r2, [r4, #2]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 80092ea:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 80092ec:	18c0      	adds	r0, r0, r3
	calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80092ee:	6863      	ldr	r3, [r4, #4]
 80092f0:	0280      	lsls	r0, r0, #10
 80092f2:	1ac0      	subs	r0, r0, r3
 80092f4:	4b06      	ldr	r3, [pc, #24]	; (8009310 <RTC_GetCalendarValue+0x94>)
 80092f6:	18c0      	adds	r0, r0, r3
	return (calendarValue);
}
 80092f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	200001cc 	.word	0x200001cc
 8009300:	000005b5 	.word	0x000005b5
 8009304:	ffaaaab0 	.word	0xffaaaab0
 8009308:	0099aaa0 	.word	0x0099aaa0
 800930c:	00015180 	.word	0x00015180
 8009310:	000003ff 	.word	0x000003ff

08009314 <RTC_IF_SetTimerContext>:
{
 8009314:	b510      	push	{r4, lr}
	RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date,
 8009316:	4c04      	ldr	r4, [pc, #16]	; (8009328 <RTC_IF_SetTimerContext+0x14>)
 8009318:	0020      	movs	r0, r4
 800931a:	1d21      	adds	r1, r4, #4
 800931c:	3018      	adds	r0, #24
 800931e:	f7ff ffad 	bl	800927c <RTC_GetCalendarValue>
 8009322:	6020      	str	r0, [r4, #0]
}
 8009324:	bd10      	pop	{r4, pc}
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	20001368 	.word	0x20001368

0800932c <RTC_IF_GetTimerElapsedTime>:
{
 800932c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800932e:	4668      	mov	r0, sp
 8009330:	a901      	add	r1, sp, #4
 8009332:	f7ff ffa3 	bl	800927c <RTC_GetCalendarValue>
	return ((uint32_t) (CalendarValue - RtcTimerContext.Rtc_Time));
 8009336:	4b02      	ldr	r3, [pc, #8]	; (8009340 <RTC_IF_GetTimerElapsedTime+0x14>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	1ac0      	subs	r0, r0, r3
}
 800933c:	b007      	add	sp, #28
 800933e:	bd00      	pop	{pc}
 8009340:	20001368 	.word	0x20001368

08009344 <RTC_IF_GetTime>:
{
 8009344:	b530      	push	{r4, r5, lr}
 8009346:	b087      	sub	sp, #28
 8009348:	0005      	movs	r5, r0
	uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800934a:	a901      	add	r1, sp, #4
 800934c:	4668      	mov	r0, sp
 800934e:	f7ff ff95 	bl	800927c <RTC_GetCalendarValue>
 8009352:	0004      	movs	r4, r0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8009354:	0580      	lsls	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8009356:	227d      	movs	r2, #125	; 0x7d
 8009358:	2300      	movs	r3, #0
 800935a:	2100      	movs	r1, #0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 800935c:	0d80      	lsrs	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 800935e:	f7f7 f88f 	bl	8000480 <__aeabi_lmul>
 8009362:	09c0      	lsrs	r0, r0, #7
	*mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8009364:	8028      	strh	r0, [r5, #0]
	uint32_t seconds = (uint32_t) (calendarValue >> RTC_N_PREDIV_S);
 8009366:	0aa0      	lsrs	r0, r4, #10
}
 8009368:	b007      	add	sp, #28
 800936a:	bd30      	pop	{r4, r5, pc}

0800936c <RTC_IF_BkUp_Write_Seconds>:
{
 800936c:	b510      	push	{r4, lr}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800936e:	4b03      	ldr	r3, [pc, #12]	; (800937c <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8009370:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8009372:	2100      	movs	r1, #0
 8009374:	0018      	movs	r0, r3
 8009376:	f7fb fbcd 	bl	8004b14 <HAL_RTCEx_BKUPWrite>
}
 800937a:	bd10      	pop	{r4, pc}
 800937c:	200001cc 	.word	0x200001cc

08009380 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8009380:	b510      	push	{r4, lr}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8009382:	4b03      	ldr	r3, [pc, #12]	; (8009390 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 8009384:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8009386:	2101      	movs	r1, #1
 8009388:	0018      	movs	r0, r3
 800938a:	f7fb fbc3 	bl	8004b14 <HAL_RTCEx_BKUPWrite>
}
 800938e:	bd10      	pop	{r4, pc}
 8009390:	200001cc 	.word	0x200001cc

08009394 <RTC_IF_BkUp_Read_Seconds>:
{
 8009394:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8009396:	2100      	movs	r1, #0
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <RTC_IF_BkUp_Read_Seconds+0xc>)
 800939a:	f7fb fbc1 	bl	8004b20 <HAL_RTCEx_BKUPRead>
}
 800939e:	bd10      	pop	{r4, pc}
 80093a0:	200001cc 	.word	0x200001cc

080093a4 <RTC_IF_BkUp_Read_SubSeconds>:
{
 80093a4:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80093a6:	2101      	movs	r1, #1
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80093aa:	f7fb fbb9 	bl	8004b20 <HAL_RTCEx_BKUPRead>
}
 80093ae:	bd10      	pop	{r4, pc}
 80093b0:	200001cc 	.word	0x200001cc

080093b4 <RTC_IF_Init>:
{
 80093b4:	b570      	push	{r4, r5, r6, lr}
	if (RTC_Initalized == false)
 80093b6:	4e25      	ldr	r6, [pc, #148]	; (800944c <RTC_IF_Init+0x98>)
{
 80093b8:	b08a      	sub	sp, #40	; 0x28
	if (RTC_Initalized == false)
 80093ba:	0033      	movs	r3, r6
 80093bc:	3344      	adds	r3, #68	; 0x44
 80093be:	781d      	ldrb	r5, [r3, #0]
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	d13f      	bne.n	8009444 <RTC_IF_Init+0x90>
	RTC_AlarmTypeDef sAlarm = { 0 };
 80093c4:	2228      	movs	r2, #40	; 0x28
 80093c6:	0029      	movs	r1, r5
 80093c8:	4668      	mov	r0, sp
 80093ca:	f000 fdaf 	bl	8009f2c <memset>
	hrtc.Instance = RTC;
 80093ce:	4c20      	ldr	r4, [pc, #128]	; (8009450 <RTC_IF_Init+0x9c>)
 80093d0:	4b20      	ldr	r3, [pc, #128]	; (8009454 <RTC_IF_Init+0xa0>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80093d2:	0020      	movs	r0, r4
	hrtc.Instance = RTC;
 80093d4:	6023      	str	r3, [r4, #0]
	hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80093d6:	231f      	movs	r3, #31
 80093d8:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80093da:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <RTC_IF_Init+0xa4>)
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80093dc:	6065      	str	r5, [r4, #4]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80093de:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80093e0:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80093e2:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80093e4:	61a5      	str	r5, [r4, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80093e6:	61e5      	str	r5, [r4, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80093e8:	f7fb f90c 	bl	8004604 <HAL_RTC_Init>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d001      	beq.n	80093f4 <RTC_IF_Init+0x40>
		Error_Handler();
 80093f0:	f7f8 fe18 	bl	8002024 <Error_Handler>
	sAlarm.AlarmTime.Hours = 0;
 80093f4:	2200      	movs	r2, #0
 80093f6:	466b      	mov	r3, sp
 80093f8:	801a      	strh	r2, [r3, #0]
	sAlarm.AlarmTime.Seconds = 0;
 80093fa:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	061b      	lsls	r3, r3, #24
 8009400:	9305      	str	r3, [sp, #20]
	sAlarm.AlarmDateWeekDay = 1;
 8009402:	466b      	mov	r3, sp
 8009404:	2101      	movs	r1, #1
 8009406:	3301      	adds	r3, #1
 8009408:	77d9      	strb	r1, [r3, #31]
	sAlarm.Alarm = RTC_ALARM_A;
 800940a:	2380      	movs	r3, #128	; 0x80
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800940c:	4669      	mov	r1, sp
	sAlarm.Alarm = RTC_ALARM_A;
 800940e:	005b      	lsls	r3, r3, #1
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009410:	0020      	movs	r0, r4
	sAlarm.AlarmTime.SubSeconds = 0;
 8009412:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009414:	9203      	str	r2, [sp, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009416:	9204      	str	r2, [sp, #16]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009418:	9206      	str	r2, [sp, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800941a:	9207      	str	r2, [sp, #28]
	sAlarm.Alarm = RTC_ALARM_A;
 800941c:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800941e:	f7fb fa4b 	bl	80048b8 <HAL_RTC_SetAlarm_IT>
 8009422:	2800      	cmp	r0, #0
 8009424:	d001      	beq.n	800942a <RTC_IF_Init+0x76>
		Error_Handler();
 8009426:	f7f8 fdfd 	bl	8002024 <Error_Handler>
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800942a:	2180      	movs	r1, #128	; 0x80
 800942c:	0020      	movs	r0, r4
 800942e:	0049      	lsls	r1, r1, #1
 8009430:	f7fb f820 	bl	8004474 <HAL_RTC_DeactivateAlarm>
		HAL_RTCEx_EnableBypassShadow(&hrtc);
 8009434:	0020      	movs	r0, r4
 8009436:	f7fb fb79 	bl	8004b2c <HAL_RTCEx_EnableBypassShadow>
		RTC_IF_SetTimerContext();
 800943a:	f7ff ff6b 	bl	8009314 <RTC_IF_SetTimerContext>
		RTC_Initalized = true;
 800943e:	2301      	movs	r3, #1
 8009440:	3644      	adds	r6, #68	; 0x44
 8009442:	7033      	strb	r3, [r6, #0]
}
 8009444:	2000      	movs	r0, #0
 8009446:	b00a      	add	sp, #40	; 0x28
 8009448:	bd70      	pop	{r4, r5, r6, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	20001368 	.word	0x20001368
 8009450:	200001cc 	.word	0x200001cc
 8009454:	40002800 	.word	0x40002800
 8009458:	000003ff 	.word	0x000003ff

0800945c <RTC_IF_GetTimerValue>:
{
 800945c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = 0;
 800945e:	2000      	movs	r0, #0
	if (RTC_Initalized == true)
 8009460:	4b05      	ldr	r3, [pc, #20]	; (8009478 <RTC_IF_GetTimerValue+0x1c>)
 8009462:	3344      	adds	r3, #68	; 0x44
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	4283      	cmp	r3, r0
 8009468:	d003      	beq.n	8009472 <RTC_IF_GetTimerValue+0x16>
		CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800946a:	4668      	mov	r0, sp
 800946c:	a901      	add	r1, sp, #4
 800946e:	f7ff ff05 	bl	800927c <RTC_GetCalendarValue>
}
 8009472:	b007      	add	sp, #28
 8009474:	bd00      	pop	{pc}
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	20001368 	.word	0x20001368

0800947c <HAL_RTC_AlarmAEventCallback>:
{
 800947c:	b510      	push	{r4, lr}
    pModemProcessIRQTimer();
 800947e:	4b02      	ldr	r3, [pc, #8]	; (8009488 <HAL_RTC_AlarmAEventCallback+0xc>)
 8009480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009482:	4798      	blx	r3
}
 8009484:	bd10      	pop	{r4, pc}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	20001368 	.word	0x20001368

0800948c <Find_str_fix>:
/**
 * @retval	-1: Neu khong tim thay chuoi
 * 			1 : Neu chuoi dung
 */
int16_t Find_str_fix (int16_t pos_fix, sData *sTemp_Receiv, sData *sResponding, int16_t Pos_Res, int16_t *Pos_sharp)
{
 800948c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800948e:	001d      	movs	r5, r3
 8009490:	9001      	str	r0, [sp, #4]
	 int16_t    Result,count;
	 Result = 1,count = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	2001      	movs	r0, #1
	 while ((pos_fix + count) < sTemp_Receiv->Length_u16)
 8009496:	9c01      	ldr	r4, [sp, #4]
 8009498:	888f      	ldrh	r7, [r1, #4]
 800949a:	18e4      	adds	r4, r4, r3
 800949c:	42bc      	cmp	r4, r7
 800949e:	da08      	bge.n	80094b2 <Find_str_fix+0x26>
     {
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) == '|')
 80094a0:	680f      	ldr	r7, [r1, #0]
 80094a2:	46bc      	mov	ip, r7
 80094a4:	4666      	mov	r6, ip
 80094a6:	5d36      	ldrb	r6, [r6, r4]
 80094a8:	193f      	adds	r7, r7, r4
 80094aa:	2e7c      	cmp	r6, #124	; 0x7c
 80094ac:	d102      	bne.n	80094b4 <Find_str_fix+0x28>
          {
			   *Pos_sharp = pos_fix + count;
 80094ae:	9b08      	ldr	r3, [sp, #32]
 80094b0:	801c      	strh	r4, [r3, #0]
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
              Result = -1;
		  count++;
	 }
	 return Result;
}
 80094b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		  if ((Pos_Res + count) > sResponding->Length_u16)  // Vuot qua xau dich
 80094b4:	8894      	ldrh	r4, [r2, #4]
 80094b6:	18ee      	adds	r6, r5, r3
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	dd04      	ble.n	80094c6 <Find_str_fix+0x3a>
			   *Pos_sharp = sResponding->Length_u16 + 1;
 80094bc:	9808      	ldr	r0, [sp, #32]
 80094be:	3401      	adds	r4, #1
 80094c0:	8004      	strh	r4, [r0, #0]
			   Result = -1;
 80094c2:	2001      	movs	r0, #1
 80094c4:	4240      	negs	r0, r0
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
 80094c6:	6814      	ldr	r4, [r2, #0]
 80094c8:	783f      	ldrb	r7, [r7, #0]
 80094ca:	18e4      	adds	r4, r4, r3
 80094cc:	5d64      	ldrb	r4, [r4, r5]
 80094ce:	42a7      	cmp	r7, r4
 80094d0:	d001      	beq.n	80094d6 <Find_str_fix+0x4a>
              Result = -1;
 80094d2:	2001      	movs	r0, #1
 80094d4:	4240      	negs	r0, r0
		  count++;
 80094d6:	3301      	adds	r3, #1
 80094d8:	b21b      	sxth	r3, r3
 80094da:	e7dc      	b.n	8009496 <Find_str_fix+0xa>

080094dc <Find_String_V2>:
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 80094dc:	230e      	movs	r3, #14
 80094de:	2200      	movs	r2, #0
{
 80094e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094e2:	b08d      	sub	sp, #52	; 0x34
 80094e4:	000e      	movs	r6, r1
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 80094e6:	a908      	add	r1, sp, #32
 80094e8:	185b      	adds	r3, r3, r1
 80094ea:	801a      	strh	r2, [r3, #0]
	if (*(sTemp_Receiv->Data_a8) == '!')
 80094ec:	6803      	ldr	r3, [r0, #0]
{
 80094ee:	0007      	movs	r7, r0
	if (*(sTemp_Receiv->Data_a8) == '!')
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	781b      	ldrb	r3, [r3, #0]
	for (i = 0; i < sResponding->Length_u16; ++i)
 80094f4:	0014      	movs	r4, r2
	if (*(sTemp_Receiv->Data_a8) == '!')
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	3b21      	subs	r3, #33	; 0x21
 80094fa:	4259      	negs	r1, r3
 80094fc:	414b      	adcs	r3, r1
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	9305      	str	r3, [sp, #20]
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8009502:	9206      	str	r2, [sp, #24]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8009504:	88b3      	ldrh	r3, [r6, #4]
 8009506:	429c      	cmp	r4, r3
 8009508:	db02      	blt.n	8009510 <Find_String_V2+0x34>
	if (Off_Set == 0)
 800950a:	9c05      	ldr	r4, [sp, #20]
 800950c:	3c01      	subs	r4, #1
 800950e:	e044      	b.n	800959a <Find_String_V2+0xbe>
		if (*(sTemp_Receiv->Data_a8 + Off_Set) == *(sResponding->Data_a8 +i))  // tim dc ky tu dau giong
 8009510:	6833      	ldr	r3, [r6, #0]
 8009512:	9a05      	ldr	r2, [sp, #20]
 8009514:	9307      	str	r3, [sp, #28]
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	5c9a      	ldrb	r2, [r3, r2]
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	5d1b      	ldrb	r3, [r3, r4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d152      	bne.n	80095c8 <Find_String_V2+0xec>
			j = 1 + Off_Set;
 8009522:	9b05      	ldr	r3, [sp, #20]
			Pos_Sharp = 0;
 8009524:	220e      	movs	r2, #14
			j = 1 + Off_Set;
 8009526:	1c5d      	adds	r5, r3, #1
			Pos_Sharp = 0;
 8009528:	2300      	movs	r3, #0
			Check = 1;
 800952a:	2001      	movs	r0, #1
			Pos_Sharp = 0;
 800952c:	a908      	add	r1, sp, #32
 800952e:	1852      	adds	r2, r2, r1
 8009530:	8013      	strh	r3, [r2, #0]
			Check_sharp = 0;
 8009532:	9309      	str	r3, [sp, #36]	; 0x24
			while (j < sTemp_Receiv->Length_u16)
 8009534:	88bb      	ldrh	r3, [r7, #4]
 8009536:	429d      	cmp	r5, r3
 8009538:	db0a      	blt.n	8009550 <Find_String_V2+0x74>
			if (Check == 1)
 800953a:	2801      	cmp	r0, #1
 800953c:	d144      	bne.n	80095c8 <Find_String_V2+0xec>
	if (Off_Set == 0)
 800953e:	9b04      	ldr	r3, [sp, #16]
 8009540:	2b21      	cmp	r3, #33	; 0x21
 8009542:	d102      	bne.n	800954a <Find_String_V2+0x6e>
	if (Result >= 0)
 8009544:	43e4      	mvns	r4, r4
 8009546:	0424      	lsls	r4, r4, #16
 8009548:	17e4      	asrs	r4, r4, #31
}
 800954a:	0020      	movs	r0, r4
 800954c:	b00d      	add	sp, #52	; 0x34
 800954e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (*(sTemp_Receiv->Data_a8+j) == '|')
 8009550:	9b03      	ldr	r3, [sp, #12]
 8009552:	5d5b      	ldrb	r3, [r3, r5]
 8009554:	9308      	str	r3, [sp, #32]
 8009556:	2b7c      	cmp	r3, #124	; 0x7c
 8009558:	d121      	bne.n	800959e <Find_String_V2+0xc2>
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 800955a:	aa08      	add	r2, sp, #32
 800955c:	3b6e      	subs	r3, #110	; 0x6e
 800955e:	189b      	adds	r3, r3, r2
 8009560:	2200      	movs	r2, #0
 8009562:	5e9b      	ldrsh	r3, [r3, r2]
						Pos_Sharp_first = i + j;
 8009564:	b2a8      	uxth	r0, r5
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8009566:	2b00      	cmp	r3, #0
 8009568:	d104      	bne.n	8009574 <Find_String_V2+0x98>
						Pos_Sharp_first = i + j;
 800956a:	1903      	adds	r3, r0, r4
 800956c:	b21b      	sxth	r3, r3
 800956e:	9306      	str	r3, [sp, #24]
						Check_sharp = 1;
 8009570:	2301      	movs	r3, #1
 8009572:	9309      	str	r3, [sp, #36]	; 0x24
					Check = Find_str_fix (j + 1 ,sTemp_Receiv,sResponding, Pos_Sharp_first, &Pos_Sharp);
 8009574:	230e      	movs	r3, #14
 8009576:	aa08      	add	r2, sp, #32
 8009578:	189b      	adds	r3, r3, r2
 800957a:	3001      	adds	r0, #1
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	0032      	movs	r2, r6
 8009580:	0039      	movs	r1, r7
 8009582:	9b06      	ldr	r3, [sp, #24]
 8009584:	b200      	sxth	r0, r0
 8009586:	f7ff ff81 	bl	800948c <Find_str_fix>
 800958a:	b2c0      	uxtb	r0, r0
					if (Check == 1)
 800958c:	2801      	cmp	r0, #1
 800958e:	d106      	bne.n	800959e <Find_String_V2+0xc2>
	if (Off_Set == 0)
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	2b21      	cmp	r3, #33	; 0x21
 8009594:	d1d9      	bne.n	800954a <Find_String_V2+0x6e>
	if (Result >= 0)
 8009596:	43e4      	mvns	r4, r4
 8009598:	17e4      	asrs	r4, r4, #31
	if (Off_Set == 0)
 800959a:	b224      	sxth	r4, r4
 800959c:	e7d5      	b.n	800954a <Find_String_V2+0x6e>
				if ((Check_sharp == 0) && (*(sTemp_Receiv->Data_a8+j) != *(sResponding->Data_a8 + i + j)))
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d108      	bne.n	80095b6 <Find_String_V2+0xda>
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	9a08      	ldr	r2, [sp, #32]
 80095a8:	191b      	adds	r3, r3, r4
 80095aa:	5d5b      	ldrb	r3, [r3, r5]
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10b      	bne.n	80095c8 <Find_String_V2+0xec>
                        j++;
 80095b0:	3501      	adds	r5, #1
 80095b2:	b22b      	sxth	r3, r5
 80095b4:	e006      	b.n	80095c4 <Find_String_V2+0xe8>
					if (j < Pos_Sharp)
 80095b6:	230e      	movs	r3, #14
 80095b8:	aa08      	add	r2, sp, #32
 80095ba:	189b      	adds	r3, r3, r2
 80095bc:	2200      	movs	r2, #0
 80095be:	5e9b      	ldrsh	r3, [r3, r2]
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	ddf5      	ble.n	80095b0 <Find_String_V2+0xd4>
						Check_sharp = 1;
 80095c4:	001d      	movs	r5, r3
 80095c6:	e7b5      	b.n	8009534 <Find_String_V2+0x58>
	for (i = 0; i < sResponding->Length_u16; ++i)
 80095c8:	3401      	adds	r4, #1
 80095ca:	b224      	sxth	r4, r4
 80095cc:	e79a      	b.n	8009504 <Find_String_V2+0x28>

080095ce <Check_update_Time>:
 * @param	Con tro chua bien thoi gian
 * @retval	1: du lieu chinh xac
 */
uint8_t Check_update_Time(ST_TIME_FORMAT *sRTC_temp)
{
	if (sRTC_temp->sec > 60)
 80095ce:	7882      	ldrb	r2, [r0, #2]
{
 80095d0:	0003      	movs	r3, r0
        return 0;
 80095d2:	2000      	movs	r0, #0
	if (sRTC_temp->sec > 60)
 80095d4:	2a3c      	cmp	r2, #60	; 0x3c
 80095d6:	d815      	bhi.n	8009604 <Check_update_Time+0x36>
	if (sRTC_temp->min > 60)
 80095d8:	785a      	ldrb	r2, [r3, #1]
 80095da:	2a3c      	cmp	r2, #60	; 0x3c
 80095dc:	d812      	bhi.n	8009604 <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->hour > 23)
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	2a17      	cmp	r2, #23
 80095e2:	d80f      	bhi.n	8009604 <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->day > 8)
 80095e4:	78da      	ldrb	r2, [r3, #3]
 80095e6:	2a08      	cmp	r2, #8
 80095e8:	d80c      	bhi.n	8009604 <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->date > 31)
 80095ea:	791a      	ldrb	r2, [r3, #4]
 80095ec:	2a1f      	cmp	r2, #31
 80095ee:	d809      	bhi.n	8009604 <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->month > 12)
 80095f0:	795a      	ldrb	r2, [r3, #5]
 80095f2:	2a0c      	cmp	r2, #12
 80095f4:	d806      	bhi.n	8009604 <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->year > 99)
        return 0;
    if (sRTC_temp->year < 20){
 80095f6:	224f      	movs	r2, #79	; 0x4f
 80095f8:	799b      	ldrb	r3, [r3, #6]
 80095fa:	3b14      	subs	r3, #20
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	429a      	cmp	r2, r3
 8009600:	4140      	adcs	r0, r0
 8009602:	b2c0      	uxtb	r0, r0
        return 0;
    }
	return 1;
}
 8009604:	4770      	bx	lr
	...

08009608 <Set_RTC>:
{
 8009608:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 800960a:	2700      	movs	r7, #0
{
 800960c:	b08b      	sub	sp, #44	; 0x2c
 800960e:	9001      	str	r0, [sp, #4]
 8009610:	9102      	str	r1, [sp, #8]
 8009612:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8009614:	2100      	movs	r1, #0
 8009616:	2214      	movs	r2, #20
{
 8009618:	ac01      	add	r4, sp, #4
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 800961a:	a805      	add	r0, sp, #20
 800961c:	f000 fc86 	bl	8009f2c <memset>
    if (Check_update_Time(&sRTC_Var) == 1)
 8009620:	0020      	movs	r0, r4
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8009622:	9704      	str	r7, [sp, #16]
    if (Check_update_Time(&sRTC_Var) == 1)
 8009624:	f7ff ffd3 	bl	80095ce <Check_update_Time>
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8009628:	ae04      	add	r6, sp, #16
    if (Check_update_Time(&sRTC_Var) == 1)
 800962a:	0005      	movs	r5, r0
 800962c:	2801      	cmp	r0, #1
 800962e:	d11c      	bne.n	800966a <Set_RTC+0x62>
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8009630:	4669      	mov	r1, sp
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 8009632:	9b03      	ldr	r3, [sp, #12]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8009634:	8822      	ldrh	r2, [r4, #0]
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 8009636:	9306      	str	r3, [sp, #24]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8009638:	78a3      	ldrb	r3, [r4, #2]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 800963a:	828a      	strh	r2, [r1, #20]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 800963c:	758b      	strb	r3, [r1, #22]
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 800963e:	78e3      	ldrb	r3, [r4, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009640:	003a      	movs	r2, r7
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 8009642:	7033      	strb	r3, [r6, #0]
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8009644:	7923      	ldrb	r3, [r4, #4]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009646:	a905      	add	r1, sp, #20
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8009648:	70b3      	strb	r3, [r6, #2]
        sRTCDate_Temp.Month 		 = sRTC_Var.month;
 800964a:	7963      	ldrb	r3, [r4, #5]
 800964c:	7073      	strb	r3, [r6, #1]
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 800964e:	79a3      	ldrb	r3, [r4, #6]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009650:	4c07      	ldr	r4, [pc, #28]	; (8009670 <Set_RTC+0x68>)
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 8009652:	70f3      	strb	r3, [r6, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8009654:	0020      	movs	r0, r4
 8009656:	f7fb f83d 	bl	80046d4 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &sRTCDate_Temp, RTC_FORMAT_BIN);
 800965a:	003a      	movs	r2, r7
 800965c:	0031      	movs	r1, r6
 800965e:	0020      	movs	r0, r4
 8009660:	f7fb f8bc 	bl	80047dc <HAL_RTC_SetDate>
}
 8009664:	0028      	movs	r0, r5
 8009666:	b00b      	add	sp, #44	; 0x2c
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 800966a:	003d      	movs	r5, r7
 800966c:	e7fa      	b.n	8009664 <Set_RTC+0x5c>
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	200001cc 	.word	0x200001cc

08009674 <UTIL_TIMER_Init>:

/* Private functions definition -----------------------------------------------*/
UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
	UTIL_TIMER_INIT_CRITICAL_SECTION();
	TimerListHead = NULL;
 8009674:	2200      	movs	r2, #0
{
 8009676:	b510      	push	{r4, lr}
	TimerListHead = NULL;
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <UTIL_TIMER_Init+0x10>)
 800967a:	601a      	str	r2, [r3, #0]
	return UTIL_TimerDriver.InitTimer();
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <UTIL_TIMER_Init+0x14>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4798      	blx	r3
}
 8009682:	bd10      	pop	{r4, pc}
 8009684:	200013b4 	.word	0x200013b4
 8009688:	0800ab5c 	.word	0x0800ab5c

0800968c <UTIL_TIMER_Create>:
	return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create(UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue,
		UTIL_TIMER_Mode_t Mode, void (*Callback)(void*), void *Argument)
{
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	0004      	movs	r4, r0
 8009690:	0017      	movs	r7, r2
 8009692:	0008      	movs	r0, r1
 8009694:	001e      	movs	r6, r3
		TimerObject->Mode = Mode;
		TimerObject->Next = NULL;
		return UTIL_TIMER_OK;
	} else
	{
		return UTIL_TIMER_INVALID_PARAM;
 8009696:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (Callback != NULL))
 8009698:	2c00      	cmp	r4, #0
 800969a:	d00e      	beq.n	80096ba <UTIL_TIMER_Create+0x2e>
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00c      	beq.n	80096ba <UTIL_TIMER_Create+0x2e>
		TimerObject->Timestamp = 0U;
 80096a0:	2500      	movs	r5, #0
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <UTIL_TIMER_Create+0x34>)
		TimerObject->Timestamp = 0U;
 80096a4:	6025      	str	r5, [r4, #0]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	4798      	blx	r3
		TimerObject->argument = Argument;      //Doi so cho ham callback
 80096aa:	9b06      	ldr	r3, [sp, #24]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80096ac:	6060      	str	r0, [r4, #4]
		TimerObject->IsPending = 0U;
 80096ae:	8125      	strh	r5, [r4, #8]
		TimerObject->IsReloadStopped = 0U;     //Danh dau stop timer set period
 80096b0:	72a5      	strb	r5, [r4, #10]
		TimerObject->Callback = Callback;      //Ham callback
 80096b2:	60e6      	str	r6, [r4, #12]
		TimerObject->argument = Argument;      //Doi so cho ham callback
 80096b4:	6123      	str	r3, [r4, #16]
		TimerObject->Mode = Mode;
 80096b6:	72e7      	strb	r7, [r4, #11]
		TimerObject->Next = NULL;
 80096b8:	6165      	str	r5, [r4, #20]
	}
}
 80096ba:	0028      	movs	r0, r5
 80096bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	0800ab5c 	.word	0x0800ab5c

080096c4 <UTIL_TIMER_GetCurrentTime>:
		TimerSetTimeout(TimerListHead);
	}
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80096c4:	b510      	push	{r4, lr}
	uint32_t now = UTIL_TimerDriver.GetTimerValue();
 80096c6:	4c03      	ldr	r4, [pc, #12]	; (80096d4 <UTIL_TIMER_GetCurrentTime+0x10>)
 80096c8:	69e3      	ldr	r3, [r4, #28]
 80096ca:	4798      	blx	r3
	return UTIL_TimerDriver.Tick2ms(now);
 80096cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096ce:	4798      	blx	r3
}
 80096d0:	bd10      	pop	{r4, pc}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	0800ab5c 	.word	0x0800ab5c

080096d8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past)
{
 80096d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 80096da:	4d06      	ldr	r5, [pc, #24]	; (80096f4 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 80096dc:	0006      	movs	r6, r0
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 80096de:	69eb      	ldr	r3, [r5, #28]
 80096e0:	4798      	blx	r3
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 80096e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 80096e4:	0004      	movs	r4, r0
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 80096e6:	0030      	movs	r0, r6
 80096e8:	4798      	blx	r3
	/* intentional wrap around. Works Ok if tick duation below 1ms */
	return UTIL_TimerDriver.Tick2ms(nowInTicks - pastInTicks);
 80096ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80096ec:	1a20      	subs	r0, r4, r0
 80096ee:	4798      	blx	r3
}
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	0800ab5c 	.word	0x0800ab5c

080096f8 <TimerExists>:
 * @param 	TimerObject Structure containing the timer object parameters
 * @retval 	1 (the object is already in the list) or 0
 */
bool TimerExists(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <TimerExists+0x18>)
 80096fa:	681b      	ldr	r3, [r3, #0]
	while (cur != NULL)
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <TimerExists+0xc>
		{
			return true;
		}
		cur = cur->Next;
	}
	return false;
 8009700:	0018      	movs	r0, r3
}
 8009702:	4770      	bx	lr
		if (cur == TimerObject)
 8009704:	4283      	cmp	r3, r0
 8009706:	d001      	beq.n	800970c <TimerExists+0x14>
		cur = cur->Next;
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	e7f7      	b.n	80096fc <TimerExists+0x4>
			return true;
 800970c:	2001      	movs	r0, #1
 800970e:	e7f8      	b.n	8009702 <TimerExists+0xa>
 8009710:	200013b4 	.word	0x200013b4

08009714 <TimerSetTimeout>:
/**
 * @brief Sets a timeout with the duration "timestamp"
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout(UTIL_TIMER_Object_t *TimerObject)
{
 8009714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8009716:	4e0b      	ldr	r6, [pc, #44]	; (8009744 <TimerSetTimeout+0x30>)
{
 8009718:	0004      	movs	r4, r0
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 800971a:	6a33      	ldr	r3, [r6, #32]
 800971c:	4798      	blx	r3
	TimerObject->IsPending = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	7223      	strb	r3, [r4, #8]
	/* In case deadline too soon */
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	69b7      	ldr	r7, [r6, #24]
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8009726:	0005      	movs	r5, r0
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	47b8      	blx	r7
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	1940      	adds	r0, r0, r5
 8009730:	4283      	cmp	r3, r0
 8009732:	d202      	bcs.n	800973a <TimerSetTimeout+0x26>
	{
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime() + minTicks;
 8009734:	47b8      	blx	r7
 8009736:	1940      	adds	r0, r0, r5
 8009738:	6020      	str	r0, [r4, #0]
	}
	UTIL_TimerDriver.StartTimerEvt(TimerObject->Timestamp);
 800973a:	68b3      	ldr	r3, [r6, #8]
 800973c:	6820      	ldr	r0, [r4, #0]
 800973e:	4798      	blx	r3
}
 8009740:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	0800ab5c 	.word	0x0800ab5c

08009748 <UTIL_TIMER_Stop>:
	if (NULL != TimerObject)
 8009748:	2101      	movs	r1, #1
{
 800974a:	0003      	movs	r3, r0
 800974c:	b570      	push	{r4, r5, r6, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 800974e:	0008      	movs	r0, r1
	if (NULL != TimerObject)
 8009750:	2b00      	cmp	r3, #0
 8009752:	d022      	beq.n	800979a <UTIL_TIMER_Stop+0x52>
		UTIL_TIMER_Object_t *prev = TimerListHead;
 8009754:	4d11      	ldr	r5, [pc, #68]	; (800979c <UTIL_TIMER_Stop+0x54>)
		TimerObject->IsReloadStopped = 1U;
 8009756:	7299      	strb	r1, [r3, #10]
		UTIL_TIMER_Object_t *prev = TimerListHead;
 8009758:	682a      	ldr	r2, [r5, #0]
		if (NULL != TimerListHead)
 800975a:	2a00      	cmp	r2, #0
 800975c:	d101      	bne.n	8009762 <UTIL_TIMER_Stop+0x1a>
			ret = UTIL_TIMER_OK;
 800975e:	2000      	movs	r0, #0
 8009760:	e01b      	b.n	800979a <UTIL_TIMER_Stop+0x52>
			TimerObject->IsRunning = 0U;
 8009762:	2600      	movs	r6, #0
 8009764:	725e      	strb	r6, [r3, #9]
				if (TimerListHead->Next != NULL)
 8009766:	6954      	ldr	r4, [r2, #20]
			if (TimerListHead == TimerObject) /* Stop the Head */
 8009768:	4293      	cmp	r3, r2
 800976a:	d10c      	bne.n	8009786 <UTIL_TIMER_Stop+0x3e>
				TimerListHead->IsPending = 0;
 800976c:	721e      	strb	r6, [r3, #8]
				if (TimerListHead->Next != NULL)
 800976e:	42b4      	cmp	r4, r6
 8009770:	d004      	beq.n	800977c <UTIL_TIMER_Stop+0x34>
					TimerSetTimeout(TimerListHead);
 8009772:	0020      	movs	r0, r4
					TimerListHead = TimerListHead->Next;
 8009774:	602c      	str	r4, [r5, #0]
					TimerSetTimeout(TimerListHead);
 8009776:	f7ff ffcd 	bl	8009714 <TimerSetTimeout>
 800977a:	e7f0      	b.n	800975e <UTIL_TIMER_Stop+0x16>
					UTIL_TimerDriver.StopTimerEvt();
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <UTIL_TIMER_Stop+0x58>)
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	4798      	blx	r3
					TimerListHead = NULL;
 8009782:	602c      	str	r4, [r5, #0]
 8009784:	e7eb      	b.n	800975e <UTIL_TIMER_Stop+0x16>
						cur = cur->Next;
 8009786:	0011      	movs	r1, r2
 8009788:	6952      	ldr	r2, [r2, #20]
				while (cur != NULL)
 800978a:	2a00      	cmp	r2, #0
 800978c:	d0e7      	beq.n	800975e <UTIL_TIMER_Stop+0x16>
					if (cur == TimerObject)
 800978e:	4293      	cmp	r3, r2
 8009790:	d1f9      	bne.n	8009786 <UTIL_TIMER_Stop+0x3e>
						if (cur->Next != NULL)
 8009792:	6958      	ldr	r0, [r3, #20]
							prev->Next = cur;
 8009794:	6148      	str	r0, [r1, #20]
						if (cur->Next != NULL)
 8009796:	2800      	cmp	r0, #0
 8009798:	d1e1      	bne.n	800975e <UTIL_TIMER_Stop+0x16>
}
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	200013b4 	.word	0x200013b4
 80097a0:	0800ab5c 	.word	0x0800ab5c

080097a4 <TimerInsertTimer>:
 *     			next timer to expire.
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <TimerInsertTimer+0x28>)
{
 80097a6:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80097a8:	681a      	ldr	r2, [r3, #0]
	UTIL_TIMER_Object_t *next = TimerListHead->Next;
 80097aa:	6953      	ldr	r3, [r2, #20]
	while (cur->Next != NULL)
 80097ac:	6951      	ldr	r1, [r2, #20]
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d102      	bne.n	80097b8 <TimerInsertTimer+0x14>
		{
			cur = next;
			next = next->Next;
		} else
		{
			cur->Next = TimerObject;
 80097b2:	6150      	str	r0, [r2, #20]
			TimerObject->Next = next;
 80097b4:	6141      	str	r1, [r0, #20]
			return;
		}
	}
	cur->Next = TimerObject;
	TimerObject->Next = NULL;
}
 80097b6:	bd10      	pop	{r4, pc}
		if (TimerObject->Timestamp > next->Timestamp)
 80097b8:	6804      	ldr	r4, [r0, #0]
 80097ba:	6819      	ldr	r1, [r3, #0]
 80097bc:	428c      	cmp	r4, r1
 80097be:	d902      	bls.n	80097c6 <TimerInsertTimer+0x22>
			next = next->Next;
 80097c0:	001a      	movs	r2, r3
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	e7f2      	b.n	80097ac <TimerInsertTimer+0x8>
 80097c6:	0019      	movs	r1, r3
 80097c8:	e7f3      	b.n	80097b2 <TimerInsertTimer+0xe>
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	200013b4 	.word	0x200013b4

080097d0 <TimerInsertNewHeadTimer>:
 * @remark 	The list is automatically sorted. The list head always contains the
 *         		next timer to expire.
 */
void TimerInsertNewHeadTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80097d0:	4a05      	ldr	r2, [pc, #20]	; (80097e8 <TimerInsertNewHeadTimer+0x18>)
{
 80097d2:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80097d4:	6813      	ldr	r3, [r2, #0]
	if (cur != NULL)
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <TimerInsertNewHeadTimer+0xe>
	{
		cur->IsPending = 0;
 80097da:	2100      	movs	r1, #0
 80097dc:	7219      	strb	r1, [r3, #8]
	}
	TimerObject->Next = cur;
 80097de:	6143      	str	r3, [r0, #20]
	TimerListHead = TimerObject;
 80097e0:	6010      	str	r0, [r2, #0]
	TimerSetTimeout(TimerListHead);
 80097e2:	f7ff ff97 	bl	8009714 <TimerSetTimeout>
}
 80097e6:	bd10      	pop	{r4, pc}
 80097e8:	200013b4 	.word	0x200013b4

080097ec <UTIL_TIMER_Start>:
{
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	0004      	movs	r4, r0
		ret = UTIL_TIMER_INVALID_PARAM;
 80097f0:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (TimerExists(TimerObject) == false)
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d01c      	beq.n	8009830 <UTIL_TIMER_Start+0x44>
 80097f6:	f7ff ff7f 	bl	80096f8 <TimerExists>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d118      	bne.n	8009830 <UTIL_TIMER_Start+0x44>
			&& (TimerObject->IsRunning == 0U))
 80097fe:	7a65      	ldrb	r5, [r4, #9]
 8009800:	2d00      	cmp	r5, #0
 8009802:	d124      	bne.n	800984e <UTIL_TIMER_Start+0x62>
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 8009804:	4e13      	ldr	r6, [pc, #76]	; (8009854 <UTIL_TIMER_Start+0x68>)
		ticks = TimerObject->ReloadValue;
 8009806:	6867      	ldr	r7, [r4, #4]
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 8009808:	6a33      	ldr	r3, [r6, #32]
 800980a:	4798      	blx	r3
		TimerObject->Timestamp = ticks;
 800980c:	4287      	cmp	r7, r0
 800980e:	d200      	bcs.n	8009812 <UTIL_TIMER_Start+0x26>
 8009810:	0007      	movs	r7, r0
		TimerObject->IsPending = 0U;
 8009812:	2380      	movs	r3, #128	; 0x80
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	8123      	strh	r3, [r4, #8]
		TimerObject->IsReloadStopped = 0U;
 8009818:	2300      	movs	r3, #0
		TimerObject->Timestamp = ticks;
 800981a:	6027      	str	r7, [r4, #0]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 800981c:	4f0e      	ldr	r7, [pc, #56]	; (8009858 <UTIL_TIMER_Start+0x6c>)
		TimerObject->IsReloadStopped = 0U;
 800981e:	72a3      	strb	r3, [r4, #10]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d106      	bne.n	8009834 <UTIL_TIMER_Start+0x48>
			UTIL_TimerDriver.SetTimerContext();       //Lay RTC va luu gia tri RTC luc hen gio
 8009826:	6933      	ldr	r3, [r6, #16]
 8009828:	4798      	blx	r3
				TimerInsertNewHeadTimer(TimerObject);
 800982a:	0020      	movs	r0, r4
 800982c:	f7ff ffd0 	bl	80097d0 <TimerInsertNewHeadTimer>
}
 8009830:	0028      	movs	r0, r5
 8009832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime(); //tinh xem da set alarm dc bao nhieu ms rôi
 8009834:	69b3      	ldr	r3, [r6, #24]
 8009836:	4798      	blx	r3
			TimerObject->Timestamp += elapsedTime;
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	18c0      	adds	r0, r0, r3
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 800983c:	683b      	ldr	r3, [r7, #0]
			TimerObject->Timestamp += elapsedTime;
 800983e:	6020      	str	r0, [r4, #0]
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4298      	cmp	r0, r3
 8009844:	d3f1      	bcc.n	800982a <UTIL_TIMER_Start+0x3e>
				TimerInsertTimer(TimerObject);     //chèn object vao giữa.
 8009846:	0020      	movs	r0, r4
 8009848:	f7ff ffac 	bl	80097a4 <TimerInsertTimer>
 800984c:	e7f0      	b.n	8009830 <UTIL_TIMER_Start+0x44>
		ret = UTIL_TIMER_INVALID_PARAM;
 800984e:	2501      	movs	r5, #1
 8009850:	e7ee      	b.n	8009830 <UTIL_TIMER_Start+0x44>
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	0800ab5c 	.word	0x0800ab5c
 8009858:	200013b4 	.word	0x200013b4

0800985c <UTIL_TIMER_SetPeriod>:
{
 800985c:	b510      	push	{r4, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 800985e:	2301      	movs	r3, #1
{
 8009860:	0004      	movs	r4, r0
 8009862:	0008      	movs	r0, r1
	if (NULL == TimerObject)
 8009864:	2c00      	cmp	r4, #0
 8009866:	d010      	beq.n	800988a <UTIL_TIMER_SetPeriod+0x2e>
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <UTIL_TIMER_SetPeriod+0x34>)
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	4798      	blx	r3
 800986e:	6060      	str	r0, [r4, #4]
		if (TimerExists(TimerObject))
 8009870:	0020      	movs	r0, r4
 8009872:	f7ff ff41 	bl	80096f8 <TimerExists>
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8009876:	2300      	movs	r3, #0
		if (TimerExists(TimerObject))
 8009878:	4298      	cmp	r0, r3
 800987a:	d006      	beq.n	800988a <UTIL_TIMER_SetPeriod+0x2e>
			(void) UTIL_TIMER_Stop(TimerObject);
 800987c:	0020      	movs	r0, r4
 800987e:	f7ff ff63 	bl	8009748 <UTIL_TIMER_Stop>
			ret = UTIL_TIMER_Start(TimerObject);
 8009882:	0020      	movs	r0, r4
 8009884:	f7ff ffb2 	bl	80097ec <UTIL_TIMER_Start>
 8009888:	0003      	movs	r3, r0
}
 800988a:	0018      	movs	r0, r3
 800988c:	bd10      	pop	{r4, pc}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	0800ab5c 	.word	0x0800ab5c

08009894 <UTIL_TIMER_IRQ_Handler>:
{
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = UTIL_TimerDriver.GetTimerContext();
 8009896:	4e1c      	ldr	r6, [pc, #112]	; (8009908 <UTIL_TIMER_IRQ_Handler+0x74>)
 8009898:	6973      	ldr	r3, [r6, #20]
 800989a:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 800989c:	6933      	ldr	r3, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 800989e:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 80098a0:	4798      	blx	r3
	if (TimerListHead != NULL)
 80098a2:	4d1a      	ldr	r5, [pc, #104]	; (800990c <UTIL_TIMER_IRQ_Handler+0x78>)
	DeltaContext = now - old; /*intentional wrap around */
 80098a4:	1b07      	subs	r7, r0, r4
	if (TimerListHead != NULL)
 80098a6:	682b      	ldr	r3, [r5, #0]
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 80098a8:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d108      	bne.n	80098c0 <UTIL_TIMER_IRQ_Handler+0x2c>
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80098ae:	2780      	movs	r7, #128	; 0x80
 80098b0:	007f      	lsls	r7, r7, #1
	while ((TimerListHead != NULL)
 80098b2:	682b      	ldr	r3, [r5, #0]
			&& ((TimerListHead->Timestamp == 0U)
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10b      	bne.n	80098d0 <UTIL_TIMER_IRQ_Handler+0x3c>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 80098b8:	6828      	ldr	r0, [r5, #0]
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d11e      	bne.n	80098fc <UTIL_TIMER_IRQ_Handler+0x68>
}
 80098be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (cur->Timestamp > DeltaContext)
 80098c0:	6819      	ldr	r1, [r3, #0]
				cur->Timestamp = 0;
 80098c2:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 80098c4:	42b9      	cmp	r1, r7
 80098c6:	d900      	bls.n	80098ca <UTIL_TIMER_IRQ_Handler+0x36>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 80098c8:	1862      	adds	r2, r4, r1
 80098ca:	601a      	str	r2, [r3, #0]
			cur = cur->Next;
 80098cc:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 80098ce:	e7ec      	b.n	80098aa <UTIL_TIMER_IRQ_Handler+0x16>
			&& ((TimerListHead->Timestamp == 0U)
 80098d0:	681c      	ldr	r4, [r3, #0]
 80098d2:	2c00      	cmp	r4, #0
 80098d4:	d003      	beq.n	80098de <UTIL_TIMER_IRQ_Handler+0x4a>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 80098d6:	69b3      	ldr	r3, [r6, #24]
 80098d8:	4798      	blx	r3
 80098da:	4284      	cmp	r4, r0
 80098dc:	d2ec      	bcs.n	80098b8 <UTIL_TIMER_IRQ_Handler+0x24>
		cur = TimerListHead;
 80098de:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 80098e0:	6963      	ldr	r3, [r4, #20]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 80098e2:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 80098e4:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80098ee:	8963      	ldrh	r3, [r4, #10]
 80098f0:	42bb      	cmp	r3, r7
 80098f2:	d1de      	bne.n	80098b2 <UTIL_TIMER_IRQ_Handler+0x1e>
			(void) UTIL_TIMER_Start(cur);
 80098f4:	0020      	movs	r0, r4
 80098f6:	f7ff ff79 	bl	80097ec <UTIL_TIMER_Start>
 80098fa:	e7da      	b.n	80098b2 <UTIL_TIMER_IRQ_Handler+0x1e>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 80098fc:	7a03      	ldrb	r3, [r0, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1dd      	bne.n	80098be <UTIL_TIMER_IRQ_Handler+0x2a>
		TimerSetTimeout(TimerListHead);
 8009902:	f7ff ff07 	bl	8009714 <TimerSetTimeout>
}
 8009906:	e7da      	b.n	80098be <UTIL_TIMER_IRQ_Handler+0x2a>
 8009908:	0800ab5c 	.word	0x0800ab5c
 800990c:	200013b4 	.word	0x200013b4

08009910 <UTIL_Set_RTC>:
 * 				- Set RTC
 * 				- Get TimerContext mơi nhất
 * 				- Set lại timer Alarm
 * */
void UTIL_Set_RTC (ST_TIME_FORMAT sTime)
{
 8009910:	b5f0      	push	{r4, r5, r6, r7, lr}
	UTIL_TIMER_Object_t *cur;
	uint32_t old, now, DeltaContext;
	old = UTIL_TimerDriver.GetTimerContext();
 8009912:	4e20      	ldr	r6, [pc, #128]	; (8009994 <UTIL_Set_RTC+0x84>)
{
 8009914:	b085      	sub	sp, #20
	old = UTIL_TimerDriver.GetTimerContext();
 8009916:	6973      	ldr	r3, [r6, #20]
{
 8009918:	9102      	str	r1, [sp, #8]
 800991a:	9203      	str	r2, [sp, #12]
 800991c:	9001      	str	r0, [sp, #4]
	old = UTIL_TimerDriver.GetTimerContext();
 800991e:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 8009920:	6937      	ldr	r7, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 8009922:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 8009924:	47b8      	blx	r7
	DeltaContext = now - old; /*intentional wrap around */
	/* update timeStamp based upon new Time Reference*/
	/* because delta context should never exceed 2^32*/
	if (TimerListHead != NULL)
 8009926:	4d1c      	ldr	r5, [pc, #112]	; (8009998 <UTIL_Set_RTC+0x88>)
	DeltaContext = now - old; /*intentional wrap around */
 8009928:	1b01      	subs	r1, r0, r4
	if (TimerListHead != NULL)
 800992a:	682b      	ldr	r3, [r5, #0]
		cur = TimerListHead;
		do
		{
			if (cur->Timestamp > DeltaContext)
			{
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800992c:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 800992e:	2b00      	cmp	r3, #0
 8009930:	d01e      	beq.n	8009970 <UTIL_Set_RTC+0x60>
			if (cur->Timestamp > DeltaContext)
 8009932:	6818      	ldr	r0, [r3, #0]
			} else
			{
				cur->Timestamp = 0;
 8009934:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 8009936:	4288      	cmp	r0, r1
 8009938:	d900      	bls.n	800993c <UTIL_Set_RTC+0x2c>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800993a:	1822      	adds	r2, r4, r0
 800993c:	601a      	str	r2, [r3, #0]
			}
			cur = cur->Next;
 800993e:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 8009940:	e7f5      	b.n	800992e <UTIL_Set_RTC+0x1e>
	}
	/* Execute expired timer and update the list */
	while ((TimerListHead != NULL)
			&& ((TimerListHead->Timestamp == 0U)
 8009942:	681c      	ldr	r4, [r3, #0]
 8009944:	2c00      	cmp	r4, #0
 8009946:	d003      	beq.n	8009950 <UTIL_Set_RTC+0x40>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 8009948:	69b3      	ldr	r3, [r6, #24]
 800994a:	4798      	blx	r3
 800994c:	4284      	cmp	r4, r0
 800994e:	d212      	bcs.n	8009976 <UTIL_Set_RTC+0x66>
	{
		cur = TimerListHead;
 8009950:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 8009952:	6963      	ldr	r3, [r4, #20]
		cur->IsPending = 0;
		cur->IsRunning = 0;
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 8009954:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 8009956:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 800995c:	68e3      	ldr	r3, [r4, #12]
 800995e:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8009960:	2280      	movs	r2, #128	; 0x80
 8009962:	8963      	ldrh	r3, [r4, #10]
 8009964:	0052      	lsls	r2, r2, #1
 8009966:	4293      	cmp	r3, r2
 8009968:	d102      	bne.n	8009970 <UTIL_Set_RTC+0x60>
		{
			(void) UTIL_TIMER_Start(cur);   //If period == head ->start -> Then restart again in TimerSetTimeout
 800996a:	0020      	movs	r0, r4
 800996c:	f7ff ff3e 	bl	80097ec <UTIL_TIMER_Start>
	while ((TimerListHead != NULL)
 8009970:	682b      	ldr	r3, [r5, #0]
			&& ((TimerListHead->Timestamp == 0U)
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e5      	bne.n	8009942 <UTIL_Set_RTC+0x32>
		}
	}
    // Set RTC new
	Set_RTC(sTime);
 8009976:	9902      	ldr	r1, [sp, #8]
 8009978:	9a03      	ldr	r2, [sp, #12]
 800997a:	9801      	ldr	r0, [sp, #4]
 800997c:	f7ff fe44 	bl	8009608 <Set_RTC>
    //Get Timer Context new
	UTIL_TimerDriver.SetTimerContext();
 8009980:	47b8      	blx	r7
	/* start the next TimerListHead if it exists and it is not pending*/  //Phai thay doi luon start lai
	if (TimerListHead != NULL)
 8009982:	6828      	ldr	r0, [r5, #0]
 8009984:	2800      	cmp	r0, #0
 8009986:	d101      	bne.n	800998c <UTIL_Set_RTC+0x7c>
	{
		TimerSetTimeout(TimerListHead);
	}
}
 8009988:	b005      	add	sp, #20
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		TimerSetTimeout(TimerListHead);
 800998c:	f7ff fec2 	bl	8009714 <TimerSetTimeout>
}
 8009990:	e7fa      	b.n	8009988 <UTIL_Set_RTC+0x78>
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	0800ab5c 	.word	0x0800ab5c
 8009998:	200013b4 	.word	0x200013b4

0800999c <Reset_Buff>:
}

void Reset_Buff(sData *str)
{
	uint16_t i;
	for (i = 0; i < str->Length_u16; i++)
 800999c:	2300      	movs	r3, #0
 800999e:	001a      	movs	r2, r3
 80099a0:	8881      	ldrh	r1, [r0, #4]
 80099a2:	4299      	cmp	r1, r3
 80099a4:	d801      	bhi.n	80099aa <Reset_Buff+0xe>
		*(str->Data_a8 +i ) = 0;
	str->Length_u16 = 0;
 80099a6:	8082      	strh	r2, [r0, #4]
}
 80099a8:	4770      	bx	lr
		*(str->Data_a8 +i ) = 0;
 80099aa:	6801      	ldr	r1, [r0, #0]
 80099ac:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < str->Length_u16; i++)
 80099ae:	3301      	adds	r3, #1
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	e7f5      	b.n	80099a0 <Reset_Buff+0x4>

080099b4 <UTIL_MEM_set>:
    //Length gap doi source
    sTaget->Length_u16 = sSource->Length_u16 * 2;
}

void UTIL_MEM_set( void *dst, uint8_t value, uint16_t size )
{
 80099b4:	b510      	push	{r4, lr}
    uint8_t* dst8= (uint8_t *) dst;
    while( size-- )
    {
        *dst8++ = value;
 80099b6:	f000 fab9 	bl	8009f2c <memset>
    }
}
 80099ba:	bd10      	pop	{r4, pc}

080099bc <LOG>:
uint8_t Convert_Hex_To_StringHex (uint8_t Hex)
{
    return ((Hex /10) *16 + (Hex %10));
}

void LOG(log_level_t level, const char* message, ...){
 80099bc:	b40e      	push	{r1, r2, r3}
	va_list args;
	va_start(args, message);
	char buffer[LOG_BUFFER_SIZE];
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 80099be:	2196      	movs	r1, #150	; 0x96
void LOG(log_level_t level, const char* message, ...){
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4c1c      	ldr	r4, [pc, #112]	; (8009a34 <LOG+0x78>)
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 80099c4:	0049      	lsls	r1, r1, #1
void LOG(log_level_t level, const char* message, ...){
 80099c6:	44a5      	add	sp, r4
 80099c8:	aba7      	add	r3, sp, #668	; 0x29c
 80099ca:	cb04      	ldmia	r3!, {r2}
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 80099cc:	ad08      	add	r5, sp, #32
void LOG(log_level_t level, const char* message, ...){
 80099ce:	0004      	movs	r4, r0
	va_end(args);
	SysTime_t curtime = SysTimeGet();
 80099d0:	ae06      	add	r6, sp, #24
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 80099d2:	0028      	movs	r0, r5
	va_start(args, message);
 80099d4:	9305      	str	r3, [sp, #20]
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 80099d6:	f000 fa9d 	bl	8009f14 <vsniprintf>
	SysTime_t curtime = SysTimeGet();
 80099da:	0030      	movs	r0, r6
 80099dc:	f000 f8e8 	bl	8009bb0 <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 80099e0:	21fa      	movs	r1, #250	; 0xfa
 80099e2:	9806      	ldr	r0, [sp, #24]
 80099e4:	0089      	lsls	r1, r1, #2
 80099e6:	f7f6 fc3b 	bl	8000260 <__aeabi_uidivmod>
 80099ea:	000b      	movs	r3, r1
 80099ec:	4912      	ldr	r1, [pc, #72]	; (8009a38 <LOG+0x7c>)
 80099ee:	2c04      	cmp	r4, #4
 80099f0:	d802      	bhi.n	80099f8 <LOG+0x3c>
 80099f2:	4a12      	ldr	r2, [pc, #72]	; (8009a3c <LOG+0x80>)
 80099f4:	00a4      	lsls	r4, r4, #2
 80099f6:	58a1      	ldr	r1, [r4, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s %s %s", second, curtime.SubSeconds, level_prefix, buffer, level_afterfix);
 80099f8:	4811      	ldr	r0, [pc, #68]	; (8009a40 <LOG+0x84>)
 80099fa:	9502      	str	r5, [sp, #8]
 80099fc:	9003      	str	r0, [sp, #12]
 80099fe:	9101      	str	r1, [sp, #4]
 8009a00:	2004      	movs	r0, #4
 8009a02:	5e31      	ldrsh	r1, [r6, r0]
 8009a04:	4a0f      	ldr	r2, [pc, #60]	; (8009a44 <LOG+0x88>)
 8009a06:	9100      	str	r1, [sp, #0]
 8009a08:	219e      	movs	r1, #158	; 0x9e
 8009a0a:	a853      	add	r0, sp, #332	; 0x14c
 8009a0c:	0049      	lsls	r1, r1, #1
 8009a0e:	f000 fa21 	bl	8009e54 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 8009a12:	a853      	add	r0, sp, #332	; 0x14c
 8009a14:	f7f6 fb78 	bl	8000108 <strlen>
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <LOG+0x8c>)
 8009a1a:	b282      	uxth	r2, r0
 8009a1c:	a953      	add	r1, sp, #332	; 0x14c
 8009a1e:	480b      	ldr	r0, [pc, #44]	; (8009a4c <LOG+0x90>)
 8009a20:	f7fb fe9c 	bl	800575c <HAL_UART_Transmit>
}
 8009a24:	23a3      	movs	r3, #163	; 0xa3
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	449d      	add	sp, r3
 8009a2a:	bc70      	pop	{r4, r5, r6}
 8009a2c:	bc08      	pop	{r3}
 8009a2e:	b003      	add	sp, #12
 8009a30:	4718      	bx	r3
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	fffffd74 	.word	0xfffffd74
 8009a38:	0800ad79 	.word	0x0800ad79
 8009a3c:	0800ab88 	.word	0x0800ab88
 8009a40:	0800ad77 	.word	0x0800ad77
 8009a44:	0800b08a 	.word	0x0800b08a
 8009a48:	00002710 	.word	0x00002710
 8009a4c:	200012dc 	.word	0x200012dc

08009a50 <LED_ON>:
    HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n" , 2, LOG_TIMEOUT);
}

void LED_ON (eLed_TypeDef Led)
{
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 8009a50:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <LED_ON+0x18>)
 8009a52:	0042      	lsls	r2, r0, #1
{
 8009a54:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 8009a56:	189b      	adds	r3, r3, r2
 8009a58:	8a99      	ldrh	r1, [r3, #20]
 8009a5a:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <LED_ON+0x1c>)
 8009a5c:	0080      	lsls	r0, r0, #2
 8009a5e:	2200      	movs	r2, #0
 8009a60:	58c0      	ldr	r0, [r0, r3]
 8009a62:	f7f9 ff31 	bl	80038c8 <HAL_GPIO_WritePin>
}
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	0800ab88 	.word	0x0800ab88
 8009a6c:	20000150 	.word	0x20000150

08009a70 <LED_OFF>:

void LED_OFF (eLed_TypeDef Led)
{
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <LED_OFF+0x18>)
 8009a72:	0042      	lsls	r2, r0, #1
{
 8009a74:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 8009a76:	189b      	adds	r3, r3, r2
 8009a78:	8a99      	ldrh	r1, [r3, #20]
 8009a7a:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <LED_OFF+0x1c>)
 8009a7c:	0080      	lsls	r0, r0, #2
 8009a7e:	2201      	movs	r2, #1
 8009a80:	58c0      	ldr	r0, [r0, r3]
 8009a82:	f7f9 ff21 	bl	80038c8 <HAL_GPIO_WritePin>
}
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	0800ab88 	.word	0x0800ab88
 8009a8c:	20000150 	.word	0x20000150

08009a90 <LED_TOGGLE>:

void LED_TOGGLE (eLed_TypeDef Led)
{
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <LED_TOGGLE+0x18>)
 8009a92:	0042      	lsls	r2, r0, #1
{
 8009a94:	b510      	push	{r4, lr}
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 8009a96:	189b      	adds	r3, r3, r2
 8009a98:	8a99      	ldrh	r1, [r3, #20]
 8009a9a:	4b04      	ldr	r3, [pc, #16]	; (8009aac <LED_TOGGLE+0x1c>)
 8009a9c:	0080      	lsls	r0, r0, #2
 8009a9e:	58c0      	ldr	r0, [r0, r3]
 8009aa0:	f7f9 ff18 	bl	80038d4 <HAL_GPIO_TogglePin>
}
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	46c0      	nop			; (mov r8, r8)
 8009aa8:	0800ab88 	.word	0x0800ab88
 8009aac:	20000150 	.word	0x20000150

08009ab0 <TRACE_UnLock>:
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8009ab0:	4a02      	ldr	r2, [pc, #8]	; (8009abc <TRACE_UnLock+0xc>)
 8009ab2:	8ad3      	ldrh	r3, [r2, #22]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	82d3      	strh	r3, [r2, #22]
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8009ab8:	4770      	bx	lr
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	200013cc 	.word	0x200013cc

08009ac0 <UTIL_ADV_TRACE_Init>:
{
 8009ac0:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8009ac2:	2218      	movs	r2, #24
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4807      	ldr	r0, [pc, #28]	; (8009ae4 <UTIL_ADV_TRACE_Init+0x24>)
 8009ac8:	f000 f86d 	bl	8009ba6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8009acc:	2280      	movs	r2, #128	; 0x80
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4805      	ldr	r0, [pc, #20]	; (8009ae8 <UTIL_ADV_TRACE_Init+0x28>)
 8009ad2:	0092      	lsls	r2, r2, #2
 8009ad4:	f000 f867 	bl	8009ba6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8009ad8:	4b04      	ldr	r3, [pc, #16]	; (8009aec <UTIL_ADV_TRACE_Init+0x2c>)
 8009ada:	4805      	ldr	r0, [pc, #20]	; (8009af0 <UTIL_ADV_TRACE_Init+0x30>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4798      	blx	r3
}
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	200013cc 	.word	0x200013cc
 8009ae8:	200014e4 	.word	0x200014e4
 8009aec:	0800a850 	.word	0x0800a850
 8009af0:	08009b0d 	.word	0x08009b0d

08009af4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8009af4:	4b01      	ldr	r3, [pc, #4]	; (8009afc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8009af6:	6058      	str	r0, [r3, #4]
}
 8009af8:	4770      	bx	lr
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	200013cc 	.word	0x200013cc

08009b00 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8009b00:	4b01      	ldr	r3, [pc, #4]	; (8009b08 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8009b02:	7218      	strb	r0, [r3, #8]
}
 8009b04:	4770      	bx	lr
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	200013cc 	.word	0x200013cc

08009b0c <TRACE_TxCpltCallback>:
{
 8009b0c:	b510      	push	{r4, lr}
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8009b0e:	4b1e      	ldr	r3, [pc, #120]	; (8009b88 <TRACE_TxCpltCallback+0x7c>)
 8009b10:	789a      	ldrb	r2, [r3, #2]
 8009b12:	2a02      	cmp	r2, #2
 8009b14:	d11d      	bne.n	8009b52 <TRACE_TxCpltCallback+0x46>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8009b16:	2200      	movs	r2, #0
 8009b18:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8009b1a:	8a58      	ldrh	r0, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8009b1c:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8009b1e:	4290      	cmp	r0, r2
 8009b20:	d02c      	beq.n	8009b7c <TRACE_TxCpltCallback+0x70>
 8009b22:	8ad9      	ldrh	r1, [r3, #22]
 8009b24:	2901      	cmp	r1, #1
 8009b26:	d129      	bne.n	8009b7c <TRACE_TxCpltCallback+0x70>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8009b28:	7899      	ldrb	r1, [r3, #2]
 8009b2a:	2901      	cmp	r1, #1
 8009b2c:	d117      	bne.n	8009b5e <TRACE_TxCpltCallback+0x52>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8009b2e:	8819      	ldrh	r1, [r3, #0]
 8009b30:	1a8a      	subs	r2, r1, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8009b32:	2102      	movs	r1, #2
 8009b34:	7099      	strb	r1, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8009b36:	2100      	movs	r1, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8009b38:	b292      	uxth	r2, r2
 8009b3a:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8009b3c:	8019      	strh	r1, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8009b3e:	428a      	cmp	r2, r1
 8009b40:	d10f      	bne.n	8009b62 <TRACE_TxCpltCallback+0x56>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8009b42:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8009b44:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8009b46:	8a19      	ldrh	r1, [r3, #16]
 8009b48:	4288      	cmp	r0, r1
 8009b4a:	d912      	bls.n	8009b72 <TRACE_TxCpltCallback+0x66>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8009b4c:	1a40      	subs	r0, r0, r1
 8009b4e:	8298      	strh	r0, [r3, #20]
 8009b50:	e007      	b.n	8009b62 <TRACE_TxCpltCallback+0x56>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8009b52:	8a1a      	ldrh	r2, [r3, #16]
 8009b54:	8a99      	ldrh	r1, [r3, #20]
 8009b56:	1852      	adds	r2, r2, r1
 8009b58:	05d2      	lsls	r2, r2, #23
 8009b5a:	0dd2      	lsrs	r2, r2, #23
 8009b5c:	e7dd      	b.n	8009b1a <TRACE_TxCpltCallback+0xe>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8009b5e:	2900      	cmp	r1, #0
 8009b60:	d0f1      	beq.n	8009b46 <TRACE_TxCpltCallback+0x3a>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8009b62:	8a18      	ldrh	r0, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8009b64:	8a99      	ldrh	r1, [r3, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8009b66:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <TRACE_TxCpltCallback+0x80>)
 8009b68:	18c0      	adds	r0, r0, r3
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8009b6a:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <TRACE_TxCpltCallback+0x84>)
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	4798      	blx	r3
}
 8009b70:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8009b72:	2280      	movs	r2, #128	; 0x80
 8009b74:	0092      	lsls	r2, r2, #2
 8009b76:	1a52      	subs	r2, r2, r1
 8009b78:	829a      	strh	r2, [r3, #20]
 8009b7a:	e7f2      	b.n	8009b62 <TRACE_TxCpltCallback+0x56>
    UTIL_ADV_TRACE_PostSendHook();
 8009b7c:	f7f8 fc32 	bl	80023e4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8009b80:	f7ff ff96 	bl	8009ab0 <TRACE_UnLock>
}
 8009b84:	e7f4      	b.n	8009b70 <TRACE_TxCpltCallback+0x64>
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	200013cc 	.word	0x200013cc
 8009b8c:	200014e4 	.word	0x200014e4
 8009b90:	0800a850 	.word	0x0800a850

08009b94 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8009b94:	2300      	movs	r3, #0
{
 8009b96:	b510      	push	{r4, lr}
  while( size-- )
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d100      	bne.n	8009b9e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 8009b9c:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 8009b9e:	5ccc      	ldrb	r4, [r1, r3]
 8009ba0:	54c4      	strb	r4, [r0, r3]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	e7f8      	b.n	8009b98 <UTIL_MEM_cpy_8+0x4>

08009ba6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009ba6:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 8009ba8:	f000 f9c0 	bl	8009f2c <memset>
  }
}
 8009bac:	bd10      	pop	{r4, pc}
	...

08009bb0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8009bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8009bb6:	4e10      	ldr	r6, [pc, #64]	; (8009bf8 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8009bb8:	8093      	strh	r3, [r2, #4]
 8009bba:	9300      	str	r3, [sp, #0]
{
 8009bbc:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8009bbe:	6933      	ldr	r3, [r6, #16]
 8009bc0:	a801      	add	r0, sp, #4
 8009bc2:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8009bc4:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8009bc6:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8009bc8:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8009bca:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8009bcc:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8009bce:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 8009bd0:	9b00      	ldr	r3, [sp, #0]
  if( c.SubSeconds >= 1000 )
 8009bd2:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 8009bd4:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8009bd6:	466b      	mov	r3, sp
 8009bd8:	889b      	ldrh	r3, [r3, #4]
  if( c.SubSeconds >= 1000 )
 8009bda:	0089      	lsls	r1, r1, #2
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8009bdc:	195b      	adds	r3, r3, r5
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8009be2:	428b      	cmp	r3, r1
 8009be4:	db03      	blt.n	8009bee <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <SysTimeGet+0x4c>)
    c.Seconds++;
 8009be8:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 8009bea:	18d2      	adds	r2, r2, r3
 8009bec:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	80a3      	strh	r3, [r4, #4]
}
 8009bf2:	0020      	movs	r0, r4
 8009bf4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	0800ab48 	.word	0x0800ab48
 8009bfc:	fffffc18 	.word	0xfffffc18

08009c00 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c02:	b09d      	sub	sp, #116	; 0x74
 8009c04:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8009c06:	2000      	movs	r0, #0
{
 8009c08:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8009c0a:	9f02      	ldr	r7, [sp, #8]
{
 8009c0c:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 8009c0e:	4281      	cmp	r1, r0
 8009c10:	dc0a      	bgt.n	8009c28 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 8009c12:	b01d      	add	sp, #116	; 0x74
 8009c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8009c16:	4298      	cmp	r0, r3
 8009c18:	da0d      	bge.n	8009c36 <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 8009c1a:	2925      	cmp	r1, #37	; 0x25
 8009c1c:	d00e      	beq.n	8009c3c <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 8009c1e:	7039      	strb	r1, [r7, #0]
      continue;
 8009c20:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 8009c22:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8009c24:	9a01      	ldr	r2, [sp, #4]
 8009c26:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 8009c28:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8009c2a:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 8009c2c:	1af8      	subs	r0, r7, r3
 8009c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c30:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8009c32:	2900      	cmp	r1, #0
 8009c34:	d1ef      	bne.n	8009c16 <tiny_vsnprintf_like+0x16>
  *str = '\0';
 8009c36:	2300      	movs	r3, #0
 8009c38:	703b      	strb	r3, [r7, #0]
  return str - buf;
 8009c3a:	e7ea      	b.n	8009c12 <tiny_vsnprintf_like+0x12>
    fmt++;
 8009c3c:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 8009c3e:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 8009c40:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 8009c42:	0010      	movs	r0, r2
 8009c44:	3830      	subs	r0, #48	; 0x30
 8009c46:	9203      	str	r2, [sp, #12]
 8009c48:	4241      	negs	r1, r0
 8009c4a:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 8009c4c:	b2c0      	uxtb	r0, r0
    flags = 0;
 8009c4e:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 8009c50:	2809      	cmp	r0, #9
 8009c52:	d92e      	bls.n	8009cb2 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 8009c54:	2001      	movs	r0, #1
 8009c56:	4240      	negs	r0, r0
 8009c58:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 8009c5a:	9801      	ldr	r0, [sp, #4]
 8009c5c:	7800      	ldrb	r0, [r0, #0]
 8009c5e:	2869      	cmp	r0, #105	; 0x69
 8009c60:	d100      	bne.n	8009c64 <tiny_vsnprintf_like+0x64>
 8009c62:	e0a4      	b.n	8009dae <tiny_vsnprintf_like+0x1ae>
 8009c64:	d829      	bhi.n	8009cba <tiny_vsnprintf_like+0xba>
 8009c66:	2863      	cmp	r0, #99	; 0x63
 8009c68:	d038      	beq.n	8009cdc <tiny_vsnprintf_like+0xdc>
 8009c6a:	2864      	cmp	r0, #100	; 0x64
 8009c6c:	d100      	bne.n	8009c70 <tiny_vsnprintf_like+0x70>
 8009c6e:	e09e      	b.n	8009dae <tiny_vsnprintf_like+0x1ae>
 8009c70:	2858      	cmp	r0, #88	; 0x58
 8009c72:	d066      	beq.n	8009d42 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 8009c74:	0039      	movs	r1, r7
 8009c76:	2825      	cmp	r0, #37	; 0x25
 8009c78:	d126      	bne.n	8009cc8 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 8009c7a:	9801      	ldr	r0, [sp, #4]
 8009c7c:	7800      	ldrb	r0, [r0, #0]
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d100      	bne.n	8009c84 <tiny_vsnprintf_like+0x84>
 8009c82:	e098      	b.n	8009db6 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 8009c84:	1c4f      	adds	r7, r1, #1
 8009c86:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 8009c88:	9902      	ldr	r1, [sp, #8]
 8009c8a:	1a79      	subs	r1, r7, r1
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	db00      	blt.n	8009c92 <tiny_vsnprintf_like+0x92>
 8009c90:	e08f      	b.n	8009db2 <tiny_vsnprintf_like+0x1b2>
 8009c92:	e7c7      	b.n	8009c24 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8009c94:	9d01      	ldr	r5, [sp, #4]
 8009c96:	3501      	adds	r5, #1
 8009c98:	9501      	str	r5, [sp, #4]
 8009c9a:	9d00      	ldr	r5, [sp, #0]
 8009c9c:	4375      	muls	r5, r6
 8009c9e:	182d      	adds	r5, r5, r0
 8009ca0:	3d30      	subs	r5, #48	; 0x30
 8009ca2:	9500      	str	r5, [sp, #0]
 8009ca4:	9801      	ldr	r0, [sp, #4]
 8009ca6:	7800      	ldrb	r0, [r0, #0]
 8009ca8:	0005      	movs	r5, r0
 8009caa:	3d30      	subs	r5, #48	; 0x30
 8009cac:	2d09      	cmp	r5, #9
 8009cae:	d9f1      	bls.n	8009c94 <tiny_vsnprintf_like+0x94>
 8009cb0:	e7d3      	b.n	8009c5a <tiny_vsnprintf_like+0x5a>
  int i = 0;
 8009cb2:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8009cb4:	260a      	movs	r6, #10
  int i = 0;
 8009cb6:	9000      	str	r0, [sp, #0]
 8009cb8:	e7f4      	b.n	8009ca4 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 8009cba:	2875      	cmp	r0, #117	; 0x75
 8009cbc:	d079      	beq.n	8009db2 <tiny_vsnprintf_like+0x1b2>
 8009cbe:	2510      	movs	r5, #16
 8009cc0:	2878      	cmp	r0, #120	; 0x78
 8009cc2:	d041      	beq.n	8009d48 <tiny_vsnprintf_like+0x148>
 8009cc4:	2873      	cmp	r0, #115	; 0x73
 8009cc6:	d01d      	beq.n	8009d04 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8009cc8:	2025      	movs	r0, #37	; 0x25
 8009cca:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 8009ccc:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 8009cce:	1c79      	adds	r1, r7, #1
 8009cd0:	000f      	movs	r7, r1
    base = 10;
 8009cd2:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 8009cd4:	1a08      	subs	r0, r1, r0
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	da36      	bge.n	8009d48 <tiny_vsnprintf_like+0x148>
 8009cda:	e7ce      	b.n	8009c7a <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 8009cdc:	2500      	movs	r5, #0
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dd00      	ble.n	8009ce6 <tiny_vsnprintf_like+0xe6>
 8009ce4:	1e5d      	subs	r5, r3, #1
 8009ce6:	002a      	movs	r2, r5
 8009ce8:	2120      	movs	r1, #32
 8009cea:	0038      	movs	r0, r7
 8009cec:	f000 f91e 	bl	8009f2c <memset>
 8009cf0:	9a00      	ldr	r2, [sp, #0]
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	197d      	adds	r5, r7, r5
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	dd00      	ble.n	8009cfc <tiny_vsnprintf_like+0xfc>
 8009cfa:	0013      	movs	r3, r2
 8009cfc:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 8009cfe:	cc08      	ldmia	r4!, {r3}
 8009d00:	702b      	strb	r3, [r5, #0]
        continue;
 8009d02:	e78f      	b.n	8009c24 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 8009d04:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d100      	bne.n	8009d0c <tiny_vsnprintf_like+0x10c>
 8009d0a:	4e4f      	ldr	r6, [pc, #316]	; (8009e48 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 8009d0c:	0030      	movs	r0, r6
 8009d0e:	f7f6 f9fb 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 8009d12:	2300      	movs	r3, #0
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 8009d18:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 8009d1a:	4283      	cmp	r3, r0
 8009d1c:	db01      	blt.n	8009d22 <tiny_vsnprintf_like+0x122>
 8009d1e:	1a1b      	subs	r3, r3, r0
 8009d20:	9303      	str	r3, [sp, #12]
 8009d22:	0038      	movs	r0, r7
 8009d24:	2120      	movs	r1, #32
 8009d26:	9a03      	ldr	r2, [sp, #12]
 8009d28:	f000 f900 	bl	8009f2c <memset>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8009d30:	2300      	movs	r3, #0
 8009d32:	42ab      	cmp	r3, r5
 8009d34:	db01      	blt.n	8009d3a <tiny_vsnprintf_like+0x13a>
 8009d36:	197f      	adds	r7, r7, r5
 8009d38:	e774      	b.n	8009c24 <tiny_vsnprintf_like+0x24>
 8009d3a:	5cf2      	ldrb	r2, [r6, r3]
 8009d3c:	54fa      	strb	r2, [r7, r3]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	e7f7      	b.n	8009d32 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 8009d42:	2240      	movs	r2, #64	; 0x40
        base = 16;
 8009d44:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 8009d46:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8009d48:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 8009d4a:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8009d4c:	1a3e      	subs	r6, r7, r0
 8009d4e:	0020      	movs	r0, r4
 8009d50:	1b9e      	subs	r6, r3, r6
 8009d52:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 8009d54:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8009d56:	9004      	str	r0, [sp, #16]
  if (type & UPPERCASE)  dig = upper_digits;
 8009d58:	483c      	ldr	r0, [pc, #240]	; (8009e4c <tiny_vsnprintf_like+0x24c>)
 8009d5a:	9007      	str	r0, [sp, #28]
 8009d5c:	2040      	movs	r0, #64	; 0x40
 8009d5e:	4202      	tst	r2, r0
 8009d60:	d101      	bne.n	8009d66 <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 8009d62:	4a3b      	ldr	r2, [pc, #236]	; (8009e50 <tiny_vsnprintf_like+0x250>)
 8009d64:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 8009d66:	2230      	movs	r2, #48	; 0x30
 8009d68:	9208      	str	r2, [sp, #32]
 8009d6a:	9a03      	ldr	r2, [sp, #12]
 8009d6c:	2a30      	cmp	r2, #48	; 0x30
 8009d6e:	d001      	beq.n	8009d74 <tiny_vsnprintf_like+0x174>
 8009d70:	2220      	movs	r2, #32
 8009d72:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d023      	beq.n	8009dc0 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	da21      	bge.n	8009dc0 <tiny_vsnprintf_like+0x1c0>
      size--;
 8009d7c:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 8009d7e:	425b      	negs	r3, r3
      size--;
 8009d80:	3a01      	subs	r2, #1
 8009d82:	9200      	str	r2, [sp, #0]
      sign = '-';
 8009d84:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 8009d86:	2400      	movs	r4, #0
 8009d88:	9205      	str	r2, [sp, #20]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	0029      	movs	r1, r5
 8009d8e:	9306      	str	r3, [sp, #24]
 8009d90:	f7f6 fa66 	bl	8000260 <__aeabi_uidivmod>
 8009d94:	0022      	movs	r2, r4
 8009d96:	4684      	mov	ip, r0
 8009d98:	9b07      	ldr	r3, [sp, #28]
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	5c59      	ldrb	r1, [r3, r1]
 8009d9e:	ab0b      	add	r3, sp, #44	; 0x2c
 8009da0:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 8009da2:	9a06      	ldr	r2, [sp, #24]
 8009da4:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 8009da6:	4663      	mov	r3, ip
    while (num != 0)
 8009da8:	4295      	cmp	r5, r2
 8009daa:	d9ee      	bls.n	8009d8a <tiny_vsnprintf_like+0x18a>
 8009dac:	e011      	b.n	8009dd2 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 8009dae:	2202      	movs	r2, #2
 8009db0:	430a      	orrs	r2, r1
    base = 10;
 8009db2:	250a      	movs	r5, #10
 8009db4:	e7c8      	b.n	8009d48 <tiny_vsnprintf_like+0x148>
          --fmt;
 8009db6:	9801      	ldr	r0, [sp, #4]
 8009db8:	000f      	movs	r7, r1
 8009dba:	3801      	subs	r0, #1
 8009dbc:	9001      	str	r0, [sp, #4]
 8009dbe:	e763      	b.n	8009c88 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <tiny_vsnprintf_like+0x1c8>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	e7de      	b.n	8009d86 <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 8009dc8:	2130      	movs	r1, #48	; 0x30
 8009dca:	2001      	movs	r0, #1
 8009dcc:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dce:	7011      	strb	r1, [r2, #0]
 8009dd0:	9305      	str	r3, [sp, #20]
  size -= precision;
 8009dd2:	9b00      	ldr	r3, [sp, #0]
 8009dd4:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	2b30      	cmp	r3, #48	; 0x30
 8009dda:	d006      	beq.n	8009dea <tiny_vsnprintf_like+0x1ea>
 8009ddc:	003b      	movs	r3, r7
 8009dde:	2120      	movs	r1, #32
 8009de0:	0022      	movs	r2, r4
 8009de2:	001f      	movs	r7, r3
 8009de4:	3c01      	subs	r4, #1
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	dc0c      	bgt.n	8009e04 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d029      	beq.n	8009e44 <tiny_vsnprintf_like+0x244>
 8009df0:	232d      	movs	r3, #45	; 0x2d
 8009df2:	3e01      	subs	r6, #1
 8009df4:	1c7a      	adds	r2, r7, #1
 8009df6:	703b      	strb	r3, [r7, #0]
 8009df8:	2e00      	cmp	r6, #0
 8009dfa:	d009      	beq.n	8009e10 <tiny_vsnprintf_like+0x210>
 8009dfc:	0013      	movs	r3, r2
 8009dfe:	0031      	movs	r1, r6
 8009e00:	1ba4      	subs	r4, r4, r6
 8009e02:	e00f      	b.n	8009e24 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8009e04:	3301      	adds	r3, #1
 8009e06:	3e01      	subs	r6, #1
 8009e08:	001a      	movs	r2, r3
 8009e0a:	7039      	strb	r1, [r7, #0]
 8009e0c:	2e00      	cmp	r6, #0
 8009e0e:	d1e7      	bne.n	8009de0 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8009e10:	0017      	movs	r7, r2
 8009e12:	9c04      	ldr	r4, [sp, #16]
 8009e14:	e706      	b.n	8009c24 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 8009e16:	9e08      	ldr	r6, [sp, #32]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	3901      	subs	r1, #1
 8009e1c:	001a      	movs	r2, r3
 8009e1e:	702e      	strb	r6, [r5, #0]
 8009e20:	2900      	cmp	r1, #0
 8009e22:	d0f5      	beq.n	8009e10 <tiny_vsnprintf_like+0x210>
 8009e24:	1862      	adds	r2, r4, r1
 8009e26:	001d      	movs	r5, r3
 8009e28:	2a00      	cmp	r2, #0
 8009e2a:	dcf4      	bgt.n	8009e16 <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8009e2c:	ac0b      	add	r4, sp, #44	; 0x2c
 8009e2e:	1859      	adds	r1, r3, r1
 8009e30:	001a      	movs	r2, r3
 8009e32:	3801      	subs	r0, #1
 8009e34:	d3ec      	bcc.n	8009e10 <tiny_vsnprintf_like+0x210>
 8009e36:	5d05      	ldrb	r5, [r0, r4]
 8009e38:	1c53      	adds	r3, r2, #1
 8009e3a:	7015      	strb	r5, [r2, #0]
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	d1f7      	bne.n	8009e30 <tiny_vsnprintf_like+0x230>
 8009e40:	001a      	movs	r2, r3
 8009e42:	e7e5      	b.n	8009e10 <tiny_vsnprintf_like+0x210>
 8009e44:	003a      	movs	r2, r7
 8009e46:	e7d9      	b.n	8009dfc <tiny_vsnprintf_like+0x1fc>
 8009e48:	0800b0da 	.word	0x0800b0da
 8009e4c:	0800b106 	.word	0x0800b106
 8009e50:	0800b0e1 	.word	0x0800b0e1

08009e54 <sniprintf>:
 8009e54:	b40c      	push	{r2, r3}
 8009e56:	b530      	push	{r4, r5, lr}
 8009e58:	4b17      	ldr	r3, [pc, #92]	; (8009eb8 <sniprintf+0x64>)
 8009e5a:	000c      	movs	r4, r1
 8009e5c:	681d      	ldr	r5, [r3, #0]
 8009e5e:	b09d      	sub	sp, #116	; 0x74
 8009e60:	2900      	cmp	r1, #0
 8009e62:	da08      	bge.n	8009e76 <sniprintf+0x22>
 8009e64:	238b      	movs	r3, #139	; 0x8b
 8009e66:	2001      	movs	r0, #1
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	4240      	negs	r0, r0
 8009e6c:	b01d      	add	sp, #116	; 0x74
 8009e6e:	bc30      	pop	{r4, r5}
 8009e70:	bc08      	pop	{r3}
 8009e72:	b002      	add	sp, #8
 8009e74:	4718      	bx	r3
 8009e76:	2382      	movs	r3, #130	; 0x82
 8009e78:	466a      	mov	r2, sp
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	8293      	strh	r3, [r2, #20]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	9002      	str	r0, [sp, #8]
 8009e82:	9006      	str	r0, [sp, #24]
 8009e84:	4299      	cmp	r1, r3
 8009e86:	d000      	beq.n	8009e8a <sniprintf+0x36>
 8009e88:	1e4b      	subs	r3, r1, #1
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	466a      	mov	r2, sp
 8009e92:	425b      	negs	r3, r3
 8009e94:	82d3      	strh	r3, [r2, #22]
 8009e96:	0028      	movs	r0, r5
 8009e98:	ab21      	add	r3, sp, #132	; 0x84
 8009e9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e9c:	a902      	add	r1, sp, #8
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	f000 f9e2 	bl	800a268 <_svfiprintf_r>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	da01      	bge.n	8009eac <sniprintf+0x58>
 8009ea8:	238b      	movs	r3, #139	; 0x8b
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	2c00      	cmp	r4, #0
 8009eae:	d0dd      	beq.n	8009e6c <sniprintf+0x18>
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	9b02      	ldr	r3, [sp, #8]
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	e7d9      	b.n	8009e6c <sniprintf+0x18>
 8009eb8:	200001ac 	.word	0x200001ac

08009ebc <_vsniprintf_r>:
 8009ebc:	b530      	push	{r4, r5, lr}
 8009ebe:	0014      	movs	r4, r2
 8009ec0:	0005      	movs	r5, r0
 8009ec2:	001a      	movs	r2, r3
 8009ec4:	b09b      	sub	sp, #108	; 0x6c
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	da05      	bge.n	8009ed6 <_vsniprintf_r+0x1a>
 8009eca:	238b      	movs	r3, #139	; 0x8b
 8009ecc:	6003      	str	r3, [r0, #0]
 8009ece:	2001      	movs	r0, #1
 8009ed0:	4240      	negs	r0, r0
 8009ed2:	b01b      	add	sp, #108	; 0x6c
 8009ed4:	bd30      	pop	{r4, r5, pc}
 8009ed6:	2382      	movs	r3, #130	; 0x82
 8009ed8:	4668      	mov	r0, sp
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	8183      	strh	r3, [r0, #12]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9100      	str	r1, [sp, #0]
 8009ee2:	9104      	str	r1, [sp, #16]
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	d000      	beq.n	8009eea <_vsniprintf_r+0x2e>
 8009ee8:	1e63      	subs	r3, r4, #1
 8009eea:	9302      	str	r3, [sp, #8]
 8009eec:	9305      	str	r3, [sp, #20]
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4669      	mov	r1, sp
 8009ef2:	425b      	negs	r3, r3
 8009ef4:	81cb      	strh	r3, [r1, #14]
 8009ef6:	0028      	movs	r0, r5
 8009ef8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009efa:	f000 f9b5 	bl	800a268 <_svfiprintf_r>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	da01      	bge.n	8009f06 <_vsniprintf_r+0x4a>
 8009f02:	238b      	movs	r3, #139	; 0x8b
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	2c00      	cmp	r4, #0
 8009f08:	d0e3      	beq.n	8009ed2 <_vsniprintf_r+0x16>
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	9b00      	ldr	r3, [sp, #0]
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e7df      	b.n	8009ed2 <_vsniprintf_r+0x16>
	...

08009f14 <vsniprintf>:
 8009f14:	b513      	push	{r0, r1, r4, lr}
 8009f16:	4c04      	ldr	r4, [pc, #16]	; (8009f28 <vsniprintf+0x14>)
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	0013      	movs	r3, r2
 8009f1c:	000a      	movs	r2, r1
 8009f1e:	0001      	movs	r1, r0
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	f7ff ffcb 	bl	8009ebc <_vsniprintf_r>
 8009f26:	bd16      	pop	{r1, r2, r4, pc}
 8009f28:	200001ac 	.word	0x200001ac

08009f2c <memset>:
 8009f2c:	0003      	movs	r3, r0
 8009f2e:	1882      	adds	r2, r0, r2
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d100      	bne.n	8009f36 <memset+0xa>
 8009f34:	4770      	bx	lr
 8009f36:	7019      	strb	r1, [r3, #0]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	e7f9      	b.n	8009f30 <memset+0x4>

08009f3c <__errno>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <__errno+0x8>)
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	4770      	bx	lr
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	200001ac 	.word	0x200001ac

08009f48 <__libc_init_array>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	4c0c      	ldr	r4, [pc, #48]	; (8009f80 <__libc_init_array+0x38>)
 8009f4e:	4d0d      	ldr	r5, [pc, #52]	; (8009f84 <__libc_init_array+0x3c>)
 8009f50:	1b64      	subs	r4, r4, r5
 8009f52:	10a4      	asrs	r4, r4, #2
 8009f54:	42a6      	cmp	r6, r4
 8009f56:	d109      	bne.n	8009f6c <__libc_init_array+0x24>
 8009f58:	2600      	movs	r6, #0
 8009f5a:	f000 fc6d 	bl	800a838 <_init>
 8009f5e:	4c0a      	ldr	r4, [pc, #40]	; (8009f88 <__libc_init_array+0x40>)
 8009f60:	4d0a      	ldr	r5, [pc, #40]	; (8009f8c <__libc_init_array+0x44>)
 8009f62:	1b64      	subs	r4, r4, r5
 8009f64:	10a4      	asrs	r4, r4, #2
 8009f66:	42a6      	cmp	r6, r4
 8009f68:	d105      	bne.n	8009f76 <__libc_init_array+0x2e>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	00b3      	lsls	r3, r6, #2
 8009f6e:	58eb      	ldr	r3, [r5, r3]
 8009f70:	4798      	blx	r3
 8009f72:	3601      	adds	r6, #1
 8009f74:	e7ee      	b.n	8009f54 <__libc_init_array+0xc>
 8009f76:	00b3      	lsls	r3, r6, #2
 8009f78:	58eb      	ldr	r3, [r5, r3]
 8009f7a:	4798      	blx	r3
 8009f7c:	3601      	adds	r6, #1
 8009f7e:	e7f2      	b.n	8009f66 <__libc_init_array+0x1e>
 8009f80:	0800b168 	.word	0x0800b168
 8009f84:	0800b168 	.word	0x0800b168
 8009f88:	0800b16c 	.word	0x0800b16c
 8009f8c:	0800b168 	.word	0x0800b168

08009f90 <__retarget_lock_acquire_recursive>:
 8009f90:	4770      	bx	lr

08009f92 <__retarget_lock_release_recursive>:
 8009f92:	4770      	bx	lr

08009f94 <memcpy>:
 8009f94:	2300      	movs	r3, #0
 8009f96:	b510      	push	{r4, lr}
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d100      	bne.n	8009f9e <memcpy+0xa>
 8009f9c:	bd10      	pop	{r4, pc}
 8009f9e:	5ccc      	ldrb	r4, [r1, r3]
 8009fa0:	54c4      	strb	r4, [r0, r3]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	e7f8      	b.n	8009f98 <memcpy+0x4>
	...

08009fa8 <_free_r>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	0005      	movs	r5, r0
 8009fac:	2900      	cmp	r1, #0
 8009fae:	d010      	beq.n	8009fd2 <_free_r+0x2a>
 8009fb0:	1f0c      	subs	r4, r1, #4
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da00      	bge.n	8009fba <_free_r+0x12>
 8009fb8:	18e4      	adds	r4, r4, r3
 8009fba:	0028      	movs	r0, r5
 8009fbc:	f000 f8e2 	bl	800a184 <__malloc_lock>
 8009fc0:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <_free_r+0x90>)
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d105      	bne.n	8009fd4 <_free_r+0x2c>
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	6014      	str	r4, [r2, #0]
 8009fcc:	0028      	movs	r0, r5
 8009fce:	f000 f8e1 	bl	800a194 <__malloc_unlock>
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d908      	bls.n	8009fea <_free_r+0x42>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	1821      	adds	r1, r4, r0
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	d1f3      	bne.n	8009fc8 <_free_r+0x20>
 8009fe0:	6819      	ldr	r1, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	1809      	adds	r1, r1, r0
 8009fe6:	6021      	str	r1, [r4, #0]
 8009fe8:	e7ee      	b.n	8009fc8 <_free_r+0x20>
 8009fea:	001a      	movs	r2, r3
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <_free_r+0x4e>
 8009ff2:	42a3      	cmp	r3, r4
 8009ff4:	d9f9      	bls.n	8009fea <_free_r+0x42>
 8009ff6:	6811      	ldr	r1, [r2, #0]
 8009ff8:	1850      	adds	r0, r2, r1
 8009ffa:	42a0      	cmp	r0, r4
 8009ffc:	d10b      	bne.n	800a016 <_free_r+0x6e>
 8009ffe:	6820      	ldr	r0, [r4, #0]
 800a000:	1809      	adds	r1, r1, r0
 800a002:	1850      	adds	r0, r2, r1
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	4283      	cmp	r3, r0
 800a008:	d1e0      	bne.n	8009fcc <_free_r+0x24>
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	1841      	adds	r1, r0, r1
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	6053      	str	r3, [r2, #4]
 800a014:	e7da      	b.n	8009fcc <_free_r+0x24>
 800a016:	42a0      	cmp	r0, r4
 800a018:	d902      	bls.n	800a020 <_free_r+0x78>
 800a01a:	230c      	movs	r3, #12
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	e7d5      	b.n	8009fcc <_free_r+0x24>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	1821      	adds	r1, r4, r0
 800a024:	428b      	cmp	r3, r1
 800a026:	d103      	bne.n	800a030 <_free_r+0x88>
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	1809      	adds	r1, r1, r0
 800a02e:	6021      	str	r1, [r4, #0]
 800a030:	6063      	str	r3, [r4, #4]
 800a032:	6054      	str	r4, [r2, #4]
 800a034:	e7ca      	b.n	8009fcc <_free_r+0x24>
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	20001824 	.word	0x20001824

0800a03c <sbrk_aligned>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4e0f      	ldr	r6, [pc, #60]	; (800a07c <sbrk_aligned+0x40>)
 800a040:	000d      	movs	r5, r1
 800a042:	6831      	ldr	r1, [r6, #0]
 800a044:	0004      	movs	r4, r0
 800a046:	2900      	cmp	r1, #0
 800a048:	d102      	bne.n	800a050 <sbrk_aligned+0x14>
 800a04a:	f000 fba1 	bl	800a790 <_sbrk_r>
 800a04e:	6030      	str	r0, [r6, #0]
 800a050:	0029      	movs	r1, r5
 800a052:	0020      	movs	r0, r4
 800a054:	f000 fb9c 	bl	800a790 <_sbrk_r>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d00a      	beq.n	800a072 <sbrk_aligned+0x36>
 800a05c:	2303      	movs	r3, #3
 800a05e:	1cc5      	adds	r5, r0, #3
 800a060:	439d      	bics	r5, r3
 800a062:	42a8      	cmp	r0, r5
 800a064:	d007      	beq.n	800a076 <sbrk_aligned+0x3a>
 800a066:	1a29      	subs	r1, r5, r0
 800a068:	0020      	movs	r0, r4
 800a06a:	f000 fb91 	bl	800a790 <_sbrk_r>
 800a06e:	3001      	adds	r0, #1
 800a070:	d101      	bne.n	800a076 <sbrk_aligned+0x3a>
 800a072:	2501      	movs	r5, #1
 800a074:	426d      	negs	r5, r5
 800a076:	0028      	movs	r0, r5
 800a078:	bd70      	pop	{r4, r5, r6, pc}
 800a07a:	46c0      	nop			; (mov r8, r8)
 800a07c:	20001828 	.word	0x20001828

0800a080 <_malloc_r>:
 800a080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a082:	2203      	movs	r2, #3
 800a084:	1ccb      	adds	r3, r1, #3
 800a086:	4393      	bics	r3, r2
 800a088:	3308      	adds	r3, #8
 800a08a:	0006      	movs	r6, r0
 800a08c:	001f      	movs	r7, r3
 800a08e:	2b0c      	cmp	r3, #12
 800a090:	d238      	bcs.n	800a104 <_malloc_r+0x84>
 800a092:	270c      	movs	r7, #12
 800a094:	42b9      	cmp	r1, r7
 800a096:	d837      	bhi.n	800a108 <_malloc_r+0x88>
 800a098:	0030      	movs	r0, r6
 800a09a:	f000 f873 	bl	800a184 <__malloc_lock>
 800a09e:	4b38      	ldr	r3, [pc, #224]	; (800a180 <_malloc_r+0x100>)
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	001c      	movs	r4, r3
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	d133      	bne.n	800a112 <_malloc_r+0x92>
 800a0aa:	0039      	movs	r1, r7
 800a0ac:	0030      	movs	r0, r6
 800a0ae:	f7ff ffc5 	bl	800a03c <sbrk_aligned>
 800a0b2:	0004      	movs	r4, r0
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d15e      	bne.n	800a176 <_malloc_r+0xf6>
 800a0b8:	9b00      	ldr	r3, [sp, #0]
 800a0ba:	681c      	ldr	r4, [r3, #0]
 800a0bc:	0025      	movs	r5, r4
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	d14e      	bne.n	800a160 <_malloc_r+0xe0>
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	d051      	beq.n	800a16a <_malloc_r+0xea>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	0029      	movs	r1, r5
 800a0ca:	18e3      	adds	r3, r4, r3
 800a0cc:	0030      	movs	r0, r6
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	f000 fb5e 	bl	800a790 <_sbrk_r>
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	4283      	cmp	r3, r0
 800a0d8:	d147      	bne.n	800a16a <_malloc_r+0xea>
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	0030      	movs	r0, r6
 800a0de:	1aff      	subs	r7, r7, r3
 800a0e0:	0039      	movs	r1, r7
 800a0e2:	f7ff ffab 	bl	800a03c <sbrk_aligned>
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d03f      	beq.n	800a16a <_malloc_r+0xea>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	19db      	adds	r3, r3, r7
 800a0ee:	6023      	str	r3, [r4, #0]
 800a0f0:	9b00      	ldr	r3, [sp, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d040      	beq.n	800a17a <_malloc_r+0xfa>
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	42a2      	cmp	r2, r4
 800a0fc:	d133      	bne.n	800a166 <_malloc_r+0xe6>
 800a0fe:	2200      	movs	r2, #0
 800a100:	605a      	str	r2, [r3, #4]
 800a102:	e014      	b.n	800a12e <_malloc_r+0xae>
 800a104:	2b00      	cmp	r3, #0
 800a106:	dac5      	bge.n	800a094 <_malloc_r+0x14>
 800a108:	230c      	movs	r3, #12
 800a10a:	2500      	movs	r5, #0
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	0028      	movs	r0, r5
 800a110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a112:	6821      	ldr	r1, [r4, #0]
 800a114:	1bc9      	subs	r1, r1, r7
 800a116:	d420      	bmi.n	800a15a <_malloc_r+0xda>
 800a118:	290b      	cmp	r1, #11
 800a11a:	d918      	bls.n	800a14e <_malloc_r+0xce>
 800a11c:	19e2      	adds	r2, r4, r7
 800a11e:	6027      	str	r7, [r4, #0]
 800a120:	42a3      	cmp	r3, r4
 800a122:	d112      	bne.n	800a14a <_malloc_r+0xca>
 800a124:	9b00      	ldr	r3, [sp, #0]
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	6863      	ldr	r3, [r4, #4]
 800a12a:	6011      	str	r1, [r2, #0]
 800a12c:	6053      	str	r3, [r2, #4]
 800a12e:	0030      	movs	r0, r6
 800a130:	0025      	movs	r5, r4
 800a132:	f000 f82f 	bl	800a194 <__malloc_unlock>
 800a136:	2207      	movs	r2, #7
 800a138:	350b      	adds	r5, #11
 800a13a:	1d23      	adds	r3, r4, #4
 800a13c:	4395      	bics	r5, r2
 800a13e:	1aea      	subs	r2, r5, r3
 800a140:	429d      	cmp	r5, r3
 800a142:	d0e4      	beq.n	800a10e <_malloc_r+0x8e>
 800a144:	1b5b      	subs	r3, r3, r5
 800a146:	50a3      	str	r3, [r4, r2]
 800a148:	e7e1      	b.n	800a10e <_malloc_r+0x8e>
 800a14a:	605a      	str	r2, [r3, #4]
 800a14c:	e7ec      	b.n	800a128 <_malloc_r+0xa8>
 800a14e:	6862      	ldr	r2, [r4, #4]
 800a150:	42a3      	cmp	r3, r4
 800a152:	d1d5      	bne.n	800a100 <_malloc_r+0x80>
 800a154:	9b00      	ldr	r3, [sp, #0]
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e7e9      	b.n	800a12e <_malloc_r+0xae>
 800a15a:	0023      	movs	r3, r4
 800a15c:	6864      	ldr	r4, [r4, #4]
 800a15e:	e7a2      	b.n	800a0a6 <_malloc_r+0x26>
 800a160:	002c      	movs	r4, r5
 800a162:	686d      	ldr	r5, [r5, #4]
 800a164:	e7ab      	b.n	800a0be <_malloc_r+0x3e>
 800a166:	0013      	movs	r3, r2
 800a168:	e7c4      	b.n	800a0f4 <_malloc_r+0x74>
 800a16a:	230c      	movs	r3, #12
 800a16c:	0030      	movs	r0, r6
 800a16e:	6033      	str	r3, [r6, #0]
 800a170:	f000 f810 	bl	800a194 <__malloc_unlock>
 800a174:	e7cb      	b.n	800a10e <_malloc_r+0x8e>
 800a176:	6027      	str	r7, [r4, #0]
 800a178:	e7d9      	b.n	800a12e <_malloc_r+0xae>
 800a17a:	605b      	str	r3, [r3, #4]
 800a17c:	deff      	udf	#255	; 0xff
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	20001824 	.word	0x20001824

0800a184 <__malloc_lock>:
 800a184:	b510      	push	{r4, lr}
 800a186:	4802      	ldr	r0, [pc, #8]	; (800a190 <__malloc_lock+0xc>)
 800a188:	f7ff ff02 	bl	8009f90 <__retarget_lock_acquire_recursive>
 800a18c:	bd10      	pop	{r4, pc}
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	20001820 	.word	0x20001820

0800a194 <__malloc_unlock>:
 800a194:	b510      	push	{r4, lr}
 800a196:	4802      	ldr	r0, [pc, #8]	; (800a1a0 <__malloc_unlock+0xc>)
 800a198:	f7ff fefb 	bl	8009f92 <__retarget_lock_release_recursive>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	20001820 	.word	0x20001820

0800a1a4 <__ssputs_r>:
 800a1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	9203      	str	r2, [sp, #12]
 800a1ac:	688e      	ldr	r6, [r1, #8]
 800a1ae:	9a01      	ldr	r2, [sp, #4]
 800a1b0:	0007      	movs	r7, r0
 800a1b2:	000c      	movs	r4, r1
 800a1b4:	680b      	ldr	r3, [r1, #0]
 800a1b6:	4296      	cmp	r6, r2
 800a1b8:	d831      	bhi.n	800a21e <__ssputs_r+0x7a>
 800a1ba:	898a      	ldrh	r2, [r1, #12]
 800a1bc:	2190      	movs	r1, #144	; 0x90
 800a1be:	00c9      	lsls	r1, r1, #3
 800a1c0:	420a      	tst	r2, r1
 800a1c2:	d029      	beq.n	800a218 <__ssputs_r+0x74>
 800a1c4:	2003      	movs	r0, #3
 800a1c6:	6921      	ldr	r1, [r4, #16]
 800a1c8:	1a5b      	subs	r3, r3, r1
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	6963      	ldr	r3, [r4, #20]
 800a1ce:	4343      	muls	r3, r0
 800a1d0:	0fdd      	lsrs	r5, r3, #31
 800a1d2:	18ed      	adds	r5, r5, r3
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	9802      	ldr	r0, [sp, #8]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	181b      	adds	r3, r3, r0
 800a1dc:	106d      	asrs	r5, r5, #1
 800a1de:	42ab      	cmp	r3, r5
 800a1e0:	d900      	bls.n	800a1e4 <__ssputs_r+0x40>
 800a1e2:	001d      	movs	r5, r3
 800a1e4:	0552      	lsls	r2, r2, #21
 800a1e6:	d529      	bpl.n	800a23c <__ssputs_r+0x98>
 800a1e8:	0029      	movs	r1, r5
 800a1ea:	0038      	movs	r0, r7
 800a1ec:	f7ff ff48 	bl	800a080 <_malloc_r>
 800a1f0:	1e06      	subs	r6, r0, #0
 800a1f2:	d02d      	beq.n	800a250 <__ssputs_r+0xac>
 800a1f4:	9a02      	ldr	r2, [sp, #8]
 800a1f6:	6921      	ldr	r1, [r4, #16]
 800a1f8:	f7ff fecc 	bl	8009f94 <memcpy>
 800a1fc:	89a2      	ldrh	r2, [r4, #12]
 800a1fe:	4b19      	ldr	r3, [pc, #100]	; (800a264 <__ssputs_r+0xc0>)
 800a200:	401a      	ands	r2, r3
 800a202:	2380      	movs	r3, #128	; 0x80
 800a204:	4313      	orrs	r3, r2
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	9b02      	ldr	r3, [sp, #8]
 800a20a:	6126      	str	r6, [r4, #16]
 800a20c:	18f6      	adds	r6, r6, r3
 800a20e:	6026      	str	r6, [r4, #0]
 800a210:	6165      	str	r5, [r4, #20]
 800a212:	9e01      	ldr	r6, [sp, #4]
 800a214:	1aed      	subs	r5, r5, r3
 800a216:	60a5      	str	r5, [r4, #8]
 800a218:	9b01      	ldr	r3, [sp, #4]
 800a21a:	429e      	cmp	r6, r3
 800a21c:	d900      	bls.n	800a220 <__ssputs_r+0x7c>
 800a21e:	9e01      	ldr	r6, [sp, #4]
 800a220:	0032      	movs	r2, r6
 800a222:	9903      	ldr	r1, [sp, #12]
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	f000 fa9f 	bl	800a768 <memmove>
 800a22a:	2000      	movs	r0, #0
 800a22c:	68a3      	ldr	r3, [r4, #8]
 800a22e:	1b9b      	subs	r3, r3, r6
 800a230:	60a3      	str	r3, [r4, #8]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	199b      	adds	r3, r3, r6
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	b005      	add	sp, #20
 800a23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a23c:	002a      	movs	r2, r5
 800a23e:	0038      	movs	r0, r7
 800a240:	f000 fac3 	bl	800a7ca <_realloc_r>
 800a244:	1e06      	subs	r6, r0, #0
 800a246:	d1df      	bne.n	800a208 <__ssputs_r+0x64>
 800a248:	0038      	movs	r0, r7
 800a24a:	6921      	ldr	r1, [r4, #16]
 800a24c:	f7ff feac 	bl	8009fa8 <_free_r>
 800a250:	230c      	movs	r3, #12
 800a252:	2001      	movs	r0, #1
 800a254:	603b      	str	r3, [r7, #0]
 800a256:	89a2      	ldrh	r2, [r4, #12]
 800a258:	3334      	adds	r3, #52	; 0x34
 800a25a:	4313      	orrs	r3, r2
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	4240      	negs	r0, r0
 800a260:	e7ea      	b.n	800a238 <__ssputs_r+0x94>
 800a262:	46c0      	nop			; (mov r8, r8)
 800a264:	fffffb7f 	.word	0xfffffb7f

0800a268 <_svfiprintf_r>:
 800a268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26a:	b0a1      	sub	sp, #132	; 0x84
 800a26c:	9003      	str	r0, [sp, #12]
 800a26e:	001d      	movs	r5, r3
 800a270:	898b      	ldrh	r3, [r1, #12]
 800a272:	000f      	movs	r7, r1
 800a274:	0016      	movs	r6, r2
 800a276:	061b      	lsls	r3, r3, #24
 800a278:	d511      	bpl.n	800a29e <_svfiprintf_r+0x36>
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10e      	bne.n	800a29e <_svfiprintf_r+0x36>
 800a280:	2140      	movs	r1, #64	; 0x40
 800a282:	f7ff fefd 	bl	800a080 <_malloc_r>
 800a286:	6038      	str	r0, [r7, #0]
 800a288:	6138      	str	r0, [r7, #16]
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d105      	bne.n	800a29a <_svfiprintf_r+0x32>
 800a28e:	230c      	movs	r3, #12
 800a290:	9a03      	ldr	r2, [sp, #12]
 800a292:	3801      	subs	r0, #1
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	b021      	add	sp, #132	; 0x84
 800a298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a29a:	2340      	movs	r3, #64	; 0x40
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	ac08      	add	r4, sp, #32
 800a2a2:	6163      	str	r3, [r4, #20]
 800a2a4:	3320      	adds	r3, #32
 800a2a6:	7663      	strb	r3, [r4, #25]
 800a2a8:	3310      	adds	r3, #16
 800a2aa:	76a3      	strb	r3, [r4, #26]
 800a2ac:	9507      	str	r5, [sp, #28]
 800a2ae:	0035      	movs	r5, r6
 800a2b0:	782b      	ldrb	r3, [r5, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <_svfiprintf_r+0x52>
 800a2b6:	2b25      	cmp	r3, #37	; 0x25
 800a2b8:	d148      	bne.n	800a34c <_svfiprintf_r+0xe4>
 800a2ba:	1bab      	subs	r3, r5, r6
 800a2bc:	9305      	str	r3, [sp, #20]
 800a2be:	42b5      	cmp	r5, r6
 800a2c0:	d00b      	beq.n	800a2da <_svfiprintf_r+0x72>
 800a2c2:	0032      	movs	r2, r6
 800a2c4:	0039      	movs	r1, r7
 800a2c6:	9803      	ldr	r0, [sp, #12]
 800a2c8:	f7ff ff6c 	bl	800a1a4 <__ssputs_r>
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d100      	bne.n	800a2d2 <_svfiprintf_r+0x6a>
 800a2d0:	e0af      	b.n	800a432 <_svfiprintf_r+0x1ca>
 800a2d2:	6963      	ldr	r3, [r4, #20]
 800a2d4:	9a05      	ldr	r2, [sp, #20]
 800a2d6:	189b      	adds	r3, r3, r2
 800a2d8:	6163      	str	r3, [r4, #20]
 800a2da:	782b      	ldrb	r3, [r5, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d100      	bne.n	800a2e2 <_svfiprintf_r+0x7a>
 800a2e0:	e0a7      	b.n	800a432 <_svfiprintf_r+0x1ca>
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4252      	negs	r2, r2
 800a2e8:	6062      	str	r2, [r4, #4]
 800a2ea:	a904      	add	r1, sp, #16
 800a2ec:	3254      	adds	r2, #84	; 0x54
 800a2ee:	1852      	adds	r2, r2, r1
 800a2f0:	1c6e      	adds	r6, r5, #1
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	60e3      	str	r3, [r4, #12]
 800a2f6:	60a3      	str	r3, [r4, #8]
 800a2f8:	7013      	strb	r3, [r2, #0]
 800a2fa:	65a3      	str	r3, [r4, #88]	; 0x58
 800a2fc:	4b55      	ldr	r3, [pc, #340]	; (800a454 <_svfiprintf_r+0x1ec>)
 800a2fe:	2205      	movs	r2, #5
 800a300:	0018      	movs	r0, r3
 800a302:	7831      	ldrb	r1, [r6, #0]
 800a304:	9305      	str	r3, [sp, #20]
 800a306:	f000 fa55 	bl	800a7b4 <memchr>
 800a30a:	1c75      	adds	r5, r6, #1
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d11f      	bne.n	800a350 <_svfiprintf_r+0xe8>
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	06d3      	lsls	r3, r2, #27
 800a314:	d504      	bpl.n	800a320 <_svfiprintf_r+0xb8>
 800a316:	2353      	movs	r3, #83	; 0x53
 800a318:	a904      	add	r1, sp, #16
 800a31a:	185b      	adds	r3, r3, r1
 800a31c:	2120      	movs	r1, #32
 800a31e:	7019      	strb	r1, [r3, #0]
 800a320:	0713      	lsls	r3, r2, #28
 800a322:	d504      	bpl.n	800a32e <_svfiprintf_r+0xc6>
 800a324:	2353      	movs	r3, #83	; 0x53
 800a326:	a904      	add	r1, sp, #16
 800a328:	185b      	adds	r3, r3, r1
 800a32a:	212b      	movs	r1, #43	; 0x2b
 800a32c:	7019      	strb	r1, [r3, #0]
 800a32e:	7833      	ldrb	r3, [r6, #0]
 800a330:	2b2a      	cmp	r3, #42	; 0x2a
 800a332:	d016      	beq.n	800a362 <_svfiprintf_r+0xfa>
 800a334:	0035      	movs	r5, r6
 800a336:	2100      	movs	r1, #0
 800a338:	200a      	movs	r0, #10
 800a33a:	68e3      	ldr	r3, [r4, #12]
 800a33c:	782a      	ldrb	r2, [r5, #0]
 800a33e:	1c6e      	adds	r6, r5, #1
 800a340:	3a30      	subs	r2, #48	; 0x30
 800a342:	2a09      	cmp	r2, #9
 800a344:	d94e      	bls.n	800a3e4 <_svfiprintf_r+0x17c>
 800a346:	2900      	cmp	r1, #0
 800a348:	d111      	bne.n	800a36e <_svfiprintf_r+0x106>
 800a34a:	e017      	b.n	800a37c <_svfiprintf_r+0x114>
 800a34c:	3501      	adds	r5, #1
 800a34e:	e7af      	b.n	800a2b0 <_svfiprintf_r+0x48>
 800a350:	9b05      	ldr	r3, [sp, #20]
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	1ac0      	subs	r0, r0, r3
 800a356:	2301      	movs	r3, #1
 800a358:	4083      	lsls	r3, r0
 800a35a:	4313      	orrs	r3, r2
 800a35c:	002e      	movs	r6, r5
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	e7cc      	b.n	800a2fc <_svfiprintf_r+0x94>
 800a362:	9b07      	ldr	r3, [sp, #28]
 800a364:	1d19      	adds	r1, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9107      	str	r1, [sp, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	db01      	blt.n	800a372 <_svfiprintf_r+0x10a>
 800a36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a370:	e004      	b.n	800a37c <_svfiprintf_r+0x114>
 800a372:	425b      	negs	r3, r3
 800a374:	60e3      	str	r3, [r4, #12]
 800a376:	2302      	movs	r3, #2
 800a378:	4313      	orrs	r3, r2
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	782b      	ldrb	r3, [r5, #0]
 800a37e:	2b2e      	cmp	r3, #46	; 0x2e
 800a380:	d10a      	bne.n	800a398 <_svfiprintf_r+0x130>
 800a382:	786b      	ldrb	r3, [r5, #1]
 800a384:	2b2a      	cmp	r3, #42	; 0x2a
 800a386:	d135      	bne.n	800a3f4 <_svfiprintf_r+0x18c>
 800a388:	9b07      	ldr	r3, [sp, #28]
 800a38a:	3502      	adds	r5, #2
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9207      	str	r2, [sp, #28]
 800a392:	2b00      	cmp	r3, #0
 800a394:	db2b      	blt.n	800a3ee <_svfiprintf_r+0x186>
 800a396:	9309      	str	r3, [sp, #36]	; 0x24
 800a398:	4e2f      	ldr	r6, [pc, #188]	; (800a458 <_svfiprintf_r+0x1f0>)
 800a39a:	2203      	movs	r2, #3
 800a39c:	0030      	movs	r0, r6
 800a39e:	7829      	ldrb	r1, [r5, #0]
 800a3a0:	f000 fa08 	bl	800a7b4 <memchr>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d006      	beq.n	800a3b6 <_svfiprintf_r+0x14e>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	1b80      	subs	r0, r0, r6
 800a3ac:	4083      	lsls	r3, r0
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	7829      	ldrb	r1, [r5, #0]
 800a3b8:	2206      	movs	r2, #6
 800a3ba:	4828      	ldr	r0, [pc, #160]	; (800a45c <_svfiprintf_r+0x1f4>)
 800a3bc:	1c6e      	adds	r6, r5, #1
 800a3be:	7621      	strb	r1, [r4, #24]
 800a3c0:	f000 f9f8 	bl	800a7b4 <memchr>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d03c      	beq.n	800a442 <_svfiprintf_r+0x1da>
 800a3c8:	4b25      	ldr	r3, [pc, #148]	; (800a460 <_svfiprintf_r+0x1f8>)
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d125      	bne.n	800a41a <_svfiprintf_r+0x1b2>
 800a3ce:	2207      	movs	r2, #7
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	3307      	adds	r3, #7
 800a3d4:	4393      	bics	r3, r2
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	9307      	str	r3, [sp, #28]
 800a3da:	6963      	ldr	r3, [r4, #20]
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	189b      	adds	r3, r3, r2
 800a3e0:	6163      	str	r3, [r4, #20]
 800a3e2:	e764      	b.n	800a2ae <_svfiprintf_r+0x46>
 800a3e4:	4343      	muls	r3, r0
 800a3e6:	0035      	movs	r5, r6
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	189b      	adds	r3, r3, r2
 800a3ec:	e7a6      	b.n	800a33c <_svfiprintf_r+0xd4>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	425b      	negs	r3, r3
 800a3f2:	e7d0      	b.n	800a396 <_svfiprintf_r+0x12e>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	200a      	movs	r0, #10
 800a3f8:	001a      	movs	r2, r3
 800a3fa:	3501      	adds	r5, #1
 800a3fc:	6063      	str	r3, [r4, #4]
 800a3fe:	7829      	ldrb	r1, [r5, #0]
 800a400:	1c6e      	adds	r6, r5, #1
 800a402:	3930      	subs	r1, #48	; 0x30
 800a404:	2909      	cmp	r1, #9
 800a406:	d903      	bls.n	800a410 <_svfiprintf_r+0x1a8>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d0c5      	beq.n	800a398 <_svfiprintf_r+0x130>
 800a40c:	9209      	str	r2, [sp, #36]	; 0x24
 800a40e:	e7c3      	b.n	800a398 <_svfiprintf_r+0x130>
 800a410:	4342      	muls	r2, r0
 800a412:	0035      	movs	r5, r6
 800a414:	2301      	movs	r3, #1
 800a416:	1852      	adds	r2, r2, r1
 800a418:	e7f1      	b.n	800a3fe <_svfiprintf_r+0x196>
 800a41a:	aa07      	add	r2, sp, #28
 800a41c:	9200      	str	r2, [sp, #0]
 800a41e:	0021      	movs	r1, r4
 800a420:	003a      	movs	r2, r7
 800a422:	4b10      	ldr	r3, [pc, #64]	; (800a464 <_svfiprintf_r+0x1fc>)
 800a424:	9803      	ldr	r0, [sp, #12]
 800a426:	e000      	b.n	800a42a <_svfiprintf_r+0x1c2>
 800a428:	bf00      	nop
 800a42a:	9004      	str	r0, [sp, #16]
 800a42c:	9b04      	ldr	r3, [sp, #16]
 800a42e:	3301      	adds	r3, #1
 800a430:	d1d3      	bne.n	800a3da <_svfiprintf_r+0x172>
 800a432:	89bb      	ldrh	r3, [r7, #12]
 800a434:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a436:	065b      	lsls	r3, r3, #25
 800a438:	d400      	bmi.n	800a43c <_svfiprintf_r+0x1d4>
 800a43a:	e72c      	b.n	800a296 <_svfiprintf_r+0x2e>
 800a43c:	2001      	movs	r0, #1
 800a43e:	4240      	negs	r0, r0
 800a440:	e729      	b.n	800a296 <_svfiprintf_r+0x2e>
 800a442:	aa07      	add	r2, sp, #28
 800a444:	9200      	str	r2, [sp, #0]
 800a446:	0021      	movs	r1, r4
 800a448:	003a      	movs	r2, r7
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <_svfiprintf_r+0x1fc>)
 800a44c:	9803      	ldr	r0, [sp, #12]
 800a44e:	f000 f87b 	bl	800a548 <_printf_i>
 800a452:	e7ea      	b.n	800a42a <_svfiprintf_r+0x1c2>
 800a454:	0800b12b 	.word	0x0800b12b
 800a458:	0800b131 	.word	0x0800b131
 800a45c:	0800b135 	.word	0x0800b135
 800a460:	00000000 	.word	0x00000000
 800a464:	0800a1a5 	.word	0x0800a1a5

0800a468 <_printf_common>:
 800a468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a46a:	0016      	movs	r6, r2
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	688a      	ldr	r2, [r1, #8]
 800a470:	690b      	ldr	r3, [r1, #16]
 800a472:	000c      	movs	r4, r1
 800a474:	9000      	str	r0, [sp, #0]
 800a476:	4293      	cmp	r3, r2
 800a478:	da00      	bge.n	800a47c <_printf_common+0x14>
 800a47a:	0013      	movs	r3, r2
 800a47c:	0022      	movs	r2, r4
 800a47e:	6033      	str	r3, [r6, #0]
 800a480:	3243      	adds	r2, #67	; 0x43
 800a482:	7812      	ldrb	r2, [r2, #0]
 800a484:	2a00      	cmp	r2, #0
 800a486:	d001      	beq.n	800a48c <_printf_common+0x24>
 800a488:	3301      	adds	r3, #1
 800a48a:	6033      	str	r3, [r6, #0]
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	069b      	lsls	r3, r3, #26
 800a490:	d502      	bpl.n	800a498 <_printf_common+0x30>
 800a492:	6833      	ldr	r3, [r6, #0]
 800a494:	3302      	adds	r3, #2
 800a496:	6033      	str	r3, [r6, #0]
 800a498:	6822      	ldr	r2, [r4, #0]
 800a49a:	2306      	movs	r3, #6
 800a49c:	0015      	movs	r5, r2
 800a49e:	401d      	ands	r5, r3
 800a4a0:	421a      	tst	r2, r3
 800a4a2:	d027      	beq.n	800a4f4 <_printf_common+0x8c>
 800a4a4:	0023      	movs	r3, r4
 800a4a6:	3343      	adds	r3, #67	; 0x43
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	1e5a      	subs	r2, r3, #1
 800a4ac:	4193      	sbcs	r3, r2
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	0692      	lsls	r2, r2, #26
 800a4b2:	d430      	bmi.n	800a516 <_printf_common+0xae>
 800a4b4:	0022      	movs	r2, r4
 800a4b6:	9901      	ldr	r1, [sp, #4]
 800a4b8:	9800      	ldr	r0, [sp, #0]
 800a4ba:	9d08      	ldr	r5, [sp, #32]
 800a4bc:	3243      	adds	r2, #67	; 0x43
 800a4be:	47a8      	blx	r5
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d025      	beq.n	800a510 <_printf_common+0xa8>
 800a4c4:	2206      	movs	r2, #6
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	2500      	movs	r5, #0
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d105      	bne.n	800a4dc <_printf_common+0x74>
 800a4d0:	6833      	ldr	r3, [r6, #0]
 800a4d2:	68e5      	ldr	r5, [r4, #12]
 800a4d4:	1aed      	subs	r5, r5, r3
 800a4d6:	43eb      	mvns	r3, r5
 800a4d8:	17db      	asrs	r3, r3, #31
 800a4da:	401d      	ands	r5, r3
 800a4dc:	68a3      	ldr	r3, [r4, #8]
 800a4de:	6922      	ldr	r2, [r4, #16]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	dd01      	ble.n	800a4e8 <_printf_common+0x80>
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	18ed      	adds	r5, r5, r3
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	42b5      	cmp	r5, r6
 800a4ec:	d120      	bne.n	800a530 <_printf_common+0xc8>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e010      	b.n	800a514 <_printf_common+0xac>
 800a4f2:	3501      	adds	r5, #1
 800a4f4:	68e3      	ldr	r3, [r4, #12]
 800a4f6:	6832      	ldr	r2, [r6, #0]
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	42ab      	cmp	r3, r5
 800a4fc:	ddd2      	ble.n	800a4a4 <_printf_common+0x3c>
 800a4fe:	0022      	movs	r2, r4
 800a500:	2301      	movs	r3, #1
 800a502:	9901      	ldr	r1, [sp, #4]
 800a504:	9800      	ldr	r0, [sp, #0]
 800a506:	9f08      	ldr	r7, [sp, #32]
 800a508:	3219      	adds	r2, #25
 800a50a:	47b8      	blx	r7
 800a50c:	3001      	adds	r0, #1
 800a50e:	d1f0      	bne.n	800a4f2 <_printf_common+0x8a>
 800a510:	2001      	movs	r0, #1
 800a512:	4240      	negs	r0, r0
 800a514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a516:	2030      	movs	r0, #48	; 0x30
 800a518:	18e1      	adds	r1, r4, r3
 800a51a:	3143      	adds	r1, #67	; 0x43
 800a51c:	7008      	strb	r0, [r1, #0]
 800a51e:	0021      	movs	r1, r4
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	3145      	adds	r1, #69	; 0x45
 800a524:	7809      	ldrb	r1, [r1, #0]
 800a526:	18a2      	adds	r2, r4, r2
 800a528:	3243      	adds	r2, #67	; 0x43
 800a52a:	3302      	adds	r3, #2
 800a52c:	7011      	strb	r1, [r2, #0]
 800a52e:	e7c1      	b.n	800a4b4 <_printf_common+0x4c>
 800a530:	0022      	movs	r2, r4
 800a532:	2301      	movs	r3, #1
 800a534:	9901      	ldr	r1, [sp, #4]
 800a536:	9800      	ldr	r0, [sp, #0]
 800a538:	9f08      	ldr	r7, [sp, #32]
 800a53a:	321a      	adds	r2, #26
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	d0e6      	beq.n	800a510 <_printf_common+0xa8>
 800a542:	3601      	adds	r6, #1
 800a544:	e7d1      	b.n	800a4ea <_printf_common+0x82>
	...

0800a548 <_printf_i>:
 800a548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54a:	b08b      	sub	sp, #44	; 0x2c
 800a54c:	9206      	str	r2, [sp, #24]
 800a54e:	000a      	movs	r2, r1
 800a550:	3243      	adds	r2, #67	; 0x43
 800a552:	9307      	str	r3, [sp, #28]
 800a554:	9005      	str	r0, [sp, #20]
 800a556:	9204      	str	r2, [sp, #16]
 800a558:	7e0a      	ldrb	r2, [r1, #24]
 800a55a:	000c      	movs	r4, r1
 800a55c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a55e:	2a78      	cmp	r2, #120	; 0x78
 800a560:	d809      	bhi.n	800a576 <_printf_i+0x2e>
 800a562:	2a62      	cmp	r2, #98	; 0x62
 800a564:	d80b      	bhi.n	800a57e <_printf_i+0x36>
 800a566:	2a00      	cmp	r2, #0
 800a568:	d100      	bne.n	800a56c <_printf_i+0x24>
 800a56a:	e0be      	b.n	800a6ea <_printf_i+0x1a2>
 800a56c:	497c      	ldr	r1, [pc, #496]	; (800a760 <_printf_i+0x218>)
 800a56e:	9103      	str	r1, [sp, #12]
 800a570:	2a58      	cmp	r2, #88	; 0x58
 800a572:	d100      	bne.n	800a576 <_printf_i+0x2e>
 800a574:	e093      	b.n	800a69e <_printf_i+0x156>
 800a576:	0026      	movs	r6, r4
 800a578:	3642      	adds	r6, #66	; 0x42
 800a57a:	7032      	strb	r2, [r6, #0]
 800a57c:	e022      	b.n	800a5c4 <_printf_i+0x7c>
 800a57e:	0010      	movs	r0, r2
 800a580:	3863      	subs	r0, #99	; 0x63
 800a582:	2815      	cmp	r0, #21
 800a584:	d8f7      	bhi.n	800a576 <_printf_i+0x2e>
 800a586:	f7f5 fddb 	bl	8000140 <__gnu_thumb1_case_shi>
 800a58a:	0016      	.short	0x0016
 800a58c:	fff6001f 	.word	0xfff6001f
 800a590:	fff6fff6 	.word	0xfff6fff6
 800a594:	001ffff6 	.word	0x001ffff6
 800a598:	fff6fff6 	.word	0xfff6fff6
 800a59c:	fff6fff6 	.word	0xfff6fff6
 800a5a0:	003600a3 	.word	0x003600a3
 800a5a4:	fff60083 	.word	0xfff60083
 800a5a8:	00b4fff6 	.word	0x00b4fff6
 800a5ac:	0036fff6 	.word	0x0036fff6
 800a5b0:	fff6fff6 	.word	0xfff6fff6
 800a5b4:	0087      	.short	0x0087
 800a5b6:	0026      	movs	r6, r4
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	3642      	adds	r6, #66	; 0x42
 800a5bc:	1d11      	adds	r1, r2, #4
 800a5be:	6019      	str	r1, [r3, #0]
 800a5c0:	6813      	ldr	r3, [r2, #0]
 800a5c2:	7033      	strb	r3, [r6, #0]
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e0a2      	b.n	800a70e <_printf_i+0x1c6>
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	6809      	ldr	r1, [r1, #0]
 800a5cc:	1d02      	adds	r2, r0, #4
 800a5ce:	060d      	lsls	r5, r1, #24
 800a5d0:	d50b      	bpl.n	800a5ea <_printf_i+0xa2>
 800a5d2:	6805      	ldr	r5, [r0, #0]
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	da03      	bge.n	800a5e2 <_printf_i+0x9a>
 800a5da:	232d      	movs	r3, #45	; 0x2d
 800a5dc:	9a04      	ldr	r2, [sp, #16]
 800a5de:	426d      	negs	r5, r5
 800a5e0:	7013      	strb	r3, [r2, #0]
 800a5e2:	4b5f      	ldr	r3, [pc, #380]	; (800a760 <_printf_i+0x218>)
 800a5e4:	270a      	movs	r7, #10
 800a5e6:	9303      	str	r3, [sp, #12]
 800a5e8:	e01b      	b.n	800a622 <_printf_i+0xda>
 800a5ea:	6805      	ldr	r5, [r0, #0]
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	0649      	lsls	r1, r1, #25
 800a5f0:	d5f1      	bpl.n	800a5d6 <_printf_i+0x8e>
 800a5f2:	b22d      	sxth	r5, r5
 800a5f4:	e7ef      	b.n	800a5d6 <_printf_i+0x8e>
 800a5f6:	680d      	ldr	r5, [r1, #0]
 800a5f8:	6819      	ldr	r1, [r3, #0]
 800a5fa:	1d08      	adds	r0, r1, #4
 800a5fc:	6018      	str	r0, [r3, #0]
 800a5fe:	062e      	lsls	r6, r5, #24
 800a600:	d501      	bpl.n	800a606 <_printf_i+0xbe>
 800a602:	680d      	ldr	r5, [r1, #0]
 800a604:	e003      	b.n	800a60e <_printf_i+0xc6>
 800a606:	066d      	lsls	r5, r5, #25
 800a608:	d5fb      	bpl.n	800a602 <_printf_i+0xba>
 800a60a:	680d      	ldr	r5, [r1, #0]
 800a60c:	b2ad      	uxth	r5, r5
 800a60e:	4b54      	ldr	r3, [pc, #336]	; (800a760 <_printf_i+0x218>)
 800a610:	2708      	movs	r7, #8
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	2a6f      	cmp	r2, #111	; 0x6f
 800a616:	d000      	beq.n	800a61a <_printf_i+0xd2>
 800a618:	3702      	adds	r7, #2
 800a61a:	0023      	movs	r3, r4
 800a61c:	2200      	movs	r2, #0
 800a61e:	3343      	adds	r3, #67	; 0x43
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	60a3      	str	r3, [r4, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	db03      	blt.n	800a632 <_printf_i+0xea>
 800a62a:	2104      	movs	r1, #4
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	438a      	bics	r2, r1
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	2d00      	cmp	r5, #0
 800a634:	d102      	bne.n	800a63c <_printf_i+0xf4>
 800a636:	9e04      	ldr	r6, [sp, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00c      	beq.n	800a656 <_printf_i+0x10e>
 800a63c:	9e04      	ldr	r6, [sp, #16]
 800a63e:	0028      	movs	r0, r5
 800a640:	0039      	movs	r1, r7
 800a642:	f7f5 fe0d 	bl	8000260 <__aeabi_uidivmod>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	3e01      	subs	r6, #1
 800a64a:	5c5b      	ldrb	r3, [r3, r1]
 800a64c:	7033      	strb	r3, [r6, #0]
 800a64e:	002b      	movs	r3, r5
 800a650:	0005      	movs	r5, r0
 800a652:	429f      	cmp	r7, r3
 800a654:	d9f3      	bls.n	800a63e <_printf_i+0xf6>
 800a656:	2f08      	cmp	r7, #8
 800a658:	d109      	bne.n	800a66e <_printf_i+0x126>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	07db      	lsls	r3, r3, #31
 800a65e:	d506      	bpl.n	800a66e <_printf_i+0x126>
 800a660:	6862      	ldr	r2, [r4, #4]
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	dc02      	bgt.n	800a66e <_printf_i+0x126>
 800a668:	2330      	movs	r3, #48	; 0x30
 800a66a:	3e01      	subs	r6, #1
 800a66c:	7033      	strb	r3, [r6, #0]
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	1b9b      	subs	r3, r3, r6
 800a672:	6123      	str	r3, [r4, #16]
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	0021      	movs	r1, r4
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	9805      	ldr	r0, [sp, #20]
 800a67c:	9b06      	ldr	r3, [sp, #24]
 800a67e:	aa09      	add	r2, sp, #36	; 0x24
 800a680:	f7ff fef2 	bl	800a468 <_printf_common>
 800a684:	3001      	adds	r0, #1
 800a686:	d147      	bne.n	800a718 <_printf_i+0x1d0>
 800a688:	2001      	movs	r0, #1
 800a68a:	4240      	negs	r0, r0
 800a68c:	b00b      	add	sp, #44	; 0x2c
 800a68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a690:	2220      	movs	r2, #32
 800a692:	6809      	ldr	r1, [r1, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	6022      	str	r2, [r4, #0]
 800a698:	2278      	movs	r2, #120	; 0x78
 800a69a:	4932      	ldr	r1, [pc, #200]	; (800a764 <_printf_i+0x21c>)
 800a69c:	9103      	str	r1, [sp, #12]
 800a69e:	0021      	movs	r1, r4
 800a6a0:	3145      	adds	r1, #69	; 0x45
 800a6a2:	700a      	strb	r2, [r1, #0]
 800a6a4:	6819      	ldr	r1, [r3, #0]
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	c920      	ldmia	r1!, {r5}
 800a6aa:	0610      	lsls	r0, r2, #24
 800a6ac:	d402      	bmi.n	800a6b4 <_printf_i+0x16c>
 800a6ae:	0650      	lsls	r0, r2, #25
 800a6b0:	d500      	bpl.n	800a6b4 <_printf_i+0x16c>
 800a6b2:	b2ad      	uxth	r5, r5
 800a6b4:	6019      	str	r1, [r3, #0]
 800a6b6:	07d3      	lsls	r3, r2, #31
 800a6b8:	d502      	bpl.n	800a6c0 <_printf_i+0x178>
 800a6ba:	2320      	movs	r3, #32
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	2710      	movs	r7, #16
 800a6c2:	2d00      	cmp	r5, #0
 800a6c4:	d1a9      	bne.n	800a61a <_printf_i+0xd2>
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	4393      	bics	r3, r2
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	e7a4      	b.n	800a61a <_printf_i+0xd2>
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	680d      	ldr	r5, [r1, #0]
 800a6d4:	1d10      	adds	r0, r2, #4
 800a6d6:	6949      	ldr	r1, [r1, #20]
 800a6d8:	6018      	str	r0, [r3, #0]
 800a6da:	6813      	ldr	r3, [r2, #0]
 800a6dc:	062e      	lsls	r6, r5, #24
 800a6de:	d501      	bpl.n	800a6e4 <_printf_i+0x19c>
 800a6e0:	6019      	str	r1, [r3, #0]
 800a6e2:	e002      	b.n	800a6ea <_printf_i+0x1a2>
 800a6e4:	066d      	lsls	r5, r5, #25
 800a6e6:	d5fb      	bpl.n	800a6e0 <_printf_i+0x198>
 800a6e8:	8019      	strh	r1, [r3, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9e04      	ldr	r6, [sp, #16]
 800a6ee:	6123      	str	r3, [r4, #16]
 800a6f0:	e7c0      	b.n	800a674 <_printf_i+0x12c>
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	1d11      	adds	r1, r2, #4
 800a6f6:	6019      	str	r1, [r3, #0]
 800a6f8:	6816      	ldr	r6, [r2, #0]
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	0030      	movs	r0, r6
 800a6fe:	6862      	ldr	r2, [r4, #4]
 800a700:	f000 f858 	bl	800a7b4 <memchr>
 800a704:	2800      	cmp	r0, #0
 800a706:	d001      	beq.n	800a70c <_printf_i+0x1c4>
 800a708:	1b80      	subs	r0, r0, r6
 800a70a:	6060      	str	r0, [r4, #4]
 800a70c:	6863      	ldr	r3, [r4, #4]
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	2300      	movs	r3, #0
 800a712:	9a04      	ldr	r2, [sp, #16]
 800a714:	7013      	strb	r3, [r2, #0]
 800a716:	e7ad      	b.n	800a674 <_printf_i+0x12c>
 800a718:	0032      	movs	r2, r6
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	9906      	ldr	r1, [sp, #24]
 800a71e:	9805      	ldr	r0, [sp, #20]
 800a720:	9d07      	ldr	r5, [sp, #28]
 800a722:	47a8      	blx	r5
 800a724:	3001      	adds	r0, #1
 800a726:	d0af      	beq.n	800a688 <_printf_i+0x140>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	079b      	lsls	r3, r3, #30
 800a72c:	d415      	bmi.n	800a75a <_printf_i+0x212>
 800a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a730:	68e0      	ldr	r0, [r4, #12]
 800a732:	4298      	cmp	r0, r3
 800a734:	daaa      	bge.n	800a68c <_printf_i+0x144>
 800a736:	0018      	movs	r0, r3
 800a738:	e7a8      	b.n	800a68c <_printf_i+0x144>
 800a73a:	0022      	movs	r2, r4
 800a73c:	2301      	movs	r3, #1
 800a73e:	9906      	ldr	r1, [sp, #24]
 800a740:	9805      	ldr	r0, [sp, #20]
 800a742:	9e07      	ldr	r6, [sp, #28]
 800a744:	3219      	adds	r2, #25
 800a746:	47b0      	blx	r6
 800a748:	3001      	adds	r0, #1
 800a74a:	d09d      	beq.n	800a688 <_printf_i+0x140>
 800a74c:	3501      	adds	r5, #1
 800a74e:	68e3      	ldr	r3, [r4, #12]
 800a750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	42ab      	cmp	r3, r5
 800a756:	dcf0      	bgt.n	800a73a <_printf_i+0x1f2>
 800a758:	e7e9      	b.n	800a72e <_printf_i+0x1e6>
 800a75a:	2500      	movs	r5, #0
 800a75c:	e7f7      	b.n	800a74e <_printf_i+0x206>
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	0800b13c 	.word	0x0800b13c
 800a764:	0800b14d 	.word	0x0800b14d

0800a768 <memmove>:
 800a768:	b510      	push	{r4, lr}
 800a76a:	4288      	cmp	r0, r1
 800a76c:	d902      	bls.n	800a774 <memmove+0xc>
 800a76e:	188b      	adds	r3, r1, r2
 800a770:	4298      	cmp	r0, r3
 800a772:	d303      	bcc.n	800a77c <memmove+0x14>
 800a774:	2300      	movs	r3, #0
 800a776:	e007      	b.n	800a788 <memmove+0x20>
 800a778:	5c8b      	ldrb	r3, [r1, r2]
 800a77a:	5483      	strb	r3, [r0, r2]
 800a77c:	3a01      	subs	r2, #1
 800a77e:	d2fb      	bcs.n	800a778 <memmove+0x10>
 800a780:	bd10      	pop	{r4, pc}
 800a782:	5ccc      	ldrb	r4, [r1, r3]
 800a784:	54c4      	strb	r4, [r0, r3]
 800a786:	3301      	adds	r3, #1
 800a788:	429a      	cmp	r2, r3
 800a78a:	d1fa      	bne.n	800a782 <memmove+0x1a>
 800a78c:	e7f8      	b.n	800a780 <memmove+0x18>
	...

0800a790 <_sbrk_r>:
 800a790:	2300      	movs	r3, #0
 800a792:	b570      	push	{r4, r5, r6, lr}
 800a794:	4d06      	ldr	r5, [pc, #24]	; (800a7b0 <_sbrk_r+0x20>)
 800a796:	0004      	movs	r4, r0
 800a798:	0008      	movs	r0, r1
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	f7f7 feb6 	bl	800250c <_sbrk>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d103      	bne.n	800a7ac <_sbrk_r+0x1c>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d000      	beq.n	800a7ac <_sbrk_r+0x1c>
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	2000181c 	.word	0x2000181c

0800a7b4 <memchr>:
 800a7b4:	b2c9      	uxtb	r1, r1
 800a7b6:	1882      	adds	r2, r0, r2
 800a7b8:	4290      	cmp	r0, r2
 800a7ba:	d101      	bne.n	800a7c0 <memchr+0xc>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	4770      	bx	lr
 800a7c0:	7803      	ldrb	r3, [r0, #0]
 800a7c2:	428b      	cmp	r3, r1
 800a7c4:	d0fb      	beq.n	800a7be <memchr+0xa>
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	e7f6      	b.n	800a7b8 <memchr+0x4>

0800a7ca <_realloc_r>:
 800a7ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7cc:	0007      	movs	r7, r0
 800a7ce:	000e      	movs	r6, r1
 800a7d0:	0014      	movs	r4, r2
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	d105      	bne.n	800a7e2 <_realloc_r+0x18>
 800a7d6:	0011      	movs	r1, r2
 800a7d8:	f7ff fc52 	bl	800a080 <_malloc_r>
 800a7dc:	0005      	movs	r5, r0
 800a7de:	0028      	movs	r0, r5
 800a7e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d103      	bne.n	800a7ee <_realloc_r+0x24>
 800a7e6:	f7ff fbdf 	bl	8009fa8 <_free_r>
 800a7ea:	0025      	movs	r5, r4
 800a7ec:	e7f7      	b.n	800a7de <_realloc_r+0x14>
 800a7ee:	f000 f81b 	bl	800a828 <_malloc_usable_size_r>
 800a7f2:	9001      	str	r0, [sp, #4]
 800a7f4:	4284      	cmp	r4, r0
 800a7f6:	d803      	bhi.n	800a800 <_realloc_r+0x36>
 800a7f8:	0035      	movs	r5, r6
 800a7fa:	0843      	lsrs	r3, r0, #1
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	d3ee      	bcc.n	800a7de <_realloc_r+0x14>
 800a800:	0021      	movs	r1, r4
 800a802:	0038      	movs	r0, r7
 800a804:	f7ff fc3c 	bl	800a080 <_malloc_r>
 800a808:	1e05      	subs	r5, r0, #0
 800a80a:	d0e8      	beq.n	800a7de <_realloc_r+0x14>
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	0022      	movs	r2, r4
 800a810:	429c      	cmp	r4, r3
 800a812:	d900      	bls.n	800a816 <_realloc_r+0x4c>
 800a814:	001a      	movs	r2, r3
 800a816:	0031      	movs	r1, r6
 800a818:	0028      	movs	r0, r5
 800a81a:	f7ff fbbb 	bl	8009f94 <memcpy>
 800a81e:	0031      	movs	r1, r6
 800a820:	0038      	movs	r0, r7
 800a822:	f7ff fbc1 	bl	8009fa8 <_free_r>
 800a826:	e7da      	b.n	800a7de <_realloc_r+0x14>

0800a828 <_malloc_usable_size_r>:
 800a828:	1f0b      	subs	r3, r1, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	1f18      	subs	r0, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	da01      	bge.n	800a836 <_malloc_usable_size_r+0xe>
 800a832:	580b      	ldr	r3, [r1, r0]
 800a834:	18c0      	adds	r0, r0, r3
 800a836:	4770      	bx	lr

0800a838 <_init>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	46c0      	nop			; (mov r8, r8)
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr

0800a844 <_fini>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	46c0      	nop			; (mov r8, r8)
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr
