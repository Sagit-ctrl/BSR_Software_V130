
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008298  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  08008cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000014f8  200001c4  08008e80  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200016bc  08008e80  000216bc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002add4  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008d01  00000000  00000000  0004afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b40  00000000  00000000  00053cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000022e8  00000000  00000000  00055808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001098f  00000000  00000000  00057af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039578  00000000  00000000  0006847f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a27b5  00000000  00000000  000a19f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001441ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000500c  00000000  00000000  001441fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00016577  00000000  00000000  00149208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c4 	.word	0x200001c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008340 	.word	0x08008340

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c8 	.word	0x200001c8
 8000104:	08008340 	.word	0x08008340

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f834 	bl	80004dc <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4647      	mov	r7, r8
 8000486:	b580      	push	{r7, lr}
 8000488:	0007      	movs	r7, r0
 800048a:	4699      	mov	r9, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	469c      	mov	ip, r3
 8000490:	0413      	lsls	r3, r2, #16
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	001d      	movs	r5, r3
 8000496:	000e      	movs	r6, r1
 8000498:	4661      	mov	r1, ip
 800049a:	0400      	lsls	r0, r0, #16
 800049c:	0c14      	lsrs	r4, r2, #16
 800049e:	0c00      	lsrs	r0, r0, #16
 80004a0:	4345      	muls	r5, r0
 80004a2:	434b      	muls	r3, r1
 80004a4:	4360      	muls	r0, r4
 80004a6:	4361      	muls	r1, r4
 80004a8:	18c0      	adds	r0, r0, r3
 80004aa:	0c2c      	lsrs	r4, r5, #16
 80004ac:	1820      	adds	r0, r4, r0
 80004ae:	468c      	mov	ip, r1
 80004b0:	4283      	cmp	r3, r0
 80004b2:	d903      	bls.n	80004bc <__aeabi_lmul+0x3c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	025b      	lsls	r3, r3, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	44c4      	add	ip, r8
 80004bc:	4649      	mov	r1, r9
 80004be:	4379      	muls	r1, r7
 80004c0:	4372      	muls	r2, r6
 80004c2:	0c03      	lsrs	r3, r0, #16
 80004c4:	4463      	add	r3, ip
 80004c6:	042d      	lsls	r5, r5, #16
 80004c8:	0c2d      	lsrs	r5, r5, #16
 80004ca:	18c9      	adds	r1, r1, r3
 80004cc:	0400      	lsls	r0, r0, #16
 80004ce:	1940      	adds	r0, r0, r5
 80004d0:	1889      	adds	r1, r1, r2
 80004d2:	bcc0      	pop	{r6, r7}
 80004d4:	46b9      	mov	r9, r7
 80004d6:	46b0      	mov	r8, r6
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__udivmoddi4>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	4657      	mov	r7, sl
 80004e0:	464e      	mov	r6, r9
 80004e2:	4645      	mov	r5, r8
 80004e4:	46de      	mov	lr, fp
 80004e6:	b5e0      	push	{r5, r6, r7, lr}
 80004e8:	0004      	movs	r4, r0
 80004ea:	000d      	movs	r5, r1
 80004ec:	4692      	mov	sl, r2
 80004ee:	4699      	mov	r9, r3
 80004f0:	b083      	sub	sp, #12
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d830      	bhi.n	8000558 <__udivmoddi4+0x7c>
 80004f6:	d02d      	beq.n	8000554 <__udivmoddi4+0x78>
 80004f8:	4649      	mov	r1, r9
 80004fa:	4650      	mov	r0, sl
 80004fc:	f000 f8d8 	bl	80006b0 <__clzdi2>
 8000500:	0029      	movs	r1, r5
 8000502:	0006      	movs	r6, r0
 8000504:	0020      	movs	r0, r4
 8000506:	f000 f8d3 	bl	80006b0 <__clzdi2>
 800050a:	1a33      	subs	r3, r6, r0
 800050c:	4698      	mov	r8, r3
 800050e:	3b20      	subs	r3, #32
 8000510:	469b      	mov	fp, r3
 8000512:	d433      	bmi.n	800057c <__udivmoddi4+0xa0>
 8000514:	465a      	mov	r2, fp
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	4642      	mov	r2, r8
 800051c:	001f      	movs	r7, r3
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	001e      	movs	r6, r3
 8000524:	42af      	cmp	r7, r5
 8000526:	d83a      	bhi.n	800059e <__udivmoddi4+0xc2>
 8000528:	42af      	cmp	r7, r5
 800052a:	d100      	bne.n	800052e <__udivmoddi4+0x52>
 800052c:	e078      	b.n	8000620 <__udivmoddi4+0x144>
 800052e:	465b      	mov	r3, fp
 8000530:	1ba4      	subs	r4, r4, r6
 8000532:	41bd      	sbcs	r5, r7
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <__udivmoddi4+0x5e>
 8000538:	e075      	b.n	8000626 <__udivmoddi4+0x14a>
 800053a:	2200      	movs	r2, #0
 800053c:	2300      	movs	r3, #0
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	465a      	mov	r2, fp
 8000546:	4093      	lsls	r3, r2
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	4642      	mov	r2, r8
 800054e:	4093      	lsls	r3, r2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	e028      	b.n	80005a6 <__udivmoddi4+0xca>
 8000554:	4282      	cmp	r2, r0
 8000556:	d9cf      	bls.n	80004f8 <__udivmoddi4+0x1c>
 8000558:	2200      	movs	r2, #0
 800055a:	2300      	movs	r3, #0
 800055c:	9200      	str	r2, [sp, #0]
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <__udivmoddi4+0x8e>
 8000566:	601c      	str	r4, [r3, #0]
 8000568:	605d      	str	r5, [r3, #4]
 800056a:	9800      	ldr	r0, [sp, #0]
 800056c:	9901      	ldr	r1, [sp, #4]
 800056e:	b003      	add	sp, #12
 8000570:	bcf0      	pop	{r4, r5, r6, r7}
 8000572:	46bb      	mov	fp, r7
 8000574:	46b2      	mov	sl, r6
 8000576:	46a9      	mov	r9, r5
 8000578:	46a0      	mov	r8, r4
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	4652      	mov	r2, sl
 8000584:	40da      	lsrs	r2, r3
 8000586:	4641      	mov	r1, r8
 8000588:	0013      	movs	r3, r2
 800058a:	464a      	mov	r2, r9
 800058c:	408a      	lsls	r2, r1
 800058e:	0017      	movs	r7, r2
 8000590:	4642      	mov	r2, r8
 8000592:	431f      	orrs	r7, r3
 8000594:	4653      	mov	r3, sl
 8000596:	4093      	lsls	r3, r2
 8000598:	001e      	movs	r6, r3
 800059a:	42af      	cmp	r7, r5
 800059c:	d9c4      	bls.n	8000528 <__udivmoddi4+0x4c>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	4643      	mov	r3, r8
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0d9      	beq.n	8000560 <__udivmoddi4+0x84>
 80005ac:	07fb      	lsls	r3, r7, #31
 80005ae:	0872      	lsrs	r2, r6, #1
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4646      	mov	r6, r8
 80005b4:	087b      	lsrs	r3, r7, #1
 80005b6:	e00e      	b.n	80005d6 <__udivmoddi4+0xfa>
 80005b8:	42ab      	cmp	r3, r5
 80005ba:	d101      	bne.n	80005c0 <__udivmoddi4+0xe4>
 80005bc:	42a2      	cmp	r2, r4
 80005be:	d80c      	bhi.n	80005da <__udivmoddi4+0xfe>
 80005c0:	1aa4      	subs	r4, r4, r2
 80005c2:	419d      	sbcs	r5, r3
 80005c4:	2001      	movs	r0, #1
 80005c6:	1924      	adds	r4, r4, r4
 80005c8:	416d      	adcs	r5, r5
 80005ca:	2100      	movs	r1, #0
 80005cc:	3e01      	subs	r6, #1
 80005ce:	1824      	adds	r4, r4, r0
 80005d0:	414d      	adcs	r5, r1
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d006      	beq.n	80005e4 <__udivmoddi4+0x108>
 80005d6:	42ab      	cmp	r3, r5
 80005d8:	d9ee      	bls.n	80005b8 <__udivmoddi4+0xdc>
 80005da:	3e01      	subs	r6, #1
 80005dc:	1924      	adds	r4, r4, r4
 80005de:	416d      	adcs	r5, r5
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d1f8      	bne.n	80005d6 <__udivmoddi4+0xfa>
 80005e4:	9800      	ldr	r0, [sp, #0]
 80005e6:	9901      	ldr	r1, [sp, #4]
 80005e8:	465b      	mov	r3, fp
 80005ea:	1900      	adds	r0, r0, r4
 80005ec:	4169      	adcs	r1, r5
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db24      	blt.n	800063c <__udivmoddi4+0x160>
 80005f2:	002b      	movs	r3, r5
 80005f4:	465a      	mov	r2, fp
 80005f6:	4644      	mov	r4, r8
 80005f8:	40d3      	lsrs	r3, r2
 80005fa:	002a      	movs	r2, r5
 80005fc:	40e2      	lsrs	r2, r4
 80005fe:	001c      	movs	r4, r3
 8000600:	465b      	mov	r3, fp
 8000602:	0015      	movs	r5, r2
 8000604:	2b00      	cmp	r3, #0
 8000606:	db2a      	blt.n	800065e <__udivmoddi4+0x182>
 8000608:	0026      	movs	r6, r4
 800060a:	409e      	lsls	r6, r3
 800060c:	0033      	movs	r3, r6
 800060e:	0026      	movs	r6, r4
 8000610:	4647      	mov	r7, r8
 8000612:	40be      	lsls	r6, r7
 8000614:	0032      	movs	r2, r6
 8000616:	1a80      	subs	r0, r0, r2
 8000618:	4199      	sbcs	r1, r3
 800061a:	9000      	str	r0, [sp, #0]
 800061c:	9101      	str	r1, [sp, #4]
 800061e:	e79f      	b.n	8000560 <__udivmoddi4+0x84>
 8000620:	42a3      	cmp	r3, r4
 8000622:	d8bc      	bhi.n	800059e <__udivmoddi4+0xc2>
 8000624:	e783      	b.n	800052e <__udivmoddi4+0x52>
 8000626:	4642      	mov	r2, r8
 8000628:	2320      	movs	r3, #32
 800062a:	2100      	movs	r1, #0
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	2200      	movs	r2, #0
 8000630:	9100      	str	r1, [sp, #0]
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	2201      	movs	r2, #1
 8000636:	40da      	lsrs	r2, r3
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	e786      	b.n	800054a <__udivmoddi4+0x6e>
 800063c:	4642      	mov	r2, r8
 800063e:	2320      	movs	r3, #32
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	4646      	mov	r6, r8
 8000646:	409a      	lsls	r2, r3
 8000648:	0023      	movs	r3, r4
 800064a:	40f3      	lsrs	r3, r6
 800064c:	4644      	mov	r4, r8
 800064e:	4313      	orrs	r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	40e2      	lsrs	r2, r4
 8000654:	001c      	movs	r4, r3
 8000656:	465b      	mov	r3, fp
 8000658:	0015      	movs	r5, r2
 800065a:	2b00      	cmp	r3, #0
 800065c:	dad4      	bge.n	8000608 <__udivmoddi4+0x12c>
 800065e:	4642      	mov	r2, r8
 8000660:	002f      	movs	r7, r5
 8000662:	2320      	movs	r3, #32
 8000664:	0026      	movs	r6, r4
 8000666:	4097      	lsls	r7, r2
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	40de      	lsrs	r6, r3
 800066c:	003b      	movs	r3, r7
 800066e:	4333      	orrs	r3, r6
 8000670:	e7cd      	b.n	800060e <__udivmoddi4+0x132>
 8000672:	46c0      	nop			; (mov r8, r8)

08000674 <__clzsi2>:
 8000674:	211c      	movs	r1, #28
 8000676:	2301      	movs	r3, #1
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0xe>
 800067e:	0c00      	lsrs	r0, r0, #16
 8000680:	3910      	subs	r1, #16
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	4298      	cmp	r0, r3
 8000686:	d301      	bcc.n	800068c <__clzsi2+0x18>
 8000688:	0a00      	lsrs	r0, r0, #8
 800068a:	3908      	subs	r1, #8
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	4298      	cmp	r0, r3
 8000690:	d301      	bcc.n	8000696 <__clzsi2+0x22>
 8000692:	0900      	lsrs	r0, r0, #4
 8000694:	3904      	subs	r1, #4
 8000696:	a202      	add	r2, pc, #8	; (adr r2, 80006a0 <__clzsi2+0x2c>)
 8000698:	5c10      	ldrb	r0, [r2, r0]
 800069a:	1840      	adds	r0, r0, r1
 800069c:	4770      	bx	lr
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	02020304 	.word	0x02020304
 80006a4:	01010101 	.word	0x01010101
	...

080006b0 <__clzdi2>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2900      	cmp	r1, #0
 80006b4:	d103      	bne.n	80006be <__clzdi2+0xe>
 80006b6:	f7ff ffdd 	bl	8000674 <__clzsi2>
 80006ba:	3020      	adds	r0, #32
 80006bc:	e002      	b.n	80006c4 <__clzdi2+0x14>
 80006be:	0008      	movs	r0, r1
 80006c0:	f7ff ffd8 	bl	8000674 <__clzsi2>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)

080006c8 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80006c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80006ca:	f000 f989 	bl	80009e0 <SystemApp_Init>
//  SubghzApp_Init();
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80006ce:	bd10      	pop	{r4, pc}

080006d0 <Error_Handler>:
		Error_Handler();
	}
}

void Error_Handler(void)
{
 80006d0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d2:	b672      	cpsid	i
	__disable_irq();
	MX_GPIO_Init();
 80006d4:	f006 f84c 	bl	8006770 <MX_GPIO_Init>
	LOG(LOG_INFOR, "Error");
 80006d8:	2004      	movs	r0, #4
 80006da:	4902      	ldr	r1, [pc, #8]	; (80006e4 <Error_Handler+0x14>)
 80006dc:	f006 fe94 	bl	8007408 <LOG>
	while (1){}
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x10>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	08008715 	.word	0x08008715

080006e8 <SystemClock_Config>:
{
 80006e8:	b510      	push	{r4, lr}
 80006ea:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ec:	222c      	movs	r2, #44	; 0x2c
 80006ee:	2100      	movs	r1, #0
 80006f0:	a80f      	add	r0, sp, #60	; 0x3c
 80006f2:	f007 f970 	bl	80079d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	2214      	movs	r2, #20
 80006f8:	2100      	movs	r1, #0
 80006fa:	4668      	mov	r0, sp
 80006fc:	f007 f96b 	bl	80079d6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	2224      	movs	r2, #36	; 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	a805      	add	r0, sp, #20
 8000706:	f007 f966 	bl	80079d6 <memset>
	RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800070e:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	031b      	lsls	r3, r3, #12
 8000714:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000716:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000718:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800071c:	041b      	lsls	r3, r3, #16
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000720:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000724:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f001 fad1 	bl	8001ccc <HAL_RCC_OscConfig>
 800072a:	2800      	cmp	r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x4a>
		Error_Handler();
 800072e:	f7ff ffcf 	bl	80006d0 <Error_Handler>
	__HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <SystemClock_Config+0xb0>)
 8000736:	055b      	lsls	r3, r3, #21
 8000738:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800073a:	430b      	orrs	r3, r1
 800073c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <SystemClock_Config+0xb4>)
 8000740:	4917      	ldr	r1, [pc, #92]	; (80007a0 <SystemClock_Config+0xb8>)
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	4019      	ands	r1, r3
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800074e:	6851      	ldr	r1, [r2, #4]
 8000750:	000b      	movs	r3, r1
 8000752:	4023      	ands	r3, r4
 8000754:	4221      	tst	r1, r4
 8000756:	d1fa      	bne.n	800074e <SystemClock_Config+0x66>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000758:	220f      	movs	r2, #15
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075a:	2101      	movs	r1, #1
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800075c:	9200      	str	r2, [sp, #0]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	3a0c      	subs	r2, #12
 8000762:	9201      	str	r2, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076a:	f001 fd39 	bl	80021e0 <HAL_RCC_ClockConfig>
 800076e:	2800      	cmp	r0, #0
 8000770:	d1dd      	bne.n	800072e <SystemClock_Config+0x46>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000772:	23ab      	movs	r3, #171	; 0xab
 8000774:	9305      	str	r3, [sp, #20]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8000776:	23c0      	movs	r3, #192	; 0xc0
 8000778:	031b      	lsls	r3, r3, #12
 800077a:	930c      	str	r3, [sp, #48]	; 0x30
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800077c:	2304      	movs	r3, #4
 800077e:	9308      	str	r3, [sp, #32]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000780:	2380      	movs	r3, #128	; 0x80
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000782:	9007      	str	r0, [sp, #28]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000784:	900a      	str	r0, [sp, #40]	; 0x28
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000786:	025b      	lsls	r3, r3, #9
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	a805      	add	r0, sp, #20
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800078a:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f001 fe16 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8000790:	2800      	cmp	r0, #0
 8000792:	d1cc      	bne.n	800072e <SystemClock_Config+0x46>
}
 8000794:	b01c      	add	sp, #112	; 0x70
 8000796:	bd10      	pop	{r4, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	40007000 	.word	0x40007000
 80007a0:	ffffe7ff 	.word	0xffffe7ff

080007a4 <main>:
{
 80007a4:	b510      	push	{r4, lr}
	HAL_Init();
 80007a6:	f000 fd2f 	bl	8001208 <HAL_Init>
		SystemClock_Config();
 80007aa:	f7ff ff9d 	bl	80006e8 <SystemClock_Config>
	MX_SubGHz_Phy_Init();
 80007ae:	f7ff ff8b 	bl	80006c8 <MX_SubGHz_Phy_Init>
	Main_Task();
 80007b2:	f004 ff85 	bl	80056c0 <Main_Task>
}
 80007b6:	2000      	movs	r0, #0
 80007b8:	bd10      	pop	{r4, pc}
	...

080007bc <HAL_RTC_MspInit>:
    Error_Handler();
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80007bc:	b510      	push	{r4, lr}
 80007be:	0004      	movs	r4, r0
 80007c0:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	2238      	movs	r2, #56	; 0x38
 80007c4:	2100      	movs	r1, #0
 80007c6:	4668      	mov	r0, sp
 80007c8:	f007 f905 	bl	80079d6 <memset>
  if (rtcHandle->Instance == RTC)
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_RTC_MspInit+0x50>)
 80007ce:	6822      	ldr	r2, [r4, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d118      	bne.n	8000806 <HAL_RTC_MspInit+0x4a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80007d4:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80007d8:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007da:	33fc      	adds	r3, #252	; 0xfc
 80007dc:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f001 fa75 	bl	8001ccc <HAL_RCC_OscConfig>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d001      	beq.n	80007ea <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80007e6:	f7ff ff73 	bl	80006d0 <Error_Handler>
    }
    __HAL_RCC_RTC_ENABLE();
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_RTC_MspInit+0x54>)
 80007ee:	02db      	lsls	r3, r3, #11
 80007f0:	6d11      	ldr	r1, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80007f2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	0011      	movs	r1, r2
 80007fc:	f000 fe88 	bl	8001510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000800:	2002      	movs	r0, #2
 8000802:	f000 feaf 	bl	8001564 <HAL_NVIC_EnableIRQ>
  }
}
 8000806:	b00e      	add	sp, #56	; 0x38
 8000808:	bd10      	pop	{r4, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40002800 	.word	0x40002800
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_MspInit>:
#include "sys_debug.h"

#define ENABLE_FAST_WAKEUP
void HAL_MspInit(void)
{
	__HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_MspInit+0x28>)
 8000818:	055b      	lsls	r3, r3, #21
 800081a:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 800081c:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 800081e:	430b      	orrs	r3, r1
 8000820:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_DisablePVD();
 8000822:	f001 f9ef 	bl	8001c04 <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 8000826:	f001 f9ff 	bl	8001c28 <HAL_PWREx_EnableUltraLowPower>
	__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800082a:	2308      	movs	r3, #8
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_MspInit+0x2c>)
 800082e:	6811      	ldr	r1, [r2, #0]
 8000830:	430b      	orrs	r3, r1
 8000832:	6013      	str	r3, [r2, #0]
	DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

	#ifdef ENABLE_FAST_WAKEUP
		HAL_PWREx_EnableFastWakeUp();
 8000834:	f001 f9ee 	bl	8001c14 <HAL_PWREx_EnableFastWakeUp>
	#else
		HAL_PWREx_DisableFastWakeUp();
	#endif
}
 8000838:	bd10      	pop	{r4, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000
 8000840:	40022000 	.word	0x40022000

08000844 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_usart1_tx;
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart2_tx;
extern UART_HandleTypeDef huart2;

void NMI_Handler(void){ while (1){}}
 8000844:	e7fe      	b.n	8000844 <NMI_Handler>

08000846 <HardFault_Handler>:
void HardFault_Handler(void){ while (1){}}
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler>

08000848 <SVC_Handler>:
void MemManage_Handler(void){ while (1){}}
void BusFault_Handler(void){ while (1){}}
void UsageFault_Handler(void){ while (1){}}
void SVC_Handler(void){}
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:
void DebugMon_Handler(void){}
void PendSV_Handler(void){}
void SysTick_Handler(void)
{
 800084c:	b510      	push	{r4, lr}
	RtCountSystick_u32++;
 800084e:	4a03      	ldr	r2, [pc, #12]	; (800085c <SysTick_Handler+0x10>)
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	6013      	str	r3, [r2, #0]
	HAL_IncTick();
 8000856:	f000 fceb 	bl	8001230 <HAL_IncTick>
}
 800085a:	bd10      	pop	{r4, pc}
 800085c:	20001380 	.word	0x20001380

08000860 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8000860:	b510      	push	{r4, lr}
	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <EXTI0_1_IRQHandler+0x10>)
 8000864:	f000 ff52 	bl	800170c <HAL_EXTI_IRQHandler>
		HAL_EXTI_IRQHandler(&H_EXTI_1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <EXTI0_1_IRQHandler+0x14>)
 800086a:	f000 ff4f 	bl	800170c <HAL_EXTI_IRQHandler>
	#endif
}
 800086e:	bd10      	pop	{r4, pc}
 8000870:	2000027c 	.word	0x2000027c
 8000874:	20000274 	.word	0x20000274

08000878 <EXTI2_3_IRQHandler>:
 8000878:	4770      	bx	lr
	...

0800087c <EXTI4_15_IRQHandler>:
		HAL_EXTI_IRQHandler(&H_EXTI_3);
	#endif
}

void EXTI4_15_IRQHandler(void)
{
 800087c:	b510      	push	{r4, lr}
	HAL_EXTI_IRQHandler(&H_EXTI_4);
 800087e:	4819      	ldr	r0, [pc, #100]	; (80008e4 <EXTI4_15_IRQHandler+0x68>)
 8000880:	f000 ff44 	bl	800170c <HAL_EXTI_IRQHandler>
	#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
		HAL_EXTI_IRQHandler(&H_EXTI_10);
	#endif

	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_13);
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <EXTI4_15_IRQHandler+0x6c>)
 8000886:	f000 ff41 	bl	800170c <HAL_EXTI_IRQHandler>
	#endif

	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800088a:	2010      	movs	r0, #16
 800088c:	f001 f9ae 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8000890:	2020      	movs	r0, #32
 8000892:	f001 f9ab 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8000896:	2040      	movs	r0, #64	; 0x40
 8000898:	f001 f9a8 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800089c:	2080      	movs	r0, #128	; 0x80
 800089e:	f001 f9a5 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	0040      	lsls	r0, r0, #1
 80008a6:	f001 f9a1 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	0080      	lsls	r0, r0, #2
 80008ae:	f001 f99d 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 80008b2:	2080      	movs	r0, #128	; 0x80
 80008b4:	00c0      	lsls	r0, r0, #3
 80008b6:	f001 f999 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	0100      	lsls	r0, r0, #4
 80008be:	f001 f995 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 80008c2:	2080      	movs	r0, #128	; 0x80
 80008c4:	0140      	lsls	r0, r0, #5
 80008c6:	f001 f991 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 80008ca:	2080      	movs	r0, #128	; 0x80
 80008cc:	0180      	lsls	r0, r0, #6
 80008ce:	f001 f98d 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	01c0      	lsls	r0, r0, #7
 80008d6:	f001 f989 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	0200      	lsls	r0, r0, #8
 80008de:	f001 f985 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
}
 80008e2:	bd10      	pop	{r4, pc}
 80008e4:	2000026c 	.word	0x2000026c
 80008e8:	20000284 	.word	0x20000284

080008ec <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler(void)
{
 80008ec:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008ee:	4802      	ldr	r0, [pc, #8]	; (80008f8 <DMA1_Channel2_3_IRQHandler+0xc>)
 80008f0:	f000 feb3 	bl	800165a <HAL_DMA_IRQHandler>
}
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200011d8 	.word	0x200011d8

080008fc <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80008fc:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008fe:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8000900:	f000 feab 	bl	800165a <HAL_DMA_IRQHandler>
}
 8000904:	bd10      	pop	{r4, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20001190 	.word	0x20001190

0800090c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
	#ifdef DEVICE_TYPE_STATION
		uint8_t	TempRecieve_u8 = 0;
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <USART1_IRQHandler+0x30>)
{
 800090e:	b510      	push	{r4, lr}
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 8000910:	6803      	ldr	r3, [r0, #0]
 8000912:	6a59      	ldr	r1, [r3, #36]	; 0x24
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <USART1_IRQHandler+0x34>)
 8000916:	889a      	ldrh	r2, [r3, #4]
 8000918:	1c54      	adds	r4, r2, #1
 800091a:	809c      	strh	r4, [r3, #4]
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 800091c:	681c      	ldr	r4, [r3, #0]
 800091e:	54a1      	strb	r1, [r4, r2]
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
 8000920:	2296      	movs	r2, #150	; 0x96
 8000922:	8899      	ldrh	r1, [r3, #4]
 8000924:	00d2      	lsls	r2, r2, #3
 8000926:	4291      	cmp	r1, r2
 8000928:	d301      	bcc.n	800092e <USART1_IRQHandler+0x22>
			sUartDebug.Length_u16 = 0;
 800092a:	2200      	movs	r2, #0
 800092c:	809a      	strh	r2, [r3, #4]
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
 800092e:	2201      	movs	r2, #1
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <USART1_IRQHandler+0x38>)
 8000932:	3302      	adds	r3, #2
 8000934:	77da      	strb	r2, [r3, #31]
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
			sUartDebug.Length_u16 = 0;
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
	#endif
	HAL_UART_IRQHandler(&huart1);
 8000936:	f002 fc2f 	bl	8003198 <HAL_UART_IRQHandler>
}
 800093a:	bd10      	pop	{r4, pc}
 800093c:	200012a4 	.word	0x200012a4
 8000940:	200000b8 	.word	0x200000b8
 8000944:	20000024 	.word	0x20000024

08000948 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
	#ifdef DEVICE_TYPE_STATION
		uint8_t	TempRecieve_u8 = 0;
		TempRecieve_u8 = (uint8_t)(huart2.Instance->RDR & 0x00FF);
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <USART2_IRQHandler+0x30>)
{
 800094a:	b510      	push	{r4, lr}
		TempRecieve_u8 = (uint8_t)(huart2.Instance->RDR & 0x00FF);
 800094c:	6803      	ldr	r3, [r0, #0]
 800094e:	6a59      	ldr	r1, [r3, #36]	; 0x24
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <USART2_IRQHandler+0x34>)
 8000952:	889a      	ldrh	r2, [r3, #4]
 8000954:	1c54      	adds	r4, r2, #1
 8000956:	809c      	strh	r4, [r3, #4]
		TempRecieve_u8 = (uint8_t)(huart2.Instance->RDR & 0x00FF);
 8000958:	681c      	ldr	r4, [r3, #0]
 800095a:	54a1      	strb	r1, [r4, r2]
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
 800095c:	2296      	movs	r2, #150	; 0x96
 800095e:	8899      	ldrh	r1, [r3, #4]
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	4291      	cmp	r1, r2
 8000964:	d301      	bcc.n	800096a <USART2_IRQHandler+0x22>
		sUartDebug.Length_u16 = 0;
 8000966:	2200      	movs	r2, #0
 8000968:	809a      	strh	r2, [r3, #4]
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
 800096a:	2201      	movs	r2, #1
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <USART2_IRQHandler+0x38>)
 800096e:	3302      	adds	r3, #2
 8000970:	77da      	strb	r2, [r3, #31]
	#else
	#endif
	HAL_UART_IRQHandler(&huart2);
 8000972:	f002 fc11 	bl	8003198 <HAL_UART_IRQHandler>
}
 8000976:	bd10      	pop	{r4, pc}
 8000978:	20001220 	.word	0x20001220
 800097c:	200000b8 	.word	0x200000b8
 8000980:	20000024 	.word	0x20000024

08000984 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8000984:	b510      	push	{r4, lr}
	HAL_RTC_AlarmIRQHandler(&hrtc);
 8000986:	4802      	ldr	r0, [pc, #8]	; (8000990 <RTC_IRQHandler+0xc>)
 8000988:	f001 fe58 	bl	800263c <HAL_RTC_AlarmIRQHandler>
}
 800098c:	bd10      	pop	{r4, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	200001e0 	.word	0x200001e0

08000994 <tiny_snprintf_like.constprop.0>:
void UTIL_ADV_TRACE_PostSendHook(void)
{
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8000994:	b40c      	push	{r2, r3}
 8000996:	b507      	push	{r0, r1, r2, lr}
{
	va_list vaArgs;
	va_start(vaArgs, strFormat);
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000998:	2110      	movs	r1, #16
	va_start(vaArgs, strFormat);
 800099a:	ab05      	add	r3, sp, #20
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <tiny_snprintf_like.constprop.0+0x18>)
	va_start(vaArgs, strFormat);
 800099e:	9301      	str	r3, [sp, #4]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80009a0:	f006 febc 	bl	800771c <tiny_vsnprintf_like>
	va_end(vaArgs);
}
 80009a4:	b003      	add	sp, #12
 80009a6:	bc08      	pop	{r3}
 80009a8:	b002      	add	sp, #8
 80009aa:	4718      	bx	r3
 80009ac:	080086ac 	.word	0x080086ac

080009b0 <TimestampNow>:
{
 80009b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80009b2:	0004      	movs	r4, r0
	SysTime_t curtime = SysTimeGet();
 80009b4:	ae02      	add	r6, sp, #8
 80009b6:	0030      	movs	r0, r6
{
 80009b8:	000d      	movs	r5, r1
	SysTime_t curtime = SysTimeGet();
 80009ba:	f006 fe83 	bl	80076c4 <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80009be:	2204      	movs	r2, #4
 80009c0:	5eb3      	ldrsh	r3, [r6, r2]
 80009c2:	2110      	movs	r1, #16
 80009c4:	0020      	movs	r0, r4
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <TimestampNow+0x2c>)
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	9b02      	ldr	r3, [sp, #8]
 80009cc:	f7ff ffe2 	bl	8000994 <tiny_snprintf_like.constprop.0>
	*size = strlen((char *)buff);
 80009d0:	0020      	movs	r0, r4
 80009d2:	f7ff fb99 	bl	8000108 <strlen>
 80009d6:	8028      	strh	r0, [r5, #0]
}
 80009d8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	080086ac 	.word	0x080086ac

080009e0 <SystemApp_Init>:
{
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2501      	movs	r5, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	2602      	movs	r6, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2704      	movs	r7, #4
{
 80009e8:	b08b      	sub	sp, #44	; 0x2c
	UTIL_TIMER_Init();
 80009ea:	f006 fb37 	bl	800705c <UTIL_TIMER_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	220c      	movs	r2, #12
 80009f0:	2100      	movs	r1, #0
 80009f2:	a807      	add	r0, sp, #28
 80009f4:	f006 ffef 	bl	80079d6 <memset>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009f8:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4c2c      	ldr	r4, [pc, #176]	; (8000aac <SystemApp_Init+0xcc>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	a905      	add	r1, sp, #20
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	432b      	orrs	r3, r5
 8000a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	402b      	ands	r3, r5
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a12:	4333      	orrs	r3, r6
 8000a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a18:	4033      	ands	r3, r6
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a20:	433b      	orrs	r3, r7
 8000a22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a26:	403b      	ands	r3, r7
 8000a28:	9303      	str	r3, [sp, #12]
 8000a2a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a34:	4013      	ands	r3, r2
 8000a36:	9304      	str	r3, [sp, #16]
 8000a38:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <SystemApp_Init+0xd0>)
 8000a40:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f000 ff77 	bl	8001934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <SystemApp_Init+0xd4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	a905      	add	r1, sp, #20
 8000a4a:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <SystemApp_Init+0xd8>)
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000a4c:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f000 ff71 	bl	8001934 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	a905      	add	r1, sp, #20
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <SystemApp_Init+0xdc>)
 8000a56:	f000 ff6d 	bl	8001934 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5a:	a905      	add	r1, sp, #20
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <SystemApp_Init+0xe0>)
 8000a5e:	f000 ff69 	bl	8001934 <HAL_GPIO_Init>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000a62:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000a64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a66:	43ab      	bics	r3, r5
 8000a68:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a6c:	43b3      	bics	r3, r6
 8000a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000a70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a72:	43bb      	bics	r3, r7
 8000a74:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a78:	4393      	bics	r3, r2
 8000a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
	DBG_Disable();
 8000a7c:	f000 f83a 	bl	8000af4 <DBG_Disable>
	DBG_ProbesInit();
 8000a80:	f000 f83c 	bl	8000afc <DBG_ProbesInit>
	UTIL_ADV_TRACE_Init();
 8000a84:	f006 fda6 	bl	80075d4 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <SystemApp_Init+0xe4>)
 8000a8a:	f006 fdbd 	bl	8007608 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a8e:	0030      	movs	r0, r6
 8000a90:	f006 fdc0 	bl	8007614 <UTIL_ADV_TRACE_SetVerboseLevel>
	Sx_Board_Bus_Init();
 8000a94:	f000 fb40 	bl	8001118 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
	Sx_Board_IoInit();
 8000a98:	f000 f98e 	bl	8000db8 <CMWX1ZZABZ0XX_RADIO_IoInit>
	UTIL_LPM_Init();
 8000a9c:	f005 fff6 	bl	8006a8c <UTIL_LPM_Init>
		UTIL_LPM_SetStopMode( UTIL_LPM_DISABLE );
 8000aa0:	0028      	movs	r0, r5
 8000aa2:	f005 ffe5 	bl	8006a70 <UTIL_LPM_SetStopMode>
}
 8000aa6:	b00b      	add	sp, #44	; 0x2c
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	00009fff 	.word	0x00009fff
 8000ab4:	0000ffff 	.word	0x0000ffff
 8000ab8:	50000400 	.word	0x50000400
 8000abc:	50000800 	.word	0x50000800
 8000ac0:	50001c00 	.word	0x50001c00
 8000ac4:	080009b1 	.word	0x080009b1

08000ac8 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000ac8:	b510      	push	{r4, lr}
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f005 ffd0 	bl	8006a70 <UTIL_LPM_SetStopMode>
}
 8000ad0:	bd10      	pop	{r4, pc}
	...

08000ad4 <DBG_ConfigForLpm.part.0>:
		#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
	#endif /* DEBUGGER_OFF */

	if (enable_dbg == 1)
	{
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 8000ad8:	b510      	push	{r4, lr}
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8000ada:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000adc:	03db      	lsls	r3, r3, #15
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34

		HAL_DBGMCU_EnableDBGSleepMode();
 8000ae2:	f000 fbc9 	bl	8001278 <HAL_DBGMCU_EnableDBGSleepMode>
		HAL_DBGMCU_EnableDBGStopMode();
 8000ae6:	f000 fbd7 	bl	8001298 <HAL_DBGMCU_EnableDBGStopMode>
		HAL_DBGMCU_EnableDBGStandbyMode();
 8000aea:	f000 fbe5 	bl	80012b8 <HAL_DBGMCU_EnableDBGStandbyMode>
		HAL_DBGMCU_DisableDBGSleepMode();
		HAL_DBGMCU_DisableDBGStopMode();
		HAL_DBGMCU_DisableDBGStandbyMode();
		__HAL_RCC_DBGMCU_CLK_DISABLE();
	}
}
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <DBG_Disable>:
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	f7ff ffed 	bl	8000ad4 <DBG_ConfigForLpm.part.0>
}
 8000afa:	bd10      	pop	{r4, pc}

08000afc <DBG_ProbesInit>:
		HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);

	#elif !defined (PROBE_PINS_ENABLED)
		#error "PROBE_PINS_ENABLED not defined or out of range <0,1>"
	#endif /* PROBE_PINS_ENABLED */
}
 8000afc:	4770      	bx	lr
	...

08000b00 <vcom_Init>:

static void (*TxCpltCallback)(void *);
static void (*RxCpltCallback)(uint8_t *rxChar, uint16_t size, uint8_t error);

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8000b00:	b510      	push	{r4, lr}
	TxCpltCallback = cb;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <vcom_Init+0x14>)
 8000b04:	6018      	str	r0, [r3, #0]
	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
 8000b06:	f005 fe61 	bl	80067cc <MX_USART1_UART_Init>
		MX_USART2_UART_Init();
 8000b0a:	f005 fe7b 	bl	8006804 <MX_USART2_UART_Init>
	#else
		MX_USART1_UART_Init();
	#endif
	return UTIL_ADV_TRACE_OK;
}
 8000b0e:	2000      	movs	r0, #0
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000204 	.word	0x20000204

08000b18 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
#ifdef DEVICE_TYPE_STATION
	__HAL_RCC_USART1_FORCE_RESET();
 8000b18:	2380      	movs	r3, #128	; 0x80
{
 8000b1a:	b510      	push	{r4, lr}
	__HAL_RCC_USART1_FORCE_RESET();
 8000b1c:	4c0c      	ldr	r4, [pc, #48]	; (8000b50 <vcom_DeInit+0x38>)
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	6a62      	ldr	r2, [r4, #36]	; 0x24
	__HAL_RCC_USART1_RELEASE_RESET();
	HAL_UART_MspDeInit(&huart1);
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <vcom_DeInit+0x3c>)
	__HAL_RCC_USART1_FORCE_RESET();
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6263      	str	r3, [r4, #36]	; 0x24
	__HAL_RCC_USART1_RELEASE_RESET();
 8000b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <vcom_DeInit+0x40>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	6263      	str	r3, [r4, #36]	; 0x24
	HAL_UART_MspDeInit(&huart1);
 8000b30:	f005 fefe 	bl	8006930 <HAL_UART_MspDeInit>
	__HAL_RCC_USART2_FORCE_RESET();
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b38:	029b      	lsls	r3, r3, #10
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	62a3      	str	r3, [r4, #40]	; 0x28
	__HAL_RCC_USART2_RELEASE_RESET();
 8000b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <vcom_DeInit+0x44>)
	HAL_UART_MspDeInit(&huart2);
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <vcom_DeInit+0x48>)
	__HAL_RCC_USART2_RELEASE_RESET();
 8000b44:	4013      	ands	r3, r2
 8000b46:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_UART_MspDeInit(&huart2);
 8000b48:	f005 fef2 	bl	8006930 <HAL_UART_MspDeInit>
	__HAL_RCC_USART1_FORCE_RESET();
	__HAL_RCC_USART1_RELEASE_RESET();
	HAL_UART_MspDeInit(&huart1);
#endif
	return UTIL_ADV_TRACE_OK;
}
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	bd10      	pop	{r4, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	200012a4 	.word	0x200012a4
 8000b58:	ffffbfff 	.word	0xffffbfff
 8000b5c:	fffdffff 	.word	0xfffdffff
 8000b60:	20001220 	.word	0x20001220

08000b64 <vcom_Trace_DMA>:
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
	#endif
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
	#ifdef DEVICE_TYPE_STATION
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8000b66:	26fa      	movs	r6, #250	; 0xfa
{
 8000b68:	000d      	movs	r5, r1
 8000b6a:	0004      	movs	r4, r0
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8000b6c:	00b6      	lsls	r6, r6, #2
 8000b6e:	0033      	movs	r3, r6
 8000b70:	000a      	movs	r2, r1
 8000b72:	0001      	movs	r1, r0
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <vcom_Trace_DMA+0x30>)
 8000b76:	f002 fe75 	bl	8003864 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, p_data, size, 1000);
 8000b7a:	0033      	movs	r3, r6
 8000b7c:	002a      	movs	r2, r5
 8000b7e:	0021      	movs	r1, r4
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <vcom_Trace_DMA+0x34>)
 8000b82:	f002 fe6f 	bl	8003864 <HAL_UART_Transmit>
	#else
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
	#endif
	TxCpltCallback(NULL);
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <vcom_Trace_DMA+0x38>)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4798      	blx	r3
	return UTIL_ADV_TRACE_OK;
}
 8000b8e:	2000      	movs	r0, #0
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	200012a4 	.word	0x200012a4
 8000b98:	20001220 	.word	0x20001220
 8000b9c:	20000204 	.word	0x20000204

08000ba0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
	RxCpltCallback = RxCb;
	#ifdef DEVICE_TYPE_STATION
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000ba0:	2280      	movs	r2, #128	; 0x80
{
 8000ba2:	b510      	push	{r4, lr}
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <vcom_ReceiveInit+0x48>)
 8000ba6:	0252      	lsls	r2, r2, #9
 8000ba8:	6803      	ldr	r3, [r0, #0]
 8000baa:	69d9      	ldr	r1, [r3, #28]
 8000bac:	4211      	tst	r1, r2
 8000bae:	d1fc      	bne.n	8000baa <vcom_ReceiveInit+0xa>
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	03d2      	lsls	r2, r2, #15
 8000bb4:	69d9      	ldr	r1, [r3, #28]
 8000bb6:	4211      	tst	r1, r2
 8000bb8:	d0fc      	beq.n	8000bb4 <vcom_ReceiveInit+0x14>
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8000bba:	4c0c      	ldr	r4, [pc, #48]	; (8000bec <vcom_ReceiveInit+0x4c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	1d21      	adds	r1, r4, #4
 8000bc0:	f002 ff70 	bl	8003aa4 <HAL_UART_Receive_IT>
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <vcom_ReceiveInit+0x50>)
 8000bc8:	0252      	lsls	r2, r2, #9
 8000bca:	6803      	ldr	r3, [r0, #0]
 8000bcc:	69d9      	ldr	r1, [r3, #28]
 8000bce:	4211      	tst	r1, r2
 8000bd0:	d1fc      	bne.n	8000bcc <vcom_ReceiveInit+0x2c>
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	03d2      	lsls	r2, r2, #15
 8000bd6:	69d9      	ldr	r1, [r3, #28]
 8000bd8:	4211      	tst	r1, r2
 8000bda:	d0fc      	beq.n	8000bd6 <vcom_ReceiveInit+0x36>
		HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	1d21      	adds	r1, r4, #4
 8000be0:	f002 ff60 	bl	8003aa4 <HAL_UART_Receive_IT>
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
	#endif

	return UTIL_ADV_TRACE_OK;
}
 8000be4:	2000      	movs	r0, #0
 8000be6:	bd10      	pop	{r4, pc}
 8000be8:	200012a4 	.word	0x200012a4
 8000bec:	20000204 	.word	0x20000204
 8000bf0:	20001220 	.word	0x20001220

08000bf4 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c22:	f000 faa1 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f006 fea9 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fdbb 	bl	80007a4 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
   ldr   r0, =_estack
 8000c30:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8000c3c:	08008cbc 	.word	0x08008cbc
  ldr r2, =_sbss
 8000c40:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8000c44:	200016bc 	.word	0x200016bc

08000c48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_COMP_IRQHandler>
	...

08000c4c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <_sbrk+0x2c>)
{
 8000c4e:	0003      	movs	r3, r0
	if (heap_end == 0)
 8000c50:	6811      	ldr	r1, [r2, #0]
{
 8000c52:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d101      	bne.n	8000c5c <_sbrk+0x10>
		heap_end = &end;
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <_sbrk+0x30>)
 8000c5a:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000c5c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000c5e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000c60:	18c3      	adds	r3, r0, r3
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d906      	bls.n	8000c74 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c66:	f006 fe83 	bl	8007970 <__errno>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000c72:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8000c74:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8000c76:	e7fc      	b.n	8000c72 <_sbrk+0x26>
 8000c78:	2000020c 	.word	0x2000020c
 8000c7c:	200016c0 	.word	0x200016c0

08000c80 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c80:	23fa      	movs	r3, #250	; 0xfa
{
 8000c82:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c84:	009b      	lsls	r3, r3, #2
{
 8000c86:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	000a      	movs	r2, r1
 8000c8e:	0001      	movs	r1, r0
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <BSP_SPI1_SendRecv+0x24>)
 8000c92:	f002 f8e3 	bl	8002e5c <HAL_SPI_TransmitReceive>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d101      	bne.n	8000c9e <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8000c9a:	0020      	movs	r0, r4
  }
  return ret;
}
 8000c9c:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000c9e:	2006      	movs	r0, #6
 8000ca0:	4240      	negs	r0, r0
  return ret;
 8000ca2:	e7fb      	b.n	8000c9c <BSP_SPI1_SendRecv+0x1c>
 8000ca4:	20000214 	.word	0x20000214

08000ca8 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI1_Init+0x54>)
{
 8000caa:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8000cac:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000cae:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000cb0:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000cb6:	33fc      	adds	r3, #252	; 0xfc
 8000cb8:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbc:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbe:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc0:	6145      	str	r5, [r0, #20]
{
 8000cc2:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8000cc4:	f001 fb6a 	bl	800239c <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8000cc8:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8000ccc:	490d      	ldr	r1, [pc, #52]	; (8000d04 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d80d      	bhi.n	8000cee <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000cda:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8000cdc:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8000cde:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000ce0:	0020      	movs	r0, r4
 8000ce2:	f002 f853 	bl	8002d8c <HAL_SPI_Init>
 8000ce6:	1e43      	subs	r3, r0, #1
 8000ce8:	4198      	sbcs	r0, r3
  return ret;
 8000cea:	b2c0      	uxtb	r0, r0
}
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8000cee:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8000cf0:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8000cf2:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d0ec      	beq.n	8000cd2 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8000cf8:	0840      	lsrs	r0, r0, #1
 8000cfa:	e7e8      	b.n	8000cce <MX_SPI1_Init+0x26>
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	00989680 	.word	0x00989680
 8000d04:	08008368 	.word	0x08008368

08000d08 <BSP_SPI1_Init>:
{
 8000d08:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8000d0a:	4d1b      	ldr	r5, [pc, #108]	; (8000d78 <BSP_SPI1_Init+0x70>)
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000d0e:	0028      	movs	r0, r5
{
 8000d10:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8000d12:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000d14:	f002 f9f8 	bl	8003108 <HAL_SPI_GetState>
 8000d18:	1e04      	subs	r4, r0, #0
 8000d1a:	d002      	beq.n	8000d22 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8000d1c:	2000      	movs	r0, #0
}
 8000d1e:	b007      	add	sp, #28
 8000d20:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <BSP_SPI1_Init+0x78>)
 8000d26:	015b      	lsls	r3, r3, #5
 8000d28:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000d32:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d34:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	3301      	adds	r3, #1
 8000d3a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d3c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000d3e:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d40:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000d42:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d44:	f000 fdf6 	bl	8001934 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000d48:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000d4a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000d4c:	a901      	add	r1, sp, #4
 8000d4e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000d50:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000d52:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000d54:	f000 fdee 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000d58:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <BSP_SPI1_Init+0x7c>)
 8000d5c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000d5e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000d60:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000d62:	f000 fde7 	bl	8001934 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000d66:	0028      	movs	r0, r5
 8000d68:	f7ff ff9e 	bl	8000ca8 <MX_SPI1_Init>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d0d5      	beq.n	8000d1c <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8000d70:	2008      	movs	r0, #8
 8000d72:	4240      	negs	r0, r0
  return ret;
 8000d74:	e7d3      	b.n	8000d1e <BSP_SPI1_Init+0x16>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000214 	.word	0x20000214
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40021000 	.word	0x40021000
 8000d84:	50000400 	.word	0x50000400

08000d88 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8000d88:	2005      	movs	r0, #5
 8000d8a:	4770      	bx	lr

08000d8c <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	b510      	push	{r4, lr}

  if (state == SET)
 8000d90:	2801      	cmp	r0, #1
 8000d92:	d109      	bne.n	8000da8 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	20a0      	movs	r0, #160	; 0xa0
 8000d98:	0149      	lsls	r1, r1, #5
 8000d9a:	05c0      	lsls	r0, r0, #23
 8000d9c:	f000 ff16 	bl	8001bcc <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 fa57 	bl	8001254 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8000da6:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	20a0      	movs	r0, #160	; 0xa0
 8000dac:	2200      	movs	r2, #0
 8000dae:	0149      	lsls	r1, r1, #5
 8000db0:	05c0      	lsls	r0, r0, #23
 8000db2:	f000 ff0b 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8000db6:	e7f6      	b.n	8000da6 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08000db8 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8000db8:	2300      	movs	r3, #0
{
 8000dba:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dbc:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8000dbe:	2204      	movs	r2, #4
{
 8000dc0:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dc2:	4c65      	ldr	r4, [pc, #404]	; (8000f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8000dc4:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000dc8:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dca:	433b      	orrs	r3, r7
 8000dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000dd0:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dd2:	403b      	ands	r3, r7
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8000dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000dda:	4e60      	ldr	r6, [pc, #384]	; (8000f5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8000ddc:	433b      	orrs	r3, r7
 8000dde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000de2:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8000de4:	403b      	ands	r3, r7
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8000dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dec:	433b      	orrs	r3, r7
 8000dee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000df0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000df2:	403b      	ands	r3, r7
 8000df4:	9303      	str	r3, [sp, #12]
 8000df6:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8000df8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000e00:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8000e02:	4013      	ands	r3, r2
 8000e04:	9304      	str	r3, [sp, #16]
 8000e06:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e08:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e0a:	0001      	movs	r1, r0
 8000e0c:	4854      	ldr	r0, [pc, #336]	; (8000f60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e0e:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e10:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8000e12:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e14:	f000 fd8e 	bl	8001934 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e18:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e1a:	a80c      	add	r0, sp, #48	; 0x30
 8000e1c:	0001      	movs	r1, r0
 8000e1e:	4850      	ldr	r0, [pc, #320]	; (8000f60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e20:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e22:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e24:	f000 fd86 	bl	8001934 <HAL_GPIO_Init>
 8000e28:	a80c      	add	r0, sp, #48	; 0x30
 8000e2a:	0001      	movs	r1, r0
 8000e2c:	484c      	ldr	r0, [pc, #304]	; (8000f60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e2e:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e30:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e32:	f000 fd7f 	bl	8001934 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e36:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e38:	a80c      	add	r0, sp, #48	; 0x30
 8000e3a:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e3c:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e3e:	484a      	ldr	r0, [pc, #296]	; (8000f68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e40:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e42:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e44:	f000 fd76 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8000e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e4a:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8000e4c:	433b      	orrs	r3, r7
 8000e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8000e54:	403b      	ands	r3, r7
 8000e56:	9309      	str	r3, [sp, #36]	; 0x24
 8000e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8000e5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e5c:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8000e5e:	432b      	orrs	r3, r5
 8000e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e64:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8000e66:	402b      	ands	r3, r5
 8000e68:	930a      	str	r3, [sp, #40]	; 0x28
 8000e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8000e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e6e:	432b      	orrs	r3, r5
 8000e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8000e76:	402b      	ands	r3, r5
 8000e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8000e7c:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e7e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8000e80:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e82:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8000e84:	3380      	adds	r3, #128	; 0x80
 8000e86:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8a:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e8c:	f000 fd52 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8000e90:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e92:	a811      	add	r0, sp, #68	; 0x44
 8000e94:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8000e96:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e98:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8000e9a:	3340      	adds	r3, #64	; 0x40
 8000e9c:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e9e:	f000 fd49 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8000ea2:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ea4:	a811      	add	r0, sp, #68	; 0x44
 8000ea6:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8000ea8:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000eaa:	482d      	ldr	r0, [pc, #180]	; (8000f60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8000eac:	3308      	adds	r3, #8
 8000eae:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000eb0:	f000 fd40 	bl	8001934 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8000eb4:	2080      	movs	r0, #128	; 0x80
 8000eb6:	0200      	lsls	r0, r0, #8
 8000eb8:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8000ebc:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8000ebe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ec0:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8000ec2:	432b      	orrs	r3, r5
 8000ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ec8:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8000eca:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ecc:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8000ece:	9305      	str	r3, [sp, #20]
 8000ed0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ed2:	f000 fd2f 	bl	8001934 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	002a      	movs	r2, r5
 8000eda:	0030      	movs	r0, r6
 8000edc:	0209      	lsls	r1, r1, #8
 8000ede:	f000 fe75 	bl	8001bcc <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8000ee2:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8000ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000ee6:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8000ee8:	432b      	orrs	r3, r5
 8000eea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8000eee:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 8000ef0:	402b      	ands	r3, r5
 8000ef2:	9306      	str	r3, [sp, #24]
 8000ef4:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8000ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ef8:	432b      	orrs	r3, r5
 8000efa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000efe:	402b      	ands	r3, r5
 8000f00:	9307      	str	r3, [sp, #28]
 8000f02:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8000f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f06:	4313      	orrs	r3, r2
 8000f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	9308      	str	r3, [sp, #32]
 8000f10:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8000f12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f14:	4313      	orrs	r3, r2
 8000f16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f1a:	0014      	movs	r4, r2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	9311      	str	r3, [sp, #68]	; 0x44
 8000f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8000f26:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000f28:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8000f2a:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8000f2c:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8000f2e:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8000f32:	f000 fcff 	bl	8001934 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8000f36:	0030      	movs	r0, r6
 8000f38:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8000f3a:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8000f3c:	f000 fcfa 	bl	8001934 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8000f40:	a90c      	add	r1, sp, #48	; 0x30
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8000f44:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8000f46:	f000 fcf5 	bl	8001934 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8000f4c:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8000f4e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8000f50:	f000 fcf0 	bl	8001934 <HAL_GPIO_Init>
}
 8000f54:	b017      	add	sp, #92	; 0x5c
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	10110000 	.word	0x10110000
 8000f60:	50000400 	.word	0x50000400
 8000f64:	10310000 	.word	0x10310000
 8000f68:	50000800 	.word	0x50000800

08000f6c <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8000f6e:	2608      	movs	r6, #8
{
 8000f70:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8000f72:	0032      	movs	r2, r6
 8000f74:	2100      	movs	r1, #0
 8000f76:	a803      	add	r0, sp, #12
 8000f78:	f006 fd2d 	bl	80079d6 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8000f7c:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000f7e:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f80:	4c22      	ldr	r4, [pc, #136]	; (800100c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f82:	4f23      	ldr	r7, [pc, #140]	; (8001010 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f84:	4669      	mov	r1, sp
 8000f86:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8000f88:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f8a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000f8c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f8e:	f000 fcd1 	bl	8001934 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f94:	4669      	mov	r1, sp
 8000f96:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f98:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000f9a:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f9c:	f000 fcca 	bl	8001934 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fa0:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fa2:	4669      	mov	r1, sp
 8000fa4:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000fa6:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fa8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000faa:	f000 fcc3 	bl	8001934 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fae:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fb0:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fb2:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000fb6:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fb8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fba:	f000 fcbb 	bl	8001934 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fbe:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fc0:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8000fc4:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fc6:	05ed      	lsls	r5, r5, #23
 8000fc8:	0028      	movs	r0, r5
 8000fca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8000fce:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fd0:	f000 fcb0 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8000fd4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000fd6:	0028      	movs	r0, r5
 8000fd8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8000fda:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000fdc:	f000 fcaa 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8000fe4:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000fe6:	f000 fca5 	bl	8001934 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8000fea:	0039      	movs	r1, r7
 8000fec:	0028      	movs	r0, r5
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f000 fdec 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8000ff4:	0028      	movs	r0, r5
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	f000 fde7 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	0031      	movs	r1, r6
 8001002:	0020      	movs	r0, r4
 8001004:	f000 fde2 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8001008:	b00b      	add	sp, #44	; 0x2c
 800100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100c:	50000400 	.word	0x50000400
 8001010:	10110000 	.word	0x10110000
 8001014:	10310000 	.word	0x10310000
 8001018:	50000800 	.word	0x50000800

0800101c <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 800101c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800101e:	9000      	str	r0, [sp, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001020:	f3ef 8310 	mrs	r3, PRIMASK
 8001024:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001026:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001028:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 800102a:	4e11      	ldr	r6, [pc, #68]	; (8001070 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 800102c:	4d11      	ldr	r5, [pc, #68]	; (8001074 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 800102e:	00e3      	lsls	r3, r4, #3
 8001030:	18f6      	adds	r6, r6, r3
 8001032:	00a7      	lsls	r7, r4, #2
 8001034:	5979      	ldr	r1, [r7, r5]
 8001036:	0030      	movs	r0, r6
 8001038:	f000 fb61 	bl	80016fe <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 800103c:	9b00      	ldr	r3, [sp, #0]
 800103e:	2100      	movs	r1, #0
 8001040:	59da      	ldr	r2, [r3, r7]
 8001042:	0030      	movs	r0, r6
 8001044:	f000 fb54 	bl	80016f0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8001048:	002b      	movs	r3, r5
 800104a:	3310      	adds	r3, #16
 800104c:	56e6      	ldrsb	r6, [r4, r3]
 800104e:	3514      	adds	r5, #20
 8001050:	2200      	movs	r2, #0
 8001052:	0030      	movs	r0, r6
 8001054:	5979      	ldr	r1, [r7, r5]
 8001056:	f000 fa5b 	bl	8001510 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800105a:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800105c:	0030      	movs	r0, r6
 800105e:	f000 fa81 	bl	8001564 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001062:	2c04      	cmp	r4, #4
 8001064:	d1e1      	bne.n	800102a <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001066:	9b01      	ldr	r3, [sp, #4]
 8001068:	f383 8810 	msr	PRIMASK, r3
}
 800106c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	2000026c 	.word	0x2000026c
 8001074:	08008388 	.word	0x08008388

08001078 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8001078:	2000      	movs	r0, #0
 800107a:	4770      	bx	lr

0800107c <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 800107c:	3801      	subs	r0, #1
{
 800107e:	b510      	push	{r4, lr}
  switch (state)
 8001080:	2803      	cmp	r0, #3
 8001082:	d811      	bhi.n	80010a8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8001084:	f7ff f852 	bl	800012c <__gnu_thumb1_case_uqi>
 8001088:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 800108c:	20a0      	movs	r0, #160	; 0xa0
 800108e:	2201      	movs	r2, #1
 8001090:	2102      	movs	r1, #2
 8001092:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001094:	f000 fd9a 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8001098:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80010a0:	e7f8      	b.n	8001094 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80010a4:	2102      	movs	r1, #2
 80010a6:	e7fa      	b.n	800109e <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80010a8:	20a0      	movs	r0, #160	; 0xa0
 80010aa:	2200      	movs	r2, #0
 80010ac:	2102      	movs	r1, #2
 80010ae:	05c0      	lsls	r0, r0, #23
 80010b0:	f000 fd8c 	bl	8001bcc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2104      	movs	r1, #4
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80010ba:	f000 fd87 	bl	8001bcc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	e7f0      	b.n	80010a4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	50000800 	.word	0x50000800

080010c8 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 80010c8:	2001      	movs	r0, #1
 80010ca:	4770      	bx	lr

080010cc <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 80010cc:	b530      	push	{r4, r5, lr}
 80010ce:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80010d0:	220c      	movs	r2, #12
 80010d2:	2100      	movs	r1, #0
 80010d4:	a803      	add	r0, sp, #12
 80010d6:	f006 fc7e 	bl	80079d6 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80010dc:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80010de:	4d0d      	ldr	r5, [pc, #52]	; (8001114 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 80010e0:	a901      	add	r1, sp, #4
 80010e2:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 80010e4:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80010e8:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80010ea:	f000 fc23 	bl	8001934 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	0021      	movs	r1, r4
 80010f2:	0028      	movs	r0, r5
 80010f4:	f000 fd6a 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80010f8:	0020      	movs	r0, r4
 80010fa:	f000 f8ab 	bl	8001254 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001100:	0028      	movs	r0, r5
 8001102:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8001104:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001106:	f000 fc15 	bl	8001934 <HAL_GPIO_Init>
  HAL_Delay(6);
 800110a:	2006      	movs	r0, #6
 800110c:	f000 f8a2 	bl	8001254 <HAL_Delay>
}
 8001110:	b007      	add	sp, #28
 8001112:	bd30      	pop	{r4, r5, pc}
 8001114:	50000800 	.word	0x50000800

08001118 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8001118:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 800111a:	f7ff fdf5 	bl	8000d08 <BSP_SPI1_Init>
}
 800111e:	bd10      	pop	{r4, pc}

08001120 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8001120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001122:	240e      	movs	r4, #14
{
 8001124:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001126:	446c      	add	r4, sp
{
 8001128:	80d8      	strh	r0, [r3, #6]
 800112a:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	0021      	movs	r1, r4
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff fda5 	bl	8000c80 <BSP_SPI1_SendRecv>
  return rxData;
 8001136:	8820      	ldrh	r0, [r4, #0]
}
 8001138:	b004      	add	sp, #16
 800113a:	bd10      	pop	{r4, pc}

0800113c <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 800113c:	0002      	movs	r2, r0
 800113e:	b510      	push	{r4, lr}
  if (state == 0)
 8001140:	2800      	cmp	r0, #0
 8001142:	d106      	bne.n	8001152 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	20a0      	movs	r0, #160	; 0xa0
 8001148:	0209      	lsls	r1, r1, #8
 800114a:	05c0      	lsls	r0, r0, #23
 800114c:	f000 fd3e 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8001150:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	e7f6      	b.n	8001144 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08001158 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8001158:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 800115a:	2102      	movs	r1, #2
 800115c:	4801      	ldr	r0, [pc, #4]	; (8001164 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 800115e:	f000 fd2f 	bl	8001bc0 <HAL_GPIO_ReadPin>
}
 8001162:	bd10      	pop	{r4, pc}
 8001164:	50000400 	.word	0x50000400

08001168 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SystemInit+0x44>)
 800116c:	0052      	lsls	r2, r2, #1
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <SystemInit+0x48>)
 8001178:	400a      	ands	r2, r1
 800117a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	490d      	ldr	r1, [pc, #52]	; (80011b4 <SystemInit+0x4c>)
 8001180:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001182:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001184:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	438a      	bics	r2, r1
 800118a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	490a      	ldr	r1, [pc, #40]	; (80011b8 <SystemInit+0x50>)
 8001190:	400a      	ands	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4909      	ldr	r1, [pc, #36]	; (80011bc <SystemInit+0x54>)
 8001198:	400a      	ands	r2, r1
 800119a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <SystemInit+0x58>)
 80011a4:	0512      	lsls	r2, r2, #20
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	4770      	bx	lr
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000
 80011b0:	88ff400c 	.word	0x88ff400c
 80011b4:	fef6fff6 	.word	0xfef6fff6
 80011b8:	fffbffff 	.word	0xfffbffff
 80011bc:	ff02ffff 	.word	0xff02ffff
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	20fa      	movs	r0, #250	; 0xfa
 80011ca:	4e0d      	ldr	r6, [pc, #52]	; (8001200 <HAL_InitTick+0x3c>)
 80011cc:	0080      	lsls	r0, r0, #2
 80011ce:	7831      	ldrb	r1, [r6, #0]
 80011d0:	f7fe ffc0 	bl	8000154 <__udivsi3>
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_InitTick+0x40>)
 80011d6:	0001      	movs	r1, r0
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	f7fe ffbb 	bl	8000154 <__udivsi3>
 80011de:	f000 f9dd 	bl	800159c <HAL_SYSTICK_Config>
 80011e2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e6:	2c00      	cmp	r4, #0
 80011e8:	d108      	bne.n	80011fc <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	2d03      	cmp	r5, #3
 80011ec:	d806      	bhi.n	80011fc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ee:	3802      	subs	r0, #2
 80011f0:	0022      	movs	r2, r4
 80011f2:	0029      	movs	r1, r5
 80011f4:	f000 f98c 	bl	8001510 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	0020      	movs	r0, r4
 80011fa:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	20000004 	.word	0x20000004
 8001204:	20000000 	.word	0x20000000

08001208 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	2302      	movs	r3, #2
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_Init+0x24>)
{
 800120c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001210:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001212:	430b      	orrs	r3, r1
 8001214:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001216:	f7ff ffd5 	bl	80011c4 <HAL_InitTick>
 800121a:	1e04      	subs	r4, r0, #0
 800121c:	d103      	bne.n	8001226 <HAL_Init+0x1e>
    HAL_MspInit();
 800121e:	f7ff faf9 	bl	8000814 <HAL_MspInit>
}
 8001222:	0020      	movs	r0, r4
 8001224:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001226:	2401      	movs	r4, #1
 8001228:	e7fb      	b.n	8001222 <HAL_Init+0x1a>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40022000 	.word	0x40022000

08001230 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_IncTick+0x10>)
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_IncTick+0x14>)
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	185b      	adds	r3, r3, r1
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	4770      	bx	lr
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	2000028c 	.word	0x2000028c
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001248:	4b01      	ldr	r3, [pc, #4]	; (8001250 <HAL_GetTick+0x8>)
 800124a:	6818      	ldr	r0, [r3, #0]
}
 800124c:	4770      	bx	lr
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	2000028c 	.word	0x2000028c

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff fff6 	bl	8001248 <HAL_GetTick>
 800125c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	1c63      	adds	r3, r4, #1
 8001260:	d002      	beq.n	8001268 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_Delay+0x20>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	1b40      	subs	r0, r0, r5
 800126e:	42a0      	cmp	r0, r4
 8001270:	d3fa      	bcc.n	8001268 <HAL_Delay+0x14>
  {
  }
}
 8001272:	bd70      	pop	{r4, r5, r6, pc}
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001278:	2301      	movs	r3, #1
 800127a:	4a02      	ldr	r2, [pc, #8]	; (8001284 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800127c:	6851      	ldr	r1, [r2, #4]
 800127e:	430b      	orrs	r3, r1
 8001280:	6053      	str	r3, [r2, #4]
}
 8001282:	4770      	bx	lr
 8001284:	40015800 	.word	0x40015800

08001288 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001288:	2101      	movs	r1, #1
 800128a:	4a02      	ldr	r2, [pc, #8]	; (8001294 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800128c:	6853      	ldr	r3, [r2, #4]
 800128e:	438b      	bics	r3, r1
 8001290:	6053      	str	r3, [r2, #4]
}
 8001292:	4770      	bx	lr
 8001294:	40015800 	.word	0x40015800

08001298 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001298:	2302      	movs	r3, #2
 800129a:	4a02      	ldr	r2, [pc, #8]	; (80012a4 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800129c:	6851      	ldr	r1, [r2, #4]
 800129e:	430b      	orrs	r3, r1
 80012a0:	6053      	str	r3, [r2, #4]
}
 80012a2:	4770      	bx	lr
 80012a4:	40015800 	.word	0x40015800

080012a8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80012a8:	2102      	movs	r1, #2
 80012aa:	4a02      	ldr	r2, [pc, #8]	; (80012b4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80012ac:	6853      	ldr	r3, [r2, #4]
 80012ae:	438b      	bics	r3, r1
 80012b0:	6053      	str	r3, [r2, #4]
}
 80012b2:	4770      	bx	lr
 80012b4:	40015800 	.word	0x40015800

080012b8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80012b8:	2304      	movs	r3, #4
 80012ba:	4a02      	ldr	r2, [pc, #8]	; (80012c4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80012bc:	6851      	ldr	r1, [r2, #4]
 80012be:	430b      	orrs	r3, r1
 80012c0:	6053      	str	r3, [r2, #4]
}
 80012c2:	4770      	bx	lr
 80012c4:	40015800 	.word	0x40015800

080012c8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80012c8:	2104      	movs	r1, #4
 80012ca:	4a02      	ldr	r2, [pc, #8]	; (80012d4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80012cc:	6853      	ldr	r3, [r2, #4]
 80012ce:	438b      	bics	r3, r1
 80012d0:	6053      	str	r3, [r2, #4]
}
 80012d2:	4770      	bx	lr
 80012d4:	40015800 	.word	0x40015800

080012d8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <ADC_DelayMicroSecond+0x24>)
{
 80012da:	b513      	push	{r0, r1, r4, lr}
 80012dc:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <ADC_DelayMicroSecond+0x28>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f7fe ff37 	bl	8000154 <__udivsi3>
 80012e6:	4344      	muls	r4, r0
 80012e8:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d100      	bne.n	80012f2 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80012f0:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80012f2:	9b01      	ldr	r3, [sp, #4]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	e7f7      	b.n	80012ea <ADC_DelayMicroSecond+0x12>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	20000000 	.word	0x20000000
 8001300:	000f4240 	.word	0x000f4240

08001304 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001304:	2103      	movs	r1, #3
 8001306:	6803      	ldr	r3, [r0, #0]
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800130c:	6898      	ldr	r0, [r3, #8]
 800130e:	4008      	ands	r0, r1
 8001310:	2801      	cmp	r0, #1
 8001312:	d001      	beq.n	8001318 <ADC_Disable+0x14>
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
}
 8001316:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4202      	tst	r2, r0
 800131c:	d0fa      	beq.n	8001314 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800131e:	2205      	movs	r2, #5
 8001320:	689d      	ldr	r5, [r3, #8]
 8001322:	4015      	ands	r5, r2
 8001324:	2d01      	cmp	r5, #1
 8001326:	d119      	bne.n	800135c <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8001328:	6898      	ldr	r0, [r3, #8]
 800132a:	3a03      	subs	r2, #3
 800132c:	4302      	orrs	r2, r0
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001332:	f7ff ff89 	bl	8001248 <HAL_GetTick>
 8001336:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	422b      	tst	r3, r5
 800133e:	d0e9      	beq.n	8001314 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001340:	f7ff ff82 	bl	8001248 <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	280a      	cmp	r0, #10
 8001348:	d9f6      	bls.n	8001338 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	2310      	movs	r3, #16
 800134c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	4313      	orrs	r3, r2
 8001352:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001356:	431d      	orrs	r5, r3
 8001358:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800135a:	e7dc      	b.n	8001316 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135c:	2310      	movs	r3, #16
 800135e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001360:	4313      	orrs	r3, r2
 8001362:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001364:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001366:	4303      	orrs	r3, r0
 8001368:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800136a:	e7d4      	b.n	8001316 <ADC_Disable+0x12>

0800136c <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800136c:	2204      	movs	r2, #4
 800136e:	6803      	ldr	r3, [r0, #0]
{
 8001370:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001372:	6899      	ldr	r1, [r3, #8]
{
 8001374:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001376:	4211      	tst	r1, r2
 8001378:	d101      	bne.n	800137e <ADC_ConversionStop+0x12>
  return HAL_OK;
 800137a:	2000      	movs	r0, #0
}
 800137c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800137e:	6899      	ldr	r1, [r3, #8]
 8001380:	4211      	tst	r1, r2
 8001382:	d006      	beq.n	8001392 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001384:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001386:	0792      	lsls	r2, r2, #30
 8001388:	d403      	bmi.n	8001392 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800138a:	2210      	movs	r2, #16
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	430a      	orrs	r2, r1
 8001390:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001392:	f7ff ff59 	bl	8001248 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001396:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8001398:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4233      	tst	r3, r6
 80013a0:	d0eb      	beq.n	800137a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80013a2:	f7ff ff51 	bl	8001248 <HAL_GetTick>
 80013a6:	1b40      	subs	r0, r0, r5
 80013a8:	280a      	cmp	r0, #10
 80013aa:	d9f6      	bls.n	800139a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ac:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ae:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80013b2:	4313      	orrs	r3, r2
 80013b4:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013b8:	4303      	orrs	r3, r0
 80013ba:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80013bc:	e7de      	b.n	800137c <ADC_ConversionStop+0x10>
	...

080013c0 <HAL_ADC_DeInit>:
{
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013c4:	2501      	movs	r5, #1
  if(hadc == NULL)
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d011      	beq.n	80013ee <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80013ca:	2302      	movs	r3, #2
 80013cc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013d2:	f7ff ffcb 	bl	800136c <ADC_ConversionStop>
 80013d6:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80013d8:	d137      	bne.n	800144a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 80013da:	0020      	movs	r0, r4
 80013dc:	f7ff ff92 	bl	8001304 <ADC_Disable>
 80013e0:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 80013e2:	2801      	cmp	r0, #1
 80013e4:	d105      	bne.n	80013f2 <HAL_ADC_DeInit+0x32>
{
 80013e6:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 80013e8:	2300      	movs	r3, #0
 80013ea:	3450      	adds	r4, #80	; 0x50
 80013ec:	7023      	strb	r3, [r4, #0]
}
 80013ee:	0028      	movs	r0, r5
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 80013f2:	2301      	movs	r3, #1
 80013f4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	4915      	ldr	r1, [pc, #84]	; (8001450 <HAL_ADC_DeInit+0x90>)
 80013fa:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 80013fc:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80013fe:	400a      	ands	r2, r1
 8001400:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8001404:	4914      	ldr	r1, [pc, #80]	; (8001458 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8001406:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	400a      	ands	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	4912      	ldr	r1, [pc, #72]	; (800145c <HAL_ADC_DeInit+0x9c>)
 8001412:	400a      	ands	r2, r1
 8001414:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	4911      	ldr	r1, [pc, #68]	; (8001460 <HAL_ADC_DeInit+0xa0>)
 800141a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800141c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800141e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	438a      	bics	r2, r1
 8001424:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	490e      	ldr	r1, [pc, #56]	; (8001464 <HAL_ADC_DeInit+0xa4>)
 800142a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800142c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800142e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001430:	33b4      	adds	r3, #180	; 0xb4
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	438a      	bics	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	438a      	bics	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 800143e:	f005 f995 	bl	800676c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001442:	2300      	movs	r3, #0
 8001444:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8001446:	6563      	str	r3, [r4, #84]	; 0x54
 8001448:	e7ce      	b.n	80013e8 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800144a:	2801      	cmp	r0, #1
 800144c:	d0cb      	beq.n	80013e6 <HAL_ADC_DeInit+0x26>
 800144e:	e7d2      	b.n	80013f6 <HAL_ADC_DeInit+0x36>
 8001450:	fffff760 	.word	0xfffff760
 8001454:	0000089f 	.word	0x0000089f
 8001458:	efffffff 	.word	0xefffffff
 800145c:	833e0200 	.word	0x833e0200
 8001460:	3ffffc02 	.word	0x3ffffc02
 8001464:	f000f000 	.word	0xf000f000

08001468 <HAL_ADC_ConfigChannel>:
{
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800146a:	0004      	movs	r4, r0
 800146c:	3450      	adds	r4, #80	; 0x50
 800146e:	7822      	ldrb	r2, [r4, #0]
{
 8001470:	0003      	movs	r3, r0
 8001472:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001474:	2002      	movs	r0, #2
 8001476:	2a01      	cmp	r2, #1
 8001478:	d00b      	beq.n	8001492 <HAL_ADC_ConfigChannel+0x2a>
 800147a:	3801      	subs	r0, #1
 800147c:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6891      	ldr	r1, [r2, #8]
 8001482:	0749      	lsls	r1, r1, #29
 8001484:	d506      	bpl.n	8001494 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001486:	2220      	movs	r2, #32
 8001488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800148a:	430a      	orrs	r2, r1
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800148e:	2300      	movs	r3, #0
 8001490:	7023      	strb	r3, [r4, #0]
}
 8001492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001494:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001496:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8001498:	4e19      	ldr	r6, [pc, #100]	; (8001500 <HAL_ADC_ConfigChannel+0x98>)
 800149a:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800149c:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800149e:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014a0:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014a2:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 80014a4:	42b7      	cmp	r7, r6
 80014a6:	d019      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014a8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80014aa:	4301      	orrs	r1, r0
 80014ac:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_ADC_ConfigChannel+0x9c>)
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014ba:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80014bc:	430b      	orrs	r3, r1
 80014be:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014c0:	f7ff ff0a 	bl	80012d8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	039b      	lsls	r3, r3, #14
 80014c8:	d505      	bpl.n	80014d6 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_ADC_ConfigChannel+0x9c>)
 80014ce:	03db      	lsls	r3, r3, #15
 80014d0:	6811      	ldr	r1, [r2, #0]
 80014d2:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80014d4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80014d6:	2000      	movs	r0, #0
 80014d8:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80014da:	e7da      	b.n	8001492 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014dc:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80014de:	438d      	bics	r5, r1
 80014e0:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_ADC_ConfigChannel+0x9c>)
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <HAL_ADC_ConfigChannel+0xa0>)
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	400b      	ands	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014f0:	0383      	lsls	r3, r0, #14
 80014f2:	d5f0      	bpl.n	80014d6 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_ADC_ConfigChannel+0x9c>)
 80014f6:	4905      	ldr	r1, [pc, #20]	; (800150c <HAL_ADC_ConfigChannel+0xa4>)
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	400b      	ands	r3, r1
 80014fc:	e7ea      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x6c>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	00001001 	.word	0x00001001
 8001504:	40012708 	.word	0x40012708
 8001508:	ff7fffff 	.word	0xff7fffff
 800150c:	ffbfffff 	.word	0xffbfffff

08001510 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001510:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001512:	25ff      	movs	r5, #255	; 0xff
 8001514:	2403      	movs	r4, #3
 8001516:	002a      	movs	r2, r5
 8001518:	4004      	ands	r4, r0
 800151a:	00e4      	lsls	r4, r4, #3
 800151c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151e:	0189      	lsls	r1, r1, #6
 8001520:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001522:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001524:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001526:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001528:	2800      	cmp	r0, #0
 800152a:	db0a      	blt.n	8001542 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	24c0      	movs	r4, #192	; 0xc0
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_NVIC_SetPriority+0x4c>)
 8001530:	0880      	lsrs	r0, r0, #2
 8001532:	0080      	lsls	r0, r0, #2
 8001534:	18c0      	adds	r0, r0, r3
 8001536:	00a4      	lsls	r4, r4, #2
 8001538:	5903      	ldr	r3, [r0, r4]
 800153a:	401a      	ands	r2, r3
 800153c:	4311      	orrs	r1, r2
 800153e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001540:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001542:	200f      	movs	r0, #15
 8001544:	4003      	ands	r3, r0
 8001546:	3b08      	subs	r3, #8
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_NVIC_SetPriority+0x50>)
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	181b      	adds	r3, r3, r0
 8001550:	69d8      	ldr	r0, [r3, #28]
 8001552:	4002      	ands	r2, r0
 8001554:	4311      	orrs	r1, r2
 8001556:	61d9      	str	r1, [r3, #28]
 8001558:	e7f2      	b.n	8001540 <HAL_NVIC_SetPriority+0x30>
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001564:	2800      	cmp	r0, #0
 8001566:	db05      	blt.n	8001574 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001568:	231f      	movs	r3, #31
 800156a:	4018      	ands	r0, r3
 800156c:	3b1e      	subs	r3, #30
 800156e:	4083      	lsls	r3, r0
 8001570:	4a01      	ldr	r2, [pc, #4]	; (8001578 <HAL_NVIC_EnableIRQ+0x14>)
 8001572:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001574:	4770      	bx	lr
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	e000e100 	.word	0xe000e100

0800157c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800157c:	2800      	cmp	r0, #0
 800157e:	db09      	blt.n	8001594 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001580:	231f      	movs	r3, #31
 8001582:	4018      	ands	r0, r3
 8001584:	3b1e      	subs	r3, #30
 8001586:	4083      	lsls	r3, r0
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_NVIC_DisableIRQ+0x1c>)
 800158a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800158c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001590:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001594:	4770      	bx	lr
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	e000e104 	.word	0xe000e104

0800159c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	1e43      	subs	r3, r0, #1
 80015a0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d20d      	bcs.n	80015c4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b0:	6a03      	ldr	r3, [r0, #32]
 80015b2:	0609      	lsls	r1, r1, #24
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015c4:	4770      	bx	lr
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	e000e010 	.word	0xe000e010
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	1d85      	adds	r5, r0, #6
 80015d4:	7feb      	ldrb	r3, [r5, #31]
 80015d6:	1d44      	adds	r4, r0, #5
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d005      	beq.n	80015e8 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015dc:	2304      	movs	r3, #4
 80015de:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	2300      	movs	r3, #0

    return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80015e4:	77e3      	strb	r3, [r4, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80015e6:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e8:	210e      	movs	r1, #14
 80015ea:	6803      	ldr	r3, [r0, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	438a      	bics	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80015f2:	2201      	movs	r2, #1
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	4391      	bics	r1, r2
 80015f8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80015fe:	201c      	movs	r0, #28
 8001600:	4003      	ands	r3, r0
 8001602:	0010      	movs	r0, r2
 8001604:	4098      	lsls	r0, r3
 8001606:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001608:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 800160c:	77e0      	strb	r0, [r4, #31]
    return status;
 800160e:	e7ea      	b.n	80015e6 <HAL_DMA_Abort+0x16>

08001610 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001610:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001612:	1d84      	adds	r4, r0, #6
 8001614:	7fe3      	ldrb	r3, [r4, #31]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d004      	beq.n	8001624 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161a:	2304      	movs	r3, #4
 800161c:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800161e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001620:	0018      	movs	r0, r3
 8001622:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001624:	210e      	movs	r1, #14
 8001626:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001628:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	438a      	bics	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001630:	2201      	movs	r2, #1
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	4391      	bics	r1, r2
 8001636:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001638:	231c      	movs	r3, #28
 800163a:	402b      	ands	r3, r5
 800163c:	0015      	movs	r5, r2
 800163e:	409d      	lsls	r5, r3
 8001640:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8001642:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001644:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001646:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001648:	2400      	movs	r4, #0
 800164a:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 800164c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001650:	42a2      	cmp	r2, r4
 8001652:	d0e5      	beq.n	8001620 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001654:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	0023      	movs	r3, r4
 8001658:	e7e2      	b.n	8001620 <HAL_DMA_Abort_IT+0x10>

0800165a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800165a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800165c:	221c      	movs	r2, #28
 800165e:	2704      	movs	r7, #4
 8001660:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001662:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001664:	4032      	ands	r2, r6
 8001666:	003e      	movs	r6, r7
 8001668:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800166a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800166c:	6803      	ldr	r3, [r0, #0]
 800166e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001670:	4235      	tst	r5, r6
 8001672:	d00d      	beq.n	8001690 <HAL_DMA_IRQHandler+0x36>
 8001674:	423c      	tst	r4, r7
 8001676:	d00b      	beq.n	8001690 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	0692      	lsls	r2, r2, #26
 800167c:	d402      	bmi.n	8001684 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	43ba      	bics	r2, r7
 8001682:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001684:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001686:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001688:	2b00      	cmp	r3, #0
 800168a:	d019      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800168c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800168e:	e017      	b.n	80016c0 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001690:	2702      	movs	r7, #2
 8001692:	003e      	movs	r6, r7
 8001694:	4096      	lsls	r6, r2
 8001696:	4235      	tst	r5, r6
 8001698:	d013      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x68>
 800169a:	423c      	tst	r4, r7
 800169c:	d011      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	0692      	lsls	r2, r2, #26
 80016a2:	d406      	bmi.n	80016b2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016a4:	240a      	movs	r4, #10
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	43a2      	bics	r2, r4
 80016aa:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80016ac:	2201      	movs	r2, #1
 80016ae:	1d83      	adds	r3, r0, #6
 80016b0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80016b2:	2200      	movs	r2, #0
 80016b4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80016b6:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80016b8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80016ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d1e5      	bne.n	800168c <HAL_DMA_IRQHandler+0x32>
}
 80016c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016c2:	2608      	movs	r6, #8
 80016c4:	0037      	movs	r7, r6
 80016c6:	4097      	lsls	r7, r2
 80016c8:	423d      	tst	r5, r7
 80016ca:	d0f9      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x66>
 80016cc:	4234      	tst	r4, r6
 80016ce:	d0f7      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d0:	250e      	movs	r5, #14
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	43ac      	bics	r4, r5
 80016d6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016d8:	2301      	movs	r3, #1
 80016da:	001c      	movs	r4, r3
 80016dc:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80016de:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016e0:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80016e6:	2200      	movs	r2, #0
 80016e8:	1d43      	adds	r3, r0, #5
 80016ea:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80016ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016ee:	e7e5      	b.n	80016bc <HAL_DMA_IRQHandler+0x62>

080016f0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80016f0:	0003      	movs	r3, r0
 80016f2:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80016f4:	d101      	bne.n	80016fa <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80016f6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80016f8:	4770      	bx	lr
      status = HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	e7fc      	b.n	80016f8 <HAL_EXTI_RegisterCallback+0x8>

080016fe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80016fe:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
  if (hexti == NULL)
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8001706:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8001708:	6019      	str	r1, [r3, #0]
  }
}
 800170a:	4770      	bx	lr

0800170c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800170c:	221f      	movs	r2, #31
 800170e:	6803      	ldr	r3, [r0, #0]
{
 8001710:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001712:	401a      	ands	r2, r3
 8001714:	2301      	movs	r3, #1
 8001716:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_EXTI_IRQHandler+0x20>)
 800171a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 800171c:	420b      	tst	r3, r1
 800171e:	d004      	beq.n	800172a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001720:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001722:	6843      	ldr	r3, [r0, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d000      	beq.n	800172a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8001728:	4798      	blx	r3
    }
  }
}
 800172a:	bd10      	pop	{r4, pc}
 800172c:	40010400 	.word	0x40010400

08001730 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001730:	4a28      	ldr	r2, [pc, #160]	; (80017d4 <FLASH_SetErrorCode+0xa4>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	6990      	ldr	r0, [r2, #24]
 8001736:	0049      	lsls	r1, r1, #1
 8001738:	0003      	movs	r3, r0
{
 800173a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800173c:	400b      	ands	r3, r1
 800173e:	4208      	tst	r0, r1
 8001740:	d005      	beq.n	800174e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001742:	2302      	movs	r3, #2
 8001744:	4824      	ldr	r0, [pc, #144]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
 8001746:	6944      	ldr	r4, [r0, #20]
 8001748:	4323      	orrs	r3, r4
 800174a:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800174c:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800174e:	2080      	movs	r0, #128	; 0x80
 8001750:	6991      	ldr	r1, [r2, #24]
 8001752:	0080      	lsls	r0, r0, #2
 8001754:	4201      	tst	r1, r0
 8001756:	d005      	beq.n	8001764 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001758:	2101      	movs	r1, #1
 800175a:	4c1f      	ldr	r4, [pc, #124]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800175c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800175e:	6965      	ldr	r5, [r4, #20]
 8001760:	4329      	orrs	r1, r5
 8001762:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001764:	2080      	movs	r0, #128	; 0x80
 8001766:	6991      	ldr	r1, [r2, #24]
 8001768:	00c0      	lsls	r0, r0, #3
 800176a:	4201      	tst	r1, r0
 800176c:	d005      	beq.n	800177a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800176e:	2108      	movs	r1, #8
 8001770:	4c19      	ldr	r4, [pc, #100]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8001772:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001774:	6965      	ldr	r5, [r4, #20]
 8001776:	4329      	orrs	r1, r5
 8001778:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800177a:	2080      	movs	r0, #128	; 0x80
 800177c:	6991      	ldr	r1, [r2, #24]
 800177e:	0100      	lsls	r0, r0, #4
 8001780:	4201      	tst	r1, r0
 8001782:	d005      	beq.n	8001790 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001784:	2104      	movs	r1, #4
 8001786:	4c14      	ldr	r4, [pc, #80]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8001788:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800178a:	6965      	ldr	r5, [r4, #20]
 800178c:	4329      	orrs	r1, r5
 800178e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001790:	2080      	movs	r0, #128	; 0x80
 8001792:	6991      	ldr	r1, [r2, #24]
 8001794:	0180      	lsls	r0, r0, #6
 8001796:	4201      	tst	r1, r0
 8001798:	d005      	beq.n	80017a6 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800179a:	2110      	movs	r1, #16
 800179c:	4c0e      	ldr	r4, [pc, #56]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800179e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80017a0:	6965      	ldr	r5, [r4, #20]
 80017a2:	4329      	orrs	r1, r5
 80017a4:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80017a6:	6991      	ldr	r1, [r2, #24]
 80017a8:	0389      	lsls	r1, r1, #14
 80017aa:	d505      	bpl.n	80017b8 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80017ac:	2020      	movs	r0, #32
 80017ae:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80017b0:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80017b2:	6961      	ldr	r1, [r4, #20]
 80017b4:	4301      	orrs	r1, r0
 80017b6:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80017b8:	2080      	movs	r0, #128	; 0x80
 80017ba:	6991      	ldr	r1, [r2, #24]
 80017bc:	0240      	lsls	r0, r0, #9
 80017be:	4201      	tst	r1, r0
 80017c0:	d005      	beq.n	80017ce <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80017c2:	2140      	movs	r1, #64	; 0x40
 80017c4:	4c04      	ldr	r4, [pc, #16]	; (80017d8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80017c6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80017c8:	6965      	ldr	r5, [r4, #20]
 80017ca:	4329      	orrs	r1, r5
 80017cc:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017ce:	6193      	str	r3, [r2, #24]
}  
 80017d0:	bd30      	pop	{r4, r5, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40022000 	.word	0x40022000
 80017d8:	20000290 	.word	0x20000290

080017dc <HAL_FLASH_Unlock>:
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80017dc:	2201      	movs	r2, #1
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_FLASH_Unlock+0x50>)
 80017e0:	6859      	ldr	r1, [r3, #4]
 80017e2:	4211      	tst	r1, r2
 80017e4:	d106      	bne.n	80017f4 <HAL_FLASH_Unlock+0x18>
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	2202      	movs	r2, #2
 80017ea:	0008      	movs	r0, r1
 80017ec:	4010      	ands	r0, r2
 80017ee:	4211      	tst	r1, r2
 80017f0:	d10e      	bne.n	8001810 <HAL_FLASH_Unlock+0x34>
}
 80017f2:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_FLASH_Unlock+0x54>)
 80017fc:	60d8      	str	r0, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <HAL_FLASH_Unlock+0x58>)
 8001800:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001802:	f381 8810 	msr	PRIMASK, r1
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001806:	6859      	ldr	r1, [r3, #4]
      return HAL_ERROR;
 8001808:	0010      	movs	r0, r2
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800180a:	4211      	tst	r1, r2
 800180c:	d0eb      	beq.n	80017e6 <HAL_FLASH_Unlock+0xa>
 800180e:	e7f0      	b.n	80017f2 <HAL_FLASH_Unlock+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001810:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <HAL_FLASH_Unlock+0x5c>)
 8001818:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <HAL_FLASH_Unlock+0x60>)
 800181c:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800181e:	f382 8810 	msr	PRIMASK, r2
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8001822:	6858      	ldr	r0, [r3, #4]
 8001824:	0780      	lsls	r0, r0, #30
      return HAL_ERROR;
 8001826:	0fc0      	lsrs	r0, r0, #31
 8001828:	e7e3      	b.n	80017f2 <HAL_FLASH_Unlock+0x16>
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	40022000 	.word	0x40022000
 8001830:	89abcdef 	.word	0x89abcdef
 8001834:	02030405 	.word	0x02030405
 8001838:	8c9daebf 	.word	0x8c9daebf
 800183c:	13141516 	.word	0x13141516

08001840 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001840:	2202      	movs	r2, #2
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_FLASH_Lock+0x18>)
}
 8001844:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800184c:	2201      	movs	r2, #1
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
}
 8001854:	4770      	bx	lr
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40022000 	.word	0x40022000

0800185c <FLASH_WaitForLastOperation>:
{
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff fcf2 	bl	8001248 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001864:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8001866:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <FLASH_WaitForLastOperation+0x70>)
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	4232      	tst	r2, r6
 800186e:	d121      	bne.n	80018b4 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001870:	2202      	movs	r2, #2
 8001872:	6999      	ldr	r1, [r3, #24]
 8001874:	4211      	tst	r1, r2
 8001876:	d000      	beq.n	800187a <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001878:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	05d2      	lsls	r2, r2, #23
 800187e:	d415      	bmi.n	80018ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001880:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001882:	0592      	lsls	r2, r2, #22
 8001884:	d412      	bmi.n	80018ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001886:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001888:	0552      	lsls	r2, r2, #21
 800188a:	d40f      	bmi.n	80018ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800188c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800188e:	0512      	lsls	r2, r2, #20
 8001890:	d40c      	bmi.n	80018ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001892:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001894:	0492      	lsls	r2, r2, #18
 8001896:	d409      	bmi.n	80018ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001898:	6999      	ldr	r1, [r3, #24]
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0008      	movs	r0, r1
 800189e:	0292      	lsls	r2, r2, #10
 80018a0:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80018a2:	4211      	tst	r1, r2
 80018a4:	d102      	bne.n	80018ac <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80018a6:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80018a8:	03db      	lsls	r3, r3, #15
 80018aa:	d508      	bpl.n	80018be <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80018ac:	f7ff ff40 	bl	8001730 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
 80018b2:	e004      	b.n	80018be <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80018b4:	1c62      	adds	r2, r4, #1
 80018b6:	d0d8      	beq.n	800186a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	d101      	bne.n	80018c0 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 80018bc:	2003      	movs	r0, #3
}
 80018be:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018c0:	f7ff fcc2 	bl	8001248 <HAL_GetTick>
 80018c4:	1b40      	subs	r0, r0, r5
 80018c6:	42a0      	cmp	r0, r4
 80018c8:	d9ce      	bls.n	8001868 <FLASH_WaitForLastOperation+0xc>
 80018ca:	e7f7      	b.n	80018bc <FLASH_WaitForLastOperation+0x60>
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_FLASH_Program>:
{
 80018d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 80018d2:	4c0b      	ldr	r4, [pc, #44]	; (8001900 <HAL_FLASH_Program+0x30>)
{
 80018d4:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 80018d6:	7c23      	ldrb	r3, [r4, #16]
{
 80018d8:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 80018da:	2002      	movs	r0, #2
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d00d      	beq.n	80018fc <HAL_FLASH_Program+0x2c>
 80018e0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <HAL_FLASH_Program+0x34>)
  __HAL_LOCK(&pFlash);
 80018e4:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018e6:	f7ff ffb9 	bl	800185c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d104      	bne.n	80018f8 <HAL_FLASH_Program+0x28>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018ee:	6160      	str	r0, [r4, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <HAL_FLASH_Program+0x34>)
    *(__IO uint32_t *)Address = Data;
 80018f2:	602e      	str	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018f4:	f7ff ffb2 	bl	800185c <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 80018f8:	2300      	movs	r3, #0
 80018fa:	7423      	strb	r3, [r4, #16]
}
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	20000290 	.word	0x20000290
 8001904:	0000c350 	.word	0x0000c350

08001908 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001908:	2100      	movs	r1, #0

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800190a:	2280      	movs	r2, #128	; 0x80
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <FLASH_PageErase+0x24>)
{
 800190e:	b510      	push	{r4, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001910:	6159      	str	r1, [r3, #20]
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <FLASH_PageErase+0x28>)
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	685c      	ldr	r4, [r3, #4]
 8001918:	4322      	orrs	r2, r4
 800191a:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800191c:	2208      	movs	r2, #8
 800191e:	685c      	ldr	r4, [r3, #4]
 8001920:	4322      	orrs	r2, r4
 8001922:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8001924:	237f      	movs	r3, #127	; 0x7f
 8001926:	4398      	bics	r0, r3
 8001928:	6001      	str	r1, [r0, #0]
}
 800192a:	bd10      	pop	{r4, pc}
 800192c:	20000290 	.word	0x20000290
 8001930:	40022000 	.word	0x40022000

08001934 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001934:	4a5a      	ldr	r2, [pc, #360]	; (8001aa0 <HAL_GPIO_Init+0x16c>)
{
 8001936:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001938:	1882      	adds	r2, r0, r2
 800193a:	1e54      	subs	r4, r2, #1
 800193c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800193e:	2300      	movs	r3, #0
{
 8001940:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001942:	3205      	adds	r2, #5
{
 8001944:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001946:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001948:	9a02      	ldr	r2, [sp, #8]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	0014      	movs	r4, r2
 800194e:	40dc      	lsrs	r4, r3
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001952:	b007      	add	sp, #28
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001956:	2101      	movs	r1, #1
 8001958:	000d      	movs	r5, r1
 800195a:	0014      	movs	r4, r2
 800195c:	409d      	lsls	r5, r3
 800195e:	402c      	ands	r4, r5
 8001960:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 8001962:	422a      	tst	r2, r5
 8001964:	d100      	bne.n	8001968 <HAL_GPIO_Init+0x34>
 8001966:	e099      	b.n	8001a9c <HAL_GPIO_Init+0x168>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001968:	9a02      	ldr	r2, [sp, #8]
 800196a:	005f      	lsls	r7, r3, #1
 800196c:	6854      	ldr	r4, [r2, #4]
 800196e:	2210      	movs	r2, #16
 8001970:	0026      	movs	r6, r4
 8001972:	4396      	bics	r6, r2
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001974:	3a0d      	subs	r2, #13
 8001976:	40ba      	lsls	r2, r7
 8001978:	43d2      	mvns	r2, r2
 800197a:	9203      	str	r2, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197c:	0032      	movs	r2, r6
 800197e:	3a01      	subs	r2, #1
 8001980:	9604      	str	r6, [sp, #16]
 8001982:	428a      	cmp	r2, r1
 8001984:	d80f      	bhi.n	80019a6 <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8001986:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001988:	9a03      	ldr	r2, [sp, #12]
 800198a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198c:	9a02      	ldr	r2, [sp, #8]
 800198e:	68d2      	ldr	r2, [r2, #12]
 8001990:	40ba      	lsls	r2, r7
 8001992:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8001994:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001996:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	43aa      	bics	r2, r5
 800199a:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800199c:	0922      	lsrs	r2, r4, #4
 800199e:	400a      	ands	r2, r1
 80019a0:	409a      	lsls	r2, r3
 80019a2:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80019a4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80019a6:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a8:	9a03      	ldr	r2, [sp, #12]
 80019aa:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	9a02      	ldr	r2, [sp, #8]
 80019ae:	6892      	ldr	r2, [r2, #8]
 80019b0:	40ba      	lsls	r2, r7
 80019b2:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80019b4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b6:	9a04      	ldr	r2, [sp, #16]
 80019b8:	2a02      	cmp	r2, #2
 80019ba:	d10e      	bne.n	80019da <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019bc:	2507      	movs	r5, #7
 80019be:	210f      	movs	r1, #15
 80019c0:	401d      	ands	r5, r3
 80019c2:	00ad      	lsls	r5, r5, #2
 80019c4:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	1882      	adds	r2, r0, r2
 80019cc:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019ce:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80019d0:	9902      	ldr	r1, [sp, #8]
 80019d2:	6909      	ldr	r1, [r1, #16]
 80019d4:	40a9      	lsls	r1, r5
 80019d6:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80019d8:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80019da:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019dc:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019de:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e0:	402a      	ands	r2, r5
 80019e2:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e4:	0022      	movs	r2, r4
 80019e6:	4032      	ands	r2, r6
 80019e8:	40ba      	lsls	r2, r7
 80019ea:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 80019ec:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	00e2      	lsls	r2, r4, #3
 80019f0:	d554      	bpl.n	8001a9c <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2701      	movs	r7, #1
 80019f4:	4d2b      	ldr	r5, [pc, #172]	; (8001aa4 <HAL_GPIO_Init+0x170>)
 80019f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019f8:	433a      	orrs	r2, r7
 80019fa:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_GPIO_Init+0x174>)
 80019fe:	089d      	lsrs	r5, r3, #2
 8001a00:	00ad      	lsls	r5, r5, #2
 8001a02:	18ad      	adds	r5, r5, r2
 8001a04:	68aa      	ldr	r2, [r5, #8]
 8001a06:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a08:	001a      	movs	r2, r3
 8001a0a:	4032      	ands	r2, r6
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	9203      	str	r2, [sp, #12]
 8001a10:	220f      	movs	r2, #15
 8001a12:	9903      	ldr	r1, [sp, #12]
 8001a14:	408a      	lsls	r2, r1
 8001a16:	4661      	mov	r1, ip
 8001a18:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a1a:	22a0      	movs	r2, #160	; 0xa0
 8001a1c:	05d2      	lsls	r2, r2, #23
 8001a1e:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a20:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a22:	2200      	movs	r2, #0
 8001a24:	4560      	cmp	r0, ip
 8001a26:	d011      	beq.n	8001a4c <HAL_GPIO_Init+0x118>
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <HAL_GPIO_Init+0x178>)
 8001a2a:	4694      	mov	ip, r2
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	4560      	cmp	r0, ip
 8001a30:	d00c      	beq.n	8001a4c <HAL_GPIO_Init+0x118>
 8001a32:	4f1f      	ldr	r7, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x17c>)
 8001a34:	1892      	adds	r2, r2, r2
 8001a36:	42b8      	cmp	r0, r7
 8001a38:	d008      	beq.n	8001a4c <HAL_GPIO_Init+0x118>
 8001a3a:	4f1e      	ldr	r7, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x180>)
 8001a3c:	0032      	movs	r2, r6
 8001a3e:	42b8      	cmp	r0, r7
 8001a40:	d004      	beq.n	8001a4c <HAL_GPIO_Init+0x118>
 8001a42:	4e1d      	ldr	r6, [pc, #116]	; (8001ab8 <HAL_GPIO_Init+0x184>)
 8001a44:	3201      	adds	r2, #1
 8001a46:	42b0      	cmp	r0, r6
 8001a48:	d000      	beq.n	8001a4c <HAL_GPIO_Init+0x118>
 8001a4a:	9a05      	ldr	r2, [sp, #20]
 8001a4c:	9903      	ldr	r1, [sp, #12]
 8001a4e:	408a      	lsls	r2, r1
 8001a50:	9904      	ldr	r1, [sp, #16]
 8001a52:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8001a54:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a56:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8001a58:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001a5e:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8001a60:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a62:	03e1      	lsls	r1, r4, #15
 8001a64:	d401      	bmi.n	8001a6a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8001a66:	003e      	movs	r6, r7
 8001a68:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001a6a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001a6c:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8001a6e:	9e01      	ldr	r6, [sp, #4]
 8001a70:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a72:	03a1      	lsls	r1, r4, #14
 8001a74:	d401      	bmi.n	8001a7a <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8001a76:	003e      	movs	r6, r7
 8001a78:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001a7a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001a7c:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8001a7e:	9e01      	ldr	r6, [sp, #4]
 8001a80:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a82:	02e1      	lsls	r1, r4, #11
 8001a84:	d401      	bmi.n	8001a8a <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 8001a86:	003e      	movs	r6, r7
 8001a88:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001a8a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001a8c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001a8e:	9f01      	ldr	r7, [sp, #4]
 8001a90:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a92:	02a1      	lsls	r1, r4, #10
 8001a94:	d401      	bmi.n	8001a9a <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 8001a96:	402e      	ands	r6, r5
 8001a98:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001a9a:	60d7      	str	r7, [r2, #12]
    position++;
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	e753      	b.n	8001948 <HAL_GPIO_Init+0x14>
 8001aa0:	afffe400 	.word	0xafffe400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	50000400 	.word	0x50000400
 8001ab0:	50000800 	.word	0x50000800
 8001ab4:	50000c00 	.word	0x50000c00
 8001ab8:	50001000 	.word	0x50001000
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ac2:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_GPIO_DeInit+0xe4>)
{
 8001ac4:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ac6:	1882      	adds	r2, r0, r2
{
 8001ac8:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001aca:	1e51      	subs	r1, r2, #1
 8001acc:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8001ace:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ad0:	3205      	adds	r2, #5
 8001ad2:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8001ad4:	9a02      	ldr	r2, [sp, #8]
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8001ada:	b007      	add	sp, #28
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8001ade:	2701      	movs	r7, #1
 8001ae0:	003a      	movs	r2, r7
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	9c02      	ldr	r4, [sp, #8]
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	4014      	ands	r4, r2
    if (iocurrent)
 8001aea:	9901      	ldr	r1, [sp, #4]
 8001aec:	9a02      	ldr	r2, [sp, #8]
 8001aee:	420a      	tst	r2, r1
 8001af0:	d056      	beq.n	8001ba0 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_GPIO_DeInit+0xe8>)
 8001af4:	0899      	lsrs	r1, r3, #2
 8001af6:	0089      	lsls	r1, r1, #2
 8001af8:	1889      	adds	r1, r1, r2
 8001afa:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001afc:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001afe:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001b00:	2203      	movs	r2, #3
 8001b02:	4015      	ands	r5, r2
 8001b04:	00ad      	lsls	r5, r5, #2
 8001b06:	320c      	adds	r2, #12
 8001b08:	40aa      	lsls	r2, r5
 8001b0a:	9203      	str	r2, [sp, #12]
 8001b0c:	4032      	ands	r2, r6
 8001b0e:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b10:	22a0      	movs	r2, #160	; 0xa0
 8001b12:	05d2      	lsls	r2, r2, #23
 8001b14:	4694      	mov	ip, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	4560      	cmp	r0, ip
 8001b1a:	d011      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_GPIO_DeInit+0xec>)
 8001b1e:	4694      	mov	ip, r2
 8001b20:	003a      	movs	r2, r7
 8001b22:	4560      	cmp	r0, ip
 8001b24:	d00c      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b26:	4f22      	ldr	r7, [pc, #136]	; (8001bb0 <HAL_GPIO_DeInit+0xf0>)
 8001b28:	1892      	adds	r2, r2, r2
 8001b2a:	42b8      	cmp	r0, r7
 8001b2c:	d008      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b2e:	4f21      	ldr	r7, [pc, #132]	; (8001bb4 <HAL_GPIO_DeInit+0xf4>)
 8001b30:	3201      	adds	r2, #1
 8001b32:	42b8      	cmp	r0, r7
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b36:	4e20      	ldr	r6, [pc, #128]	; (8001bb8 <HAL_GPIO_DeInit+0xf8>)
 8001b38:	3201      	adds	r2, #1
 8001b3a:	42b0      	cmp	r0, r6
 8001b3c:	d000      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b3e:	9a05      	ldr	r2, [sp, #20]
 8001b40:	40aa      	lsls	r2, r5
 8001b42:	9d04      	ldr	r5, [sp, #16]
 8001b44:	42aa      	cmp	r2, r5
 8001b46:	d110      	bne.n	8001b6a <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_GPIO_DeInit+0xfc>)
 8001b4a:	6815      	ldr	r5, [r2, #0]
 8001b4c:	43a5      	bics	r5, r4
 8001b4e:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b50:	6855      	ldr	r5, [r2, #4]
 8001b52:	43a5      	bics	r5, r4
 8001b54:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b56:	6895      	ldr	r5, [r2, #8]
 8001b58:	43a5      	bics	r5, r4
 8001b5a:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b5c:	68d5      	ldr	r5, [r2, #12]
 8001b5e:	43a5      	bics	r5, r4
 8001b60:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b62:	688a      	ldr	r2, [r1, #8]
 8001b64:	9c03      	ldr	r4, [sp, #12]
 8001b66:	43a2      	bics	r2, r4
 8001b68:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	005c      	lsls	r4, r3, #1
 8001b6e:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b70:	2407      	movs	r4, #7
 8001b72:	260f      	movs	r6, #15
 8001b74:	401c      	ands	r4, r3
 8001b76:	00a4      	lsls	r4, r4, #2
 8001b78:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b7a:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001b7c:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	1882      	adds	r2, r0, r2
 8001b88:	6a15      	ldr	r5, [r2, #32]
 8001b8a:	43b5      	bics	r5, r6
 8001b8c:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b8e:	68c2      	ldr	r2, [r0, #12]
 8001b90:	438a      	bics	r2, r1
 8001b92:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001b94:	6842      	ldr	r2, [r0, #4]
 8001b96:	43a2      	bics	r2, r4
 8001b98:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b9a:	6882      	ldr	r2, [r0, #8]
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	6082      	str	r2, [r0, #8]
    position++;
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	e797      	b.n	8001ad4 <HAL_GPIO_DeInit+0x14>
 8001ba4:	afffe400 	.word	0xafffe400
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	50000400 	.word	0x50000400
 8001bb0:	50000800 	.word	0x50000800
 8001bb4:	50000c00 	.word	0x50000c00
 8001bb8:	50001000 	.word	0x50001000
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	6900      	ldr	r0, [r0, #16]
 8001bc2:	4008      	ands	r0, r1
 8001bc4:	1e43      	subs	r3, r0, #1
 8001bc6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001bc8:	b2c0      	uxtb	r0, r0
}
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001bd2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001bd4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001bd6:	e7fc      	b.n	8001bd2 <HAL_GPIO_WritePin+0x6>

08001bd8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bd8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bda:	0013      	movs	r3, r2
 8001bdc:	400b      	ands	r3, r1
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	4391      	bics	r1, r2
 8001be2:	4319      	orrs	r1, r3
 8001be4:	6181      	str	r1, [r0, #24]
}
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001bee:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4210      	tst	r0, r2
 8001bf4:	d002      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	f7ff fff6 	bl	8001be8 <HAL_GPIO_EXTI_Callback>
}
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8001c04:	2110      	movs	r1, #16
 8001c06:	4a02      	ldr	r2, [pc, #8]	; (8001c10 <HAL_PWR_DisablePVD+0xc>)
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	438b      	bics	r3, r1
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	4770      	bx	lr
 8001c10:	40007000 	.word	0x40007000

08001c14 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	6811      	ldr	r1, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	4770      	bx	lr
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	6811      	ldr	r1, [r2, #0]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	4770      	bx	lr
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c3c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001c42:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	4022      	ands	r2, r4
 8001c46:	2a08      	cmp	r2, #8
 8001c48:	d031      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
 8001c4a:	2a0c      	cmp	r2, #12
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x26>
 8001c4e:	2a04      	cmp	r2, #4
 8001c50:	d125      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c52:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c56:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001c58:	17c0      	asrs	r0, r0, #31
 8001c5a:	4018      	ands	r0, r3
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x80>)
 8001c5e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c62:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c66:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c68:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c6c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c70:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c74:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4211      	tst	r1, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f7fe fbfe 	bl	8000480 <__aeabi_lmul>
 8001c84:	0022      	movs	r2, r4
 8001c86:	2300      	movs	r3, #0
 8001c88:	f7fe fbda 	bl	8000440 <__aeabi_uldivmod>
 8001c8c:	e7e8      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2310      	movs	r3, #16
 8001c92:	421a      	tst	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001c98:	e7f0      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x80>)
 8001c9c:	e7ee      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c9e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ca0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ca2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4098      	lsls	r0, r3
      break;
 8001cac:	e7d8      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001cb0:	e7d6      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x24>
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	ff48e500 	.word	0xff48e500
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	080083ac 	.word	0x080083ac
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_OscConfig>:
{
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	0005      	movs	r5, r0
 8001cd0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d05a      	beq.n	8001d8c <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	4cb8      	ldr	r4, [pc, #736]	; (8001fbc <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cdc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cde:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	07d2      	lsls	r2, r2, #31
 8001cec:	d442      	bmi.n	8001d74 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	079b      	lsls	r3, r3, #30
 8001cf2:	d500      	bpl.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
 8001cf4:	e08b      	b.n	8001e0e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	06db      	lsls	r3, r3, #27
 8001cfa:	d529      	bpl.n	8001d50 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfc:	2e00      	cmp	r6, #0
 8001cfe:	d000      	beq.n	8001d02 <HAL_RCC_OscConfig+0x36>
 8001d00:	e0e4      	b.n	8001ecc <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	059b      	lsls	r3, r3, #22
 8001d06:	d502      	bpl.n	8001d0e <HAL_RCC_OscConfig+0x42>
 8001d08:	69eb      	ldr	r3, [r5, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03e      	beq.n	8001d8c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0e:	6862      	ldr	r2, [r4, #4]
 8001d10:	49ab      	ldr	r1, [pc, #684]	; (8001fc0 <HAL_RCC_OscConfig+0x2f4>)
 8001d12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d14:	400a      	ands	r2, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1a:	6861      	ldr	r1, [r4, #4]
 8001d1c:	6a2a      	ldr	r2, [r5, #32]
 8001d1e:	0209      	lsls	r1, r1, #8
 8001d20:	0a09      	lsrs	r1, r1, #8
 8001d22:	0612      	lsls	r2, r2, #24
 8001d24:	430a      	orrs	r2, r1
 8001d26:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	0b5b      	lsrs	r3, r3, #13
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	0212      	lsls	r2, r2, #8
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d34:	68e1      	ldr	r1, [r4, #12]
 8001d36:	060a      	lsls	r2, r1, #24
 8001d38:	49a2      	ldr	r1, [pc, #648]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001d3a:	0f12      	lsrs	r2, r2, #28
 8001d3c:	5c8a      	ldrb	r2, [r1, r2]
 8001d3e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d40:	4aa1      	ldr	r2, [pc, #644]	; (8001fc8 <HAL_RCC_OscConfig+0x2fc>)
 8001d42:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001d44:	4ba1      	ldr	r3, [pc, #644]	; (8001fcc <HAL_RCC_OscConfig+0x300>)
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	f7ff fa3c 	bl	80011c4 <HAL_InitTick>
        if(status != HAL_OK)
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d134      	bne.n	8001dba <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	071b      	lsls	r3, r3, #28
 8001d54:	d500      	bpl.n	8001d58 <HAL_RCC_OscConfig+0x8c>
 8001d56:	e0f0      	b.n	8001f3a <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	075b      	lsls	r3, r3, #29
 8001d5c:	d500      	bpl.n	8001d60 <HAL_RCC_OscConfig+0x94>
 8001d5e:	e112      	b.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	d500      	bpl.n	8001d68 <HAL_RCC_OscConfig+0x9c>
 8001d66:	e196      	b.n	8002096 <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d000      	beq.n	8001d70 <HAL_RCC_OscConfig+0xa4>
 8001d6e:	e1c5      	b.n	80020fc <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8001d70:	2000      	movs	r0, #0
 8001d72:	e022      	b.n	8001dba <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d74:	2e08      	cmp	r6, #8
 8001d76:	d003      	beq.n	8001d80 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d78:	2e0c      	cmp	r6, #12
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_OscConfig+0xc4>
 8001d7c:	2f00      	cmp	r7, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	039b      	lsls	r3, r3, #14
 8001d84:	d5b3      	bpl.n	8001cee <HAL_RCC_OscConfig+0x22>
 8001d86:	686b      	ldr	r3, [r5, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1b0      	bne.n	8001cee <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d90:	686a      	ldr	r2, [r5, #4]
 8001d92:	428a      	cmp	r2, r1
 8001d94:	d113      	bne.n	8001dbe <HAL_RCC_OscConfig+0xf2>
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fa54 	bl	8001248 <HAL_GetTick>
 8001da0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	0292      	lsls	r2, r2, #10
 8001da8:	4213      	tst	r3, r2
 8001daa:	d1a0      	bne.n	8001cee <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fa4c 	bl	8001248 <HAL_GetTick>
 8001db0:	9b00      	ldr	r3, [sp, #0]
 8001db2:	1ac0      	subs	r0, r0, r3
 8001db4:	2864      	cmp	r0, #100	; 0x64
 8001db6:	d9f4      	bls.n	8001da2 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8001db8:	2003      	movs	r0, #3
}
 8001dba:	b005      	add	sp, #20
 8001dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbe:	21a0      	movs	r1, #160	; 0xa0
 8001dc0:	02c9      	lsls	r1, r1, #11
 8001dc2:	428a      	cmp	r2, r1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x106>
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	6821      	ldr	r1, [r4, #0]
 8001dca:	02d2      	lsls	r2, r2, #11
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	6022      	str	r2, [r4, #0]
 8001dd0:	e7e1      	b.n	8001d96 <HAL_RCC_OscConfig+0xca>
 8001dd2:	6821      	ldr	r1, [r4, #0]
 8001dd4:	487e      	ldr	r0, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x304>)
 8001dd6:	4001      	ands	r1, r0
 8001dd8:	6021      	str	r1, [r4, #0]
 8001dda:	6821      	ldr	r1, [r4, #0]
 8001ddc:	400b      	ands	r3, r1
 8001dde:	9303      	str	r3, [sp, #12]
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	497c      	ldr	r1, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x308>)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	400b      	ands	r3, r1
 8001de8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d1d6      	bne.n	8001d9c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8001dee:	f7ff fa2b 	bl	8001248 <HAL_GetTick>
 8001df2:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	0292      	lsls	r2, r2, #10
 8001dfa:	4213      	tst	r3, r2
 8001dfc:	d100      	bne.n	8001e00 <HAL_RCC_OscConfig+0x134>
 8001dfe:	e776      	b.n	8001cee <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fa22 	bl	8001248 <HAL_GetTick>
 8001e04:	9b00      	ldr	r3, [sp, #0]
 8001e06:	1ac0      	subs	r0, r0, r3
 8001e08:	2864      	cmp	r0, #100	; 0x64
 8001e0a:	d9f3      	bls.n	8001df4 <HAL_RCC_OscConfig+0x128>
 8001e0c:	e7d4      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e0e:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001e10:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e12:	4213      	tst	r3, r2
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e16:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e18:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	2e04      	cmp	r6, #4
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e22:	2e0c      	cmp	r6, #12
 8001e24:	d124      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1a4>
 8001e26:	2f00      	cmp	r7, #0
 8001e28:	d122      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	0752      	lsls	r2, r2, #29
 8001e2e:	d501      	bpl.n	8001e34 <HAL_RCC_OscConfig+0x168>
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ab      	beq.n	8001d8c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	6861      	ldr	r1, [r4, #4]
 8001e36:	692a      	ldr	r2, [r5, #16]
 8001e38:	4867      	ldr	r0, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x30c>)
 8001e3a:	0212      	lsls	r2, r2, #8
 8001e3c:	4001      	ands	r1, r0
 8001e3e:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e40:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e44:	6822      	ldr	r2, [r4, #0]
 8001e46:	438a      	bics	r2, r1
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4c:	f7ff fef6 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001e50:	68e3      	ldr	r3, [r4, #12]
 8001e52:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	0f1b      	lsrs	r3, r3, #28
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x2fc>)
 8001e5e:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x300>)
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	f7ff f9ae 	bl	80011c4 <HAL_InitTick>
      if(status != HAL_OK)
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCC_OscConfig+0x1a2>
 8001e6c:	e743      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
 8001e6e:	e7a4      	b.n	8001dba <HAL_RCC_OscConfig+0xee>
      if(hsi_state != RCC_HSI_OFF)
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e74:	2109      	movs	r1, #9
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	438a      	bics	r2, r1
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f9e3 	bl	8001248 <HAL_GetTick>
 8001e82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e84:	2204      	movs	r2, #4
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	4213      	tst	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	6862      	ldr	r2, [r4, #4]
 8001e8e:	692b      	ldr	r3, [r5, #16]
 8001e90:	4951      	ldr	r1, [pc, #324]	; (8001fd8 <HAL_RCC_OscConfig+0x30c>)
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	400a      	ands	r2, r1
 8001e96:	4313      	orrs	r3, r2
 8001e98:	6063      	str	r3, [r4, #4]
 8001e9a:	e72c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f9d4 	bl	8001248 <HAL_GetTick>
 8001ea0:	1bc0      	subs	r0, r0, r7
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	d9ee      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1b8>
 8001ea6:	e787      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	4393      	bics	r3, r2
 8001eae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f9ca 	bl	8001248 <HAL_GetTick>
 8001eb4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	4213      	tst	r3, r2
 8001ebc:	d100      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1f4>
 8001ebe:	e71a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f9c2 	bl	8001248 <HAL_GetTick>
 8001ec4:	1bc0      	subs	r0, r0, r7
 8001ec6:	2802      	cmp	r0, #2
 8001ec8:	d9f5      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1ea>
 8001eca:	e775      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ecc:	69eb      	ldr	r3, [r5, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001edc:	f7ff f9b4 	bl	8001248 <HAL_GetTick>
 8001ee0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4213      	tst	r3, r2
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_RCC_OscConfig+0x2f4>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef8:	6862      	ldr	r2, [r4, #4]
 8001efa:	6a2b      	ldr	r3, [r5, #32]
 8001efc:	0212      	lsls	r2, r2, #8
 8001efe:	061b      	lsls	r3, r3, #24
 8001f00:	0a12      	lsrs	r2, r2, #8
 8001f02:	4313      	orrs	r3, r2
 8001f04:	6063      	str	r3, [r4, #4]
 8001f06:	e723      	b.n	8001d50 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f08:	f7ff f99e 	bl	8001248 <HAL_GetTick>
 8001f0c:	1bc0      	subs	r0, r0, r7
 8001f0e:	2802      	cmp	r0, #2
 8001f10:	d9e7      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x216>
 8001f12:	e751      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x310>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f994 	bl	8001248 <HAL_GetTick>
 8001f20:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4213      	tst	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x262>
 8001f2c:	e710      	b.n	8001d50 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f98b 	bl	8001248 <HAL_GetTick>
 8001f32:	1bc0      	subs	r0, r0, r7
 8001f34:	2802      	cmp	r0, #2
 8001f36:	d9f4      	bls.n	8001f22 <HAL_RCC_OscConfig+0x256>
 8001f38:	e73e      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3a:	696a      	ldr	r2, [r5, #20]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d010      	beq.n	8001f64 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001f42:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f44:	4313      	orrs	r3, r2
 8001f46:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001f48:	f7ff f97e 	bl	8001248 <HAL_GetTick>
 8001f4c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f52:	4213      	tst	r3, r2
 8001f54:	d000      	beq.n	8001f58 <HAL_RCC_OscConfig+0x28c>
 8001f56:	e6ff      	b.n	8001d58 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff f976 	bl	8001248 <HAL_GetTick>
 8001f5c:	1bc0      	subs	r0, r0, r7
 8001f5e:	2802      	cmp	r0, #2
 8001f60:	d9f5      	bls.n	8001f4e <HAL_RCC_OscConfig+0x282>
 8001f62:	e729      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8001f64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f66:	439a      	bics	r2, r3
 8001f68:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001f6a:	f7ff f96d 	bl	8001248 <HAL_GetTick>
 8001f6e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f70:	2202      	movs	r2, #2
 8001f72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f74:	4213      	tst	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2ae>
 8001f78:	e6ee      	b.n	8001d58 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f965 	bl	8001248 <HAL_GetTick>
 8001f7e:	1bc0      	subs	r0, r0, r7
 8001f80:	2802      	cmp	r0, #2
 8001f82:	d9f5      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2a4>
 8001f84:	e718      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f86:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f8c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f90:	421a      	tst	r2, r3
 8001f92:	d104      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f96:	4313      	orrs	r3, r2
 8001f98:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	4f0f      	ldr	r7, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x314>)
 8001fa2:	0052      	lsls	r2, r2, #1
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4213      	tst	r3, r2
 8001fa8:	d01c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	68ab      	ldr	r3, [r5, #8]
 8001fae:	0052      	lsls	r2, r2, #1
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d12b      	bne.n	800200c <HAL_RCC_OscConfig+0x340>
 8001fb4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8001fba:	e04c      	b.n	8002056 <HAL_RCC_OscConfig+0x38a>
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	ffff1fff 	.word	0xffff1fff
 8001fc4:	080083b5 	.word	0x080083b5
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	ffffe0ff 	.word	0xffffe0ff
 8001fdc:	fffffeff 	.word	0xfffffeff
 8001fe0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	4313      	orrs	r3, r2
 8001fec:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001fee:	f7ff f92b 	bl	8001248 <HAL_GetTick>
 8001ff2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	0052      	lsls	r2, r2, #1
 8001ffa:	4213      	tst	r3, r2
 8001ffc:	d1d5      	bne.n	8001faa <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f923 	bl	8001248 <HAL_GetTick>
 8002002:	9b01      	ldr	r3, [sp, #4]
 8002004:	1ac0      	subs	r0, r0, r3
 8002006:	2864      	cmp	r0, #100	; 0x64
 8002008:	d9f4      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 800200a:	e6d5      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	2b00      	cmp	r3, #0
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x372>
 8002010:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002012:	4a6b      	ldr	r2, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	4013      	ands	r3, r2
 8002016:	6523      	str	r3, [r4, #80]	; 0x50
 8002018:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800201a:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	4013      	ands	r3, r2
 800201e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002020:	f7ff f912 	bl	8001248 <HAL_GetTick>
 8002024:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4213      	tst	r3, r2
 800202e:	d01a      	beq.n	8002066 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f90a 	bl	8001248 <HAL_GetTick>
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 8002036:	1bc0      	subs	r0, r0, r7
 8002038:	4298      	cmp	r0, r3
 800203a:	d9f4      	bls.n	8002026 <HAL_RCC_OscConfig+0x35a>
 800203c:	e6bc      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203e:	21a0      	movs	r1, #160	; 0xa0
 8002040:	00c9      	lsls	r1, r1, #3
 8002042:	428b      	cmp	r3, r1
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x3ac>
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	430b      	orrs	r3, r1
 800204e:	6523      	str	r3, [r4, #80]	; 0x50
 8002050:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002052:	431a      	orrs	r2, r3
 8002054:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002056:	f7ff f8f7 	bl	8001248 <HAL_GetTick>
 800205a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4213      	tst	r3, r2
 8002064:	d010      	beq.n	8002088 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8002066:	9b00      	ldr	r3, [sp, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d000      	beq.n	800206e <HAL_RCC_OscConfig+0x3a2>
 800206c:	e678      	b.n	8001d60 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002070:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_RCC_OscConfig+0x500>)
 8002072:	4013      	ands	r3, r2
 8002074:	63a3      	str	r3, [r4, #56]	; 0x38
 8002076:	e673      	b.n	8001d60 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	4013      	ands	r3, r2
 800207e:	6523      	str	r3, [r4, #80]	; 0x50
 8002080:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002082:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 8002084:	4013      	ands	r3, r2
 8002086:	e797      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff f8de 	bl	8001248 <HAL_GetTick>
 800208c:	4b4e      	ldr	r3, [pc, #312]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 800208e:	1bc0      	subs	r0, r0, r7
 8002090:	4298      	cmp	r0, r3
 8002092:	d9e3      	bls.n	800205c <HAL_RCC_OscConfig+0x390>
 8002094:	e690      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002096:	69a9      	ldr	r1, [r5, #24]
 8002098:	2301      	movs	r3, #1
 800209a:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800209c:	2900      	cmp	r1, #0
 800209e:	d018      	beq.n	80020d2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80020a0:	68a1      	ldr	r1, [r4, #8]
 80020a2:	4319      	orrs	r1, r3
 80020a4:	60a1      	str	r1, [r4, #8]
 80020a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6363      	str	r3, [r4, #52]	; 0x34
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	6a11      	ldr	r1, [r2, #32]
 80020b0:	019b      	lsls	r3, r3, #6
 80020b2:	430b      	orrs	r3, r1
 80020b4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80020b6:	f7ff f8c7 	bl	8001248 <HAL_GetTick>
 80020ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020bc:	2202      	movs	r2, #2
 80020be:	68a3      	ldr	r3, [r4, #8]
 80020c0:	4213      	tst	r3, r2
 80020c2:	d000      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3fa>
 80020c4:	e650      	b.n	8001d68 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c6:	f7ff f8bf 	bl	8001248 <HAL_GetTick>
 80020ca:	1bc0      	subs	r0, r0, r7
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d9f5      	bls.n	80020bc <HAL_RCC_OscConfig+0x3f0>
 80020d0:	e672      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 80020d2:	68a1      	ldr	r1, [r4, #8]
 80020d4:	4399      	bics	r1, r3
 80020d6:	60a1      	str	r1, [r4, #8]
 80020d8:	6a13      	ldr	r3, [r2, #32]
 80020da:	493e      	ldr	r1, [pc, #248]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 80020dc:	400b      	ands	r3, r1
 80020de:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80020e0:	f7ff f8b2 	bl	8001248 <HAL_GetTick>
 80020e4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e6:	2202      	movs	r2, #2
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	4213      	tst	r3, r2
 80020ec:	d100      	bne.n	80020f0 <HAL_RCC_OscConfig+0x424>
 80020ee:	e63b      	b.n	8001d68 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f0:	f7ff f8aa 	bl	8001248 <HAL_GetTick>
 80020f4:	1bc0      	subs	r0, r0, r7
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9f5      	bls.n	80020e6 <HAL_RCC_OscConfig+0x41a>
 80020fa:	e65d      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	2e0c      	cmp	r6, #12
 80020fe:	d043      	beq.n	8002188 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002100:	4a35      	ldr	r2, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x50c>)
 8002102:	2b02      	cmp	r3, #2
 8002104:	d12e      	bne.n	8002164 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 8002106:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002108:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800210a:	4013      	ands	r3, r2
 800210c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800210e:	f7ff f89b 	bl	8001248 <HAL_GetTick>
 8002112:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002114:	04bf      	lsls	r7, r7, #18
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	423b      	tst	r3, r7
 800211a:	d11d      	bne.n	8002158 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800211e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002120:	68e2      	ldr	r2, [r4, #12]
 8002122:	430b      	orrs	r3, r1
 8002124:	492d      	ldr	r1, [pc, #180]	; (80021dc <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002126:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	400a      	ands	r2, r1
 800212a:	4313      	orrs	r3, r2
 800212c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800212e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4313      	orrs	r3, r2
 8002132:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	6822      	ldr	r2, [r4, #0]
 8002138:	045b      	lsls	r3, r3, #17
 800213a:	4313      	orrs	r3, r2
 800213c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800213e:	f7ff f883 	bl	8001248 <HAL_GetTick>
 8002142:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	4233      	tst	r3, r6
 8002148:	d000      	beq.n	800214c <HAL_RCC_OscConfig+0x480>
 800214a:	e611      	b.n	8001d70 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f87c 	bl	8001248 <HAL_GetTick>
 8002150:	1b40      	subs	r0, r0, r5
 8002152:	2802      	cmp	r0, #2
 8002154:	d9f6      	bls.n	8002144 <HAL_RCC_OscConfig+0x478>
 8002156:	e62f      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f876 	bl	8001248 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	2802      	cmp	r0, #2
 8002160:	d9d9      	bls.n	8002116 <HAL_RCC_OscConfig+0x44a>
 8002162:	e629      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8002164:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002166:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002168:	4013      	ands	r3, r2
 800216a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800216c:	f7ff f86c 	bl	8001248 <HAL_GetTick>
 8002170:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002172:	04b6      	lsls	r6, r6, #18
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	4233      	tst	r3, r6
 8002178:	d100      	bne.n	800217c <HAL_RCC_OscConfig+0x4b0>
 800217a:	e5f9      	b.n	8001d70 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff f864 	bl	8001248 <HAL_GetTick>
 8002180:	1b40      	subs	r0, r0, r5
 8002182:	2802      	cmp	r0, #2
 8002184:	d9f6      	bls.n	8002174 <HAL_RCC_OscConfig+0x4a8>
 8002186:	e617      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8002188:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218a:	2b01      	cmp	r3, #1
 800218c:	d100      	bne.n	8002190 <HAL_RCC_OscConfig+0x4c4>
 800218e:	e614      	b.n	8001dba <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002192:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002196:	0252      	lsls	r2, r2, #9
 8002198:	401a      	ands	r2, r3
 800219a:	428a      	cmp	r2, r1
 800219c:	d000      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4d4>
 800219e:	e5f5      	b.n	8001d8c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a4:	0392      	lsls	r2, r2, #14
 80021a6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	428a      	cmp	r2, r1
 80021aa:	d000      	beq.n	80021ae <HAL_RCC_OscConfig+0x4e2>
 80021ac:	e5ee      	b.n	8001d8c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021ae:	22c0      	movs	r2, #192	; 0xc0
 80021b0:	0412      	lsls	r2, r2, #16
 80021b2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d100      	bne.n	80021bc <HAL_RCC_OscConfig+0x4f0>
 80021ba:	e5d9      	b.n	8001d70 <HAL_RCC_OscConfig+0xa4>
 80021bc:	e5e6      	b.n	8001d8c <HAL_RCC_OscConfig+0xc0>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	fffffeff 	.word	0xfffffeff
 80021c4:	fffffbff 	.word	0xfffffbff
 80021c8:	00001388 	.word	0x00001388
 80021cc:	efffffff 	.word	0xefffffff
 80021d0:	40010000 	.word	0x40010000
 80021d4:	ffffdfff 	.word	0xffffdfff
 80021d8:	feffffff 	.word	0xfeffffff
 80021dc:	ff02ffff 	.word	0xff02ffff

080021e0 <HAL_RCC_ClockConfig>:
{
 80021e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021e2:	1e04      	subs	r4, r0, #0
 80021e4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
}
 80021ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	2501      	movs	r5, #1
 80021ee:	4e5b      	ldr	r6, [pc, #364]	; (800235c <HAL_RCC_ClockConfig+0x17c>)
 80021f0:	9a01      	ldr	r2, [sp, #4]
 80021f2:	6833      	ldr	r3, [r6, #0]
 80021f4:	402b      	ands	r3, r5
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d331      	bcc.n	800225e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	0793      	lsls	r3, r2, #30
 80021fe:	d443      	bmi.n	8002288 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002200:	07d3      	lsls	r3, r2, #31
 8002202:	d449      	bmi.n	8002298 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	2501      	movs	r5, #1
 8002206:	6833      	ldr	r3, [r6, #0]
 8002208:	9a01      	ldr	r2, [sp, #4]
 800220a:	402b      	ands	r3, r5
 800220c:	4293      	cmp	r3, r2
 800220e:	d909      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002210:	6833      	ldr	r3, [r6, #0]
 8002212:	43ab      	bics	r3, r5
 8002214:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002216:	f7ff f817 	bl	8001248 <HAL_GetTick>
 800221a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	6833      	ldr	r3, [r6, #0]
 800221e:	422b      	tst	r3, r5
 8002220:	d000      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
 8002222:	e08c      	b.n	800233e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	4d4e      	ldr	r5, [pc, #312]	; (8002360 <HAL_RCC_ClockConfig+0x180>)
 8002228:	0753      	lsls	r3, r2, #29
 800222a:	d500      	bpl.n	800222e <HAL_RCC_ClockConfig+0x4e>
 800222c:	e08f      	b.n	800234e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	0713      	lsls	r3, r2, #28
 8002230:	d506      	bpl.n	8002240 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	68e9      	ldr	r1, [r5, #12]
 8002234:	6923      	ldr	r3, [r4, #16]
 8002236:	4a4b      	ldr	r2, [pc, #300]	; (8002364 <HAL_RCC_ClockConfig+0x184>)
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	400a      	ands	r2, r1
 800223c:	4313      	orrs	r3, r2
 800223e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002240:	f7ff fcfc 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8002244:	68eb      	ldr	r3, [r5, #12]
 8002246:	4a48      	ldr	r2, [pc, #288]	; (8002368 <HAL_RCC_ClockConfig+0x188>)
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	0f1b      	lsrs	r3, r3, #28
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	40d8      	lsrs	r0, r3
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_ClockConfig+0x18c>)
 8002252:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_ClockConfig+0x190>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	f7fe ffb4 	bl	80011c4 <HAL_InitTick>
  if(status != HAL_OK)
 800225c:	e7c5      	b.n	80021ea <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	6833      	ldr	r3, [r6, #0]
 8002260:	9a01      	ldr	r2, [sp, #4]
 8002262:	43ab      	bics	r3, r5
 8002264:	4313      	orrs	r3, r2
 8002266:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002268:	f7fe ffee 	bl	8001248 <HAL_GetTick>
 800226c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	6833      	ldr	r3, [r6, #0]
 8002270:	9a01      	ldr	r2, [sp, #4]
 8002272:	402b      	ands	r3, r5
 8002274:	4293      	cmp	r3, r2
 8002276:	d0c0      	beq.n	80021fa <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe ffe6 	bl	8001248 <HAL_GetTick>
 800227c:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 800227e:	1bc0      	subs	r0, r0, r7
 8002280:	4298      	cmp	r0, r3
 8002282:	d9f4      	bls.n	800226e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	e7b0      	b.n	80021ea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	20f0      	movs	r0, #240	; 0xf0
 800228a:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_RCC_ClockConfig+0x180>)
 800228c:	68cb      	ldr	r3, [r1, #12]
 800228e:	4383      	bics	r3, r0
 8002290:	68a0      	ldr	r0, [r4, #8]
 8002292:	4303      	orrs	r3, r0
 8002294:	60cb      	str	r3, [r1, #12]
 8002296:	e7b3      	b.n	8002200 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	4d31      	ldr	r5, [pc, #196]	; (8002360 <HAL_RCC_ClockConfig+0x180>)
 800229a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800229c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	2a02      	cmp	r2, #2
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a2:	039b      	lsls	r3, r3, #14
 80022a4:	d5a0      	bpl.n	80021e8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	2103      	movs	r1, #3
 80022a8:	68eb      	ldr	r3, [r5, #12]
 80022aa:	438b      	bics	r3, r1
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80022b0:	f7fe ffca 	bl	8001248 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80022b6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d118      	bne.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	220c      	movs	r2, #12
 80022be:	68eb      	ldr	r3, [r5, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d09e      	beq.n	8002204 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe ffbf 	bl	8001248 <HAL_GetTick>
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 80022cc:	1bc0      	subs	r0, r0, r7
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d9f4      	bls.n	80022bc <HAL_RCC_ClockConfig+0xdc>
 80022d2:	e7d7      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	2a03      	cmp	r2, #3
 80022d6:	d102      	bne.n	80022de <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	d4e4      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
 80022dc:	e784      	b.n	80021e8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022de:	2a01      	cmp	r2, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e2:	075b      	lsls	r3, r3, #29
 80022e4:	d4df      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
 80022e6:	e77f      	b.n	80021e8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022e8:	059b      	lsls	r3, r3, #22
 80022ea:	d4dc      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
 80022ec:	e77c      	b.n	80021e8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	220c      	movs	r2, #12
 80022f4:	68eb      	ldr	r3, [r5, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d083      	beq.n	8002204 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7fe ffa4 	bl	8001248 <HAL_GetTick>
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	4298      	cmp	r0, r3
 8002306:	d9f4      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x112>
 8002308:	e7bc      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800230a:	2b01      	cmp	r3, #1
 800230c:	d011      	beq.n	8002332 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800230e:	220c      	movs	r2, #12
 8002310:	68eb      	ldr	r3, [r5, #12]
 8002312:	4213      	tst	r3, r2
 8002314:	d100      	bne.n	8002318 <HAL_RCC_ClockConfig+0x138>
 8002316:	e775      	b.n	8002204 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe ff96 	bl	8001248 <HAL_GetTick>
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 800231e:	1bc0      	subs	r0, r0, r7
 8002320:	4298      	cmp	r0, r3
 8002322:	d9f4      	bls.n	800230e <HAL_RCC_ClockConfig+0x12e>
 8002324:	e7ae      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7fe ff8f 	bl	8001248 <HAL_GetTick>
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 800232c:	1bc0      	subs	r0, r0, r7
 800232e:	4298      	cmp	r0, r3
 8002330:	d8a8      	bhi.n	8002284 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	220c      	movs	r2, #12
 8002334:	68eb      	ldr	r3, [r5, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b04      	cmp	r3, #4
 800233a:	d1f4      	bne.n	8002326 <HAL_RCC_ClockConfig+0x146>
 800233c:	e762      	b.n	8002204 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233e:	f7fe ff83 	bl	8001248 <HAL_GetTick>
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 8002344:	1bc0      	subs	r0, r0, r7
 8002346:	4298      	cmp	r0, r3
 8002348:	d800      	bhi.n	800234c <HAL_RCC_ClockConfig+0x16c>
 800234a:	e767      	b.n	800221c <HAL_RCC_ClockConfig+0x3c>
 800234c:	e79a      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234e:	68eb      	ldr	r3, [r5, #12]
 8002350:	4909      	ldr	r1, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x198>)
 8002352:	400b      	ands	r3, r1
 8002354:	68e1      	ldr	r1, [r4, #12]
 8002356:	430b      	orrs	r3, r1
 8002358:	60eb      	str	r3, [r5, #12]
 800235a:	e768      	b.n	800222e <HAL_RCC_ClockConfig+0x4e>
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	ffffc7ff 	.word	0xffffc7ff
 8002368:	080083b5 	.word	0x080083b5
 800236c:	20000000 	.word	0x20000000
 8002370:	20000008 	.word	0x20000008
 8002374:	00001388 	.word	0x00001388
 8002378:	fffff8ff 	.word	0xfffff8ff

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x14>)
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	055b      	lsls	r3, r3, #21
 8002384:	0f5b      	lsrs	r3, r3, #29
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800238a:	6810      	ldr	r0, [r2, #0]
 800238c:	40d8      	lsrs	r0, r3
}
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000
 8002394:	080083c5 	.word	0x080083c5
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	049b      	lsls	r3, r3, #18
 80023a4:	0f5b      	lsrs	r3, r3, #29
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023aa:	6810      	ldr	r0, [r2, #0]
 80023ac:	40d8      	lsrs	r0, r3
}
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080083c5 	.word	0x080083c5
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023bc:	6803      	ldr	r3, [r0, #0]
{
 80023be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023c0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	d53e      	bpl.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x88>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80023c8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4c60      	ldr	r4, [pc, #384]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80023cc:	055b      	lsls	r3, r3, #21
 80023ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80023d0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	421a      	tst	r2, r3
 80023d4:	d104      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023d8:	4313      	orrs	r3, r2
 80023da:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	2780      	movs	r7, #128	; 0x80
 80023e2:	4e5b      	ldr	r6, [pc, #364]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80023e4:	007f      	lsls	r7, r7, #1
 80023e6:	6833      	ldr	r3, [r6, #0]
 80023e8:	423b      	tst	r3, r7
 80023ea:	d06d      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023ec:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023ee:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023f0:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023f2:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80023f4:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023f6:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023fc:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80023fe:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002400:	428a      	cmp	r2, r1
 8002402:	d000      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002404:	e071      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x12e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002406:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002408:	0011      	movs	r1, r2
 800240a:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800240c:	421a      	tst	r2, r3
 800240e:	d000      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002410:	e074      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x140>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002412:	6869      	ldr	r1, [r5, #4]
 8002414:	23c0      	movs	r3, #192	; 0xc0
 8002416:	000a      	movs	r2, r1
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	401a      	ands	r2, r3
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	484c      	ldr	r0, [pc, #304]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002424:	4003      	ands	r3, r0
 8002426:	20c0      	movs	r0, #192	; 0xc0
 8002428:	0380      	lsls	r0, r0, #14
 800242a:	4001      	ands	r1, r0
 800242c:	430b      	orrs	r3, r1
 800242e:	6023      	str	r3, [r4, #0]
 8002430:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002432:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002434:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002436:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8002438:	2b01      	cmp	r3, #1
 800243a:	d103      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800243e:	4a46      	ldr	r2, [pc, #280]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002440:	4013      	ands	r3, r2
 8002442:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	07da      	lsls	r2, r3, #31
 8002448:	d506      	bpl.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244a:	2003      	movs	r0, #3
 800244c:	493f      	ldr	r1, [pc, #252]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800244e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002450:	4382      	bics	r2, r0
 8002452:	68a8      	ldr	r0, [r5, #8]
 8002454:	4302      	orrs	r2, r0
 8002456:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002458:	079a      	lsls	r2, r3, #30
 800245a:	d506      	bpl.n	800246a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245c:	200c      	movs	r0, #12
 800245e:	493b      	ldr	r1, [pc, #236]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002460:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002462:	4382      	bics	r2, r0
 8002464:	68e8      	ldr	r0, [r5, #12]
 8002466:	4302      	orrs	r2, r0
 8002468:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800246a:	075a      	lsls	r2, r3, #29
 800246c:	d506      	bpl.n	800247c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800246e:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002470:	483a      	ldr	r0, [pc, #232]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002472:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002474:	4002      	ands	r2, r0
 8002476:	6928      	ldr	r0, [r5, #16]
 8002478:	4302      	orrs	r2, r0
 800247a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247c:	071a      	lsls	r2, r3, #28
 800247e:	d506      	bpl.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002480:	4932      	ldr	r1, [pc, #200]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002482:	4837      	ldr	r0, [pc, #220]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002484:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002486:	4002      	ands	r2, r0
 8002488:	6968      	ldr	r0, [r5, #20]
 800248a:	4302      	orrs	r2, r0
 800248c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248e:	05da      	lsls	r2, r3, #23
 8002490:	d506      	bpl.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002492:	492e      	ldr	r1, [pc, #184]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002494:	4833      	ldr	r0, [pc, #204]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002496:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002498:	4002      	ands	r2, r0
 800249a:	69a8      	ldr	r0, [r5, #24]
 800249c:	4302      	orrs	r2, r0
 800249e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a0:	065a      	lsls	r2, r3, #25
 80024a2:	d506      	bpl.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a4:	4929      	ldr	r1, [pc, #164]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80024a6:	4830      	ldr	r0, [pc, #192]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80024aa:	4002      	ands	r2, r0
 80024ac:	6a28      	ldr	r0, [r5, #32]
 80024ae:	4302      	orrs	r2, r0
 80024b0:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80024b2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	d517      	bpl.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024b8:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80024ba:	492c      	ldr	r1, [pc, #176]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80024be:	400b      	ands	r3, r1
 80024c0:	69e9      	ldr	r1, [r5, #28]
 80024c2:	430b      	orrs	r3, r1
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	e00f      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c8:	6833      	ldr	r3, [r6, #0]
 80024ca:	433b      	orrs	r3, r7
 80024cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80024ce:	f7fe febb 	bl	8001248 <HAL_GetTick>
 80024d2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	6833      	ldr	r3, [r6, #0]
 80024d6:	423b      	tst	r3, r7
 80024d8:	d188      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe feb5 	bl	8001248 <HAL_GetTick>
 80024de:	9b01      	ldr	r3, [sp, #4]
 80024e0:	1ac0      	subs	r0, r0, r3
 80024e2:	2864      	cmp	r0, #100	; 0x64
 80024e4:	d9f6      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
          return HAL_TIMEOUT;
 80024e6:	2003      	movs	r0, #3
}
 80024e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024ea:	429e      	cmp	r6, r3
 80024ec:	d000      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80024ee:	e78a      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024f0:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024f4:	0392      	lsls	r2, r2, #14
 80024f6:	d400      	bmi.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80024f8:	e785      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80024fa:	e7f5      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024fc:	42b1      	cmp	r1, r6
 80024fe:	d100      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8002500:	e787      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002502:	682b      	ldr	r3, [r5, #0]
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	d400      	bmi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002508:	e783      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 800250a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800250c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800250e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002510:	0312      	lsls	r2, r2, #12
 8002512:	4302      	orrs	r2, r0
 8002514:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002516:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251a:	4815      	ldr	r0, [pc, #84]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800251c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251e:	4002      	ands	r2, r0
 8002520:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002522:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002524:	05cb      	lsls	r3, r1, #23
 8002526:	d400      	bmi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002528:	e773      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 800252a:	f7fe fe8d 	bl	8001248 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800252e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002530:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002532:	00bf      	lsls	r7, r7, #2
 8002534:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002536:	423b      	tst	r3, r7
 8002538:	d000      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800253a:	e76a      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x56>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fe84 	bl	8001248 <HAL_GetTick>
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002542:	1b80      	subs	r0, r0, r6
 8002544:	4298      	cmp	r0, r3
 8002546:	d9f5      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002548:	e7cd      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
 8002554:	ffcfffff 	.word	0xffcfffff
 8002558:	efffffff 	.word	0xefffffff
 800255c:	fffff3ff 	.word	0xfffff3ff
 8002560:	ffffcfff 	.word	0xffffcfff
 8002564:	fffcffff 	.word	0xfffcffff
 8002568:	fbffffff 	.word	0xfbffffff
 800256c:	fff3ffff 	.word	0xfff3ffff
 8002570:	fff7ffff 	.word	0xfff7ffff
 8002574:	00001388 	.word	0x00001388

08002578 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800257a:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800257c:	1c45      	adds	r5, r0, #1
 800257e:	7feb      	ldrb	r3, [r5, #31]
{
 8002580:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002582:	0038      	movs	r0, r7
 8002584:	2b01      	cmp	r3, #1
 8002586:	d027      	beq.n	80025d8 <HAL_RTC_DeactivateAlarm+0x60>
 8002588:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800258a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800258c:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 800258e:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002590:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
 8002596:	3a77      	subs	r2, #119	; 0x77
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800259a:	32ad      	adds	r2, #173	; 0xad
 800259c:	4291      	cmp	r1, r2
 800259e:	d12a      	bne.n	80025f6 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80025a4:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025a6:	400a      	ands	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4920      	ldr	r1, [pc, #128]	; (8002630 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80025ae:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80025b0:	400a      	ands	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025b4:	f7fe fe48 	bl	8001248 <HAL_GetTick>
 80025b8:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80025ba:	2201      	movs	r2, #1
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	401a      	ands	r2, r3
 80025c2:	9201      	str	r2, [sp, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4213      	tst	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025ce:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80025d2:	2301      	movs	r3, #1
 80025d4:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80025d6:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80025d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80025da:	f7fe fe35 	bl	8001248 <HAL_GetTick>
 80025de:	9b00      	ldr	r3, [sp, #0]
 80025e0:	1ac0      	subs	r0, r0, r3
 80025e2:	42b8      	cmp	r0, r7
 80025e4:	d9e9      	bls.n	80025ba <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025ee:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 80025f4:	e7f0      	b.n	80025d8 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RTC_DeactivateAlarm+0xbc>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	490d      	ldr	r1, [pc, #52]	; (8002638 <HAL_RTC_DeactivateAlarm+0xc0>)
 8002602:	400a      	ands	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002606:	f7fe fe1f 	bl	8001248 <HAL_GetTick>
 800260a:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	001a      	movs	r2, r3
 8002612:	403a      	ands	r2, r7
 8002614:	9201      	str	r2, [sp, #4]
 8002616:	423b      	tst	r3, r7
 8002618:	d1d7      	bne.n	80025ca <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800261a:	f7fe fe15 	bl	8001248 <HAL_GetTick>
 800261e:	9b00      	ldr	r3, [sp, #0]
 8002620:	1ac0      	subs	r0, r0, r3
 8002622:	23fa      	movs	r3, #250	; 0xfa
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4298      	cmp	r0, r3
 8002628:	d9f0      	bls.n	800260c <HAL_RTC_DeactivateAlarm+0x94>
 800262a:	e7dc      	b.n	80025e6 <HAL_RTC_DeactivateAlarm+0x6e>
 800262c:	fffffeff 	.word	0xfffffeff
 8002630:	ffffefff 	.word	0xffffefff
 8002634:	fffffdff 	.word	0xfffffdff
 8002638:	ffffdfff 	.word	0xffffdfff

0800263c <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800263c:	6803      	ldr	r3, [r0, #0]
{
 800263e:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002640:	689a      	ldr	r2, [r3, #8]
{
 8002642:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002644:	04d2      	lsls	r2, r2, #19
 8002646:	d50a      	bpl.n	800265e <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	05db      	lsls	r3, r3, #23
 800264c:	d507      	bpl.n	800265e <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800264e:	f004 fbe7 	bl	8006e20 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002652:	6821      	ldr	r1, [r4, #0]
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_RTC_AlarmIRQHandler+0x54>)
 8002656:	68ca      	ldr	r2, [r1, #12]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	0492      	lsls	r2, r2, #18
 8002664:	d50b      	bpl.n	800267e <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	059b      	lsls	r3, r3, #22
 800266a:	d508      	bpl.n	800267e <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800266c:	0020      	movs	r0, r4
 800266e:	f000 faf5 	bl	8002c5c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002672:	6821      	ldr	r1, [r4, #0]
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002676:	68ca      	ldr	r2, [r1, #12]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4313      	orrs	r3, r2
 800267c:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8002682:	0292      	lsls	r2, r2, #10
 8002684:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002686:	2301      	movs	r3, #1
 8002688:	3402      	adds	r4, #2
 800268a:	77e3      	strb	r3, [r4, #31]
}
 800268c:	bd10      	pop	{r4, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	fffffe7f 	.word	0xfffffe7f
 8002694:	fffffd7f 	.word	0xfffffd7f
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800269c:	21a0      	movs	r1, #160	; 0xa0
 800269e:	6802      	ldr	r2, [r0, #0]
{
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026a2:	68d3      	ldr	r3, [r2, #12]
{
 80026a4:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026a6:	438b      	bics	r3, r1
 80026a8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80026aa:	f7fe fdcd 	bl	8001248 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026ae:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80026b0:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026b2:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026b4:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4233      	tst	r3, r6
 80026bc:	d001      	beq.n	80026c2 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80026be:	2000      	movs	r0, #0
}
 80026c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026c2:	f7fe fdc1 	bl	8001248 <HAL_GetTick>
 80026c6:	1b40      	subs	r0, r0, r5
 80026c8:	42b8      	cmp	r0, r7
 80026ca:	d9f4      	bls.n	80026b6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80026cc:	2003      	movs	r0, #3
 80026ce:	e7f7      	b.n	80026c0 <HAL_RTC_WaitForSynchro+0x24>

080026d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80026d2:	2640      	movs	r6, #64	; 0x40
 80026d4:	6803      	ldr	r3, [r0, #0]
{
 80026d6:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	4232      	tst	r2, r6
 80026dc:	d001      	beq.n	80026e2 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80026de:	2000      	movs	r0, #0
}
 80026e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80026e2:	2201      	movs	r2, #1
 80026e4:	4252      	negs	r2, r2
 80026e6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80026e8:	f7fe fdae 	bl	8001248 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026ec:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80026ee:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026f0:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4233      	tst	r3, r6
 80026f8:	d1f1      	bne.n	80026de <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026fa:	f7fe fda5 	bl	8001248 <HAL_GetTick>
 80026fe:	1b40      	subs	r0, r0, r5
 8002700:	42b8      	cmp	r0, r7
 8002702:	d9f6      	bls.n	80026f2 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8002704:	2003      	movs	r0, #3
 8002706:	e7eb      	b.n	80026e0 <RTC_EnterInitMode+0x10>

08002708 <HAL_RTC_Init>:
{
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800270c:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800270e:	2800      	cmp	r0, #0
 8002710:	d01a      	beq.n	8002748 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002712:	1c86      	adds	r6, r0, #2
 8002714:	7ff3      	ldrb	r3, [r6, #31]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d103      	bne.n	8002724 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800271c:	1943      	adds	r3, r0, r5
 800271e:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8002720:	f7fe f84c 	bl	80007bc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002724:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002726:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002728:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800272a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800272c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
 8002730:	3a77      	subs	r2, #119	; 0x77
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002734:	f7ff ffcc 	bl	80026d0 <RTC_EnterInitMode>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	1e05      	subs	r5, r0, #0
 800273c:	d006      	beq.n	800274c <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273e:	22ff      	movs	r2, #255	; 0xff
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002742:	2304      	movs	r3, #4
 8002744:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8002746:	2501      	movs	r5, #1
}
 8002748:	0028      	movs	r0, r5
 800274a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	491b      	ldr	r1, [pc, #108]	; (80027bc <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002750:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002752:	400a      	ands	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002756:	6862      	ldr	r2, [r4, #4]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	4302      	orrs	r2, r0
 800275c:	69a0      	ldr	r0, [r4, #24]
 800275e:	4302      	orrs	r2, r0
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002764:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002766:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002768:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800276a:	68a2      	ldr	r2, [r4, #8]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	0412      	lsls	r2, r2, #16
 8002770:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002772:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002774:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	438a      	bics	r2, r1
 800277a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800277c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277e:	397d      	subs	r1, #125	; 0x7d
 8002780:	438a      	bics	r2, r1
 8002782:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002784:	69e2      	ldr	r2, [r4, #28]
 8002786:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002788:	4302      	orrs	r2, r0
 800278a:	430a      	orrs	r2, r1
 800278c:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	d40c      	bmi.n	80027ae <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002794:	0020      	movs	r0, r4
 8002796:	f7ff ff81 	bl	800269c <HAL_RTC_WaitForSynchro>
 800279a:	2800      	cmp	r0, #0
 800279c:	d007      	beq.n	80027ae <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800279e:	22ff      	movs	r2, #255	; 0xff
 80027a0:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80027a2:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027a6:	2304      	movs	r3, #4
 80027a8:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80027aa:	77e5      	strb	r5, [r4, #31]
 80027ac:	e7cb      	b.n	8002746 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ae:	22ff      	movs	r2, #255	; 0xff
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80027b4:	2301      	movs	r3, #1
 80027b6:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80027b8:	e7c6      	b.n	8002748 <HAL_RTC_Init+0x40>
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	ff8fffbf 	.word	0xff8fffbf

080027c0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80027c0:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80027c2:	2809      	cmp	r0, #9
 80027c4:	d803      	bhi.n	80027ce <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4318      	orrs	r0, r3
 80027ca:	b2c0      	uxtb	r0, r0
}
 80027cc:	4770      	bx	lr
    Param -= 10U;
 80027ce:	380a      	subs	r0, #10
    bcdhigh++;
 80027d0:	3301      	adds	r3, #1
    Param -= 10U;
 80027d2:	b2c0      	uxtb	r0, r0
 80027d4:	e7f5      	b.n	80027c2 <RTC_ByteToBcd2+0x2>
	...

080027d8 <HAL_RTC_SetTime>:
{
 80027d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80027da:	1c43      	adds	r3, r0, #1
{
 80027dc:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80027de:	9301      	str	r3, [sp, #4]
{
 80027e0:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80027e2:	7fd9      	ldrb	r1, [r3, #31]
 80027e4:	2302      	movs	r3, #2
{
 80027e6:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80027e8:	001f      	movs	r7, r3
 80027ea:	2901      	cmp	r1, #1
 80027ec:	d036      	beq.n	800285c <HAL_RTC_SetTime+0x84>
 80027ee:	2101      	movs	r1, #1
 80027f0:	1840      	adds	r0, r0, r1
 80027f2:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027f4:	18e9      	adds	r1, r5, r3
 80027f6:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027f8:	682f      	ldr	r7, [r5, #0]
 80027fa:	7820      	ldrb	r0, [r4, #0]
 80027fc:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027fe:	9102      	str	r1, [sp, #8]
 8002800:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8002802:	2a00      	cmp	r2, #0
 8002804:	d12d      	bne.n	8002862 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	0011      	movs	r1, r2
 800280a:	4019      	ands	r1, r3
 800280c:	421a      	tst	r2, r3
 800280e:	d100      	bne.n	8002812 <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8002810:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002812:	f7ff ffd5 	bl	80027c0 <RTC_ByteToBcd2>
 8002816:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002818:	0030      	movs	r0, r6
 800281a:	f7ff ffd1 	bl	80027c0 <RTC_ByteToBcd2>
 800281e:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002820:	78a0      	ldrb	r0, [r4, #2]
 8002822:	f7ff ffcd 	bl	80027c0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002826:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002828:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800282a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800282c:	4303      	orrs	r3, r0
 800282e:	0412      	lsls	r2, r2, #16
 8002830:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002832:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002834:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002836:	23ca      	movs	r3, #202	; 0xca
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	3b77      	subs	r3, #119	; 0x77
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800283e:	0028      	movs	r0, r5
 8002840:	f7ff ff46 	bl	80026d0 <RTC_EnterInitMode>
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	1e07      	subs	r7, r0, #0
 8002848:	d019      	beq.n	800287e <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800284e:	2304      	movs	r3, #4
 8002850:	9a02      	ldr	r2, [sp, #8]
 8002852:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002854:	2300      	movs	r3, #0
 8002856:	9a01      	ldr	r2, [sp, #4]
 8002858:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 800285a:	2701      	movs	r7, #1
}
 800285c:	0038      	movs	r0, r7
 800285e:	b005      	add	sp, #20
 8002860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	0011      	movs	r1, r2
 8002866:	4019      	ands	r1, r3
 8002868:	421a      	tst	r2, r3
 800286a:	d100      	bne.n	800286e <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 800286c:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800286e:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002870:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002872:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002874:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8002876:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002878:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800287a:	4306      	orrs	r6, r0
 800287c:	e7da      	b.n	8002834 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800287e:	4816      	ldr	r0, [pc, #88]	; (80028d8 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002882:	4006      	ands	r6, r0
 8002884:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002886:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002888:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800288a:	400a      	ands	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800288e:	68e2      	ldr	r2, [r4, #12]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	4302      	orrs	r2, r0
 8002894:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002896:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002898:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	438a      	bics	r2, r1
 800289e:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	069b      	lsls	r3, r3, #26
 80028a4:	d40d      	bmi.n	80028c2 <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028a6:	0028      	movs	r0, r5
 80028a8:	f7ff fef8 	bl	800269c <HAL_RTC_WaitForSynchro>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	682b      	ldr	r3, [r5, #0]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028b6:	2304      	movs	r3, #4
 80028b8:	9a02      	ldr	r2, [sp, #8]
 80028ba:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80028bc:	9b01      	ldr	r3, [sp, #4]
 80028be:	77df      	strb	r7, [r3, #31]
 80028c0:	e7cb      	b.n	800285a <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80028c8:	2301      	movs	r3, #1
 80028ca:	9a02      	ldr	r2, [sp, #8]
 80028cc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80028ce:	2300      	movs	r3, #0
 80028d0:	9a01      	ldr	r2, [sp, #4]
 80028d2:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 80028d4:	e7c2      	b.n	800285c <HAL_RTC_SetTime+0x84>
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	007f7f7f 	.word	0x007f7f7f
 80028dc:	fffbffff 	.word	0xfffbffff

080028e0 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 80028e0:	2302      	movs	r3, #2
{
 80028e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80028e4:	1c47      	adds	r7, r0, #1
{
 80028e6:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80028e8:	7ff9      	ldrb	r1, [r7, #31]
{
 80028ea:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80028ec:	001d      	movs	r5, r3
{
 80028ee:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80028f0:	2901      	cmp	r1, #1
 80028f2:	d036      	beq.n	8002962 <HAL_RTC_SetDate+0x82>
 80028f4:	2101      	movs	r1, #1
 80028f6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028f8:	18c1      	adds	r1, r0, r3
 80028fa:	77cb      	strb	r3, [r1, #31]
 80028fc:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 80028fe:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002900:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 8002902:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002904:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002906:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8002908:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800290a:	2a00      	cmp	r2, #0
 800290c:	d14c      	bne.n	80029a8 <HAL_RTC_SetDate+0xc8>
 800290e:	3210      	adds	r2, #16
 8002910:	4213      	tst	r3, r2
 8002912:	d002      	beq.n	800291a <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002914:	4393      	bics	r3, r2
 8002916:	330a      	adds	r3, #10
 8002918:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800291a:	f7ff ff51 	bl	80027c0 <RTC_ByteToBcd2>
 800291e:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002920:	7870      	ldrb	r0, [r6, #1]
 8002922:	f7ff ff4d 	bl	80027c0 <RTC_ByteToBcd2>
 8002926:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002928:	0028      	movs	r0, r5
 800292a:	f7ff ff49 	bl	80027c0 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800292e:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002930:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002932:	041d      	lsls	r5, r3, #16
 8002934:	9b02      	ldr	r3, [sp, #8]
 8002936:	4318      	orrs	r0, r3
 8002938:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800293a:	22ca      	movs	r2, #202	; 0xca
 800293c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800293e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
 8002942:	3a77      	subs	r2, #119	; 0x77
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002946:	f7ff fec3 	bl	80026d0 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800294a:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	1e05      	subs	r5, r0, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002956:	2304      	movs	r3, #4
 8002958:	9a01      	ldr	r2, [sp, #4]
 800295a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8002960:	2501      	movs	r5, #1
}
 8002962:	0028      	movs	r0, r5
 8002964:	b005      	add	sp, #20
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002968:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800296a:	4812      	ldr	r0, [pc, #72]	; (80029b4 <HAL_RTC_SetDate+0xd4>)
 800296c:	4006      	ands	r6, r0
 800296e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	438a      	bics	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	069b      	lsls	r3, r3, #26
 800297a:	d40c      	bmi.n	8002996 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800297c:	0020      	movs	r0, r4
 800297e:	f7ff fe8d 	bl	800269c <HAL_RTC_WaitForSynchro>
 8002982:	2800      	cmp	r0, #0
 8002984:	d007      	beq.n	8002996 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002986:	22ff      	movs	r2, #255	; 0xff
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800298c:	2304      	movs	r3, #4
 800298e:	9a01      	ldr	r2, [sp, #4]
 8002990:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002992:	77fd      	strb	r5, [r7, #31]
 8002994:	e7e4      	b.n	8002960 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800299c:	2301      	movs	r3, #1
 800299e:	9a01      	ldr	r2, [sp, #4]
 80029a0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80029a2:	2300      	movs	r3, #0
 80029a4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80029a6:	e7dc      	b.n	8002962 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029a8:	9a02      	ldr	r2, [sp, #8]
 80029aa:	0406      	lsls	r6, r0, #16
 80029ac:	4316      	orrs	r6, r2
 80029ae:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 80029b0:	021e      	lsls	r6, r3, #8
 80029b2:	e7c2      	b.n	800293a <HAL_RTC_SetDate+0x5a>
 80029b4:	00ffff3f 	.word	0x00ffff3f

080029b8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80029b8:	2302      	movs	r3, #2
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80029be:	1c41      	adds	r1, r0, #1
 80029c0:	7fce      	ldrb	r6, [r1, #31]
{
 80029c2:	0004      	movs	r4, r0
 80029c4:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80029c6:	0018      	movs	r0, r3
 80029c8:	2e01      	cmp	r6, #1
 80029ca:	d100      	bne.n	80029ce <HAL_RTC_SetAlarm_IT+0x16>
 80029cc:	e095      	b.n	8002afa <HAL_RTC_SetAlarm_IT+0x142>
 80029ce:	3801      	subs	r0, #1
 80029d0:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d2:	18e1      	adds	r1, r4, r3
 80029d4:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80029d6:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029d8:	6826      	ldr	r6, [r4, #0]
 80029da:	9101      	str	r1, [sp, #4]
 80029dc:	7828      	ldrb	r0, [r5, #0]
 80029de:	78af      	ldrb	r7, [r5, #2]
 80029e0:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d165      	bne.n	8002ab2 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029e6:	68b2      	ldr	r2, [r6, #8]
 80029e8:	0011      	movs	r1, r2
 80029ea:	4019      	ands	r1, r3
 80029ec:	421a      	tst	r2, r3
 80029ee:	d100      	bne.n	80029f2 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029f0:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029f2:	f7ff fee5 	bl	80027c0 <RTC_ByteToBcd2>
 80029f6:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029f8:	9801      	ldr	r0, [sp, #4]
 80029fa:	f7ff fee1 	bl	80027c0 <RTC_ByteToBcd2>
 80029fe:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002a00:	0038      	movs	r0, r7
 8002a02:	f7ff fedd 	bl	80027c0 <RTC_ByteToBcd2>
 8002a06:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a08:	1c6b      	adds	r3, r5, #1
 8002a0a:	7fd8      	ldrb	r0, [r3, #31]
 8002a0c:	f7ff fed8 	bl	80027c0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a10:	696a      	ldr	r2, [r5, #20]
 8002a12:	69eb      	ldr	r3, [r5, #28]
 8002a14:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a16:	78ea      	ldrb	r2, [r5, #3]
 8002a18:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	431f      	orrs	r7, r3
 8002a1e:	9b02      	ldr	r3, [sp, #8]
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a24:	9b01      	ldr	r3, [sp, #4]
 8002a26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a28:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a2a:	69aa      	ldr	r2, [r5, #24]
 8002a2c:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a2e:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a30:	4313      	orrs	r3, r2
 8002a32:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a34:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a38:	6273      	str	r3, [r6, #36]	; 0x24
 8002a3a:	3b77      	subs	r3, #119	; 0x77
 8002a3c:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a3e:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a40:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d15b      	bne.n	8002afe <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a46:	68b3      	ldr	r3, [r6, #8]
 8002a48:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a4a:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a50:	68f2      	ldr	r2, [r6, #12]
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RTC_SetAlarm_IT+0x19c>)
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002a5a:	f7fe fbf5 	bl	8001248 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a5e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8002a60:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a62:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	0011      	movs	r1, r2
 8002a6a:	4029      	ands	r1, r5
 8002a6c:	9103      	str	r1, [sp, #12]
 8002a6e:	422a      	tst	r2, r5
 8002a70:	d034      	beq.n	8002adc <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a72:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a74:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	0052      	lsls	r2, r2, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8002a90:	0292      	lsls	r2, r2, #10
 8002a92:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8002a94:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002a96:	4311      	orrs	r1, r2
 8002a98:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002aa6:	3afe      	subs	r2, #254	; 0xfe
 8002aa8:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8002aaa:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8002aac:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8002aae:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002ab0:	e023      	b.n	8002afa <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ab2:	68b2      	ldr	r2, [r6, #8]
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	4019      	ands	r1, r3
 8002ab8:	421a      	tst	r2, r3
 8002aba:	d100      	bne.n	8002abe <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002abc:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002abe:	69eb      	ldr	r3, [r5, #28]
 8002ac0:	696a      	ldr	r2, [r5, #20]
 8002ac2:	0400      	lsls	r0, r0, #16
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ac8:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002aca:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002acc:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ace:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ad0:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002ad2:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ad4:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ad6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002ad8:	7fd8      	ldrb	r0, [r3, #31]
 8002ada:	e7a6      	b.n	8002a2a <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002adc:	f7fe fbb4 	bl	8001248 <HAL_GetTick>
 8002ae0:	9b02      	ldr	r3, [sp, #8]
 8002ae2:	1ac0      	subs	r0, r0, r3
 8002ae4:	42b0      	cmp	r0, r6
 8002ae6:	d9bd      	bls.n	8002a64 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae8:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002af0:	1ca3      	adds	r3, r4, #2
 8002af2:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8002af4:	9b03      	ldr	r3, [sp, #12]
 8002af6:	3401      	adds	r4, #1
 8002af8:	77e3      	strb	r3, [r4, #31]
}
 8002afa:	b005      	add	sp, #20
 8002afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002afe:	68b3      	ldr	r3, [r6, #8]
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b02:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b04:	4013      	ands	r3, r2
 8002b06:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b08:	68f2      	ldr	r2, [r6, #12]
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002b12:	f7fe fb99 	bl	8001248 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b16:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8002b18:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b1a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	0011      	movs	r1, r2
 8002b22:	4029      	ands	r1, r5
 8002b24:	9103      	str	r1, [sp, #12]
 8002b26:	422a      	tst	r2, r5
 8002b28:	d00b      	beq.n	8002b42 <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b2a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b2c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b2e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	6899      	ldr	r1, [r3, #8]
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	0192      	lsls	r2, r2, #6
 8002b40:	e7a2      	b.n	8002a88 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b42:	f7fe fb81 	bl	8001248 <HAL_GetTick>
 8002b46:	9b02      	ldr	r3, [sp, #8]
 8002b48:	1ac0      	subs	r0, r0, r3
 8002b4a:	42b0      	cmp	r0, r6
 8002b4c:	d9e6      	bls.n	8002b1c <HAL_RTC_SetAlarm_IT+0x164>
 8002b4e:	e7cb      	b.n	8002ae8 <HAL_RTC_SetAlarm_IT+0x130>
 8002b50:	fffffeff 	.word	0xfffffeff
 8002b54:	fffffe7f 	.word	0xfffffe7f
 8002b58:	40010400 	.word	0x40010400
 8002b5c:	fffffdff 	.word	0xfffffdff
 8002b60:	fffffd7f 	.word	0xfffffd7f

08002b64 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002b64:	0902      	lsrs	r2, r0, #4
{
 8002b66:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002b68:	200a      	movs	r0, #10
 8002b6a:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	4013      	ands	r3, r2
 8002b70:	18c0      	adds	r0, r0, r3
 8002b72:	b2c0      	uxtb	r0, r0
}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_RTC_GetTime>:
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b7c:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b7e:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002b82:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b84:	690b      	ldr	r3, [r1, #16]
 8002b86:	045b      	lsls	r3, r3, #17
 8002b88:	0c5b      	lsrs	r3, r3, #17
 8002b8a:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RTC_GetTime+0x50>)
 8002b90:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b92:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002b94:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002b96:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002b98:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b9a:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002b9c:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002b9e:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002ba0:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002ba2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ba4:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002ba6:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bac:	f7ff ffda 	bl	8002b64 <RTC_Bcd2ToByte>
 8002bb0:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002bb2:	0030      	movs	r0, r6
 8002bb4:	f7ff ffd6 	bl	8002b64 <RTC_Bcd2ToByte>
 8002bb8:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002bba:	0028      	movs	r0, r5
 8002bbc:	f7ff ffd2 	bl	8002b64 <RTC_Bcd2ToByte>
 8002bc0:	70a0      	strb	r0, [r4, #2]
}
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	007f7f7f 	.word	0x007f7f7f

08002bcc <HAL_RTC_GetDate>:
{
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002bd0:	6803      	ldr	r3, [r0, #0]
 8002bd2:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RTC_GetDate+0x40>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002bd8:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002bda:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002bdc:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002bde:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002be0:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002be2:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002be4:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002be6:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002be8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002bea:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8002bec:	2a00      	cmp	r2, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002bf0:	f7ff ffb8 	bl	8002b64 <RTC_Bcd2ToByte>
 8002bf4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002bf6:	0028      	movs	r0, r5
 8002bf8:	f7ff ffb4 	bl	8002b64 <RTC_Bcd2ToByte>
 8002bfc:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002bfe:	0030      	movs	r0, r6
 8002c00:	f7ff ffb0 	bl	8002b64 <RTC_Bcd2ToByte>
 8002c04:	70a0      	strb	r0, [r4, #2]
}
 8002c06:	2000      	movs	r0, #0
 8002c08:	bd70      	pop	{r4, r5, r6, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	00ffff3f 	.word	0x00ffff3f

08002c10 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c10:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8002c12:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c14:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8002c16:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c18:	600a      	str	r2, [r1, #0]
}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c1c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8002c1e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c20:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8002c22:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002c24:	6808      	ldr	r0, [r1, #0]
}
 8002c26:	4770      	bx	lr

08002c28 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c28:	2202      	movs	r2, #2
{
 8002c2a:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8002c2c:	1c41      	adds	r1, r0, #1
 8002c2e:	7fcc      	ldrb	r4, [r1, #31]
{
 8002c30:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8002c32:	0010      	movs	r0, r2
 8002c34:	2c01      	cmp	r4, #1
 8002c36:	d010      	beq.n	8002c5a <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c38:	1898      	adds	r0, r3, r2
 8002c3a:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	32c8      	adds	r2, #200	; 0xc8
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
 8002c42:	3a77      	subs	r2, #119	; 0x77
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002c46:	689c      	ldr	r4, [r3, #8]
 8002c48:	3a33      	subs	r2, #51	; 0x33
 8002c4a:	4322      	orrs	r2, r4
 8002c4c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c56:	2000      	movs	r0, #0
 8002c58:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8002c5a:	bd10      	pop	{r4, pc}

08002c5c <HAL_RTCEx_AlarmBEventCallback>:
 8002c5c:	4770      	bx	lr
	...

08002c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c62:	001f      	movs	r7, r3
 8002c64:	b085      	sub	sp, #20
 8002c66:	000e      	movs	r6, r1
 8002c68:	9201      	str	r2, [sp, #4]
 8002c6a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c6c:	f7fe faec 	bl	8001248 <HAL_GetTick>
 8002c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c72:	19dd      	adds	r5, r3, r7
 8002c74:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002c76:	f7fe fae7 	bl	8001248 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 8002c7c:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	015b      	lsls	r3, r3, #5
 8002c82:	0d1b      	lsrs	r3, r3, #20
 8002c84:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c86:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002c88:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	6893      	ldr	r3, [r2, #8]
 8002c8c:	4033      	ands	r3, r6
 8002c8e:	1b9b      	subs	r3, r3, r6
 8002c90:	4259      	negs	r1, r3
 8002c92:	414b      	adcs	r3, r1
 8002c94:	9901      	ldr	r1, [sp, #4]
 8002c96:	428b      	cmp	r3, r1
 8002c98:	d101      	bne.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	e032      	b.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8002c9e:	1c7b      	adds	r3, r7, #1
 8002ca0:	d0f3      	beq.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ca2:	f7fe fad1 	bl	8001248 <HAL_GetTick>
 8002ca6:	9b00      	ldr	r3, [sp, #0]
 8002ca8:	1ac0      	subs	r0, r0, r3
 8002caa:	42a8      	cmp	r0, r5
 8002cac:	d32c      	bcc.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cae:	21e0      	movs	r1, #224	; 0xe0
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb8:	2282      	movs	r2, #130	; 0x82
 8002cba:	6861      	ldr	r1, [r4, #4]
 8002cbc:	0052      	lsls	r2, r2, #1
 8002cbe:	4291      	cmp	r1, r2
 8002cc0:	d10c      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x7c>
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	68a2      	ldr	r2, [r4, #8]
 8002cc6:	0209      	lsls	r1, r1, #8
 8002cc8:	428a      	cmp	r2, r1
 8002cca:	d003      	beq.n	8002cd4 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	00c9      	lsls	r1, r1, #3
 8002cd0:	428a      	cmp	r2, r1
 8002cd2:	d103      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8002cd4:	2140      	movs	r1, #64	; 0x40
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	438a      	bics	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ce0:	0189      	lsls	r1, r1, #6
 8002ce2:	428a      	cmp	r2, r1
 8002ce4:	d106      	bne.n	8002cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <SPI_WaitFlagStateUntilTimeout+0xbc>)
 8002cea:	4001      	ands	r1, r0
 8002cec:	6019      	str	r1, [r3, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002cf4:	0023      	movs	r3, r4
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	3351      	adds	r3, #81	; 0x51
 8002cfa:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8002cfc:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002cfe:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002d00:	3450      	adds	r4, #80	; 0x50
 8002d02:	7023      	strb	r3, [r4, #0]
}
 8002d04:	b005      	add	sp, #20
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8002d08:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8002d0a:	1e5a      	subs	r2, r3, #1
 8002d0c:	4193      	sbcs	r3, r2
 8002d0e:	425b      	negs	r3, r3
 8002d10:	401d      	ands	r5, r3
      count--;
 8002d12:	9b03      	ldr	r3, [sp, #12]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	e7b6      	b.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x26>
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	ffffdfff 	.word	0xffffdfff

08002d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <SPI_EndRxTxTransaction+0x60>)
{
 8002d24:	0004      	movs	r4, r0
 8002d26:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	4916      	ldr	r1, [pc, #88]	; (8002d84 <SPI_EndRxTxTransaction+0x64>)
{
 8002d2c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d2e:	f7fd fa11 	bl	8000154 <__udivsi3>
 8002d32:	23fa      	movs	r3, #250	; 0xfa
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4343      	muls	r3, r0
 8002d38:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3a:	2382      	movs	r3, #130	; 0x82
 8002d3c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d3e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4299      	cmp	r1, r3
 8002d44:	d10f      	bne.n	8002d66 <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d46:	002b      	movs	r3, r5
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0020      	movs	r0, r4
 8002d4e:	9600      	str	r6, [sp, #0]
 8002d50:	f7ff ff86 	bl	8002c60 <SPI_WaitFlagStateUntilTimeout>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d010      	beq.n	8002d7a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d58:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002d5a:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8002d62:	b004      	add	sp, #16
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8002d66:	9b03      	ldr	r3, [sp, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <SPI_EndRxTxTransaction+0x5a>
      count--;
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4213      	tst	r3, r2
 8002d78:	d1f5      	bne.n	8002d66 <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e7f1      	b.n	8002d62 <SPI_EndRxTxTransaction+0x42>
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	20000000 	.word	0x20000000
 8002d84:	016e3600 	.word	0x016e3600

08002d88 <HAL_SPI_MspInit>:
}
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_SPI_Init>:
{
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002d90:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002d92:	2c00      	cmp	r4, #0
 8002d94:	d05b      	beq.n	8002e4e <HAL_SPI_Init+0xc2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d159      	bne.n	8002e50 <HAL_SPI_Init+0xc4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9c:	2282      	movs	r2, #130	; 0x82
 8002d9e:	6861      	ldr	r1, [r4, #4]
 8002da0:	0052      	lsls	r2, r2, #1
 8002da2:	4291      	cmp	r1, r2
 8002da4:	d000      	beq.n	8002da8 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da6:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da8:	0025      	movs	r5, r4
 8002daa:	3551      	adds	r5, #81	; 0x51
 8002dac:	782b      	ldrb	r3, [r5, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8002db4:	0023      	movs	r3, r4
 8002db6:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8002db8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002dba:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8002dbc:	f7ff ffe4 	bl	8002d88 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002dc2:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002dc6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc8:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8002dca:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dcc:	6867      	ldr	r7, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8002dce:	4393      	bics	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd2:	2382      	movs	r3, #130	; 0x82
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	403b      	ands	r3, r7
 8002dd8:	2784      	movs	r7, #132	; 0x84
 8002dda:	68a6      	ldr	r6, [r4, #8]
 8002ddc:	023f      	lsls	r7, r7, #8
 8002dde:	4037      	ands	r7, r6
 8002de0:	433b      	orrs	r3, r7
 8002de2:	2780      	movs	r7, #128	; 0x80
 8002de4:	68e6      	ldr	r6, [r4, #12]
 8002de6:	013f      	lsls	r7, r7, #4
 8002de8:	4037      	ands	r7, r6
 8002dea:	433b      	orrs	r3, r7
 8002dec:	4667      	mov	r7, ip
 8002dee:	6926      	ldr	r6, [r4, #16]
 8002df0:	69a2      	ldr	r2, [r4, #24]
 8002df2:	4037      	ands	r7, r6
 8002df4:	2601      	movs	r6, #1
 8002df6:	433b      	orrs	r3, r7
 8002df8:	6967      	ldr	r7, [r4, #20]
 8002dfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002dfc:	403e      	ands	r6, r7
 8002dfe:	4333      	orrs	r3, r6
 8002e00:	2680      	movs	r6, #128	; 0x80
 8002e02:	00b6      	lsls	r6, r6, #2
 8002e04:	4016      	ands	r6, r2
 8002e06:	4333      	orrs	r3, r6
 8002e08:	2638      	movs	r6, #56	; 0x38
 8002e0a:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e0c:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e0e:	403e      	ands	r6, r7
 8002e10:	4333      	orrs	r3, r6
 8002e12:	2680      	movs	r6, #128	; 0x80
 8002e14:	6a27      	ldr	r7, [r4, #32]
 8002e16:	403e      	ands	r6, r7
 8002e18:	4333      	orrs	r3, r6
 8002e1a:	2680      	movs	r6, #128	; 0x80
 8002e1c:	0007      	movs	r7, r0
 8002e1e:	01b6      	lsls	r6, r6, #6
 8002e20:	4037      	ands	r7, r6
 8002e22:	433b      	orrs	r3, r7
 8002e24:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e26:	2304      	movs	r3, #4
 8002e28:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	403b      	ands	r3, r7
 8002e30:	431a      	orrs	r2, r3
 8002e32:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e34:	42b0      	cmp	r0, r6
 8002e36:	d102      	bne.n	8002e3e <HAL_SPI_Init+0xb2>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002e38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3e:	69cb      	ldr	r3, [r1, #28]
 8002e40:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e42:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e44:	4013      	ands	r3, r2
 8002e46:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002e48:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4c:	702b      	strb	r3, [r5, #0]
}
 8002e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e54:	6163      	str	r3, [r4, #20]
 8002e56:	e7a7      	b.n	8002da8 <HAL_SPI_Init+0x1c>
 8002e58:	fffff7ff 	.word	0xfffff7ff

08002e5c <HAL_SPI_TransmitReceive>:
{
 8002e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5e:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8002e60:	0003      	movs	r3, r0
{
 8002e62:	b087      	sub	sp, #28
 8002e64:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8002e66:	3350      	adds	r3, #80	; 0x50
 8002e68:	781a      	ldrb	r2, [r3, #0]
{
 8002e6a:	0004      	movs	r4, r0
 8002e6c:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 8002e6e:	2502      	movs	r5, #2
 8002e70:	2a01      	cmp	r2, #1
 8002e72:	d100      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x1a>
 8002e74:	e0a8      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x16c>
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002e7a:	f7fe f9e5 	bl	8001248 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002e7e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002e80:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8002e82:	3351      	adds	r3, #81	; 0x51
 8002e84:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e86:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002e88:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x4a>
 8002e8e:	2382      	movs	r3, #130	; 0x82
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4299      	cmp	r1, r3
 8002e94:	d000      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x3c>
 8002e96:	e090      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d000      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x44>
 8002e9e:	e08c      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
 8002ea0:	2a04      	cmp	r2, #4
 8002ea2:	d000      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x4a>
 8002ea4:	e089      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 8002ea6:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ea8:	2e00      	cmp	r6, #0
 8002eaa:	d100      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x52>
 8002eac:	e085      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
 8002eae:	9b03      	ldr	r3, [sp, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d100      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x5a>
 8002eb4:	e081      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
 8002eb6:	2f00      	cmp	r7, #0
 8002eb8:	d100      	bne.n	8002ebc <HAL_SPI_TransmitReceive+0x60>
 8002eba:	e07e      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ebc:	0023      	movs	r3, r4
 8002ebe:	3351      	adds	r3, #81	; 0x51
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	2a04      	cmp	r2, #4
 8002ec4:	d001      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eca:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ecc:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ece:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed2:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8002ed6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002ed8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eda:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8002edc:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 8002ede:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ee0:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ee2:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ee4:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee6:	0180      	lsls	r0, r0, #6
 8002ee8:	4282      	cmp	r2, r0
 8002eea:	d106      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	4d84      	ldr	r5, [pc, #528]	; (8003100 <HAL_SPI_TransmitReceive+0x2a4>)
 8002ef0:	4028      	ands	r0, r5
 8002ef2:	6018      	str	r0, [r3, #0]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	4302      	orrs	r2, r0
 8002ef8:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	4210      	tst	r0, r2
 8002f00:	d102      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	4302      	orrs	r2, r0
 8002f06:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	68e0      	ldr	r0, [r4, #12]
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	4290      	cmp	r0, r2
 8002f10:	d000      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0xb8>
 8002f12:	e072      	b.n	8002ffa <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_SPI_TransmitReceive+0xc0>
 8002f18:	2f01      	cmp	r7, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1c:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1e:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f20:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002f22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002f2c:	2680      	movs	r6, #128	; 0x80
        txallowed = 1U;
 8002f2e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f30:	2702      	movs	r7, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002f32:	01b6      	lsls	r6, r6, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x110>
 8002f3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d115      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f44:	019b      	lsls	r3, r3, #6
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d000      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0xf0>
 8002f4a:	e0b5      	b.n	80030b8 <HAL_SPI_TransmitReceive+0x25c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	9b02      	ldr	r3, [sp, #8]
 8002f50:	0011      	movs	r1, r2
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	0020      	movs	r0, r4
 8002f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f58:	f7ff fe82 	bl	8002c60 <SPI_WaitFlagStateUntilTimeout>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d100      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x106>
 8002f60:	e0a8      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x258>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f62:	2302      	movs	r3, #2
 8002f64:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f66:	4313      	orrs	r3, r2
 8002f68:	6563      	str	r3, [r4, #84]	; 0x54
 8002f6a:	e025      	b.n	8002fb8 <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	423a      	tst	r2, r7
 8002f72:	d005      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x124>
 8002f74:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x124>
 8002f7a:	2d01      	cmp	r5, #1
 8002f7c:	d027      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x172>
{
 8002f7e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f80:	6898      	ldr	r0, [r3, #8]
 8002f82:	2101      	movs	r1, #1
 8002f84:	0002      	movs	r2, r0
 8002f86:	400a      	ands	r2, r1
 8002f88:	4208      	tst	r0, r1
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x14a>
 8002f8c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002f8e:	2900      	cmp	r1, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 8002f92:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f98:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002f9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fa6:	f7fe f94f 	bl	8001248 <HAL_GetTick>
 8002faa:	9b02      	ldr	r3, [sp, #8]
 8002fac:	1ac0      	subs	r0, r0, r3
 8002fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fb0:	4298      	cmp	r0, r3
 8002fb2:	d3bf      	bcc.n	8002f34 <HAL_SPI_TransmitReceive+0xd8>
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	d0bd      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8002fb8:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002fba:	0023      	movs	r3, r4
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	3351      	adds	r3, #81	; 0x51
 8002fc0:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	3450      	adds	r4, #80	; 0x50
 8002fc6:	7023      	strb	r3, [r4, #0]
}
 8002fc8:	0028      	movs	r0, r5
 8002fca:	b007      	add	sp, #28
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fd0:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd2:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd4:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd6:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002fda:	3a01      	subs	r2, #1
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002fe0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002fe2:	b295      	uxth	r5, r2
 8002fe4:	2a00      	cmp	r2, #0
 8002fe6:	d1ca      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x122>
 8002fe8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fea:	42b2      	cmp	r2, r6
 8002fec:	d1c7      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	0152      	lsls	r2, r2, #5
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e7c2      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffa:	2900      	cmp	r1, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x1a6>
 8002ffe:	2f01      	cmp	r7, #1
 8003000:	d108      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003002:	7832      	ldrb	r2, [r6, #0]
 8003004:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003008:	3301      	adds	r3, #1
 800300a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800300c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800300e:	3b01      	subs	r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003014:	2680      	movs	r6, #128	; 0x80
        txallowed = 1U;
 8003016:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003018:	2702      	movs	r7, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800301a:	01b6      	lsls	r6, r6, #6
 800301c:	e027      	b.n	800306e <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	423a      	tst	r2, r7
 8003024:	d005      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x1d6>
 8003026:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003028:	2a00      	cmp	r2, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x1d6>
 800302c:	2d01      	cmp	r5, #1
 800302e:	d025      	beq.n	800307c <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 8003030:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	6898      	ldr	r0, [r3, #8]
 8003038:	0002      	movs	r2, r0
 800303a:	400a      	ands	r2, r1
 800303c:	4208      	tst	r0, r1
 800303e:	d00d      	beq.n	800305c <HAL_SPI_TransmitReceive+0x200>
 8003040:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003042:	2900      	cmp	r1, #0
 8003044:	d00a      	beq.n	800305c <HAL_SPI_TransmitReceive+0x200>
        txallowed = 1U;
 8003046:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800304c:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 800304e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003050:	3301      	adds	r3, #1
 8003052:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003054:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003056:	3b01      	subs	r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800305c:	f7fe f8f4 	bl	8001248 <HAL_GetTick>
 8003060:	9b02      	ldr	r3, [sp, #8]
 8003062:	1ac0      	subs	r0, r0, r3
 8003064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003066:	4298      	cmp	r0, r3
 8003068:	d320      	bcc.n	80030ac <HAL_SPI_TransmitReceive+0x250>
 800306a:	3301      	adds	r3, #1
 800306c:	d1a4      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1d4      	bne.n	800301e <HAL_SPI_TransmitReceive+0x1c2>
 8003074:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1d1      	bne.n	800301e <HAL_SPI_TransmitReceive+0x1c2>
 800307a:	e761      	b.n	8002f40 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800307c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800307e:	7812      	ldrb	r2, [r2, #0]
 8003080:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003082:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003084:	3301      	adds	r3, #1
 8003086:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003088:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800308a:	3b01      	subs	r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003090:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003092:	b29d      	uxth	r5, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1cb      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x1d4>
 8003098:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800309a:	42b3      	cmp	r3, r6
 800309c:	d1c8      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x1d4>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	015b      	lsls	r3, r3, #5
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	430b      	orrs	r3, r1
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e7c2      	b.n	8003032 <HAL_SPI_TransmitReceive+0x1d6>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1dd      	bne.n	800306e <HAL_SPI_TransmitReceive+0x212>
 80030b2:	e781      	b.n	8002fb8 <HAL_SPI_TransmitReceive+0x15c>
    READ_REG(hspi->Instance->DR);
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80030b8:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030ba:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80030bc:	6893      	ldr	r3, [r2, #8]
 80030be:	06db      	lsls	r3, r3, #27
 80030c0:	d506      	bpl.n	80030d0 <HAL_SPI_TransmitReceive+0x274>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80030c2:	2302      	movs	r3, #2
 80030c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80030c6:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_SPI_TransmitReceive+0x2a8>)
 80030ce:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d0:	0020      	movs	r0, r4
 80030d2:	9a02      	ldr	r2, [sp, #8]
 80030d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030d6:	f7ff fe23 	bl	8002d20 <SPI_EndRxTxTransaction>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0x28a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030de:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80030e0:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e2:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 80030e4:	e769      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030e6:	68a3      	ldr	r3, [r4, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d000      	beq.n	80030ee <HAL_SPI_TransmitReceive+0x292>
 80030ec:	e765      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	9205      	str	r2, [sp, #20]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	9305      	str	r3, [sp, #20]
 80030fa:	9b05      	ldr	r3, [sp, #20]
 80030fc:	e75d      	b.n	8002fba <HAL_SPI_TransmitReceive+0x15e>
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	ffffdfff 	.word	0xffffdfff
 8003104:	0000ffef 	.word	0x0000ffef

08003108 <HAL_SPI_GetState>:
  return hspi->State;
 8003108:	3051      	adds	r0, #81	; 0x51
 800310a:	7800      	ldrb	r0, [r0, #0]
 800310c:	b2c0      	uxtb	r0, r0
}
 800310e:	4770      	bx	lr

08003110 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	490b      	ldr	r1, [pc, #44]	; (8003140 <UART_EndRxTransfer+0x30>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	3123      	adds	r1, #35	; 0x23
 800311e:	31ff      	adds	r1, #255	; 0xff
 8003120:	438a      	bics	r2, r1
 8003122:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003126:	428a      	cmp	r2, r1
 8003128:	d103      	bne.n	8003132 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	310f      	adds	r1, #15
 800312e:	438a      	bics	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003132:	2320      	movs	r3, #32
 8003134:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	2300      	movs	r3, #0
 8003138:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800313a:	6643      	str	r3, [r0, #100]	; 0x64
}
 800313c:	4770      	bx	lr
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	fffffedf 	.word	0xfffffedf

08003144 <HAL_UART_DeInit>:
{
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003148:	2001      	movs	r0, #1
  if (huart == NULL)
 800314a:	2c00      	cmp	r4, #0
 800314c:	d014      	beq.n	8003178 <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 800314e:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8003150:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8003152:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4382      	bics	r2, r0
 800315a:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 800315c:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0U;
 800315e:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003160:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003162:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8003164:	f003 fbe4 	bl	8006930 <HAL_UART_MspDeInit>
  return HAL_OK;
 8003168:	0028      	movs	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	1d23      	adds	r3, r4, #4
 800316c:	67dd      	str	r5, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800316e:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8003170:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003172:	6625      	str	r5, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003174:	3474      	adds	r4, #116	; 0x74
 8003176:	7025      	strb	r5, [r4, #0]
}
 8003178:	bd70      	pop	{r4, r5, r6, pc}

0800317a <HAL_UART_RxCpltCallback>:
 800317a:	4770      	bx	lr

0800317c <HAL_UART_ErrorCallback>:
 800317c:	4770      	bx	lr

0800317e <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800317e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	0002      	movs	r2, r0
{
 8003184:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003186:	325a      	adds	r2, #90	; 0x5a
 8003188:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800318a:	3a08      	subs	r2, #8
 800318c:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800318e:	f7ff fff5 	bl	800317c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003192:	bd10      	pop	{r4, pc}

08003194 <HAL_UARTEx_RxEventCallback>:
}
 8003194:	4770      	bx	lr
	...

08003198 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003198:	6803      	ldr	r3, [r0, #0]
{
 800319a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800319c:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800319e:	4a85      	ldr	r2, [pc, #532]	; (80033b4 <HAL_UART_IRQHandler+0x21c>)
{
 80031a0:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a2:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a4:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80031a6:	4211      	tst	r1, r2
 80031a8:	d10b      	bne.n	80031c2 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031aa:	2220      	movs	r2, #32
 80031ac:	4211      	tst	r1, r2
 80031ae:	d100      	bne.n	80031b2 <HAL_UART_IRQHandler+0x1a>
 80031b0:	e076      	b.n	80032a0 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031b2:	4210      	tst	r0, r2
 80031b4:	d100      	bne.n	80031b8 <HAL_UART_IRQHandler+0x20>
 80031b6:	e073      	b.n	80032a0 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80031b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 80031ba:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d165      	bne.n	800328c <HAL_UART_IRQHandler+0xf4>
 80031c0:	e065      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031c2:	2201      	movs	r2, #1
 80031c4:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031c6:	4d7c      	ldr	r5, [pc, #496]	; (80033b8 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031c8:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031ca:	4005      	ands	r5, r0
 80031cc:	433d      	orrs	r5, r7
 80031ce:	d067      	beq.n	80032a0 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031d0:	1d25      	adds	r5, r4, #4
 80031d2:	4211      	tst	r1, r2
 80031d4:	d005      	beq.n	80031e2 <HAL_UART_IRQHandler+0x4a>
 80031d6:	05c6      	lsls	r6, r0, #23
 80031d8:	d503      	bpl.n	80031e2 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031da:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031dc:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80031de:	4332      	orrs	r2, r6
 80031e0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031e2:	2202      	movs	r2, #2
 80031e4:	4211      	tst	r1, r2
 80031e6:	d006      	beq.n	80031f6 <HAL_UART_IRQHandler+0x5e>
 80031e8:	2f00      	cmp	r7, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031ec:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ee:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80031f0:	1892      	adds	r2, r2, r2
 80031f2:	4332      	orrs	r2, r6
 80031f4:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f6:	2204      	movs	r2, #4
 80031f8:	4211      	tst	r1, r2
 80031fa:	d006      	beq.n	800320a <HAL_UART_IRQHandler+0x72>
 80031fc:	2f00      	cmp	r7, #0
 80031fe:	d004      	beq.n	800320a <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003200:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003202:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8003204:	3a02      	subs	r2, #2
 8003206:	4332      	orrs	r2, r6
 8003208:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800320a:	2208      	movs	r2, #8
 800320c:	4211      	tst	r1, r2
 800320e:	d007      	beq.n	8003220 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003210:	2620      	movs	r6, #32
 8003212:	4006      	ands	r6, r0
 8003214:	433e      	orrs	r6, r7
 8003216:	d003      	beq.n	8003220 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003218:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800321c:	4332      	orrs	r2, r6
 800321e:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	4211      	tst	r1, r2
 8003226:	d006      	beq.n	8003236 <HAL_UART_IRQHandler+0x9e>
 8003228:	0146      	lsls	r6, r0, #5
 800322a:	d504      	bpl.n	8003236 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800322c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800322e:	2320      	movs	r3, #32
 8003230:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8003232:	4313      	orrs	r3, r2
 8003234:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003236:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d028      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800323c:	2320      	movs	r3, #32
 800323e:	4219      	tst	r1, r3
 8003240:	d006      	beq.n	8003250 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003242:	4218      	tst	r0, r3
 8003244:	d004      	beq.n	8003250 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8003246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 800324c:	0020      	movs	r0, r4
 800324e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003250:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003252:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003254:	2740      	movs	r7, #64	; 0x40
 8003256:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003258:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800325a:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800325c:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800325e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003260:	431e      	orrs	r6, r3
 8003262:	d019      	beq.n	8003298 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8003264:	f7ff ff54 	bl	8003110 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	423a      	tst	r2, r7
 800326e:	d00f      	beq.n	8003290 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003270:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003272:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003274:	43ba      	bics	r2, r7
 8003276:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003278:	2800      	cmp	r0, #0
 800327a:	d009      	beq.n	8003290 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_UART_IRQHandler+0x224>)
 800327e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003280:	f7fe f9c6 	bl	8001610 <HAL_DMA_Abort_IT>
 8003284:	2800      	cmp	r0, #0
 8003286:	d002      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003288:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800328a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800328c:	4798      	blx	r3
}
 800328e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003290:	0020      	movs	r0, r4
 8003292:	f7ff ff73 	bl	800317c <HAL_UART_ErrorCallback>
 8003296:	e7fa      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8003298:	f7ff ff70 	bl	800317c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800329e:	e7f6      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80032a2:	2d01      	cmp	r5, #1
 80032a4:	d161      	bne.n	800336a <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80032a6:	2210      	movs	r2, #16
 80032a8:	4211      	tst	r1, r2
 80032aa:	d05e      	beq.n	800336a <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80032ac:	4210      	tst	r0, r2
 80032ae:	d05c      	beq.n	800336a <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032b0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b2:	6899      	ldr	r1, [r3, #8]
 80032b4:	2640      	movs	r6, #64	; 0x40
 80032b6:	000f      	movs	r7, r1
 80032b8:	4037      	ands	r7, r6
 80032ba:	4231      	tst	r1, r6
 80032bc:	d038      	beq.n	8003330 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032be:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80032c0:	680f      	ldr	r7, [r1, #0]
 80032c2:	9100      	str	r1, [sp, #0]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d0e0      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032cc:	2058      	movs	r0, #88	; 0x58
 80032ce:	4684      	mov	ip, r0
 80032d0:	44a4      	add	ip, r4
 80032d2:	4660      	mov	r0, ip
 80032d4:	8800      	ldrh	r0, [r0, #0]
 80032d6:	4288      	cmp	r0, r1
 80032d8:	d9d9      	bls.n	800328e <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 80032da:	205a      	movs	r0, #90	; 0x5a
 80032dc:	4684      	mov	ip, r0
 80032de:	44a4      	add	ip, r4
 80032e0:	4660      	mov	r0, ip
 80032e2:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032e4:	683f      	ldr	r7, [r7, #0]
 80032e6:	2120      	movs	r1, #32
 80032e8:	0038      	movs	r0, r7
 80032ea:	4008      	ands	r0, r1
 80032ec:	9001      	str	r0, [sp, #4]
 80032ee:	420f      	tst	r7, r1
 80032f0:	d112      	bne.n	8003318 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f2:	681f      	ldr	r7, [r3, #0]
 80032f4:	4832      	ldr	r0, [pc, #200]	; (80033c0 <HAL_UART_IRQHandler+0x228>)
 80032f6:	4007      	ands	r7, r0
 80032f8:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032fc:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fe:	43af      	bics	r7, r5
 8003300:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	689d      	ldr	r5, [r3, #8]
 8003304:	43b5      	bics	r5, r6
 8003306:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8003308:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330a:	9901      	ldr	r1, [sp, #4]
 800330c:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	4391      	bics	r1, r2
 8003312:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003314:	f7fe f95c 	bl	80015d0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003318:	0023      	movs	r3, r4
 800331a:	0022      	movs	r2, r4
 800331c:	335a      	adds	r3, #90	; 0x5a
 800331e:	3258      	adds	r2, #88	; 0x58
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	8811      	ldrh	r1, [r2, #0]
 8003324:	1ac9      	subs	r1, r1, r3
 8003326:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003328:	0020      	movs	r0, r4
 800332a:	f7ff ff33 	bl	8003194 <HAL_UARTEx_RxEventCallback>
 800332e:	e7ae      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003330:	0026      	movs	r6, r4
 8003332:	365a      	adds	r6, #90	; 0x5a
 8003334:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8003336:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003338:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800333a:	2900      	cmp	r1, #0
 800333c:	d0a7      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800333e:	0021      	movs	r1, r4
 8003340:	3158      	adds	r1, #88	; 0x58
 8003342:	8809      	ldrh	r1, [r1, #0]
 8003344:	1a09      	subs	r1, r1, r0
 8003346:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8003348:	2900      	cmp	r1, #0
 800334a:	d0a0      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	4e1d      	ldr	r6, [pc, #116]	; (80033c4 <HAL_UART_IRQHandler+0x22c>)
 8003350:	4030      	ands	r0, r6
 8003352:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003354:	6898      	ldr	r0, [r3, #8]
 8003356:	43a8      	bics	r0, r5
 8003358:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800335a:	2020      	movs	r0, #32
 800335c:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003360:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8003362:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003364:	4390      	bics	r0, r2
 8003366:	6018      	str	r0, [r3, #0]
 8003368:	e7de      	b.n	8003328 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	0352      	lsls	r2, r2, #13
 800336e:	4211      	tst	r1, r2
 8003370:	d006      	beq.n	8003380 <HAL_UART_IRQHandler+0x1e8>
 8003372:	0275      	lsls	r5, r6, #9
 8003374:	d504      	bpl.n	8003380 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8003376:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003378:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800337a:	f000 fbc7 	bl	8003b0c <HAL_UARTEx_WakeupCallback>
    return;
 800337e:	e786      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	4211      	tst	r1, r2
 8003384:	d003      	beq.n	800338e <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003386:	4210      	tst	r0, r2
 8003388:	d001      	beq.n	800338e <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800338a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800338c:	e715      	b.n	80031ba <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800338e:	2540      	movs	r5, #64	; 0x40
 8003390:	4229      	tst	r1, r5
 8003392:	d100      	bne.n	8003396 <HAL_UART_IRQHandler+0x1fe>
 8003394:	e77b      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
 8003396:	4228      	tst	r0, r5
 8003398:	d100      	bne.n	800339c <HAL_UART_IRQHandler+0x204>
 800339a:	e778      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800339c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800339e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033a0:	43aa      	bics	r2, r5
 80033a2:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033a4:	2320      	movs	r3, #32
 80033a6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80033ac:	f7fd fc22 	bl	8000bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b0:	e76d      	b.n	800328e <HAL_UART_IRQHandler+0xf6>
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	0000080f 	.word	0x0000080f
 80033b8:	04000120 	.word	0x04000120
 80033bc:	0800317f 	.word	0x0800317f
 80033c0:	fffffeff 	.word	0xfffffeff
 80033c4:	fffffedf 	.word	0xfffffedf

080033c8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033c8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80033ca:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033cc:	6803      	ldr	r3, [r0, #0]
{
 80033ce:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d0:	2a22      	cmp	r2, #34	; 0x22
 80033d2:	d134      	bne.n	800343e <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 80033d4:	0002      	movs	r2, r0
 80033d6:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033da:	8812      	ldrh	r2, [r2, #0]
 80033dc:	4013      	ands	r3, r2
 80033de:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80033e0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80033e2:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 80033e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80033e6:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80033e8:	3301      	adds	r3, #1
 80033ea:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80033ec:	8813      	ldrh	r3, [r2, #0]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80033f4:	8813      	ldrh	r3, [r2, #0]
 80033f6:	b299      	uxth	r1, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11b      	bne.n	8003434 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	4812      	ldr	r0, [pc, #72]	; (8003448 <UART_RxISR_8BIT+0x80>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4002      	ands	r2, r0
 8003404:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	3023      	adds	r0, #35	; 0x23
 800340a:	30ff      	adds	r0, #255	; 0xff
 800340c:	4382      	bics	r2, r0
 800340e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003410:	2220      	movs	r2, #32
 8003412:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003414:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8003416:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	4282      	cmp	r2, r0
 800341a:	d10c      	bne.n	8003436 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	2110      	movs	r1, #16
 800341e:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003420:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003422:	438a      	bics	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003426:	0023      	movs	r3, r4
 8003428:	3358      	adds	r3, #88	; 0x58
 800342a:	8819      	ldrh	r1, [r3, #0]
 800342c:	f7ff feb2 	bl	8003194 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	2300      	movs	r3, #0
 8003432:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003434:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8003436:	0020      	movs	r0, r4
 8003438:	f7ff fe9f 	bl	800317a <HAL_UART_RxCpltCallback>
 800343c:	e7f8      	b.n	8003430 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800343e:	2208      	movs	r2, #8
 8003440:	6999      	ldr	r1, [r3, #24]
 8003442:	430a      	orrs	r2, r1
 8003444:	619a      	str	r2, [r3, #24]
}
 8003446:	e7f5      	b.n	8003434 <UART_RxISR_8BIT+0x6c>
 8003448:	fffffedf 	.word	0xfffffedf

0800344c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800344c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800344e:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003450:	6803      	ldr	r3, [r0, #0]
{
 8003452:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003454:	2a22      	cmp	r2, #34	; 0x22
 8003456:	d131      	bne.n	80034bc <UART_RxISR_16BIT+0x70>
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003458:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 800345a:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800345c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800345e:	8800      	ldrh	r0, [r0, #0]
 8003460:	4001      	ands	r1, r0
 8003462:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8003464:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8003466:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8003468:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 800346a:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 800346c:	880a      	ldrh	r2, [r1, #0]
 800346e:	3a01      	subs	r2, #1
 8003470:	b292      	uxth	r2, r2
 8003472:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8003474:	880a      	ldrh	r2, [r1, #0]
 8003476:	b291      	uxth	r1, r2
 8003478:	2a00      	cmp	r2, #0
 800347a:	d11a      	bne.n	80034b2 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4812      	ldr	r0, [pc, #72]	; (80034c8 <UART_RxISR_16BIT+0x7c>)
 8003480:	4002      	ands	r2, r0
 8003482:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	3023      	adds	r0, #35	; 0x23
 8003488:	30ff      	adds	r0, #255	; 0xff
 800348a:	4382      	bics	r2, r0
 800348c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800348e:	2220      	movs	r2, #32
 8003490:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003492:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8003494:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003496:	4282      	cmp	r2, r0
 8003498:	d10c      	bne.n	80034b4 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349a:	2110      	movs	r1, #16
 800349c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349e:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	438a      	bics	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a4:	0023      	movs	r3, r4
 80034a6:	3358      	adds	r3, #88	; 0x58
 80034a8:	8819      	ldrh	r1, [r3, #0]
 80034aa:	f7ff fe73 	bl	8003194 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	2300      	movs	r3, #0
 80034b0:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034b2:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80034b4:	0020      	movs	r0, r4
 80034b6:	f7ff fe60 	bl	800317a <HAL_UART_RxCpltCallback>
 80034ba:	e7f8      	b.n	80034ae <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034bc:	2208      	movs	r2, #8
 80034be:	6999      	ldr	r1, [r3, #24]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	619a      	str	r2, [r3, #24]
}
 80034c4:	e7f5      	b.n	80034b2 <UART_RxISR_16BIT+0x66>
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	fffffedf 	.word	0xfffffedf

080034cc <UART_SetConfig>:
{
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d0:	6925      	ldr	r5, [r4, #16]
 80034d2:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d6:	4329      	orrs	r1, r5
 80034d8:	6965      	ldr	r5, [r4, #20]
 80034da:	69c3      	ldr	r3, [r0, #28]
 80034dc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034de:	6810      	ldr	r0, [r2, #0]
 80034e0:	4d79      	ldr	r5, [pc, #484]	; (80036c8 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	4028      	ands	r0, r5
 80034e6:	4301      	orrs	r1, r0
 80034e8:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ea:	6851      	ldr	r1, [r2, #4]
 80034ec:	4877      	ldr	r0, [pc, #476]	; (80036cc <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034ee:	4d78      	ldr	r5, [pc, #480]	; (80036d0 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f0:	4001      	ands	r1, r0
 80034f2:	68e0      	ldr	r0, [r4, #12]
 80034f4:	4301      	orrs	r1, r0
 80034f6:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034fa:	42aa      	cmp	r2, r5
 80034fc:	d001      	beq.n	8003502 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80034fe:	6a21      	ldr	r1, [r4, #32]
 8003500:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003502:	6891      	ldr	r1, [r2, #8]
 8003504:	4e73      	ldr	r6, [pc, #460]	; (80036d4 <UART_SetConfig+0x208>)
 8003506:	4031      	ands	r1, r6
 8003508:	4301      	orrs	r1, r0
 800350a:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350c:	4972      	ldr	r1, [pc, #456]	; (80036d8 <UART_SetConfig+0x20c>)
 800350e:	428a      	cmp	r2, r1
 8003510:	d10f      	bne.n	8003532 <UART_SetConfig+0x66>
 8003512:	2103      	movs	r1, #3
 8003514:	4a71      	ldr	r2, [pc, #452]	; (80036dc <UART_SetConfig+0x210>)
 8003516:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003518:	400a      	ands	r2, r1
 800351a:	3a01      	subs	r2, #1
 800351c:	4970      	ldr	r1, [pc, #448]	; (80036e0 <UART_SetConfig+0x214>)
 800351e:	2a02      	cmp	r2, #2
 8003520:	d910      	bls.n	8003544 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0212      	lsls	r2, r2, #8
 8003526:	4293      	cmp	r3, r2
 8003528:	d000      	beq.n	800352c <UART_SetConfig+0x60>
 800352a:	e0a3      	b.n	8003674 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7fe ff36 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003530:	e0c5      	b.n	80036be <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003532:	496c      	ldr	r1, [pc, #432]	; (80036e4 <UART_SetConfig+0x218>)
 8003534:	428a      	cmp	r2, r1
 8003536:	d118      	bne.n	800356a <UART_SetConfig+0x9e>
 8003538:	200c      	movs	r0, #12
 800353a:	4a68      	ldr	r2, [pc, #416]	; (80036dc <UART_SetConfig+0x210>)
 800353c:	4968      	ldr	r1, [pc, #416]	; (80036e0 <UART_SetConfig+0x214>)
 800353e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003540:	3103      	adds	r1, #3
 8003542:	4002      	ands	r2, r0
 8003544:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	0212      	lsls	r2, r2, #8
 800354a:	4293      	cmp	r3, r2
 800354c:	d000      	beq.n	8003550 <UART_SetConfig+0x84>
 800354e:	e083      	b.n	8003658 <UART_SetConfig+0x18c>
    switch (clocksource)
 8003550:	2808      	cmp	r0, #8
 8003552:	d824      	bhi.n	800359e <UART_SetConfig+0xd2>
 8003554:	f7fc fdf4 	bl	8000140 <__gnu_thumb1_case_shi>
 8003558:	ffea00b1 	.word	0xffea00b1
 800355c:	0023005c 	.word	0x0023005c
 8003560:	0023007d 	.word	0x0023007d
 8003564:	00230023 	.word	0x00230023
 8003568:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 800356a:	495f      	ldr	r1, [pc, #380]	; (80036e8 <UART_SetConfig+0x21c>)
 800356c:	428a      	cmp	r2, r1
 800356e:	d100      	bne.n	8003572 <UART_SetConfig+0xa6>
 8003570:	e09f      	b.n	80036b2 <UART_SetConfig+0x1e6>
 8003572:	495e      	ldr	r1, [pc, #376]	; (80036ec <UART_SetConfig+0x220>)
 8003574:	428a      	cmp	r2, r1
 8003576:	d100      	bne.n	800357a <UART_SetConfig+0xae>
 8003578:	e09b      	b.n	80036b2 <UART_SetConfig+0x1e6>
 800357a:	42aa      	cmp	r2, r5
 800357c:	d10f      	bne.n	800359e <UART_SetConfig+0xd2>
 800357e:	21c0      	movs	r1, #192	; 0xc0
 8003580:	2080      	movs	r0, #128	; 0x80
 8003582:	4a56      	ldr	r2, [pc, #344]	; (80036dc <UART_SetConfig+0x210>)
 8003584:	0109      	lsls	r1, r1, #4
 8003586:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003588:	0100      	lsls	r0, r0, #4
 800358a:	400b      	ands	r3, r1
 800358c:	4283      	cmp	r3, r0
 800358e:	d016      	beq.n	80035be <UART_SetConfig+0xf2>
 8003590:	d807      	bhi.n	80035a2 <UART_SetConfig+0xd6>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_SetConfig+0xe0>
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	00d2      	lsls	r2, r2, #3
 800359a:	4293      	cmp	r3, r2
 800359c:	d035      	beq.n	800360a <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359e:	2001      	movs	r0, #1
 80035a0:	e009      	b.n	80035b6 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a2:	428b      	cmp	r3, r1
 80035a4:	d1fb      	bne.n	800359e <UART_SetConfig+0xd2>
 80035a6:	2080      	movs	r0, #128	; 0x80
 80035a8:	0200      	lsls	r0, r0, #8
 80035aa:	e012      	b.n	80035d2 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7fe fee6 	bl	800237c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d10e      	bne.n	80035d2 <UART_SetConfig+0x106>
 80035b4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80035ba:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80035bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035be:	2310      	movs	r3, #16
 80035c0:	6810      	ldr	r0, [r2, #0]
 80035c2:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035c4:	4243      	negs	r3, r0
 80035c6:	4158      	adcs	r0, r3
 80035c8:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <UART_SetConfig+0x224>)
 80035ca:	4240      	negs	r0, r0
 80035cc:	4018      	ands	r0, r3
 80035ce:	4b49      	ldr	r3, [pc, #292]	; (80036f4 <UART_SetConfig+0x228>)
 80035d0:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035d2:	2203      	movs	r2, #3
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	435a      	muls	r2, r3
 80035d8:	4290      	cmp	r0, r2
 80035da:	d3e0      	bcc.n	800359e <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035dc:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035de:	4290      	cmp	r0, r2
 80035e0:	d8dd      	bhi.n	800359e <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035e2:	2700      	movs	r7, #0
 80035e4:	0e02      	lsrs	r2, r0, #24
 80035e6:	0201      	lsls	r1, r0, #8
 80035e8:	085e      	lsrs	r6, r3, #1
 80035ea:	1989      	adds	r1, r1, r6
 80035ec:	417a      	adcs	r2, r7
 80035ee:	0008      	movs	r0, r1
 80035f0:	0011      	movs	r1, r2
 80035f2:	001a      	movs	r2, r3
 80035f4:	003b      	movs	r3, r7
 80035f6:	f7fc ff23 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035fa:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <UART_SetConfig+0x22c>)
 80035fc:	18c2      	adds	r2, r0, r3
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003600:	429a      	cmp	r2, r3
 8003602:	d8cc      	bhi.n	800359e <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	60d8      	str	r0, [r3, #12]
 8003608:	e7d4      	b.n	80035b4 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7fe fb17 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
        break;
 800360e:	e7cf      	b.n	80035b0 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003610:	4b32      	ldr	r3, [pc, #200]	; (80036dc <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003612:	4a38      	ldr	r2, [pc, #224]	; (80036f4 <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	2310      	movs	r3, #16
 8003618:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800361a:	4243      	negs	r3, r0
 800361c:	4158      	adcs	r0, r3
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <UART_SetConfig+0x224>)
 8003620:	4240      	negs	r0, r0
 8003622:	4003      	ands	r3, r0
 8003624:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003626:	0058      	lsls	r0, r3, #1
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	6861      	ldr	r1, [r4, #4]
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	18c0      	adds	r0, r0, r3
 8003630:	f7fc fd90 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003634:	4932      	ldr	r1, [pc, #200]	; (8003700 <UART_SetConfig+0x234>)
 8003636:	b282      	uxth	r2, r0
 8003638:	3a10      	subs	r2, #16
 800363a:	0403      	lsls	r3, r0, #16
 800363c:	428a      	cmp	r2, r1
 800363e:	d8ae      	bhi.n	800359e <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003640:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003642:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003644:	4390      	bics	r0, r2
 8003646:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003648:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800364a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800364c:	4318      	orrs	r0, r3
 800364e:	60d0      	str	r0, [r2, #12]
 8003650:	e7b0      	b.n	80035b4 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003652:	f7fe faf3 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8003656:	e032      	b.n	80036be <UART_SetConfig+0x1f2>
    switch (clocksource)
 8003658:	2808      	cmp	r0, #8
 800365a:	d8a0      	bhi.n	800359e <UART_SetConfig+0xd2>
 800365c:	f7fc fd5c 	bl	8000118 <__gnu_thumb1_case_sqi>
 8003660:	9f0d0a05 	.word	0x9f0d0a05
 8003664:	9f9f9f23 	.word	0x9f9f9f23
 8003668:	26          	.byte	0x26
 8003669:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7fe fe87 	bl	800237c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800366e:	2800      	cmp	r0, #0
 8003670:	d0a0      	beq.n	80035b4 <UART_SetConfig+0xe8>
 8003672:	e00d      	b.n	8003690 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003674:	f7fe fe92 	bl	800239c <HAL_RCC_GetPCLK2Freq>
        break;
 8003678:	e7f9      	b.n	800366e <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <UART_SetConfig+0x210>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	2310      	movs	r3, #16
 8003680:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003682:	4243      	negs	r3, r0
 8003684:	4158      	adcs	r0, r3
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <UART_SetConfig+0x224>)
 8003688:	4240      	negs	r0, r0
 800368a:	4018      	ands	r0, r3
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <UART_SetConfig+0x228>)
 800368e:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	6861      	ldr	r1, [r4, #4]
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	1818      	adds	r0, r3, r0
 8003698:	f7fc fd5c 	bl	8000154 <__udivsi3>
 800369c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800369e:	0002      	movs	r2, r0
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <UART_SetConfig+0x234>)
 80036a2:	3a10      	subs	r2, #16
 80036a4:	e7ac      	b.n	8003600 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7fe fac9 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
        break;
 80036aa:	e7e0      	b.n	800366e <UART_SetConfig+0x1a2>
    switch (clocksource)
 80036ac:	2080      	movs	r0, #128	; 0x80
 80036ae:	0200      	lsls	r0, r0, #8
 80036b0:	e7ee      	b.n	8003690 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0212      	lsls	r2, r2, #8
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d1d7      	bne.n	800366a <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ba:	f7fe fe5f 	bl	800237c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80036be:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80036c0:	d100      	bne.n	80036c4 <UART_SetConfig+0x1f8>
 80036c2:	e777      	b.n	80035b4 <UART_SetConfig+0xe8>
 80036c4:	e7af      	b.n	8003626 <UART_SetConfig+0x15a>
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	efff69f3 	.word	0xefff69f3
 80036cc:	ffffcfff 	.word	0xffffcfff
 80036d0:	40004800 	.word	0x40004800
 80036d4:	fffff4ff 	.word	0xfffff4ff
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40021000 	.word	0x40021000
 80036e0:	080083cd 	.word	0x080083cd
 80036e4:	40004400 	.word	0x40004400
 80036e8:	40004c00 	.word	0x40004c00
 80036ec:	40005000 	.word	0x40005000
 80036f0:	00b71b00 	.word	0x00b71b00
 80036f4:	003d0900 	.word	0x003d0900
 80036f8:	fffffd00 	.word	0xfffffd00
 80036fc:	000ffcff 	.word	0x000ffcff
 8003700:	0000ffef 	.word	0x0000ffef

08003704 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003704:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003706:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003708:	07da      	lsls	r2, r3, #31
 800370a:	d506      	bpl.n	800371a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800370c:	6801      	ldr	r1, [r0, #0]
 800370e:	4c28      	ldr	r4, [pc, #160]	; (80037b0 <UART_AdvFeatureConfig+0xac>)
 8003710:	684a      	ldr	r2, [r1, #4]
 8003712:	4022      	ands	r2, r4
 8003714:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003716:	4322      	orrs	r2, r4
 8003718:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371a:	079a      	lsls	r2, r3, #30
 800371c:	d506      	bpl.n	800372c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800371e:	6801      	ldr	r1, [r0, #0]
 8003720:	4c24      	ldr	r4, [pc, #144]	; (80037b4 <UART_AdvFeatureConfig+0xb0>)
 8003722:	684a      	ldr	r2, [r1, #4]
 8003724:	4022      	ands	r2, r4
 8003726:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003728:	4322      	orrs	r2, r4
 800372a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800372c:	075a      	lsls	r2, r3, #29
 800372e:	d506      	bpl.n	800373e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003730:	6801      	ldr	r1, [r0, #0]
 8003732:	4c21      	ldr	r4, [pc, #132]	; (80037b8 <UART_AdvFeatureConfig+0xb4>)
 8003734:	684a      	ldr	r2, [r1, #4]
 8003736:	4022      	ands	r2, r4
 8003738:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800373a:	4322      	orrs	r2, r4
 800373c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373e:	071a      	lsls	r2, r3, #28
 8003740:	d506      	bpl.n	8003750 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003742:	6801      	ldr	r1, [r0, #0]
 8003744:	4c1d      	ldr	r4, [pc, #116]	; (80037bc <UART_AdvFeatureConfig+0xb8>)
 8003746:	684a      	ldr	r2, [r1, #4]
 8003748:	4022      	ands	r2, r4
 800374a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800374c:	4322      	orrs	r2, r4
 800374e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003750:	06da      	lsls	r2, r3, #27
 8003752:	d506      	bpl.n	8003762 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003754:	6801      	ldr	r1, [r0, #0]
 8003756:	4c1a      	ldr	r4, [pc, #104]	; (80037c0 <UART_AdvFeatureConfig+0xbc>)
 8003758:	688a      	ldr	r2, [r1, #8]
 800375a:	4022      	ands	r2, r4
 800375c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800375e:	4322      	orrs	r2, r4
 8003760:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	069a      	lsls	r2, r3, #26
 8003764:	d506      	bpl.n	8003774 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003766:	6801      	ldr	r1, [r0, #0]
 8003768:	4c16      	ldr	r4, [pc, #88]	; (80037c4 <UART_AdvFeatureConfig+0xc0>)
 800376a:	688a      	ldr	r2, [r1, #8]
 800376c:	4022      	ands	r2, r4
 800376e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003770:	4322      	orrs	r2, r4
 8003772:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003774:	065a      	lsls	r2, r3, #25
 8003776:	d510      	bpl.n	800379a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003778:	6801      	ldr	r1, [r0, #0]
 800377a:	4d13      	ldr	r5, [pc, #76]	; (80037c8 <UART_AdvFeatureConfig+0xc4>)
 800377c:	684a      	ldr	r2, [r1, #4]
 800377e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003780:	402a      	ands	r2, r5
 8003782:	4322      	orrs	r2, r4
 8003784:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	0352      	lsls	r2, r2, #13
 800378a:	4294      	cmp	r4, r2
 800378c:	d105      	bne.n	800379a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800378e:	684a      	ldr	r2, [r1, #4]
 8003790:	4c0e      	ldr	r4, [pc, #56]	; (80037cc <UART_AdvFeatureConfig+0xc8>)
 8003792:	4022      	ands	r2, r4
 8003794:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003796:	4322      	orrs	r2, r4
 8003798:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	d506      	bpl.n	80037ac <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800379e:	6802      	ldr	r2, [r0, #0]
 80037a0:	490b      	ldr	r1, [pc, #44]	; (80037d0 <UART_AdvFeatureConfig+0xcc>)
 80037a2:	6853      	ldr	r3, [r2, #4]
 80037a4:	400b      	ands	r3, r1
 80037a6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6053      	str	r3, [r2, #4]
}
 80037ac:	bd30      	pop	{r4, r5, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	fffdffff 	.word	0xfffdffff
 80037b4:	fffeffff 	.word	0xfffeffff
 80037b8:	fffbffff 	.word	0xfffbffff
 80037bc:	ffff7fff 	.word	0xffff7fff
 80037c0:	ffffefff 	.word	0xffffefff
 80037c4:	ffffdfff 	.word	0xffffdfff
 80037c8:	ffefffff 	.word	0xffefffff
 80037cc:	ff9fffff 	.word	0xff9fffff
 80037d0:	fff7ffff 	.word	0xfff7ffff

080037d4 <UART_WaitOnFlagUntilTimeout>:
{
 80037d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d6:	2780      	movs	r7, #128	; 0x80
{
 80037d8:	0004      	movs	r4, r0
 80037da:	000d      	movs	r5, r1
 80037dc:	0016      	movs	r6, r2
 80037de:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	69d3      	ldr	r3, [r2, #28]
 80037e6:	402b      	ands	r3, r5
 80037e8:	1b5b      	subs	r3, r3, r5
 80037ea:	4259      	negs	r1, r3
 80037ec:	414b      	adcs	r3, r1
 80037ee:	42b3      	cmp	r3, r6
 80037f0:	d001      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80037f2:	2000      	movs	r0, #0
 80037f4:	e01c      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	9b08      	ldr	r3, [sp, #32]
 80037f8:	3301      	adds	r3, #1
 80037fa:	d0f3      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fd fd24 	bl	8001248 <HAL_GetTick>
 8003800:	9b01      	ldr	r3, [sp, #4]
 8003802:	9a08      	ldr	r2, [sp, #32]
 8003804:	1ac0      	subs	r0, r0, r3
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	4290      	cmp	r0, r2
 800380a:	d801      	bhi.n	8003810 <UART_WaitOnFlagUntilTimeout+0x3c>
 800380c:	2a00      	cmp	r2, #0
 800380e:	d110      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4913      	ldr	r1, [pc, #76]	; (8003860 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8003814:	400a      	ands	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	31a3      	adds	r1, #163	; 0xa3
 800381c:	31ff      	adds	r1, #255	; 0xff
 800381e:	438a      	bics	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003822:	2320      	movs	r3, #32
 8003824:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003826:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003828:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800382a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800382c:	3474      	adds	r4, #116	; 0x74
 800382e:	7023      	strb	r3, [r4, #0]
}
 8003830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003832:	2104      	movs	r1, #4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	420a      	tst	r2, r1
 8003838:	d0d3      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	423a      	tst	r2, r7
 800383e:	d0d0      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003840:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4906      	ldr	r1, [pc, #24]	; (8003860 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8003846:	400a      	ands	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	31a3      	adds	r1, #163	; 0xa3
 800384e:	31ff      	adds	r1, #255	; 0xff
 8003850:	438a      	bics	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003854:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003856:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8003858:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800385a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800385c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800385e:	e7e3      	b.n	8003828 <UART_WaitOnFlagUntilTimeout+0x54>
 8003860:	fffffe5f 	.word	0xfffffe5f

08003864 <HAL_UART_Transmit>:
{
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	b087      	sub	sp, #28
 8003868:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800386c:	0004      	movs	r4, r0
 800386e:	000d      	movs	r5, r1
 8003870:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003872:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003874:	2b20      	cmp	r3, #32
 8003876:	d151      	bne.n	800391c <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8003878:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800387a:	2900      	cmp	r1, #0
 800387c:	d04e      	beq.n	800391c <HAL_UART_Transmit+0xb8>
 800387e:	2a00      	cmp	r2, #0
 8003880:	d04c      	beq.n	800391c <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	68a2      	ldr	r2, [r4, #8]
 8003886:	015b      	lsls	r3, r3, #5
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <HAL_UART_Transmit+0x32>
 800388c:	6923      	ldr	r3, [r4, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003892:	4201      	tst	r1, r0
 8003894:	d142      	bne.n	800391c <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 8003896:	0023      	movs	r3, r4
 8003898:	3374      	adds	r3, #116	; 0x74
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800389e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d03b      	beq.n	800391c <HAL_UART_Transmit+0xb8>
 80038a4:	2301      	movs	r3, #1
 80038a6:	9a03      	ldr	r2, [sp, #12]
 80038a8:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	2200      	movs	r2, #0
 80038ac:	1d23      	adds	r3, r4, #4
 80038ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b0:	2321      	movs	r3, #33	; 0x21
 80038b2:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80038b4:	f7fd fcc8 	bl	8001248 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80038b8:	0023      	movs	r3, r4
 80038ba:	3350      	adds	r3, #80	; 0x50
 80038bc:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80038be:	3302      	adds	r3, #2
 80038c0:	801e      	strh	r6, [r3, #0]
 80038c2:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80038c8:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80038ca:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038cc:	015b      	lsls	r3, r3, #5
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d104      	bne.n	80038dc <HAL_UART_Transmit+0x78>
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	42b3      	cmp	r3, r6
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Transmit+0x78>
 80038d8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80038da:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80038dc:	2300      	movs	r3, #0
 80038de:	9a03      	ldr	r2, [sp, #12]
 80038e0:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80038e2:	0023      	movs	r3, r4
 80038e4:	3352      	adds	r3, #82	; 0x52
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	9b05      	ldr	r3, [sp, #20]
 80038f0:	2140      	movs	r1, #64	; 0x40
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	0020      	movs	r0, r4
 80038f6:	003b      	movs	r3, r7
 80038f8:	f7ff ff6c 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d10c      	bne.n	800391a <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003900:	2320      	movs	r3, #32
 8003902:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003904:	e00a      	b.n	800391c <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	9b05      	ldr	r3, [sp, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	003b      	movs	r3, r7
 8003910:	0020      	movs	r0, r4
 8003912:	f7ff ff5f 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003916:	2800      	cmp	r0, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 800391a:	2003      	movs	r0, #3
}
 800391c:	b007      	add	sp, #28
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003920:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003922:	2d00      	cmp	r5, #0
 8003924:	d10b      	bne.n	800393e <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003926:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003928:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	0ddb      	lsrs	r3, r3, #23
 800392e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003930:	9b04      	ldr	r3, [sp, #16]
 8003932:	9a04      	ldr	r2, [sp, #16]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	3b01      	subs	r3, #1
 8003938:	b29b      	uxth	r3, r3
 800393a:	8013      	strh	r3, [r2, #0]
 800393c:	e7d1      	b.n	80038e2 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800393e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003940:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003942:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003944:	e7f4      	b.n	8003930 <HAL_UART_Transmit+0xcc>
	...

08003948 <UART_CheckIdleState>:
{
 8003948:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394a:	2600      	movs	r6, #0
{
 800394c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394e:	1d03      	adds	r3, r0, #4
 8003950:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003952:	f7fd fc79 	bl	8001248 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003956:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003958:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	d416      	bmi.n	800398e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	075b      	lsls	r3, r3, #29
 8003966:	d50a      	bpl.n	800397e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <UART_CheckIdleState+0x60>)
 800396c:	2200      	movs	r2, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	0020      	movs	r0, r4
 8003972:	002b      	movs	r3, r5
 8003974:	03c9      	lsls	r1, r1, #15
 8003976:	f7ff ff2d 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 800397a:	2800      	cmp	r0, #0
 800397c:	d112      	bne.n	80039a4 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800397e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003980:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003982:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003986:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003988:	3474      	adds	r4, #116	; 0x74
 800398a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800398c:	e00b      	b.n	80039a6 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <UART_CheckIdleState+0x60>)
 8003992:	0032      	movs	r2, r6
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	0389      	lsls	r1, r1, #14
 8003998:	0003      	movs	r3, r0
 800399a:	0020      	movs	r0, r4
 800399c:	f7ff ff1a 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d0dd      	beq.n	8003960 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80039a4:	2003      	movs	r0, #3
}
 80039a6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80039a8:	01ffffff 	.word	0x01ffffff

080039ac <HAL_UART_Init>:
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80039b2:	2001      	movs	r0, #1
}
 80039b4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80039bc:	0002      	movs	r2, r0
 80039be:	3274      	adds	r2, #116	; 0x74
 80039c0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80039c2:	f002 ff3b 	bl	800683c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80039c6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80039c8:	2101      	movs	r1, #1
 80039ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80039cc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80039ce:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80039d2:	438b      	bics	r3, r1
 80039d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d6:	f7ff fd79 	bl	80034cc <UART_SetConfig>
 80039da:	2801      	cmp	r0, #1
 80039dc:	d0e9      	beq.n	80039b2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80039e4:	0020      	movs	r0, r4
 80039e6:	f7ff fe8d 	bl	8003704 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <HAL_UART_Init+0x60>)
 80039ee:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80039f0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	438a      	bics	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80039fe:	2201      	movs	r2, #1
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003a06:	f7ff ff9f 	bl	8003948 <UART_CheckIdleState>
 8003a0a:	e7d3      	b.n	80039b4 <HAL_UART_Init+0x8>
 8003a0c:	ffffb7ff 	.word	0xffffb7ff

08003a10 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003a10:	0003      	movs	r3, r0
 8003a12:	3358      	adds	r3, #88	; 0x58
{
 8003a14:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8003a16:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8003a18:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8003a1a:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8003a1c:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8003a1e:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8003a20:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8003a22:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8003a24:	0164      	lsls	r4, r4, #5
 8003a26:	3304      	adds	r3, #4
 8003a28:	42a1      	cmp	r1, r4
 8003a2a:	d124      	bne.n	8003a76 <UART_Start_Receive_IT+0x66>
 8003a2c:	6902      	ldr	r2, [r0, #16]
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d11f      	bne.n	8003a72 <UART_Start_Receive_IT+0x62>
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <UART_Start_Receive_IT+0x88>)
 8003a34:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	2200      	movs	r2, #0
 8003a38:	1d03      	adds	r3, r0, #4
 8003a3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3c:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a40:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	6894      	ldr	r4, [r2, #8]
 8003a44:	3b21      	subs	r3, #33	; 0x21
 8003a46:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a50:	42a1      	cmp	r1, r4
 8003a52:	d103      	bne.n	8003a5c <UART_Start_Receive_IT+0x4c>
 8003a54:	6901      	ldr	r1, [r0, #16]
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d100      	bne.n	8003a5c <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <UART_Start_Receive_IT+0x90>)
 8003a5c:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003a5e:	0003      	movs	r3, r0
 8003a60:	2000      	movs	r0, #0
 8003a62:	3374      	adds	r3, #116	; 0x74
 8003a64:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a66:	2390      	movs	r3, #144	; 0x90
 8003a68:	6811      	ldr	r1, [r2, #0]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003a72:	22ff      	movs	r2, #255	; 0xff
 8003a74:	e7de      	b.n	8003a34 <UART_Start_Receive_IT+0x24>
 8003a76:	2900      	cmp	r1, #0
 8003a78:	d104      	bne.n	8003a84 <UART_Start_Receive_IT+0x74>
 8003a7a:	6902      	ldr	r2, [r0, #16]
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	d0f8      	beq.n	8003a72 <UART_Start_Receive_IT+0x62>
 8003a80:	227f      	movs	r2, #127	; 0x7f
 8003a82:	e7d7      	b.n	8003a34 <UART_Start_Receive_IT+0x24>
 8003a84:	2480      	movs	r4, #128	; 0x80
 8003a86:	0564      	lsls	r4, r4, #21
 8003a88:	42a1      	cmp	r1, r4
 8003a8a:	d1d3      	bne.n	8003a34 <UART_Start_Receive_IT+0x24>
 8003a8c:	6902      	ldr	r2, [r0, #16]
 8003a8e:	2a00      	cmp	r2, #0
 8003a90:	d0f6      	beq.n	8003a80 <UART_Start_Receive_IT+0x70>
 8003a92:	223f      	movs	r2, #63	; 0x3f
 8003a94:	e7ce      	b.n	8003a34 <UART_Start_Receive_IT+0x24>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	000001ff 	.word	0x000001ff
 8003a9c:	080033c9 	.word	0x080033c9
 8003aa0:	0800344d 	.word	0x0800344d

08003aa4 <HAL_UART_Receive_IT>:
{
 8003aa4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa6:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aaa:	2c20      	cmp	r4, #32
 8003aac:	d129      	bne.n	8003b02 <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8003aae:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d026      	beq.n	8003b02 <HAL_UART_Receive_IT+0x5e>
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d024      	beq.n	8003b02 <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	6884      	ldr	r4, [r0, #8]
 8003abc:	015b      	lsls	r3, r3, #5
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	d106      	bne.n	8003ad0 <HAL_UART_Receive_IT+0x2c>
 8003ac2:	6903      	ldr	r3, [r0, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ac8:	2401      	movs	r4, #1
      return HAL_ERROR;
 8003aca:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8003acc:	4221      	tst	r1, r4
 8003ace:	d118      	bne.n	8003b02 <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8003ad0:	0004      	movs	r4, r0
 8003ad2:	3474      	adds	r4, #116	; 0x74
 8003ad4:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8003ad8:	2d01      	cmp	r5, #1
 8003ada:	d012      	beq.n	8003b02 <HAL_UART_Receive_IT+0x5e>
 8003adc:	3b01      	subs	r3, #1
 8003ade:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ae2:	4c09      	ldr	r4, [pc, #36]	; (8003b08 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae4:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ae6:	6803      	ldr	r3, [r0, #0]
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	d007      	beq.n	8003afc <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aec:	685c      	ldr	r4, [r3, #4]
 8003aee:	0224      	lsls	r4, r4, #8
 8003af0:	d504      	bpl.n	8003afc <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003af2:	2480      	movs	r4, #128	; 0x80
 8003af4:	681d      	ldr	r5, [r3, #0]
 8003af6:	04e4      	lsls	r4, r4, #19
 8003af8:	432c      	orrs	r4, r5
 8003afa:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003afc:	f7ff ff88 	bl	8003a10 <UART_Start_Receive_IT>
 8003b00:	0003      	movs	r3, r0
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	40004800 	.word	0x40004800

08003b0c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b0c:	4770      	bx	lr
	...

08003b10 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <SX1276GetStatus+0x8>)
 8003b12:	7918      	ldrb	r0, [r3, #4]
}
 8003b14:	4770      	bx	lr
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	200002a8 	.word	0x200002a8

08003b1c <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <GetFskBandwidthRegValue+0x28>)
{
 8003b1e:	2300      	movs	r3, #0
 8003b20:	0011      	movs	r1, r2
 8003b22:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8003b24:	6814      	ldr	r4, [r2, #0]
 8003b26:	4284      	cmp	r4, r0
 8003b28:	d802      	bhi.n	8003b30 <GetFskBandwidthRegValue+0x14>
 8003b2a:	6894      	ldr	r4, [r2, #8]
 8003b2c:	4284      	cmp	r4, r0
 8003b2e:	d804      	bhi.n	8003b3a <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b30:	3301      	adds	r3, #1
 8003b32:	3208      	adds	r2, #8
 8003b34:	2b15      	cmp	r3, #21
 8003b36:	d1f5      	bne.n	8003b24 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8003b38:	e7fe      	b.n	8003b38 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	18cb      	adds	r3, r1, r3
 8003b3e:	7918      	ldrb	r0, [r3, #4]
}
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	0800841c 	.word	0x0800841c

08003b48 <SX1276GetTimeOnAir>:
{
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	0014      	movs	r4, r2
 8003b4c:	aa08      	add	r2, sp, #32
 8003b4e:	8816      	ldrh	r6, [r2, #0]
 8003b50:	aa09      	add	r2, sp, #36	; 0x24
 8003b52:	7817      	ldrb	r7, [r2, #0]
 8003b54:	aa0a      	add	r2, sp, #40	; 0x28
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	000d      	movs	r5, r1
 8003b5a:	a90b      	add	r1, sp, #44	; 0x2c
 8003b5c:	4694      	mov	ip, r2
 8003b5e:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d009      	beq.n	8003b78 <SX1276GetTimeOnAir+0x30>
 8003b64:	2801      	cmp	r0, #1
 8003b66:	d017      	beq.n	8003b98 <SX1276GetTimeOnAir+0x50>
 8003b68:	2401      	movs	r4, #1
 8003b6a:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8003b6c:	1900      	adds	r0, r0, r4
 8003b6e:	0021      	movs	r1, r4
 8003b70:	3801      	subs	r0, #1
 8003b72:	f7fc faef 	bl	8000154 <__udivsi3>
}
 8003b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8003b78:	1e4b      	subs	r3, r1, #1
 8003b7a:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8003b7c:	427b      	negs	r3, r7
 8003b7e:	415f      	adcs	r7, r3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8003b80:	0049      	lsls	r1, r1, #1
               ( 0 ) + // Address filter size
 8003b82:	000a      	movs	r2, r1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8003b84:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8003b86:	19be      	adds	r6, r7, r6
    return ( preambleLen << 3 ) +
 8003b88:	00f6      	lsls	r6, r6, #3
               ( 0 ) + // Address filter size
 8003b8a:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8003b8c:	3618      	adds	r6, #24
               ) << 3 
 8003b8e:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8003b90:	1996      	adds	r6, r2, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8003b92:	0080      	lsls	r0, r0, #2
 8003b94:	4370      	muls	r0, r6
        break;
 8003b96:	e7e9      	b.n	8003b6c <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 8003b98:	3304      	adds	r3, #4
 8003b9a:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8003b9c:	1f63      	subs	r3, r4, #5
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d804      	bhi.n	8003bac <SX1276GetTimeOnAir+0x64>
    {
        if( preambleLen < 12 )
 8003ba2:	1c33      	adds	r3, r6, #0
 8003ba4:	2e0c      	cmp	r6, #12
 8003ba6:	d200      	bcs.n	8003baa <SX1276GetTimeOnAir+0x62>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003bac:	2d00      	cmp	r5, #0
 8003bae:	d136      	bne.n	8003c1e <SX1276GetTimeOnAir+0xd6>
 8003bb0:	0023      	movs	r3, r4
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	002a      	movs	r2, r5
 8003bb6:	3b0b      	subs	r3, #11
 8003bb8:	4298      	cmp	r0, r3
 8003bba:	416a      	adcs	r2, r5
 8003bbc:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003bbe:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 8003bc0:	1e48      	subs	r0, r1, #1
 8003bc2:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8003bc4:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8003bc6:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 8003bcc:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 8003bce:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8003bd0:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 8003bd2:	4297      	cmp	r7, r2
 8003bd4:	d100      	bne.n	8003bd8 <SX1276GetTimeOnAir+0x90>
 8003bd6:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 8003bd8:	1880      	adds	r0, r0, r2
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8003bda:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8003bdc:	2c06      	cmp	r4, #6
 8003bde:	d903      	bls.n	8003be8 <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 8003be0:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d000      	beq.n	8003be8 <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 8003be6:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8003be8:	43c3      	mvns	r3, r0
 8003bea:	17db      	asrs	r3, r3, #31
 8003bec:	4018      	ands	r0, r3
 8003bee:	1840      	adds	r0, r0, r1
 8003bf0:	3801      	subs	r0, #1
 8003bf2:	f7fc fb39 	bl	8000268 <__divsi3>
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	4343      	muls	r3, r0
 8003bfa:	199e      	adds	r6, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 8003bfc:	0032      	movs	r2, r6
 8003bfe:	320e      	adds	r2, #14
    if( datarate <= 6 )
 8003c00:	2c06      	cmp	r4, #6
 8003c02:	d900      	bls.n	8003c06 <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 8003c04:	3a02      	subs	r2, #2
    switch( bw )
 8003c06:	2d02      	cmp	r5, #2
 8003c08:	d811      	bhi.n	8003c2e <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8003c0a:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8003c0c:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8003c0e:	3201      	adds	r2, #1
 8003c10:	40ba      	lsls	r2, r7
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8003c14:	0080      	lsls	r0, r0, #2
 8003c16:	00ad      	lsls	r5, r5, #2
 8003c18:	4350      	muls	r0, r2
 8003c1a:	58ec      	ldr	r4, [r5, r3]
 8003c1c:	e7a6      	b.n	8003b6c <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8003c1e:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003c20:	2d01      	cmp	r5, #1
 8003c22:	d1cd      	bne.n	8003bc0 <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003c24:	0023      	movs	r3, r4
 8003c26:	3b0c      	subs	r3, #12
 8003c28:	4258      	negs	r0, r3
 8003c2a:	4143      	adcs	r3, r0
 8003c2c:	e7c7      	b.n	8003bbe <SX1276GetTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 8003c2e:	deff      	udf	#255	; 0xff
 8003c30:	080083e0 	.word	0x080083e0

08003c34 <SX1276GetWakeupTime>:
{
 8003c34:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8003c36:	f7fd f8a7 	bl	8000d88 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8003c3a:	3002      	adds	r0, #2
}
 8003c3c:	bd10      	pop	{r4, pc}

08003c3e <SX1276WriteBuffer>:
{
 8003c3e:	b570      	push	{r4, r5, r6, lr}
 8003c40:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8003c42:	2000      	movs	r0, #0
{
 8003c44:	000c      	movs	r4, r1
 8003c46:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 8003c48:	f7fd fa78 	bl	800113c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8003c4c:	2080      	movs	r0, #128	; 0x80
 8003c4e:	4330      	orrs	r0, r6
 8003c50:	b280      	uxth	r0, r0
 8003c52:	f7fd fa65 	bl	8001120 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8003c56:	1965      	adds	r5, r4, r5
 8003c58:	42ac      	cmp	r4, r5
 8003c5a:	d103      	bne.n	8003c64 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fd fa6d 	bl	800113c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8003c64:	7820      	ldrb	r0, [r4, #0]
 8003c66:	f7fd fa5b 	bl	8001120 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8003c6a:	3401      	adds	r4, #1
 8003c6c:	e7f4      	b.n	8003c58 <SX1276WriteBuffer+0x1a>

08003c6e <SX1276Write>:
{
 8003c6e:	b507      	push	{r0, r1, r2, lr}
 8003c70:	466b      	mov	r3, sp
 8003c72:	71d9      	strb	r1, [r3, #7]
 8003c74:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8003c76:	2201      	movs	r2, #1
 8003c78:	0019      	movs	r1, r3
 8003c7a:	f7ff ffe0 	bl	8003c3e <SX1276WriteBuffer>
}
 8003c7e:	bd07      	pop	{r0, r1, r2, pc}

08003c80 <SX1276SetChannel>:
{
 8003c80:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003c82:	4911      	ldr	r1, [pc, #68]	; (8003cc8 <SX1276SetChannel+0x48>)
{
 8003c84:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003c86:	f7fc faeb 	bl	8000260 <__aeabi_uidivmod>
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <SX1276SetChannel+0x4c>)
 8003c8c:	0208      	lsls	r0, r1, #8
 8003c8e:	18c0      	adds	r0, r0, r3
 8003c90:	490d      	ldr	r1, [pc, #52]	; (8003cc8 <SX1276SetChannel+0x48>)
 8003c92:	f7fc fa5f 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8003c96:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003c98:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8003c9a:	0028      	movs	r0, r5
 8003c9c:	f7fc fa5a 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8003ca0:	0200      	lsls	r0, r0, #8
 8003ca2:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003ca6:	0c21      	lsrs	r1, r4, #16
 8003ca8:	2006      	movs	r0, #6
 8003caa:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 8003cac:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003cae:	f7ff ffde 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8003cb2:	0a21      	lsrs	r1, r4, #8
 8003cb4:	2007      	movs	r0, #7
 8003cb6:	b2c9      	uxtb	r1, r1
 8003cb8:	f7ff ffd9 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8003cbc:	2008      	movs	r0, #8
 8003cbe:	b2e1      	uxtb	r1, r4
 8003cc0:	f7ff ffd5 	bl	8003c6e <SX1276Write>
}
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	00003d09 	.word	0x00003d09
 8003ccc:	00001e84 	.word	0x00001e84
 8003cd0:	200002a8 	.word	0x200002a8

08003cd4 <SX1276ReadBuffer>:
{
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 8003cd8:	2000      	movs	r0, #0
{
 8003cda:	000c      	movs	r4, r1
 8003cdc:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 8003cde:	f7fd fa2d 	bl	800113c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 8003ce2:	207f      	movs	r0, #127	; 0x7f
 8003ce4:	4028      	ands	r0, r5
 8003ce6:	f7fd fa1b 	bl	8001120 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8003cea:	19a6      	adds	r6, r4, r6
 8003cec:	42b4      	cmp	r4, r6
 8003cee:	d103      	bne.n	8003cf8 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fd fa23 	bl	800113c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7fd fa11 	bl	8001120 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8003cfe:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 8003d00:	3401      	adds	r4, #1
 8003d02:	e7f3      	b.n	8003cec <SX1276ReadBuffer+0x18>

08003d04 <SX1276Read>:
{
 8003d04:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8003d06:	466b      	mov	r3, sp
 8003d08:	1ddc      	adds	r4, r3, #7
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	0021      	movs	r1, r4
 8003d0e:	f7ff ffe1 	bl	8003cd4 <SX1276ReadBuffer>
    return data;
 8003d12:	7820      	ldrb	r0, [r4, #0]
}
 8003d14:	bd16      	pop	{r1, r2, r4, pc}
	...

08003d18 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 8003d18:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003d1a:	4c2c      	ldr	r4, [pc, #176]	; (8003dcc <SX1276OnDio2Irq+0xb4>)
 8003d1c:	7925      	ldrb	r5, [r4, #4]
 8003d1e:	2d01      	cmp	r5, #1
 8003d20:	d002      	beq.n	8003d28 <SX1276OnDio2Irq+0x10>
 8003d22:	2d02      	cmp	r5, #2
 8003d24:	d049      	beq.n	8003dba <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003d28:	7963      	ldrb	r3, [r4, #5]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <SX1276OnDio2Irq+0x46>
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d1f9      	bne.n	8003d26 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003d32:	3453      	adds	r4, #83	; 0x53
 8003d34:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003d36:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f4      	beq.n	8003d26 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003d3c:	2012      	movs	r0, #18
 8003d3e:	f7ff ff96 	bl	8003c6e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <SX1276OnDio2Irq+0xb8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0ed      	beq.n	8003d26 <SX1276OnDio2Irq+0xe>
 8003d4a:	695c      	ldr	r4, [r3, #20]
 8003d4c:	2c00      	cmp	r4, #0
 8003d4e:	d0ea      	beq.n	8003d26 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003d50:	201c      	movs	r0, #28
 8003d52:	f7ff ffd7 	bl	8003d04 <SX1276Read>
 8003d56:	233f      	movs	r3, #63	; 0x3f
 8003d58:	4018      	ands	r0, r3
 8003d5a:	47a0      	blx	r4
}
 8003d5c:	e7e3      	b.n	8003d26 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003d5e:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8003d60:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003d62:	3330      	adds	r3, #48	; 0x30
 8003d64:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8003d66:	3631      	adds	r6, #49	; 0x31
 8003d68:	7833      	ldrb	r3, [r6, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1db      	bne.n	8003d26 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003d6e:	0020      	movs	r0, r4
 8003d70:	3068      	adds	r0, #104	; 0x68
 8003d72:	f003 f9df 	bl	8007134 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003d76:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003d78:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003d7a:	f7ff ffc3 	bl	8003d04 <SX1276Read>
 8003d7e:	0023      	movs	r3, r4
 8003d80:	0840      	lsrs	r0, r0, #1
 8003d82:	3332      	adds	r3, #50	; 0x32
 8003d84:	4240      	negs	r0, r0
 8003d86:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d88:	201b      	movs	r0, #27
 8003d8a:	f7ff ffbb 	bl	8003d04 <SX1276Read>
 8003d8e:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003d90:	201c      	movs	r0, #28
 8003d92:	f7ff ffb7 	bl	8003d04 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d96:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d9a:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8003d9c:	b2c0      	uxtb	r0, r0
 8003d9e:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8003da0:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8003da2:	435d      	muls	r5, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8003da4:	3080      	adds	r0, #128	; 0x80
 8003da6:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8003da8:	1940      	adds	r0, r0, r5
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003daa:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003dac:	200c      	movs	r0, #12
 8003dae:	f7ff ffa9 	bl	8003d04 <SX1276Read>
 8003db2:	3438      	adds	r4, #56	; 0x38
 8003db4:	0940      	lsrs	r0, r0, #5
 8003db6:	7020      	strb	r0, [r4, #0]
 8003db8:	e7b5      	b.n	8003d26 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003dba:	7963      	ldrb	r3, [r4, #5]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d1b2      	bne.n	8003d26 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003dc0:	3453      	adds	r4, #83	; 0x53
 8003dc2:	7823      	ldrb	r3, [r4, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ae      	beq.n	8003d26 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003dc8:	0029      	movs	r1, r5
 8003dca:	e7b7      	b.n	8003d3c <SX1276OnDio2Irq+0x24>
 8003dcc:	200002a8 	.word	0x200002a8
 8003dd0:	20000328 	.word	0x20000328
 8003dd4:	00003d09 	.word	0x00003d09

08003dd8 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <SX1276OnDio4Irq+0x18>)
 8003dda:	795a      	ldrb	r2, [r3, #5]
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d105      	bne.n	8003dec <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8003de0:	3330      	adds	r3, #48	; 0x30
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	2a00      	cmp	r2, #0
 8003de6:	d101      	bne.n	8003dec <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003de8:	3201      	adds	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8003dec:	4770      	bx	lr
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	200002a8 	.word	0x200002a8

08003df4 <SX1276OnDio3Irq>:
{
 8003df4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <SX1276OnDio3Irq+0x4c>)
 8003df8:	795c      	ldrb	r4, [r3, #5]
 8003dfa:	2c01      	cmp	r4, #1
 8003dfc:	d112      	bne.n	8003e24 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003dfe:	2012      	movs	r0, #18
 8003e00:	f7ff ff80 	bl	8003d04 <SX1276Read>
 8003e04:	0005      	movs	r5, r0
 8003e06:	4e0f      	ldr	r6, [pc, #60]	; (8003e44 <SX1276OnDio3Irq+0x50>)
 8003e08:	4025      	ands	r5, r4
 8003e0a:	4220      	tst	r0, r4
 8003e0c:	d00b      	beq.n	8003e26 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003e0e:	2105      	movs	r1, #5
 8003e10:	2012      	movs	r0, #18
 8003e12:	f7ff ff2c 	bl	8003c6e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e16:	6833      	ldr	r3, [r6, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <SX1276OnDio3Irq+0x30>
 8003e1c:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8003e1e:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <SX1276OnDio3Irq+0x48>
}
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003e26:	2104      	movs	r1, #4
 8003e28:	2012      	movs	r0, #18
 8003e2a:	f7ff ff20 	bl	8003c6e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e2e:	6833      	ldr	r3, [r6, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f7      	beq.n	8003e24 <SX1276OnDio3Irq+0x30>
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f4      	beq.n	8003e24 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 8003e3a:	0028      	movs	r0, r5
 8003e3c:	4798      	blx	r3
}
 8003e3e:	e7f1      	b.n	8003e24 <SX1276OnDio3Irq+0x30>
 8003e40:	200002a8 	.word	0x200002a8
 8003e44:	20000328 	.word	0x20000328

08003e48 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8003e4c:	2805      	cmp	r0, #5
 8003e4e:	d111      	bne.n	8003e74 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8003e50:	2001      	movs	r0, #1
 8003e52:	f7fc ff9b 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 8003e56:	2001      	movs	r0, #1
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8003e58:	f7fd f910 	bl	800107c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7ff ff51 	bl	8003d04 <SX1276Read>
 8003e62:	2307      	movs	r3, #7
 8003e64:	0001      	movs	r1, r0
 8003e66:	4399      	bics	r1, r3
 8003e68:	4321      	orrs	r1, r4
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	b2c9      	uxtb	r1, r1
 8003e6e:	f7ff fefe 	bl	8003c6e <SX1276Write>
}
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8003e74:	2009      	movs	r0, #9
 8003e76:	f7ff ff45 	bl	8003d04 <SX1276Read>
 8003e7a:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7fc ff85 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8003e82:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8003e84:	062b      	lsls	r3, r5, #24
 8003e86:	d4e7      	bmi.n	8003e58 <SX1276SetOpMode.part.0+0x10>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8003e88:	2002      	movs	r0, #2
 8003e8a:	e7e5      	b.n	8003e58 <SX1276SetOpMode.part.0+0x10>

08003e8c <SX1276SetStby>:
{
 8003e8c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003e8e:	4c09      	ldr	r4, [pc, #36]	; (8003eb4 <SX1276SetStby+0x28>)
 8003e90:	1d20      	adds	r0, r4, #4
 8003e92:	f003 f94f 	bl	8007134 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8003e96:	0020      	movs	r0, r4
 8003e98:	301c      	adds	r0, #28
 8003e9a:	f003 f94b 	bl	8007134 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8003e9e:	4c06      	ldr	r4, [pc, #24]	; (8003eb8 <SX1276SetStby+0x2c>)
 8003ea0:	0020      	movs	r0, r4
 8003ea2:	3068      	adds	r0, #104	; 0x68
 8003ea4:	f003 f946 	bl	8007134 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f7ff ffcd 	bl	8003e48 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	7123      	strb	r3, [r4, #4]
}
 8003eb2:	bd10      	pop	{r4, pc}
 8003eb4:	20000328 	.word	0x20000328
 8003eb8:	200002a8 	.word	0x200002a8

08003ebc <SX1276SetRx>:
{
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 8003ec0:	4879      	ldr	r0, [pc, #484]	; (80040a8 <SX1276SetRx+0x1ec>)
 8003ec2:	301c      	adds	r0, #28
 8003ec4:	f003 f936 	bl	8007134 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8003ec8:	4c78      	ldr	r4, [pc, #480]	; (80040ac <SX1276SetRx+0x1f0>)
 8003eca:	7965      	ldrb	r5, [r4, #5]
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	d02f      	beq.n	8003f30 <SX1276SetRx+0x74>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	2d01      	cmp	r5, #1
 8003ed4:	d151      	bne.n	8003f7a <SX1276SetRx+0xbe>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003ed6:	0023      	movs	r3, r4
 8003ed8:	3355      	adds	r3, #85	; 0x55
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003ede:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d100      	bne.n	8003ee6 <SX1276SetRx+0x2a>
 8003ee4:	e06f      	b.n	8003fc6 <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003ee6:	f7ff ff0d 	bl	8003d04 <SX1276Read>
 8003eea:	4306      	orrs	r6, r0
 8003eec:	b2f1      	uxtb	r1, r6
 8003eee:	2033      	movs	r0, #51	; 0x33
 8003ef0:	f7ff febd 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003ef4:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003ef6:	203b      	movs	r0, #59	; 0x3b
 8003ef8:	f7ff feb9 	bl	8003c6e <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003efe:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d900      	bls.n	8003f06 <SX1276SetRx+0x4a>
 8003f04:	e0b8      	b.n	8004078 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003f06:	f7ff fefd 	bl	8003d04 <SX1276Read>
 8003f0a:	217f      	movs	r1, #127	; 0x7f
 8003f0c:	4001      	ands	r1, r0
 8003f0e:	2031      	movs	r0, #49	; 0x31
 8003f10:	f7ff fead 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8003f14:	2030      	movs	r0, #48	; 0x30
 8003f16:	2100      	movs	r1, #0
 8003f18:	f7ff fea9 	bl	8003c6e <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8003f1c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003f1e:	2808      	cmp	r0, #8
 8003f20:	d865      	bhi.n	8003fee <SX1276SetRx+0x132>
 8003f22:	f7fc f903 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f26:	815b      	.short	0x815b
 8003f28:	9d968f88 	.word	0x9d968f88
 8003f2c:	a4a4      	.short	0xa4a4
 8003f2e:	a4          	.byte	0xa4
 8003f2f:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003f30:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f32:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003f34:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f36:	f7ff fee5 	bl	8003d04 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f3e:	3109      	adds	r1, #9
 8003f40:	4301      	orrs	r1, r0
 8003f42:	2040      	movs	r0, #64	; 0x40
 8003f44:	f7ff fe93 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003f48:	2041      	movs	r0, #65	; 0x41
 8003f4a:	f7ff fedb 	bl	8003d04 <SX1276Read>
 8003f4e:	213f      	movs	r1, #63	; 0x3f
 8003f50:	4249      	negs	r1, r1
 8003f52:	4301      	orrs	r1, r0
 8003f54:	b2c9      	uxtb	r1, r1
 8003f56:	2041      	movs	r0, #65	; 0x41
 8003f58:	f7ff fe89 	bl	8003c6e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003f5c:	2035      	movs	r0, #53	; 0x35
 8003f5e:	f7ff fed1 	bl	8003d04 <SX1276Read>
 8003f62:	233f      	movs	r3, #63	; 0x3f
 8003f64:	4018      	ands	r0, r3
 8003f66:	0023      	movs	r3, r4
 8003f68:	333e      	adds	r3, #62	; 0x3e
 8003f6a:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003f6c:	211e      	movs	r1, #30
 8003f6e:	200d      	movs	r0, #13
 8003f70:	f7ff fe7d 	bl	8003c6e <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003f74:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003f76:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003f78:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8003f7a:	2280      	movs	r2, #128	; 0x80
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	484c      	ldr	r0, [pc, #304]	; (80040b0 <SX1276SetRx+0x1f4>)
 8003f80:	0052      	lsls	r2, r2, #1
 8003f82:	f003 fd28 	bl	80079d6 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8003f86:	2301      	movs	r3, #1
 8003f88:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8003f8a:	2f00      	cmp	r7, #0
 8003f8c:	d008      	beq.n	8003fa0 <SX1276SetRx+0xe4>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003f8e:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <SX1276SetRx+0x1ec>)
 8003f90:	0039      	movs	r1, r7
 8003f92:	1d1d      	adds	r5, r3, #4
 8003f94:	0028      	movs	r0, r5
 8003f96:	f003 f95b 	bl	8007250 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f003 f91e 	bl	80071dc <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8003fa0:	7963      	ldrb	r3, [r4, #5]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d000      	beq.n	8003fa8 <SX1276SetRx+0xec>
 8003fa6:	e078      	b.n	800409a <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 8003fa8:	2005      	movs	r0, #5
 8003faa:	f7ff ff4d 	bl	8003e48 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	d108      	bne.n	8003fc4 <SX1276SetRx+0x108>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8003fb2:	0025      	movs	r5, r4
 8003fb4:	3568      	adds	r5, #104	; 0x68
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003fba:	f003 f949 	bl	8007250 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8003fbe:	0028      	movs	r0, r5
 8003fc0:	f003 f90c 	bl	80071dc <UTIL_TIMER_Start>
}
 8003fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003fc6:	f7ff fe9d 	bl	8003d04 <SX1276Read>
 8003fca:	0001      	movs	r1, r0
 8003fcc:	43b1      	bics	r1, r6
 8003fce:	4329      	orrs	r1, r5
 8003fd0:	b2c9      	uxtb	r1, r1
 8003fd2:	2033      	movs	r0, #51	; 0x33
 8003fd4:	f7ff fe4b 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003fd8:	211d      	movs	r1, #29
 8003fda:	e78c      	b.n	8003ef6 <SX1276SetRx+0x3a>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8003fdc:	2148      	movs	r1, #72	; 0x48
 8003fde:	202f      	movs	r0, #47	; 0x2f
 8003fe0:	f7ff fe45 	bl	8003c6e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003fe4:	68a3      	ldr	r3, [r4, #8]
 8003fe6:	4a33      	ldr	r2, [pc, #204]	; (80040b4 <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8003fe8:	1898      	adds	r0, r3, r2
 8003fea:	f7ff fe49 	bl	8003c80 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8003fee:	0023      	movs	r3, r4
 8003ff0:	3356      	adds	r3, #86	; 0x56
 8003ff2:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003ff4:	0023      	movs	r3, r4
 8003ff6:	3353      	adds	r3, #83	; 0x53
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d044      	beq.n	8004088 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003ffe:	211d      	movs	r1, #29
 8004000:	2011      	movs	r0, #17
 8004002:	f7ff fe34 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004006:	2040      	movs	r0, #64	; 0x40
 8004008:	f7ff fe7c 	bl	8003d04 <SX1276Read>
 800400c:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800400e:	4001      	ands	r1, r0
 8004010:	2040      	movs	r0, #64	; 0x40
 8004012:	f7ff fe2c 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004016:	2100      	movs	r1, #0
 8004018:	200f      	movs	r0, #15
 800401a:	f7ff fe28 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800401e:	2100      	movs	r1, #0
 8004020:	200d      	movs	r0, #13
 8004022:	f7ff fe24 	bl	8003c6e <SX1276Write>
        break;
 8004026:	e7a8      	b.n	8003f7a <SX1276SetRx+0xbe>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004028:	2144      	movs	r1, #68	; 0x44
 800402a:	202f      	movs	r0, #47	; 0x2f
 800402c:	f7ff fe1f 	bl	8003c6e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8004030:	68a3      	ldr	r3, [r4, #8]
 8004032:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <SX1276SetRx+0x1fc>)
 8004034:	e7d8      	b.n	8003fe8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004036:	2144      	movs	r1, #68	; 0x44
 8004038:	202f      	movs	r0, #47	; 0x2f
 800403a:	f7ff fe18 	bl	8003c6e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <SX1276SetRx+0x200>)
 8004042:	e7d1      	b.n	8003fe8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004044:	2144      	movs	r1, #68	; 0x44
 8004046:	202f      	movs	r0, #47	; 0x2f
 8004048:	f7ff fe11 	bl	8003c6e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800404c:	68a3      	ldr	r3, [r4, #8]
 800404e:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <SX1276SetRx+0x204>)
 8004050:	e7ca      	b.n	8003fe8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004052:	2144      	movs	r1, #68	; 0x44
 8004054:	202f      	movs	r0, #47	; 0x2f
 8004056:	f7ff fe0a 	bl	8003c6e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800405a:	68a3      	ldr	r3, [r4, #8]
 800405c:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <SX1276SetRx+0x208>)
 800405e:	e7c3      	b.n	8003fe8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004060:	2144      	movs	r1, #68	; 0x44
 8004062:	202f      	movs	r0, #47	; 0x2f
 8004064:	f7ff fe03 	bl	8003c6e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004068:	68a3      	ldr	r3, [r4, #8]
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <SX1276SetRx+0x20c>)
 800406c:	e7bc      	b.n	8003fe8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800406e:	2140      	movs	r1, #64	; 0x40
 8004070:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004072:	f7ff fdfc 	bl	8003c6e <SX1276Write>
 8004076:	e7ba      	b.n	8003fee <SX1276SetRx+0x132>
 8004078:	f7ff fe44 	bl	8003d04 <SX1276Read>
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	4249      	negs	r1, r1
 8004080:	4301      	orrs	r1, r0
 8004082:	b2c9      	uxtb	r1, r1
 8004084:	2031      	movs	r0, #49	; 0x31
 8004086:	e7f4      	b.n	8004072 <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004088:	211f      	movs	r1, #31
 800408a:	2011      	movs	r0, #17
 800408c:	f7ff fdef 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004090:	2040      	movs	r0, #64	; 0x40
 8004092:	f7ff fe37 	bl	8003d04 <SX1276Read>
 8004096:	213f      	movs	r1, #63	; 0x3f
 8004098:	e7b9      	b.n	800400e <SX1276SetRx+0x152>
        if( rxContinuous == true )
 800409a:	2005      	movs	r0, #5
 800409c:	2e00      	cmp	r6, #0
 800409e:	d100      	bne.n	80040a2 <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 80040a0:	2006      	movs	r0, #6
 80040a2:	f7ff fed1 	bl	8003e48 <SX1276SetOpMode.part.0>
}
 80040a6:	e78d      	b.n	8003fc4 <SX1276SetRx+0x108>
 80040a8:	20000328 	.word	0x20000328
 80040ac:	200002a8 	.word	0x200002a8
 80040b0:	2000035c 	.word	0x2000035c
 80040b4:	00001e82 	.word	0x00001e82
 80040b8:	000028b4 	.word	0x000028b4
 80040bc:	00003d04 	.word	0x00003d04
 80040c0:	0000515e 	.word	0x0000515e
 80040c4:	00007a12 	.word	0x00007a12
 80040c8:	0000a2c6 	.word	0x0000a2c6

080040cc <SX1276StartCad>:
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80040ce:	4c0b      	ldr	r4, [pc, #44]	; (80040fc <SX1276StartCad+0x30>)
 80040d0:	7963      	ldrb	r3, [r4, #5]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d110      	bne.n	80040f8 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80040d6:	21fa      	movs	r1, #250	; 0xfa
 80040d8:	2011      	movs	r0, #17
 80040da:	f7ff fdc8 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80040de:	2040      	movs	r0, #64	; 0x40
 80040e0:	f7ff fe10 	bl	8003d04 <SX1276Read>
 80040e4:	2503      	movs	r5, #3
 80040e6:	43a8      	bics	r0, r5
 80040e8:	b2c1      	uxtb	r1, r0
 80040ea:	2040      	movs	r0, #64	; 0x40
 80040ec:	f7ff fdbf 	bl	8003c6e <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80040f0:	2007      	movs	r0, #7
 80040f2:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 80040f4:	f7ff fea8 	bl	8003e48 <SX1276SetOpMode.part.0>
}
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	200002a8 	.word	0x200002a8

08004100 <SX1276ReadRssi>:
{
 8004100:	b510      	push	{r4, lr}
    switch( modem )
 8004102:	2800      	cmp	r0, #0
 8004104:	d004      	beq.n	8004110 <SX1276ReadRssi+0x10>
 8004106:	2801      	cmp	r0, #1
 8004108:	d00a      	beq.n	8004120 <SX1276ReadRssi+0x20>
 800410a:	2001      	movs	r0, #1
 800410c:	4240      	negs	r0, r0
}
 800410e:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004110:	2011      	movs	r0, #17
 8004112:	f7ff fdf7 	bl	8003d04 <SX1276Read>
 8004116:	0840      	lsrs	r0, r0, #1
 8004118:	b2c0      	uxtb	r0, r0
 800411a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800411c:	b200      	sxth	r0, r0
 800411e:	e7f6      	b.n	800410e <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004120:	4a06      	ldr	r2, [pc, #24]	; (800413c <SX1276ReadRssi+0x3c>)
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <SX1276ReadRssi+0x40>)
 8004124:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004126:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004128:	429a      	cmp	r2, r3
 800412a:	d903      	bls.n	8004134 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800412c:	f7ff fdea 	bl	8003d04 <SX1276Read>
 8004130:	389d      	subs	r0, #157	; 0x9d
 8004132:	e7f3      	b.n	800411c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004134:	f7ff fde6 	bl	8003d04 <SX1276Read>
 8004138:	38a4      	subs	r0, #164	; 0xa4
 800413a:	e7ef      	b.n	800411c <SX1276ReadRssi+0x1c>
 800413c:	200002a8 	.word	0x200002a8
 8004140:	1f4add40 	.word	0x1f4add40

08004144 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8004144:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004146:	2001      	movs	r0, #1
 8004148:	f7ff fddc 	bl	8003d04 <SX1276Read>
 800414c:	21f8      	movs	r1, #248	; 0xf8
 800414e:	4001      	ands	r1, r0
 8004150:	2001      	movs	r0, #1
 8004152:	f7ff fd8c 	bl	8003c6e <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 8004156:	2000      	movs	r0, #0
 8004158:	f7fc ff90 	bl	800107c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800415c:	2000      	movs	r0, #0
 800415e:	f7fc fe15 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 8004162:	bd10      	pop	{r4, pc}

08004164 <SX1276SetModem>:
{
 8004164:	b510      	push	{r4, lr}
 8004166:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004168:	2001      	movs	r0, #1
 800416a:	f7ff fdcb 	bl	8003d04 <SX1276Read>
 800416e:	b2c0      	uxtb	r0, r0
 8004170:	4b16      	ldr	r3, [pc, #88]	; (80041cc <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 8004172:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 8004174:	42a0      	cmp	r0, r4
 8004176:	d101      	bne.n	800417c <SX1276SetModem+0x18>
 8004178:	7158      	strb	r0, [r3, #5]
}
 800417a:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800417c:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800417e:	2c01      	cmp	r4, #1
 8004180:	d012      	beq.n	80041a8 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004182:	f7ff ffdf 	bl	8004144 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004186:	2001      	movs	r0, #1
 8004188:	f7ff fdbc 	bl	8003d04 <SX1276Read>
 800418c:	217f      	movs	r1, #127	; 0x7f
 800418e:	4001      	ands	r1, r0
 8004190:	2001      	movs	r0, #1
 8004192:	f7ff fd6c 	bl	8003c6e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004196:	2100      	movs	r1, #0
 8004198:	2040      	movs	r0, #64	; 0x40
 800419a:	f7ff fd68 	bl	8003c6e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800419e:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80041a0:	2041      	movs	r0, #65	; 0x41
 80041a2:	f7ff fd64 	bl	8003c6e <SX1276Write>
        break;
 80041a6:	e7e8      	b.n	800417a <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80041a8:	f7ff ffcc 	bl	8004144 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80041ac:	0020      	movs	r0, r4
 80041ae:	f7ff fda9 	bl	8003d04 <SX1276Read>
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	4249      	negs	r1, r1
 80041b6:	4301      	orrs	r1, r0
 80041b8:	b2c9      	uxtb	r1, r1
 80041ba:	0020      	movs	r0, r4
 80041bc:	f7ff fd57 	bl	8003c6e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80041c0:	2100      	movs	r1, #0
 80041c2:	2040      	movs	r0, #64	; 0x40
 80041c4:	f7ff fd53 	bl	8003c6e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80041c8:	2100      	movs	r1, #0
 80041ca:	e7e9      	b.n	80041a0 <SX1276SetModem+0x3c>
 80041cc:	200002a8 	.word	0x200002a8

080041d0 <SX1276SetMaxPayloadLength>:
{
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	0004      	movs	r4, r0
 80041d4:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80041d6:	f7ff ffc5 	bl	8004164 <SX1276SetModem>
    switch( modem )
 80041da:	2c00      	cmp	r4, #0
 80041dc:	d002      	beq.n	80041e4 <SX1276SetMaxPayloadLength+0x14>
 80041de:	2c01      	cmp	r4, #1
 80041e0:	d00a      	beq.n	80041f8 <SX1276SetMaxPayloadLength+0x28>
}
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <SX1276SetMaxPayloadLength+0x30>)
 80041e6:	3303      	adds	r3, #3
 80041e8:	7fdb      	ldrb	r3, [r3, #31]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f9      	bne.n	80041e2 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80041ee:	0029      	movs	r1, r5
 80041f0:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80041f2:	f7ff fd3c 	bl	8003c6e <SX1276Write>
}
 80041f6:	e7f4      	b.n	80041e2 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80041f8:	0029      	movs	r1, r5
 80041fa:	2023      	movs	r0, #35	; 0x23
 80041fc:	e7f9      	b.n	80041f2 <SX1276SetMaxPayloadLength+0x22>
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	200002a8 	.word	0x200002a8

08004204 <SX1276SetPublicNetwork>:
{
 8004204:	b510      	push	{r4, lr}
 8004206:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8004208:	2001      	movs	r0, #1
 800420a:	f7ff ffab 	bl	8004164 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004210:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8004216:	2c00      	cmp	r4, #0
 8004218:	d100      	bne.n	800421c <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800421a:	2112      	movs	r1, #18
 800421c:	2039      	movs	r0, #57	; 0x39
 800421e:	f7ff fd26 	bl	8003c6e <SX1276Write>
}
 8004222:	bd10      	pop	{r4, pc}
 8004224:	200002a8 	.word	0x200002a8

08004228 <SX1276SetRxConfig>:
{
 8004228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422a:	b08b      	sub	sp, #44	; 0x2c
 800422c:	9305      	str	r3, [sp, #20]
 800422e:	ab10      	add	r3, sp, #64	; 0x40
 8004230:	cb80      	ldmia	r3!, {r7}
 8004232:	0014      	movs	r4, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	aa0a      	add	r2, sp, #40	; 0x28
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	ab12      	add	r3, sp, #72	; 0x48
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	0005      	movs	r5, r0
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	ab13      	add	r3, sp, #76	; 0x4c
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	000e      	movs	r6, r1
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	ab14      	add	r3, sp, #80	; 0x50
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	9302      	str	r3, [sp, #8]
 8004250:	ab15      	add	r3, sp, #84	; 0x54
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	9303      	str	r3, [sp, #12]
 8004256:	ab16      	add	r3, sp, #88	; 0x58
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	9308      	str	r3, [sp, #32]
 800425c:	ab17      	add	r3, sp, #92	; 0x5c
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	9309      	str	r3, [sp, #36]	; 0x24
 8004262:	2319      	movs	r3, #25
 8004264:	189b      	adds	r3, r3, r2
 8004266:	7fdb      	ldrb	r3, [r3, #31]
 8004268:	9306      	str	r3, [sp, #24]
 800426a:	231d      	movs	r3, #29
 800426c:	189b      	adds	r3, r3, r2
 800426e:	7fdb      	ldrb	r3, [r3, #31]
 8004270:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 8004272:	f7ff ff77 	bl	8004164 <SX1276SetModem>
    switch( modem )
 8004276:	2d00      	cmp	r5, #0
 8004278:	d003      	beq.n	8004282 <SX1276SetRxConfig+0x5a>
 800427a:	2d01      	cmp	r5, #1
 800427c:	d068      	beq.n	8004350 <SX1276SetRxConfig+0x128>
}
 800427e:	b00b      	add	sp, #44	; 0x2c
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004282:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004284:	4d98      	ldr	r5, [pc, #608]	; (80044e8 <SX1276SetRxConfig+0x2c0>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004286:	9a01      	ldr	r2, [sp, #4]
 8004288:	1ceb      	adds	r3, r5, #3
 800428a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800428c:	9a02      	ldr	r2, [sp, #8]
 800428e:	1d2b      	adds	r3, r5, #4
 8004290:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004292:	9a03      	ldr	r2, [sp, #12]
 8004294:	1d6b      	adds	r3, r5, #5
 8004296:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004298:	9a06      	ldr	r2, [sp, #24]
 800429a:	1dab      	adds	r3, r5, #6
 800429c:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800429e:	9a07      	ldr	r2, [sp, #28]
 80042a0:	1deb      	adds	r3, r5, #7
 80042a2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80042a4:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042a6:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80042a8:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042aa:	9b04      	ldr	r3, [sp, #16]
 80042ac:	0021      	movs	r1, r4
 80042ae:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 80042b0:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80042b2:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80042b4:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042b6:	f7fb ff4d 	bl	8000154 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80042ba:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042bc:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80042be:	488b      	ldr	r0, [pc, #556]	; (80044ec <SX1276SetRxConfig+0x2c4>)
 80042c0:	f7fb ff48 	bl	8000154 <__udivsi3>
 80042c4:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80042c6:	0a01      	lsrs	r1, r0, #8
 80042c8:	b2c9      	uxtb	r1, r1
 80042ca:	2002      	movs	r0, #2
 80042cc:	f7ff fccf 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80042d0:	b2e1      	uxtb	r1, r4
 80042d2:	2003      	movs	r0, #3
 80042d4:	f7ff fccb 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80042d8:	0030      	movs	r0, r6
 80042da:	f7ff fc1f 	bl	8003b1c <GetFskBandwidthRegValue>
 80042de:	0001      	movs	r1, r0
 80042e0:	2012      	movs	r0, #18
 80042e2:	f7ff fcc4 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80042e6:	0038      	movs	r0, r7
 80042e8:	f7ff fc18 	bl	8003b1c <GetFskBandwidthRegValue>
 80042ec:	0001      	movs	r1, r0
 80042ee:	2013      	movs	r0, #19
 80042f0:	f7ff fcbd 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80042f4:	9b00      	ldr	r3, [sp, #0]
 80042f6:	2025      	movs	r0, #37	; 0x25
 80042f8:	0a19      	lsrs	r1, r3, #8
 80042fa:	f7ff fcb8 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80042fe:	466b      	mov	r3, sp
 8004300:	2026      	movs	r0, #38	; 0x26
 8004302:	7819      	ldrb	r1, [r3, #0]
 8004304:	f7ff fcb3 	bl	8003c6e <SX1276Write>
            if( fixLen == 1 )
 8004308:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800430a:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800430c:	2b00      	cmp	r3, #0
 800430e:	d100      	bne.n	8004312 <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8004310:	21ff      	movs	r1, #255	; 0xff
 8004312:	2032      	movs	r0, #50	; 0x32
 8004314:	f7ff fcab 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004318:	2030      	movs	r0, #48	; 0x30
 800431a:	f7ff fcf3 	bl	8003d04 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800431e:	216f      	movs	r1, #111	; 0x6f
 8004320:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004322:	2100      	movs	r1, #0
 8004324:	9b01      	ldr	r3, [sp, #4]
 8004326:	428b      	cmp	r3, r1
 8004328:	d100      	bne.n	800432c <SX1276SetRxConfig+0x104>
 800432a:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004330:	4318      	orrs	r0, r3
 8004332:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8004334:	b2c9      	uxtb	r1, r1
 8004336:	2030      	movs	r0, #48	; 0x30
 8004338:	f7ff fc99 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800433c:	2031      	movs	r0, #49	; 0x31
 800433e:	f7ff fce1 	bl	8003d04 <SX1276Read>
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	4301      	orrs	r1, r0
 8004346:	2031      	movs	r0, #49	; 0x31
 8004348:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800434a:	f7ff fc90 	bl	8003c6e <SX1276Write>
}
 800434e:	e796      	b.n	800427e <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 8004350:	2e02      	cmp	r6, #2
 8004352:	d900      	bls.n	8004356 <SX1276SetRxConfig+0x12e>
                while( 1 );
 8004354:	e7fe      	b.n	8004354 <SX1276SetRxConfig+0x12c>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004356:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <SX1276SetRxConfig+0x2c0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8004358:	9905      	ldr	r1, [sp, #20]
 800435a:	001a      	movs	r2, r3
 800435c:	324d      	adds	r2, #77	; 0x4d
 800435e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004360:	001a      	movs	r2, r3
 8004362:	9900      	ldr	r1, [sp, #0]
 8004364:	324e      	adds	r2, #78	; 0x4e
 8004366:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004368:	001a      	movs	r2, r3
 800436a:	9901      	ldr	r1, [sp, #4]
 800436c:	3250      	adds	r2, #80	; 0x50
 800436e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8004370:	001a      	movs	r2, r3
 8004372:	9902      	ldr	r1, [sp, #8]
 8004374:	3251      	adds	r2, #81	; 0x51
 8004376:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004378:	001a      	movs	r2, r3
 800437a:	9903      	ldr	r1, [sp, #12]
 800437c:	3252      	adds	r2, #82	; 0x52
 800437e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8004380:	001a      	movs	r2, r3
 8004382:	9908      	ldr	r1, [sp, #32]
 8004384:	3253      	adds	r2, #83	; 0x53
 8004386:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004388:	001a      	movs	r2, r3
 800438a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800438c:	3254      	adds	r2, #84	; 0x54
 800438e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004390:	001a      	movs	r2, r3
 8004392:	9906      	ldr	r1, [sp, #24]
 8004394:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 8004396:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004398:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800439a:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800439c:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800439e:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80043a0:	3356      	adds	r3, #86	; 0x56
 80043a2:	2506      	movs	r5, #6
 80043a4:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 80043a6:	2c06      	cmp	r4, #6
 80043a8:	d303      	bcc.n	80043b2 <SX1276SetRxConfig+0x18a>
 80043aa:	0025      	movs	r5, r4
 80043ac:	2c0c      	cmp	r4, #12
 80043ae:	d900      	bls.n	80043b2 <SX1276SetRxConfig+0x18a>
 80043b0:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80043b2:	2f07      	cmp	r7, #7
 80043b4:	d17d      	bne.n	80044b2 <SX1276SetRxConfig+0x28a>
 80043b6:	002a      	movs	r2, r5
 80043b8:	2300      	movs	r3, #0
 80043ba:	2101      	movs	r1, #1
 80043bc:	3a0b      	subs	r2, #11
 80043be:	4291      	cmp	r1, r2
 80043c0:	415b      	adcs	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80043c6:	201d      	movs	r0, #29
 80043c8:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043ca:	4e47      	ldr	r6, [pc, #284]	; (80044e8 <SX1276SetRxConfig+0x2c0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80043cc:	f7ff fc9a 	bl	8003d04 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043d0:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043d2:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043d4:	0059      	lsls	r1, r3, #1
 80043d6:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80043d8:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043da:	4319      	orrs	r1, r3
 80043dc:	013b      	lsls	r3, r7, #4
 80043de:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043e0:	b2c9      	uxtb	r1, r1
 80043e2:	f7ff fc44 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80043e6:	201e      	movs	r0, #30
 80043e8:	f7ff fc8c 	bl	8003d04 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80043f0:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80043f2:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80043f4:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80043f6:	4319      	orrs	r1, r3
 80043f8:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80043fa:	2508      	movs	r5, #8
 80043fc:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 80043fe:	4301      	orrs	r1, r0
 8004400:	b2c9      	uxtb	r1, r1
 8004402:	201e      	movs	r0, #30
 8004404:	f7ff fc33 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004408:	2026      	movs	r0, #38	; 0x26
 800440a:	f7ff fc7b 	bl	8003d04 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004410:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004412:	7819      	ldrb	r1, [r3, #0]
 8004414:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004416:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	2026      	movs	r0, #38	; 0x26
 800441c:	f7ff fc27 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8004420:	466b      	mov	r3, sp
 8004422:	201f      	movs	r0, #31
 8004424:	7c19      	ldrb	r1, [r3, #16]
 8004426:	f7ff fc22 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800442a:	9b00      	ldr	r3, [sp, #0]
 800442c:	2020      	movs	r0, #32
 800442e:	0a19      	lsrs	r1, r3, #8
 8004430:	f7ff fc1d 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004434:	466b      	mov	r3, sp
 8004436:	2021      	movs	r0, #33	; 0x21
 8004438:	7819      	ldrb	r1, [r3, #0]
 800443a:	f7ff fc18 	bl	8003c6e <SX1276Write>
            if( fixLen == 1 )
 800443e:	9b01      	ldr	r3, [sp, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8004444:	2022      	movs	r0, #34	; 0x22
 8004446:	9902      	ldr	r1, [sp, #8]
 8004448:	f7ff fc11 	bl	8003c6e <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800444c:	0033      	movs	r3, r6
 800444e:	3353      	adds	r3, #83	; 0x53
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00f      	beq.n	8004476 <SX1276SetRxConfig+0x24e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004456:	2044      	movs	r0, #68	; 0x44
 8004458:	f7ff fc54 	bl	8003d04 <SX1276Read>
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	4249      	negs	r1, r1
 8004460:	4301      	orrs	r1, r0
 8004462:	b2c9      	uxtb	r1, r1
 8004464:	2044      	movs	r0, #68	; 0x44
 8004466:	f7ff fc02 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800446a:	0033      	movs	r3, r6
 800446c:	3354      	adds	r3, #84	; 0x54
 800446e:	2024      	movs	r0, #36	; 0x24
 8004470:	7819      	ldrb	r1, [r3, #0]
 8004472:	f7ff fbfc 	bl	8003c6e <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004476:	2f09      	cmp	r7, #9
 8004478:	d127      	bne.n	80044ca <SX1276SetRxConfig+0x2a2>
 800447a:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <SX1276SetRxConfig+0x2cc>)
 800447c:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800447e:	2102      	movs	r1, #2
 8004480:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004482:	429a      	cmp	r2, r3
 8004484:	d91d      	bls.n	80044c2 <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004486:	f7ff fbf2 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800448a:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800448c:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800448e:	f7ff fbee 	bl	8003c6e <SX1276Write>
            if( datarate == 6 )
 8004492:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004494:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8004496:	2c06      	cmp	r4, #6
 8004498:	d81a      	bhi.n	80044d0 <SX1276SetRxConfig+0x2a8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800449a:	f7ff fc33 	bl	8003d04 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800449e:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044a0:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044a2:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80044a4:	b2c9      	uxtb	r1, r1
 80044a6:	2031      	movs	r0, #49	; 0x31
 80044a8:	f7ff fbe1 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044ac:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044ae:	2037      	movs	r0, #55	; 0x37
 80044b0:	e74b      	b.n	800434a <SX1276SetRxConfig+0x122>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80044b2:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80044b4:	2f08      	cmp	r7, #8
 80044b6:	d185      	bne.n	80043c4 <SX1276SetRxConfig+0x19c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80044b8:	330b      	adds	r3, #11
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	419b      	sbcs	r3, r3
 80044be:	425b      	negs	r3, r3
 80044c0:	e780      	b.n	80043c4 <SX1276SetRxConfig+0x19c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80044c2:	f7ff fbd4 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80044c6:	217f      	movs	r1, #127	; 0x7f
 80044c8:	e7e0      	b.n	800448c <SX1276SetRxConfig+0x264>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80044ca:	2103      	movs	r1, #3
 80044cc:	2036      	movs	r0, #54	; 0x36
 80044ce:	e7de      	b.n	800448e <SX1276SetRxConfig+0x266>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044d0:	f7ff fc18 	bl	8003d04 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044d4:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044d6:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044d8:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80044da:	b2c9      	uxtb	r1, r1
 80044dc:	2031      	movs	r0, #49	; 0x31
 80044de:	f7ff fbc6 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044e2:	210a      	movs	r1, #10
 80044e4:	e7e3      	b.n	80044ae <SX1276SetRxConfig+0x286>
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	200002a8 	.word	0x200002a8
 80044ec:	01e84800 	.word	0x01e84800
 80044f0:	200002f4 	.word	0x200002f4
 80044f4:	1f4add40 	.word	0x1f4add40

080044f8 <SX1276SetSleep>:
{
 80044f8:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80044fa:	4c0a      	ldr	r4, [pc, #40]	; (8004524 <SX1276SetSleep+0x2c>)
 80044fc:	1d20      	adds	r0, r4, #4
 80044fe:	f002 fe19 	bl	8007134 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8004502:	0020      	movs	r0, r4
 8004504:	301c      	adds	r0, #28
 8004506:	f002 fe15 	bl	8007134 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800450a:	4c07      	ldr	r4, [pc, #28]	; (8004528 <SX1276SetSleep+0x30>)
 800450c:	0020      	movs	r0, r4
 800450e:	3068      	adds	r0, #104	; 0x68
 8004510:	f002 fe10 	bl	8007134 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004514:	f7ff fe16 	bl	8004144 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 8004518:	2000      	movs	r0, #0
 800451a:	f7fc fc37 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800451e:	2300      	movs	r3, #0
 8004520:	7123      	strb	r3, [r4, #4]
}
 8004522:	bd10      	pop	{r4, pc}
 8004524:	20000328 	.word	0x20000328
 8004528:	200002a8 	.word	0x200002a8

0800452c <SX1276IsChannelFree>:
{
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	0007      	movs	r7, r0
 8004530:	000c      	movs	r4, r1
 8004532:	0016      	movs	r6, r2
 8004534:	001d      	movs	r5, r3
    SX1276SetSleep( );
 8004536:	f7ff ffdf 	bl	80044f8 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800453a:	2000      	movs	r0, #0
 800453c:	f7ff fe12 	bl	8004164 <SX1276SetModem>
    SX1276SetChannel( freq );
 8004540:	0038      	movs	r0, r7
 8004542:	f7ff fb9d 	bl	8003c80 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8004546:	0020      	movs	r0, r4
 8004548:	f7ff fae8 	bl	8003b1c <GetFskBandwidthRegValue>
 800454c:	0004      	movs	r4, r0
 800454e:	0001      	movs	r1, r0
 8004550:	2012      	movs	r0, #18
 8004552:	f7ff fb8c 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8004556:	0021      	movs	r1, r4
 8004558:	2013      	movs	r0, #19
 800455a:	f7ff fb88 	bl	8003c6e <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800455e:	2005      	movs	r0, #5
 8004560:	f7ff fc72 	bl	8003e48 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8004564:	2001      	movs	r0, #1
 8004566:	f7fc fe75 	bl	8001254 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800456a:	f002 fd9f 	bl	80070ac <UTIL_TIMER_GetCurrentTime>
 800456e:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8004570:	0020      	movs	r0, r4
 8004572:	f002 fda5 	bl	80070c0 <UTIL_TIMER_GetElapsedTime>
 8004576:	42a8      	cmp	r0, r5
 8004578:	d304      	bcc.n	8004584 <SX1276IsChannelFree+0x58>
    bool status = true;
 800457a:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800457c:	f7ff ffbc 	bl	80044f8 <SX1276SetSleep>
}
 8004580:	0020      	movs	r0, r4
 8004582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8004584:	2000      	movs	r0, #0
 8004586:	f7ff fdbb 	bl	8004100 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800458a:	42b0      	cmp	r0, r6
 800458c:	ddf0      	ble.n	8004570 <SX1276IsChannelFree+0x44>
            status = false;
 800458e:	2400      	movs	r4, #0
 8004590:	e7f4      	b.n	800457c <SX1276IsChannelFree+0x50>

08004592 <SX1276Random>:
{
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8004596:	2001      	movs	r0, #1
 8004598:	f7ff fde4 	bl	8004164 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800459c:	21ff      	movs	r1, #255	; 0xff
 800459e:	2011      	movs	r0, #17
 80045a0:	f7ff fb65 	bl	8003c6e <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 80045a4:	2005      	movs	r0, #5
 80045a6:	f7ff fc4f 	bl	8003e48 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 80045aa:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 80045ac:	2601      	movs	r6, #1
 80045ae:	0030      	movs	r0, r6
 80045b0:	f7fc fe50 	bl	8001254 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80045b4:	202c      	movs	r0, #44	; 0x2c
 80045b6:	f7ff fba5 	bl	8003d04 <SX1276Read>
 80045ba:	4030      	ands	r0, r6
 80045bc:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 80045be:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80045c0:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80045c2:	2c20      	cmp	r4, #32
 80045c4:	d1f3      	bne.n	80045ae <SX1276Random+0x1c>
    SX1276SetSleep( );
 80045c6:	f7ff ff97 	bl	80044f8 <SX1276SetSleep>
}
 80045ca:	0028      	movs	r0, r5
 80045cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080045d0 <SX1276SetTxConfig>:
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b08d      	sub	sp, #52	; 0x34
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	ab12      	add	r3, sp, #72	; 0x48
 80045d8:	cb80      	ldmia	r3!, {r7}
 80045da:	9204      	str	r2, [sp, #16]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	0006      	movs	r6, r0
 80045e0:	9307      	str	r3, [sp, #28]
 80045e2:	ab14      	add	r3, sp, #80	; 0x50
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	000c      	movs	r4, r1
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	ab15      	add	r3, sp, #84	; 0x54
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	ab16      	add	r3, sp, #88	; 0x58
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	9303      	str	r3, [sp, #12]
 80045f6:	ab17      	add	r3, sp, #92	; 0x5c
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	9308      	str	r3, [sp, #32]
 80045fc:	ab18      	add	r3, sp, #96	; 0x60
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	930a      	str	r3, [sp, #40]	; 0x28
 8004602:	ab19      	add	r3, sp, #100	; 0x64
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8004608:	4bb6      	ldr	r3, [pc, #728]	; (80048e4 <SX1276SetTxConfig+0x314>)
 800460a:	791d      	ldrb	r5, [r3, #4]
 800460c:	2d01      	cmp	r5, #1
 800460e:	d106      	bne.n	800461e <SX1276SetTxConfig+0x4e>
 8004610:	2800      	cmp	r0, #0
 8004612:	d104      	bne.n	800461e <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8004614:	f7ff ff70 	bl	80044f8 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8004618:	0028      	movs	r0, r5
 800461a:	f7fc fe1b 	bl	8001254 <HAL_Delay>
    SX1276SetModem( modem );
 800461e:	0030      	movs	r0, r6
 8004620:	f7ff fda0 	bl	8004164 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8004624:	2009      	movs	r0, #9
 8004626:	f7ff fb6d 	bl	8003d04 <SX1276Read>
 800462a:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800462c:	204d      	movs	r0, #77	; 0x4d
 800462e:	f7ff fb69 	bl	8003d04 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8004632:	4bac      	ldr	r3, [pc, #688]	; (80048e4 <SX1276SetTxConfig+0x314>)
    paDac = SX1276Read( REG_PADAC );
 8004634:	0005      	movs	r5, r0
 8004636:	9006      	str	r0, [sp, #24]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8004638:	6898      	ldr	r0, [r3, #8]
 800463a:	f7fc fd1d 	bl	8001078 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800463e:	2800      	cmp	r0, #0
 8004640:	d029      	beq.n	8004696 <SX1276SetTxConfig+0xc6>
 8004642:	3802      	subs	r0, #2
 8004644:	b2c3      	uxtb	r3, r0
 8004646:	2080      	movs	r0, #128	; 0x80
 8004648:	2b01      	cmp	r3, #1
 800464a:	d900      	bls.n	800464e <SX1276SetTxConfig+0x7e>
    uint8_t board_config = 0;
 800464c:	2000      	movs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800464e:	237f      	movs	r3, #127	; 0x7f
 8004650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004652:	401a      	ands	r2, r3
 8004654:	4310      	orrs	r0, r2
 8004656:	b241      	sxtb	r1, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004658:	0603      	lsls	r3, r0, #24
 800465a:	d52a      	bpl.n	80046b2 <SX1276SetTxConfig+0xe2>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800465c:	230f      	movs	r3, #15
 800465e:	2507      	movs	r5, #7
 8004660:	4399      	bics	r1, r3
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8004662:	9b06      	ldr	r3, [sp, #24]
        if( power > 17 )
 8004664:	2c11      	cmp	r4, #17
 8004666:	dd1a      	ble.n	800469e <SX1276SetTxConfig+0xce>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8004668:	431d      	orrs	r5, r3
 800466a:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800466c:	1c23      	adds	r3, r4, #0
 800466e:	2c14      	cmp	r4, #20
 8004670:	dd00      	ble.n	8004674 <SX1276SetTxConfig+0xa4>
 8004672:	2314      	movs	r3, #20
 8004674:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8004676:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 8004678:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800467a:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800467c:	f7ff faf7 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8004680:	0029      	movs	r1, r5
 8004682:	204d      	movs	r0, #77	; 0x4d
 8004684:	f7ff faf3 	bl	8003c6e <SX1276Write>
    switch( modem )
 8004688:	2e00      	cmp	r6, #0
 800468a:	d021      	beq.n	80046d0 <SX1276SetTxConfig+0x100>
 800468c:	2e01      	cmp	r6, #1
 800468e:	d100      	bne.n	8004692 <SX1276SetTxConfig+0xc2>
 8004690:	e081      	b.n	8004796 <SX1276SetTxConfig+0x1c6>
}
 8004692:	b00d      	add	sp, #52	; 0x34
 8004694:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 8004696:	2c0e      	cmp	r4, #14
 8004698:	ddd9      	ble.n	800464e <SX1276SetTxConfig+0x7e>
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 800469a:	2080      	movs	r0, #128	; 0x80
 800469c:	e7d7      	b.n	800464e <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800469e:	43ab      	bics	r3, r5
 80046a0:	2504      	movs	r5, #4
 80046a2:	432b      	orrs	r3, r5
 80046a4:	b2dd      	uxtb	r5, r3
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80046a6:	1c23      	adds	r3, r4, #0
 80046a8:	2c02      	cmp	r4, #2
 80046aa:	da00      	bge.n	80046ae <SX1276SetTxConfig+0xde>
 80046ac:	2302      	movs	r3, #2
 80046ae:	3b02      	subs	r3, #2
 80046b0:	e7e1      	b.n	8004676 <SX1276SetTxConfig+0xa6>
        if( power > 0 )
 80046b2:	2c00      	cmp	r4, #0
 80046b4:	dd05      	ble.n	80046c2 <SX1276SetTxConfig+0xf2>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80046b6:	1c23      	adds	r3, r4, #0
 80046b8:	2c0f      	cmp	r4, #15
 80046ba:	dd00      	ble.n	80046be <SX1276SetTxConfig+0xee>
 80046bc:	230f      	movs	r3, #15
 80046be:	2170      	movs	r1, #112	; 0x70
 80046c0:	e7d9      	b.n	8004676 <SX1276SetTxConfig+0xa6>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80046c2:	1c21      	adds	r1, r4, #0
 80046c4:	1d23      	adds	r3, r4, #4
 80046c6:	da01      	bge.n	80046cc <SX1276SetTxConfig+0xfc>
 80046c8:	4b87      	ldr	r3, [pc, #540]	; (80048e8 <SX1276SetTxConfig+0x318>)
 80046ca:	7819      	ldrb	r1, [r3, #0]
 80046cc:	3104      	adds	r1, #4
 80046ce:	e7d3      	b.n	8004678 <SX1276SetTxConfig+0xa8>
            SX1276.Settings.Fsk.Power = power;
 80046d0:	4b84      	ldr	r3, [pc, #528]	; (80048e4 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80046d2:	9a04      	ldr	r2, [sp, #16]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80046d4:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 80046d6:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80046d8:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.Power = power;
 80046da:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80046dc:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80046de:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80046e0:	9804      	ldr	r0, [sp, #16]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80046e2:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80046e4:	1cda      	adds	r2, r3, #3
 80046e6:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80046e8:	9903      	ldr	r1, [sp, #12]
 80046ea:	1d5a      	adds	r2, r3, #5
 80046ec:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80046ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046f0:	1d9a      	adds	r2, r3, #6
 80046f2:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80046f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 80046f6:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80046fa:	497c      	ldr	r1, [pc, #496]	; (80048ec <SX1276SetTxConfig+0x31c>)
 80046fc:	f7fb fdb0 	bl	8000260 <__aeabi_uidivmod>
 8004700:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <SX1276SetTxConfig+0x320>)
 8004702:	0208      	lsls	r0, r1, #8
 8004704:	18c0      	adds	r0, r0, r3
 8004706:	4979      	ldr	r1, [pc, #484]	; (80048ec <SX1276SetTxConfig+0x31c>)
 8004708:	f7fb fd24 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800470c:	4977      	ldr	r1, [pc, #476]	; (80048ec <SX1276SetTxConfig+0x31c>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800470e:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004710:	9804      	ldr	r0, [sp, #16]
 8004712:	f7fb fd1f 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004716:	0200      	lsls	r0, r0, #8
 8004718:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800471a:	0a21      	lsrs	r1, r4, #8
 800471c:	2004      	movs	r0, #4
 800471e:	b2c9      	uxtb	r1, r1
 8004720:	f7ff faa5 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8004724:	b2e1      	uxtb	r1, r4
 8004726:	2005      	movs	r0, #5
 8004728:	f7ff faa1 	bl	8003c6e <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800472c:	0039      	movs	r1, r7
 800472e:	4871      	ldr	r0, [pc, #452]	; (80048f4 <SX1276SetTxConfig+0x324>)
 8004730:	f7fb fd10 	bl	8000154 <__udivsi3>
 8004734:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004736:	0a01      	lsrs	r1, r0, #8
 8004738:	b2c9      	uxtb	r1, r1
 800473a:	2002      	movs	r0, #2
 800473c:	f7ff fa97 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004740:	2003      	movs	r0, #3
 8004742:	b2e1      	uxtb	r1, r4
 8004744:	f7ff fa93 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	2025      	movs	r0, #37	; 0x25
 800474c:	0a19      	lsrs	r1, r3, #8
 800474e:	f7ff fa8e 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8004752:	466b      	mov	r3, sp
 8004754:	2026      	movs	r0, #38	; 0x26
 8004756:	7919      	ldrb	r1, [r3, #4]
 8004758:	f7ff fa89 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800475c:	2030      	movs	r0, #48	; 0x30
 800475e:	f7ff fad1 	bl	8003d04 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8004762:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004764:	9b02      	ldr	r3, [sp, #8]
                           RF_PACKETCONFIG1_CRC_MASK &
 8004766:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004768:	0031      	movs	r1, r6
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <SX1276SetTxConfig+0x1a2>
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004776:	4318      	orrs	r0, r3
 8004778:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800477a:	b2c9      	uxtb	r1, r1
 800477c:	2030      	movs	r0, #48	; 0x30
 800477e:	f7ff fa76 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004782:	2031      	movs	r0, #49	; 0x31
 8004784:	f7ff fabe 	bl	8003d04 <SX1276Read>
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	4301      	orrs	r1, r0
 800478c:	2031      	movs	r0, #49	; 0x31
 800478e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004790:	f7ff fa6d 	bl	8003c6e <SX1276Write>
}
 8004794:	e77d      	b.n	8004692 <SX1276SetTxConfig+0xc2>
            SX1276.Settings.LoRa.Power = power;
 8004796:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <SX1276SetTxConfig+0x314>)
 8004798:	001a      	movs	r2, r3
 800479a:	3240      	adds	r2, #64	; 0x40
 800479c:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800479e:	9a05      	ldr	r2, [sp, #20]
 80047a0:	2a02      	cmp	r2, #2
 80047a2:	d900      	bls.n	80047a6 <SX1276SetTxConfig+0x1d6>
                while( 1 );
 80047a4:	e7fe      	b.n	80047a4 <SX1276SetTxConfig+0x1d4>
            SX1276.Settings.LoRa.Coderate = coderate;
 80047a6:	001a      	movs	r2, r3
 80047a8:	9907      	ldr	r1, [sp, #28]
 80047aa:	324d      	adds	r2, #77	; 0x4d
 80047ac:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80047ae:	001a      	movs	r2, r3
 80047b0:	9901      	ldr	r1, [sp, #4]
 80047b2:	324e      	adds	r2, #78	; 0x4e
 80047b4:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80047b6:	001a      	movs	r2, r3
 80047b8:	9902      	ldr	r1, [sp, #8]
 80047ba:	3250      	adds	r2, #80	; 0x50
 80047bc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80047be:	001a      	movs	r2, r3
 80047c0:	9908      	ldr	r1, [sp, #32]
 80047c2:	3253      	adds	r2, #83	; 0x53
 80047c4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80047c6:	001a      	movs	r2, r3
 80047c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047ca:	3254      	adds	r2, #84	; 0x54
 80047cc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80047ce:	001a      	movs	r2, r3
 80047d0:	9903      	ldr	r1, [sp, #12]
 80047d2:	3252      	adds	r2, #82	; 0x52
 80047d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80047d6:	001a      	movs	r2, r3
 80047d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047da:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80047dc:	9d05      	ldr	r5, [sp, #20]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80047de:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80047e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 80047e2:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80047e4:	2406      	movs	r4, #6
 80047e6:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80047e8:	649f      	str	r7, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80047ea:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 80047ec:	2f06      	cmp	r7, #6
 80047ee:	d303      	bcc.n	80047f8 <SX1276SetTxConfig+0x228>
 80047f0:	003c      	movs	r4, r7
 80047f2:	2f0c      	cmp	r7, #12
 80047f4:	d900      	bls.n	80047f8 <SX1276SetTxConfig+0x228>
 80047f6:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80047f8:	2d07      	cmp	r5, #7
 80047fa:	d160      	bne.n	80048be <SX1276SetTxConfig+0x2ee>
 80047fc:	0022      	movs	r2, r4
 80047fe:	2300      	movs	r3, #0
 8004800:	2101      	movs	r1, #1
 8004802:	3a0b      	subs	r2, #11
 8004804:	4291      	cmp	r1, r2
 8004806:	415b      	adcs	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	4e36      	ldr	r6, [pc, #216]	; (80048e4 <SX1276SetTxConfig+0x314>)
 800480c:	0032      	movs	r2, r6
 800480e:	324c      	adds	r2, #76	; 0x4c
 8004810:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004812:	9b08      	ldr	r3, [sp, #32]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00f      	beq.n	8004838 <SX1276SetTxConfig+0x268>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004818:	2044      	movs	r0, #68	; 0x44
 800481a:	f7ff fa73 	bl	8003d04 <SX1276Read>
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	4249      	negs	r1, r1
 8004822:	4301      	orrs	r1, r0
 8004824:	b2c9      	uxtb	r1, r1
 8004826:	2044      	movs	r0, #68	; 0x44
 8004828:	f7ff fa21 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800482c:	0033      	movs	r3, r6
 800482e:	3354      	adds	r3, #84	; 0x54
 8004830:	2024      	movs	r0, #36	; 0x24
 8004832:	7819      	ldrb	r1, [r3, #0]
 8004834:	f7ff fa1b 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004838:	201d      	movs	r0, #29
 800483a:	f7ff fa63 	bl	8003d04 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800483e:	9b07      	ldr	r3, [sp, #28]
 8004840:	012d      	lsls	r5, r5, #4
 8004842:	0059      	lsls	r1, r3, #1
 8004844:	9b02      	ldr	r3, [sp, #8]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004846:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004848:	430b      	orrs	r3, r1
 800484a:	0019      	movs	r1, r3
 800484c:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800484e:	b2c9      	uxtb	r1, r1
 8004850:	f7ff fa0d 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004854:	201e      	movs	r0, #30
 8004856:	f7ff fa55 	bl	8003d04 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800485a:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	0124      	lsls	r4, r4, #4
 8004860:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004862:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8004864:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004866:	4321      	orrs	r1, r4
 8004868:	b2c9      	uxtb	r1, r1
 800486a:	201e      	movs	r0, #30
 800486c:	f7ff f9ff 	bl	8003c6e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004870:	2026      	movs	r0, #38	; 0x26
 8004872:	f7ff fa47 	bl	8003d04 <SX1276Read>
 8004876:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004878:	364c      	adds	r6, #76	; 0x4c
 800487a:	7831      	ldrb	r1, [r6, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800487c:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800487e:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004880:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004882:	b2c9      	uxtb	r1, r1
 8004884:	2026      	movs	r0, #38	; 0x26
 8004886:	f7ff f9f2 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	2020      	movs	r0, #32
 800488e:	0a19      	lsrs	r1, r3, #8
 8004890:	f7ff f9ed 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8004894:	466b      	mov	r3, sp
 8004896:	2021      	movs	r0, #33	; 0x21
 8004898:	7919      	ldrb	r1, [r3, #4]
 800489a:	f7ff f9e8 	bl	8003c6e <SX1276Write>
            if( datarate == 6 )
 800489e:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048a0:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80048a2:	2f06      	cmp	r7, #6
 80048a4:	d813      	bhi.n	80048ce <SX1276SetTxConfig+0x2fe>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048a6:	f7ff fa2d 	bl	8003d04 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048aa:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048ac:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048ae:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80048b0:	b2c9      	uxtb	r1, r1
 80048b2:	2031      	movs	r0, #49	; 0x31
 80048b4:	f7ff f9db 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80048b8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80048ba:	2037      	movs	r0, #55	; 0x37
 80048bc:	e768      	b.n	8004790 <SX1276SetTxConfig+0x1c0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80048be:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80048c0:	2d08      	cmp	r5, #8
 80048c2:	d1a2      	bne.n	800480a <SX1276SetTxConfig+0x23a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80048c4:	330b      	adds	r3, #11
 80048c6:	42bb      	cmp	r3, r7
 80048c8:	419b      	sbcs	r3, r3
 80048ca:	425b      	negs	r3, r3
 80048cc:	e79d      	b.n	800480a <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048ce:	f7ff fa19 	bl	8003d04 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048d2:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048d4:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048d6:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80048d8:	b2c9      	uxtb	r1, r1
 80048da:	2031      	movs	r0, #49	; 0x31
 80048dc:	f7ff f9c7 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80048e0:	210a      	movs	r1, #10
 80048e2:	e7ea      	b.n	80048ba <SX1276SetTxConfig+0x2ea>
 80048e4:	200002a8 	.word	0x200002a8
 80048e8:	080086b5 	.word	0x080086b5
 80048ec:	00003d09 	.word	0x00003d09
 80048f0:	00001e84 	.word	0x00001e84
 80048f4:	01e84800 	.word	0x01e84800

080048f8 <SX1276SetTxContinuousWave>:
{
 80048f8:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 80048fa:	24fa      	movs	r4, #250	; 0xfa
{
 80048fc:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 80048fe:	00a4      	lsls	r4, r4, #2
 8004900:	4354      	muls	r4, r2
{
 8004902:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8004904:	f7ff f9bc 	bl	8003c80 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004908:	2305      	movs	r3, #5
 800490a:	9302      	str	r3, [sp, #8]
 800490c:	2396      	movs	r3, #150	; 0x96
 800490e:	2000      	movs	r0, #0
 8004910:	015b      	lsls	r3, r3, #5
 8004912:	0002      	movs	r2, r0
 8004914:	0029      	movs	r1, r5
 8004916:	9007      	str	r0, [sp, #28]
 8004918:	9006      	str	r0, [sp, #24]
 800491a:	9005      	str	r0, [sp, #20]
 800491c:	9004      	str	r0, [sp, #16]
 800491e:	9003      	str	r0, [sp, #12]
 8004920:	9001      	str	r0, [sp, #4]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	9408      	str	r4, [sp, #32]
 8004926:	0003      	movs	r3, r0
 8004928:	f7ff fe52 	bl	80045d0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800492c:	2031      	movs	r0, #49	; 0x31
 800492e:	f7ff f9e9 	bl	8003d04 <SX1276Read>
 8004932:	2540      	movs	r5, #64	; 0x40
 8004934:	43a8      	bics	r0, r5
 8004936:	b2c1      	uxtb	r1, r0
 8004938:	2031      	movs	r0, #49	; 0x31
 800493a:	f7ff f998 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800493e:	0028      	movs	r0, r5
 8004940:	21f0      	movs	r1, #240	; 0xf0
 8004942:	f7ff f994 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8004946:	21a0      	movs	r1, #160	; 0xa0
 8004948:	2041      	movs	r0, #65	; 0x41
 800494a:	f7ff f990 	bl	8003c6e <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800494e:	4d08      	ldr	r5, [pc, #32]	; (8004970 <SX1276SetTxContinuousWave+0x78>)
 8004950:	0021      	movs	r1, r4
 8004952:	351c      	adds	r5, #28
 8004954:	0028      	movs	r0, r5
 8004956:	f002 fc7b 	bl	8007250 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800495a:	2202      	movs	r2, #2
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800495e:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8004960:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8004962:	f002 fc3b 	bl	80071dc <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8004966:	2003      	movs	r0, #3
 8004968:	f7ff fa6e 	bl	8003e48 <SX1276SetOpMode.part.0>
}
 800496c:	b00b      	add	sp, #44	; 0x2c
 800496e:	bd30      	pop	{r4, r5, pc}
 8004970:	20000328 	.word	0x20000328
 8004974:	200002a8 	.word	0x200002a8

08004978 <RxChainCalibration>:
{
 8004978:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800497a:	2009      	movs	r0, #9
 800497c:	f7ff f9c2 	bl	8003d04 <SX1276Read>
 8004980:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8004982:	2006      	movs	r0, #6
 8004984:	f7ff f9be 	bl	8003d04 <SX1276Read>
 8004988:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800498a:	2007      	movs	r0, #7
 800498c:	f7ff f9ba 	bl	8003d04 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8004990:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8004992:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8004994:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8004996:	2008      	movs	r0, #8
 8004998:	f7ff f9b4 	bl	8003d04 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800499e:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80049a0:	b2c0      	uxtb	r0, r0
 80049a2:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80049a4:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80049a6:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80049a8:	3080      	adds	r0, #128	; 0x80
 80049aa:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80049ac:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80049ae:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 80049b0:	2009      	movs	r0, #9
 80049b2:	f7ff f95c 	bl	8003c6e <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80049b6:	203b      	movs	r0, #59	; 0x3b
 80049b8:	f7ff f9a4 	bl	8003d04 <SX1276Read>
 80049bc:	2140      	movs	r1, #64	; 0x40
 80049be:	4301      	orrs	r1, r0
 80049c0:	b2c9      	uxtb	r1, r1
 80049c2:	203b      	movs	r0, #59	; 0x3b
 80049c4:	f7ff f953 	bl	8003c6e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80049c8:	2620      	movs	r6, #32
 80049ca:	203b      	movs	r0, #59	; 0x3b
 80049cc:	f7ff f99a 	bl	8003d04 <SX1276Read>
 80049d0:	4230      	tst	r0, r6
 80049d2:	d1fa      	bne.n	80049ca <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80049d4:	480d      	ldr	r0, [pc, #52]	; (8004a0c <RxChainCalibration+0x94>)
 80049d6:	f7ff f953 	bl	8003c80 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80049da:	203b      	movs	r0, #59	; 0x3b
 80049dc:	f7ff f992 	bl	8003d04 <SX1276Read>
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	4301      	orrs	r1, r0
 80049e4:	b2c9      	uxtb	r1, r1
 80049e6:	203b      	movs	r0, #59	; 0x3b
 80049e8:	f7ff f941 	bl	8003c6e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80049ec:	2620      	movs	r6, #32
 80049ee:	203b      	movs	r0, #59	; 0x3b
 80049f0:	f7ff f988 	bl	8003d04 <SX1276Read>
 80049f4:	4230      	tst	r0, r6
 80049f6:	d1fa      	bne.n	80049ee <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80049f8:	0029      	movs	r1, r5
 80049fa:	2009      	movs	r0, #9
 80049fc:	f7ff f937 	bl	8003c6e <SX1276Write>
    SX1276SetChannel( initialFreq );
 8004a00:	0020      	movs	r0, r4
 8004a02:	f7ff f93d 	bl	8003c80 <SX1276SetChannel>
}
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	00003d09 	.word	0x00003d09
 8004a0c:	33bca100 	.word	0x33bca100

08004a10 <SX1276Init>:
{
 8004a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 8004a12:	4d21      	ldr	r5, [pc, #132]	; (8004a98 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8004a14:	2400      	movs	r4, #0
    RadioEvents = events;
 8004a16:	6028      	str	r0, [r5, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8004a18:	2101      	movs	r1, #1
 8004a1a:	0028      	movs	r0, r5
 8004a1c:	4e1f      	ldr	r6, [pc, #124]	; (8004a9c <SX1276Init+0x8c>)
 8004a1e:	0022      	movs	r2, r4
 8004a20:	0033      	movs	r3, r6
 8004a22:	9400      	str	r4, [sp, #0]
 8004a24:	4249      	negs	r1, r1
 8004a26:	301c      	adds	r0, #28
 8004a28:	f002 fb24 	bl	8007074 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	0033      	movs	r3, r6
 8004a30:	0022      	movs	r2, r4
 8004a32:	1d28      	adds	r0, r5, #4
 8004a34:	9400      	str	r4, [sp, #0]
 8004a36:	4249      	negs	r1, r1
 8004a38:	f002 fb1c 	bl	8007074 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8004a3c:	4d18      	ldr	r5, [pc, #96]	; (8004aa0 <SX1276Init+0x90>)
 8004a3e:	2101      	movs	r1, #1
 8004a40:	0028      	movs	r0, r5
 8004a42:	0033      	movs	r3, r6
 8004a44:	0022      	movs	r2, r4
 8004a46:	4249      	negs	r1, r1
 8004a48:	9400      	str	r4, [sp, #0]
 8004a4a:	3068      	adds	r0, #104	; 0x68
 8004a4c:	f002 fb12 	bl	8007074 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 8004a50:	2001      	movs	r0, #1
 8004a52:	f7fc f99b 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 8004a56:	f7fc fb39 	bl	80010cc <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 8004a5a:	f7ff ff8d 	bl	8004978 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004a5e:	f7ff fb71 	bl	8004144 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 8004a62:	4810      	ldr	r0, [pc, #64]	; (8004aa4 <SX1276Init+0x94>)
 8004a64:	f7fc fada 	bl	800101c <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004a68:	4e0f      	ldr	r6, [pc, #60]	; (8004aa8 <SX1276Init+0x98>)
 8004a6a:	0034      	movs	r4, r6
 8004a6c:	363c      	adds	r6, #60	; 0x3c
 8004a6e:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 8004a70:	7820      	ldrb	r0, [r4, #0]
 8004a72:	f7ff fb77 	bl	8004164 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004a76:	78a1      	ldrb	r1, [r4, #2]
 8004a78:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004a7a:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004a7c:	f7ff f8f7 	bl	8003c6e <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004a80:	42b4      	cmp	r4, r6
 8004a82:	d1f5      	bne.n	8004a70 <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7ff fb6d 	bl	8004164 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	712b      	strb	r3, [r5, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8004a8e:	f7fc f97b 	bl	8000d88 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8004a92:	3002      	adds	r0, #2
}
 8004a94:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	20000328 	.word	0x20000328
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	200002a8 	.word	0x200002a8
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	080083e0 	.word	0x080083e0

08004aac <SX1276OnTimeoutIrq>:
{
 8004aac:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004aae:	4c2a      	ldr	r4, [pc, #168]	; (8004b58 <SX1276OnTimeoutIrq+0xac>)
 8004ab0:	7923      	ldrb	r3, [r4, #4]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d002      	beq.n	8004abc <SX1276OnTimeoutIrq+0x10>
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d02a      	beq.n	8004b10 <SX1276OnTimeoutIrq+0x64>
}
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004abc:	7963      	ldrb	r3, [r4, #5]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d117      	bne.n	8004af2 <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004ac2:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004ac4:	210b      	movs	r1, #11
 8004ac6:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004ac8:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004aca:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004acc:	f7ff f8cf 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004ad0:	2110      	movs	r1, #16
 8004ad2:	203f      	movs	r0, #63	; 0x3f
 8004ad4:	f7ff f8cb 	bl	8003c6e <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004ad8:	1de3      	adds	r3, r4, #7
 8004ada:	7fdb      	ldrb	r3, [r3, #31]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004ae0:	200d      	movs	r0, #13
 8004ae2:	f7ff f90f 	bl	8003d04 <SX1276Read>
 8004ae6:	2140      	movs	r1, #64	; 0x40
 8004ae8:	4301      	orrs	r1, r0
 8004aea:	b2c9      	uxtb	r1, r1
 8004aec:	200d      	movs	r0, #13
 8004aee:	f7ff f8be 	bl	8003c6e <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004af2:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <SX1276OnTimeoutIrq+0xb0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0df      	beq.n	8004aba <SX1276OnTimeoutIrq+0xe>
 8004afa:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0dc      	beq.n	8004aba <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8004b00:	4798      	blx	r3
}
 8004b02:	e7da      	b.n	8004aba <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004b04:	0020      	movs	r0, r4
 8004b06:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 8004b08:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004b0a:	f002 fb13 	bl	8007134 <UTIL_TIMER_Stop>
 8004b0e:	e7f0      	b.n	8004af2 <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 8004b10:	f7fc fadc 	bl	80010cc <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 8004b14:	f7ff ff30 	bl	8004978 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b18:	f7ff fb14 	bl	8004144 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b1c:	4e10      	ldr	r6, [pc, #64]	; (8004b60 <SX1276OnTimeoutIrq+0xb4>)
 8004b1e:	0035      	movs	r5, r6
 8004b20:	363c      	adds	r6, #60	; 0x3c
 8004b22:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 8004b24:	7828      	ldrb	r0, [r5, #0]
 8004b26:	f7ff fb1d 	bl	8004164 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004b2a:	78a9      	ldrb	r1, [r5, #2]
 8004b2c:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b2e:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004b30:	f7ff f89d 	bl	8003c6e <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b34:	42b5      	cmp	r5, r6
 8004b36:	d1f5      	bne.n	8004b24 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7ff fb13 	bl	8004164 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8004b3e:	0023      	movs	r3, r4
 8004b40:	335c      	adds	r3, #92	; 0x5c
 8004b42:	7818      	ldrb	r0, [r3, #0]
 8004b44:	f7ff fb5e 	bl	8004204 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <SX1276OnTimeoutIrq+0xb0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0b2      	beq.n	8004aba <SX1276OnTimeoutIrq+0xe>
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	e7d1      	b.n	8004afc <SX1276OnTimeoutIrq+0x50>
 8004b58:	200002a8 	.word	0x200002a8
 8004b5c:	20000328 	.word	0x20000328
 8004b60:	080083e0 	.word	0x080083e0

08004b64 <SX1276OnDio0Irq>:
{
 8004b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8004b66:	466b      	mov	r3, sp
 8004b68:	1dde      	adds	r6, r3, #7
 8004b6a:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8004b6c:	4c8a      	ldr	r4, [pc, #552]	; (8004d98 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 8004b6e:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 8004b70:	7923      	ldrb	r3, [r4, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d003      	beq.n	8004b7e <SX1276OnDio0Irq+0x1a>
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d100      	bne.n	8004b7c <SX1276OnDio0Irq+0x18>
 8004b7a:	e0f8      	b.n	8004d6e <SX1276OnDio0Irq+0x20a>
}
 8004b7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 8004b7e:	7963      	ldrb	r3, [r4, #5]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d023      	beq.n	8004bcc <SX1276OnDio0Irq+0x68>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d1f9      	bne.n	8004b7c <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	2012      	movs	r0, #18
 8004b8c:	f7ff f86f 	bl	8003c6e <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004b90:	2012      	movs	r0, #18
 8004b92:	f7ff f8b7 	bl	8003d04 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004b96:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004b98:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004b9a:	7833      	ldrb	r3, [r6, #0]
 8004b9c:	4d7f      	ldr	r5, [pc, #508]	; (8004d9c <SX1276OnDio0Irq+0x238>)
 8004b9e:	420b      	tst	r3, r1
 8004ba0:	d100      	bne.n	8004ba4 <SX1276OnDio0Irq+0x40>
 8004ba2:	e08a      	b.n	8004cba <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004ba4:	2012      	movs	r0, #18
 8004ba6:	f7ff f862 	bl	8003c6e <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004baa:	0023      	movs	r3, r4
 8004bac:	3356      	adds	r3, #86	; 0x56
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d100      	bne.n	8004bb6 <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 8004bb4:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8004bb6:	1d28      	adds	r0, r5, #4
 8004bb8:	f002 fabc 	bl	8007134 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0dc      	beq.n	8004b7c <SX1276OnDio0Irq+0x18>
 8004bc2:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0d9      	beq.n	8004b7c <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8004bc8:	4798      	blx	r3
}
 8004bca:	e7d7      	b.n	8004b7c <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8004bcc:	1d63      	adds	r3, r4, #5
 8004bce:	7fdb      	ldrb	r3, [r3, #31]
 8004bd0:	4d72      	ldr	r5, [pc, #456]	; (8004d9c <SX1276OnDio0Irq+0x238>)
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d030      	beq.n	8004c38 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8004bd6:	203f      	movs	r0, #63	; 0x3f
 8004bd8:	f7ff f894 	bl	8003d04 <SX1276Read>
 8004bdc:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8004bde:	7833      	ldrb	r3, [r6, #0]
 8004be0:	079b      	lsls	r3, r3, #30
 8004be2:	d429      	bmi.n	8004c38 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004be4:	210b      	movs	r1, #11
 8004be6:	203e      	movs	r0, #62	; 0x3e
 8004be8:	f7ff f841 	bl	8003c6e <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004bec:	2110      	movs	r1, #16
 8004bee:	203f      	movs	r0, #63	; 0x3f
 8004bf0:	f7ff f83d 	bl	8003c6e <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8004bf4:	1d28      	adds	r0, r5, #4
 8004bf6:	f002 fa9d 	bl	8007134 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8004bfa:	1de3      	adds	r3, r4, #7
 8004bfc:	7fde      	ldrb	r6, [r3, #31]
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	d110      	bne.n	8004c24 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 8004c02:	0020      	movs	r0, r4
 8004c04:	3068      	adds	r0, #104	; 0x68
 8004c06:	f002 fa95 	bl	8007134 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8004c0a:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <SX1276OnDio0Irq+0xb6>
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d000      	beq.n	8004c1a <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8004c18:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004c1e:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8004c20:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8004c22:	e7ab      	b.n	8004b7c <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004c24:	200d      	movs	r0, #13
 8004c26:	f7ff f86d 	bl	8003d04 <SX1276Read>
 8004c2a:	2140      	movs	r1, #64	; 0x40
 8004c2c:	4301      	orrs	r1, r0
 8004c2e:	b2c9      	uxtb	r1, r1
 8004c30:	200d      	movs	r0, #13
 8004c32:	f7ff f81c 	bl	8003c6e <SX1276Write>
 8004c36:	e7e9      	b.n	8004c0c <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004c38:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8004c3a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	4e58      	ldr	r6, [pc, #352]	; (8004da0 <SX1276OnDio0Irq+0x23c>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	d10a      	bne.n	8004c5a <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004c44:	1ce3      	adds	r3, r4, #3
 8004c46:	7fd8      	ldrb	r0, [r3, #31]
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d127      	bne.n	8004c9c <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8004c4c:	0021      	movs	r1, r4
 8004c4e:	2201      	movs	r2, #1
 8004c50:	313a      	adds	r1, #58	; 0x3a
 8004c52:	f7ff f83f 	bl	8003cd4 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c56:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8004c58:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c5a:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c60:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 8004c62:	f7ff f837 	bl	8003cd4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c66:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8004c68:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c6a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8004c6c:	f002 fa62 	bl	8007134 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004c70:	1de3      	adds	r3, r4, #7
 8004c72:	7fdb      	ldrb	r3, [r3, #31]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d116      	bne.n	8004ca6 <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8004c78:	0020      	movs	r0, r4
 8004c7a:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 8004c7c:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004c7e:	f002 fa59 	bl	8007134 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004c82:	682b      	ldr	r3, [r5, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0c8      	beq.n	8004c1a <SX1276OnDio0Irq+0xb6>
 8004c88:	689d      	ldr	r5, [r3, #8]
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	d0c5      	beq.n	8004c1a <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8004c8e:	2232      	movs	r2, #50	; 0x32
 8004c90:	2300      	movs	r3, #0
 8004c92:	0030      	movs	r0, r6
 8004c94:	56a2      	ldrsb	r2, [r4, r2]
 8004c96:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8004c98:	47a8      	blx	r5
 8004c9a:	e7be      	b.n	8004c1a <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004c9c:	2032      	movs	r0, #50	; 0x32
 8004c9e:	f7ff f831 	bl	8003d04 <SX1276Read>
 8004ca2:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004ca4:	e7d7      	b.n	8004c56 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004ca6:	200d      	movs	r0, #13
 8004ca8:	f7ff f82c 	bl	8003d04 <SX1276Read>
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	4301      	orrs	r1, r0
 8004cb0:	b2c9      	uxtb	r1, r1
 8004cb2:	200d      	movs	r0, #13
 8004cb4:	f7fe ffdb 	bl	8003c6e <SX1276Write>
 8004cb8:	e7e3      	b.n	8004c82 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004cba:	2019      	movs	r0, #25
 8004cbc:	f7ff f822 	bl	8003d04 <SX1276Read>
 8004cc0:	0027      	movs	r7, r4
 8004cc2:	b240      	sxtb	r0, r0
 8004cc4:	3002      	adds	r0, #2
 8004cc6:	3760      	adds	r7, #96	; 0x60
 8004cc8:	1080      	asrs	r0, r0, #2
 8004cca:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004ccc:	201a      	movs	r0, #26
 8004cce:	f7ff f819 	bl	8003d04 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	0022      	movs	r2, r4
 8004cd6:	56fb      	ldrsb	r3, [r7, r3]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004cd8:	b201      	sxth	r1, r0
 8004cda:	1109      	asrs	r1, r1, #4
 8004cdc:	4f31      	ldr	r7, [pc, #196]	; (8004da4 <SX1276OnDio0Irq+0x240>)
 8004cde:	b289      	uxth	r1, r1
 8004ce0:	b286      	uxth	r6, r0
 8004ce2:	3262      	adds	r2, #98	; 0x62
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da3a      	bge.n	8004d5e <SX1276OnDio0Irq+0x1fa>
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8004ce8:	b298      	uxth	r0, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	42bb      	cmp	r3, r7
 8004cee:	d934      	bls.n	8004d5a <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004cf0:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004cf2:	1830      	adds	r0, r6, r0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004cf4:	1808      	adds	r0, r1, r0
 8004cf6:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8004cf8:	0026      	movs	r6, r4
 8004cfa:	2013      	movs	r0, #19
 8004cfc:	f7ff f802 	bl	8003d04 <SX1276Read>
 8004d00:	3664      	adds	r6, #100	; 0x64
 8004d02:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8004d04:	2010      	movs	r0, #16
 8004d06:	f7fe fffd 	bl	8003d04 <SX1276Read>
 8004d0a:	0001      	movs	r1, r0
 8004d0c:	200d      	movs	r0, #13
 8004d0e:	f7fe ffae 	bl	8003c6e <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8004d12:	7832      	ldrb	r2, [r6, #0]
 8004d14:	4e22      	ldr	r6, [pc, #136]	; (8004da0 <SX1276OnDio0Irq+0x23c>)
 8004d16:	2000      	movs	r0, #0
 8004d18:	0031      	movs	r1, r6
 8004d1a:	f7fe ffdb 	bl	8003cd4 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8004d1e:	0023      	movs	r3, r4
 8004d20:	3356      	adds	r3, #86	; 0x56
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d100      	bne.n	8004d2a <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 8004d28:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8004d2a:	1d28      	adds	r0, r5, #4
 8004d2c:	f002 fa02 	bl	8007134 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d100      	bne.n	8004d38 <SX1276OnDio0Irq+0x1d4>
 8004d36:	e721      	b.n	8004b7c <SX1276OnDio0Irq+0x18>
 8004d38:	689d      	ldr	r5, [r3, #8]
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	d100      	bne.n	8004d40 <SX1276OnDio0Irq+0x1dc>
 8004d3e:	e71d      	b.n	8004b7c <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8004d40:	0023      	movs	r3, r4
 8004d42:	0022      	movs	r2, r4
 8004d44:	3360      	adds	r3, #96	; 0x60
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	3464      	adds	r4, #100	; 0x64
 8004d4a:	3262      	adds	r2, #98	; 0x62
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5e52      	ldrsh	r2, [r2, r1]
 8004d50:	0030      	movs	r0, r6
 8004d52:	7821      	ldrb	r1, [r4, #0]
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	47a8      	blx	r5
 8004d58:	e710      	b.n	8004b7c <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004d5a:	38a4      	subs	r0, #164	; 0xa4
 8004d5c:	e7c9      	b.n	8004cf2 <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004d5e:	68a3      	ldr	r3, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004d60:	0030      	movs	r0, r6
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004d62:	42bb      	cmp	r3, r7
 8004d64:	d901      	bls.n	8004d6a <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004d66:	389d      	subs	r0, #157	; 0x9d
 8004d68:	e7c4      	b.n	8004cf4 <SX1276OnDio0Irq+0x190>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004d6a:	38a4      	subs	r0, #164	; 0xa4
 8004d6c:	e7c2      	b.n	8004cf4 <SX1276OnDio0Irq+0x190>
            TimerStop( &TxTimeoutTimer );
 8004d6e:	4d0b      	ldr	r5, [pc, #44]	; (8004d9c <SX1276OnDio0Irq+0x238>)
 8004d70:	0028      	movs	r0, r5
 8004d72:	301c      	adds	r0, #28
 8004d74:	f002 f9de 	bl	8007134 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8004d78:	7963      	ldrb	r3, [r4, #5]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d103      	bne.n	8004d86 <SX1276OnDio0Irq+0x222>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004d7e:	2108      	movs	r1, #8
 8004d80:	2012      	movs	r0, #18
 8004d82:	f7fe ff74 	bl	8003c6e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004d8a:	682b      	ldr	r3, [r5, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d100      	bne.n	8004d92 <SX1276OnDio0Irq+0x22e>
 8004d90:	e6f4      	b.n	8004b7c <SX1276OnDio0Irq+0x18>
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	e716      	b.n	8004bc4 <SX1276OnDio0Irq+0x60>
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	200002a8 	.word	0x200002a8
 8004d9c:	20000328 	.word	0x20000328
 8004da0:	2000035c 	.word	0x2000035c
 8004da4:	1f4add40 	.word	0x1f4add40

08004da8 <SX1276Send>:
{
 8004da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004daa:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8004dac:	4c61      	ldr	r4, [pc, #388]	; (8004f34 <SX1276Send+0x18c>)
{
 8004dae:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8004db0:	7965      	ldrb	r5, [r4, #5]
{
 8004db2:	1dde      	adds	r6, r3, #7
 8004db4:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	d01c      	beq.n	8004df4 <SX1276Send+0x4c>
 8004dba:	2d01      	cmp	r5, #1
 8004dbc:	d046      	beq.n	8004e4c <SX1276Send+0xa4>
 8004dbe:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 8004dc0:	4d5d      	ldr	r5, [pc, #372]	; (8004f38 <SX1276Send+0x190>)
 8004dc2:	1d28      	adds	r0, r5, #4
 8004dc4:	f002 f9b6 	bl	8007134 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8004dc8:	0028      	movs	r0, r5
 8004dca:	0031      	movs	r1, r6
 8004dcc:	301c      	adds	r0, #28
 8004dce:	f002 fa3f 	bl	8007250 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8004dd2:	7963      	ldrb	r3, [r4, #5]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d100      	bne.n	8004dda <SX1276Send+0x32>
 8004dd8:	e077      	b.n	8004eca <SX1276Send+0x122>
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d100      	bne.n	8004de0 <SX1276Send+0x38>
 8004dde:	e08d      	b.n	8004efc <SX1276Send+0x154>
    TimerStart( &TxTimeoutTimer );
 8004de0:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8004de2:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8004de4:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 8004de6:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8004de8:	f002 f9f8 	bl	80071dc <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8004dec:	2003      	movs	r0, #3
 8004dee:	f7ff f82b 	bl	8003e48 <SX1276SetOpMode.part.0>
}
 8004df2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 8004df4:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004df6:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004df8:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8004dfa:	1ce3      	adds	r3, r4, #3
 8004dfc:	7fd8      	ldrb	r0, [r3, #31]
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d117      	bne.n	8004e32 <SX1276Send+0x8a>
    SX1276WriteBuffer( 0, buffer, size );
 8004e02:	2201      	movs	r2, #1
 8004e04:	0031      	movs	r1, r6
 8004e06:	f7fe ff1a 	bl	8003c3e <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8004e0a:	7832      	ldrb	r2, [r6, #0]
 8004e0c:	1e53      	subs	r3, r2, #1
 8004e0e:	2b3f      	cmp	r3, #63	; 0x3f
 8004e10:	d813      	bhi.n	8004e3a <SX1276Send+0x92>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004e12:	0023      	movs	r3, r4
 8004e14:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004e16:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004e18:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004e1a:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8004e1c:	782a      	ldrb	r2, [r5, #0]
 8004e1e:	0039      	movs	r1, r7
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7fe ff0c 	bl	8003c3e <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004e26:	782b      	ldrb	r3, [r5, #0]
 8004e28:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004e2c:	189b      	adds	r3, r3, r2
 8004e2e:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 8004e30:	e7c6      	b.n	8004dc0 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8004e32:	2032      	movs	r0, #50	; 0x32
 8004e34:	f7fe ff1b 	bl	8003c6e <SX1276Write>
 8004e38:	e7e7      	b.n	8004e0a <SX1276Send+0x62>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	0039      	movs	r1, r7
 8004e3e:	483f      	ldr	r0, [pc, #252]	; (8004f3c <SX1276Send+0x194>)
 8004e40:	f002 fc32 	bl	80076a8 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004e44:	0023      	movs	r3, r4
 8004e46:	2220      	movs	r2, #32
 8004e48:	333f      	adds	r3, #63	; 0x3f
 8004e4a:	e7e4      	b.n	8004e16 <SX1276Send+0x6e>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004e4c:	0023      	movs	r3, r4
 8004e4e:	3355      	adds	r3, #85	; 0x55
 8004e50:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004e52:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02c      	beq.n	8004eb2 <SX1276Send+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004e58:	f7fe ff54 	bl	8003d04 <SX1276Read>
 8004e5c:	2341      	movs	r3, #65	; 0x41
 8004e5e:	4398      	bics	r0, r3
 8004e60:	b2c1      	uxtb	r1, r0
 8004e62:	2033      	movs	r0, #51	; 0x33
 8004e64:	f7fe ff03 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004e68:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004e6a:	203b      	movs	r0, #59	; 0x3b
 8004e6c:	f7fe feff 	bl	8003c6e <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004e70:	0023      	movs	r3, r4
 8004e72:	7831      	ldrb	r1, [r6, #0]
 8004e74:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004e76:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004e78:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004e7a:	f7fe fef8 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8004e7e:	2100      	movs	r1, #0
 8004e80:	200e      	movs	r0, #14
 8004e82:	f7fe fef4 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004e86:	2100      	movs	r1, #0
 8004e88:	200d      	movs	r0, #13
 8004e8a:	f7fe fef0 	bl	8003c6e <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f7fe ff38 	bl	8003d04 <SX1276Read>
 8004e94:	23f8      	movs	r3, #248	; 0xf8
 8004e96:	4398      	bics	r0, r3
 8004e98:	d104      	bne.n	8004ea4 <SX1276Send+0xfc>
                SX1276SetStby( );
 8004e9a:	f7fe fff7 	bl	8003e8c <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f7fc f9d8 	bl	8001254 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 8004ea4:	7832      	ldrb	r2, [r6, #0]
 8004ea6:	0039      	movs	r1, r7
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7fe fec8 	bl	8003c3e <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8004eae:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 8004eb0:	e786      	b.n	8004dc0 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004eb2:	f7fe ff27 	bl	8003d04 <SX1276Read>
 8004eb6:	2341      	movs	r3, #65	; 0x41
 8004eb8:	0001      	movs	r1, r0
 8004eba:	4399      	bics	r1, r3
 8004ebc:	4329      	orrs	r1, r5
 8004ebe:	b2c9      	uxtb	r1, r1
 8004ec0:	2033      	movs	r0, #51	; 0x33
 8004ec2:	f7fe fed4 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004ec6:	211d      	movs	r1, #29
 8004ec8:	e7cf      	b.n	8004e6a <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004eca:	2040      	movs	r0, #64	; 0x40
 8004ecc:	f7fe ff1a 	bl	8003d04 <SX1276Read>
 8004ed0:	2103      	movs	r1, #3
 8004ed2:	4001      	ands	r1, r0
 8004ed4:	2040      	movs	r0, #64	; 0x40
 8004ed6:	f7fe feca 	bl	8003c6e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004eda:	2041      	movs	r0, #65	; 0x41
 8004edc:	f7fe ff12 	bl	8003d04 <SX1276Read>
 8004ee0:	213e      	movs	r1, #62	; 0x3e
 8004ee2:	4001      	ands	r1, r0
 8004ee4:	2041      	movs	r0, #65	; 0x41
 8004ee6:	f7fe fec2 	bl	8003c6e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004eea:	2035      	movs	r0, #53	; 0x35
 8004eec:	f7fe ff0a 	bl	8003d04 <SX1276Read>
 8004ef0:	233f      	movs	r3, #63	; 0x3f
 8004ef2:	4018      	ands	r0, r3
 8004ef4:	0023      	movs	r3, r4
 8004ef6:	333e      	adds	r3, #62	; 0x3e
 8004ef8:	7018      	strb	r0, [r3, #0]
        break;
 8004efa:	e771      	b.n	8004de0 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004efc:	0023      	movs	r3, r4
 8004efe:	3353      	adds	r3, #83	; 0x53
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <SX1276Send+0x17a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004f06:	21f5      	movs	r1, #245	; 0xf5
 8004f08:	2011      	movs	r0, #17
 8004f0a:	f7fe feb0 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8004f0e:	2040      	movs	r0, #64	; 0x40
 8004f10:	f7fe fef8 	bl	8003d04 <SX1276Read>
 8004f14:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004f16:	4001      	ands	r1, r0
 8004f18:	2040      	movs	r0, #64	; 0x40
 8004f1a:	4301      	orrs	r1, r0
 8004f1c:	f7fe fea7 	bl	8003c6e <SX1276Write>
 8004f20:	e75e      	b.n	8004de0 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004f22:	21f7      	movs	r1, #247	; 0xf7
 8004f24:	2011      	movs	r0, #17
 8004f26:	f7fe fea2 	bl	8003c6e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004f2a:	2040      	movs	r0, #64	; 0x40
 8004f2c:	f7fe feea 	bl	8003d04 <SX1276Read>
 8004f30:	213f      	movs	r1, #63	; 0x3f
 8004f32:	e7f0      	b.n	8004f16 <SX1276Send+0x16e>
 8004f34:	200002a8 	.word	0x200002a8
 8004f38:	20000328 	.word	0x20000328
 8004f3c:	2000035c 	.word	0x2000035c

08004f40 <SX1276OnDio1Irq>:
{
 8004f40:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004f42:	4c39      	ldr	r4, [pc, #228]	; (8005028 <SX1276OnDio1Irq+0xe8>)
 8004f44:	7925      	ldrb	r5, [r4, #4]
 8004f46:	2d01      	cmp	r5, #1
 8004f48:	d002      	beq.n	8004f50 <SX1276OnDio1Irq+0x10>
 8004f4a:	2d02      	cmp	r5, #2
 8004f4c:	d050      	beq.n	8004ff0 <SX1276OnDio1Irq+0xb0>
}
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8004f50:	7963      	ldrb	r3, [r4, #5]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <SX1276OnDio1Irq+0x46>
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d1f9      	bne.n	8004f4e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8004f5a:	f7fc f8fd 	bl	8001158 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d0f5      	beq.n	8004f4e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8004f62:	4d32      	ldr	r5, [pc, #200]	; (800502c <SX1276OnDio1Irq+0xec>)
 8004f64:	1d28      	adds	r0, r5, #4
 8004f66:	f002 f8e5 	bl	8007134 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	2012      	movs	r0, #18
 8004f6e:	f7fe fe7e 	bl	8003c6e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0e8      	beq.n	8004f4e <SX1276OnDio1Irq+0xe>
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0e5      	beq.n	8004f4e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8004f82:	4798      	blx	r3
 8004f84:	e7e3      	b.n	8004f4e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8004f86:	f7fc f8e7 	bl	8001158 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d0df      	beq.n	8004f4e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004f8e:	0020      	movs	r0, r4
 8004f90:	3068      	adds	r0, #104	; 0x68
 8004f92:	f002 f8cf 	bl	8007134 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004f96:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004f98:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004f9e:	1ce3      	adds	r3, r4, #3
 8004fa0:	7fd8      	ldrb	r0, [r3, #31]
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d119      	bne.n	8004fda <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8004fa6:	0021      	movs	r1, r4
 8004fa8:	002a      	movs	r2, r5
 8004faa:	313a      	adds	r1, #58	; 0x3a
 8004fac:	f7fe fe92 	bl	8003cd4 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004fb0:	0025      	movs	r5, r4
 8004fb2:	353e      	adds	r5, #62	; 0x3e
 8004fb4:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8004fb6:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fb8:	491d      	ldr	r1, [pc, #116]	; (8005030 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004fba:	782b      	ldrb	r3, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fbc:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004fbe:	1a12      	subs	r2, r2, r0
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	db0f      	blt.n	8004fe4 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fc4:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7fe fe83 	bl	8003cd4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8004fce:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004fd0:	782b      	ldrb	r3, [r5, #0]
 8004fd2:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004fd4:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004fd6:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8004fd8:	e7b9      	b.n	8004f4e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004fda:	2032      	movs	r0, #50	; 0x32
 8004fdc:	f7fe fe92 	bl	8003d04 <SX1276Read>
 8004fe0:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004fe2:	e7e5      	b.n	8004fb0 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	f7fe fe74 	bl	8003cd4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004fec:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004fee:	e7f2      	b.n	8004fd6 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8004ff0:	7965      	ldrb	r5, [r4, #5]
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	d1ab      	bne.n	8004f4e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8004ff6:	f7fc f8af 	bl	8001158 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8004ffa:	2801      	cmp	r0, #1
 8004ffc:	d0a7      	beq.n	8004f4e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8004ffe:	0026      	movs	r6, r4
 8005000:	363f      	adds	r6, #63	; 0x3f
 8005002:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8005004:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005006:	490a      	ldr	r1, [pc, #40]	; (8005030 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005008:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800500a:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800500c:	1a1b      	subs	r3, r3, r0
 800500e:	4293      	cmp	r3, r2
 8005010:	dd05      	ble.n	800501e <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 8005012:	0028      	movs	r0, r5
 8005014:	f7fe fe13 	bl	8003c3e <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005018:	7833      	ldrb	r3, [r6, #0]
 800501a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800501c:	e7da      	b.n	8004fd4 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 800501e:	0028      	movs	r0, r5
 8005020:	b2da      	uxtb	r2, r3
 8005022:	f7fe fe0c 	bl	8003c3e <SX1276WriteBuffer>
 8005026:	e7e1      	b.n	8004fec <SX1276OnDio1Irq+0xac>
 8005028:	200002a8 	.word	0x200002a8
 800502c:	20000328 	.word	0x20000328
 8005030:	2000035c 	.word	0x2000035c

08005034 <_Cb_Timer_Lora_Tx>:
}

static uint8_t _Cb_Timer_Lora_Tx(uint8_t event)
{
	#ifdef DEVICE_TYPE_STATION
		sModem.Mode = _MODE_SLEEP;
 8005034:	2200      	movs	r2, #0
 8005036:	4b02      	ldr	r3, [pc, #8]	; (8005040 <_Cb_Timer_Lora_Tx+0xc>)
		} else {
			USER_Payload_Node_Mode(sModem.TimeDelaySingle_u32);
		}
	#endif
    return 1;
}
 8005038:	2001      	movs	r0, #1
		sModem.Mode = _MODE_SLEEP;
 800503a:	765a      	strb	r2, [r3, #25]
}
 800503c:	4770      	bx	lr
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	200000c0 	.word	0x200000c0

08005044 <_Cb_Idle_Handler>:
	}
	return 1;
}

static uint8_t _Cb_Idle_Handler(uint8_t event)
{
 8005044:	b510      	push	{r4, lr}
	#ifdef DEVICE_TYPE_STATION
		fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 8005046:	2103      	movs	r1, #3
 8005048:	4803      	ldr	r0, [pc, #12]	; (8005058 <_Cb_Idle_Handler+0x14>)
 800504a:	f001 fca4 	bl	8006996 <fevent_enable>
		LED_TOGGLE(__LED_MODE);
 800504e:	2000      	movs	r0, #0
 8005050:	f002 faa8 	bl	80075a4 <LED_TOGGLE>
//				}
//			}
//		}
	#endif
	return 1;
}
 8005054:	2001      	movs	r0, #1
 8005056:	bd10      	pop	{r4, pc}
 8005058:	20000024 	.word	0x20000024

0800505c <_Cb_Timer_Start>:
{
 800505c:	b510      	push	{r4, lr}
	UTIL_TIMER_IRQ_Handler();
 800505e:	f002 f913 	bl	8007288 <UTIL_TIMER_IRQ_Handler>
}
 8005062:	2001      	movs	r0, #1
 8005064:	bd10      	pop	{r4, pc}
	...

08005068 <AppCom_IRQ_Timer_CallBack>:
{
 8005068:	b510      	push	{r4, lr}
    fevent_active(sEventAppCom, _EVENT_TIMER_START);
 800506a:	2100      	movs	r1, #0
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <AppCom_IRQ_Timer_CallBack+0xc>)
 800506e:	f001 fc8b 	bl	8006988 <fevent_active>
}
 8005072:	bd10      	pop	{r4, pc}
 8005074:	20000024 	.word	0x20000024

08005078 <_Cb_Uart_Debug>:
{
 8005078:	b510      	push	{r4, lr}
	if (MarkFirstRecvUart == 0)
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <_Cb_Uart_Debug+0x38>)
{
 800507c:	0001      	movs	r1, r0
		LastLengthRecv = sUartDebug.Length_u16;
 800507e:	4c0d      	ldr	r4, [pc, #52]	; (80050b4 <_Cb_Uart_Debug+0x3c>)
	if (MarkFirstRecvUart == 0)
 8005080:	7818      	ldrb	r0, [r3, #0]
		LastLengthRecv = sUartDebug.Length_u16;
 8005082:	88a2      	ldrh	r2, [r4, #4]
	if (MarkFirstRecvUart == 0)
 8005084:	2800      	cmp	r0, #0
 8005086:	d106      	bne.n	8005096 <_Cb_Uart_Debug+0x1e>
		MarkFirstRecvUart = 1;
 8005088:	3001      	adds	r0, #1
 800508a:	7018      	strb	r0, [r3, #0]
			fevent_enable(sEventAppCom, event);
 800508c:	480a      	ldr	r0, [pc, #40]	; (80050b8 <_Cb_Uart_Debug+0x40>)
			LastLengthRecv = sUartDebug.Length_u16;
 800508e:	805a      	strh	r2, [r3, #2]
			fevent_enable(sEventAppCom, event);
 8005090:	f001 fc81 	bl	8006996 <fevent_enable>
 8005094:	e00a      	b.n	80050ac <_Cb_Uart_Debug+0x34>
		if (sUartDebug.Length_u16 == LastLengthRecv)
 8005096:	8858      	ldrh	r0, [r3, #2]
 8005098:	4290      	cmp	r0, r2
 800509a:	d1f7      	bne.n	800508c <_Cb_Uart_Debug+0x14>
			MarkFirstRecvUart = 0;
 800509c:	2200      	movs	r2, #0
			Check_AT_User(&sUartDebug);
 800509e:	0020      	movs	r0, r4
			MarkFirstRecvUart = 0;
 80050a0:	701a      	strb	r2, [r3, #0]
			Check_AT_User(&sUartDebug);
 80050a2:	f000 fe89 	bl	8005db8 <Check_AT_User>
			Reset_Buff(&sUartDebug);
 80050a6:	0020      	movs	r0, r4
 80050a8:	f002 f97a 	bl	80073a0 <Reset_Buff>
}
 80050ac:	2001      	movs	r0, #1
 80050ae:	bd10      	pop	{r4, pc}
 80050b0:	2000045c 	.word	0x2000045c
 80050b4:	200000b8 	.word	0x200000b8
 80050b8:	20000024 	.word	0x20000024

080050bc <AppCom_Task>:
	uint8_t Result = 0;
 80050bc:	2000      	movs	r0, #0
{
 80050be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < _EVENT_END_COMM; i++)
 80050c0:	0005      	movs	r5, r0
            Result = 1;
 80050c2:	2701      	movs	r7, #1
 80050c4:	4c0f      	ldr	r4, [pc, #60]	; (8005104 <AppCom_Task+0x48>)
		if (sEventAppCom[i].e_status == 1)
 80050c6:	7866      	ldrb	r6, [r4, #1]
 80050c8:	2e01      	cmp	r6, #1
 80050ca:	d10b      	bne.n	80050e4 <AppCom_Task+0x28>
			if ((sEventAppCom[i].e_systick == 0) ||
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10e      	bne.n	80050f0 <AppCom_Task+0x34>
                sEventAppCom[i].e_status = 0;  //Disable event
 80050d2:	2300      	movs	r3, #0
 80050d4:	7063      	strb	r3, [r4, #1]
				sEventAppCom[i].e_systick = HAL_GetTick();
 80050d6:	f7fc f8b7 	bl	8001248 <HAL_GetTick>
				sEventAppCom[i].e_function_handler(i);
 80050da:	68e3      	ldr	r3, [r4, #12]
				sEventAppCom[i].e_systick = HAL_GetTick();
 80050dc:	6060      	str	r0, [r4, #4]
				sEventAppCom[i].e_function_handler(i);
 80050de:	0028      	movs	r0, r5
 80050e0:	4798      	blx	r3
            Result = 1;
 80050e2:	0030      	movs	r0, r6
	for (i = 0; i < _EVENT_END_COMM; i++)
 80050e4:	3501      	adds	r5, #1
 80050e6:	b2ed      	uxtb	r5, r5
 80050e8:	3410      	adds	r4, #16
 80050ea:	2d04      	cmp	r5, #4
 80050ec:	d1eb      	bne.n	80050c6 <AppCom_Task+0xa>
}
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					((HAL_GetTick() - sEventAppCom[i].e_systick)  >=  sEventAppCom[i].e_period))
 80050f0:	f7fc f8aa 	bl	8001248 <HAL_GetTick>
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	1ac0      	subs	r0, r0, r3
			if ((sEventAppCom[i].e_systick == 0) ||
 80050f8:	68a3      	ldr	r3, [r4, #8]
 80050fa:	4298      	cmp	r0, r3
 80050fc:	d2e9      	bcs.n	80050d2 <AppCom_Task+0x16>
            Result = 1;
 80050fe:	0038      	movs	r0, r7
 8005100:	e7f0      	b.n	80050e4 <AppCom_Task+0x28>
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	20000024 	.word	0x20000024

08005108 <AppCom_Cacul_Random_Delay>:
{
 8005108:	b570      	push	{r4, r5, r6, lr}
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 800510a:	4c13      	ldr	r4, [pc, #76]	; (8005158 <AppCom_Cacul_Random_Delay+0x50>)
 800510c:	88a5      	ldrh	r5, [r4, #4]
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 800510e:	6823      	ldr	r3, [r4, #0]
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 8005110:	3d01      	subs	r5, #1
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 8005112:	b2ad      	uxth	r5, r5
 8005114:	5d58      	ldrb	r0, [r3, r5]
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <AppCom_Cacul_Random_Delay+0x54>)
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 8005118:	3830      	subs	r0, #48	; 0x30
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 800511a:	8859      	ldrh	r1, [r3, #2]
 800511c:	f7fb f8a0 	bl	8000260 <__aeabi_uidivmod>
	if(sModem.TimeDelayTx_u32 == 0){
 8005120:	2900      	cmp	r1, #0
 8005122:	d016      	beq.n	8005152 <AppCom_Cacul_Random_Delay+0x4a>
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 8005124:	6421      	str	r1, [r4, #64]	; 0x40
	sModem.TimeDelayTx_u32 *= 1000;
 8005126:	22fa      	movs	r2, #250	; 0xfa
	sModem.TimeDelaySingle_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY;
 8005128:	23fa      	movs	r3, #250	; 0xfa
	sModem.TimeDelayTx_u32 *= 1000;
 800512a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800512c:	0092      	lsls	r2, r2, #2
 800512e:	434a      	muls	r2, r1
 8005130:	6422      	str	r2, [r4, #64]	; 0x40
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 4000;
 8005132:	22fa      	movs	r2, #250	; 0xfa
	sModem.TimeDelaySingle_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY;
 8005134:	015b      	lsls	r3, r3, #5
 8005136:	434b      	muls	r3, r1
 8005138:	6463      	str	r3, [r4, #68]	; 0x44
	sModem.TimeDelayCalib_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_CALIB_DELAY;
 800513a:	64a3      	str	r3, [r4, #72]	; 0x48
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 4000;
 800513c:	68a3      	ldr	r3, [r4, #8]
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	5d5b      	ldrb	r3, [r3, r5]
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 8005142:	2004      	movs	r0, #4
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 4000;
 8005144:	3b30      	subs	r3, #48	; 0x30
 8005146:	435a      	muls	r2, r3
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 8005148:	4905      	ldr	r1, [pc, #20]	; (8005160 <AppCom_Cacul_Random_Delay+0x58>)
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 4000;
 800514a:	64e2      	str	r2, [r4, #76]	; 0x4c
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 800514c:	f002 f95c 	bl	8007408 <LOG>
}
 8005150:	bd70      	pop	{r4, r5, r6, pc}
		sModem.TimeDelayTx_u32 += 10;
 8005152:	230a      	movs	r3, #10
 8005154:	6423      	str	r3, [r4, #64]	; 0x40
 8005156:	e7e6      	b.n	8005126 <AppCom_Cacul_Random_Delay+0x1e>
 8005158:	200000c0 	.word	0x200000c0
 800515c:	20000114 	.word	0x20000114
 8005160:	080086b6 	.word	0x080086b6

08005164 <AppCom_Init>:
    	sModem.TypeModem_u8 = _LORA_STATION;
 8005164:	2302      	movs	r3, #2
{
 8005166:	b510      	push	{r4, lr}
    	sModem.TypeModem_u8 = _LORA_STATION;
 8005168:	4c12      	ldr	r4, [pc, #72]	; (80051b4 <AppCom_Init+0x50>)
    pModemProcessIRQTimer = AppCom_IRQ_Timer_CallBack;
 800516a:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <AppCom_Init+0x54>)
    	sModem.TypeModem_u8 = _LORA_STATION;
 800516c:	7623      	strb	r3, [r4, #24]
    pModemProcessIRQTimer = AppCom_IRQ_Timer_CallBack;
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <AppCom_Init+0x58>)
 8005170:	601a      	str	r2, [r3, #0]
    sLPMFeatureHandler = &sModemLPMHandler;
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <AppCom_Init+0x5c>)
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <AppCom_Init+0x60>)
 8005176:	601a      	str	r2, [r3, #0]
    AppCom_Cacul_Random_Delay();
 8005178:	f7ff ffc6 	bl	8005108 <AppCom_Cacul_Random_Delay>
    LOG_Array(LOG_INFOR, sModem.sDCU_id.Data_a8, sModem.sDCU_id.Length_u16, "DCU ID:");
 800517c:	88a2      	ldrh	r2, [r4, #4]
 800517e:	6821      	ldr	r1, [r4, #0]
 8005180:	2004      	movs	r0, #4
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <AppCom_Init+0x64>)
 8005184:	f002 f98a 	bl	800749c <LOG_Array>
    LOG_Array(LOG_INFOR, sModem.sNET_id.Data_a8, sModem.sNET_id.Length_u16, "NET ID:");
 8005188:	89a2      	ldrh	r2, [r4, #12]
 800518a:	68a1      	ldr	r1, [r4, #8]
 800518c:	2004      	movs	r0, #4
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <AppCom_Init+0x68>)
 8005190:	f002 f984 	bl	800749c <LOG_Array>
    sRTCSet.date = 2;
 8005194:	2181      	movs	r1, #129	; 0x81
    sRTCSet.hour = 0;
 8005196:	2080      	movs	r0, #128	; 0x80
    sRTCSet.SubSeconds = 0;
 8005198:	2200      	movs	r2, #0
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <AppCom_Init+0x6c>)
    sRTCSet.date = 2;
 800519c:	0049      	lsls	r1, r1, #1
 800519e:	8099      	strh	r1, [r3, #4]
    sRTCSet.year = 24;
 80051a0:	39ea      	subs	r1, #234	; 0xea
    sRTCSet.hour = 0;
 80051a2:	0440      	lsls	r0, r0, #17
    sRTCSet.year = 24;
 80051a4:	7199      	strb	r1, [r3, #6]
    UTIL_Set_RTC(sRTCSet);
 80051a6:	6859      	ldr	r1, [r3, #4]
    sRTCSet.hour = 0;
 80051a8:	6018      	str	r0, [r3, #0]
    sRTCSet.SubSeconds = 0;
 80051aa:	609a      	str	r2, [r3, #8]
    UTIL_Set_RTC(sRTCSet);
 80051ac:	f002 f8ae 	bl	800730c <UTIL_Set_RTC>
}
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	200000c0 	.word	0x200000c0
 80051b8:	08005069 	.word	0x08005069
 80051bc:	20001378 	.word	0x20001378
 80051c0:	20001328 	.word	0x20001328
 80051c4:	20000118 	.word	0x20000118
 80051c8:	080086c8 	.word	0x080086c8
 80051cc:	080086d0 	.word	0x080086d0
 80051d0:	20001124 	.word	0x20001124

080051d4 <_Cb_Active_Lora_Tx_Event>:

void _Cb_Active_Lora_Tx_Event(void *context)
{
 80051d4:	b510      	push	{r4, lr}
	 fevent_active(sEventAppCom, _EVENT_TIMER_LORA_TX);
 80051d6:	2101      	movs	r1, #1
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <_Cb_Active_Lora_Tx_Event+0xc>)
 80051da:	f001 fbd5 	bl	8006988 <fevent_active>
}
 80051de:	bd10      	pop	{r4, pc}
 80051e0:	20000024 	.word	0x20000024

080051e4 <_Cb_Lora_Tx>:
    return 1;
}
static uint8_t _Cb_Lora_Tx(uint8_t event)
{
    return 1;
}
 80051e4:	2001      	movs	r0, #1
 80051e6:	4770      	bx	lr

080051e8 <_Cb_Timer_Lora_Tx_Again>:
}

static void _Cb_Timer_Lora_Tx_Again(void *context)
{

}
 80051e8:	4770      	bx	lr
	...

080051ec <_Cb_Lora_IRQ>:
{
 80051ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Radio.Sleep();
 80051ee:	4c37      	ldr	r4, [pc, #220]	; (80052cc <_Cb_Lora_IRQ+0xe0>)
 80051f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	4798      	blx	r3
    switch (State)
 80051f6:	4d36      	ldr	r5, [pc, #216]	; (80052d0 <_Cb_Lora_IRQ+0xe4>)
 80051f8:	7828      	ldrb	r0, [r5, #0]
 80051fa:	2804      	cmp	r0, #4
 80051fc:	d81e      	bhi.n	800523c <_Cb_Lora_IRQ+0x50>
 80051fe:	f7fa ff95 	bl	800012c <__gnu_thumb1_case_uqi>
 8005202:	3203      	.short	0x3203
 8005204:	205b      	.short	0x205b
 8005206:	2d          	.byte	0x2d
 8005207:	00          	.byte	0x00
				sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8005208:	2202      	movs	r2, #2
				sModem.TimeTrySendAgain = 0;
 800520a:	2600      	movs	r6, #0
				sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 800520c:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <_Cb_Lora_IRQ+0xe8>)
				Reset_Buff(&sModem.sBackup);
 800520e:	4832      	ldr	r0, [pc, #200]	; (80052d8 <_Cb_Lora_IRQ+0xec>)
				sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8005210:	849a      	strh	r2, [r3, #36]	; 0x24
				sModem.TimeTrySendAgain = 0;
 8005212:	3307      	adds	r3, #7
 8005214:	77de      	strb	r6, [r3, #31]
				Reset_Buff(&sModem.sBackup);
 8005216:	f002 f8c3 	bl	80073a0 <Reset_Buff>
	        	LOG(LOG_DEBUG, "OnRxDone");
 800521a:	2001      	movs	r0, #1
 800521c:	492f      	ldr	r1, [pc, #188]	; (80052dc <_Cb_Lora_IRQ+0xf0>)
 800521e:	f002 f8f3 	bl	8007408 <LOG>
	        	if (Protocol_Extract_Rx(BufferRx, RxBufferSize, 0, &sLoraVar.sFrameRx) == TRUE)
 8005222:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <_Cb_Lora_IRQ+0xf4>)
 8005224:	0032      	movs	r2, r6
 8005226:	78a9      	ldrb	r1, [r5, #2]
 8005228:	482e      	ldr	r0, [pc, #184]	; (80052e4 <_Cb_Lora_IRQ+0xf8>)
 800522a:	3310      	adds	r3, #16
 800522c:	f001 fa20 	bl	8006670 <Protocol_Extract_Rx>
 8005230:	2801      	cmp	r0, #1
 8005232:	d003      	beq.n	800523c <_Cb_Lora_IRQ+0x50>
				Radio.Rx(RX_TIMEOUT_VALUE);
 8005234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005236:	482c      	ldr	r0, [pc, #176]	; (80052e8 <_Cb_Lora_IRQ+0xfc>)
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	4798      	blx	r3
}
 800523c:	2001      	movs	r0, #1
 800523e:	b004      	add	sp, #16
 8005240:	bd70      	pop	{r4, r5, r6, pc}
        	LOG(LOG_DEBUG, "OnTxDone");
 8005242:	492a      	ldr	r1, [pc, #168]	; (80052ec <_Cb_Lora_IRQ+0x100>)
 8005244:	2001      	movs	r0, #1
        	sModem.RxTimeBefore = SysTimeGet();
 8005246:	ad02      	add	r5, sp, #8
        	LOG(LOG_DEBUG, "OnTxDone");
 8005248:	f002 f8de 	bl	8007408 <LOG>
        	sModem.RxTimeBefore = SysTimeGet();
 800524c:	0028      	movs	r0, r5
 800524e:	f002 fa39 	bl	80076c4 <SysTimeGet>
 8005252:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <_Cb_Lora_IRQ+0xe8>)
 8005254:	3328      	adds	r3, #40	; 0x28
 8005256:	cd06      	ldmia	r5!, {r1, r2}
 8005258:	c306      	stmia	r3!, {r1, r2}
 800525a:	e7eb      	b.n	8005234 <_Cb_Lora_IRQ+0x48>
        	LOG(LOG_DEBUG, "OnTxTimeOut");
 800525c:	2001      	movs	r0, #1
 800525e:	4924      	ldr	r1, [pc, #144]	; (80052f0 <_Cb_Lora_IRQ+0x104>)
 8005260:	f002 f8d2 	bl	8007408 <LOG>
            break;
 8005264:	e7ea      	b.n	800523c <_Cb_Lora_IRQ+0x50>
        	LOG(LOG_DEBUG, "OnRxTimeOut");
 8005266:	4923      	ldr	r1, [pc, #140]	; (80052f4 <_Cb_Lora_IRQ+0x108>)
        	LOG(LOG_DEBUG, "OnRxError");
 8005268:	2001      	movs	r0, #1
 800526a:	f002 f8cd 	bl	8007408 <LOG>
				if (sModem.bNeedConfirm == DATA_CONFIRMED_DOWN)
 800526e:	4d19      	ldr	r5, [pc, #100]	; (80052d4 <_Cb_Lora_IRQ+0xe8>)
 8005270:	1d6b      	adds	r3, r5, #5
 8005272:	7fd8      	ldrb	r0, [r3, #31]
 8005274:	2804      	cmp	r0, #4
 8005276:	d121      	bne.n	80052bc <_Cb_Lora_IRQ+0xd0>
					LOG(LOG_INFOR, "Time retry: %d", sModem.TimeTrySendAgain);
 8005278:	1dee      	adds	r6, r5, #7
 800527a:	7ff2      	ldrb	r2, [r6, #31]
 800527c:	491e      	ldr	r1, [pc, #120]	; (80052f8 <_Cb_Lora_IRQ+0x10c>)
 800527e:	f002 f8c3 	bl	8007408 <LOG>
					if (sModem.TimeTrySendAgain < 2)
 8005282:	7ff3      	ldrb	r3, [r6, #31]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d80c      	bhi.n	80052a2 <_Cb_Lora_IRQ+0xb6>
						Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 8005288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800528a:	8c29      	ldrh	r1, [r5, #32]
 800528c:	69e8      	ldr	r0, [r5, #28]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	b2c9      	uxtb	r1, r1
 8005292:	4798      	blx	r3
						LED_OFF(__LED_MEASURE);
 8005294:	2001      	movs	r0, #1
 8005296:	f002 f975 	bl	8007584 <LED_OFF>
						sModem.TimeTrySendAgain++;
 800529a:	7ff3      	ldrb	r3, [r6, #31]
 800529c:	3301      	adds	r3, #1
 800529e:	77f3      	strb	r3, [r6, #31]
 80052a0:	e7cc      	b.n	800523c <_Cb_Lora_IRQ+0x50>
						sModem.Mode = 0;
 80052a2:	2200      	movs	r2, #0
						sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 80052a4:	2102      	movs	r1, #2
						sModem.Mode = 0;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <_Cb_Lora_IRQ+0xe8>)
						Reset_Buff(&sModem.sBackup);
 80052a8:	480b      	ldr	r0, [pc, #44]	; (80052d8 <_Cb_Lora_IRQ+0xec>)
						sModem.Mode = 0;
 80052aa:	765a      	strb	r2, [r3, #25]
						sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 80052ac:	8499      	strh	r1, [r3, #36]	; 0x24
						sModem.TimeTrySendAgain = 0;
 80052ae:	3307      	adds	r3, #7
 80052b0:	77da      	strb	r2, [r3, #31]
						Reset_Buff(&sModem.sBackup);
 80052b2:	f002 f875 	bl	80073a0 <Reset_Buff>
 80052b6:	e7c1      	b.n	800523c <_Cb_Lora_IRQ+0x50>
        	LOG(LOG_DEBUG, "OnRxError");
 80052b8:	4910      	ldr	r1, [pc, #64]	; (80052fc <_Cb_Lora_IRQ+0x110>)
 80052ba:	e7d5      	b.n	8005268 <_Cb_Lora_IRQ+0x7c>
					Radio.Rx(RX_TIMEOUT_VALUE);
 80052bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052be:	480a      	ldr	r0, [pc, #40]	; (80052e8 <_Cb_Lora_IRQ+0xfc>)
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	4798      	blx	r3
					sModem.Mode = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	766b      	strb	r3, [r5, #25]
 80052c8:	e7b8      	b.n	800523c <_Cb_Lora_IRQ+0x50>
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	080084cc 	.word	0x080084cc
 80052d0:	20000478 	.word	0x20000478
 80052d4:	200000c0 	.word	0x200000c0
 80052d8:	200000dc 	.word	0x200000dc
 80052dc:	080086d8 	.word	0x080086d8
 80052e0:	20000064 	.word	0x20000064
 80052e4:	200007c8 	.word	0x200007c8
 80052e8:	0037b1d0 	.word	0x0037b1d0
 80052ec:	080086e1 	.word	0x080086e1
 80052f0:	080086ea 	.word	0x080086ea
 80052f4:	080086f6 	.word	0x080086f6
 80052f8:	08008702 	.word	0x08008702
 80052fc:	08008711 	.word	0x08008711

08005300 <_Cb_Timer_Send_Event>:

static void _Cb_Timer_Send_Event(void *context)
{
 8005300:	b510      	push	{r4, lr}
	Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_Cb_Timer_Send_Event+0x18>)
 8005304:	4a05      	ldr	r2, [pc, #20]	; (800531c <_Cb_Timer_Send_Event+0x1c>)
 8005306:	8c19      	ldrh	r1, [r3, #32]
 8005308:	69d8      	ldr	r0, [r3, #28]
 800530a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800530c:	b2c9      	uxtb	r1, r1
 800530e:	4790      	blx	r2
    LED_OFF(__LED_MEASURE);
 8005310:	2001      	movs	r0, #1
 8005312:	f002 f937 	bl	8007584 <LED_OFF>
}
 8005316:	bd10      	pop	{r4, pc}
 8005318:	200000c0 	.word	0x200000c0
 800531c:	080084cc 	.word	0x080084cc

08005320 <OnRxError>:
    Radio.Sleep();
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <OnRxError+0x1c>)
{
 8005322:	b510      	push	{r4, lr}
    Radio.Sleep();
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	4798      	blx	r3
    State = RX_ERROR;
 8005328:	2202      	movs	r2, #2
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800532a:	4805      	ldr	r0, [pc, #20]	; (8005340 <OnRxError+0x20>)
    State = RX_ERROR;
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <OnRxError+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800532e:	2101      	movs	r1, #1
 8005330:	3024      	adds	r0, #36	; 0x24
    State = RX_ERROR;
 8005332:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005334:	f001 fb28 	bl	8006988 <fevent_active>
}
 8005338:	bd10      	pop	{r4, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	080084cc 	.word	0x080084cc
 8005340:	20000064 	.word	0x20000064
 8005344:	20000478 	.word	0x20000478

08005348 <OnRxTimeout>:
    Radio.Sleep();
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <OnRxTimeout+0x18>)
{
 800534a:	b510      	push	{r4, lr}
    Radio.Sleep();
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	4798      	blx	r3
    State = RX_TIMEOUT;
 8005350:	2101      	movs	r1, #1
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005352:	4804      	ldr	r0, [pc, #16]	; (8005364 <OnRxTimeout+0x1c>)
    State = RX_TIMEOUT;
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <OnRxTimeout+0x20>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005356:	3024      	adds	r0, #36	; 0x24
    State = RX_TIMEOUT;
 8005358:	7019      	strb	r1, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800535a:	f001 fb15 	bl	8006988 <fevent_active>
}
 800535e:	bd10      	pop	{r4, pc}
 8005360:	080084cc 	.word	0x080084cc
 8005364:	20000064 	.word	0x20000064
 8005368:	20000478 	.word	0x20000478

0800536c <OnTxTimeout>:
    Radio.Sleep();
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <OnTxTimeout+0x1c>)
{
 800536e:	b510      	push	{r4, lr}
    Radio.Sleep();
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	4798      	blx	r3
    State = TX_TIMEOUT;
 8005374:	2204      	movs	r2, #4
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005376:	4805      	ldr	r0, [pc, #20]	; (800538c <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <OnTxTimeout+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800537a:	2101      	movs	r1, #1
 800537c:	3024      	adds	r0, #36	; 0x24
    State = TX_TIMEOUT;
 800537e:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005380:	f001 fb02 	bl	8006988 <fevent_active>
}
 8005384:	bd10      	pop	{r4, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	080084cc 	.word	0x080084cc
 800538c:	20000064 	.word	0x20000064
 8005390:	20000478 	.word	0x20000478

08005394 <OnTxDone>:
    Radio.Sleep();
 8005394:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <OnTxDone+0x1c>)
{
 8005396:	b510      	push	{r4, lr}
    Radio.Sleep();
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4798      	blx	r3
    State = TX;
 800539c:	2203      	movs	r2, #3
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800539e:	4805      	ldr	r0, [pc, #20]	; (80053b4 <OnTxDone+0x20>)
    State = TX;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <OnTxDone+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80053a2:	2101      	movs	r1, #1
 80053a4:	3024      	adds	r0, #36	; 0x24
    State = TX;
 80053a6:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80053a8:	f001 faee 	bl	8006988 <fevent_active>
}
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	080084cc 	.word	0x080084cc
 80053b4:	20000064 	.word	0x20000064
 80053b8:	20000478 	.word	0x20000478

080053bc <OnRxDone>:
{
 80053bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053be:	001d      	movs	r5, r3
    Radio.Sleep();
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <OnRxDone+0x58>)
{
 80053c2:	b085      	sub	sp, #20
    Radio.Sleep();
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80053c6:	000c      	movs	r4, r1
 80053c8:	9001      	str	r0, [sp, #4]
 80053ca:	9202      	str	r2, [sp, #8]
    Radio.Sleep();
 80053cc:	9303      	str	r3, [sp, #12]
 80053ce:	4798      	blx	r3
    State = RX;
 80053d0:	2100      	movs	r1, #0
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 80053d2:	4e11      	ldr	r6, [pc, #68]	; (8005418 <OnRxDone+0x5c>)
    State = RX;
 80053d4:	4f11      	ldr	r7, [pc, #68]	; (800541c <OnRxDone+0x60>)
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	0030      	movs	r0, r6
    State = RX;
 80053da:	7039      	strb	r1, [r7, #0]
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 80053dc:	f002 fafb 	bl	80079d6 <memset>
    RxBufferSize = size;
 80053e0:	807c      	strh	r4, [r7, #2]
    if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 80053e2:	2cff      	cmp	r4, #255	; 0xff
 80053e4:	d804      	bhi.n	80053f0 <OnRxDone+0x34>
        memcpy(BufferRx, payload, RxBufferSize);
 80053e6:	0022      	movs	r2, r4
 80053e8:	0030      	movs	r0, r6
 80053ea:	9901      	ldr	r1, [sp, #4]
 80053ec:	f002 faea 	bl	80079c4 <memcpy>
    sLoraVar.Rssi_u8 = rssi;
 80053f0:	466b      	mov	r3, sp
 80053f2:	7a1b      	ldrb	r3, [r3, #8]
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 80053f4:	4c0a      	ldr	r4, [pc, #40]	; (8005420 <OnRxDone+0x64>)
    sLoraVar.Rssi_u8 = rssi;
 80053f6:	b25b      	sxtb	r3, r3
    LOG(LOG_INFOR, "Rssi: %ddB, Snr: %ddBm", sLoraVar.Snr_u8, sLoraVar.Rssi_u8);
 80053f8:	002a      	movs	r2, r5
 80053fa:	2004      	movs	r0, #4
 80053fc:	4909      	ldr	r1, [pc, #36]	; (8005424 <OnRxDone+0x68>)
    sLoraVar.Rssi_u8 = rssi;
 80053fe:	7023      	strb	r3, [r4, #0]
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 8005400:	7065      	strb	r5, [r4, #1]
    LOG(LOG_INFOR, "Rssi: %ddB, Snr: %ddBm", sLoraVar.Snr_u8, sLoraVar.Rssi_u8);
 8005402:	f002 f801 	bl	8007408 <LOG>
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005406:	0020      	movs	r0, r4
 8005408:	2101      	movs	r1, #1
 800540a:	3024      	adds	r0, #36	; 0x24
 800540c:	f001 fabc 	bl	8006988 <fevent_active>
}
 8005410:	b005      	add	sp, #20
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005414:	080084cc 	.word	0x080084cc
 8005418:	200007c8 	.word	0x200007c8
 800541c:	20000478 	.word	0x20000478
 8005420:	20000064 	.word	0x20000064
 8005424:	0800871b 	.word	0x0800871b

08005428 <_Cb_Lora_Led>:
 8005428:	2001      	movs	r0, #1
 800542a:	4770      	bx	lr

0800542c <AppLora_Init>:
    RadioEvents.TxDone = 	OnTxDone;
 800542c:	4a2a      	ldr	r2, [pc, #168]	; (80054d8 <AppLora_Init+0xac>)
 800542e:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <AppLora_Init+0xb0>)
{
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioEvents.TxDone = 	OnTxDone;
 8005432:	6053      	str	r3, [r2, #4]
    RadioEvents.RxDone = 	OnRxDone;
 8005434:	4b2a      	ldr	r3, [pc, #168]	; (80054e0 <AppLora_Init+0xb4>)
    Radio.Init(&RadioEvents);
 8005436:	4f2b      	ldr	r7, [pc, #172]	; (80054e4 <AppLora_Init+0xb8>)
    RadioEvents.RxDone = 	OnRxDone;
 8005438:	60d3      	str	r3, [r2, #12]
    RadioEvents.TxTimeout = OnTxTimeout;
 800543a:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <AppLora_Init+0xbc>)
{
 800543c:	b08b      	sub	sp, #44	; 0x2c
    RadioEvents.TxTimeout = OnTxTimeout;
 800543e:	6093      	str	r3, [r2, #8]
    RadioEvents.RxTimeout = OnRxTimeout;
 8005440:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <AppLora_Init+0xc0>)
    Radio.Init(&RadioEvents);
 8005442:	1d10      	adds	r0, r2, #4
    RadioEvents.RxTimeout = OnRxTimeout;
 8005444:	6113      	str	r3, [r2, #16]
    RadioEvents.RxError = 	OnRxError;
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <AppLora_Init+0xc4>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8005448:	2400      	movs	r4, #0
    RadioEvents.RxError = 	OnRxError;
 800544a:	6153      	str	r3, [r2, #20]
    Radio.Init(&RadioEvents);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4798      	blx	r3
    random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4827      	ldr	r0, [pc, #156]	; (80054f4 <AppLora_Init+0xc8>)
 8005458:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800545a:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <AppLora_Init+0xcc>)
 800545c:	2601      	movs	r6, #1
 800545e:	9308      	str	r3, [sp, #32]
 8005460:	220a      	movs	r2, #10
 8005462:	2308      	movs	r3, #8
 8005464:	0030      	movs	r0, r6
 8005466:	69fd      	ldr	r5, [r7, #28]
 8005468:	9604      	str	r6, [sp, #16]
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	9601      	str	r6, [sp, #4]
 800546e:	0023      	movs	r3, r4
 8005470:	9200      	str	r2, [sp, #0]
 8005472:	2113      	movs	r1, #19
 8005474:	0022      	movs	r2, r4
 8005476:	9407      	str	r4, [sp, #28]
 8005478:	9406      	str	r4, [sp, #24]
 800547a:	9405      	str	r4, [sp, #20]
 800547c:	9403      	str	r4, [sp, #12]
 800547e:	47a8      	blx	r5
		Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8005480:	2305      	movs	r3, #5
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	3303      	adds	r3, #3
 8005486:	220a      	movs	r2, #10
 8005488:	0021      	movs	r1, r4
 800548a:	0030      	movs	r0, r6
 800548c:	9609      	str	r6, [sp, #36]	; 0x24
 800548e:	9605      	str	r6, [sp, #20]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	69bd      	ldr	r5, [r7, #24]
 8005494:	0033      	movs	r3, r6
 8005496:	9408      	str	r4, [sp, #32]
 8005498:	9407      	str	r4, [sp, #28]
 800549a:	9406      	str	r4, [sp, #24]
 800549c:	9404      	str	r4, [sp, #16]
 800549e:	9403      	str	r4, [sp, #12]
 80054a0:	9400      	str	r4, [sp, #0]
 80054a2:	47a8      	blx	r5
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80054a4:	0030      	movs	r0, r6
 80054a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a8:	21ff      	movs	r1, #255	; 0xff
 80054aa:	4798      	blx	r3
	UTIL_TIMER_Create(&TimerSend, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Send_Event, NULL);
 80054ac:	480a      	ldr	r0, [pc, #40]	; (80054d8 <AppLora_Init+0xac>)
 80054ae:	3e02      	subs	r6, #2
 80054b0:	0022      	movs	r2, r4
 80054b2:	0031      	movs	r1, r6
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <AppLora_Init+0xd0>)
 80054b6:	9400      	str	r4, [sp, #0]
 80054b8:	3020      	adds	r0, #32
 80054ba:	f001 fddb 	bl	8007074 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&TimerLoraTxAgain, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Lora_Tx_Again, NULL);
 80054be:	4806      	ldr	r0, [pc, #24]	; (80054d8 <AppLora_Init+0xac>)
 80054c0:	0022      	movs	r2, r4
 80054c2:	0031      	movs	r1, r6
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <AppLora_Init+0xd4>)
 80054c6:	9400      	str	r4, [sp, #0]
 80054c8:	3038      	adds	r0, #56	; 0x38
 80054ca:	f001 fdd3 	bl	8007074 <UTIL_TIMER_Create>
    	Radio.Rx(RX_TIMEOUT_VALUE);
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	480c      	ldr	r0, [pc, #48]	; (8005504 <AppLora_Init+0xd8>)
 80054d2:	4798      	blx	r3
}
 80054d4:	b00b      	add	sp, #44	; 0x2c
 80054d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d8:	20000478 	.word	0x20000478
 80054dc:	08005395 	.word	0x08005395
 80054e0:	080053bd 	.word	0x080053bd
 80054e4:	080084cc 	.word	0x080084cc
 80054e8:	0800536d 	.word	0x0800536d
 80054ec:	08005349 	.word	0x08005349
 80054f0:	08005321 	.word	0x08005321
 80054f4:	3689cac0 	.word	0x3689cac0
 80054f8:	00002710 	.word	0x00002710
 80054fc:	08005301 	.word	0x08005301
 8005500:	080051e9 	.word	0x080051e9
 8005504:	0037b1d0 	.word	0x0037b1d0

08005508 <AppLora_Send>:
{
 8005508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550a:	b087      	sub	sp, #28
 800550c:	000d      	movs	r5, r1
 800550e:	0007      	movs	r7, r0
 8005510:	0011      	movs	r1, r2
 8005512:	ae03      	add	r6, sp, #12
 8005514:	001a      	movs	r2, r3
    if (Length != 0) // Co payload
 8005516:	2d00      	cmp	r5, #0
 8005518:	d041      	beq.n	800559e <AppLora_Send+0x96>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, DataType);
 800551a:	0030      	movs	r0, r6
 800551c:	f001 f8f6 	bl	800670c <Protocol_Packet_Header>
        UTIL_MEM_set( aLORA_TX, 0, sizeof(aLORA_TX) );
 8005520:	4c2a      	ldr	r4, [pc, #168]	; (80055cc <AppLora_Send+0xc4>)
 8005522:	22ff      	movs	r2, #255	; 0xff
 8005524:	2100      	movs	r1, #0
 8005526:	0020      	movs	r0, r4
 8005528:	f001 ff6a 	bl	8007400 <UTIL_MEM_set>
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 800552c:	7833      	ldrb	r3, [r6, #0]
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 800552e:	4928      	ldr	r1, [pc, #160]	; (80055d0 <AppLora_Send+0xc8>)
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 8005530:	7023      	strb	r3, [r4, #0]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 24);
 8005532:	6873      	ldr	r3, [r6, #4]
 8005534:	0e1a      	lsrs	r2, r3, #24
 8005536:	7062      	strb	r2, [r4, #1]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 16);
 8005538:	0c1a      	lsrs	r2, r3, #16
 800553a:	70a2      	strb	r2, [r4, #2]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.DevAddr;
 800553c:	7123      	strb	r3, [r4, #4]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 800553e:	0a1a      	lsrs	r2, r3, #8
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 8005540:	68b3      	ldr	r3, [r6, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 8005542:	70e2      	strb	r2, [r4, #3]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 8005544:	0e1a      	lsrs	r2, r3, #24
 8005546:	7162      	strb	r2, [r4, #5]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 16);
 8005548:	0c1a      	lsrs	r2, r3, #16
 800554a:	71a2      	strb	r2, [r4, #6]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.NetAddr;
 800554c:	7223      	strb	r3, [r4, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 800554e:	0a1a      	lsrs	r2, r3, #8
        for (i = 0; i < Length; i++)
 8005550:	2300      	movs	r3, #0
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 8005552:	71e2      	strb	r2, [r4, #7]
        for (i = 0; i < Length; i++)
 8005554:	001e      	movs	r6, r3
 8005556:	b2da      	uxtb	r2, r3
 8005558:	3609      	adds	r6, #9
 800555a:	b2b6      	uxth	r6, r6
 800555c:	42aa      	cmp	r2, r5
 800555e:	d202      	bcs.n	8005566 <AppLora_Send+0x5e>
            if (sMessTx.Length_u16 >= sizeof(aLORA_TX) )
 8005560:	2bf6      	cmp	r3, #246	; 0xf6
 8005562:	d125      	bne.n	80055b0 <AppLora_Send+0xa8>
 8005564:	26ff      	movs	r6, #255	; 0xff
        for (i = 0; i < Length; i++)
 8005566:	2200      	movs	r2, #0
        	*(sModem.sBackup.Data_a8 + i) = *(sMessTx.Data_a8 + i);
 8005568:	491a      	ldr	r1, [pc, #104]	; (80055d4 <AppLora_Send+0xcc>)
 800556a:	5ca3      	ldrb	r3, [r4, r2]
 800556c:	69c8      	ldr	r0, [r1, #28]
 800556e:	5483      	strb	r3, [r0, r2]
        for (i = 0; i < sMessTx.Length_u16; i++)
 8005570:	1c53      	adds	r3, r2, #1
 8005572:	b2da      	uxtb	r2, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	42b3      	cmp	r3, r6
 8005578:	d3f7      	bcc.n	800556a <AppLora_Send+0x62>
    	LED_ON(__LED_MEASURE);
 800557a:	2001      	movs	r0, #1
        sModem.sBackup.Length_u16 = sMessTx.Length_u16;
 800557c:	840e      	strh	r6, [r1, #32]
    	LED_ON(__LED_MEASURE);
 800557e:	f001 fff1 	bl	8007564 <LED_ON>
        if (delay != 0)
 8005582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005584:	2b00      	cmp	r3, #0
 8005586:	d017      	beq.n	80055b8 <AppLora_Send+0xb0>
        	UTIL_TIMER_SetPeriod(&TimerSend, delay);
 8005588:	4c13      	ldr	r4, [pc, #76]	; (80055d8 <AppLora_Send+0xd0>)
 800558a:	0019      	movs	r1, r3
 800558c:	3420      	adds	r4, #32
 800558e:	0020      	movs	r0, r4
 8005590:	f001 fe5e 	bl	8007250 <UTIL_TIMER_SetPeriod>
        	UTIL_TIMER_Start(&TimerSend);
 8005594:	0020      	movs	r0, r4
 8005596:	f001 fe21 	bl	80071dc <UTIL_TIMER_Start>
        return 1;
 800559a:	2501      	movs	r5, #1
 800559c:	e005      	b.n	80055aa <AppLora_Send+0xa2>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, _DATA_NONE);
 800559e:	002a      	movs	r2, r5
 80055a0:	0030      	movs	r0, r6
 80055a2:	f001 f8b3 	bl	800670c <Protocol_Packet_Header>
    if ( (Length != 0) || (CheckACKRequest == TRUE) )
 80055a6:	2801      	cmp	r0, #1
 80055a8:	d0ba      	beq.n	8005520 <AppLora_Send+0x18>
}
 80055aa:	0028      	movs	r0, r5
 80055ac:	b007      	add	sp, #28
 80055ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 80055b0:	5cfa      	ldrb	r2, [r7, r3]
 80055b2:	54ca      	strb	r2, [r1, r3]
        for (i = 0; i < Length; i++)
 80055b4:	3301      	adds	r3, #1
 80055b6:	e7cd      	b.n	8005554 <AppLora_Send+0x4c>
        	Radio.Send(sMessTx.Data_a8, sMessTx.Length_u16);
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <AppLora_Send+0xd4>)
 80055ba:	0020      	movs	r0, r4
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	b2f1      	uxtb	r1, r6
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	4798      	blx	r3
            LED_OFF(__LED_MEASURE);
 80055c4:	2001      	movs	r0, #1
 80055c6:	f001 ffdd 	bl	8007584 <LED_OFF>
 80055ca:	e7e6      	b.n	800559a <AppLora_Send+0x92>
 80055cc:	200006c9 	.word	0x200006c9
 80055d0:	200006d2 	.word	0x200006d2
 80055d4:	200000c0 	.word	0x200000c0
 80055d8:	20000478 	.word	0x20000478
 80055dc:	080084cc 	.word	0x080084cc

080055e0 <AppLora_Task>:
{
 80055e0:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < _EVENT_LORA_END; i++)
 80055e2:	2500      	movs	r5, #0
 80055e4:	4c0f      	ldr	r4, [pc, #60]	; (8005624 <AppLora_Task+0x44>)
 80055e6:	3424      	adds	r4, #36	; 0x24
		if (sEventAppLora[i].e_status == 1)
 80055e8:	7863      	ldrb	r3, [r4, #1]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10a      	bne.n	8005604 <AppLora_Task+0x24>
			if ((sEventAppLora[i].e_systick == 0) ||
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10e      	bne.n	8005612 <AppLora_Task+0x32>
                sEventAppLora[i].e_status = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	7063      	strb	r3, [r4, #1]
				sEventAppLora[i].e_systick = HAL_GetTick();
 80055f8:	f7fb fe26 	bl	8001248 <HAL_GetTick>
				sEventAppLora[i].e_function_handler(i);
 80055fc:	68e3      	ldr	r3, [r4, #12]
				sEventAppLora[i].e_systick = HAL_GetTick();
 80055fe:	6060      	str	r0, [r4, #4]
				sEventAppLora[i].e_function_handler(i);
 8005600:	0028      	movs	r0, r5
 8005602:	4798      	blx	r3
	for (i = 0; i < _EVENT_LORA_END; i++)
 8005604:	3501      	adds	r5, #1
 8005606:	b2ed      	uxtb	r5, r5
 8005608:	3410      	adds	r4, #16
 800560a:	2d03      	cmp	r5, #3
 800560c:	d1ec      	bne.n	80055e8 <AppLora_Task+0x8>
}
 800560e:	2000      	movs	r0, #0
 8005610:	bd70      	pop	{r4, r5, r6, pc}
					((HAL_GetTick() - sEventAppLora[i].e_systick)  >=  sEventAppLora[i].e_period))
 8005612:	f7fb fe19 	bl	8001248 <HAL_GetTick>
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	1ac0      	subs	r0, r0, r3
			if ((sEventAppLora[i].e_systick == 0) ||
 800561a:	68a3      	ldr	r3, [r4, #8]
 800561c:	4298      	cmp	r0, r3
 800561e:	d2e9      	bcs.n	80055f4 <AppLora_Task+0x14>
 8005620:	e7f0      	b.n	8005604 <AppLora_Task+0x24>
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	20000064 	.word	0x20000064

08005628 <AppLora_Deinit_IO_Radio>:
{
 8005628:	b510      	push	{r4, lr}
    Sx_Board_IoDeInit();
 800562a:	f7fb fc9f 	bl	8000f6c <CMWX1ZZABZ0XX_RADIO_IoDeInit>
}
 800562e:	bd10      	pop	{r4, pc}

08005630 <AppLora_Init_IO_Radio>:
{
 8005630:	b510      	push	{r4, lr}
    Sx_Board_IoInit();
 8005632:	f7fb fbc1 	bl	8000db8 <CMWX1ZZABZ0XX_RADIO_IoInit>
}
 8005636:	bd10      	pop	{r4, pc}

08005638 <SysApp_Init>:
#include "i2c.h"
#include "radio.h"

/* Exported functions --------------------------------------------------------*/
void SysApp_Init (void)
{
 8005638:	b510      	push	{r4, lr}
	MX_GPIO_Init();
 800563a:	f001 f899 	bl	8006770 <MX_GPIO_Init>

	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
 800563e:	f001 f8c5 	bl	80067cc <MX_USART1_UART_Init>
		MX_USART2_UART_Init();
 8005642:	f001 f8df 	bl	8006804 <MX_USART2_UART_Init>
		MX_USART1_UART_Init();
		MX_ADC_Init();
		MX_I2C1_Init();
	#endif

	AppLora_Init ();
 8005646:	f7ff fef1 	bl	800542c <AppLora_Init>
	UTIL_LPM_Init();
 800564a:	f001 fa1f 	bl	8006a8c <UTIL_LPM_Init>
	Init_Uart_Module();
 800564e:	f000 fc4b 	bl	8005ee8 <Init_Uart_Module>
	Init_Memory_Infor();
 8005652:	f000 fe13 	bl	800627c <Init_Memory_Infor>
	AppCom_Init();
 8005656:	f7ff fd85 	bl	8005164 <AppCom_Init>
}
 800565a:	bd10      	pop	{r4, pc}

0800565c <SysApp_Start>:

void SysApp_Start(void)
{
 800565c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG(LOG_DEBUG, "Main task start");
 800565e:	2001      	movs	r0, #1
 8005660:	4910      	ldr	r1, [pc, #64]	; (80056a4 <SysApp_Start+0x48>)
 8005662:	f001 fed1 	bl	8007408 <LOG>
	UTIL_TIMER_Create(&TimerLoraTx,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Active_Lora_Tx_Event, NULL);
 8005666:	2400      	movs	r4, #0
 8005668:	2101      	movs	r1, #1
 800566a:	4d0f      	ldr	r5, [pc, #60]	; (80056a8 <SysApp_Start+0x4c>)
 800566c:	0022      	movs	r2, r4
 800566e:	0028      	movs	r0, r5
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <SysApp_Start+0x50>)
 8005672:	9400      	str	r4, [sp, #0]
 8005674:	4249      	negs	r1, r1
 8005676:	f001 fcfd 	bl	8007074 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
 800567a:	21fa      	movs	r1, #250	; 0xfa
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <SysApp_Start+0x54>)
 800567e:	0089      	lsls	r1, r1, #2
 8005680:	885b      	ldrh	r3, [r3, #2]
 8005682:	0028      	movs	r0, r5
 8005684:	4359      	muls	r1, r3
 8005686:	f001 fde3 	bl	8007250 <UTIL_TIMER_SetPeriod>
	#ifdef DEVICE_TYPE_STATION
		LED_OFF(__LED_MODE);
 800568a:	0020      	movs	r0, r4
 800568c:	f001 ff7a 	bl	8007584 <LED_OFF>
		Radio.Rx(RX_TIMEOUT_VALUE);
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <SysApp_Start+0x58>)
 8005692:	4809      	ldr	r0, [pc, #36]	; (80056b8 <SysApp_Start+0x5c>)
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	4798      	blx	r3
		LED_ON(__LED_MODE);
		LED_OFF(__LED_MEASURE);
//		UTIL_TIMER_Start (&TimerLoraTx);
//		USER_Payload_Node_Join(sModem.TimeDelaySingle_u32);
	#endif
	fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 8005698:	2103      	movs	r1, #3
 800569a:	4808      	ldr	r0, [pc, #32]	; (80056bc <SysApp_Start+0x60>)
 800569c:	f001 f97b 	bl	8006996 <fevent_enable>
}
 80056a0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	08008732 	.word	0x08008732
 80056a8:	20000460 	.word	0x20000460
 80056ac:	080051d5 	.word	0x080051d5
 80056b0:	20000114 	.word	0x20000114
 80056b4:	080084cc 	.word	0x080084cc
 80056b8:	0037b1d0 	.word	0x0037b1d0
 80056bc:	20000024 	.word	0x20000024

080056c0 <Main_Task>:

void Main_Task (void)
{
 80056c0:	b510      	push	{r4, lr}
    uint8_t TaskStatus_u8 = 0;

    SysApp_Init();
 80056c2:	f7ff ffb9 	bl	8005638 <SysApp_Init>
    SysApp_Start();
 80056c6:	f7ff ffc9 	bl	800565c <SysApp_Start>
	for (;;)
	{
		TaskStatus_u8 = 0;

		TaskStatus_u8 |= AppCom_Task();
 80056ca:	f7ff fcf7 	bl	80050bc <AppCom_Task>

		TaskStatus_u8 |= AppLora_Task();
 80056ce:	f7ff ff87 	bl	80055e0 <AppLora_Task>
	for (;;)
 80056d2:	e7fa      	b.n	80056ca <Main_Task+0xa>

080056d4 <ADC_Desequence_Powerhungry_Channels>:
	__HAL_RCC_ADC1_CLK_DISABLE() ;
    return adcData;
}

void ADC_Desequence_Powerhungry_Channels(void)
{
 80056d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined (STM32L072xx) || defined (STM32L082xx)
     ADC_ChannelConfTypeDef sConfig;

    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056d6:	4c08      	ldr	r4, [pc, #32]	; (80056f8 <ADC_Desequence_Powerhungry_Channels+0x24>)
    sConfig.Rank = ADC_RANK_NONE;
 80056d8:	4d08      	ldr	r5, [pc, #32]	; (80056fc <ADC_Desequence_Powerhungry_Channels+0x28>)
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <ADC_Desequence_Powerhungry_Channels+0x2c>)
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056dc:	4669      	mov	r1, sp
 80056de:	0020      	movs	r0, r4
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80056e0:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_NONE;
 80056e2:	9501      	str	r5, [sp, #4]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056e4:	f7fb fec0 	bl	8001468 <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <ADC_Desequence_Powerhungry_Channels+0x30>)
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056ea:	4669      	mov	r1, sp
 80056ec:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_NONE;
 80056ee:	9501      	str	r5, [sp, #4]
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80056f0:	9300      	str	r3, [sp, #0]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056f2:	f7fb feb9 	bl	8001468 <HAL_ADC_ConfigChannel>
#endif
}
 80056f6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80056f8:	20001134 	.word	0x20001134
 80056fc:	00001001 	.word	0x00001001
 8005700:	48040000 	.word	0x48040000
 8005704:	44020000 	.word	0x44020000

08005708 <_fAT_SET_LED>:
}

void _fAT_SET_LED(sData *str_Receiv, uint16_t Pos)
{

}
 8005708:	4770      	bx	lr
	...

0800570c <_fAT_GET_DEVICE_ID>:
{
 800570c:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sDCU_id.Data_a8, sModem.sDCU_id.Length_u16);
 800570e:	4b03      	ldr	r3, [pc, #12]	; (800571c <_fAT_GET_DEVICE_ID+0x10>)
 8005710:	8899      	ldrh	r1, [r3, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	f000 fc0e 	bl	8005f34 <DCU_Response_AT>
}
 8005718:	bd10      	pop	{r4, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	200000c0 	.word	0x200000c0

08005720 <_fAT_GET_NETWORK_ID>:
{
 8005720:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sNET_id.Data_a8, sModem.sNET_id.Length_u16);
 8005722:	4b03      	ldr	r3, [pc, #12]	; (8005730 <_fAT_GET_NETWORK_ID+0x10>)
 8005724:	8999      	ldrh	r1, [r3, #12]
 8005726:	6898      	ldr	r0, [r3, #8]
 8005728:	f000 fc04 	bl	8005f34 <DCU_Response_AT>
}
 800572c:	bd10      	pop	{r4, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	200000c0 	.word	0x200000c0

08005734 <_fAT_GET_DUTY_WAKEUP>:
{
 8005734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t     aTemp[14] = {0};
 8005736:	240a      	movs	r4, #10
 8005738:	0022      	movs	r2, r4
 800573a:	2100      	movs	r1, #0
 800573c:	a801      	add	r0, sp, #4
 800573e:	f002 f94a 	bl	80079d6 <memset>
    aTemp[length++] = 'F';
 8005742:	466a      	mov	r2, sp
 8005744:	2346      	movs	r3, #70	; 0x46
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 8005746:	4d1a      	ldr	r5, [pc, #104]	; (80057b0 <_fAT_GET_DUTY_WAKEUP+0x7c>)
    aTemp[length++] = 'F';
 8005748:	7013      	strb	r3, [r2, #0]
    aTemp[length++] = 'R';
 800574a:	330c      	adds	r3, #12
 800574c:	7053      	strb	r3, [r2, #1]
    aTemp[length++] = 'E';
 800574e:	3b0d      	subs	r3, #13
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 8005750:	782e      	ldrb	r6, [r5, #0]
    aTemp[length++] = 'E';
 8005752:	7093      	strb	r3, [r2, #2]
    aTemp[length++] = 'Q';
 8005754:	330c      	adds	r3, #12
 8005756:	70d3      	strb	r3, [r2, #3]
    aTemp[length++] = '=';
 8005758:	3b14      	subs	r3, #20
 800575a:	7113      	strb	r3, [r2, #4]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 800575c:	0021      	movs	r1, r4
 800575e:	0030      	movs	r0, r6
 8005760:	f7fa fcf8 	bl	8000154 <__udivsi3>
 8005764:	466b      	mov	r3, sp
 8005766:	3030      	adds	r0, #48	; 0x30
 8005768:	7158      	strb	r0, [r3, #5]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 800576a:	0021      	movs	r1, r4
 800576c:	0030      	movs	r0, r6
 800576e:	f7fa fd77 	bl	8000260 <__aeabi_uidivmod>
 8005772:	466b      	mov	r3, sp
 8005774:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = 'x';
 8005776:	466a      	mov	r2, sp
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 8005778:	7199      	strb	r1, [r3, #6]
    aTemp[length++] = 'x';
 800577a:	2378      	movs	r3, #120	; 0x78
 800577c:	71d3      	strb	r3, [r2, #7]
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 800577e:	886d      	ldrh	r5, [r5, #2]
 8005780:	0021      	movs	r1, r4
 8005782:	0028      	movs	r0, r5
 8005784:	f7fa fce6 	bl	8000154 <__udivsi3>
 8005788:	0021      	movs	r1, r4
 800578a:	b280      	uxth	r0, r0
 800578c:	f7fa fd68 	bl	8000260 <__aeabi_uidivmod>
 8005790:	466b      	mov	r3, sp
 8005792:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8005794:	0028      	movs	r0, r5
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 8005796:	7219      	strb	r1, [r3, #8]
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8005798:	0021      	movs	r1, r4
 800579a:	f7fa fd61 	bl	8000260 <__aeabi_uidivmod>
 800579e:	466b      	mov	r3, sp
 80057a0:	3130      	adds	r1, #48	; 0x30
 80057a2:	7259      	strb	r1, [r3, #9]
    DCU_Response_AT(&aTemp[0], length);
 80057a4:	4668      	mov	r0, sp
 80057a6:	0021      	movs	r1, r4
 80057a8:	f000 fbc4 	bl	8005f34 <DCU_Response_AT>
}
 80057ac:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20000114 	.word	0x20000114

080057b4 <_fAT_GET_TYPE_MODEM>:
{
 80057b4:	b510      	push	{r4, lr}
 80057b6:	b08e      	sub	sp, #56	; 0x38
    uint8_t     aTemp[50] = {0};
 80057b8:	222e      	movs	r2, #46	; 0x2e
 80057ba:	2100      	movs	r1, #0
 80057bc:	a802      	add	r0, sp, #8
 80057be:	f002 f90a 	bl	80079d6 <memset>
    aTemp[length++] = 'T';
 80057c2:	2354      	movs	r3, #84	; 0x54
    aTemp[length++] = 'E';
 80057c4:	2045      	movs	r0, #69	; 0x45
    aTemp[length++] = ' ';
 80057c6:	2220      	movs	r2, #32
    uint8_t     aTemp[50] = {0};
 80057c8:	ac01      	add	r4, sp, #4
    aTemp[length++] = 'T';
 80057ca:	7023      	strb	r3, [r4, #0]
    aTemp[length++] = 'Y';
 80057cc:	3305      	adds	r3, #5
 80057ce:	7063      	strb	r3, [r4, #1]
    aTemp[length++] = 'P';
 80057d0:	3b09      	subs	r3, #9
 80057d2:	70a3      	strb	r3, [r4, #2]
    aTemp[length++] = ':';
 80057d4:	3b16      	subs	r3, #22
 80057d6:	7123      	strb	r3, [r4, #4]
    switch (sModem.TypeModem_u8)
 80057d8:	4b29      	ldr	r3, [pc, #164]	; (8005880 <_fAT_GET_TYPE_MODEM+0xcc>)
    aTemp[length++] = 'E';
 80057da:	70e0      	strb	r0, [r4, #3]
    aTemp[length++] = ' ';
 80057dc:	7162      	strb	r2, [r4, #5]
    switch (sModem.TypeModem_u8)
 80057de:	7e1b      	ldrb	r3, [r3, #24]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d048      	beq.n	8005876 <_fAT_GET_TYPE_MODEM+0xc2>
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d048      	beq.n	800587a <_fAT_GET_TYPE_MODEM+0xc6>
 80057e8:	2106      	movs	r1, #6
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d13d      	bne.n	800586a <_fAT_GET_TYPE_MODEM+0xb6>
    	    aTemp[length++] = 'N';
 80057ee:	334e      	adds	r3, #78	; 0x4e
    	    aTemp[length++] = 'O';
 80057f0:	3149      	adds	r1, #73	; 0x49
    	    aTemp[length++] = 'N';
 80057f2:	71a3      	strb	r3, [r4, #6]
    	    aTemp[length++] = 'O';
 80057f4:	71e1      	strb	r1, [r4, #7]
    	    aTemp[length++] = ' ';
 80057f6:	72a2      	strb	r2, [r4, #10]
    	    aTemp[length++] = 'D';
 80057f8:	390b      	subs	r1, #11
    	    aTemp[length++] = 'V';
 80057fa:	3236      	adds	r2, #54	; 0x36
    	    aTemp[length++] = 'N';
 80057fc:	7323      	strb	r3, [r4, #12]
    	    aTemp[length++] = 'A';
 80057fe:	3b0d      	subs	r3, #13
    	    aTemp[length++] = 'V';
 8005800:	72e2      	strb	r2, [r4, #11]
    	    aTemp[length++] = 'D';
 8005802:	7221      	strb	r1, [r4, #8]
    	    aTemp[length++] = 'E';
 8005804:	7260      	strb	r0, [r4, #9]
    	    aTemp[length++] = 'A';
 8005806:	7363      	strb	r3, [r4, #13]
 8005808:	3a48      	subs	r2, #72	; 0x48
    	    aTemp[length++] = 'N';
 800580a:	234e      	movs	r3, #78	; 0x4e
    	    aTemp[length++] = 'O';
 800580c:	214f      	movs	r1, #79	; 0x4f
    	    aTemp[length++] = 'N';
 800580e:	54a3      	strb	r3, [r4, r2]
    	    aTemp[length++] = 'O';
 8005810:	1c53      	adds	r3, r2, #1
 8005812:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'D';
 8005814:	1c93      	adds	r3, r2, #2
 8005816:	390b      	subs	r1, #11
 8005818:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'E';
 800581a:	1cd3      	adds	r3, r2, #3
 800581c:	3101      	adds	r1, #1
 800581e:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = ' ';
 8005820:	1d13      	adds	r3, r2, #4
 8005822:	3925      	subs	r1, #37	; 0x25
 8005824:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'V';
 8005826:	1d53      	adds	r3, r2, #5
 8005828:	3136      	adds	r1, #54	; 0x36
 800582a:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'P';
 800582c:	1dd3      	adds	r3, r2, #7
 800582e:	3906      	subs	r1, #6
 8005830:	3206      	adds	r2, #6
 8005832:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'S';
 8005834:	2253      	movs	r2, #83	; 0x53
    	    aTemp[length++] = 'T';
 8005836:	2154      	movs	r1, #84	; 0x54
    	    aTemp[length++] = 'A';
 8005838:	2041      	movs	r0, #65	; 0x41
    	    aTemp[length++] = 'S';
 800583a:	54e2      	strb	r2, [r4, r3]
 800583c:	1c5a      	adds	r2, r3, #1
    	    aTemp[length++] = 'T';
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	54a1      	strb	r1, [r4, r2]
 8005842:	1c9a      	adds	r2, r3, #2
    	    aTemp[length++] = 'A';
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	54a0      	strb	r0, [r4, r2]
 8005848:	1cda      	adds	r2, r3, #3
    	    aTemp[length++] = 'T';
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	54a1      	strb	r1, [r4, r2]
 800584e:	1d1a      	adds	r2, r3, #4
    	    aTemp[length++] = 'I';
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	390b      	subs	r1, #11
 8005854:	54a1      	strb	r1, [r4, r2]
 8005856:	1d5a      	adds	r2, r3, #5
    	    aTemp[length++] = 'O';
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	3106      	adds	r1, #6
 800585c:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'N';
 800585e:	224e      	movs	r2, #78	; 0x4e
 8005860:	1dd9      	adds	r1, r3, #7
    	    aTemp[length++] = 'O';
 8005862:	3306      	adds	r3, #6
    	    aTemp[length++] = 'N';
 8005864:	b2db      	uxtb	r3, r3
 8005866:	b2c9      	uxtb	r1, r1
 8005868:	54e2      	strb	r2, [r4, r3]
    DCU_Response_AT(&aTemp[0], length);
 800586a:	0020      	movs	r0, r4
 800586c:	b289      	uxth	r1, r1
 800586e:	f000 fb61 	bl	8005f34 <DCU_Response_AT>
}
 8005872:	b00e      	add	sp, #56	; 0x38
 8005874:	bd10      	pop	{r4, pc}
    switch (sModem.TypeModem_u8)
 8005876:	2206      	movs	r2, #6
 8005878:	e7c7      	b.n	800580a <_fAT_GET_TYPE_MODEM+0x56>
 800587a:	2306      	movs	r3, #6
 800587c:	e7da      	b.n	8005834 <_fAT_GET_TYPE_MODEM+0x80>
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	200000c0 	.word	0x200000c0

08005884 <_fAT_GET_RTC>:
{
 8005884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005886:	b08b      	sub	sp, #44	; 0x2c
    uint8_t aTEMP_RTC[40] = {0};
 8005888:	2224      	movs	r2, #36	; 0x24
 800588a:	2100      	movs	r1, #0
 800588c:	a801      	add	r0, sp, #4
 800588e:	f002 f8a2 	bl	80079d6 <memset>
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8005892:	2554      	movs	r5, #84	; 0x54
 8005894:	466b      	mov	r3, sp
 8005896:	466a      	mov	r2, sp
 8005898:	701d      	strb	r5, [r3, #0]
 800589a:	2349      	movs	r3, #73	; 0x49
 800589c:	7053      	strb	r3, [r2, #1]
 800589e:	3304      	adds	r3, #4
 80058a0:	7093      	strb	r3, [r2, #2]
 80058a2:	3b08      	subs	r3, #8
 80058a4:	70d3      	strb	r3, [r2, #3]
    aTEMP_RTC[length++] = '=';
 80058a6:	4669      	mov	r1, sp
 80058a8:	223d      	movs	r2, #61	; 0x3d
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 80058aa:	4c3c      	ldr	r4, [pc, #240]	; (800599c <_fAT_GET_RTC+0x118>)
    aTEMP_RTC[length++] = '=';
 80058ac:	710a      	strb	r2, [r1, #4]
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 80058ae:	7826      	ldrb	r6, [r4, #0]
 80058b0:	210a      	movs	r1, #10
 80058b2:	0030      	movs	r0, r6
 80058b4:	f7fa fc4e 	bl	8000154 <__udivsi3>
 80058b8:	4669      	mov	r1, sp
 80058ba:	3030      	adds	r0, #48	; 0x30
 80058bc:	7148      	strb	r0, [r1, #5]
 80058be:	0030      	movs	r0, r6
 80058c0:	210a      	movs	r1, #10
 80058c2:	f7fa fccd 	bl	8000260 <__aeabi_uidivmod>
 80058c6:	263a      	movs	r6, #58	; 0x3a
 80058c8:	4668      	mov	r0, sp
 80058ca:	3130      	adds	r1, #48	; 0x30
 80058cc:	7181      	strb	r1, [r0, #6]
 80058ce:	71c6      	strb	r6, [r0, #7]
	aTEMP_RTC[length++] = sRTC.min / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.min % 10 + 0x30;     aTEMP_RTC[length++] = ':';
 80058d0:	7867      	ldrb	r7, [r4, #1]
 80058d2:	210a      	movs	r1, #10
 80058d4:	0038      	movs	r0, r7
 80058d6:	f7fa fc3d 	bl	8000154 <__udivsi3>
 80058da:	4669      	mov	r1, sp
 80058dc:	3030      	adds	r0, #48	; 0x30
 80058de:	7208      	strb	r0, [r1, #8]
 80058e0:	0038      	movs	r0, r7
 80058e2:	210a      	movs	r1, #10
 80058e4:	f7fa fcbc 	bl	8000260 <__aeabi_uidivmod>
 80058e8:	4668      	mov	r0, sp
 80058ea:	3130      	adds	r1, #48	; 0x30
 80058ec:	7241      	strb	r1, [r0, #9]
 80058ee:	7286      	strb	r6, [r0, #10]
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 80058f0:	78a6      	ldrb	r6, [r4, #2]
 80058f2:	210a      	movs	r1, #10
 80058f4:	0030      	movs	r0, r6
 80058f6:	f7fa fc2d 	bl	8000154 <__udivsi3>
 80058fa:	4669      	mov	r1, sp
 80058fc:	3030      	adds	r0, #48	; 0x30
 80058fe:	72c8      	strb	r0, [r1, #11]
 8005900:	0030      	movs	r0, r6
 8005902:	210a      	movs	r1, #10
 8005904:	f7fa fcac 	bl	8000260 <__aeabi_uidivmod>
 8005908:	4668      	mov	r0, sp
 800590a:	233b      	movs	r3, #59	; 0x3b
    aTEMP_RTC[length++] = '=';
 800590c:	223d      	movs	r2, #61	; 0x3d
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 800590e:	7343      	strb	r3, [r0, #13]
    aTEMP_RTC[length++] = 0x0D;
 8005910:	3b2e      	subs	r3, #46	; 0x2e
 8005912:	7383      	strb	r3, [r0, #14]
	aTEMP_RTC[length++] = 'D'; aTEMP_RTC[length++] = 'A'; aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'E';
 8005914:	3337      	adds	r3, #55	; 0x37
 8005916:	73c3      	strb	r3, [r0, #15]
 8005918:	3b03      	subs	r3, #3
 800591a:	7403      	strb	r3, [r0, #16]
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 800591c:	3130      	adds	r1, #48	; 0x30
	aTEMP_RTC[length++] = 'D'; aTEMP_RTC[length++] = 'A'; aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'E';
 800591e:	3304      	adds	r3, #4
    aTEMP_RTC[length++] = '=';
 8005920:	74c2      	strb	r2, [r0, #19]
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 8005922:	7301      	strb	r1, [r0, #12]
	aTEMP_RTC[length++] = 'D'; aTEMP_RTC[length++] = 'A'; aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'E';
 8005924:	7445      	strb	r5, [r0, #17]
 8005926:	7483      	strb	r3, [r0, #18]
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 8005928:	78e3      	ldrb	r3, [r4, #3]
 800592a:	3d27      	subs	r5, #39	; 0x27
 800592c:	3331      	adds	r3, #49	; 0x31
 800592e:	7503      	strb	r3, [r0, #20]
 8005930:	7545      	strb	r5, [r0, #21]
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 8005932:	7926      	ldrb	r6, [r4, #4]
 8005934:	210a      	movs	r1, #10
 8005936:	0030      	movs	r0, r6
 8005938:	f7fa fc0c 	bl	8000154 <__udivsi3>
 800593c:	466b      	mov	r3, sp
 800593e:	3030      	adds	r0, #48	; 0x30
 8005940:	7598      	strb	r0, [r3, #22]
 8005942:	210a      	movs	r1, #10
 8005944:	0030      	movs	r0, r6
 8005946:	f7fa fc8b 	bl	8000260 <__aeabi_uidivmod>
 800594a:	466b      	mov	r3, sp
 800594c:	3130      	adds	r1, #48	; 0x30
 800594e:	75d9      	strb	r1, [r3, #23]
 8005950:	761d      	strb	r5, [r3, #24]
	aTEMP_RTC[length++] = sRTC.month / 10 + 0x30;   aTEMP_RTC[length++] = sRTC.month % 10 + 0x30;     aTEMP_RTC[length++] = '-';
 8005952:	7966      	ldrb	r6, [r4, #5]
 8005954:	210a      	movs	r1, #10
 8005956:	0030      	movs	r0, r6
 8005958:	f7fa fbfc 	bl	8000154 <__udivsi3>
 800595c:	466b      	mov	r3, sp
 800595e:	3030      	adds	r0, #48	; 0x30
 8005960:	7658      	strb	r0, [r3, #25]
 8005962:	210a      	movs	r1, #10
 8005964:	0030      	movs	r0, r6
 8005966:	f7fa fc7b 	bl	8000260 <__aeabi_uidivmod>
 800596a:	466b      	mov	r3, sp
 800596c:	3130      	adds	r1, #48	; 0x30
 800596e:	7699      	strb	r1, [r3, #26]
 8005970:	76dd      	strb	r5, [r3, #27]
	aTEMP_RTC[length++] = sRTC.year / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.year % 10 + 0x30;
 8005972:	79a4      	ldrb	r4, [r4, #6]
 8005974:	210a      	movs	r1, #10
 8005976:	0020      	movs	r0, r4
 8005978:	f7fa fbec 	bl	8000154 <__udivsi3>
 800597c:	466b      	mov	r3, sp
 800597e:	3030      	adds	r0, #48	; 0x30
 8005980:	7718      	strb	r0, [r3, #28]
 8005982:	210a      	movs	r1, #10
 8005984:	0020      	movs	r0, r4
 8005986:	f7fa fc6b 	bl	8000260 <__aeabi_uidivmod>
 800598a:	466b      	mov	r3, sp
 800598c:	3130      	adds	r1, #48	; 0x30
 800598e:	7759      	strb	r1, [r3, #29]
	DCU_Response_AT(aTEMP_RTC, length);
 8005990:	4668      	mov	r0, sp
 8005992:	211e      	movs	r1, #30
 8005994:	f000 face 	bl	8005f34 <DCU_Response_AT>
}
 8005998:	b00b      	add	sp, #44	; 0x2c
 800599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599c:	20001388 	.word	0x20001388

080059a0 <_fAT_GET_AUTHOR>:
{
//    DCU_Response_AT(sFirmVersion.Data_a8, sFirmVersion.Length_u16);
}

void _fAT_GET_AUTHOR(sData *str_Receiv, uint16_t Pos)
{
 80059a0:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"Hello, we are the developers of this project.", 45);
 80059a2:	212d      	movs	r1, #45	; 0x2d
 80059a4:	481f      	ldr	r0, [pc, #124]	; (8005a24 <_fAT_GET_AUTHOR+0x84>)
 80059a6:	f000 fac5 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hanoi University of Science and Technology.", 43);
 80059aa:	212b      	movs	r1, #43	; 0x2b
 80059ac:	481e      	ldr	r0, [pc, #120]	; (8005a28 <_fAT_GET_AUTHOR+0x88>)
 80059ae:	f000 fac1 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Industrial Instrumentation & IoT Laboratory.", 44);
 80059b2:	212c      	movs	r1, #44	; 0x2c
 80059b4:	481d      	ldr	r0, [pc, #116]	; (8005a2c <_fAT_GET_AUTHOR+0x8c>)
 80059b6:	f000 fabd 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"List of project participants:", 29);
 80059ba:	211d      	movs	r1, #29
 80059bc:	481c      	ldr	r0, [pc, #112]	; (8005a30 <_fAT_GET_AUTHOR+0x90>)
 80059be:	f000 fab9 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Project Manager: Nguyen Quang Huy", 33);
 80059c2:	2121      	movs	r1, #33	; 0x21
 80059c4:	481b      	ldr	r0, [pc, #108]	; (8005a34 <_fAT_GET_AUTHOR+0x94>)
 80059c6:	f000 fab5 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hardware Designer: Ninh La Van Canh", 35);
 80059ca:	2123      	movs	r1, #35	; 0x23
 80059cc:	481a      	ldr	r0, [pc, #104]	; (8005a38 <_fAT_GET_AUTHOR+0x98>)
 80059ce:	f000 fab1 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Software Developer: Huy Hung\r\n", 28);
 80059d2:	211c      	movs	r1, #28
 80059d4:	4819      	ldr	r0, [pc, #100]	; (8005a3c <_fAT_GET_AUTHOR+0x9c>)
 80059d6:	f000 faad 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"and me.", 7);
 80059da:	2107      	movs	r1, #7
 80059dc:	4818      	ldr	r0, [pc, #96]	; (8005a40 <_fAT_GET_AUTHOR+0xa0>)
 80059de:	f000 faa9 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"  ______   _____   _______  _______  _______ ", 45);
 80059e2:	212d      	movs	r1, #45	; 0x2d
 80059e4:	4817      	ldr	r0, [pc, #92]	; (8005a44 <_fAT_GET_AUTHOR+0xa4>)
 80059e6:	f000 faa5 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" / _____) / ___ \\ /  _____)|__   __||__   __|", 45);
 80059ea:	212d      	movs	r1, #45	; 0x2d
 80059ec:	4816      	ldr	r0, [pc, #88]	; (8005a48 <_fAT_GET_AUTHOR+0xa8>)
 80059ee:	f000 faa1 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"( (____  / /___\\ \\| |  ___    | |      | |   ", 42);
 80059f2:	212a      	movs	r1, #42	; 0x2a
 80059f4:	4815      	ldr	r0, [pc, #84]	; (8005a4c <_fAT_GET_AUTHOR+0xac>)
 80059f6:	f000 fa9d 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" \\____ \\ |  ___  || | |__ |   | |      | |   ", 42);
 80059fa:	212a      	movs	r1, #42	; 0x2a
 80059fc:	4814      	ldr	r0, [pc, #80]	; (8005a50 <_fAT_GET_AUTHOR+0xb0>)
 80059fe:	f000 fa99 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" _____) )| |   | || |___/ | __| |__    | |   ", 42);
 8005a02:	212a      	movs	r1, #42	; 0x2a
 8005a04:	4813      	ldr	r0, [pc, #76]	; (8005a54 <_fAT_GET_AUTHOR+0xb4>)
 8005a06:	f000 fa95 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"(______/ |_|   |_|\\_______/|_______|   |_|   ", 42);
 8005a0a:	212a      	movs	r1, #42	; 0x2a
 8005a0c:	4812      	ldr	r0, [pc, #72]	; (8005a58 <_fAT_GET_AUTHOR+0xb8>)
 8005a0e:	f000 fa91 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"/******(C) COPYRIGHT by Bui Viet Duc ******/ ", 42);
 8005a12:	212a      	movs	r1, #42	; 0x2a
 8005a14:	4811      	ldr	r0, [pc, #68]	; (8005a5c <_fAT_GET_AUTHOR+0xbc>)
 8005a16:	f000 fa8d 	bl	8005f34 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Thank you for everything. Good luck. See you again.", 51);
 8005a1a:	2133      	movs	r1, #51	; 0x33
 8005a1c:	4810      	ldr	r0, [pc, #64]	; (8005a60 <_fAT_GET_AUTHOR+0xc0>)
 8005a1e:	f000 fa89 	bl	8005f34 <DCU_Response_AT>
}
 8005a22:	bd10      	pop	{r4, pc}
 8005a24:	08008742 	.word	0x08008742
 8005a28:	08008770 	.word	0x08008770
 8005a2c:	0800879c 	.word	0x0800879c
 8005a30:	080087c9 	.word	0x080087c9
 8005a34:	080087e7 	.word	0x080087e7
 8005a38:	08008809 	.word	0x08008809
 8005a3c:	0800882d 	.word	0x0800882d
 8005a40:	0800884c 	.word	0x0800884c
 8005a44:	08008854 	.word	0x08008854
 8005a48:	08008882 	.word	0x08008882
 8005a4c:	080088b0 	.word	0x080088b0
 8005a50:	080088de 	.word	0x080088de
 8005a54:	0800890c 	.word	0x0800890c
 8005a58:	0800893a 	.word	0x0800893a
 8005a5c:	08008968 	.word	0x08008968
 8005a60:	08008996 	.word	0x08008996

08005a64 <_fAT_SET_DUTY_WAKEUP>:
{
 8005a64:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 < (Pos + 5))
 8005a66:	8883      	ldrh	r3, [r0, #4]
 8005a68:	1d0c      	adds	r4, r1, #4
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	db04      	blt.n	8005a78 <_fAT_SET_DUTY_WAKEUP+0x14>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005a6e:	2104      	movs	r1, #4
 8005a70:	4815      	ldr	r0, [pc, #84]	; (8005ac8 <_fAT_SET_DUTY_WAKEUP+0x64>)
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005a72:	f000 fa5f 	bl	8005f34 <DCU_Response_AT>
}
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a78:	220a      	movs	r2, #10
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	1c4d      	adds	r5, r1, #1
 8005a7e:	5c43      	ldrb	r3, [r0, r1]
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a80:	b2ad      	uxth	r5, r5
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a82:	3b30      	subs	r3, #48	; 0x30
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a84:	4353      	muls	r3, r2
 8005a86:	5d45      	ldrb	r5, [r0, r5]
 8005a88:	195b      	adds	r3, r3, r5
 8005a8a:	b2db      	uxtb	r3, r3
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 8005a8c:	001d      	movs	r5, r3
 8005a8e:	3d31      	subs	r5, #49	; 0x31
 8005a90:	2d09      	cmp	r5, #9
 8005a92:	d816      	bhi.n	8005ac2 <_fAT_SET_DUTY_WAKEUP+0x5e>
    Pos++;
 8005a94:	3103      	adds	r1, #3
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a96:	b289      	uxth	r1, r1
 8005a98:	5c41      	ldrb	r1, [r0, r1]
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a9a:	b2a4      	uxth	r4, r4
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a9c:	3930      	subs	r1, #48	; 0x30
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a9e:	434a      	muls	r2, r1
 8005aa0:	5d01      	ldrb	r1, [r0, r4]
 8005aa2:	3930      	subs	r1, #48	; 0x30
 8005aa4:	1852      	adds	r2, r2, r1
 8005aa6:	b292      	uxth	r2, r2
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 8005aa8:	2a64      	cmp	r2, #100	; 0x64
 8005aaa:	d80a      	bhi.n	8005ac2 <_fAT_SET_DUTY_WAKEUP+0x5e>
        sFreqInfor.NumWakeup_u8 = TempNum;
 8005aac:	4907      	ldr	r1, [pc, #28]	; (8005acc <_fAT_SET_DUTY_WAKEUP+0x68>)
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005aae:	3b30      	subs	r3, #48	; 0x30
        sFreqInfor.NumWakeup_u8 = TempNum;
 8005ab0:	700b      	strb	r3, [r1, #0]
        sFreqInfor.FreqWakeup_u32 = TempFre;
 8005ab2:	804a      	strh	r2, [r1, #2]
        Save_Freq_Send_Data();
 8005ab4:	f000 fb54 	bl	8006160 <Save_Freq_Send_Data>
        Reset_Chip_Immediately();
 8005ab8:	f000 fa2e 	bl	8005f18 <Reset_Chip_Immediately>
        DCU_Response_AT ((uint8_t *)"OK", 2);
 8005abc:	2102      	movs	r1, #2
 8005abe:	4804      	ldr	r0, [pc, #16]	; (8005ad0 <_fAT_SET_DUTY_WAKEUP+0x6c>)
 8005ac0:	e7d7      	b.n	8005a72 <_fAT_SET_DUTY_WAKEUP+0xe>
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005ac2:	2105      	movs	r1, #5
 8005ac4:	4803      	ldr	r0, [pc, #12]	; (8005ad4 <_fAT_SET_DUTY_WAKEUP+0x70>)
 8005ac6:	e7d4      	b.n	8005a72 <_fAT_SET_DUTY_WAKEUP+0xe>
 8005ac8:	080089ca 	.word	0x080089ca
 8005acc:	20000114 	.word	0x20000114
 8005ad0:	080089cf 	.word	0x080089cf
 8005ad4:	080089d2 	.word	0x080089d2

08005ad8 <_fAT_RESET_MODEM>:
{
 8005ad8:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"OK", 2);
 8005ada:	2102      	movs	r1, #2
 8005adc:	4808      	ldr	r0, [pc, #32]	; (8005b00 <_fAT_RESET_MODEM+0x28>)
 8005ade:	f000 fa29 	bl	8005f34 <DCU_Response_AT>
	sFreqInfor.NumWakeup_u8 = 1;
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <_fAT_RESET_MODEM+0x2c>)
 8005ae6:	701a      	strb	r2, [r3, #0]
	sFreqInfor.FreqWakeup_u32 = 100;
 8005ae8:	3263      	adds	r2, #99	; 0x63
 8005aea:	805a      	strh	r2, [r3, #2]
	Save_Freq_Send_Data();
 8005aec:	f000 fb38 	bl	8006160 <Save_Freq_Send_Data>
		sModem.TypeModem_u8 = _LORA_STATION;
 8005af0:	2202      	movs	r2, #2
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <_fAT_RESET_MODEM+0x30>)
 8005af4:	761a      	strb	r2, [r3, #24]
	Save_Device_Type();
 8005af6:	f000 fb81 	bl	80061fc <Save_Device_Type>
    Reset_Chip_Immediately();
 8005afa:	f000 fa0d 	bl	8005f18 <Reset_Chip_Immediately>
}
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	080089cf 	.word	0x080089cf
 8005b04:	20000114 	.word	0x20000114
 8005b08:	200000c0 	.word	0x200000c0

08005b0c <_fAT_SET_RTC>:
{
 8005b0c:	b530      	push	{r4, r5, lr}
 8005b0e:	0005      	movs	r5, r0
 8005b10:	b085      	sub	sp, #20
	ST_TIME_FORMAT    sRTC_temp = {0};
 8005b12:	ac01      	add	r4, sp, #4
 8005b14:	220c      	movs	r2, #12
 8005b16:	2100      	movs	r1, #0
 8005b18:	0020      	movs	r0, r4
 8005b1a:	f001 ff5c 	bl	80079d6 <memset>
	if((*(str_Receiv->Data_a8+1)!= '-')||(*(str_Receiv->Data_a8+4)!= '-')|| (*(str_Receiv->Data_a8+7)!= '-') ||
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	785a      	ldrb	r2, [r3, #1]
 8005b22:	2a2d      	cmp	r2, #45	; 0x2d
 8005b24:	d10e      	bne.n	8005b44 <_fAT_SET_RTC+0x38>
 8005b26:	791a      	ldrb	r2, [r3, #4]
 8005b28:	2a2d      	cmp	r2, #45	; 0x2d
 8005b2a:	d10b      	bne.n	8005b44 <_fAT_SET_RTC+0x38>
 8005b2c:	79da      	ldrb	r2, [r3, #7]
 8005b2e:	2a2d      	cmp	r2, #45	; 0x2d
 8005b30:	d108      	bne.n	8005b44 <_fAT_SET_RTC+0x38>
 8005b32:	7a9a      	ldrb	r2, [r3, #10]
 8005b34:	2a2c      	cmp	r2, #44	; 0x2c
 8005b36:	d105      	bne.n	8005b44 <_fAT_SET_RTC+0x38>
		(*(str_Receiv->Data_a8+10)!= ',')||(*(str_Receiv->Data_a8+13)!= ':')||(*(str_Receiv->Data_a8+16)!= ':'))
 8005b38:	7b5a      	ldrb	r2, [r3, #13]
 8005b3a:	2a3a      	cmp	r2, #58	; 0x3a
 8005b3c:	d102      	bne.n	8005b44 <_fAT_SET_RTC+0x38>
 8005b3e:	7c1a      	ldrb	r2, [r3, #16]
 8005b40:	2a3a      	cmp	r2, #58	; 0x3a
 8005b42:	d005      	beq.n	8005b50 <_fAT_SET_RTC+0x44>
		DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005b44:	2105      	movs	r1, #5
 8005b46:	4820      	ldr	r0, [pc, #128]	; (8005bc8 <_fAT_SET_RTC+0xbc>)
			DCU_Response_AT((uint8_t *)"OK", 2);
 8005b48:	f000 f9f4 	bl	8005f34 <DCU_Response_AT>
}
 8005b4c:	b005      	add	sp, #20
 8005b4e:	bd30      	pop	{r4, r5, pc}
		sRTC_temp.day   = (*(str_Receiv->Data_a8))-0x30 - 1;
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	3a31      	subs	r2, #49	; 0x31
 8005b54:	70e2      	strb	r2, [r4, #3]
		sRTC_temp.date  = ((*(str_Receiv->Data_a8 + 2))-0x30)*10 + (*(str_Receiv->Data_a8 + 3) - 0x30);
 8005b56:	220a      	movs	r2, #10
 8005b58:	7899      	ldrb	r1, [r3, #2]
 8005b5a:	78d8      	ldrb	r0, [r3, #3]
 8005b5c:	4351      	muls	r1, r2
 8005b5e:	3810      	subs	r0, #16
 8005b60:	1809      	adds	r1, r1, r0
 8005b62:	7121      	strb	r1, [r4, #4]
		sRTC_temp.month = ((*(str_Receiv->Data_a8 + 5))-0x30)*10 + (*(str_Receiv->Data_a8 + 6) - 0x30);
 8005b64:	7959      	ldrb	r1, [r3, #5]
 8005b66:	7998      	ldrb	r0, [r3, #6]
 8005b68:	4351      	muls	r1, r2
 8005b6a:	3810      	subs	r0, #16
 8005b6c:	1809      	adds	r1, r1, r0
 8005b6e:	7161      	strb	r1, [r4, #5]
		sRTC_temp.year  = ((*(str_Receiv->Data_a8 + 8))-0x30)*10 + (*(str_Receiv->Data_a8 + 9) - 0x30);
 8005b70:	7a19      	ldrb	r1, [r3, #8]
 8005b72:	7a58      	ldrb	r0, [r3, #9]
 8005b74:	4351      	muls	r1, r2
 8005b76:	3810      	subs	r0, #16
 8005b78:	1809      	adds	r1, r1, r0
 8005b7a:	71a1      	strb	r1, [r4, #6]
		sRTC_temp.hour  = ((*(str_Receiv->Data_a8 + 11))-0x30)*10 + (*(str_Receiv->Data_a8 + 12) - 0x30);
 8005b7c:	7ad9      	ldrb	r1, [r3, #11]
 8005b7e:	7b18      	ldrb	r0, [r3, #12]
 8005b80:	4351      	muls	r1, r2
 8005b82:	3810      	subs	r0, #16
 8005b84:	1809      	adds	r1, r1, r0
 8005b86:	7021      	strb	r1, [r4, #0]
		sRTC_temp.min   = ((*(str_Receiv->Data_a8 + 14))-0x30)*10 + (*(str_Receiv->Data_a8 + 15) - 0x30);
 8005b88:	7b99      	ldrb	r1, [r3, #14]
 8005b8a:	7bd8      	ldrb	r0, [r3, #15]
 8005b8c:	4351      	muls	r1, r2
 8005b8e:	3810      	subs	r0, #16
 8005b90:	1809      	adds	r1, r1, r0
 8005b92:	7061      	strb	r1, [r4, #1]
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 8005b94:	7c59      	ldrb	r1, [r3, #17]
 8005b96:	7c9b      	ldrb	r3, [r3, #18]
 8005b98:	434a      	muls	r2, r1
 8005b9a:	3b10      	subs	r3, #16
 8005b9c:	18d2      	adds	r2, r2, r3
		if (Check_update_Time(&sRTC_temp) != 1)
 8005b9e:	0020      	movs	r0, r4
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 8005ba0:	70a2      	strb	r2, [r4, #2]
		if (Check_update_Time(&sRTC_temp) != 1)
 8005ba2:	f001 fa09 	bl	8006fb8 <Check_update_Time>
 8005ba6:	2801      	cmp	r0, #1
 8005ba8:	d1cc      	bne.n	8005b44 <_fAT_SET_RTC+0x38>
			sRTCSet.hour    = sRTC_temp.hour;
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <_fAT_SET_RTC+0xc0>)
 8005bac:	9901      	ldr	r1, [sp, #4]
			sRTCSet.year    = sRTC_temp.year;
 8005bae:	79a2      	ldrb	r2, [r4, #6]
			sRTCSet.hour    = sRTC_temp.hour;
 8005bb0:	6019      	str	r1, [r3, #0]
			sRTCSet.date    = sRTC_temp.date;
 8005bb2:	88a1      	ldrh	r1, [r4, #4]
			sRTCSet.year    = sRTC_temp.year;
 8005bb4:	719a      	strb	r2, [r3, #6]
			sRTCSet.date    = sRTC_temp.date;
 8005bb6:	8099      	strh	r1, [r3, #4]
			Set_RTC(sRTCSet);
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	9801      	ldr	r0, [sp, #4]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	f001 fa17 	bl	8006ff0 <Set_RTC>
			DCU_Response_AT((uint8_t *)"OK", 2);
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <_fAT_SET_RTC+0xc4>)
 8005bc6:	e7bf      	b.n	8005b48 <_fAT_SET_RTC+0x3c>
 8005bc8:	080089d2 	.word	0x080089d2
 8005bcc:	20001124 	.word	0x20001124
 8005bd0:	080089cf 	.word	0x080089cf

08005bd4 <_fAT_SET_DEVICE_ID>:
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8005bd4:	000b      	movs	r3, r1
{
 8005bd6:	b570      	push	{r4, r5, r6, lr}
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8005bd8:	8882      	ldrh	r2, [r0, #4]
 8005bda:	3314      	adds	r3, #20
{
 8005bdc:	0005      	movs	r5, r0
 8005bde:	000c      	movs	r4, r1
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8005be0:	429a      	cmp	r2, r3
 8005be2:	dc21      	bgt.n	8005c28 <_fAT_SET_DEVICE_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8005be4:	2102      	movs	r1, #2
 8005be6:	4813      	ldr	r0, [pc, #76]	; (8005c34 <_fAT_SET_DEVICE_ID+0x60>)
 8005be8:	f000 f9a4 	bl	8005f34 <DCU_Response_AT>
        UTIL_MEM_set(&aDCU_ID, 0, sizeof(aDCU_ID));
 8005bec:	2214      	movs	r2, #20
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4811      	ldr	r0, [pc, #68]	; (8005c38 <_fAT_SET_DEVICE_ID+0x64>)
 8005bf2:	f001 fc05 	bl	8007400 <UTIL_MEM_set>
        sModem.sDCU_id.Length_u16 = 0;
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <_fAT_SET_DEVICE_ID+0x68>)
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005bfa:	b2e1      	uxtb	r1, r4
        sModem.sDCU_id.Length_u16 = 0;
 8005bfc:	809a      	strh	r2, [r3, #4]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005bfe:	88aa      	ldrh	r2, [r5, #4]
 8005c00:	428a      	cmp	r2, r1
 8005c02:	d805      	bhi.n	8005c10 <_fAT_SET_DEVICE_ID+0x3c>
        Save_ID(0);
 8005c04:	2000      	movs	r0, #0
 8005c06:	f000 fa43 	bl	8006090 <Save_ID>
        Reset_Chip_Immediately();
 8005c0a:	f000 f985 	bl	8005f18 <Reset_Chip_Immediately>
}
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sDCU_id.Length_u16 >= sizeof(aDCU_ID))
 8005c10:	889a      	ldrh	r2, [r3, #4]
 8005c12:	2a13      	cmp	r2, #19
 8005c14:	d8f6      	bhi.n	8005c04 <_fAT_SET_DEVICE_ID+0x30>
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8005c16:	6828      	ldr	r0, [r5, #0]
 8005c18:	1c54      	adds	r4, r2, #1
 8005c1a:	809c      	strh	r4, [r3, #4]
 8005c1c:	5c40      	ldrb	r0, [r0, r1]
 8005c1e:	681c      	ldr	r4, [r3, #0]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005c20:	3101      	adds	r1, #1
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8005c22:	54a0      	strb	r0, [r4, r2]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005c24:	b2c9      	uxtb	r1, r1
 8005c26:	e7ea      	b.n	8005bfe <_fAT_SET_DEVICE_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005c28:	2104      	movs	r1, #4
 8005c2a:	4805      	ldr	r0, [pc, #20]	; (8005c40 <_fAT_SET_DEVICE_ID+0x6c>)
 8005c2c:	f000 f982 	bl	8005f34 <DCU_Response_AT>
}
 8005c30:	e7ed      	b.n	8005c0e <_fAT_SET_DEVICE_ID+0x3a>
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	080089cf 	.word	0x080089cf
 8005c38:	2000013c 	.word	0x2000013c
 8005c3c:	200000c0 	.word	0x200000c0
 8005c40:	080089ca 	.word	0x080089ca

08005c44 <_fAT_SET_NETWORK_ID>:
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8005c44:	000b      	movs	r3, r1
{
 8005c46:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8005c48:	8882      	ldrh	r2, [r0, #4]
 8005c4a:	3314      	adds	r3, #20
{
 8005c4c:	0005      	movs	r5, r0
 8005c4e:	000c      	movs	r4, r1
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8005c50:	429a      	cmp	r2, r3
 8005c52:	dc21      	bgt.n	8005c98 <_fAT_SET_NETWORK_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8005c54:	2102      	movs	r1, #2
 8005c56:	4813      	ldr	r0, [pc, #76]	; (8005ca4 <_fAT_SET_NETWORK_ID+0x60>)
 8005c58:	f000 f96c 	bl	8005f34 <DCU_Response_AT>
        UTIL_MEM_set(&aNET_ID, 0, sizeof(aNET_ID));
 8005c5c:	2214      	movs	r2, #20
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4811      	ldr	r0, [pc, #68]	; (8005ca8 <_fAT_SET_NETWORK_ID+0x64>)
 8005c62:	f001 fbcd 	bl	8007400 <UTIL_MEM_set>
        sModem.sNET_id.Length_u16 = 0;
 8005c66:	2200      	movs	r2, #0
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <_fAT_SET_NETWORK_ID+0x68>)
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c6a:	b2e1      	uxtb	r1, r4
        sModem.sNET_id.Length_u16 = 0;
 8005c6c:	819a      	strh	r2, [r3, #12]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c6e:	88aa      	ldrh	r2, [r5, #4]
 8005c70:	428a      	cmp	r2, r1
 8005c72:	d805      	bhi.n	8005c80 <_fAT_SET_NETWORK_ID+0x3c>
        Save_ID(1);
 8005c74:	2001      	movs	r0, #1
 8005c76:	f000 fa0b 	bl	8006090 <Save_ID>
        Reset_Chip_Immediately();
 8005c7a:	f000 f94d 	bl	8005f18 <Reset_Chip_Immediately>
}
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sNET_id.Length_u16 >= sizeof(aNET_ID))
 8005c80:	899a      	ldrh	r2, [r3, #12]
 8005c82:	2a13      	cmp	r2, #19
 8005c84:	d8f6      	bhi.n	8005c74 <_fAT_SET_NETWORK_ID+0x30>
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 8005c86:	6828      	ldr	r0, [r5, #0]
 8005c88:	1c54      	adds	r4, r2, #1
 8005c8a:	819c      	strh	r4, [r3, #12]
 8005c8c:	5c40      	ldrb	r0, [r0, r1]
 8005c8e:	689c      	ldr	r4, [r3, #8]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c90:	3101      	adds	r1, #1
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 8005c92:	54a0      	strb	r0, [r4, r2]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c94:	b2c9      	uxtb	r1, r1
 8005c96:	e7ea      	b.n	8005c6e <_fAT_SET_NETWORK_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005c98:	2104      	movs	r1, #4
 8005c9a:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <_fAT_SET_NETWORK_ID+0x6c>)
 8005c9c:	f000 f94a 	bl	8005f34 <DCU_Response_AT>
}
 8005ca0:	e7ed      	b.n	8005c7e <_fAT_SET_NETWORK_ID+0x3a>
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	080089cf 	.word	0x080089cf
 8005ca8:	20000128 	.word	0x20000128
 8005cac:	200000c0 	.word	0x200000c0
 8005cb0:	080089ca 	.word	0x080089ca

08005cb4 <_fAT_SET_TYPE_MODEM>:
{
 8005cb4:	b510      	push	{r4, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8005cb6:	8883      	ldrh	r3, [r0, #4]
 8005cb8:	428b      	cmp	r3, r1
 8005cba:	d804      	bhi.n	8005cc6 <_fAT_SET_TYPE_MODEM+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005cbc:	2104      	movs	r1, #4
 8005cbe:	4809      	ldr	r0, [pc, #36]	; (8005ce4 <_fAT_SET_TYPE_MODEM+0x30>)
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005cc0:	f000 f938 	bl	8005f34 <DCU_Response_AT>
}
 8005cc4:	bd10      	pop	{r4, pc}
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005cc6:	6803      	ldr	r3, [r0, #0]
		if (TempNum == 2)
 8005cc8:	5c5b      	ldrb	r3, [r3, r1]
 8005cca:	2b32      	cmp	r3, #50	; 0x32
 8005ccc:	d107      	bne.n	8005cde <_fAT_SET_TYPE_MODEM+0x2a>
			sModem.TypeModem_u8 = _LORA_STATION;
 8005cce:	2402      	movs	r4, #2
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <_fAT_SET_TYPE_MODEM+0x34>)
 8005cd2:	761c      	strb	r4, [r3, #24]
			Save_Device_Type();
 8005cd4:	f000 fa92 	bl	80061fc <Save_Device_Type>
			DCU_Response_AT ((uint8_t *)"OK", 2);
 8005cd8:	0021      	movs	r1, r4
 8005cda:	4804      	ldr	r0, [pc, #16]	; (8005cec <_fAT_SET_TYPE_MODEM+0x38>)
 8005cdc:	e7f0      	b.n	8005cc0 <_fAT_SET_TYPE_MODEM+0xc>
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005cde:	2105      	movs	r1, #5
 8005ce0:	4803      	ldr	r0, [pc, #12]	; (8005cf0 <_fAT_SET_TYPE_MODEM+0x3c>)
 8005ce2:	e7ed      	b.n	8005cc0 <_fAT_SET_TYPE_MODEM+0xc>
 8005ce4:	080089ca 	.word	0x080089ca
 8005ce8:	200000c0 	.word	0x200000c0
 8005cec:	080089cf 	.word	0x080089cf
 8005cf0:	080089d2 	.word	0x080089d2

08005cf4 <_fAT_SET_MODE>:
{
 8005cf4:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8005cf6:	8883      	ldrh	r3, [r0, #4]
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	d804      	bhi.n	8005d06 <_fAT_SET_MODE+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	4825      	ldr	r0, [pc, #148]	; (8005d94 <_fAT_SET_MODE+0xa0>)
				DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005d00:	f000 f918 	bl	8005f34 <DCU_Response_AT>
				break;
 8005d04:	e01c      	b.n	8005d40 <_fAT_SET_MODE+0x4c>
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005d06:	6803      	ldr	r3, [r0, #0]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8005d08:	2004      	movs	r0, #4
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005d0a:	5c5c      	ldrb	r4, [r3, r1]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8005d0c:	4922      	ldr	r1, [pc, #136]	; (8005d98 <_fAT_SET_MODE+0xa4>)
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005d0e:	3c30      	subs	r4, #48	; 0x30
 8005d10:	b2e4      	uxtb	r4, r4
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8005d12:	0022      	movs	r2, r4
 8005d14:	f001 fb78 	bl	8007408 <LOG>
		switch (TempMode)
 8005d18:	2c01      	cmp	r4, #1
 8005d1a:	d012      	beq.n	8005d42 <_fAT_SET_MODE+0x4e>
 8005d1c:	2c02      	cmp	r4, #2
 8005d1e:	d025      	beq.n	8005d6c <_fAT_SET_MODE+0x78>
 8005d20:	2c00      	cmp	r4, #0
 8005d22:	d134      	bne.n	8005d8e <_fAT_SET_MODE+0x9a>
				sModem.Mode = _MODE_SLEEP;
 8005d24:	4d1d      	ldr	r5, [pc, #116]	; (8005d9c <_fAT_SET_MODE+0xa8>)
				sModem.SendAll = 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	002e      	movs	r6, r5
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d2a:	2102      	movs	r1, #2
 8005d2c:	481c      	ldr	r0, [pc, #112]	; (8005da0 <_fAT_SET_MODE+0xac>)
				sModem.SendAll = 1;
 8005d2e:	3650      	adds	r6, #80	; 0x50
 8005d30:	7033      	strb	r3, [r6, #0]
				sModem.Mode = _MODE_SLEEP;
 8005d32:	766c      	strb	r4, [r5, #25]
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d34:	f000 f8fe 	bl	8005f34 <DCU_Response_AT>
				USER_Payload_Station_Mode(sModem.TimeDelayNetwork_u32);
 8005d38:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005d3a:	f000 fb11 	bl	8006360 <USER_Payload_Station_Mode>
				sModem.SendAll = 0;
 8005d3e:	7034      	strb	r4, [r6, #0]
}
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
				sModem.Mode = _MODE_WAKEUP;
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <_fAT_SET_MODE+0xa8>)
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d44:	2102      	movs	r1, #2
 8005d46:	4816      	ldr	r0, [pc, #88]	; (8005da0 <_fAT_SET_MODE+0xac>)
				sModem.Mode = _MODE_WAKEUP;
 8005d48:	765c      	strb	r4, [r3, #25]
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d4a:	f000 f8f3 	bl	8005f34 <DCU_Response_AT>
				UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000 * 3);
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <_fAT_SET_MODE+0xb0>)
 8005d50:	4c15      	ldr	r4, [pc, #84]	; (8005da8 <_fAT_SET_MODE+0xb4>)
 8005d52:	885b      	ldrh	r3, [r3, #2]
 8005d54:	4915      	ldr	r1, [pc, #84]	; (8005dac <_fAT_SET_MODE+0xb8>)
 8005d56:	0020      	movs	r0, r4
 8005d58:	4359      	muls	r1, r3
 8005d5a:	f001 fa79 	bl	8007250 <UTIL_TIMER_SetPeriod>
				UTIL_TIMER_Stop (&TimerLoraTx);
 8005d5e:	0020      	movs	r0, r4
 8005d60:	f001 f9e8 	bl	8007134 <UTIL_TIMER_Stop>
				UTIL_TIMER_Start (&TimerLoraTx);
 8005d64:	0020      	movs	r0, r4
 8005d66:	f001 fa39 	bl	80071dc <UTIL_TIMER_Start>
				break;
 8005d6a:	e7e9      	b.n	8005d40 <_fAT_SET_MODE+0x4c>
				sModem.Mode = _MODE_MEASURE;
 8005d6c:	4d0b      	ldr	r5, [pc, #44]	; (8005d9c <_fAT_SET_MODE+0xa8>)
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d6e:	0021      	movs	r1, r4
 8005d70:	480b      	ldr	r0, [pc, #44]	; (8005da0 <_fAT_SET_MODE+0xac>)
				sModem.Mode = _MODE_MEASURE;
 8005d72:	766c      	strb	r4, [r5, #25]
				sModem.SendAll = 1;
 8005d74:	002c      	movs	r4, r5
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d76:	f000 f8dd 	bl	8005f34 <DCU_Response_AT>
				sModem.SendAll = 1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	3450      	adds	r4, #80	; 0x50
				USER_Payload_Station_Mode(sModem.TimeDelayNetwork_u32);
 8005d7e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
				sModem.SendAll = 1;
 8005d80:	7023      	strb	r3, [r4, #0]
				USER_Payload_Station_Mode(sModem.TimeDelayNetwork_u32);
 8005d82:	f000 faed 	bl	8006360 <USER_Payload_Station_Mode>
				sModem.SendAll = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	7023      	strb	r3, [r4, #0]
				sModem.Mode = _MODE_SLEEP;
 8005d8a:	766b      	strb	r3, [r5, #25]
				break;
 8005d8c:	e7d8      	b.n	8005d40 <_fAT_SET_MODE+0x4c>
				DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005d8e:	2105      	movs	r1, #5
 8005d90:	4807      	ldr	r0, [pc, #28]	; (8005db0 <_fAT_SET_MODE+0xbc>)
 8005d92:	e7b5      	b.n	8005d00 <_fAT_SET_MODE+0xc>
 8005d94:	080089ca 	.word	0x080089ca
 8005d98:	08008bb3 	.word	0x08008bb3
 8005d9c:	200000c0 	.word	0x200000c0
 8005da0:	080089cf 	.word	0x080089cf
 8005da4:	20000114 	.word	0x20000114
 8005da8:	20000460 	.word	0x20000460
 8005dac:	00000bb8 	.word	0x00000bb8
 8005db0:	080089d2 	.word	0x080089d2

08005db4 <_fAT_GET_FIRM_VER>:
 8005db4:	4770      	bx	lr
	...

08005db8 <Check_AT_User>:
{
 8005db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8005dba:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <Check_AT_User+0xf0>)
{
 8005dbc:	b085      	sub	sp, #20
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	2300      	movs	r3, #0
{
 8005dc2:	0004      	movs	r4, r0
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8005dc4:	2102      	movs	r1, #2
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8005dc6:	aa02      	add	r2, sp, #8
 8005dc8:	8093      	strh	r3, [r2, #4]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 8005dca:	88a2      	ldrh	r2, [r4, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d827      	bhi.n	8005e20 <Check_AT_User+0x68>
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	4f36      	ldr	r7, [pc, #216]	; (8005eac <Check_AT_User+0xf4>)
		Pos_Str = Find_String_V2((sData*) &CheckList_AT_CONFIG[var].sTempReceiver, StrUartRecei);
 8005dd4:	0038      	movs	r0, r7
 8005dd6:	0021      	movs	r1, r4
 8005dd8:	3008      	adds	r0, #8
 8005dda:	f001 f850 	bl	8006e7e <Find_String_V2>
 8005dde:	1e06      	subs	r6, r0, #0
		if ((Pos_Str >= 0) && (CheckList_AT_CONFIG[var].CallBack != NULL))
 8005de0:	db5a      	blt.n	8005e98 <Check_AT_User+0xe0>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d056      	beq.n	8005e98 <Check_AT_User+0xe0>
			Reset_Buff(&sModem.strATCmd);
 8005dea:	4831      	ldr	r0, [pc, #196]	; (8005eb0 <Check_AT_User+0xf8>)
 8005dec:	f001 fad8 	bl	80073a0 <Reset_Buff>
				if ((*(StrUartRecei->Data_a8 + Pos_Str + i) == '?') || (*(StrUartRecei->Data_a8+Pos_Str+i) == '=') \
 8005df0:	2202      	movs	r2, #2
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005df2:	2300      	movs	r3, #0
				if ((*(StrUartRecei->Data_a8 + Pos_Str + i) == '?') || (*(StrUartRecei->Data_a8+Pos_Str+i) == '=') \
 8005df4:	4694      	mov	ip, r2
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8005df6:	482f      	ldr	r0, [pc, #188]	; (8005eb4 <Check_AT_User+0xfc>)
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005df8:	88a2      	ldrh	r2, [r4, #4]
 8005dfa:	1b92      	subs	r2, r2, r6
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	db1f      	blt.n	8005e40 <Check_AT_User+0x88>
			Pos_Str += CheckList_AT_CONFIG[var].sTempReceiver.Length_u16;
 8005e00:	012b      	lsls	r3, r5, #4
 8005e02:	4d2a      	ldr	r5, [pc, #168]	; (8005eac <Check_AT_User+0xf4>)
 8005e04:	18ed      	adds	r5, r5, r3
 8005e06:	89a8      	ldrh	r0, [r5, #12]
 8005e08:	1986      	adds	r6, r0, r6
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 8005e0a:	88a3      	ldrh	r3, [r4, #4]
 8005e0c:	b2b6      	uxth	r6, r6
 8005e0e:	42b3      	cmp	r3, r6
 8005e10:	d829      	bhi.n	8005e66 <Check_AT_User+0xae>
			CheckList_AT_CONFIG[var].CallBack(&sDataConfig, 0);
 8005e12:	a802      	add	r0, sp, #8
 8005e14:	2100      	movs	r1, #0
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	4798      	blx	r3
			return 1;
 8005e1a:	2001      	movs	r0, #1
}
 8005e1c:	b005      	add	sp, #20
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8005e20:	6822      	ldr	r2, [r4, #0]
 8005e22:	18d0      	adds	r0, r2, r3
 8005e24:	5cd2      	ldrb	r2, [r2, r3]
 8005e26:	0015      	movs	r5, r2
 8005e28:	438d      	bics	r5, r1
 8005e2a:	2d3d      	cmp	r5, #61	; 0x3d
 8005e2c:	d0d0      	beq.n	8005dd0 <Check_AT_User+0x18>
		if ((*(StrUartRecei->Data_a8 + i) >= 0x41) && (*(StrUartRecei->Data_a8 + i) <= 0x5A))
 8005e2e:	0015      	movs	r5, r2
 8005e30:	3d41      	subs	r5, #65	; 0x41
 8005e32:	2d19      	cmp	r5, #25
 8005e34:	d801      	bhi.n	8005e3a <Check_AT_User+0x82>
			*(StrUartRecei->Data_a8 + i) = *(StrUartRecei->Data_a8 + i) + 0x20;
 8005e36:	3220      	adds	r2, #32
 8005e38:	7002      	strb	r2, [r0, #0]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	e7c4      	b.n	8005dca <Check_AT_User+0x12>
				if ((*(StrUartRecei->Data_a8 + Pos_Str + i) == '?') || (*(StrUartRecei->Data_a8+Pos_Str+i) == '=') \
 8005e40:	6821      	ldr	r1, [r4, #0]
 8005e42:	199a      	adds	r2, r3, r6
 8005e44:	188f      	adds	r7, r1, r2
 8005e46:	5c8a      	ldrb	r2, [r1, r2]
 8005e48:	4661      	mov	r1, ip
 8005e4a:	438a      	bics	r2, r1
 8005e4c:	2a3d      	cmp	r2, #61	; 0x3d
 8005e4e:	d0d7      	beq.n	8005e00 <Check_AT_User+0x48>
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8005e50:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8005e52:	2aff      	cmp	r2, #255	; 0xff
 8005e54:	d8d4      	bhi.n	8005e00 <Check_AT_User+0x48>
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8005e56:	1c51      	adds	r1, r2, #1
 8005e58:	8781      	strh	r1, [r0, #60]	; 0x3c
 8005e5a:	7839      	ldrb	r1, [r7, #0]
 8005e5c:	6b87      	ldr	r7, [r0, #56]	; 0x38
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005e5e:	3301      	adds	r3, #1
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8005e60:	54b9      	strb	r1, [r7, r2]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	e7c8      	b.n	8005df8 <Check_AT_User+0x40>
				if (*(StrUartRecei->Data_a8 + i) == 0x0D)
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	1991      	adds	r1, r2, r6
 8005e6a:	5d92      	ldrb	r2, [r2, r6]
 8005e6c:	2a0d      	cmp	r2, #13
 8005e6e:	d105      	bne.n	8005e7c <Check_AT_User+0xc4>
					if ( (i < (StrUartRecei->Length_u16 - 1)) && (*(StrUartRecei->Data_a8 + i + 1) == 0x0A) )
 8005e70:	3b01      	subs	r3, #1
 8005e72:	429e      	cmp	r6, r3
 8005e74:	da02      	bge.n	8005e7c <Check_AT_User+0xc4>
 8005e76:	784b      	ldrb	r3, [r1, #1]
 8005e78:	2b0a      	cmp	r3, #10
 8005e7a:	d0ca      	beq.n	8005e12 <Check_AT_User+0x5a>
				if ( sDataConfig.Length_u16 < sizeof(aDATA_CONFIG) )
 8005e7c:	ab02      	add	r3, sp, #8
 8005e7e:	889b      	ldrh	r3, [r3, #4]
 8005e80:	2b7f      	cmp	r3, #127	; 0x7f
 8005e82:	d807      	bhi.n	8005e94 <Check_AT_User+0xdc>
					*(sDataConfig.Data_a8 + sDataConfig.Length_u16++) = *(StrUartRecei->Data_a8 + i);
 8005e84:	9a02      	ldr	r2, [sp, #8]
 8005e86:	a802      	add	r0, sp, #8
 8005e88:	9201      	str	r2, [sp, #4]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	8082      	strh	r2, [r0, #4]
 8005e8e:	780a      	ldrb	r2, [r1, #0]
 8005e90:	9901      	ldr	r1, [sp, #4]
 8005e92:	54ca      	strb	r2, [r1, r3]
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 8005e94:	3601      	adds	r6, #1
 8005e96:	e7b8      	b.n	8005e0a <Check_AT_User+0x52>
	for (var = _AT_SET_DEVICE_ID; var <= _END_AT_CMD; var++)
 8005e98:	3501      	adds	r5, #1
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	2d10      	cmp	r5, #16
 8005e9e:	d000      	beq.n	8005ea2 <Check_AT_User+0xea>
 8005ea0:	e798      	b.n	8005dd4 <Check_AT_User+0x1c>
	return 0;
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e7ba      	b.n	8005e1c <Check_AT_User+0x64>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	200008c8 	.word	0x200008c8
 8005eac:	08008538 	.word	0x08008538
 8005eb0:	200000f8 	.word	0x200000f8
 8005eb4:	200000c0 	.word	0x200000c0

08005eb8 <Flash_Get_Infor>:

/**
 * @brief	Init Infor from Flash
 */
void Flash_Get_Infor (uint32_t AddStart, uint8_t *pData, uint16_t *Length, uint8_t MAX_LEGNTH_INFOR)
{
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	0017      	movs	r7, r2
    uint8_t LenTemp = 0;

    LenTemp = *(__IO uint8_t*) (AddStart);
 8005ebc:	7802      	ldrb	r2, [r0, #0]
{
 8005ebe:	0005      	movs	r5, r0
    LenTemp = *(__IO uint8_t*) (AddStart);
 8005ec0:	b2d2      	uxtb	r2, r2
{
 8005ec2:	000e      	movs	r6, r1
 8005ec4:	1c14      	adds	r4, r2, #0
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d900      	bls.n	8005ecc <Flash_Get_Infor+0x14>
 8005eca:	1c1c      	adds	r4, r3, #0
 8005ecc:	b2e4      	uxtb	r4, r4

    if (LenTemp > MAX_LEGNTH_INFOR)
        LenTemp = MAX_LEGNTH_INFOR;
    //clear buff
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 8005ece:	0030      	movs	r0, r6
 8005ed0:	b29a      	uxth	r2, r3
    //Read flash
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 8005ed2:	b2a4      	uxth	r4, r4
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f001 fa93 	bl	8007400 <UTIL_MEM_set>
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 8005eda:	0031      	movs	r1, r6
 8005edc:	1c68      	adds	r0, r5, #1
 8005ede:	0022      	movs	r2, r4
 8005ee0:	f000 fdbb 	bl	8006a5a <OnchipFlashReadData>
    *Length = LenTemp;
 8005ee4:	803c      	strh	r4, [r7, #0]
}
 8005ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ee8 <Init_Uart_Module>:

/* Exported functions --------------------------------------------------------*/
void Init_Uart_Module (void)
{
	#ifdef DEVICE_TYPE_STATION
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <Init_Uart_Module+0x18>)
 8005eea:	6819      	ldr	r1, [r3, #0]
 8005eec:	2320      	movs	r3, #32
 8005eee:	680a      	ldr	r2, [r1, #0]
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	600a      	str	r2, [r1, #0]
		__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
 8005ef4:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <Init_Uart_Module+0x1c>)
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	430b      	orrs	r3, r1
 8005efc:	6013      	str	r3, [r2, #0]
	#else
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
	#endif
}
 8005efe:	4770      	bx	lr
 8005f00:	20001220 	.word	0x20001220
 8005f04:	200012a4 	.word	0x200012a4

08005f08 <Modem_Init_Before_IRQ_Handle>:

	#endif
}

void Modem_Init_Before_IRQ_Handle (void)
{
 8005f08:	b510      	push	{r4, lr}
	AppLora_Init_IO_Radio();
 8005f0a:	f7ff fb91 	bl	8005630 <AppLora_Init_IO_Radio>
}
 8005f0e:	bd10      	pop	{r4, pc}

08005f10 <Modem_Deinit_Before_IRQ_Handle>:

void Modem_Deinit_Before_IRQ_Handle (void)
{
 8005f10:	b510      	push	{r4, lr}
	AppLora_Deinit_IO_Radio();
 8005f12:	f7ff fb89 	bl	8005628 <AppLora_Deinit_IO_Radio>
}
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <Reset_Chip_Immediately>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005f18:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 8005f1a:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f1e:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <Reset_Chip_Immediately+0x14>)
 8005f20:	4a03      	ldr	r2, [pc, #12]	; (8005f30 <Reset_Chip_Immediately+0x18>)
 8005f22:	60da      	str	r2, [r3, #12]
 8005f24:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005f28:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8005f2a:	e7fd      	b.n	8005f28 <Reset_Chip_Immediately+0x10>
 8005f2c:	e000ed00 	.word	0xe000ed00
 8005f30:	05fa0004 	.word	0x05fa0004

08005f34 <DCU_Response_AT>:
{
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 8005f36:	26fa      	movs	r6, #250	; 0xfa
{
 8005f38:	000d      	movs	r5, r1
 8005f3a:	0004      	movs	r4, r0
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 8005f3c:	4f0a      	ldr	r7, [pc, #40]	; (8005f68 <DCU_Response_AT+0x34>)
 8005f3e:	00b6      	lsls	r6, r6, #2
 8005f40:	0033      	movs	r3, r6
 8005f42:	000a      	movs	r2, r1
 8005f44:	0001      	movs	r1, r0
 8005f46:	0038      	movs	r0, r7
 8005f48:	f7fd fc8c 	bl	8003864 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n", 2, 1000);
 8005f4c:	0033      	movs	r3, r6
 8005f4e:	0038      	movs	r0, r7
 8005f50:	2202      	movs	r2, #2
 8005f52:	4906      	ldr	r1, [pc, #24]	; (8005f6c <DCU_Response_AT+0x38>)
 8005f54:	f7fd fc86 	bl	8003864 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uart_mcu, data, length, 1000);
 8005f58:	0033      	movs	r3, r6
 8005f5a:	002a      	movs	r2, r5
 8005f5c:	0021      	movs	r1, r4
 8005f5e:	4804      	ldr	r0, [pc, #16]	; (8005f70 <DCU_Response_AT+0x3c>)
 8005f60:	f7fd fc80 	bl	8003864 <HAL_UART_Transmit>
}
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	20001220 	.word	0x20001220
 8005f6c:	08008849 	.word	0x08008849
 8005f70:	200012a4 	.word	0x200012a4

08005f74 <MX_GPIO_DeInit>:

void MX_GPIO_DeInit(void)
{
 8005f74:	b500      	push	{lr}
 8005f76:	b089      	sub	sp, #36	; 0x24
	#ifdef DEVICE_TYPE_STATION
		GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005f78:	220c      	movs	r2, #12
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	a805      	add	r0, sp, #20
 8005f7e:	f001 fd2a 	bl	80079d6 <memset>

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f82:	2001      	movs	r0, #1
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <MX_GPIO_DeInit+0x44>)
 8005f86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f88:	4301      	orrs	r1, r0
 8005f8a:	62d9      	str	r1, [r3, #44]	; 0x2c
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8c:	2102      	movs	r1, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	4002      	ands	r2, r0
 8005f92:	9201      	str	r2, [sp, #4]
 8005f94:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	9302      	str	r3, [sp, #8]
 8005fa2:	9b02      	ldr	r3, [sp, #8]

		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8005fa4:	2303      	movs	r3, #3
		GPIO_InitStruct.Pull   = GPIO_NOPULL;

		GPIO_InitStruct.Pin = LED_BLUE_Pin;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005fa6:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8005fa8:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005faa:	181b      	adds	r3, r3, r0
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005fac:	4803      	ldr	r0, [pc, #12]	; (8005fbc <MX_GPIO_DeInit+0x48>)
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005fae:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005fb0:	f7fb fcc0 	bl	8001934 <HAL_GPIO_Init>

		  /* Disable GPIOs clock */
		__HAL_RCC_GPIOA_CLK_DISABLE();
		__HAL_RCC_GPIOB_CLK_DISABLE();
	#endif
}
 8005fb4:	b009      	add	sp, #36	; 0x24
 8005fb6:	bd00      	pop	{pc}
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	50000400 	.word	0x50000400

08005fc0 <Modem_Deinit_Peripheral>:
{
 8005fc0:	b510      	push	{r4, lr}
    	__HAL_UART_DISABLE_IT(&uart_mcu, UART_IT_RXNE);
 8005fc2:	2420      	movs	r4, #32
    MX_GPIO_DeInit();
 8005fc4:	f7ff ffd6 	bl	8005f74 <MX_GPIO_DeInit>
	ADC_Desequence_Powerhungry_Channels();
 8005fc8:	f7ff fb84 	bl	80056d4 <ADC_Desequence_Powerhungry_Channels>
    HAL_ADC_DeInit(&hadc);
 8005fcc:	4808      	ldr	r0, [pc, #32]	; (8005ff0 <Modem_Deinit_Peripheral+0x30>)
 8005fce:	f7fb f9f7 	bl	80013c0 <HAL_ADC_DeInit>
    	__HAL_UART_DISABLE_IT(&uart_mcu, UART_IT_RXNE);
 8005fd2:	4808      	ldr	r0, [pc, #32]	; (8005ff4 <Modem_Deinit_Peripheral+0x34>)
 8005fd4:	6802      	ldr	r2, [r0, #0]
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	43a3      	bics	r3, r4
 8005fda:	6013      	str	r3, [r2, #0]
    	HAL_UART_DeInit(&uart_mcu);
 8005fdc:	f7fd f8b2 	bl	8003144 <HAL_UART_DeInit>
    	__HAL_UART_DISABLE_IT(&uart_debug, UART_IT_RXNE);
 8005fe0:	4805      	ldr	r0, [pc, #20]	; (8005ff8 <Modem_Deinit_Peripheral+0x38>)
 8005fe2:	6802      	ldr	r2, [r0, #0]
 8005fe4:	6813      	ldr	r3, [r2, #0]
 8005fe6:	43a3      	bics	r3, r4
 8005fe8:	6013      	str	r3, [r2, #0]
    	HAL_UART_DeInit(&uart_debug);
 8005fea:	f7fd f8ab 	bl	8003144 <HAL_UART_DeInit>
}
 8005fee:	bd10      	pop	{r4, pc}
 8005ff0:	20001134 	.word	0x20001134
 8005ff4:	200012a4 	.word	0x200012a4
 8005ff8:	20001220 	.word	0x20001220

08005ffc <Modem_Init_Gpio_Again>:

void Modem_Init_Gpio_Again(void)
{
 8005ffc:	b530      	push	{r4, r5, lr}
	#ifdef DEVICE_TYPE_STATION
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffe:	2401      	movs	r4, #1
{
 8006000:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006002:	2214      	movs	r2, #20
 8006004:	2100      	movs	r1, #0
 8006006:	a803      	add	r0, sp, #12
 8006008:	f001 fce5 	bl	80079d6 <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800600c:	2102      	movs	r1, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <Modem_Init_Gpio_Again+0x54>)

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006010:	4d10      	ldr	r5, [pc, #64]	; (8006054 <Modem_Init_Gpio_Again+0x58>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006014:	0028      	movs	r0, r5
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006016:	4322      	orrs	r2, r4
 8006018:	62da      	str	r2, [r3, #44]	; 0x2c
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	4022      	ands	r2, r4
 800601e:	9201      	str	r2, [sp, #4]
 8006020:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	430a      	orrs	r2, r1
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800602a:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800602c:	400b      	ands	r3, r1
 800602e:	9302      	str	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006030:	1849      	adds	r1, r1, r1
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006032:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006034:	f7fb fdca 	bl	8001bcc <HAL_GPIO_WritePin>

		/*Configure GPIO pin : PtPin */
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8006038:	2304      	movs	r3, #4
 800603a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603c:	2300      	movs	r3, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800603e:	0028      	movs	r0, r5
 8006040:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006042:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006046:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8006048:	f7fb fc74 	bl	8001934 <HAL_GPIO_Init>
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	#endif
}
 800604c:	b009      	add	sp, #36	; 0x24
 800604e:	bd30      	pop	{r4, r5, pc}
 8006050:	40021000 	.word	0x40021000
 8006054:	50000400 	.word	0x50000400

08006058 <Modem_Init_Peripheral>:
{
 8006058:	b510      	push	{r4, lr}
    Modem_Init_Gpio_Again();
 800605a:	f7ff ffcf 	bl	8005ffc <Modem_Init_Gpio_Again>
    AdcInitialized = 0;
 800605e:	2200      	movs	r2, #0
    	__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
 8006060:	2420      	movs	r4, #32
    AdcInitialized = 0;
 8006062:	4b08      	ldr	r3, [pc, #32]	; (8006084 <Modem_Init_Peripheral+0x2c>)
 8006064:	701a      	strb	r2, [r3, #0]
    	MX_USART1_UART_Init();
 8006066:	f000 fbb1 	bl	80067cc <MX_USART1_UART_Init>
    	__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <Modem_Init_Peripheral+0x30>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	4323      	orrs	r3, r4
 8006072:	6013      	str	r3, [r2, #0]
    	MX_USART2_UART_Init();
 8006074:	f000 fbc6 	bl	8006804 <MX_USART2_UART_Init>
    	__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <Modem_Init_Peripheral+0x34>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4314      	orrs	r4, r2
 8006080:	601c      	str	r4, [r3, #0]
}
 8006082:	bd10      	pop	{r4, pc}
 8006084:	200008c7 	.word	0x200008c7
 8006088:	200012a4 	.word	0x200012a4
 800608c:	20001220 	.word	0x20001220

08006090 <Save_ID>:
/**
 * @param	0: DCU_ID
 * 			1: NET_ID
 */
void Save_ID(uint8_t type)
{
 8006090:	b530      	push	{r4, r5, lr}
    uint8_t i=0;
	uint8_t temp_arr[40] = {0};
 8006092:	2400      	movs	r4, #0
{
 8006094:	b08b      	sub	sp, #44	; 0x2c
	uint8_t temp_arr[40] = {0};
 8006096:	2224      	movs	r2, #36	; 0x24
 8006098:	0021      	movs	r1, r4
{
 800609a:	0005      	movs	r5, r0
	uint8_t temp_arr[40] = {0};
 800609c:	a801      	add	r0, sp, #4
 800609e:	9400      	str	r4, [sp, #0]
 80060a0:	f001 fc99 	bl	80079d6 <memset>

	if(type == 0)
 80060a4:	22aa      	movs	r2, #170	; 0xaa
	{
		temp_arr[0] = BYTE_TEMP_FIRST;
 80060a6:	4669      	mov	r1, sp
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <Save_ID+0x74>)
 80060aa:	700a      	strb	r2, [r1, #0]
	if(type == 0)
 80060ac:	42a5      	cmp	r5, r4
 80060ae:	d115      	bne.n	80060dc <Save_ID+0x4c>
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 80060b0:	889a      	ldrh	r2, [r3, #4]

		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 80060b2:	681b      	ldr	r3, [r3, #0]
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 80060b4:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 80060b6:	42aa      	cmp	r2, r5
 80060b8:	d809      	bhi.n	80060ce <Save_ID+0x3e>

		OnchipFlashPageErase(ADDR_DCUID);
 80060ba:	4813      	ldr	r0, [pc, #76]	; (8006108 <Save_ID+0x78>)
 80060bc:	f000 fc9c 	bl	80069f8 <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_DCUID, temp_arr, 40);
 80060c0:	2228      	movs	r2, #40	; 0x28
 80060c2:	4669      	mov	r1, sp
 80060c4:	4810      	ldr	r0, [pc, #64]	; (8006108 <Save_ID+0x78>)

		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];

		OnchipFlashPageErase(ADDR_NETID);
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 80060c6:	f000 fc70 	bl	80069aa <OnchipFlashWriteData>
	}
}
 80060ca:	b00b      	add	sp, #44	; 0x2c
 80060cc:	bd30      	pop	{r4, r5, pc}
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 80060ce:	0029      	movs	r1, r5
 80060d0:	5d58      	ldrb	r0, [r3, r5]
 80060d2:	4469      	add	r1, sp
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 80060d4:	3501      	adds	r5, #1
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 80060d6:	7088      	strb	r0, [r1, #2]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 80060d8:	b2ed      	uxtb	r5, r5
 80060da:	e7ec      	b.n	80060b6 <Save_ID+0x26>
		temp_arr[1] = sModem.sNET_id.Length_u16;
 80060dc:	899a      	ldrh	r2, [r3, #12]
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80060de:	689b      	ldr	r3, [r3, #8]
		temp_arr[1] = sModem.sNET_id.Length_u16;
 80060e0:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80060e2:	0021      	movs	r1, r4
 80060e4:	428a      	cmp	r2, r1
 80060e6:	d806      	bhi.n	80060f6 <Save_ID+0x66>
		OnchipFlashPageErase(ADDR_NETID);
 80060e8:	4808      	ldr	r0, [pc, #32]	; (800610c <Save_ID+0x7c>)
 80060ea:	f000 fc85 	bl	80069f8 <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 80060ee:	2228      	movs	r2, #40	; 0x28
 80060f0:	4669      	mov	r1, sp
 80060f2:	4806      	ldr	r0, [pc, #24]	; (800610c <Save_ID+0x7c>)
 80060f4:	e7e7      	b.n	80060c6 <Save_ID+0x36>
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80060f6:	0008      	movs	r0, r1
 80060f8:	5c5c      	ldrb	r4, [r3, r1]
 80060fa:	4468      	add	r0, sp
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80060fc:	3101      	adds	r1, #1
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80060fe:	7084      	strb	r4, [r0, #2]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 8006100:	b2c9      	uxtb	r1, r1
 8006102:	e7ef      	b.n	80060e4 <Save_ID+0x54>
 8006104:	200000c0 	.word	0x200000c0
 8006108:	0802f500 	.word	0x0802f500
 800610c:	0802f580 	.word	0x0802f580

08006110 <Init_ID>:
{
 8006110:	b510      	push	{r4, lr}
    if(type == 0)
 8006112:	2800      	cmp	r0, #0
 8006114:	d10c      	bne.n	8006130 <Init_ID+0x20>
    	temp = *(__IO uint8_t*) ADDR_DCUID;
 8006116:	4b0d      	ldr	r3, [pc, #52]	; (800614c <Init_ID+0x3c>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	b2d8      	uxtb	r0, r3
    	if (temp != FLASH_BYTE_EMPTY)
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <Init_ID+0x36>
            Flash_Get_Infor ((ADDR_DCUID + 1), sModem.sDCU_id.Data_a8, &sModem.sDCU_id.Length_u16, 10);
 8006120:	230a      	movs	r3, #10
 8006122:	490b      	ldr	r1, [pc, #44]	; (8006150 <Init_ID+0x40>)
 8006124:	480b      	ldr	r0, [pc, #44]	; (8006154 <Init_ID+0x44>)
 8006126:	1d0a      	adds	r2, r1, #4
 8006128:	6809      	ldr	r1, [r1, #0]
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 800612a:	f7ff fec5 	bl	8005eb8 <Flash_Get_Infor>
}
 800612e:	bd10      	pop	{r4, pc}
    	temp = *(__IO uint8_t*) ADDR_NETID;
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <Init_ID+0x48>)
 8006132:	781b      	ldrb	r3, [r3, #0]
    	if (temp != FLASH_BYTE_EMPTY)
 8006134:	2b00      	cmp	r3, #0
 8006136:	d006      	beq.n	8006146 <Init_ID+0x36>
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 8006138:	4905      	ldr	r1, [pc, #20]	; (8006150 <Init_ID+0x40>)
 800613a:	230a      	movs	r3, #10
 800613c:	000a      	movs	r2, r1
 800613e:	4807      	ldr	r0, [pc, #28]	; (800615c <Init_ID+0x4c>)
 8006140:	6889      	ldr	r1, [r1, #8]
 8006142:	320c      	adds	r2, #12
 8006144:	e7f1      	b.n	800612a <Init_ID+0x1a>
    		Save_ID(type);
 8006146:	f7ff ffa3 	bl	8006090 <Save_ID>
}
 800614a:	e7f0      	b.n	800612e <Init_ID+0x1e>
 800614c:	0802f500 	.word	0x0802f500
 8006150:	200000c0 	.word	0x200000c0
 8006154:	0802f501 	.word	0x0802f501
 8006158:	0802f580 	.word	0x0802f580
 800615c:	0802f581 	.word	0x0802f581

08006160 <Save_Freq_Send_Data>:
        Save_Freq_Send_Data();
    }
}

void Save_Freq_Send_Data (void)
{
 8006160:	b510      	push	{r4, lr}
 8006162:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 8006164:	2214      	movs	r2, #20
 8006166:	2100      	movs	r1, #0
 8006168:	a801      	add	r0, sp, #4
 800616a:	f001 fc34 	bl	80079d6 <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 800616e:	466a      	mov	r2, sp
 8006170:	23aa      	movs	r3, #170	; 0xaa
    Buff_temp[1] = 3;
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8006172:	4669      	mov	r1, sp
    Buff_temp[0] = BYTE_TEMP_FIRST;
 8006174:	7013      	strb	r3, [r2, #0]
    Buff_temp[1] = 3;
 8006176:	3ba7      	subs	r3, #167	; 0xa7
 8006178:	7053      	strb	r3, [r2, #1]
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <Save_Freq_Send_Data+0x44>)

    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;

    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 800617c:	4c0a      	ldr	r4, [pc, #40]	; (80061a8 <Save_Freq_Send_Data+0x48>)
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 800617e:	3354      	adds	r3, #84	; 0x54
 8006180:	781a      	ldrb	r2, [r3, #0]
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 8006182:	0020      	movs	r0, r4
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8006184:	708a      	strb	r2, [r1, #2]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 8006186:	885b      	ldrh	r3, [r3, #2]
 8006188:	0a1a      	lsrs	r2, r3, #8
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;
 800618a:	710b      	strb	r3, [r1, #4]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 800618c:	70ca      	strb	r2, [r1, #3]
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 800618e:	2101      	movs	r1, #1
 8006190:	f000 fc56 	bl	8006a40 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 16);
 8006194:	2210      	movs	r2, #16
 8006196:	4669      	mov	r1, sp
 8006198:	0020      	movs	r0, r4
 800619a:	f000 fc06 	bl	80069aa <OnchipFlashWriteData>
}
 800619e:	b006      	add	sp, #24
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	200000c0 	.word	0x200000c0
 80061a8:	0802f600 	.word	0x0802f600

080061ac <Init_Timer_Send>:
{
 80061ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 80061ae:	2100      	movs	r1, #0
 80061b0:	2214      	movs	r2, #20
 80061b2:	a801      	add	r0, sp, #4
 80061b4:	9100      	str	r1, [sp, #0]
 80061b6:	f001 fc0e 	bl	80079d6 <memset>
    temp = *(__IO uint8_t*) (ADDR_FREQ_ACTIVE);
 80061ba:	480e      	ldr	r0, [pc, #56]	; (80061f4 <Init_Timer_Send+0x48>)
 80061bc:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d015      	beq.n	80061ee <Init_Timer_Send+0x42>
        OnchipFlashReadData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 24);
 80061c2:	2218      	movs	r2, #24
 80061c4:	4669      	mov	r1, sp
 80061c6:	f000 fc48 	bl	8006a5a <OnchipFlashReadData>
        if (Length < 24)
 80061ca:	466b      	mov	r3, sp
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b17      	cmp	r3, #23
 80061d0:	d80b      	bhi.n	80061ea <Init_Timer_Send+0x3e>
            sFreqInfor.NumWakeup_u8 = Buff_temp[2];
 80061d2:	466b      	mov	r3, sp
 80061d4:	4908      	ldr	r1, [pc, #32]	; (80061f8 <Init_Timer_Send+0x4c>)
 80061d6:	789b      	ldrb	r3, [r3, #2]
 80061d8:	3154      	adds	r1, #84	; 0x54
 80061da:	700b      	strb	r3, [r1, #0]
            sFreqInfor.FreqWakeup_u32 = (sFreqInfor.FreqWakeup_u32 << 8) | Buff_temp[4];
 80061dc:	466b      	mov	r3, sp
 80061de:	78d8      	ldrb	r0, [r3, #3]
 80061e0:	791b      	ldrb	r3, [r3, #4]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	4303      	orrs	r3, r0
 80061e6:	ba5b      	rev16	r3, r3
 80061e8:	804b      	strh	r3, [r1, #2]
}
 80061ea:	b007      	add	sp, #28
 80061ec:	bd00      	pop	{pc}
        Save_Freq_Send_Data();
 80061ee:	f7ff ffb7 	bl	8006160 <Save_Freq_Send_Data>
}
 80061f2:	e7fa      	b.n	80061ea <Init_Timer_Send+0x3e>
 80061f4:	0802f600 	.word	0x0802f600
 80061f8:	200000c0 	.word	0x200000c0

080061fc <Save_Device_Type>:
    }
}

void Save_Device_Type (void)
{
    uint8_t Buff_temp[24] = {0};
 80061fc:	2100      	movs	r1, #0
{
 80061fe:	b510      	push	{r4, lr}
 8006200:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 8006202:	2214      	movs	r2, #20
 8006204:	a801      	add	r0, sp, #4
 8006206:	9100      	str	r1, [sp, #0]
 8006208:	f001 fbe5 	bl	80079d6 <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 800620c:	466a      	mov	r2, sp
 800620e:	23aa      	movs	r3, #170	; 0xaa
    Buff_temp[1] = 1;
 8006210:	2101      	movs	r1, #1
    Buff_temp[0] = BYTE_TEMP_FIRST;
 8006212:	7013      	strb	r3, [r2, #0]
    Buff_temp[2] = sModem.TypeModem_u8;
 8006214:	4b07      	ldr	r3, [pc, #28]	; (8006234 <Save_Device_Type+0x38>)
    Buff_temp[1] = 1;
 8006216:	7051      	strb	r1, [r2, #1]
    Buff_temp[2] = sModem.TypeModem_u8;
 8006218:	7e1b      	ldrb	r3, [r3, #24]

    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 800621a:	4c07      	ldr	r4, [pc, #28]	; (8006238 <Save_Device_Type+0x3c>)
    Buff_temp[2] = sModem.TypeModem_u8;
 800621c:	7093      	strb	r3, [r2, #2]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 800621e:	0020      	movs	r0, r4
 8006220:	f000 fc0e 	bl	8006a40 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_DEVICE_TYPE, &Buff_temp[0], 16);
 8006224:	2210      	movs	r2, #16
 8006226:	4669      	mov	r1, sp
 8006228:	0020      	movs	r0, r4
 800622a:	f000 fbbe 	bl	80069aa <OnchipFlashWriteData>
}
 800622e:	b006      	add	sp, #24
 8006230:	bd10      	pop	{r4, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	200000c0 	.word	0x200000c0
 8006238:	0802f680 	.word	0x0802f680

0800623c <Init_Device_Type>:
{
 800623c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 800623e:	2100      	movs	r1, #0
 8006240:	2214      	movs	r2, #20
 8006242:	a801      	add	r0, sp, #4
 8006244:	9100      	str	r1, [sp, #0]
 8006246:	f001 fbc6 	bl	80079d6 <memset>
    temp = *(__IO uint8_t*) (ADDR_DEVICE_TYPE);
 800624a:	480a      	ldr	r0, [pc, #40]	; (8006274 <Init_Device_Type+0x38>)
 800624c:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00d      	beq.n	800626e <Init_Device_Type+0x32>
        OnchipFlashReadData(ADDR_DEVICE_TYPE, &Buff_temp[0], 24);
 8006252:	2218      	movs	r2, #24
 8006254:	4669      	mov	r1, sp
 8006256:	f000 fc00 	bl	8006a5a <OnchipFlashReadData>
        if (Length < 24)
 800625a:	466b      	mov	r3, sp
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b17      	cmp	r3, #23
 8006260:	d803      	bhi.n	800626a <Init_Device_Type+0x2e>
            sModem.TypeModem_u8 = Buff_temp[2];
 8006262:	466b      	mov	r3, sp
 8006264:	789a      	ldrb	r2, [r3, #2]
 8006266:	4b04      	ldr	r3, [pc, #16]	; (8006278 <Init_Device_Type+0x3c>)
 8006268:	761a      	strb	r2, [r3, #24]
}
 800626a:	b007      	add	sp, #28
 800626c:	bd00      	pop	{pc}
        Save_Device_Type();
 800626e:	f7ff ffc5 	bl	80061fc <Save_Device_Type>
}
 8006272:	e7fa      	b.n	800626a <Init_Device_Type+0x2e>
 8006274:	0802f680 	.word	0x0802f680
 8006278:	200000c0 	.word	0x200000c0

0800627c <Init_Memory_Infor>:
{
 800627c:	b510      	push	{r4, lr}
    Init_Timer_Send();
 800627e:	f7ff ff95 	bl	80061ac <Init_Timer_Send>
    Init_Device_Type();
 8006282:	f7ff ffdb 	bl	800623c <Init_Device_Type>
	Init_ID(0);
 8006286:	2000      	movs	r0, #0
 8006288:	f7ff ff42 	bl	8006110 <Init_ID>
	Init_ID(1);
 800628c:	2001      	movs	r0, #1
 800628e:	f7ff ff3f 	bl	8006110 <Init_ID>
}
 8006292:	bd10      	pop	{r4, pc}

08006294 <USER_Payload_Station_RTC>:
	sModem.TypeDataMessage = _DATA_CONFIRM;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_CONFIRM, delay);
}

void USER_Payload_Station_RTC(uint32_t delay)
{
 8006294:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_RTC");
	uint8_t     pData[128] = {0};
 8006296:	2600      	movs	r6, #0
{
 8006298:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_RTC");
 800629a:	492d      	ldr	r1, [pc, #180]	; (8006350 <USER_Payload_Station_RTC+0xbc>)
{
 800629c:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_RTC");
 800629e:	2001      	movs	r0, #1
 80062a0:	f001 f8b2 	bl	8007408 <LOG>
	uint8_t     pData[128] = {0};
 80062a4:	0031      	movs	r1, r6
 80062a6:	227c      	movs	r2, #124	; 0x7c
 80062a8:	a805      	add	r0, sp, #20
 80062aa:	9604      	str	r6, [sp, #16]
 80062ac:	f001 fb93 	bl	80079d6 <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Measure */
    Get_RTC();
 80062b0:	f000 fe5c 	bl	8006f6c <Get_RTC>

    /* Packet */
    pData[length++] = OBIS_ID_STATION;
 80062b4:	2302      	movs	r3, #2
    pData[length++] = sModem.sDCU_id.Length_u16;
 80062b6:	4827      	ldr	r0, [pc, #156]	; (8006354 <USER_Payload_Station_RTC+0xc0>)
	uint8_t     pData[128] = {0};
 80062b8:	ac04      	add	r4, sp, #16
    pData[length++] = OBIS_ID_STATION;
 80062ba:	7023      	strb	r3, [r4, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80062bc:	8881      	ldrh	r1, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80062be:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80062c0:	b2cb      	uxtb	r3, r1
 80062c2:	7063      	strb	r3, [r4, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80062c4:	1cb2      	adds	r2, r6, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80062c6:	b2b5      	uxth	r5, r6
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80062c8:	b2d2      	uxtb	r2, r2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80062ca:	42a9      	cmp	r1, r5
 80062cc:	d837      	bhi.n	800633e <USER_Payload_Station_RTC+0xaa>

    pData[length++] = OBIS_TIME;
 80062ce:	2103      	movs	r1, #3
 80062d0:	54a1      	strb	r1, [r4, r2]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80062d2:	185a      	adds	r2, r3, r1
    pData[length++] = 0x06;
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	1849      	adds	r1, r1, r1
 80062d8:	54a1      	strb	r1, [r4, r2]
    pData[length++] = sRTC.year;
 80062da:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <USER_Payload_Station_RTC+0xc4>)
    pData[length++] = 0x06;
 80062dc:	1d19      	adds	r1, r3, #4
    pData[length++] = sRTC.year;
 80062de:	7996      	ldrb	r6, [r2, #6]
 80062e0:	b2c9      	uxtb	r1, r1
 80062e2:	5466      	strb	r6, [r4, r1]
    pData[length++] = sRTC.month;
 80062e4:	7956      	ldrb	r6, [r2, #5]
    pData[length++] = sRTC.year;
 80062e6:	1d59      	adds	r1, r3, #5
    pData[length++] = sRTC.month;
 80062e8:	b2c9      	uxtb	r1, r1
 80062ea:	5466      	strb	r6, [r4, r1]
    pData[length++] = sRTC.date;
 80062ec:	7916      	ldrb	r6, [r2, #4]
    pData[length++] = sRTC.month;
 80062ee:	1d99      	adds	r1, r3, #6
    pData[length++] = sRTC.date;
 80062f0:	b2c9      	uxtb	r1, r1
 80062f2:	5466      	strb	r6, [r4, r1]
    pData[length++] = sRTC.hour;
 80062f4:	7816      	ldrb	r6, [r2, #0]
    pData[length++] = sRTC.date;
 80062f6:	1dd9      	adds	r1, r3, #7
    pData[length++] = sRTC.hour;
 80062f8:	b2c9      	uxtb	r1, r1
 80062fa:	5466      	strb	r6, [r4, r1]
 80062fc:	0019      	movs	r1, r3
    pData[length++] = sRTC.min;
 80062fe:	7856      	ldrb	r6, [r2, #1]
    pData[length++] = sRTC.hour;
 8006300:	3108      	adds	r1, #8
    pData[length++] = sRTC.min;
 8006302:	b2c9      	uxtb	r1, r1
 8006304:	5466      	strb	r6, [r4, r1]
 8006306:	0019      	movs	r1, r3
    pData[length++] = sRTC.sec;
 8006308:	7892      	ldrb	r2, [r2, #2]
    pData[length++] = sRTC.min;
 800630a:	3109      	adds	r1, #9
    pData[length++] = sRTC.sec;
 800630c:	b2c9      	uxtb	r1, r1
 800630e:	5462      	strb	r2, [r4, r1]
 8006310:	0019      	movs	r1, r3

    pData[length++] = 0x00;
 8006312:	2200      	movs	r2, #0
    pData[length++] = sRTC.sec;
 8006314:	310a      	adds	r1, #10
    pData[length++] = 0x00;
 8006316:	b2c9      	uxtb	r1, r1

    length++;
 8006318:	330c      	adds	r3, #12
    pData[length++] = 0x00;
 800631a:	5462      	strb	r2, [r4, r1]
    length++;
 800631c:	b2d9      	uxtb	r1, r3
    uint8_t     TempCrc = 0;
 800631e:	0013      	movs	r3, r2
	for (i = 0; i < (length - 1); i++)
 8006320:	1e4e      	subs	r6, r1, #1
 8006322:	42b2      	cmp	r2, r6
 8006324:	db0f      	blt.n	8006346 <USER_Payload_Station_RTC+0xb2>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 8006326:	55a3      	strb	r3, [r4, r6]

    /* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <USER_Payload_Station_RTC+0xc8>)
	sModem.TypeDataMessage = _DATA_RTC;
	AppLora_Send(pData, length, DATA_CONFIRMED_DOWN, _DATA_RTC, delay);
 800632a:	2204      	movs	r2, #4
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 800632c:	8483      	strh	r3, [r0, #36]	; 0x24
	AppLora_Send(pData, length, DATA_CONFIRMED_DOWN, _DATA_RTC, delay);
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	0020      	movs	r0, r4
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2306      	movs	r3, #6
 8006336:	f7ff f8e7 	bl	8005508 <AppLora_Send>
}
 800633a:	b025      	add	sp, #148	; 0x94
 800633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800633e:	5dbd      	ldrb	r5, [r7, r6]
 8006340:	3601      	adds	r6, #1
 8006342:	54a5      	strb	r5, [r4, r2]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006344:	e7be      	b.n	80062c4 <USER_Payload_Station_RTC+0x30>
		TempCrc ^= pData[i];
 8006346:	5ca7      	ldrb	r7, [r4, r2]
	for (i = 0; i < (length - 1); i++)
 8006348:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 800634a:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 800634c:	b292      	uxth	r2, r2
 800634e:	e7e8      	b.n	8006322 <USER_Payload_Station_RTC+0x8e>
 8006350:	08008afd 	.word	0x08008afd
 8006354:	200000c0 	.word	0x200000c0
 8006358:	20001388 	.word	0x20001388
 800635c:	00000604 	.word	0x00000604

08006360 <USER_Payload_Station_Mode>:

void USER_Payload_Station_Mode(uint32_t delay)
{
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_Mode");
	uint8_t     pData[128] = {0};
 8006362:	2600      	movs	r6, #0
{
 8006364:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_Mode");
 8006366:	4920      	ldr	r1, [pc, #128]	; (80063e8 <USER_Payload_Station_Mode+0x88>)
{
 8006368:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_Mode");
 800636a:	2001      	movs	r0, #1
 800636c:	f001 f84c 	bl	8007408 <LOG>
	uint8_t     pData[128] = {0};
 8006370:	227c      	movs	r2, #124	; 0x7c
 8006372:	0031      	movs	r1, r6
 8006374:	a805      	add	r0, sp, #20
 8006376:	9604      	str	r6, [sp, #16]
 8006378:	f001 fb2d 	bl	80079d6 <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

	/* Packet */
	pData[length++] = OBIS_ID_STATION;
 800637c:	2302      	movs	r3, #2
	pData[length++] = sModem.sDCU_id.Length_u16;
 800637e:	481b      	ldr	r0, [pc, #108]	; (80063ec <USER_Payload_Station_Mode+0x8c>)
	uint8_t     pData[128] = {0};
 8006380:	ac04      	add	r4, sp, #16
	pData[length++] = OBIS_ID_STATION;
 8006382:	7023      	strb	r3, [r4, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8006384:	8881      	ldrh	r1, [r0, #4]

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006386:	6807      	ldr	r7, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8006388:	b2ca      	uxtb	r2, r1
 800638a:	7062      	strb	r2, [r4, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800638c:	1cb3      	adds	r3, r6, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800638e:	b2b5      	uxth	r5, r6
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006390:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006392:	42a9      	cmp	r1, r5
 8006394:	d81f      	bhi.n	80063d6 <USER_Payload_Station_Mode+0x76>

	pData[length++] = OBIS_MODE;
 8006396:	2104      	movs	r1, #4
 8006398:	54e1      	strb	r1, [r4, r3]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800639a:	1cd3      	adds	r3, r2, #3
	pData[length++] = 0x01;
 800639c:	b2db      	uxtb	r3, r3
 800639e:	3903      	subs	r1, #3
 80063a0:	54e1      	strb	r1, [r4, r3]
	pData[length++] = sModem.Mode & 0xFF;
 80063a2:	7e41      	ldrb	r1, [r0, #25]
	pData[length++] = 0x01;
 80063a4:	1d13      	adds	r3, r2, #4
	pData[length++] = sModem.Mode & 0xFF;
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	54e1      	strb	r1, [r4, r3]
	pData[length++] = 0x00;
 80063aa:	2300      	movs	r3, #0
	pData[length++] = sModem.Mode & 0xFF;
 80063ac:	1d51      	adds	r1, r2, #5
	pData[length++] = 0x00;
 80063ae:	b2c9      	uxtb	r1, r1

	length++;
 80063b0:	3207      	adds	r2, #7
	pData[length++] = 0x00;
 80063b2:	5463      	strb	r3, [r4, r1]
	length++;
 80063b4:	b2d1      	uxtb	r1, r2
	uint8_t     TempCrc = 0;
 80063b6:	001a      	movs	r2, r3
	for (i = 0; i < (length - 1); i++)
 80063b8:	1e4e      	subs	r6, r1, #1
 80063ba:	42b3      	cmp	r3, r6
 80063bc:	db0f      	blt.n	80063de <USER_Payload_Station_Mode+0x7e>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <USER_Payload_Station_Mode+0x90>)
	pData[length-1] = TempCrc;
 80063c0:	55a2      	strb	r2, [r4, r6]
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 80063c2:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_MODE;
	AppLora_Send(pData, length, DATA_CONFIRMED_DOWN, _DATA_MODE, delay);
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	2204      	movs	r2, #4
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	0020      	movs	r0, r4
 80063cc:	2305      	movs	r3, #5
 80063ce:	f7ff f89b 	bl	8005508 <AppLora_Send>
}
 80063d2:	b025      	add	sp, #148	; 0x94
 80063d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80063d6:	5dbd      	ldrb	r5, [r7, r6]
 80063d8:	3601      	adds	r6, #1
 80063da:	54e5      	strb	r5, [r4, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80063dc:	e7d6      	b.n	800638c <USER_Payload_Station_Mode+0x2c>
		TempCrc ^= pData[i];
 80063de:	5ce7      	ldrb	r7, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 80063e0:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 80063e2:	407a      	eors	r2, r7
	for (i = 0; i < (length - 1); i++)
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	e7e8      	b.n	80063ba <USER_Payload_Station_Mode+0x5a>
 80063e8:	08008b16 	.word	0x08008b16
 80063ec:	200000c0 	.word	0x200000c0
 80063f0:	00000504 	.word	0x00000504

080063f4 <USER_Payload_Station_Confirm>:

void USER_Payload_Station_Confirm(uint32_t delay)
{
 80063f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_Confirm");
	uint8_t     pData[128] = {0};
 80063f6:	2400      	movs	r4, #0
{
 80063f8:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_Confirm");
 80063fa:	491c      	ldr	r1, [pc, #112]	; (800646c <USER_Payload_Station_Confirm+0x78>)
{
 80063fc:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_Confirm");
 80063fe:	2001      	movs	r0, #1
 8006400:	f001 f802 	bl	8007408 <LOG>
	uint8_t     pData[128] = {0};
 8006404:	227c      	movs	r2, #124	; 0x7c
 8006406:	0021      	movs	r1, r4
 8006408:	a805      	add	r0, sp, #20
 800640a:	9404      	str	r4, [sp, #16]
 800640c:	f001 fae3 	bl	80079d6 <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Packet */
    pData[length++] = OBIS_ID_STATION;
 8006410:	2302      	movs	r3, #2
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006412:	4817      	ldr	r0, [pc, #92]	; (8006470 <USER_Payload_Station_Confirm+0x7c>)
	uint8_t     pData[128] = {0};
 8006414:	ad04      	add	r5, sp, #16
    pData[length++] = OBIS_ID_STATION;
 8006416:	702b      	strb	r3, [r5, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006418:	8882      	ldrh	r2, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800641a:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 800641c:	b2d1      	uxtb	r1, r2
 800641e:	7069      	strb	r1, [r5, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006420:	1ca3      	adds	r3, r4, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006422:	b2a6      	uxth	r6, r4
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006424:	b2db      	uxtb	r3, r3
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006426:	42b2      	cmp	r2, r6
 8006428:	d817      	bhi.n	800645a <USER_Payload_Station_Confirm+0x66>

    pData[length++] = OBIS_CONFIRM;
 800642a:	2211      	movs	r2, #17
 800642c:	54ea      	strb	r2, [r5, r3]
    pData[length++] = 0x00;
 800642e:	2300      	movs	r3, #0
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006430:	1cca      	adds	r2, r1, #3
    pData[length++] = 0x00;
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	54ab      	strb	r3, [r5, r2]

    length++;
	for (i = 0; i < (length - 1); i++)
 8006436:	001a      	movs	r2, r3
    length++;
 8006438:	3105      	adds	r1, #5
 800643a:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 800643c:	1e4c      	subs	r4, r1, #1
 800643e:	42a2      	cmp	r2, r4
 8006440:	db0f      	blt.n	8006462 <USER_Payload_Station_Confirm+0x6e>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 8006442:	552b      	strb	r3, [r5, r4]

    /* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <USER_Payload_Station_Confirm+0x80>)
	sModem.TypeDataMessage = _DATA_CONFIRM;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_DOWN, _DATA_CONFIRM, delay);
 8006446:	2202      	movs	r2, #2
	sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8006448:	8483      	strh	r3, [r0, #36]	; 0x24
	AppLora_Send(pData, length, DATA_UNCONFIRMED_DOWN, _DATA_CONFIRM, delay);
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	0028      	movs	r0, r5
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2307      	movs	r3, #7
 8006452:	f7ff f859 	bl	8005508 <AppLora_Send>
}
 8006456:	b025      	add	sp, #148	; 0x94
 8006458:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800645a:	5d3e      	ldrb	r6, [r7, r4]
 800645c:	3401      	adds	r4, #1
 800645e:	54ee      	strb	r6, [r5, r3]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006460:	e7de      	b.n	8006420 <USER_Payload_Station_Confirm+0x2c>
		TempCrc ^= pData[i];
 8006462:	5caf      	ldrb	r7, [r5, r2]
	for (i = 0; i < (length - 1); i++)
 8006464:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 8006466:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 8006468:	b292      	uxth	r2, r2
 800646a:	e7e8      	b.n	800643e <USER_Payload_Station_Confirm+0x4a>
 800646c:	08008b30 	.word	0x08008b30
 8006470:	200000c0 	.word	0x200000c0
 8006474:	00000702 	.word	0x00000702

08006478 <USER_Payload_Station_Accept>:

void USER_Payload_Station_Accept(uint32_t delay)
{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_Accecpt");
	uint8_t     pData[128] = {0};
 800647a:	2400      	movs	r4, #0
{
 800647c:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_Accecpt");
 800647e:	491c      	ldr	r1, [pc, #112]	; (80064f0 <USER_Payload_Station_Accept+0x78>)
{
 8006480:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_Accecpt");
 8006482:	2001      	movs	r0, #1
 8006484:	f000 ffc0 	bl	8007408 <LOG>
	uint8_t     pData[128] = {0};
 8006488:	227c      	movs	r2, #124	; 0x7c
 800648a:	0021      	movs	r1, r4
 800648c:	a805      	add	r0, sp, #20
 800648e:	9404      	str	r4, [sp, #16]
 8006490:	f001 faa1 	bl	80079d6 <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Packet */
    pData[length++] = OBIS_ID_STATION;
 8006494:	2302      	movs	r3, #2
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006496:	4817      	ldr	r0, [pc, #92]	; (80064f4 <USER_Payload_Station_Accept+0x7c>)
	uint8_t     pData[128] = {0};
 8006498:	ad04      	add	r5, sp, #16
    pData[length++] = OBIS_ID_STATION;
 800649a:	702b      	strb	r3, [r5, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 800649c:	8882      	ldrh	r2, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800649e:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80064a0:	b2d1      	uxtb	r1, r2
 80064a2:	7069      	strb	r1, [r5, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80064a4:	1ca3      	adds	r3, r4, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80064a6:	b2a6      	uxth	r6, r4
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80064a8:	b2db      	uxtb	r3, r3
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80064aa:	42b2      	cmp	r2, r6
 80064ac:	d817      	bhi.n	80064de <USER_Payload_Station_Accept+0x66>

    pData[length++] = OBIS_CONFIRM;
 80064ae:	2211      	movs	r2, #17
 80064b0:	54ea      	strb	r2, [r5, r3]
    pData[length++] = 0x00;
 80064b2:	2300      	movs	r3, #0
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80064b4:	1cca      	adds	r2, r1, #3
    pData[length++] = 0x00;
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	54ab      	strb	r3, [r5, r2]

    length++;
	for (i = 0; i < (length - 1); i++)
 80064ba:	001a      	movs	r2, r3
    length++;
 80064bc:	3105      	adds	r1, #5
 80064be:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 80064c0:	1e4c      	subs	r4, r1, #1
 80064c2:	42a2      	cmp	r2, r4
 80064c4:	db0f      	blt.n	80064e6 <USER_Payload_Station_Accept+0x6e>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 80064c6:	552b      	strb	r3, [r5, r4]

    /* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <USER_Payload_Station_Accept+0x80>)
 80064ca:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_ACCEPT;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_DOWN, _DATA_ACCEPT, delay);
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	0028      	movs	r0, r5
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2302      	movs	r3, #2
 80064d4:	001a      	movs	r2, r3
 80064d6:	f7ff f817 	bl	8005508 <AppLora_Send>
}
 80064da:	b025      	add	sp, #148	; 0x94
 80064dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80064de:	5d3e      	ldrb	r6, [r7, r4]
 80064e0:	3401      	adds	r4, #1
 80064e2:	54ee      	strb	r6, [r5, r3]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80064e4:	e7de      	b.n	80064a4 <USER_Payload_Station_Accept+0x2c>
		TempCrc ^= pData[i];
 80064e6:	5caf      	ldrb	r7, [r5, r2]
	for (i = 0; i < (length - 1); i++)
 80064e8:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 80064ea:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 80064ec:	b292      	uxth	r2, r2
 80064ee:	e7e8      	b.n	80064c2 <USER_Payload_Station_Accept+0x4a>
 80064f0:	08008b4d 	.word	0x08008b4d
 80064f4:	200000c0 	.word	0x200000c0
 80064f8:	00000202 	.word	0x00000202

080064fc <Protocol_Process_Rx>:
	#endif
    return Result;
}

uint8_t Protocol_Process_Rx (uint8_t DataType, uint8_t *pData, uint8_t Length)
{
 80064fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Obis = 0;
    uint8_t 	Pos = 0;
	#ifdef DEVICE_TYPE_STATION
    	uint8_t 	length_data = 0;
		uint16_t 	i = 0;
    	switch(DataType)
 80064fe:	3801      	subs	r0, #1
{
 8006500:	000d      	movs	r5, r1
 8006502:	0014      	movs	r4, r2
    	switch(DataType)
 8006504:	2806      	cmp	r0, #6
 8006506:	d81f      	bhi.n	8006548 <Protocol_Process_Rx+0x4c>
 8006508:	f7f9 fe10 	bl	800012c <__gnu_thumb1_case_uqi>
 800650c:	28041e62 	.word	0x28041e62
 8006510:	1e44      	.short	0x1e44
 8006512:	9a          	.byte	0x9a
 8006513:	00          	.byte	0x00
    	{
    		case _DATA_SINGLE:
    			LOG(LOG_RECEI, "Single shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
 8006514:	794b      	ldrb	r3, [r1, #5]
 8006516:	790a      	ldrb	r2, [r1, #4]
 8006518:	3b30      	subs	r3, #48	; 0x30
 800651a:	494b      	ldr	r1, [pc, #300]	; (8006648 <Protocol_Process_Rx+0x14c>)
 800651c:	3a30      	subs	r2, #48	; 0x30
 800651e:	2003      	movs	r0, #3
 8006520:	f000 ff72 	bl	8007408 <LOG>
				USER_Payload_Station_RTC(0);
 8006524:	2000      	movs	r0, #0
 8006526:	f7ff feb5 	bl	8006294 <USER_Payload_Station_RTC>
				Reset_Buff(&sLoraVar.sIntanData);
 800652a:	4848      	ldr	r0, [pc, #288]	; (800664c <Protocol_Process_Rx+0x150>)
 800652c:	f000 ff38 	bl	80073a0 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 8006530:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006532:	4847      	ldr	r0, [pc, #284]	; (8006650 <Protocol_Process_Rx+0x154>)
				for ( i = 0; i < (Length - 1); i++)
 8006534:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006536:	69c1      	ldr	r1, [r0, #28]
 8006538:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 800653a:	42a3      	cmp	r3, r4
 800653c:	db07      	blt.n	800654e <Protocol_Process_Rx+0x52>
    			LOG(LOG_RECEI, "Join shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
    			USER_Payload_Station_Accept(0);
				Reset_Buff(&sLoraVar.sIntanData);
				for ( i = 0; i < (Length - 1); i++)
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
				HAL_UART_Transmit(&uart_mcu, sLoraVar.sIntanData.Data_a8, sLoraVar.sIntanData.Length_u16 , 1000);
 800653e:	23fa      	movs	r3, #250	; 0xfa
 8006540:	4844      	ldr	r0, [pc, #272]	; (8006654 <Protocol_Process_Rx+0x158>)
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	f7fd f98e 	bl	8003864 <HAL_UART_Transmit>
	    	default:
	    		break;
		}
	#endif
    return 1;
}
 8006548:	2001      	movs	r0, #1
 800654a:	b004      	add	sp, #16
 800654c:	bd70      	pop	{r4, r5, r6, pc}
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800654e:	1c56      	adds	r6, r2, #1
 8006550:	8406      	strh	r6, [r0, #32]
 8006552:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 8006554:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006556:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 8006558:	b29b      	uxth	r3, r3
 800655a:	e7ec      	b.n	8006536 <Protocol_Process_Rx+0x3a>
    			LOG(LOG_RECEI, "Calib shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
 800655c:	794b      	ldrb	r3, [r1, #5]
 800655e:	790a      	ldrb	r2, [r1, #4]
 8006560:	3b30      	subs	r3, #48	; 0x30
 8006562:	493d      	ldr	r1, [pc, #244]	; (8006658 <Protocol_Process_Rx+0x15c>)
 8006564:	3a30      	subs	r2, #48	; 0x30
 8006566:	2003      	movs	r0, #3
 8006568:	f000 ff4e 	bl	8007408 <LOG>
				USER_Payload_Station_Confirm(0);
 800656c:	2000      	movs	r0, #0
 800656e:	f7ff ff41 	bl	80063f4 <USER_Payload_Station_Confirm>
				Reset_Buff(&sLoraVar.sIntanData);
 8006572:	4836      	ldr	r0, [pc, #216]	; (800664c <Protocol_Process_Rx+0x150>)
 8006574:	f000 ff14 	bl	80073a0 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 8006578:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800657a:	4835      	ldr	r0, [pc, #212]	; (8006650 <Protocol_Process_Rx+0x154>)
				for ( i = 0; i < (Length - 1); i++)
 800657c:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800657e:	69c1      	ldr	r1, [r0, #28]
 8006580:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 8006582:	42a3      	cmp	r3, r4
 8006584:	dadb      	bge.n	800653e <Protocol_Process_Rx+0x42>
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006586:	1c56      	adds	r6, r2, #1
 8006588:	8406      	strh	r6, [r0, #32]
 800658a:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 800658c:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800658e:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 8006590:	b29b      	uxth	r3, r3
 8006592:	e7f4      	b.n	800657e <Protocol_Process_Rx+0x82>
    			LOG(LOG_RECEI, "Mode shot NodeID: %d%d, Mode: %d", pData[4]-0x30, pData[5]-0x30, pData[8]);
 8006594:	794b      	ldrb	r3, [r1, #5]
 8006596:	790a      	ldrb	r2, [r1, #4]
 8006598:	7a09      	ldrb	r1, [r1, #8]
 800659a:	3b30      	subs	r3, #48	; 0x30
 800659c:	3a30      	subs	r2, #48	; 0x30
 800659e:	2003      	movs	r0, #3
 80065a0:	9100      	str	r1, [sp, #0]
 80065a2:	492e      	ldr	r1, [pc, #184]	; (800665c <Protocol_Process_Rx+0x160>)
 80065a4:	f000 ff30 	bl	8007408 <LOG>
				USER_Payload_Station_Confirm(0);
 80065a8:	2000      	movs	r0, #0
 80065aa:	f7ff ff23 	bl	80063f4 <USER_Payload_Station_Confirm>
				Reset_Buff(&sLoraVar.sIntanData);
 80065ae:	4827      	ldr	r0, [pc, #156]	; (800664c <Protocol_Process_Rx+0x150>)
 80065b0:	f000 fef6 	bl	80073a0 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 80065b4:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065b6:	4826      	ldr	r0, [pc, #152]	; (8006650 <Protocol_Process_Rx+0x154>)
				for ( i = 0; i < (Length - 1); i++)
 80065b8:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065ba:	69c1      	ldr	r1, [r0, #28]
 80065bc:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 80065be:	42a3      	cmp	r3, r4
 80065c0:	dabd      	bge.n	800653e <Protocol_Process_Rx+0x42>
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065c2:	1c56      	adds	r6, r2, #1
 80065c4:	8406      	strh	r6, [r0, #32]
 80065c6:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 80065c8:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065ca:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	e7f4      	b.n	80065ba <Protocol_Process_Rx+0xbe>
    			LOG(LOG_RECEI, "Join shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
 80065d0:	794b      	ldrb	r3, [r1, #5]
 80065d2:	790a      	ldrb	r2, [r1, #4]
 80065d4:	3b30      	subs	r3, #48	; 0x30
 80065d6:	4922      	ldr	r1, [pc, #136]	; (8006660 <Protocol_Process_Rx+0x164>)
 80065d8:	3a30      	subs	r2, #48	; 0x30
 80065da:	2003      	movs	r0, #3
 80065dc:	f000 ff14 	bl	8007408 <LOG>
    			USER_Payload_Station_Accept(0);
 80065e0:	2000      	movs	r0, #0
 80065e2:	f7ff ff49 	bl	8006478 <USER_Payload_Station_Accept>
				Reset_Buff(&sLoraVar.sIntanData);
 80065e6:	4819      	ldr	r0, [pc, #100]	; (800664c <Protocol_Process_Rx+0x150>)
 80065e8:	f000 feda 	bl	80073a0 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 80065ec:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065ee:	4818      	ldr	r0, [pc, #96]	; (8006650 <Protocol_Process_Rx+0x154>)
				for ( i = 0; i < (Length - 1); i++)
 80065f0:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065f2:	69c1      	ldr	r1, [r0, #28]
 80065f4:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	daa1      	bge.n	800653e <Protocol_Process_Rx+0x42>
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065fa:	1c56      	adds	r6, r2, #1
 80065fc:	8406      	strh	r6, [r0, #32]
 80065fe:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 8006600:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006602:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 8006604:	b29b      	uxth	r3, r3
 8006606:	e7f4      	b.n	80065f2 <Protocol_Process_Rx+0xf6>
					Obis = *(pData + Pos++);
 8006608:	5ce9      	ldrb	r1, [r5, r3]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	b2d2      	uxtb	r2, r2
					switch (Obis)
 800660e:	2901      	cmp	r1, #1
 8006610:	d013      	beq.n	800663a <Protocol_Process_Rx+0x13e>
							length_data = *(pData + Pos++);
 8006612:	3302      	adds	r3, #2
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2911      	cmp	r1, #17
 8006618:	d000      	beq.n	800661c <Protocol_Process_Rx+0x120>
 800661a:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 800661c:	42a3      	cmp	r3, r4
 800661e:	dbf3      	blt.n	8006608 <Protocol_Process_Rx+0x10c>
				if (sModem.Mode == _MODE_WAKEUP)
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <Protocol_Process_Rx+0x168>)
 8006622:	7e5b      	ldrb	r3, [r3, #25]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d102      	bne.n	800662e <Protocol_Process_Rx+0x132>
					USER_Payload_Station_Mode(0);
 8006628:	2000      	movs	r0, #0
 800662a:	f7ff fe99 	bl	8006360 <USER_Payload_Station_Mode>
	            Radio.Rx(RX_TIMEOUT_VALUE);
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <Protocol_Process_Rx+0x16c>)
 8006630:	480e      	ldr	r0, [pc, #56]	; (800666c <Protocol_Process_Rx+0x170>)
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	4798      	blx	r3
    			break;
 8006638:	e786      	b.n	8006548 <Protocol_Process_Rx+0x4c>
							Pos++;
 800663a:	3306      	adds	r3, #6
 800663c:	b2db      	uxtb	r3, r3
							break;
 800663e:	e7ed      	b.n	800661c <Protocol_Process_Rx+0x120>
    	switch(DataType)
 8006640:	2300      	movs	r3, #0
				while (Pos < (Length - 1))  //bo crc
 8006642:	3c01      	subs	r4, #1
 8006644:	e7ea      	b.n	800661c <Protocol_Process_Rx+0x120>
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	08008b6a 	.word	0x08008b6a
 800664c:	20000080 	.word	0x20000080
 8006650:	20000064 	.word	0x20000064
 8006654:	200012a4 	.word	0x200012a4
 8006658:	08008b83 	.word	0x08008b83
 800665c:	08008b9b 	.word	0x08008b9b
 8006660:	08008bbc 	.word	0x08008bbc
 8006664:	200000c0 	.word	0x200000c0
 8006668:	080084cc 	.word	0x080084cc
 800666c:	0037b1d0 	.word	0x0037b1d0

08006670 <Protocol_Extract_Rx>:
{
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	0004      	movs	r4, r0
 8006674:	001e      	movs	r6, r3
    LOG_Array(LOG_RECEI, pData, Length, "");
 8006676:	b28a      	uxth	r2, r1
 8006678:	4b21      	ldr	r3, [pc, #132]	; (8006700 <Protocol_Extract_Rx+0x90>)
{
 800667a:	000f      	movs	r7, r1
    LOG_Array(LOG_RECEI, pData, Length, "");
 800667c:	0001      	movs	r1, r0
 800667e:	2003      	movs	r0, #3
 8006680:	f000 ff0c 	bl	800749c <LOG_Array>
    sFrameRx->Header.Value 	= 	*(pData);
 8006684:	7821      	ldrb	r1, [r4, #0]
 8006686:	7031      	strb	r1, [r6, #0]
    DevAddrRx = DevAddrRx << 8 | *(pData + 1);
 8006688:	78a0      	ldrb	r0, [r4, #2]
 800668a:	7863      	ldrb	r3, [r4, #1]
 800668c:	78e2      	ldrb	r2, [r4, #3]
 800668e:	0200      	lsls	r0, r0, #8
 8006690:	4318      	orrs	r0, r3
 8006692:	7923      	ldrb	r3, [r4, #4]
 8006694:	0412      	lsls	r2, r2, #16
 8006696:	4310      	orrs	r0, r2
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	4303      	orrs	r3, r0
 800669c:	ba1b      	rev	r3, r3
    sFrameRx->DevAddr = DevAddrRx;
 800669e:	6073      	str	r3, [r6, #4]
    NetAddrRx = NetAddrRx << 8 | *(pData + 5);
 80066a0:	79a5      	ldrb	r5, [r4, #6]
 80066a2:	7963      	ldrb	r3, [r4, #5]
 80066a4:	79e2      	ldrb	r2, [r4, #7]
 80066a6:	022d      	lsls	r5, r5, #8
 80066a8:	431d      	orrs	r5, r3
 80066aa:	7a23      	ldrb	r3, [r4, #8]
 80066ac:	0412      	lsls	r2, r2, #16
 80066ae:	4315      	orrs	r5, r2
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	432b      	orrs	r3, r5
 80066b4:	ba1b      	rev	r3, r3
    sFrameRx->NetAddr = NetAddrRx;
 80066b6:	60b3      	str	r3, [r6, #8]
			if ( *(pData + 5 + i) != *(sModem.sNET_id.Data_a8 + i))
 80066b8:	4b12      	ldr	r3, [pc, #72]	; (8006704 <Protocol_Extract_Rx+0x94>)
 80066ba:	1d60      	adds	r0, r4, #5
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	2300      	movs	r3, #0
 80066c0:	5cc5      	ldrb	r5, [r0, r3]
 80066c2:	46ac      	mov	ip, r5
 80066c4:	5cd5      	ldrb	r5, [r2, r3]
 80066c6:	45ac      	cmp	ip, r5
 80066c8:	d117      	bne.n	80066fa <Protocol_Extract_Rx+0x8a>
		for (i = 0; i < 4; i++)
 80066ca:	3301      	adds	r3, #1
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d1f7      	bne.n	80066c0 <Protocol_Extract_Rx+0x50>
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_UP)
 80066d0:	3303      	adds	r3, #3
    uint8_t 	Result = FALSE;
 80066d2:	2500      	movs	r5, #0
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_UP)
 80066d4:	4019      	ands	r1, r3
 80066d6:	2903      	cmp	r1, #3
 80066d8:	d102      	bne.n	80066e0 <Protocol_Extract_Rx+0x70>
			sCtrlLora.CtrlACK_u8 = TRUE;
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <Protocol_Extract_Rx+0x98>)
 80066dc:	3501      	adds	r5, #1
 80066de:	701d      	strb	r5, [r3, #0]
		if (Length > 9)
 80066e0:	2f09      	cmp	r7, #9
 80066e2:	d908      	bls.n	80066f6 <Protocol_Extract_Rx+0x86>
			Protocol_Process_Rx (sFrameRx->Header.Bits.DataType_u8, pData + 9, Length - 9);
 80066e4:	0021      	movs	r1, r4
 80066e6:	7830      	ldrb	r0, [r6, #0]
 80066e8:	3f09      	subs	r7, #9
 80066ea:	0680      	lsls	r0, r0, #26
 80066ec:	b2fa      	uxtb	r2, r7
 80066ee:	3109      	adds	r1, #9
 80066f0:	0f40      	lsrs	r0, r0, #29
 80066f2:	f7ff ff03 	bl	80064fc <Protocol_Process_Rx>
}
 80066f6:	0028      	movs	r0, r5
 80066f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FALSE;
 80066fa:	2500      	movs	r5, #0
 80066fc:	e7fb      	b.n	80066f6 <Protocol_Extract_Rx+0x86>
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	0800884b 	.word	0x0800884b
 8006704:	200000c0 	.word	0x200000c0
 8006708:	20001130 	.word	0x20001130

0800670c <Protocol_Packet_Header>:

uint8_t Protocol_Packet_Header (LoRaFrame_t *pFrame, uint8_t RespondType, uint8_t DataType)
{
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 800670c:	2338      	movs	r3, #56	; 0x38
 800670e:	00d2      	lsls	r2, r2, #3
{
 8006710:	b530      	push	{r4, r5, lr}
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8006712:	401a      	ands	r2, r3
	pFrame->Header.Bits.DataType_u8 = DataType;
	pFrame->Header.Bits.ACK_u8 = sCtrlLora.CtrlACK_u8;
 8006714:	4c12      	ldr	r4, [pc, #72]	; (8006760 <Protocol_Packet_Header+0x54>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8006716:	3b31      	subs	r3, #49	; 0x31
 8006718:	4019      	ands	r1, r3
 800671a:	430a      	orrs	r2, r1
 800671c:	7821      	ldrb	r1, [r4, #0]
 800671e:	3339      	adds	r3, #57	; 0x39
 8006720:	0189      	lsls	r1, r1, #6
 8006722:	4019      	ands	r1, r3

	#ifdef DEVICE_TYPE_STATION
		if (sModem.SendAll == 1)
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <Protocol_Packet_Header+0x58>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8006726:	430a      	orrs	r2, r1
		if (sModem.SendAll == 1)
 8006728:	0019      	movs	r1, r3
 800672a:	3150      	adds	r1, #80	; 0x50
 800672c:	7809      	ldrb	r1, [r1, #0]
 800672e:	3901      	subs	r1, #1
 8006730:	424d      	negs	r5, r1
 8006732:	4169      	adcs	r1, r5
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8006734:	01c9      	lsls	r1, r1, #7
 8006736:	4311      	orrs	r1, r2
	#else
		pFrame->Header.Bits.SendAll = 0;
	#endif

	#ifdef DEVICE_TYPE_STATION
		pFrame->DevAddr = sLoraVar.sFrameRx.DevAddr;
 8006738:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <Protocol_Packet_Header+0x5c>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 800673a:	7001      	strb	r1, [r0, #0]
		pFrame->DevAddr = sLoraVar.sFrameRx.DevAddr;
 800673c:	6952      	ldr	r2, [r2, #20]
 800673e:	6042      	str	r2, [r0, #4]
 8006740:	689a      	ldr	r2, [r3, #8]
		uint32_t NETID_u32 = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	1d11      	adds	r1, r2, #4
		uint8_t i = 0;

		for (i = 0; i < 4; i++)
		{
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 8006746:	7815      	ldrb	r5, [r2, #0]
 8006748:	021b      	lsls	r3, r3, #8
		for (i = 0; i < 4; i++)
 800674a:	3201      	adds	r2, #1
			NETID_u32 = (NETID_u32 << 8) + *(sModem.sNET_id.Data_a8 + i);
 800674c:	18eb      	adds	r3, r5, r3
		for (i = 0; i < 4; i++)
 800674e:	428a      	cmp	r2, r1
 8006750:	d1f9      	bne.n	8006746 <Protocol_Packet_Header+0x3a>
		}
		pFrame->NetAddr = NETID_u32;
 8006752:	6083      	str	r3, [r0, #8]

		pFrame->DevAddr = DCUID_u32;
		pFrame->NetAddr = NETID_u32;
	#endif

	sCtrlLora.CtrlACK_u8 = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	7023      	strb	r3, [r4, #0]

    if (pFrame->Header.Bits.ACK_u8 != 0)
 8006758:	7800      	ldrb	r0, [r0, #0]
 800675a:	0640      	lsls	r0, r0, #25
    {
        return 1;
    }
    return 0;
}
 800675c:	0fc0      	lsrs	r0, r0, #31
 800675e:	bd30      	pop	{r4, r5, pc}
 8006760:	20001130 	.word	0x20001130
 8006764:	200000c0 	.word	0x200000c0
 8006768:	20000064 	.word	0x20000064

0800676c <HAL_ADC_MspDeInit>:
 800676c:	4770      	bx	lr
	...

08006770 <MX_GPIO_Init>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* Exported functions --------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 8006770:	b530      	push	{r4, r5, lr}
	#ifdef DEVICE_TYPE_STATION
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006772:	2401      	movs	r4, #1
{
 8006774:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006776:	2214      	movs	r2, #20
 8006778:	2100      	movs	r1, #0
 800677a:	a803      	add	r0, sp, #12
 800677c:	f001 f92b 	bl	80079d6 <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006780:	2102      	movs	r1, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <MX_GPIO_Init+0x54>)

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006784:	4d10      	ldr	r5, [pc, #64]	; (80067c8 <MX_GPIO_Init+0x58>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006788:	0028      	movs	r0, r5
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800678a:	4322      	orrs	r2, r4
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4022      	ands	r2, r4
 8006792:	9201      	str	r2, [sp, #4]
 8006794:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	430a      	orrs	r2, r1
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800679e:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80067a0:	400b      	ands	r3, r1
 80067a2:	9302      	str	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80067a4:	1849      	adds	r1, r1, r1
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80067a6:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80067a8:	f7fb fa10 	bl	8001bcc <HAL_GPIO_WritePin>

		/*Configure GPIO pin : PtPin */
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80067ac:	2304      	movs	r3, #4
 80067ae:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b0:	2300      	movs	r3, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80067b2:	0028      	movs	r0, r5
 80067b4:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b6:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b8:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ba:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80067bc:	f7fb f8ba 	bl	8001934 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
		#endif
}
 80067c0:	b009      	add	sp, #36	; 0x24
 80067c2:	bd30      	pop	{r4, r5, pc}
 80067c4:	40021000 	.word	0x40021000
 80067c8:	50000400 	.word	0x50000400

080067cc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart2_tx;

void MX_USART1_UART_Init(void)
{
	huart1.Instance = USART1;
 80067cc:	480b      	ldr	r0, [pc, #44]	; (80067fc <MX_USART1_UART_Init+0x30>)
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <MX_USART1_UART_Init+0x34>)
{
 80067d0:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 80067d2:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 80067d4:	23e1      	movs	r3, #225	; 0xe1
 80067d6:	025b      	lsls	r3, r3, #9
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 80067d8:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 80067da:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067dc:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 80067de:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067e0:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80067e2:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80067e4:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067e6:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067e8:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ea:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067ec:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80067ee:	f7fd f8dd 	bl	80039ac <HAL_UART_Init>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d001      	beq.n	80067fa <MX_USART1_UART_Init+0x2e>
	{
		Error_Handler();
 80067f6:	f7f9 ff6b 	bl	80006d0 <Error_Handler>
	}
}
 80067fa:	bd10      	pop	{r4, pc}
 80067fc:	200012a4 	.word	0x200012a4
 8006800:	40013800 	.word	0x40013800

08006804 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
	huart2.Instance = USART2;
 8006804:	480b      	ldr	r0, [pc, #44]	; (8006834 <MX_USART2_UART_Init+0x30>)
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <MX_USART2_UART_Init+0x34>)
{
 8006808:	b510      	push	{r4, lr}
	huart2.Instance = USART2;
 800680a:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 800680c:	23e1      	movs	r3, #225	; 0xe1
 800680e:	025b      	lsls	r3, r3, #9
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006810:	220c      	movs	r2, #12
	huart2.Init.BaudRate = 115200;
 8006812:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006814:	2300      	movs	r3, #0
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006816:	6142      	str	r2, [r0, #20]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006818:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800681a:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800681c:	6103      	str	r3, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800681e:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006820:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006822:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006824:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8006826:	f7fd f8c1 	bl	80039ac <HAL_UART_Init>
 800682a:	2800      	cmp	r0, #0
 800682c:	d001      	beq.n	8006832 <MX_USART2_UART_Init+0x2e>
	{
		Error_Handler();
 800682e:	f7f9 ff4f 	bl	80006d0 <Error_Handler>
	}
}
 8006832:	bd10      	pop	{r4, pc}
 8006834:	20001220 	.word	0x20001220
 8006838:	40004400 	.word	0x40004400

0800683c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800683c:	b510      	push	{r4, lr}
 800683e:	0004      	movs	r4, r0
 8006840:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006842:	2214      	movs	r2, #20
 8006844:	2100      	movs	r1, #0
 8006846:	a802      	add	r0, sp, #8
 8006848:	f001 f8c5 	bl	80079d6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800684c:	2224      	movs	r2, #36	; 0x24
 800684e:	2100      	movs	r1, #0
 8006850:	a807      	add	r0, sp, #28
 8006852:	f001 f8c0 	bl	80079d6 <memset>

  if(uartHandle->Instance==USART1)
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	4a32      	ldr	r2, [pc, #200]	; (8006924 <HAL_UART_MspInit+0xe8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d130      	bne.n	80068c0 <HAL_UART_MspInit+0x84>
  {
	    __HAL_RCC_USART1_CLK_ENABLE();
 800685e:	2280      	movs	r2, #128	; 0x80
 8006860:	4b31      	ldr	r3, [pc, #196]	; (8006928 <HAL_UART_MspInit+0xec>)
 8006862:	01d2      	lsls	r2, r2, #7
 8006864:	6b59      	ldr	r1, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();

	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006866:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006868:	430a      	orrs	r2, r1
 800686a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800686c:	2201      	movs	r2, #1
 800686e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006870:	4311      	orrs	r1, r2
 8006872:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006876:	9207      	str	r2, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006878:	4013      	ands	r3, r2
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	9b00      	ldr	r3, [sp, #0]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800687e:	920a      	str	r2, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006880:	f7fb fd9c 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8006884:	2800      	cmp	r0, #0
 8006886:	d001      	beq.n	800688c <HAL_UART_MspInit+0x50>
	    {
	    	Error_Handler();
 8006888:	f7f9 ff22 	bl	80006d0 <Error_Handler>
		/**USART1 GPIO Configuration
		PA9     ------> USART1_TX
		PA10     ------> USART1_RX
		*/
		#ifdef DEVICE_TYPE_STATION
				GPIO_InitStruct.Pin = MCU_TX_Pin|MCU_RX_Pin;
 800688c:	23c0      	movs	r3, #192	; 0xc0
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	9302      	str	r3, [sp, #8]
		#else
				GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
		#endif
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006892:	2302      	movs	r3, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006894:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006896:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006898:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800689a:	3301      	adds	r3, #1
 800689c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800689e:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80068a0:	3301      	adds	r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a2:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80068a4:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a6:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a8:	f7fb f844 	bl	8001934 <HAL_GPIO_Init>

	    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80068ac:	201b      	movs	r0, #27
 80068ae:	2201      	movs	r2, #1
 80068b0:	0021      	movs	r1, r4
 80068b2:	f7fa fe2d 	bl	8001510 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80068b6:	201b      	movs	r0, #27
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068b8:	f7fa fe54 	bl	8001564 <HAL_NVIC_EnableIRQ>
//	    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
//	#else
//	#endif
  }
}
 80068bc:	b010      	add	sp, #64	; 0x40
 80068be:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 80068c0:	4a1a      	ldr	r2, [pc, #104]	; (800692c <HAL_UART_MspInit+0xf0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d1fa      	bne.n	80068bc <HAL_UART_MspInit+0x80>
	    __HAL_RCC_USART2_CLK_ENABLE();
 80068c6:	2280      	movs	r2, #128	; 0x80
 80068c8:	4b17      	ldr	r3, [pc, #92]	; (8006928 <HAL_UART_MspInit+0xec>)
 80068ca:	0292      	lsls	r2, r2, #10
 80068cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068ce:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART2_CLK_ENABLE();
 80068d0:	430a      	orrs	r2, r1
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d2:	2101      	movs	r1, #1
	    __HAL_RCC_USART2_CLK_ENABLE();
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	430a      	orrs	r2, r1
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	400b      	ands	r3, r1
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	9b01      	ldr	r3, [sp, #4]
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068e4:	2302      	movs	r3, #2
 80068e6:	9307      	str	r3, [sp, #28]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80068e8:	18db      	adds	r3, r3, r3
 80068ea:	930a      	str	r3, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068ec:	f7fb fd66 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_UART_MspInit+0xbc>
	    	Error_Handler();
 80068f4:	f7f9 feec 	bl	80006d0 <Error_Handler>
	    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80068f8:	230c      	movs	r3, #12
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068fa:	20a0      	movs	r0, #160	; 0xa0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2400      	movs	r4, #0
	    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80068fe:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006900:	3b0a      	subs	r3, #10
 8006902:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006904:	3301      	adds	r3, #1
 8006906:	9305      	str	r3, [sp, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006908:	a902      	add	r1, sp, #8
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800690a:	3301      	adds	r3, #1
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800690c:	05c0      	lsls	r0, r0, #23
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800690e:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006910:	9404      	str	r4, [sp, #16]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006912:	f7fb f80f 	bl	8001934 <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8006916:	201c      	movs	r0, #28
 8006918:	2201      	movs	r2, #1
 800691a:	0021      	movs	r1, r4
 800691c:	f7fa fdf8 	bl	8001510 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006920:	201c      	movs	r0, #28
 8006922:	e7c9      	b.n	80068b8 <HAL_UART_MspInit+0x7c>
 8006924:	40013800 	.word	0x40013800
 8006928:	40021000 	.word	0x40021000
 800692c:	40004400 	.word	0x40004400

08006930 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if(uartHandle->Instance==USART1)
 8006930:	6803      	ldr	r3, [r0, #0]
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <HAL_UART_MspDeInit+0x44>)
{
 8006934:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8006936:	4293      	cmp	r3, r2
 8006938:	d10d      	bne.n	8006956 <HAL_UART_MspDeInit+0x26>
		PA10     ------> USART1_RX
		*/
//		#ifdef DEVICE_TYPE_STATION
//				HAL_GPIO_DeInit(GPIOA, MCU_TX_Pin|MCU_RX_Pin);
//		#else
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800693a:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_USART1_CLK_DISABLE();
 800693c:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <HAL_UART_MspDeInit+0x48>)
 800693e:	490f      	ldr	r1, [pc, #60]	; (800697c <HAL_UART_MspDeInit+0x4c>)
 8006940:	6b53      	ldr	r3, [r2, #52]	; 0x34
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8006942:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_USART1_CLK_DISABLE();
 8006944:	400b      	ands	r3, r1
 8006946:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8006948:	210c      	movs	r1, #12
 800694a:	f7fb f8b9 	bl	8001ac0 <HAL_GPIO_DeInit>
//		#endif
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800694e:	201b      	movs	r0, #27
	    /**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	    */
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006950:	f7fa fe14 	bl	800157c <HAL_NVIC_DisableIRQ>
//	    HAL_DMA_DeInit(uartHandle->hdmatx);
//	#endif
  }
}
 8006954:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <HAL_UART_MspDeInit+0x50>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d1fb      	bne.n	8006954 <HAL_UART_MspDeInit+0x24>
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800695c:	20a0      	movs	r0, #160	; 0xa0
	    __HAL_RCC_USART2_CLK_DISABLE();
 800695e:	4a06      	ldr	r2, [pc, #24]	; (8006978 <HAL_UART_MspDeInit+0x48>)
 8006960:	4908      	ldr	r1, [pc, #32]	; (8006984 <HAL_UART_MspDeInit+0x54>)
 8006962:	6b93      	ldr	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8006964:	05c0      	lsls	r0, r0, #23
	    __HAL_RCC_USART2_CLK_DISABLE();
 8006966:	400b      	ands	r3, r1
 8006968:	6393      	str	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800696a:	210c      	movs	r1, #12
 800696c:	f7fb f8a8 	bl	8001ac0 <HAL_GPIO_DeInit>
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006970:	201c      	movs	r0, #28
 8006972:	e7ed      	b.n	8006950 <HAL_UART_MspDeInit+0x20>
 8006974:	40013800 	.word	0x40013800
 8006978:	40021000 	.word	0x40021000
 800697c:	ffffbfff 	.word	0xffffbfff
 8006980:	40004400 	.word	0x40004400
 8006984:	fffdffff 	.word	0xfffdffff

08006988 <fevent_active>:
 * @brief	Active 1 event len
 * @note	Cho event thuc hien luon
 */
uint8_t fevent_active(sEvent_struct *event_struct, uint8_t event_name)
{
	event_struct[event_name].e_status = 1;
 8006988:	0109      	lsls	r1, r1, #4
 800698a:	1841      	adds	r1, r0, r1
	event_struct[event_name].e_systick = 0;
 800698c:	2300      	movs	r3, #0
	event_struct[event_name].e_status = 1;
 800698e:	2001      	movs	r0, #1
 8006990:	7048      	strb	r0, [r1, #1]
	event_struct[event_name].e_systick = 0;
 8006992:	604b      	str	r3, [r1, #4]
	return 1;
}
 8006994:	4770      	bx	lr

08006996 <fevent_enable>:
/**
 * @brief	Enable 1 event len
 * @note	Cho phep mot event kich hoat sau period cua no
 */
uint8_t fevent_enable(sEvent_struct *event_struct, uint8_t event_name)
{
 8006996:	b570      	push	{r4, r5, r6, lr}
	event_struct[event_name].e_status = 1;
 8006998:	2501      	movs	r5, #1
 800699a:	010c      	lsls	r4, r1, #4
 800699c:	1904      	adds	r4, r0, r4
 800699e:	7065      	strb	r5, [r4, #1]
	event_struct[event_name].e_systick = HAL_GetTick();
 80069a0:	f7fa fc52 	bl	8001248 <HAL_GetTick>
 80069a4:	6060      	str	r0, [r4, #4]
	return 1;
}
 80069a6:	0028      	movs	r0, r5
 80069a8:	bd70      	pop	{r4, r5, r6, pc}

080069aa <OnchipFlashWriteData>:
/* Exported functions --------------------------------------------------------*/
/**
 * @note	So luong bien truyen vao Phai la Boi cua 8
 */
HAL_StatusTypeDef	OnchipFlashWriteData (uint32_t andress, uint8_t	*data_address, uint32_t data_length)
{
 80069aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef   status = HAL_ERROR;

	temp_data_address = data_address;
	temp_write_address = andress;

	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 80069ac:	2303      	movs	r3, #3
 80069ae:	0014      	movs	r4, r2
{
 80069b0:	000f      	movs	r7, r1
	HAL_StatusTypeDef   status = HAL_ERROR;
 80069b2:	2501      	movs	r5, #1
{
 80069b4:	9001      	str	r0, [sp, #4]
	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 80069b6:	401c      	ands	r4, r3
 80069b8:	421a      	tst	r2, r3
 80069ba:	d110      	bne.n	80069de <OnchipFlashWriteData+0x34>
	{
		//Calculate number of word to write
		writetime = data_length / FLASH_BYTE_WRTIE;
 80069bc:	0893      	lsrs	r3, r2, #2
 80069be:	9300      	str	r3, [sp, #0]
		//Unlock flash
		HAL_FLASH_Unlock();
 80069c0:	f7fa ff0c 	bl	80017dc <HAL_FLASH_Unlock>
		//Wait for last operation to be completed
        FLASH_WaitForLastOperation(1000);
 80069c4:	20fa      	movs	r0, #250	; 0xfa
 80069c6:	0080      	lsls	r0, r0, #2
 80069c8:	f7fa ff48 	bl	800185c <FLASH_WaitForLastOperation>
	temp_data_address = data_address;
 80069cc:	003e      	movs	r6, r7
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	1bd9      	subs	r1, r3, r7
		//Change bytes order then write
		for (i = 0; i < writetime; i++)
 80069d2:	9b00      	ldr	r3, [sp, #0]
 80069d4:	1871      	adds	r1, r6, r1
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	d803      	bhi.n	80069e2 <OnchipFlashWriteData+0x38>
				break;
			temp_write_address = temp_write_address + FLASH_BYTE_WRTIE;
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
		}
		//Lock flash
		HAL_FLASH_Lock();
 80069da:	f7fa ff31 	bl	8001840 <HAL_FLASH_Lock>
	}
	return status;
}
 80069de:	0028      	movs	r0, r5
 80069e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 80069e2:	2002      	movs	r0, #2
			WriteData = *(__IO uint32_t*)(temp_data_address);
 80069e4:	6832      	ldr	r2, [r6, #0]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 80069e6:	f7fa ff73 	bl	80018d0 <HAL_FLASH_Program>
 80069ea:	0005      	movs	r5, r0
			if (status == HAL_ERROR)
 80069ec:	2801      	cmp	r0, #1
 80069ee:	d0f4      	beq.n	80069da <OnchipFlashWriteData+0x30>
		for (i = 0; i < writetime; i++)
 80069f0:	3401      	adds	r4, #1
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
 80069f2:	3604      	adds	r6, #4
		for (i = 0; i < writetime; i++)
 80069f4:	b2a4      	uxth	r4, r4
 80069f6:	e7ea      	b.n	80069ce <OnchipFlashWriteData+0x24>

080069f8 <OnchipFlashPageErase>:
	}
	return status;
}

HAL_StatusTypeDef OnchipFlashPageErase (uint32_t pageaddress)
{
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	0004      	movs	r4, r0
	HAL_StatusTypeDef status = HAL_ERROR;
    //Unlock flash
    status = HAL_FLASH_Unlock();
 80069fc:	f7fa feee 	bl	80017dc <HAL_FLASH_Unlock>
 8006a00:	0005      	movs	r5, r0
    //Wait for last operation to be completed
    FLASH_WaitForLastOperation(1000);
 8006a02:	20fa      	movs	r0, #250	; 0xfa
 8006a04:	0080      	lsls	r0, r0, #2
 8006a06:	f7fa ff29 	bl	800185c <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation(1000);
        //Disable the PER Bit
        CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
    #else
        //If the previous operation is completed, proceed to erase the page
        if (status == HAL_OK)
 8006a0a:	2d00      	cmp	r5, #0
 8006a0c:	d102      	bne.n	8006a14 <OnchipFlashPageErase+0x1c>
            FLASH_PageErase(pageaddress);
 8006a0e:	0020      	movs	r0, r4
 8006a10:	f7fa ff7a 	bl	8001908 <FLASH_PageErase>
        //Wait for last operation to be completed
        status = FLASH_WaitForLastOperation(1000);
 8006a14:	20fa      	movs	r0, #250	; 0xfa
 8006a16:	0080      	lsls	r0, r0, #2
 8006a18:	f7fa ff20 	bl	800185c <FLASH_WaitForLastOperation>
        //Disable the PER Bit
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <OnchipFlashPageErase+0x40>)
 8006a1e:	4907      	ldr	r1, [pc, #28]	; (8006a3c <OnchipFlashPageErase+0x44>)
 8006a20:	685a      	ldr	r2, [r3, #4]
        status = FLASH_WaitForLastOperation(1000);
 8006a22:	0004      	movs	r4, r0
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8006a24:	400a      	ands	r2, r1
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8006a26:	2108      	movs	r1, #8
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8006a28:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	438a      	bics	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
    #endif
    HAL_FLASH_Lock();
 8006a30:	f7fa ff06 	bl	8001840 <HAL_FLASH_Lock>
	return status;
}
 8006a34:	0020      	movs	r0, r4
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	40022000 	.word	0x40022000
 8006a3c:	fffffdff 	.word	0xfffffdff

08006a40 <Erase_Firmware>:

void Erase_Firmware(uint32_t Add_Flash_update, uint32_t Total_page)
{
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	0006      	movs	r6, r0
 8006a44:	000d      	movs	r5, r1
	uint32_t var;
	for (var = 0; var < Total_page; var++)
 8006a46:	2400      	movs	r4, #0
 8006a48:	42ac      	cmp	r4, r5
 8006a4a:	d100      	bne.n	8006a4e <Erase_Firmware+0xe>
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
}
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
 8006a4e:	01e0      	lsls	r0, r4, #7
 8006a50:	1980      	adds	r0, r0, r6
 8006a52:	f7ff ffd1 	bl	80069f8 <OnchipFlashPageErase>
	for (var = 0; var < Total_page; var++)
 8006a56:	3401      	adds	r4, #1
 8006a58:	e7f6      	b.n	8006a48 <Erase_Firmware+0x8>

08006a5a <OnchipFlashReadData>:
	uint16_t    i=0;
	uint32_t    temp_address;
	uint8_t     *temp_destination;
	temp_address = address;
	temp_destination = destination;
	for (i = 0; i < length_inByte; i++)
 8006a5a:	2300      	movs	r3, #0
{
 8006a5c:	b510      	push	{r4, lr}
	for (i = 0; i < length_inByte; i++)
 8006a5e:	b29c      	uxth	r4, r3
 8006a60:	42a2      	cmp	r2, r4
 8006a62:	d800      	bhi.n	8006a66 <OnchipFlashReadData+0xc>
	{
		*temp_destination = *(__IO uint8_t*)temp_address;
		temp_destination++;
		temp_address++;
	}
}
 8006a64:	bd10      	pop	{r4, pc}
		*temp_destination = *(__IO uint8_t*)temp_address;
 8006a66:	18c4      	adds	r4, r0, r3
 8006a68:	7824      	ldrb	r4, [r4, #0]
 8006a6a:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < length_inByte; i++)
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	e7f6      	b.n	8006a5e <OnchipFlashReadData+0x4>

08006a70 <UTIL_LPM_SetStopMode>:

}

void UTIL_LPM_SetStopMode(UTIL_LPM_State_t state)
{
	StopModeDisable = state;
 8006a70:	4b01      	ldr	r3, [pc, #4]	; (8006a78 <UTIL_LPM_SetStopMode+0x8>)
 8006a72:	7118      	strb	r0, [r3, #4]
}
 8006a74:	4770      	bx	lr
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	20001328 	.word	0x20001328

08006a7c <UTIL_LPM_Dis_Debug_STlink>:
{
	HAL_ResumeTick();
}

void UTIL_LPM_Dis_Debug_STlink (void)
{
 8006a7c:	b510      	push	{r4, lr}
	HAL_DBGMCU_DisableDBGSleepMode( );
 8006a7e:	f7fa fc03 	bl	8001288 <HAL_DBGMCU_DisableDBGSleepMode>
	HAL_DBGMCU_DisableDBGStopMode( );
 8006a82:	f7fa fc11 	bl	80012a8 <HAL_DBGMCU_DisableDBGStopMode>
	HAL_DBGMCU_DisableDBGStandbyMode( );
 8006a86:	f7fa fc1f 	bl	80012c8 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <UTIL_LPM_Init>:
	StopModeDisable = LPM_TRUE;
 8006a8c:	2201      	movs	r2, #1
{
 8006a8e:	b510      	push	{r4, lr}
	StopModeDisable = LPM_TRUE;
 8006a90:	4b02      	ldr	r3, [pc, #8]	; (8006a9c <UTIL_LPM_Init+0x10>)
 8006a92:	711a      	strb	r2, [r3, #4]
	UTIL_LPM_Dis_Debug_STlink();
 8006a94:	f7ff fff2 	bl	8006a7c <UTIL_LPM_Dis_Debug_STlink>
}
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	20001328 	.word	0x20001328

08006aa0 <RTC_IF_GetTimerContext>:
 */
uint32_t RTC_IF_GetTimerContext(void)
{
	RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
	/*return time context*/
	return (uint32_t) RtcTimerContext.Rtc_Time;
 8006aa0:	4b01      	ldr	r3, [pc, #4]	; (8006aa8 <RTC_IF_GetTimerContext+0x8>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
}
 8006aa4:	4770      	bx	lr
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	20001330 	.word	0x20001330

08006aac <RTC_IF_GetMinimumTimeout>:
 * @retval minimum value for a timeout in ticks
 */
uint32_t RTC_IF_GetMinimumTimeout(void)
{
	return (MIN_ALARM_DELAY);
}
 8006aac:	2003      	movs	r0, #3
 8006aae:	4770      	bx	lr

08006ab0 <RTC_IF_Convert_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8006ab0:	b510      	push	{r4, lr}
	return (uint32_t) ((((uint64_t) timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8006ab2:	0e41      	lsrs	r1, r0, #25
 8006ab4:	227d      	movs	r2, #125	; 0x7d
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	01c0      	lsls	r0, r0, #7
 8006aba:	f7f9 fcc1 	bl	8000440 <__aeabi_uldivmod>
}
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <RTC_IF_Convert_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in timer milliseconds
 */
uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8006ac0:	b510      	push	{r4, lr}
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8006ac2:	227d      	movs	r2, #125	; 0x7d
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	f7f9 fcda 	bl	8000480 <__aeabi_lmul>
 8006acc:	0649      	lsls	r1, r1, #25
 8006ace:	09c0      	lsrs	r0, r0, #7
 8006ad0:	4308      	orrs	r0, r1
}
 8006ad2:	bd10      	pop	{r4, pc}

08006ad4 <RTC_IF_StopTimer>:
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8006ad4:	4806      	ldr	r0, [pc, #24]	; (8006af0 <RTC_IF_StopTimer+0x1c>)
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <RTC_IF_StopTimer+0x20>)
 8006ad8:	6801      	ldr	r1, [r0, #0]
{
 8006ada:	b510      	push	{r4, lr}
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8006adc:	68ca      	ldr	r2, [r1, #12]
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60cb      	str	r3, [r1, #12]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	0049      	lsls	r1, r1, #1
 8006ae8:	f7fb fd46 	bl	8002578 <HAL_RTC_DeactivateAlarm>
}
 8006aec:	2000      	movs	r0, #0
 8006aee:	bd10      	pop	{r4, pc}
 8006af0:	200001e0 	.word	0x200001e0
 8006af4:	fffffe7f 	.word	0xfffffe7f

08006af8 <RTC_IF_StartTimer>:
{
 8006af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afa:	0006      	movs	r6, r0
	uint16_t rtcAlarmSubSeconds = 0;
	uint16_t rtcAlarmSeconds = 0;
	uint16_t rtcAlarmMinutes = 0;
	uint16_t rtcAlarmHours = 0;
	uint16_t rtcAlarmDays = 0;
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006afc:	4c41      	ldr	r4, [pc, #260]	; (8006c04 <RTC_IF_StartTimer+0x10c>)
{
 8006afe:	b087      	sub	sp, #28
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006b00:	7923      	ldrb	r3, [r4, #4]
 8006b02:	68a7      	ldr	r7, [r4, #8]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	7963      	ldrb	r3, [r4, #5]
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	79a3      	ldrb	r3, [r4, #6]
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	79e3      	ldrb	r3, [r4, #7]
 8006b10:	9303      	str	r3, [sp, #12]
	RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8006b12:	7e63      	ldrb	r3, [r4, #25]
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	7ee3      	ldrb	r3, [r4, #27]
 8006b18:	7ea5      	ldrb	r5, [r4, #26]
 8006b1a:	9305      	str	r3, [sp, #20]
	RTC_IF_StopTimer();
 8006b1c:	f7ff ffda 	bl	8006ad4 <RTC_IF_StopTimer>
	/*reverse counter */
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8006b20:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <RTC_IF_StartTimer+0x110>)
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8006b22:	05b2      	lsls	r2, r6, #22
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8006b24:	1bdf      	subs	r7, r3, r7
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8006b26:	0d92      	lsrs	r2, r2, #22
 8006b28:	18ba      	adds	r2, r7, r2
	/* convert timeout  to seconds */
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
 8006b2a:	0ab3      	lsrs	r3, r6, #10
	/*convert microsecs to RTC format and add to 'Now' */
	rtcAlarmDays = RTC_DateStruct.Date;
	while (timeoutValue >= SECONDS_IN_1DAY )
 8006b2c:	4e37      	ldr	r6, [pc, #220]	; (8006c0c <RTC_IF_StartTimer+0x114>)
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8006b2e:	b292      	uxth	r2, r2
	rtcAlarmDays = RTC_DateStruct.Date;
 8006b30:	b2a8      	uxth	r0, r5
	while (timeoutValue >= SECONDS_IN_1DAY )
 8006b32:	42b3      	cmp	r3, r6
 8006b34:	d846      	bhi.n	8006bc4 <RTC_IF_StartTimer+0xcc>
	{
		timeoutValue -= SECONDS_IN_1DAY;
		rtcAlarmDays++;
	}
	/* calc hours */
	rtcAlarmHours = RTC_TimeStruct.Hours;
 8006b36:	4669      	mov	r1, sp
 8006b38:	880e      	ldrh	r6, [r1, #0]
	while (timeoutValue >= SECONDS_IN_1HOUR )
 8006b3a:	21e1      	movs	r1, #225	; 0xe1
 8006b3c:	0109      	lsls	r1, r1, #4
 8006b3e:	428b      	cmp	r3, r1
 8006b40:	d245      	bcs.n	8006bce <RTC_IF_StartTimer+0xd6>
	{
		timeoutValue -= SECONDS_IN_1HOUR;
		rtcAlarmHours++;
	}
	/* calc minutes */
	rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8006b42:	4669      	mov	r1, sp
 8006b44:	888f      	ldrh	r7, [r1, #4]
	while (timeoutValue >= SECONDS_IN_1MINUTE )
 8006b46:	2b3b      	cmp	r3, #59	; 0x3b
 8006b48:	d846      	bhi.n	8006bd8 <RTC_IF_StartTimer+0xe0>
		rtcAlarmMinutes++;
	}
	/* calc seconds */
	rtcAlarmSeconds = RTC_TimeStruct.Seconds + timeoutValue;
	/***** correct for modulo********/
	while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8006b4a:	0a95      	lsrs	r5, r2, #10
 8006b4c:	02a9      	lsls	r1, r5, #10
 8006b4e:	1a52      	subs	r2, r2, r1
 8006b50:	b292      	uxth	r2, r2
 8006b52:	9200      	str	r2, [sp, #0]
 8006b54:	9a02      	ldr	r2, [sp, #8]
 8006b56:	18ad      	adds	r5, r5, r2
 8006b58:	18ed      	adds	r5, r5, r3
 8006b5a:	b2ad      	uxth	r5, r5
	{
		rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
		rtcAlarmSeconds++;
	}
	while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 8006b5c:	2d3b      	cmp	r5, #59	; 0x3b
 8006b5e:	d83f      	bhi.n	8006be0 <RTC_IF_StartTimer+0xe8>
	{
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
		rtcAlarmMinutes++;
	}
	while (rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 8006b60:	2f3b      	cmp	r7, #59	; 0x3b
 8006b62:	d842      	bhi.n	8006bea <RTC_IF_StartTimer+0xf2>
	{
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
		rtcAlarmHours++;
	}
	while (rtcAlarmHours >= HOURS_IN_1DAY )
 8006b64:	2e17      	cmp	r6, #23
 8006b66:	d845      	bhi.n	8006bf4 <RTC_IF_StartTimer+0xfc>
		rtcAlarmHours -= HOURS_IN_1DAY;
		rtcAlarmDays++;
	}
	if (RTC_DateStruct.Year % 4 == 0)
	{
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8006b68:	9a04      	ldr	r2, [sp, #16]
	if (RTC_DateStruct.Year % 4 == 0)
 8006b6a:	9905      	ldr	r1, [sp, #20]
 8006b6c:	4b28      	ldr	r3, [pc, #160]	; (8006c10 <RTC_IF_StartTimer+0x118>)
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8006b6e:	3a01      	subs	r2, #1
	if (RTC_DateStruct.Year % 4 == 0)
 8006b70:	0789      	lsls	r1, r1, #30
 8006b72:	d144      	bne.n	8006bfe <RTC_IF_StartTimer+0x106>
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8006b74:	5c99      	ldrb	r1, [r3, r2]
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[RTC_DateStruct.Month - 1];
		}
	} else
	{
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 8006b76:	4288      	cmp	r0, r1
 8006b78:	d902      	bls.n	8006b80 <RTC_IF_StartTimer+0x88>
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonth[RTC_DateStruct.Month - 1];
 8006b7a:	f7f9 fc5b 	bl	8000434 <__aeabi_idivmod>
 8006b7e:	b288      	uxth	r0, r1
		}
	}
	/* Set RTC_AlarmStructure with calculated values*/
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8006b80:	9a00      	ldr	r2, [sp, #0]
 8006b82:	4b21      	ldr	r3, [pc, #132]	; (8006c08 <RTC_IF_StartTimer+0x110>)
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
	RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006b84:	77a5      	strb	r5, [r4, #30]
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	6223      	str	r3, [r4, #32]
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
 8006b8a:	23a0      	movs	r3, #160	; 0xa0
 8006b8c:	051b      	lsls	r3, r3, #20
 8006b8e:	6363      	str	r3, [r4, #52]	; 0x34
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8006b90:	0023      	movs	r3, r4
 8006b92:	333c      	adds	r3, #60	; 0x3c
 8006b94:	7018      	strb	r0, [r3, #0]
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 8006b96:	9b03      	ldr	r3, [sp, #12]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006b98:	2500      	movs	r5, #0
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 8006b9a:	77e3      	strb	r3, [r4, #31]
	RTC_AlarmStructure.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;   // RTC_ALARMMASK_DATEWEEKDAY  ; Old: RTC_ALARMMASK_NONE
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	061b      	lsls	r3, r3, #24
 8006ba0:	6323      	str	r3, [r4, #48]	; 0x30
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8006ba2:	0021      	movs	r1, r4
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006ba4:	2380      	movs	r3, #128	; 0x80
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	/* Set RTC_Alarm */
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006ba6:	002a      	movs	r2, r5
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006ba8:	005b      	lsls	r3, r3, #1
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8006baa:	311c      	adds	r1, #28
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006bac:	4819      	ldr	r0, [pc, #100]	; (8006c14 <RTC_IF_StartTimer+0x11c>)
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8006bae:	7767      	strb	r7, [r4, #29]
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
 8006bb0:	7726      	strb	r6, [r4, #28]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006bb2:	63a5      	str	r5, [r4, #56]	; 0x38
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006bb4:	6423      	str	r3, [r4, #64]	; 0x40
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006bb6:	62a5      	str	r5, [r4, #40]	; 0x28
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006bb8:	62e5      	str	r5, [r4, #44]	; 0x2c
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006bba:	f7fb fefd 	bl	80029b8 <HAL_RTC_SetAlarm_IT>
}
 8006bbe:	0028      	movs	r0, r5
 8006bc0:	b007      	add	sp, #28
 8006bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		timeoutValue -= SECONDS_IN_1DAY;
 8006bc4:	4914      	ldr	r1, [pc, #80]	; (8006c18 <RTC_IF_StartTimer+0x120>)
		rtcAlarmDays++;
 8006bc6:	3001      	adds	r0, #1
		timeoutValue -= SECONDS_IN_1DAY;
 8006bc8:	185b      	adds	r3, r3, r1
		rtcAlarmDays++;
 8006bca:	b280      	uxth	r0, r0
 8006bcc:	e7b1      	b.n	8006b32 <RTC_IF_StartTimer+0x3a>
		timeoutValue -= SECONDS_IN_1HOUR;
 8006bce:	4d13      	ldr	r5, [pc, #76]	; (8006c1c <RTC_IF_StartTimer+0x124>)
		rtcAlarmHours++;
 8006bd0:	3601      	adds	r6, #1
		timeoutValue -= SECONDS_IN_1HOUR;
 8006bd2:	195b      	adds	r3, r3, r5
		rtcAlarmHours++;
 8006bd4:	b2b6      	uxth	r6, r6
 8006bd6:	e7b2      	b.n	8006b3e <RTC_IF_StartTimer+0x46>
		rtcAlarmMinutes++;
 8006bd8:	3701      	adds	r7, #1
		timeoutValue -= SECONDS_IN_1MINUTE;
 8006bda:	3b3c      	subs	r3, #60	; 0x3c
		rtcAlarmMinutes++;
 8006bdc:	b2bf      	uxth	r7, r7
 8006bde:	e7b2      	b.n	8006b46 <RTC_IF_StartTimer+0x4e>
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006be0:	3d3c      	subs	r5, #60	; 0x3c
		rtcAlarmMinutes++;
 8006be2:	3701      	adds	r7, #1
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006be4:	b2ad      	uxth	r5, r5
		rtcAlarmMinutes++;
 8006be6:	b2bf      	uxth	r7, r7
 8006be8:	e7b8      	b.n	8006b5c <RTC_IF_StartTimer+0x64>
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006bea:	3f3c      	subs	r7, #60	; 0x3c
		rtcAlarmHours++;
 8006bec:	3601      	adds	r6, #1
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006bee:	b2bf      	uxth	r7, r7
		rtcAlarmHours++;
 8006bf0:	b2b6      	uxth	r6, r6
 8006bf2:	e7b5      	b.n	8006b60 <RTC_IF_StartTimer+0x68>
		rtcAlarmHours -= HOURS_IN_1DAY;
 8006bf4:	3e18      	subs	r6, #24
		rtcAlarmDays++;
 8006bf6:	3001      	adds	r0, #1
		rtcAlarmHours -= HOURS_IN_1DAY;
 8006bf8:	b2b6      	uxth	r6, r6
		rtcAlarmDays++;
 8006bfa:	b280      	uxth	r0, r0
 8006bfc:	e7b2      	b.n	8006b64 <RTC_IF_StartTimer+0x6c>
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	7b19      	ldrb	r1, [r3, #12]
 8006c02:	e7b8      	b.n	8006b76 <RTC_IF_StartTimer+0x7e>
 8006c04:	20001330 	.word	0x20001330
 8006c08:	000003ff 	.word	0x000003ff
 8006c0c:	0001517f 	.word	0x0001517f
 8006c10:	08008638 	.word	0x08008638
 8006c14:	200001e0 	.word	0x200001e0
 8006c18:	fffeae80 	.word	0xfffeae80
 8006c1c:	fffff1f0 	.word	0xfffff1f0

08006c20 <RTC_GetCalendarValue>:
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct,
		RTC_TimeTypeDef *RTC_TimeStruct)
{
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	000c      	movs	r4, r1
	uint32_t calendarValue = 0;
	uint32_t correction;
	/* Get Time and Date*/
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8006c24:	4e1e      	ldr	r6, [pc, #120]	; (8006ca0 <RTC_GetCalendarValue+0x80>)
{
 8006c26:	0005      	movs	r5, r0
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8006c28:	0001      	movs	r1, r0
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	0030      	movs	r0, r6
 8006c2e:	f7fb ffcd 	bl	8002bcc <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8006c32:	0021      	movs	r1, r4
 8006c34:	2200      	movs	r2, #0
 8006c36:	0030      	movs	r0, r6
 8006c38:	f7fb ff9e 	bl	8002b78 <HAL_RTC_GetTime>
	/* calculte amount of elapsed days since 01/01/2000 */
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

	correction = ((RTC_DateStruct->Year % 4) == 0) ?
 8006c3c:	2103      	movs	r1, #3
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c3e:	78ea      	ldrb	r2, [r5, #3]
 8006c40:	4e18      	ldr	r6, [pc, #96]	; (8006ca4 <RTC_GetCalendarValue+0x84>)
					DAYS_IN_MONTH_CORRECTION_LEAP :
					DAYS_IN_MONTH_CORRECTION_NORM;

	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c42:	786f      	ldrb	r7, [r5, #1]
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c44:	4356      	muls	r6, r2
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8006c46:	400a      	ands	r2, r1
 8006c48:	4253      	negs	r3, r2
 8006c4a:	415a      	adcs	r2, r3
 8006c4c:	4253      	negs	r3, r2
 8006c4e:	4a16      	ldr	r2, [pc, #88]	; (8006ca8 <RTC_GetCalendarValue+0x88>)
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c50:	3f01      	subs	r7, #1
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8006c52:	4013      	ands	r3, r2
 8006c54:	4a15      	ldr	r2, [pc, #84]	; (8006cac <RTC_GetCalendarValue+0x8c>)
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c56:	3603      	adds	r6, #3
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8006c58:	189b      	adds	r3, r3, r2
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c5a:	223d      	movs	r2, #61	; 0x3d
 8006c5c:	437a      	muls	r2, r7
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006c5e:	007f      	lsls	r7, r7, #1
 8006c60:	40fb      	lsrs	r3, r7
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c62:	3201      	adds	r2, #1
 8006c64:	0fd0      	lsrs	r0, r2, #31
 8006c66:	1880      	adds	r0, r0, r2

	calendarValue += (RTC_DateStruct->Date - 1);
 8006c68:	78aa      	ldrb	r2, [r5, #2]
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c6a:	08b6      	lsrs	r6, r6, #2
	calendarValue += (RTC_DateStruct->Date - 1);
 8006c6c:	3a01      	subs	r2, #1
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c6e:	1040      	asrs	r0, r0, #1
 8006c70:	1996      	adds	r6, r2, r6
 8006c72:	1986      	adds	r6, r0, r6
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006c74:	400b      	ands	r3, r1

	/* convert from days to seconds */
	calendarValue *= SECONDS_IN_1DAY;
 8006c76:	480e      	ldr	r0, [pc, #56]	; (8006cb0 <RTC_GetCalendarValue+0x90>)
	calendarValue += (RTC_DateStruct->Date - 1);
 8006c78:	1af3      	subs	r3, r6, r3
	calendarValue *= SECONDS_IN_1DAY;
 8006c7a:	4343      	muls	r3, r0

	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c7c:	20e1      	movs	r0, #225	; 0xe1
 8006c7e:	7822      	ldrb	r2, [r4, #0]
 8006c80:	0100      	lsls	r0, r0, #4
 8006c82:	4350      	muls	r0, r2
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 8006c84:	223c      	movs	r2, #60	; 0x3c
 8006c86:	7861      	ldrb	r1, [r4, #1]
 8006c88:	434a      	muls	r2, r1
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c8a:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 8006c8c:	78a2      	ldrb	r2, [r4, #2]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c8e:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 8006c90:	18c0      	adds	r0, r0, r3
	calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	0280      	lsls	r0, r0, #10
 8006c96:	1ac0      	subs	r0, r0, r3
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <RTC_GetCalendarValue+0x94>)
 8006c9a:	18c0      	adds	r0, r0, r3
	return (calendarValue);
}
 8006c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	200001e0 	.word	0x200001e0
 8006ca4:	000005b5 	.word	0x000005b5
 8006ca8:	ffaaaab0 	.word	0xffaaaab0
 8006cac:	0099aaa0 	.word	0x0099aaa0
 8006cb0:	00015180 	.word	0x00015180
 8006cb4:	000003ff 	.word	0x000003ff

08006cb8 <RTC_IF_SetTimerContext>:
{
 8006cb8:	b510      	push	{r4, lr}
	RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date,
 8006cba:	4c04      	ldr	r4, [pc, #16]	; (8006ccc <RTC_IF_SetTimerContext+0x14>)
 8006cbc:	0020      	movs	r0, r4
 8006cbe:	1d21      	adds	r1, r4, #4
 8006cc0:	3018      	adds	r0, #24
 8006cc2:	f7ff ffad 	bl	8006c20 <RTC_GetCalendarValue>
 8006cc6:	6020      	str	r0, [r4, #0]
}
 8006cc8:	bd10      	pop	{r4, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	20001330 	.word	0x20001330

08006cd0 <RTC_IF_GetTimerElapsedTime>:
{
 8006cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006cd2:	4668      	mov	r0, sp
 8006cd4:	a901      	add	r1, sp, #4
 8006cd6:	f7ff ffa3 	bl	8006c20 <RTC_GetCalendarValue>
	return ((uint32_t) (CalendarValue - RtcTimerContext.Rtc_Time));
 8006cda:	4b02      	ldr	r3, [pc, #8]	; (8006ce4 <RTC_IF_GetTimerElapsedTime+0x14>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	1ac0      	subs	r0, r0, r3
}
 8006ce0:	b007      	add	sp, #28
 8006ce2:	bd00      	pop	{pc}
 8006ce4:	20001330 	.word	0x20001330

08006ce8 <RTC_IF_GetTime>:
{
 8006ce8:	b530      	push	{r4, r5, lr}
 8006cea:	b087      	sub	sp, #28
 8006cec:	0005      	movs	r5, r0
	uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006cee:	a901      	add	r1, sp, #4
 8006cf0:	4668      	mov	r0, sp
 8006cf2:	f7ff ff95 	bl	8006c20 <RTC_GetCalendarValue>
 8006cf6:	0004      	movs	r4, r0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8006cf8:	0580      	lsls	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8006cfa:	227d      	movs	r2, #125	; 0x7d
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2100      	movs	r1, #0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8006d00:	0d80      	lsrs	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8006d02:	f7f9 fbbd 	bl	8000480 <__aeabi_lmul>
 8006d06:	09c0      	lsrs	r0, r0, #7
	*mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8006d08:	8028      	strh	r0, [r5, #0]
	uint32_t seconds = (uint32_t) (calendarValue >> RTC_N_PREDIV_S);
 8006d0a:	0aa0      	lsrs	r0, r4, #10
}
 8006d0c:	b007      	add	sp, #28
 8006d0e:	bd30      	pop	{r4, r5, pc}

08006d10 <RTC_IF_BkUp_Write_Seconds>:
{
 8006d10:	b510      	push	{r4, lr}
 8006d12:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8006d14:	2100      	movs	r1, #0
 8006d16:	4802      	ldr	r0, [pc, #8]	; (8006d20 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8006d18:	f7fb ff7a 	bl	8002c10 <HAL_RTCEx_BKUPWrite>
}
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	200001e0 	.word	0x200001e0

08006d24 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8006d24:	b510      	push	{r4, lr}
 8006d26:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4802      	ldr	r0, [pc, #8]	; (8006d34 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8006d2c:	f7fb ff70 	bl	8002c10 <HAL_RTCEx_BKUPWrite>
}
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	200001e0 	.word	0x200001e0

08006d38 <RTC_IF_BkUp_Read_Seconds>:
{
 8006d38:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8006d3e:	f7fb ff6d 	bl	8002c1c <HAL_RTCEx_BKUPRead>
}
 8006d42:	bd10      	pop	{r4, pc}
 8006d44:	200001e0 	.word	0x200001e0

08006d48 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8006d48:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4801      	ldr	r0, [pc, #4]	; (8006d54 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8006d4e:	f7fb ff65 	bl	8002c1c <HAL_RTCEx_BKUPRead>
}
 8006d52:	bd10      	pop	{r4, pc}
 8006d54:	200001e0 	.word	0x200001e0

08006d58 <RTC_IF_Init>:
{
 8006d58:	b570      	push	{r4, r5, r6, lr}
	if (RTC_Initalized == false)
 8006d5a:	4e25      	ldr	r6, [pc, #148]	; (8006df0 <RTC_IF_Init+0x98>)
{
 8006d5c:	b08a      	sub	sp, #40	; 0x28
	if (RTC_Initalized == false)
 8006d5e:	0033      	movs	r3, r6
 8006d60:	3344      	adds	r3, #68	; 0x44
 8006d62:	781d      	ldrb	r5, [r3, #0]
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	d13f      	bne.n	8006de8 <RTC_IF_Init+0x90>
	RTC_AlarmTypeDef sAlarm = { 0 };
 8006d68:	2228      	movs	r2, #40	; 0x28
 8006d6a:	0029      	movs	r1, r5
 8006d6c:	4668      	mov	r0, sp
 8006d6e:	f000 fe32 	bl	80079d6 <memset>
	hrtc.Instance = RTC;
 8006d72:	4c20      	ldr	r4, [pc, #128]	; (8006df4 <RTC_IF_Init+0x9c>)
 8006d74:	4b20      	ldr	r3, [pc, #128]	; (8006df8 <RTC_IF_Init+0xa0>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006d76:	0020      	movs	r0, r4
	hrtc.Instance = RTC;
 8006d78:	6023      	str	r3, [r4, #0]
	hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8006d7a:	231f      	movs	r3, #31
 8006d7c:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <RTC_IF_Init+0xa4>)
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006d80:	6065      	str	r5, [r4, #4]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8006d82:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006d84:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006d86:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006d88:	61a5      	str	r5, [r4, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006d8a:	61e5      	str	r5, [r4, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006d8c:	f7fb fcbc 	bl	8002708 <HAL_RTC_Init>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d001      	beq.n	8006d98 <RTC_IF_Init+0x40>
		Error_Handler();
 8006d94:	f7f9 fc9c 	bl	80006d0 <Error_Handler>
	sAlarm.AlarmTime.Hours = 0;
 8006d98:	2200      	movs	r2, #0
 8006d9a:	466b      	mov	r3, sp
 8006d9c:	801a      	strh	r2, [r3, #0]
	sAlarm.AlarmTime.Seconds = 0;
 8006d9e:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	061b      	lsls	r3, r3, #24
 8006da4:	9305      	str	r3, [sp, #20]
	sAlarm.AlarmDateWeekDay = 1;
 8006da6:	466b      	mov	r3, sp
 8006da8:	2101      	movs	r1, #1
 8006daa:	3301      	adds	r3, #1
 8006dac:	77d9      	strb	r1, [r3, #31]
	sAlarm.Alarm = RTC_ALARM_A;
 8006dae:	2380      	movs	r3, #128	; 0x80
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8006db0:	4669      	mov	r1, sp
	sAlarm.Alarm = RTC_ALARM_A;
 8006db2:	005b      	lsls	r3, r3, #1
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8006db4:	0020      	movs	r0, r4
	sAlarm.AlarmTime.SubSeconds = 0;
 8006db6:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006db8:	9203      	str	r2, [sp, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006dba:	9204      	str	r2, [sp, #16]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006dbc:	9206      	str	r2, [sp, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006dbe:	9207      	str	r2, [sp, #28]
	sAlarm.Alarm = RTC_ALARM_A;
 8006dc0:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8006dc2:	f7fb fdf9 	bl	80029b8 <HAL_RTC_SetAlarm_IT>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d001      	beq.n	8006dce <RTC_IF_Init+0x76>
		Error_Handler();
 8006dca:	f7f9 fc81 	bl	80006d0 <Error_Handler>
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	0020      	movs	r0, r4
 8006dd2:	0049      	lsls	r1, r1, #1
 8006dd4:	f7fb fbd0 	bl	8002578 <HAL_RTC_DeactivateAlarm>
		HAL_RTCEx_EnableBypassShadow(&hrtc);
 8006dd8:	0020      	movs	r0, r4
 8006dda:	f7fb ff25 	bl	8002c28 <HAL_RTCEx_EnableBypassShadow>
		RTC_IF_SetTimerContext();
 8006dde:	f7ff ff6b 	bl	8006cb8 <RTC_IF_SetTimerContext>
		RTC_Initalized = true;
 8006de2:	2301      	movs	r3, #1
 8006de4:	3644      	adds	r6, #68	; 0x44
 8006de6:	7033      	strb	r3, [r6, #0]
}
 8006de8:	2000      	movs	r0, #0
 8006dea:	b00a      	add	sp, #40	; 0x28
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	20001330 	.word	0x20001330
 8006df4:	200001e0 	.word	0x200001e0
 8006df8:	40002800 	.word	0x40002800
 8006dfc:	000003ff 	.word	0x000003ff

08006e00 <RTC_IF_GetTimerValue>:
{
 8006e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = 0;
 8006e02:	2000      	movs	r0, #0
	if (RTC_Initalized == true)
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <RTC_IF_GetTimerValue+0x1c>)
 8006e06:	3344      	adds	r3, #68	; 0x44
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4283      	cmp	r3, r0
 8006e0c:	d003      	beq.n	8006e16 <RTC_IF_GetTimerValue+0x16>
		CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006e0e:	4668      	mov	r0, sp
 8006e10:	a901      	add	r1, sp, #4
 8006e12:	f7ff ff05 	bl	8006c20 <RTC_GetCalendarValue>
}
 8006e16:	b007      	add	sp, #28
 8006e18:	bd00      	pop	{pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	20001330 	.word	0x20001330

08006e20 <HAL_RTC_AlarmAEventCallback>:
{
 8006e20:	b510      	push	{r4, lr}
    pModemProcessIRQTimer();
 8006e22:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <HAL_RTC_AlarmAEventCallback+0xc>)
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	4798      	blx	r3
}
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	20001330 	.word	0x20001330

08006e30 <Find_str_fix>:
/**
 * @retval	-1: Neu khong tim thay chuoi
 * 			1 : Neu chuoi dung
 */
int16_t Find_str_fix (int16_t pos_fix, sData *sTemp_Receiv, sData *sResponding, int16_t Pos_Res, int16_t *Pos_sharp)
{
 8006e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 int16_t    Result,count;
	 Result = 1,count = 0;
 8006e32:	2400      	movs	r4, #0
{
 8006e34:	9001      	str	r0, [sp, #4]
	 Result = 1,count = 0;
 8006e36:	2001      	movs	r0, #1
	 while ((pos_fix + count) < sTemp_Receiv->Length_u16)
 8006e38:	9d01      	ldr	r5, [sp, #4]
 8006e3a:	888f      	ldrh	r7, [r1, #4]
 8006e3c:	192d      	adds	r5, r5, r4
 8006e3e:	42bd      	cmp	r5, r7
 8006e40:	da07      	bge.n	8006e52 <Find_str_fix+0x22>
     {
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) == '|')
 8006e42:	680f      	ldr	r7, [r1, #0]
 8006e44:	197e      	adds	r6, r7, r5
 8006e46:	5d7f      	ldrb	r7, [r7, r5]
 8006e48:	46b4      	mov	ip, r6
 8006e4a:	2f7c      	cmp	r7, #124	; 0x7c
 8006e4c:	d102      	bne.n	8006e54 <Find_str_fix+0x24>
          {
			   *Pos_sharp = pos_fix + count;
 8006e4e:	9b08      	ldr	r3, [sp, #32]
 8006e50:	801d      	strh	r5, [r3, #0]
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
              Result = -1;
		  count++;
	 }
	 return Result;
}
 8006e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		  if ((Pos_Res + count) > sResponding->Length_u16)  // Vuot qua xau dich
 8006e54:	8895      	ldrh	r5, [r2, #4]
 8006e56:	191f      	adds	r7, r3, r4
 8006e58:	42af      	cmp	r7, r5
 8006e5a:	dd04      	ble.n	8006e66 <Find_str_fix+0x36>
			   *Pos_sharp = sResponding->Length_u16 + 1;
 8006e5c:	9808      	ldr	r0, [sp, #32]
 8006e5e:	3501      	adds	r5, #1
 8006e60:	8005      	strh	r5, [r0, #0]
			   Result = -1;
 8006e62:	2001      	movs	r0, #1
 8006e64:	4240      	negs	r0, r0
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
 8006e66:	4666      	mov	r6, ip
 8006e68:	6815      	ldr	r5, [r2, #0]
 8006e6a:	7837      	ldrb	r7, [r6, #0]
 8006e6c:	192d      	adds	r5, r5, r4
 8006e6e:	5ced      	ldrb	r5, [r5, r3]
 8006e70:	42af      	cmp	r7, r5
 8006e72:	d001      	beq.n	8006e78 <Find_str_fix+0x48>
              Result = -1;
 8006e74:	2001      	movs	r0, #1
 8006e76:	4240      	negs	r0, r0
		  count++;
 8006e78:	3401      	adds	r4, #1
 8006e7a:	b224      	sxth	r4, r4
 8006e7c:	e7dc      	b.n	8006e38 <Find_str_fix+0x8>

08006e7e <Find_String_V2>:
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8006e7e:	230e      	movs	r3, #14
 8006e80:	2200      	movs	r2, #0
{
 8006e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e84:	b089      	sub	sp, #36	; 0x24
 8006e86:	000f      	movs	r7, r1
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8006e88:	a904      	add	r1, sp, #16
 8006e8a:	185b      	adds	r3, r3, r1
 8006e8c:	801a      	strh	r2, [r3, #0]
	if (*(sTemp_Receiv->Data_a8) == '!')
 8006e8e:	6803      	ldr	r3, [r0, #0]
{
 8006e90:	0006      	movs	r6, r0
	if (*(sTemp_Receiv->Data_a8) == '!')
 8006e92:	781b      	ldrb	r3, [r3, #0]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8006e94:	0014      	movs	r4, r2
	if (*(sTemp_Receiv->Data_a8) == '!')
 8006e96:	9302      	str	r3, [sp, #8]
 8006e98:	3b21      	subs	r3, #33	; 0x21
 8006e9a:	4259      	negs	r1, r3
 8006e9c:	414b      	adcs	r3, r1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	9304      	str	r3, [sp, #16]
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8006ea2:	9203      	str	r2, [sp, #12]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8006ea4:	88bb      	ldrh	r3, [r7, #4]
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	db02      	blt.n	8006eb0 <Find_String_V2+0x32>
	if (Off_Set == 0)
 8006eaa:	9c04      	ldr	r4, [sp, #16]
 8006eac:	3c01      	subs	r4, #1
 8006eae:	e041      	b.n	8006f34 <Find_String_V2+0xb6>
		if (*(sTemp_Receiv->Data_a8 + Off_Set) == *(sResponding->Data_a8 +i))  // tim dc ky tu dau giong
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	9a04      	ldr	r2, [sp, #16]
 8006eb4:	5c9a      	ldrb	r2, [r3, r2]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	5d1b      	ldrb	r3, [r3, r4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d152      	bne.n	8006f64 <Find_String_V2+0xe6>
			j = 1 + Off_Set;
 8006ebe:	9b04      	ldr	r3, [sp, #16]
			Pos_Sharp = 0;
 8006ec0:	220e      	movs	r2, #14
			j = 1 + Off_Set;
 8006ec2:	1c5d      	adds	r5, r3, #1
			Pos_Sharp = 0;
 8006ec4:	2300      	movs	r3, #0
			Check = 1;
 8006ec6:	2001      	movs	r0, #1
			Pos_Sharp = 0;
 8006ec8:	a904      	add	r1, sp, #16
 8006eca:	1852      	adds	r2, r2, r1
 8006ecc:	8013      	strh	r3, [r2, #0]
			Check_sharp = 0;
 8006ece:	9305      	str	r3, [sp, #20]
			while (j < sTemp_Receiv->Length_u16)
 8006ed0:	88b3      	ldrh	r3, [r6, #4]
 8006ed2:	429d      	cmp	r5, r3
 8006ed4:	db0a      	blt.n	8006eec <Find_String_V2+0x6e>
			if (Check == 1)
 8006ed6:	2801      	cmp	r0, #1
 8006ed8:	d144      	bne.n	8006f64 <Find_String_V2+0xe6>
	if (Off_Set == 0)
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	2b21      	cmp	r3, #33	; 0x21
 8006ede:	d102      	bne.n	8006ee6 <Find_String_V2+0x68>
	if (Result >= 0)
 8006ee0:	43e4      	mvns	r4, r4
 8006ee2:	0424      	lsls	r4, r4, #16
 8006ee4:	17e4      	asrs	r4, r4, #31
}
 8006ee6:	0020      	movs	r0, r4
 8006ee8:	b009      	add	sp, #36	; 0x24
 8006eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (*(sTemp_Receiv->Data_a8+j) == '|')
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	5d5b      	ldrb	r3, [r3, r5]
 8006ef0:	2b7c      	cmp	r3, #124	; 0x7c
 8006ef2:	d121      	bne.n	8006f38 <Find_String_V2+0xba>
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8006ef4:	aa04      	add	r2, sp, #16
 8006ef6:	3b6e      	subs	r3, #110	; 0x6e
 8006ef8:	189b      	adds	r3, r3, r2
 8006efa:	2200      	movs	r2, #0
 8006efc:	5e9b      	ldrsh	r3, [r3, r2]
						Pos_Sharp_first = i + j;
 8006efe:	b2a8      	uxth	r0, r5
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <Find_String_V2+0x90>
						Pos_Sharp_first = i + j;
 8006f04:	1903      	adds	r3, r0, r4
 8006f06:	b21b      	sxth	r3, r3
 8006f08:	9303      	str	r3, [sp, #12]
						Check_sharp = 1;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	9305      	str	r3, [sp, #20]
					Check = Find_str_fix (j + 1 ,sTemp_Receiv,sResponding, Pos_Sharp_first, &Pos_Sharp);
 8006f0e:	230e      	movs	r3, #14
 8006f10:	aa04      	add	r2, sp, #16
 8006f12:	189b      	adds	r3, r3, r2
 8006f14:	3001      	adds	r0, #1
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	003a      	movs	r2, r7
 8006f1a:	0031      	movs	r1, r6
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	b200      	sxth	r0, r0
 8006f20:	f7ff ff86 	bl	8006e30 <Find_str_fix>
 8006f24:	b2c0      	uxtb	r0, r0
					if (Check == 1)
 8006f26:	2801      	cmp	r0, #1
 8006f28:	d106      	bne.n	8006f38 <Find_String_V2+0xba>
	if (Off_Set == 0)
 8006f2a:	9b02      	ldr	r3, [sp, #8]
 8006f2c:	2b21      	cmp	r3, #33	; 0x21
 8006f2e:	d1da      	bne.n	8006ee6 <Find_String_V2+0x68>
	if (Result >= 0)
 8006f30:	43e4      	mvns	r4, r4
 8006f32:	17e4      	asrs	r4, r4, #31
	if (Off_Set == 0)
 8006f34:	b224      	sxth	r4, r4
 8006f36:	e7d6      	b.n	8006ee6 <Find_String_V2+0x68>
				if ((Check_sharp == 0) && (*(sTemp_Receiv->Data_a8+j) != *(sResponding->Data_a8 + i + j)))
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <Find_String_V2+0xd4>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6832      	ldr	r2, [r6, #0]
 8006f42:	191b      	adds	r3, r3, r4
 8006f44:	5d52      	ldrb	r2, [r2, r5]
 8006f46:	5d5b      	ldrb	r3, [r3, r5]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d10b      	bne.n	8006f64 <Find_String_V2+0xe6>
                        j++;
 8006f4c:	3501      	adds	r5, #1
 8006f4e:	b22b      	sxth	r3, r5
 8006f50:	e006      	b.n	8006f60 <Find_String_V2+0xe2>
					if (j < Pos_Sharp)
 8006f52:	230e      	movs	r3, #14
 8006f54:	aa04      	add	r2, sp, #16
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	2200      	movs	r2, #0
 8006f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8006f5c:	42ab      	cmp	r3, r5
 8006f5e:	ddf5      	ble.n	8006f4c <Find_String_V2+0xce>
						Check_sharp = 1;
 8006f60:	001d      	movs	r5, r3
 8006f62:	e7b5      	b.n	8006ed0 <Find_String_V2+0x52>
	for (i = 0; i < sResponding->Length_u16; ++i)
 8006f64:	3401      	adds	r4, #1
 8006f66:	b224      	sxth	r4, r4
 8006f68:	e79c      	b.n	8006ea4 <Find_String_V2+0x26>
	...

08006f6c <Get_RTC>:
/* Exported functions --------------------------------------------------------*/
/**
 * @brief	Lay gia tri RTC
 */
void Get_RTC(void)
{
 8006f6c:	b510      	push	{r4, lr}
    RTC_TimeTypeDef     sRTCTime;
    RTC_DateTypeDef     sRTCDate;

    HAL_RTC_GetTime(&hrtc, &sRTCTime, RTC_FORMAT_BIN);
 8006f6e:	4c10      	ldr	r4, [pc, #64]	; (8006fb0 <Get_RTC+0x44>)
{
 8006f70:	b086      	sub	sp, #24
    HAL_RTC_GetTime(&hrtc, &sRTCTime, RTC_FORMAT_BIN);
 8006f72:	a901      	add	r1, sp, #4
 8006f74:	2200      	movs	r2, #0
 8006f76:	0020      	movs	r0, r4
 8006f78:	f7fb fdfe 	bl	8002b78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sRTCDate, RTC_FORMAT_BIN);
 8006f7c:	4669      	mov	r1, sp
 8006f7e:	2200      	movs	r2, #0
 8006f80:	0020      	movs	r0, r4
 8006f82:	f7fb fe23 	bl	8002bcc <HAL_RTC_GetDate>

	sRTC.sec 	= sRTCTime.Seconds;
 8006f86:	466b      	mov	r3, sp
 8006f88:	799a      	ldrb	r2, [r3, #6]
	sRTC.min 	= sRTCTime.Minutes;
	sRTC.hour 	= sRTCTime.Hours;
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <Get_RTC+0x48>)
 8006f8c:	4669      	mov	r1, sp
	sRTC.sec 	= sRTCTime.Seconds;
 8006f8e:	709a      	strb	r2, [r3, #2]
	sRTC.day 	= sRTCDate.WeekDay;
 8006f90:	466a      	mov	r2, sp
 8006f92:	7812      	ldrb	r2, [r2, #0]
	sRTC.hour 	= sRTCTime.Hours;
 8006f94:	8889      	ldrh	r1, [r1, #4]
	sRTC.day 	= sRTCDate.WeekDay;
 8006f96:	70da      	strb	r2, [r3, #3]
	sRTC.date 	= sRTCDate.Date;
 8006f98:	466a      	mov	r2, sp
	sRTC.hour 	= sRTCTime.Hours;
 8006f9a:	8019      	strh	r1, [r3, #0]
	sRTC.date 	= sRTCDate.Date;
 8006f9c:	7892      	ldrb	r2, [r2, #2]
 8006f9e:	711a      	strb	r2, [r3, #4]
	sRTC.month 	= sRTCDate.Month;
 8006fa0:	466a      	mov	r2, sp
 8006fa2:	7852      	ldrb	r2, [r2, #1]
 8006fa4:	715a      	strb	r2, [r3, #5]
	sRTC.year 	= sRTCDate.Year;
 8006fa6:	466a      	mov	r2, sp
 8006fa8:	78d2      	ldrb	r2, [r2, #3]
 8006faa:	719a      	strb	r2, [r3, #6]

//	APP_LOG(TS_OFF, VLEVEL_M, "user_time.c: Get RTC\n\r");
}
 8006fac:	b006      	add	sp, #24
 8006fae:	bd10      	pop	{r4, pc}
 8006fb0:	200001e0 	.word	0x200001e0
 8006fb4:	20001388 	.word	0x20001388

08006fb8 <Check_update_Time>:
 * @param	Con tro chua bien thoi gian
 * @retval	1: du lieu chinh xac
 */
uint8_t Check_update_Time(ST_TIME_FORMAT *sRTC_temp)
{
	if (sRTC_temp->sec > 60)
 8006fb8:	7882      	ldrb	r2, [r0, #2]
{
 8006fba:	0003      	movs	r3, r0
        return 0;
 8006fbc:	2000      	movs	r0, #0
	if (sRTC_temp->sec > 60)
 8006fbe:	2a3c      	cmp	r2, #60	; 0x3c
 8006fc0:	d815      	bhi.n	8006fee <Check_update_Time+0x36>
	if (sRTC_temp->min > 60)
 8006fc2:	785a      	ldrb	r2, [r3, #1]
 8006fc4:	2a3c      	cmp	r2, #60	; 0x3c
 8006fc6:	d812      	bhi.n	8006fee <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->hour > 23)
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	2a17      	cmp	r2, #23
 8006fcc:	d80f      	bhi.n	8006fee <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->day > 8)
 8006fce:	78da      	ldrb	r2, [r3, #3]
 8006fd0:	2a08      	cmp	r2, #8
 8006fd2:	d80c      	bhi.n	8006fee <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->date > 31)
 8006fd4:	791a      	ldrb	r2, [r3, #4]
 8006fd6:	2a1f      	cmp	r2, #31
 8006fd8:	d809      	bhi.n	8006fee <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->month > 12)
 8006fda:	795a      	ldrb	r2, [r3, #5]
 8006fdc:	2a0c      	cmp	r2, #12
 8006fde:	d806      	bhi.n	8006fee <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->year > 99)
        return 0;
    if (sRTC_temp->year < 20){
 8006fe0:	224f      	movs	r2, #79	; 0x4f
 8006fe2:	799b      	ldrb	r3, [r3, #6]
 8006fe4:	3b14      	subs	r3, #20
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	4140      	adcs	r0, r0
 8006fec:	b2c0      	uxtb	r0, r0
        return 0;
    }
	return 1;
}
 8006fee:	4770      	bx	lr

08006ff0 <Set_RTC>:
{
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8006ff2:	2700      	movs	r7, #0
{
 8006ff4:	b08b      	sub	sp, #44	; 0x2c
 8006ff6:	9001      	str	r0, [sp, #4]
 8006ff8:	9102      	str	r1, [sp, #8]
 8006ffa:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	2214      	movs	r2, #20
{
 8007000:	ac01      	add	r4, sp, #4
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8007002:	a805      	add	r0, sp, #20
 8007004:	f000 fce7 	bl	80079d6 <memset>
    if (Check_update_Time(&sRTC_Var) == 1)
 8007008:	0020      	movs	r0, r4
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 800700a:	9704      	str	r7, [sp, #16]
    if (Check_update_Time(&sRTC_Var) == 1)
 800700c:	f7ff ffd4 	bl	8006fb8 <Check_update_Time>
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8007010:	ae04      	add	r6, sp, #16
    if (Check_update_Time(&sRTC_Var) == 1)
 8007012:	0005      	movs	r5, r0
 8007014:	2801      	cmp	r0, #1
 8007016:	d11c      	bne.n	8007052 <Set_RTC+0x62>
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8007018:	4669      	mov	r1, sp
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 800701a:	9b03      	ldr	r3, [sp, #12]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 800701c:	8822      	ldrh	r2, [r4, #0]
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 800701e:	9306      	str	r3, [sp, #24]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8007020:	78a3      	ldrb	r3, [r4, #2]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8007022:	828a      	strh	r2, [r1, #20]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8007024:	758b      	strb	r3, [r1, #22]
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 8007026:	78e3      	ldrb	r3, [r4, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8007028:	003a      	movs	r2, r7
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 800702a:	7033      	strb	r3, [r6, #0]
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 800702c:	7923      	ldrb	r3, [r4, #4]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 800702e:	a905      	add	r1, sp, #20
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8007030:	70b3      	strb	r3, [r6, #2]
        sRTCDate_Temp.Month 		 = sRTC_Var.month;
 8007032:	7963      	ldrb	r3, [r4, #5]
 8007034:	7073      	strb	r3, [r6, #1]
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 8007036:	79a3      	ldrb	r3, [r4, #6]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8007038:	4c07      	ldr	r4, [pc, #28]	; (8007058 <Set_RTC+0x68>)
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 800703a:	70f3      	strb	r3, [r6, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 800703c:	0020      	movs	r0, r4
 800703e:	f7fb fbcb 	bl	80027d8 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &sRTCDate_Temp, RTC_FORMAT_BIN);
 8007042:	003a      	movs	r2, r7
 8007044:	0031      	movs	r1, r6
 8007046:	0020      	movs	r0, r4
 8007048:	f7fb fc4a 	bl	80028e0 <HAL_RTC_SetDate>
}
 800704c:	0028      	movs	r0, r5
 800704e:	b00b      	add	sp, #44	; 0x2c
 8007050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 8007052:	003d      	movs	r5, r7
 8007054:	e7fa      	b.n	800704c <Set_RTC+0x5c>
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	200001e0 	.word	0x200001e0

0800705c <UTIL_TIMER_Init>:

/* Private functions definition -----------------------------------------------*/
UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
	UTIL_TIMER_INIT_CRITICAL_SECTION();
	TimerListHead = NULL;
 800705c:	2200      	movs	r2, #0
{
 800705e:	b510      	push	{r4, lr}
	TimerListHead = NULL;
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <UTIL_TIMER_Init+0x10>)
 8007062:	601a      	str	r2, [r3, #0]
	return UTIL_TimerDriver.InitTimer();
 8007064:	4b02      	ldr	r3, [pc, #8]	; (8007070 <UTIL_TIMER_Init+0x14>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4798      	blx	r3
}
 800706a:	bd10      	pop	{r4, pc}
 800706c:	2000137c 	.word	0x2000137c
 8007070:	08008664 	.word	0x08008664

08007074 <UTIL_TIMER_Create>:
	return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create(UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue,
		UTIL_TIMER_Mode_t Mode, void (*Callback)(void*), void *Argument)
{
 8007074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007076:	0004      	movs	r4, r0
 8007078:	0017      	movs	r7, r2
 800707a:	0008      	movs	r0, r1
 800707c:	001e      	movs	r6, r3
		TimerObject->Mode = Mode;
		TimerObject->Next = NULL;
		return UTIL_TIMER_OK;
	} else
	{
		return UTIL_TIMER_INVALID_PARAM;
 800707e:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (Callback != NULL))
 8007080:	2c00      	cmp	r4, #0
 8007082:	d00f      	beq.n	80070a4 <UTIL_TIMER_Create+0x30>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00d      	beq.n	80070a4 <UTIL_TIMER_Create+0x30>
		TimerObject->Timestamp = 0U;
 8007088:	2500      	movs	r5, #0
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <UTIL_TIMER_Create+0x34>)
		TimerObject->Timestamp = 0U;
 800708c:	6025      	str	r5, [r4, #0]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	4798      	blx	r3
		TimerObject->argument = Argument;      //Doi so cho ham callback
 8007094:	9b08      	ldr	r3, [sp, #32]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007096:	6060      	str	r0, [r4, #4]
		TimerObject->IsPending = 0U;
 8007098:	8125      	strh	r5, [r4, #8]
		TimerObject->IsReloadStopped = 0U;     //Danh dau stop timer set period
 800709a:	72a5      	strb	r5, [r4, #10]
		TimerObject->Callback = Callback;      //Ham callback
 800709c:	60e6      	str	r6, [r4, #12]
		TimerObject->argument = Argument;      //Doi so cho ham callback
 800709e:	6123      	str	r3, [r4, #16]
		TimerObject->Mode = Mode;
 80070a0:	72e7      	strb	r7, [r4, #11]
		TimerObject->Next = NULL;
 80070a2:	6165      	str	r5, [r4, #20]
	}
}
 80070a4:	0028      	movs	r0, r5
 80070a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070a8:	08008664 	.word	0x08008664

080070ac <UTIL_TIMER_GetCurrentTime>:
		TimerSetTimeout(TimerListHead);
	}
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80070ac:	b510      	push	{r4, lr}
	uint32_t now = UTIL_TimerDriver.GetTimerValue();
 80070ae:	4c03      	ldr	r4, [pc, #12]	; (80070bc <UTIL_TIMER_GetCurrentTime+0x10>)
 80070b0:	69e3      	ldr	r3, [r4, #28]
 80070b2:	4798      	blx	r3
	return UTIL_TimerDriver.Tick2ms(now);
 80070b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070b6:	4798      	blx	r3
}
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	08008664 	.word	0x08008664

080070c0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past)
{
 80070c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 80070c2:	4d06      	ldr	r5, [pc, #24]	; (80070dc <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 80070c4:	0006      	movs	r6, r0
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 80070c6:	69eb      	ldr	r3, [r5, #28]
 80070c8:	4798      	blx	r3
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 80070ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 80070cc:	0004      	movs	r4, r0
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 80070ce:	0030      	movs	r0, r6
 80070d0:	4798      	blx	r3
	/* intentional wrap around. Works Ok if tick duation below 1ms */
	return UTIL_TimerDriver.Tick2ms(nowInTicks - pastInTicks);
 80070d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80070d4:	1a20      	subs	r0, r4, r0
 80070d6:	4798      	blx	r3
}
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	08008664 	.word	0x08008664

080070e0 <TimerExists>:
 * @param 	TimerObject Structure containing the timer object parameters
 * @retval 	1 (the object is already in the list) or 0
 */
bool TimerExists(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80070e0:	4a05      	ldr	r2, [pc, #20]	; (80070f8 <TimerExists+0x18>)
{
 80070e2:	0003      	movs	r3, r0
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80070e4:	6810      	ldr	r0, [r2, #0]
	while (cur != NULL)
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d100      	bne.n	80070ec <TimerExists+0xc>
			return true;
		}
		cur = cur->Next;
	}
	return false;
}
 80070ea:	4770      	bx	lr
		if (cur == TimerObject)
 80070ec:	4298      	cmp	r0, r3
 80070ee:	d001      	beq.n	80070f4 <TimerExists+0x14>
		cur = cur->Next;
 80070f0:	6940      	ldr	r0, [r0, #20]
 80070f2:	e7f8      	b.n	80070e6 <TimerExists+0x6>
			return true;
 80070f4:	2001      	movs	r0, #1
 80070f6:	e7f8      	b.n	80070ea <TimerExists+0xa>
 80070f8:	2000137c 	.word	0x2000137c

080070fc <TimerSetTimeout>:
/**
 * @brief Sets a timeout with the duration "timestamp"
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout(UTIL_TIMER_Object_t *TimerObject)
{
 80070fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 80070fe:	4e0c      	ldr	r6, [pc, #48]	; (8007130 <TimerSetTimeout+0x34>)
{
 8007100:	0004      	movs	r4, r0
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8007102:	6a33      	ldr	r3, [r6, #32]
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	4798      	blx	r3
	TimerObject->IsPending = 1;
 8007108:	2301      	movs	r3, #1
 800710a:	7223      	strb	r3, [r4, #8]
	/* In case deadline too soon */
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 800710c:	69b3      	ldr	r3, [r6, #24]
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 800710e:	0005      	movs	r5, r0
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 8007110:	6827      	ldr	r7, [r4, #0]
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	4798      	blx	r3
 8007116:	1940      	adds	r0, r0, r5
 8007118:	4287      	cmp	r7, r0
 800711a:	d203      	bcs.n	8007124 <TimerSetTimeout+0x28>
	{
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime() + minTicks;
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	4798      	blx	r3
 8007120:	1945      	adds	r5, r0, r5
 8007122:	6025      	str	r5, [r4, #0]
	}
	UTIL_TimerDriver.StartTimerEvt(TimerObject->Timestamp);
 8007124:	68b3      	ldr	r3, [r6, #8]
 8007126:	6820      	ldr	r0, [r4, #0]
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	4798      	blx	r3
}
 800712c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	08008664 	.word	0x08008664

08007134 <UTIL_TIMER_Stop>:
{
 8007134:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007136:	2101      	movs	r1, #1
 8007138:	0003      	movs	r3, r0
		ret = UTIL_TIMER_INVALID_PARAM;
 800713a:	0008      	movs	r0, r1
	if (NULL != TimerObject)
 800713c:	2b00      	cmp	r3, #0
 800713e:	d023      	beq.n	8007188 <UTIL_TIMER_Stop+0x54>
		UTIL_TIMER_Object_t *prev = TimerListHead;
 8007140:	4d12      	ldr	r5, [pc, #72]	; (800718c <UTIL_TIMER_Stop+0x58>)
		TimerObject->IsReloadStopped = 1U;
 8007142:	7299      	strb	r1, [r3, #10]
		UTIL_TIMER_Object_t *prev = TimerListHead;
 8007144:	682a      	ldr	r2, [r5, #0]
		if (NULL != TimerListHead)
 8007146:	2a00      	cmp	r2, #0
 8007148:	d101      	bne.n	800714e <UTIL_TIMER_Stop+0x1a>
			ret = UTIL_TIMER_OK;
 800714a:	2000      	movs	r0, #0
 800714c:	e01c      	b.n	8007188 <UTIL_TIMER_Stop+0x54>
			TimerObject->IsRunning = 0U;
 800714e:	2600      	movs	r6, #0
 8007150:	725e      	strb	r6, [r3, #9]
			if (TimerListHead == TimerObject) /* Stop the Head */
 8007152:	4293      	cmp	r3, r2
 8007154:	d10e      	bne.n	8007174 <UTIL_TIMER_Stop+0x40>
				if (TimerListHead->Next != NULL)
 8007156:	695c      	ldr	r4, [r3, #20]
				TimerListHead->IsPending = 0;
 8007158:	721e      	strb	r6, [r3, #8]
				if (TimerListHead->Next != NULL)
 800715a:	42b4      	cmp	r4, r6
 800715c:	d004      	beq.n	8007168 <UTIL_TIMER_Stop+0x34>
					TimerSetTimeout(TimerListHead);
 800715e:	0020      	movs	r0, r4
					TimerListHead = TimerListHead->Next;
 8007160:	602c      	str	r4, [r5, #0]
					TimerSetTimeout(TimerListHead);
 8007162:	f7ff ffcb 	bl	80070fc <TimerSetTimeout>
 8007166:	e7f0      	b.n	800714a <UTIL_TIMER_Stop+0x16>
					UTIL_TimerDriver.StopTimerEvt();
 8007168:	4b09      	ldr	r3, [pc, #36]	; (8007190 <UTIL_TIMER_Stop+0x5c>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	4798      	blx	r3
					TimerListHead = NULL;
 8007170:	602c      	str	r4, [r5, #0]
 8007172:	e7ea      	b.n	800714a <UTIL_TIMER_Stop+0x16>
						cur = cur->Next;
 8007174:	0011      	movs	r1, r2
 8007176:	6952      	ldr	r2, [r2, #20]
				while (cur != NULL)
 8007178:	2a00      	cmp	r2, #0
 800717a:	d0e6      	beq.n	800714a <UTIL_TIMER_Stop+0x16>
					if (cur == TimerObject)
 800717c:	4293      	cmp	r3, r2
 800717e:	d1f9      	bne.n	8007174 <UTIL_TIMER_Stop+0x40>
						if (cur->Next != NULL)
 8007180:	6958      	ldr	r0, [r3, #20]
							prev->Next = cur;
 8007182:	6148      	str	r0, [r1, #20]
						if (cur->Next != NULL)
 8007184:	2800      	cmp	r0, #0
 8007186:	d1e0      	bne.n	800714a <UTIL_TIMER_Stop+0x16>
}
 8007188:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	2000137c 	.word	0x2000137c
 8007190:	08008664 	.word	0x08008664

08007194 <TimerInsertTimer>:
 *     			next timer to expire.
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8007194:	4b09      	ldr	r3, [pc, #36]	; (80071bc <TimerInsertTimer+0x28>)
{
 8007196:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8007198:	681b      	ldr	r3, [r3, #0]
	UTIL_TIMER_Object_t *next = TimerListHead->Next;
 800719a:	695a      	ldr	r2, [r3, #20]
	while (cur->Next != NULL)
 800719c:	6959      	ldr	r1, [r3, #20]
 800719e:	2900      	cmp	r1, #0
 80071a0:	d102      	bne.n	80071a8 <TimerInsertTimer+0x14>
			cur->Next = TimerObject;
			TimerObject->Next = next;
			return;
		}
	}
	cur->Next = TimerObject;
 80071a2:	6158      	str	r0, [r3, #20]
	TimerObject->Next = NULL;
 80071a4:	6141      	str	r1, [r0, #20]
 80071a6:	e008      	b.n	80071ba <TimerInsertTimer+0x26>
		if (TimerObject->Timestamp > next->Timestamp)
 80071a8:	6801      	ldr	r1, [r0, #0]
 80071aa:	6814      	ldr	r4, [r2, #0]
 80071ac:	42a1      	cmp	r1, r4
 80071ae:	d902      	bls.n	80071b6 <TimerInsertTimer+0x22>
			next = next->Next;
 80071b0:	0013      	movs	r3, r2
 80071b2:	6952      	ldr	r2, [r2, #20]
 80071b4:	e7f2      	b.n	800719c <TimerInsertTimer+0x8>
			cur->Next = TimerObject;
 80071b6:	6158      	str	r0, [r3, #20]
			TimerObject->Next = next;
 80071b8:	6142      	str	r2, [r0, #20]
}
 80071ba:	bd10      	pop	{r4, pc}
 80071bc:	2000137c 	.word	0x2000137c

080071c0 <TimerInsertNewHeadTimer>:
 * @remark 	The list is automatically sorted. The list head always contains the
 *         		next timer to expire.
 */
void TimerInsertNewHeadTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80071c0:	4a05      	ldr	r2, [pc, #20]	; (80071d8 <TimerInsertNewHeadTimer+0x18>)
{
 80071c2:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80071c4:	6813      	ldr	r3, [r2, #0]
	if (cur != NULL)
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <TimerInsertNewHeadTimer+0xe>
	{
		cur->IsPending = 0;
 80071ca:	2100      	movs	r1, #0
 80071cc:	7219      	strb	r1, [r3, #8]
	}
	TimerObject->Next = cur;
 80071ce:	6143      	str	r3, [r0, #20]
	TimerListHead = TimerObject;
 80071d0:	6010      	str	r0, [r2, #0]
	TimerSetTimeout(TimerListHead);
 80071d2:	f7ff ff93 	bl	80070fc <TimerSetTimeout>
}
 80071d6:	bd10      	pop	{r4, pc}
 80071d8:	2000137c 	.word	0x2000137c

080071dc <UTIL_TIMER_Start>:
{
 80071dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071de:	0004      	movs	r4, r0
		ret = UTIL_TIMER_INVALID_PARAM;
 80071e0:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (TimerExists(TimerObject) == false)
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d01e      	beq.n	8007224 <UTIL_TIMER_Start+0x48>
 80071e6:	f7ff ff7b 	bl	80070e0 <TimerExists>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d11a      	bne.n	8007224 <UTIL_TIMER_Start+0x48>
			&& (TimerObject->IsRunning == 0U))
 80071ee:	7a65      	ldrb	r5, [r4, #9]
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	d127      	bne.n	8007244 <UTIL_TIMER_Start+0x68>
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 80071f4:	4e14      	ldr	r6, [pc, #80]	; (8007248 <UTIL_TIMER_Start+0x6c>)
		ticks = TimerObject->ReloadValue;
 80071f6:	6867      	ldr	r7, [r4, #4]
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 80071f8:	6a33      	ldr	r3, [r6, #32]
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	4798      	blx	r3
		TimerObject->Timestamp = ticks;
 80071fe:	4287      	cmp	r7, r0
 8007200:	d200      	bcs.n	8007204 <UTIL_TIMER_Start+0x28>
 8007202:	0007      	movs	r7, r0
		TimerObject->IsPending = 0U;
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	8123      	strh	r3, [r4, #8]
		TimerObject->IsReloadStopped = 0U;
 800720a:	2300      	movs	r3, #0
		TimerObject->Timestamp = ticks;
 800720c:	6027      	str	r7, [r4, #0]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 800720e:	4f0f      	ldr	r7, [pc, #60]	; (800724c <UTIL_TIMER_Start+0x70>)
		TimerObject->IsReloadStopped = 0U;
 8007210:	72a3      	strb	r3, [r4, #10]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d107      	bne.n	8007228 <UTIL_TIMER_Start+0x4c>
			UTIL_TimerDriver.SetTimerContext();       //Lay RTC va luu gia tri RTC luc hen gio
 8007218:	6933      	ldr	r3, [r6, #16]
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	4798      	blx	r3
				TimerInsertNewHeadTimer(TimerObject);
 800721e:	0020      	movs	r0, r4
 8007220:	f7ff ffce 	bl	80071c0 <TimerInsertNewHeadTimer>
}
 8007224:	0028      	movs	r0, r5
 8007226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime(); //tinh xem da set alarm dc bao nhieu ms rôi
 8007228:	69b3      	ldr	r3, [r6, #24]
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	4798      	blx	r3
			TimerObject->Timestamp += elapsedTime;
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	18c0      	adds	r0, r0, r3
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 8007232:	683b      	ldr	r3, [r7, #0]
			TimerObject->Timestamp += elapsedTime;
 8007234:	6020      	str	r0, [r4, #0]
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4298      	cmp	r0, r3
 800723a:	d3f0      	bcc.n	800721e <UTIL_TIMER_Start+0x42>
				TimerInsertTimer(TimerObject);     //chèn object vao giữa.
 800723c:	0020      	movs	r0, r4
 800723e:	f7ff ffa9 	bl	8007194 <TimerInsertTimer>
 8007242:	e7ef      	b.n	8007224 <UTIL_TIMER_Start+0x48>
		ret = UTIL_TIMER_INVALID_PARAM;
 8007244:	2501      	movs	r5, #1
 8007246:	e7ed      	b.n	8007224 <UTIL_TIMER_Start+0x48>
 8007248:	08008664 	.word	0x08008664
 800724c:	2000137c 	.word	0x2000137c

08007250 <UTIL_TIMER_SetPeriod>:
{
 8007250:	b513      	push	{r0, r1, r4, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 8007252:	2301      	movs	r3, #1
{
 8007254:	0004      	movs	r4, r0
 8007256:	0008      	movs	r0, r1
	if (NULL == TimerObject)
 8007258:	2c00      	cmp	r4, #0
 800725a:	d011      	beq.n	8007280 <UTIL_TIMER_SetPeriod+0x30>
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <UTIL_TIMER_SetPeriod+0x34>)
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	4798      	blx	r3
 8007264:	6060      	str	r0, [r4, #4]
		if (TimerExists(TimerObject))
 8007266:	0020      	movs	r0, r4
 8007268:	f7ff ff3a 	bl	80070e0 <TimerExists>
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800726c:	2300      	movs	r3, #0
		if (TimerExists(TimerObject))
 800726e:	4298      	cmp	r0, r3
 8007270:	d006      	beq.n	8007280 <UTIL_TIMER_SetPeriod+0x30>
			(void) UTIL_TIMER_Stop(TimerObject);
 8007272:	0020      	movs	r0, r4
 8007274:	f7ff ff5e 	bl	8007134 <UTIL_TIMER_Stop>
			ret = UTIL_TIMER_Start(TimerObject);
 8007278:	0020      	movs	r0, r4
 800727a:	f7ff ffaf 	bl	80071dc <UTIL_TIMER_Start>
 800727e:	0003      	movs	r3, r0
}
 8007280:	0018      	movs	r0, r3
 8007282:	bd16      	pop	{r1, r2, r4, pc}
 8007284:	08008664 	.word	0x08008664

08007288 <UTIL_TIMER_IRQ_Handler>:
{
 8007288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	old = UTIL_TimerDriver.GetTimerContext();
 800728a:	4e1e      	ldr	r6, [pc, #120]	; (8007304 <UTIL_TIMER_IRQ_Handler+0x7c>)
 800728c:	6973      	ldr	r3, [r6, #20]
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 8007292:	6933      	ldr	r3, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 8007294:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	4798      	blx	r3
	if (TimerListHead != NULL)
 800729a:	4d1b      	ldr	r5, [pc, #108]	; (8007308 <UTIL_TIMER_IRQ_Handler+0x80>)
	DeltaContext = now - old; /*intentional wrap around */
 800729c:	1b07      	subs	r7, r0, r4
	if (TimerListHead != NULL)
 800729e:	682b      	ldr	r3, [r5, #0]
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 80072a0:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <UTIL_TIMER_IRQ_Handler+0x30>
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80072a6:	2780      	movs	r7, #128	; 0x80
 80072a8:	007f      	lsls	r7, r7, #1
	while ((TimerListHead != NULL)
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <UTIL_TIMER_IRQ_Handler+0x40>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 80072b0:	6828      	ldr	r0, [r5, #0]
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d11f      	bne.n	80072f6 <UTIL_TIMER_IRQ_Handler+0x6e>
}
 80072b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			if (cur->Timestamp > DeltaContext)
 80072b8:	6819      	ldr	r1, [r3, #0]
				cur->Timestamp = 0;
 80072ba:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 80072bc:	42b9      	cmp	r1, r7
 80072be:	d900      	bls.n	80072c2 <UTIL_TIMER_IRQ_Handler+0x3a>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 80072c0:	1862      	adds	r2, r4, r1
 80072c2:	601a      	str	r2, [r3, #0]
			cur = cur->Next;
 80072c4:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 80072c6:	e7ec      	b.n	80072a2 <UTIL_TIMER_IRQ_Handler+0x1a>
			&& ((TimerListHead->Timestamp == 0U)
 80072c8:	681c      	ldr	r4, [r3, #0]
 80072ca:	2c00      	cmp	r4, #0
 80072cc:	d004      	beq.n	80072d8 <UTIL_TIMER_IRQ_Handler+0x50>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 80072ce:	69b3      	ldr	r3, [r6, #24]
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	4798      	blx	r3
 80072d4:	4284      	cmp	r4, r0
 80072d6:	d2eb      	bcs.n	80072b0 <UTIL_TIMER_IRQ_Handler+0x28>
		cur = TimerListHead;
 80072d8:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 80072da:	6963      	ldr	r3, [r4, #20]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 80072dc:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 80072de:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 80072e4:	68e3      	ldr	r3, [r4, #12]
 80072e6:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80072e8:	8963      	ldrh	r3, [r4, #10]
 80072ea:	42bb      	cmp	r3, r7
 80072ec:	d1dd      	bne.n	80072aa <UTIL_TIMER_IRQ_Handler+0x22>
			(void) UTIL_TIMER_Start(cur);
 80072ee:	0020      	movs	r0, r4
 80072f0:	f7ff ff74 	bl	80071dc <UTIL_TIMER_Start>
 80072f4:	e7d9      	b.n	80072aa <UTIL_TIMER_IRQ_Handler+0x22>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 80072f6:	7a03      	ldrb	r3, [r0, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1dc      	bne.n	80072b6 <UTIL_TIMER_IRQ_Handler+0x2e>
		TimerSetTimeout(TimerListHead);
 80072fc:	f7ff fefe 	bl	80070fc <TimerSetTimeout>
}
 8007300:	e7d9      	b.n	80072b6 <UTIL_TIMER_IRQ_Handler+0x2e>
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	08008664 	.word	0x08008664
 8007308:	2000137c 	.word	0x2000137c

0800730c <UTIL_Set_RTC>:
 * 				- Set RTC
 * 				- Get TimerContext mơi nhất
 * 				- Set lại timer Alarm
 * */
void UTIL_Set_RTC (ST_TIME_FORMAT sTime)
{
 800730c:	b5f0      	push	{r4, r5, r6, r7, lr}
	UTIL_TIMER_Object_t *cur;
	uint32_t old, now, DeltaContext;
	old = UTIL_TimerDriver.GetTimerContext();
 800730e:	4e22      	ldr	r6, [pc, #136]	; (8007398 <UTIL_Set_RTC+0x8c>)
{
 8007310:	b087      	sub	sp, #28
	old = UTIL_TimerDriver.GetTimerContext();
 8007312:	6973      	ldr	r3, [r6, #20]
{
 8007314:	9104      	str	r1, [sp, #16]
 8007316:	9205      	str	r2, [sp, #20]
	old = UTIL_TimerDriver.GetTimerContext();
 8007318:	9301      	str	r3, [sp, #4]
{
 800731a:	9003      	str	r0, [sp, #12]
	old = UTIL_TimerDriver.GetTimerContext();
 800731c:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 800731e:	6933      	ldr	r3, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 8007320:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	4798      	blx	r3
	DeltaContext = now - old; /*intentional wrap around */
	/* update timeStamp based upon new Time Reference*/
	/* because delta context should never exceed 2^32*/
	if (TimerListHead != NULL)
 8007326:	4d1d      	ldr	r5, [pc, #116]	; (800739c <UTIL_Set_RTC+0x90>)
	DeltaContext = now - old; /*intentional wrap around */
 8007328:	1b01      	subs	r1, r0, r4
	if (TimerListHead != NULL)
 800732a:	682b      	ldr	r3, [r5, #0]
		cur = TimerListHead;
		do
		{
			if (cur->Timestamp > DeltaContext)
			{
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800732c:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 800732e:	2b00      	cmp	r3, #0
 8007330:	d110      	bne.n	8007354 <UTIL_Set_RTC+0x48>
		cur = TimerListHead;
		TimerListHead = TimerListHead->Next;
		cur->IsPending = 0;
		cur->IsRunning = 0;
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8007332:	2780      	movs	r7, #128	; 0x80
 8007334:	007f      	lsls	r7, r7, #1
	while ((TimerListHead != NULL)
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d113      	bne.n	8007364 <UTIL_Set_RTC+0x58>
		{
			(void) UTIL_TIMER_Start(cur);   //If period == head ->start -> Then restart again in TimerSetTimeout
		}
	}
    // Set RTC new
	Set_RTC(sTime);
 800733c:	9904      	ldr	r1, [sp, #16]
 800733e:	9a05      	ldr	r2, [sp, #20]
 8007340:	9803      	ldr	r0, [sp, #12]
 8007342:	f7ff fe55 	bl	8006ff0 <Set_RTC>
    //Get Timer Context new
	UTIL_TimerDriver.SetTimerContext();
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	4798      	blx	r3
	/* start the next TimerListHead if it exists and it is not pending*/  //Phai thay doi luon start lai
	if (TimerListHead != NULL)
 800734a:	6828      	ldr	r0, [r5, #0]
 800734c:	2800      	cmp	r0, #0
 800734e:	d120      	bne.n	8007392 <UTIL_Set_RTC+0x86>
	{
		TimerSetTimeout(TimerListHead);
	}
}
 8007350:	b007      	add	sp, #28
 8007352:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (cur->Timestamp > DeltaContext)
 8007354:	6818      	ldr	r0, [r3, #0]
				cur->Timestamp = 0;
 8007356:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 8007358:	4288      	cmp	r0, r1
 800735a:	d900      	bls.n	800735e <UTIL_Set_RTC+0x52>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800735c:	1822      	adds	r2, r4, r0
 800735e:	601a      	str	r2, [r3, #0]
			cur = cur->Next;
 8007360:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 8007362:	e7e4      	b.n	800732e <UTIL_Set_RTC+0x22>
			&& ((TimerListHead->Timestamp == 0U)
 8007364:	681c      	ldr	r4, [r3, #0]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d004      	beq.n	8007374 <UTIL_Set_RTC+0x68>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 800736a:	69b3      	ldr	r3, [r6, #24]
 800736c:	9302      	str	r3, [sp, #8]
 800736e:	4798      	blx	r3
 8007370:	4284      	cmp	r4, r0
 8007372:	d2e3      	bcs.n	800733c <UTIL_Set_RTC+0x30>
		cur = TimerListHead;
 8007374:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 8007376:	6963      	ldr	r3, [r4, #20]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 8007378:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 800737a:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 8007380:	68e3      	ldr	r3, [r4, #12]
 8007382:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8007384:	8963      	ldrh	r3, [r4, #10]
 8007386:	42bb      	cmp	r3, r7
 8007388:	d1d5      	bne.n	8007336 <UTIL_Set_RTC+0x2a>
			(void) UTIL_TIMER_Start(cur);   //If period == head ->start -> Then restart again in TimerSetTimeout
 800738a:	0020      	movs	r0, r4
 800738c:	f7ff ff26 	bl	80071dc <UTIL_TIMER_Start>
 8007390:	e7d1      	b.n	8007336 <UTIL_Set_RTC+0x2a>
		TimerSetTimeout(TimerListHead);
 8007392:	f7ff feb3 	bl	80070fc <TimerSetTimeout>
}
 8007396:	e7db      	b.n	8007350 <UTIL_Set_RTC+0x44>
 8007398:	08008664 	.word	0x08008664
 800739c:	2000137c 	.word	0x2000137c

080073a0 <Reset_Buff>:
}

void Reset_Buff(sData *str)
{
	uint16_t i;
	for (i = 0; i < str->Length_u16; i++)
 80073a0:	2300      	movs	r3, #0
 80073a2:	001a      	movs	r2, r3
 80073a4:	8881      	ldrh	r1, [r0, #4]
 80073a6:	4299      	cmp	r1, r3
 80073a8:	d801      	bhi.n	80073ae <Reset_Buff+0xe>
		*(str->Data_a8 +i ) = 0;
	str->Length_u16 = 0;
 80073aa:	8082      	strh	r2, [r0, #4]
}
 80073ac:	4770      	bx	lr
		*(str->Data_a8 +i ) = 0;
 80073ae:	6801      	ldr	r1, [r0, #0]
 80073b0:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < str->Length_u16; i++)
 80073b2:	3301      	adds	r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	e7f5      	b.n	80073a4 <Reset_Buff+0x4>

080073b8 <Convert_Hex_To_String_Hex>:
    }
    return reVal;
}

void Convert_Hex_To_String_Hex(sData *sTaget, sData *sSource)
{
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t 	Temp_1 = 0;
    uint8_t 	Temp_2 = 0;
    uint16_t 	i = 0;
    for (i = 0; i < sSource->Length_u16; i++)
 80073ba:	2200      	movs	r2, #0
        if (Temp_1 <= 9)
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
        else
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
        //Convert 4 bit sau
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 80073bc:	240f      	movs	r4, #15
    for (i = 0; i < sSource->Length_u16; i++)
 80073be:	888b      	ldrh	r3, [r1, #4]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d802      	bhi.n	80073ca <Convert_Hex_To_String_Hex+0x12>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
        else
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
    }
    //Length gap doi source
    sTaget->Length_u16 = sSource->Length_u16 * 2;
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	8083      	strh	r3, [r0, #4]
}
 80073c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 80073ca:	680b      	ldr	r3, [r1, #0]
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80073cc:	6806      	ldr	r6, [r0, #0]
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 80073ce:	5c9f      	ldrb	r7, [r3, r2]
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80073d0:	0055      	lsls	r5, r2, #1
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 80073d2:	093b      	lsrs	r3, r7, #4
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80073d4:	1976      	adds	r6, r6, r5
        if (Temp_1 <= 9)
 80073d6:	2f9f      	cmp	r7, #159	; 0x9f
 80073d8:	d80e      	bhi.n	80073f8 <Convert_Hex_To_String_Hex+0x40>
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80073da:	3330      	adds	r3, #48	; 0x30
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
 80073dc:	7033      	strb	r3, [r6, #0]
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 80073de:	680b      	ldr	r3, [r1, #0]
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 80073e0:	6806      	ldr	r6, [r0, #0]
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 80073e2:	5c9b      	ldrb	r3, [r3, r2]
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 80073e4:	3501      	adds	r5, #1
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 80073e6:	4023      	ands	r3, r4
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 80073e8:	1975      	adds	r5, r6, r5
        if (Temp_2 <= 9)
 80073ea:	2b09      	cmp	r3, #9
 80073ec:	d806      	bhi.n	80073fc <Convert_Hex_To_String_Hex+0x44>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 80073ee:	3330      	adds	r3, #48	; 0x30
    for (i = 0; i < sSource->Length_u16; i++)
 80073f0:	3201      	adds	r2, #1
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
 80073f2:	702b      	strb	r3, [r5, #0]
    for (i = 0; i < sSource->Length_u16; i++)
 80073f4:	b292      	uxth	r2, r2
 80073f6:	e7e2      	b.n	80073be <Convert_Hex_To_String_Hex+0x6>
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
 80073f8:	3337      	adds	r3, #55	; 0x37
 80073fa:	e7ef      	b.n	80073dc <Convert_Hex_To_String_Hex+0x24>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
 80073fc:	3337      	adds	r3, #55	; 0x37
 80073fe:	e7f7      	b.n	80073f0 <Convert_Hex_To_String_Hex+0x38>

08007400 <UTIL_MEM_set>:

void UTIL_MEM_set( void *dst, uint8_t value, uint16_t size )
{
 8007400:	b510      	push	{r4, lr}
    uint8_t* dst8= (uint8_t *) dst;
    while( size-- )
    {
        *dst8++ = value;
 8007402:	f000 fae8 	bl	80079d6 <memset>
    }
}
 8007406:	bd10      	pop	{r4, pc}

08007408 <LOG>:
uint8_t Convert_Hex_To_StringHex (uint8_t Hex)
{
    return ((Hex /10) *16 + (Hex %10));
}

void LOG(log_level_t level, const char* message, ...){
 8007408:	b40e      	push	{r1, r2, r3}
	va_list args;
	va_start(args, message);
	char buffer[LOG_BUFFER_SIZE];
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800740a:	2196      	movs	r1, #150	; 0x96
void LOG(log_level_t level, const char* message, ...){
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4c1c      	ldr	r4, [pc, #112]	; (8007480 <LOG+0x78>)
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 8007410:	0049      	lsls	r1, r1, #1
void LOG(log_level_t level, const char* message, ...){
 8007412:	44a5      	add	sp, r4
 8007414:	aba7      	add	r3, sp, #668	; 0x29c
 8007416:	cb04      	ldmia	r3!, {r2}
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 8007418:	ad08      	add	r5, sp, #32
void LOG(log_level_t level, const char* message, ...){
 800741a:	0004      	movs	r4, r0
	va_end(args);
	SysTime_t curtime = SysTimeGet();
 800741c:	ae06      	add	r6, sp, #24
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800741e:	0028      	movs	r0, r5
	va_start(args, message);
 8007420:	9305      	str	r3, [sp, #20]
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 8007422:	f000 fb41 	bl	8007aa8 <vsniprintf>
	SysTime_t curtime = SysTimeGet();
 8007426:	0030      	movs	r0, r6
 8007428:	f000 f94c 	bl	80076c4 <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 800742c:	21fa      	movs	r1, #250	; 0xfa
 800742e:	9806      	ldr	r0, [sp, #24]
 8007430:	0089      	lsls	r1, r1, #2
 8007432:	f7f8 ff15 	bl	8000260 <__aeabi_uidivmod>
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <LOG+0x7c>)
 8007438:	000b      	movs	r3, r1
	const char* level_prefix = "";
	const char* level_afterfix = "\r\n";
	switch (level){
 800743a:	2c04      	cmp	r4, #4
 800743c:	d802      	bhi.n	8007444 <LOG+0x3c>
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <LOG+0x80>)
 8007440:	00a4      	lsls	r4, r4, #2
 8007442:	58a2      	ldr	r2, [r4, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s %s %s", second, curtime.SubSeconds, level_prefix, buffer, level_afterfix);
 8007444:	4911      	ldr	r1, [pc, #68]	; (800748c <LOG+0x84>)
 8007446:	9502      	str	r5, [sp, #8]
 8007448:	9103      	str	r1, [sp, #12]
 800744a:	9201      	str	r2, [sp, #4]
 800744c:	2104      	movs	r1, #4
 800744e:	5e72      	ldrsh	r2, [r6, r1]
 8007450:	219e      	movs	r1, #158	; 0x9e
 8007452:	9200      	str	r2, [sp, #0]
 8007454:	0049      	lsls	r1, r1, #1
 8007456:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <LOG+0x88>)
 8007458:	a853      	add	r0, sp, #332	; 0x14c
 800745a:	f000 fac5 	bl	80079e8 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 800745e:	a853      	add	r0, sp, #332	; 0x14c
 8007460:	f7f8 fe52 	bl	8000108 <strlen>
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <LOG+0x8c>)
 8007466:	b282      	uxth	r2, r0
 8007468:	a953      	add	r1, sp, #332	; 0x14c
 800746a:	480b      	ldr	r0, [pc, #44]	; (8007498 <LOG+0x90>)
 800746c:	f7fc f9fa 	bl	8003864 <HAL_UART_Transmit>
}
 8007470:	23a3      	movs	r3, #163	; 0xa3
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	449d      	add	sp, r3
 8007476:	bc70      	pop	{r4, r5, r6}
 8007478:	bc08      	pop	{r3}
 800747a:	b003      	add	sp, #12
 800747c:	4718      	bx	r3
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	fffffd74 	.word	0xfffffd74
 8007484:	0800884b 	.word	0x0800884b
 8007488:	08008690 	.word	0x08008690
 800748c:	08008849 	.word	0x08008849
 8007490:	08008bd3 	.word	0x08008bd3
 8007494:	00002710 	.word	0x00002710
 8007498:	20001220 	.word	0x20001220

0800749c <LOG_Array>:

void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 800749c:	b408      	push	{r3}
 800749e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a0:	000d      	movs	r5, r1
	va_list args;
	va_start(args, message);
	char buffer_mess[LOG_BUFFER_SIZE];
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80074a2:	2196      	movs	r1, #150	; 0x96
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80074a4:	4c28      	ldr	r4, [pc, #160]	; (8007548 <LOG_Array+0xac>)
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80074a6:	0049      	lsls	r1, r1, #1
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80074a8:	44a5      	add	sp, r4
 80074aa:	abf7      	add	r3, sp, #988	; 0x3dc
 80074ac:	9205      	str	r2, [sp, #20]
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80074ae:	af0d      	add	r7, sp, #52	; 0x34
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80074b0:	cb04      	ldmia	r3!, {r2}
 80074b2:	0004      	movs	r4, r0
	va_end(args);
	SysTime_t curtime = SysTimeGet();
 80074b4:	ae07      	add	r6, sp, #28
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80074b6:	0038      	movs	r0, r7
	va_start(args, message);
 80074b8:	9306      	str	r3, [sp, #24]
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80074ba:	f000 faf5 	bl	8007aa8 <vsniprintf>
	SysTime_t curtime = SysTimeGet();
 80074be:	0030      	movs	r0, r6
 80074c0:	f000 f900 	bl	80076c4 <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 80074c4:	21fa      	movs	r1, #250	; 0xfa
 80074c6:	9807      	ldr	r0, [sp, #28]
 80074c8:	0089      	lsls	r1, r1, #2
 80074ca:	f7f8 fec9 	bl	8000260 <__aeabi_uidivmod>
 80074ce:	4a1f      	ldr	r2, [pc, #124]	; (800754c <LOG_Array+0xb0>)
 80074d0:	000b      	movs	r3, r1
	const char* level_prefix = "";
	switch (level){
 80074d2:	2c04      	cmp	r4, #4
 80074d4:	d802      	bhi.n	80074dc <LOG_Array+0x40>
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <LOG_Array+0xb4>)
 80074d8:	00a4      	lsls	r4, r4, #2
 80074da:	58a2      	ldr	r2, [r4, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s %s", second, curtime.SubSeconds, level_prefix, buffer_mess);
 80074dc:	9702      	str	r7, [sp, #8]
 80074de:	9201      	str	r2, [sp, #4]
 80074e0:	2104      	movs	r1, #4
 80074e2:	5e72      	ldrsh	r2, [r6, r1]
 80074e4:	219e      	movs	r1, #158	; 0x9e
 80074e6:	9200      	str	r2, [sp, #0]
 80074e8:	0049      	lsls	r1, r1, #1
 80074ea:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <LOG_Array+0xb8>)
 80074ec:	a8a3      	add	r0, sp, #652	; 0x28c
 80074ee:	f000 fa7b 	bl	80079e8 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 80074f2:	a8a3      	add	r0, sp, #652	; 0x28c
 80074f4:	f7f8 fe08 	bl	8000108 <strlen>
 80074f8:	4e17      	ldr	r6, [pc, #92]	; (8007558 <LOG_Array+0xbc>)
 80074fa:	b282      	uxth	r2, r0
 80074fc:	a9a3      	add	r1, sp, #652	; 0x28c
 80074fe:	0030      	movs	r0, r6
 8007500:	4b16      	ldr	r3, [pc, #88]	; (800755c <LOG_Array+0xc0>)
 8007502:	f7fc f9af 	bl	8003864 <HAL_UART_Transmit>

	uint8_t buffer[LOG_BUFFER_SIZE];
	sData sSoucre = {&pData[0], Length * 2};
 8007506:	9b05      	ldr	r3, [sp, #20]
 8007508:	a909      	add	r1, sp, #36	; 0x24
 800750a:	005c      	lsls	r4, r3, #1
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 800750c:	2396      	movs	r3, #150	; 0x96
 800750e:	a80b      	add	r0, sp, #44	; 0x2c
	sData sSoucre = {&pData[0], Length * 2};
 8007510:	9509      	str	r5, [sp, #36]	; 0x24
 8007512:	b2a4      	uxth	r4, r4
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 8007514:	ad58      	add	r5, sp, #352	; 0x160
 8007516:	005b      	lsls	r3, r3, #1
	sData sSoucre = {&pData[0], Length * 2};
 8007518:	808c      	strh	r4, [r1, #4]
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 800751a:	8083      	strh	r3, [r0, #4]
 800751c:	950b      	str	r5, [sp, #44]	; 0x2c
	Convert_Hex_To_String_Hex(&sTarget, &sSoucre);
 800751e:	f7ff ff4b 	bl	80073b8 <Convert_Hex_To_String_Hex>
	HAL_UART_Transmit(&uart_debug, buffer, Length * 2, LOG_TIMEOUT);
 8007522:	0022      	movs	r2, r4
 8007524:	0029      	movs	r1, r5
 8007526:	0030      	movs	r0, r6
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <LOG_Array+0xc0>)
 800752a:	f7fc f99b 	bl	8003864 <HAL_UART_Transmit>
    HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n" , 2, LOG_TIMEOUT);
 800752e:	2202      	movs	r2, #2
 8007530:	0030      	movs	r0, r6
 8007532:	4b0a      	ldr	r3, [pc, #40]	; (800755c <LOG_Array+0xc0>)
 8007534:	490a      	ldr	r1, [pc, #40]	; (8007560 <LOG_Array+0xc4>)
 8007536:	f7fc f995 	bl	8003864 <HAL_UART_Transmit>
}
 800753a:	23f2      	movs	r3, #242	; 0xf2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	449d      	add	sp, r3
 8007540:	bcf0      	pop	{r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	b001      	add	sp, #4
 8007546:	4718      	bx	r3
 8007548:	fffffc38 	.word	0xfffffc38
 800754c:	0800884b 	.word	0x0800884b
 8007550:	08008690 	.word	0x08008690
 8007554:	08008be7 	.word	0x08008be7
 8007558:	20001220 	.word	0x20001220
 800755c:	00002710 	.word	0x00002710
 8007560:	08008849 	.word	0x08008849

08007564 <LED_ON>:

void LED_ON (eLed_TypeDef Led)
{
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <LED_ON+0x18>)
 8007566:	0042      	lsls	r2, r0, #1
{
 8007568:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 800756a:	189b      	adds	r3, r3, r2
 800756c:	8a99      	ldrh	r1, [r3, #20]
 800756e:	4b04      	ldr	r3, [pc, #16]	; (8007580 <LED_ON+0x1c>)
 8007570:	0080      	lsls	r0, r0, #2
 8007572:	2200      	movs	r2, #0
 8007574:	58c0      	ldr	r0, [r0, r3]
 8007576:	f7fa fb29 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800757a:	bd10      	pop	{r4, pc}
 800757c:	08008690 	.word	0x08008690
 8007580:	20000150 	.word	0x20000150

08007584 <LED_OFF>:

void LED_OFF (eLed_TypeDef Led)
{
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <LED_OFF+0x18>)
 8007586:	0042      	lsls	r2, r0, #1
{
 8007588:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 800758a:	189b      	adds	r3, r3, r2
 800758c:	8a99      	ldrh	r1, [r3, #20]
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <LED_OFF+0x1c>)
 8007590:	0080      	lsls	r0, r0, #2
 8007592:	2201      	movs	r2, #1
 8007594:	58c0      	ldr	r0, [r0, r3]
 8007596:	f7fa fb19 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800759a:	bd10      	pop	{r4, pc}
 800759c:	08008690 	.word	0x08008690
 80075a0:	20000150 	.word	0x20000150

080075a4 <LED_TOGGLE>:

void LED_TOGGLE (eLed_TypeDef Led)
{
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <LED_TOGGLE+0x18>)
 80075a6:	0042      	lsls	r2, r0, #1
{
 80075a8:	b510      	push	{r4, lr}
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 80075aa:	189b      	adds	r3, r3, r2
 80075ac:	8a99      	ldrh	r1, [r3, #20]
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <LED_TOGGLE+0x1c>)
 80075b0:	0080      	lsls	r0, r0, #2
 80075b2:	58c0      	ldr	r0, [r0, r3]
 80075b4:	f7fa fb10 	bl	8001bd8 <HAL_GPIO_TogglePin>
}
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	08008690 	.word	0x08008690
 80075c0:	20000150 	.word	0x20000150

080075c4 <TRACE_UnLock>:
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80075c4:	4a02      	ldr	r2, [pc, #8]	; (80075d0 <TRACE_UnLock+0xc>)
 80075c6:	8ad3      	ldrh	r3, [r2, #22]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	82d3      	strh	r3, [r2, #22]
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80075cc:	4770      	bx	lr
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	20001394 	.word	0x20001394

080075d4 <UTIL_ADV_TRACE_Init>:
{
 80075d4:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80075d6:	2218      	movs	r2, #24
 80075d8:	2100      	movs	r1, #0
 80075da:	4807      	ldr	r0, [pc, #28]	; (80075f8 <UTIL_ADV_TRACE_Init+0x24>)
 80075dc:	f000 f86d 	bl	80076ba <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80075e0:	2280      	movs	r2, #128	; 0x80
 80075e2:	2100      	movs	r1, #0
 80075e4:	4805      	ldr	r0, [pc, #20]	; (80075fc <UTIL_ADV_TRACE_Init+0x28>)
 80075e6:	0092      	lsls	r2, r2, #2
 80075e8:	f000 f867 	bl	80076ba <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <UTIL_ADV_TRACE_Init+0x2c>)
 80075ee:	4805      	ldr	r0, [pc, #20]	; (8007604 <UTIL_ADV_TRACE_Init+0x30>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4798      	blx	r3
}
 80075f4:	bd10      	pop	{r4, pc}
 80075f6:	46c0      	nop			; (mov r8, r8)
 80075f8:	20001394 	.word	0x20001394
 80075fc:	200014ac 	.word	0x200014ac
 8007600:	08008358 	.word	0x08008358
 8007604:	08007621 	.word	0x08007621

08007608 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8007608:	4b01      	ldr	r3, [pc, #4]	; (8007610 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800760a:	6058      	str	r0, [r3, #4]
}
 800760c:	4770      	bx	lr
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20001394 	.word	0x20001394

08007614 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8007616:	7218      	strb	r0, [r3, #8]
}
 8007618:	4770      	bx	lr
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	20001394 	.word	0x20001394

08007620 <TRACE_TxCpltCallback>:
{
 8007620:	b513      	push	{r0, r1, r4, lr}
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8007622:	4b1e      	ldr	r3, [pc, #120]	; (800769c <TRACE_TxCpltCallback+0x7c>)
 8007624:	789a      	ldrb	r2, [r3, #2]
 8007626:	2a02      	cmp	r2, #2
 8007628:	d11e      	bne.n	8007668 <TRACE_TxCpltCallback+0x48>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800762a:	2200      	movs	r2, #0
 800762c:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800762e:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8007630:	8a1c      	ldrh	r4, [r3, #16]
 8007632:	8a59      	ldrh	r1, [r3, #18]
 8007634:	428c      	cmp	r4, r1
 8007636:	d02b      	beq.n	8007690 <TRACE_TxCpltCallback+0x70>
 8007638:	8ada      	ldrh	r2, [r3, #22]
 800763a:	2a01      	cmp	r2, #1
 800763c:	d128      	bne.n	8007690 <TRACE_TxCpltCallback+0x70>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800763e:	7898      	ldrb	r0, [r3, #2]
 8007640:	2801      	cmp	r0, #1
 8007642:	d117      	bne.n	8007674 <TRACE_TxCpltCallback+0x54>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007644:	3001      	adds	r0, #1
 8007646:	7098      	strb	r0, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007648:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800764a:	881a      	ldrh	r2, [r3, #0]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800764c:	8018      	strh	r0, [r3, #0]
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800764e:	1b12      	subs	r2, r2, r4
 8007650:	b292      	uxth	r2, r2
 8007652:	829a      	strh	r2, [r3, #20]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8007654:	4282      	cmp	r2, r0
 8007656:	d10f      	bne.n	8007678 <TRACE_TxCpltCallback+0x58>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007658:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800765a:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800765c:	8a1a      	ldrh	r2, [r3, #16]
 800765e:	4291      	cmp	r1, r2
 8007660:	d913      	bls.n	800768a <TRACE_TxCpltCallback+0x6a>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007662:	1a89      	subs	r1, r1, r2
 8007664:	8299      	strh	r1, [r3, #20]
 8007666:	e007      	b.n	8007678 <TRACE_TxCpltCallback+0x58>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007668:	8a1a      	ldrh	r2, [r3, #16]
 800766a:	8a99      	ldrh	r1, [r3, #20]
 800766c:	1852      	adds	r2, r2, r1
 800766e:	05d2      	lsls	r2, r2, #23
 8007670:	0dd2      	lsrs	r2, r2, #23
 8007672:	e7dc      	b.n	800762e <TRACE_TxCpltCallback+0xe>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8007674:	2800      	cmp	r0, #0
 8007676:	d0f1      	beq.n	800765c <TRACE_TxCpltCallback+0x3c>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8007678:	8a18      	ldrh	r0, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800767a:	8a99      	ldrh	r1, [r3, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800767c:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <TRACE_TxCpltCallback+0x80>)
 800767e:	18c0      	adds	r0, r0, r3
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <TRACE_TxCpltCallback+0x84>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	4798      	blx	r3
}
 8007688:	bd13      	pop	{r0, r1, r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800768a:	2180      	movs	r1, #128	; 0x80
 800768c:	0089      	lsls	r1, r1, #2
 800768e:	e7e8      	b.n	8007662 <TRACE_TxCpltCallback+0x42>
    UTIL_ADV_TRACE_PostSendHook();
 8007690:	f7f9 fa1a 	bl	8000ac8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8007694:	f7ff ff96 	bl	80075c4 <TRACE_UnLock>
}
 8007698:	e7f6      	b.n	8007688 <TRACE_TxCpltCallback+0x68>
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	20001394 	.word	0x20001394
 80076a0:	200014ac 	.word	0x200014ac
 80076a4:	08008358 	.word	0x08008358

080076a8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80076a8:	2300      	movs	r3, #0
{
 80076aa:	b510      	push	{r4, lr}
  while( size-- )
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d100      	bne.n	80076b2 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 80076b0:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 80076b2:	5ccc      	ldrb	r4, [r1, r3]
 80076b4:	54c4      	strb	r4, [r0, r3]
 80076b6:	3301      	adds	r3, #1
 80076b8:	e7f8      	b.n	80076ac <UTIL_MEM_cpy_8+0x4>

080076ba <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80076ba:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 80076bc:	f000 f98b 	bl	80079d6 <memset>
  }
}
 80076c0:	bd10      	pop	{r4, pc}
	...

080076c4 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 80076c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80076c6:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80076c8:	4e12      	ldr	r6, [pc, #72]	; (8007714 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80076ca:	aa02      	add	r2, sp, #8
 80076cc:	8093      	strh	r3, [r2, #4]
 80076ce:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80076d0:	6933      	ldr	r3, [r6, #16]
{
 80076d2:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80076d4:	a803      	add	r0, sp, #12
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80076da:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80076dc:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80076e2:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80076e4:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 80076ea:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 80076ec:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 80076ee:	0089      	lsls	r1, r1, #2
  c.Seconds = a.Seconds + b.Seconds;
 80076f0:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80076f2:	ab02      	add	r3, sp, #8
 80076f4:	889b      	ldrh	r3, [r3, #4]
 80076f6:	195b      	adds	r3, r3, r5
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 80076fc:	428b      	cmp	r3, r1
 80076fe:	db03      	blt.n	8007708 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <SysTimeGet+0x54>)
    c.Seconds++;
 8007702:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 8007704:	18d2      	adds	r2, r2, r3
 8007706:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 8007708:	6020      	str	r0, [r4, #0]
}
 800770a:	0020      	movs	r0, r4
  return sysTime;
 800770c:	80a3      	strh	r3, [r4, #4]
}
 800770e:	b004      	add	sp, #16
 8007710:	bd70      	pop	{r4, r5, r6, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	08008650 	.word	0x08008650
 8007718:	fffffc18 	.word	0xfffffc18

0800771c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800771c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771e:	b09d      	sub	sp, #116	; 0x74
 8007720:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8007722:	2000      	movs	r0, #0
{
 8007724:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007726:	9f02      	ldr	r7, [sp, #8]
{
 8007728:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800772a:	4281      	cmp	r1, r0
 800772c:	dc0a      	bgt.n	8007744 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800772e:	b01d      	add	sp, #116	; 0x74
 8007730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8007732:	4298      	cmp	r0, r3
 8007734:	da0d      	bge.n	8007752 <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 8007736:	2925      	cmp	r1, #37	; 0x25
 8007738:	d00e      	beq.n	8007758 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800773a:	7039      	strb	r1, [r7, #0]
      continue;
 800773c:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800773e:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007740:	9a01      	ldr	r2, [sp, #4]
 8007742:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 8007744:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007746:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 8007748:	1af8      	subs	r0, r7, r3
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800774e:	2900      	cmp	r1, #0
 8007750:	d1ef      	bne.n	8007732 <tiny_vsnprintf_like+0x16>
  *str = '\0';
 8007752:	2300      	movs	r3, #0
 8007754:	703b      	strb	r3, [r7, #0]
  return str - buf;
 8007756:	e7ea      	b.n	800772e <tiny_vsnprintf_like+0x12>
    fmt++;
 8007758:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800775a:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800775c:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800775e:	0010      	movs	r0, r2
 8007760:	3830      	subs	r0, #48	; 0x30
 8007762:	9204      	str	r2, [sp, #16]
 8007764:	4241      	negs	r1, r0
 8007766:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 8007768:	b2c0      	uxtb	r0, r0
      flags |= ZEROPAD;
 800776a:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800776c:	2809      	cmp	r0, #9
 800776e:	d92e      	bls.n	80077ce <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 8007770:	2001      	movs	r0, #1
 8007772:	4240      	negs	r0, r0
 8007774:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 8007776:	9801      	ldr	r0, [sp, #4]
 8007778:	7800      	ldrb	r0, [r0, #0]
 800777a:	2869      	cmp	r0, #105	; 0x69
 800777c:	d100      	bne.n	8007780 <tiny_vsnprintf_like+0x64>
 800777e:	e0a4      	b.n	80078ca <tiny_vsnprintf_like+0x1ae>
 8007780:	d829      	bhi.n	80077d6 <tiny_vsnprintf_like+0xba>
 8007782:	2863      	cmp	r0, #99	; 0x63
 8007784:	d038      	beq.n	80077f8 <tiny_vsnprintf_like+0xdc>
 8007786:	2864      	cmp	r0, #100	; 0x64
 8007788:	d100      	bne.n	800778c <tiny_vsnprintf_like+0x70>
 800778a:	e09e      	b.n	80078ca <tiny_vsnprintf_like+0x1ae>
 800778c:	2858      	cmp	r0, #88	; 0x58
 800778e:	d066      	beq.n	800785e <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 8007790:	0039      	movs	r1, r7
 8007792:	2825      	cmp	r0, #37	; 0x25
 8007794:	d126      	bne.n	80077e4 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 8007796:	9801      	ldr	r0, [sp, #4]
 8007798:	7800      	ldrb	r0, [r0, #0]
 800779a:	2800      	cmp	r0, #0
 800779c:	d100      	bne.n	80077a0 <tiny_vsnprintf_like+0x84>
 800779e:	e098      	b.n	80078d2 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 80077a0:	1c4f      	adds	r7, r1, #1
 80077a2:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 80077a4:	9902      	ldr	r1, [sp, #8]
 80077a6:	1a79      	subs	r1, r7, r1
 80077a8:	4299      	cmp	r1, r3
 80077aa:	db00      	blt.n	80077ae <tiny_vsnprintf_like+0x92>
 80077ac:	e08f      	b.n	80078ce <tiny_vsnprintf_like+0x1b2>
 80077ae:	e7c7      	b.n	8007740 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80077b0:	9d01      	ldr	r5, [sp, #4]
 80077b2:	3501      	adds	r5, #1
 80077b4:	9501      	str	r5, [sp, #4]
 80077b6:	9d00      	ldr	r5, [sp, #0]
 80077b8:	4375      	muls	r5, r6
 80077ba:	1828      	adds	r0, r5, r0
 80077bc:	3830      	subs	r0, #48	; 0x30
 80077be:	9000      	str	r0, [sp, #0]
 80077c0:	9801      	ldr	r0, [sp, #4]
 80077c2:	7800      	ldrb	r0, [r0, #0]
 80077c4:	0005      	movs	r5, r0
 80077c6:	3d30      	subs	r5, #48	; 0x30
 80077c8:	2d09      	cmp	r5, #9
 80077ca:	d9f1      	bls.n	80077b0 <tiny_vsnprintf_like+0x94>
 80077cc:	e7d3      	b.n	8007776 <tiny_vsnprintf_like+0x5a>
  int i = 0;
 80077ce:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80077d0:	260a      	movs	r6, #10
  int i = 0;
 80077d2:	9000      	str	r0, [sp, #0]
 80077d4:	e7f4      	b.n	80077c0 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 80077d6:	2875      	cmp	r0, #117	; 0x75
 80077d8:	d079      	beq.n	80078ce <tiny_vsnprintf_like+0x1b2>
 80077da:	2510      	movs	r5, #16
 80077dc:	2878      	cmp	r0, #120	; 0x78
 80077de:	d041      	beq.n	8007864 <tiny_vsnprintf_like+0x148>
 80077e0:	2873      	cmp	r0, #115	; 0x73
 80077e2:	d01d      	beq.n	8007820 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80077e4:	2025      	movs	r0, #37	; 0x25
 80077e6:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 80077e8:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 80077ea:	1c79      	adds	r1, r7, #1
 80077ec:	000f      	movs	r7, r1
    base = 10;
 80077ee:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 80077f0:	1a08      	subs	r0, r1, r0
 80077f2:	4298      	cmp	r0, r3
 80077f4:	da36      	bge.n	8007864 <tiny_vsnprintf_like+0x148>
 80077f6:	e7ce      	b.n	8007796 <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 80077f8:	2500      	movs	r5, #0
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	42ab      	cmp	r3, r5
 80077fe:	dd00      	ble.n	8007802 <tiny_vsnprintf_like+0xe6>
 8007800:	1e5d      	subs	r5, r3, #1
 8007802:	002a      	movs	r2, r5
 8007804:	2120      	movs	r1, #32
 8007806:	0038      	movs	r0, r7
 8007808:	f000 f8e5 	bl	80079d6 <memset>
 800780c:	9a00      	ldr	r2, [sp, #0]
 800780e:	2301      	movs	r3, #1
 8007810:	197d      	adds	r5, r7, r5
 8007812:	2a00      	cmp	r2, #0
 8007814:	dd00      	ble.n	8007818 <tiny_vsnprintf_like+0xfc>
 8007816:	0013      	movs	r3, r2
 8007818:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800781a:	cc08      	ldmia	r4!, {r3}
 800781c:	702b      	strb	r3, [r5, #0]
        continue;
 800781e:	e78f      	b.n	8007740 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 8007820:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 8007822:	2e00      	cmp	r6, #0
 8007824:	d100      	bne.n	8007828 <tiny_vsnprintf_like+0x10c>
 8007826:	4e4f      	ldr	r6, [pc, #316]	; (8007964 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 8007828:	0030      	movs	r0, r6
 800782a:	f7f8 fc6d 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800782e:	2300      	movs	r3, #0
 8007830:	9303      	str	r3, [sp, #12]
 8007832:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 8007834:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 8007836:	4283      	cmp	r3, r0
 8007838:	db01      	blt.n	800783e <tiny_vsnprintf_like+0x122>
 800783a:	1a1b      	subs	r3, r3, r0
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	0038      	movs	r0, r7
 8007840:	2120      	movs	r1, #32
 8007842:	9a03      	ldr	r2, [sp, #12]
 8007844:	f000 f8c7 	bl	80079d6 <memset>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800784c:	2300      	movs	r3, #0
 800784e:	42ab      	cmp	r3, r5
 8007850:	db01      	blt.n	8007856 <tiny_vsnprintf_like+0x13a>
 8007852:	197f      	adds	r7, r7, r5
 8007854:	e774      	b.n	8007740 <tiny_vsnprintf_like+0x24>
 8007856:	5cf2      	ldrb	r2, [r6, r3]
 8007858:	54fa      	strb	r2, [r7, r3]
 800785a:	3301      	adds	r3, #1
 800785c:	e7f7      	b.n	800784e <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800785e:	2240      	movs	r2, #64	; 0x40
        base = 16;
 8007860:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 8007862:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007864:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 8007866:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007868:	1a3e      	subs	r6, r7, r0
 800786a:	0020      	movs	r0, r4
 800786c:	1b9e      	subs	r6, r3, r6
 800786e:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 8007870:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007872:	9005      	str	r0, [sp, #20]
  if (type & UPPERCASE)  dig = upper_digits;
 8007874:	483c      	ldr	r0, [pc, #240]	; (8007968 <tiny_vsnprintf_like+0x24c>)
 8007876:	9007      	str	r0, [sp, #28]
 8007878:	2040      	movs	r0, #64	; 0x40
 800787a:	4202      	tst	r2, r0
 800787c:	d101      	bne.n	8007882 <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800787e:	4a3b      	ldr	r2, [pc, #236]	; (800796c <tiny_vsnprintf_like+0x250>)
 8007880:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 8007882:	2230      	movs	r2, #48	; 0x30
 8007884:	9208      	str	r2, [sp, #32]
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	2a30      	cmp	r2, #48	; 0x30
 800788a:	d001      	beq.n	8007890 <tiny_vsnprintf_like+0x174>
 800788c:	2220      	movs	r2, #32
 800788e:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 8007890:	2900      	cmp	r1, #0
 8007892:	d023      	beq.n	80078dc <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 8007894:	2b00      	cmp	r3, #0
 8007896:	da21      	bge.n	80078dc <tiny_vsnprintf_like+0x1c0>
      size--;
 8007898:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800789a:	425b      	negs	r3, r3
      size--;
 800789c:	3a01      	subs	r2, #1
 800789e:	9200      	str	r2, [sp, #0]
      sign = '-';
 80078a0:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 80078a2:	2400      	movs	r4, #0
 80078a4:	9203      	str	r2, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80078a6:	0018      	movs	r0, r3
 80078a8:	0029      	movs	r1, r5
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	f7f8 fcd8 	bl	8000260 <__aeabi_uidivmod>
 80078b0:	0022      	movs	r2, r4
 80078b2:	4684      	mov	ip, r0
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	3401      	adds	r4, #1
 80078b8:	5c59      	ldrb	r1, [r3, r1]
 80078ba:	ab0b      	add	r3, sp, #44	; 0x2c
 80078bc:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 80078be:	9a06      	ldr	r2, [sp, #24]
 80078c0:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 80078c2:	4663      	mov	r3, ip
    while (num != 0)
 80078c4:	4295      	cmp	r5, r2
 80078c6:	d9ee      	bls.n	80078a6 <tiny_vsnprintf_like+0x18a>
 80078c8:	e011      	b.n	80078ee <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 80078ca:	2202      	movs	r2, #2
 80078cc:	430a      	orrs	r2, r1
    base = 10;
 80078ce:	250a      	movs	r5, #10
 80078d0:	e7c8      	b.n	8007864 <tiny_vsnprintf_like+0x148>
          --fmt;
 80078d2:	9801      	ldr	r0, [sp, #4]
 80078d4:	000f      	movs	r7, r1
 80078d6:	3801      	subs	r0, #1
 80078d8:	9001      	str	r0, [sp, #4]
 80078da:	e763      	b.n	80077a4 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <tiny_vsnprintf_like+0x1c8>
 80078e0:	2200      	movs	r2, #0
 80078e2:	e7de      	b.n	80078a2 <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 80078e4:	2130      	movs	r1, #48	; 0x30
 80078e6:	2001      	movs	r0, #1
 80078e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80078ea:	7011      	strb	r1, [r2, #0]
 80078ec:	9303      	str	r3, [sp, #12]
  size -= precision;
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	2b30      	cmp	r3, #48	; 0x30
 80078f6:	d006      	beq.n	8007906 <tiny_vsnprintf_like+0x1ea>
 80078f8:	003b      	movs	r3, r7
 80078fa:	2220      	movs	r2, #32
 80078fc:	0021      	movs	r1, r4
 80078fe:	001f      	movs	r7, r3
 8007900:	3c01      	subs	r4, #1
 8007902:	2900      	cmp	r1, #0
 8007904:	dc0c      	bgt.n	8007920 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <tiny_vsnprintf_like+0x1fc>
 800790c:	1c79      	adds	r1, r7, #1
 800790e:	3e01      	subs	r6, #1
 8007910:	703b      	strb	r3, [r7, #0]
 8007912:	000f      	movs	r7, r1
 8007914:	2e00      	cmp	r6, #0
 8007916:	d009      	beq.n	800792c <tiny_vsnprintf_like+0x210>
 8007918:	003b      	movs	r3, r7
 800791a:	0032      	movs	r2, r6
 800791c:	1ba4      	subs	r4, r4, r6
 800791e:	e00f      	b.n	8007940 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007920:	3301      	adds	r3, #1
 8007922:	3e01      	subs	r6, #1
 8007924:	0019      	movs	r1, r3
 8007926:	703a      	strb	r2, [r7, #0]
 8007928:	2e00      	cmp	r6, #0
 800792a:	d1e7      	bne.n	80078fc <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800792c:	000f      	movs	r7, r1
 800792e:	9c05      	ldr	r4, [sp, #20]
 8007930:	e706      	b.n	8007740 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 8007932:	9e08      	ldr	r6, [sp, #32]
 8007934:	3301      	adds	r3, #1
 8007936:	3a01      	subs	r2, #1
 8007938:	0019      	movs	r1, r3
 800793a:	702e      	strb	r6, [r5, #0]
 800793c:	2a00      	cmp	r2, #0
 800793e:	d0f5      	beq.n	800792c <tiny_vsnprintf_like+0x210>
 8007940:	18a1      	adds	r1, r4, r2
 8007942:	001d      	movs	r5, r3
 8007944:	2900      	cmp	r1, #0
 8007946:	dcf4      	bgt.n	8007932 <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8007948:	ad0b      	add	r5, sp, #44	; 0x2c
 800794a:	189a      	adds	r2, r3, r2
 800794c:	001c      	movs	r4, r3
 800794e:	3801      	subs	r0, #1
 8007950:	d201      	bcs.n	8007956 <tiny_vsnprintf_like+0x23a>
 8007952:	0019      	movs	r1, r3
 8007954:	e7ea      	b.n	800792c <tiny_vsnprintf_like+0x210>
 8007956:	5d46      	ldrb	r6, [r0, r5]
 8007958:	3301      	adds	r3, #1
 800795a:	0019      	movs	r1, r3
 800795c:	7026      	strb	r6, [r4, #0]
 800795e:	4293      	cmp	r3, r2
 8007960:	d1f4      	bne.n	800794c <tiny_vsnprintf_like+0x230>
 8007962:	e7e3      	b.n	800792c <tiny_vsnprintf_like+0x210>
 8007964:	08008c25 	.word	0x08008c25
 8007968:	08008c2c 	.word	0x08008c2c
 800796c:	08008c51 	.word	0x08008c51

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	; (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	20000160 	.word	0x20000160

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	2600      	movs	r6, #0
 8007980:	4d0c      	ldr	r5, [pc, #48]	; (80079b4 <__libc_init_array+0x38>)
 8007982:	4c0d      	ldr	r4, [pc, #52]	; (80079b8 <__libc_init_array+0x3c>)
 8007984:	1b64      	subs	r4, r4, r5
 8007986:	10a4      	asrs	r4, r4, #2
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	2600      	movs	r6, #0
 800798e:	f000 fcd7 	bl	8008340 <_init>
 8007992:	4d0a      	ldr	r5, [pc, #40]	; (80079bc <__libc_init_array+0x40>)
 8007994:	4c0a      	ldr	r4, [pc, #40]	; (80079c0 <__libc_init_array+0x44>)
 8007996:	1b64      	subs	r4, r4, r5
 8007998:	10a4      	asrs	r4, r4, #2
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	00b3      	lsls	r3, r6, #2
 80079a2:	58eb      	ldr	r3, [r5, r3]
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	00b3      	lsls	r3, r6, #2
 80079ac:	58eb      	ldr	r3, [r5, r3]
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	08008cb4 	.word	0x08008cb4
 80079b8:	08008cb4 	.word	0x08008cb4
 80079bc:	08008cb4 	.word	0x08008cb4
 80079c0:	08008cb8 	.word	0x08008cb8

080079c4 <memcpy>:
 80079c4:	2300      	movs	r3, #0
 80079c6:	b510      	push	{r4, lr}
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d100      	bne.n	80079ce <memcpy+0xa>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	5ccc      	ldrb	r4, [r1, r3]
 80079d0:	54c4      	strb	r4, [r0, r3]
 80079d2:	3301      	adds	r3, #1
 80079d4:	e7f8      	b.n	80079c8 <memcpy+0x4>

080079d6 <memset>:
 80079d6:	0003      	movs	r3, r0
 80079d8:	1882      	adds	r2, r0, r2
 80079da:	4293      	cmp	r3, r2
 80079dc:	d100      	bne.n	80079e0 <memset+0xa>
 80079de:	4770      	bx	lr
 80079e0:	7019      	strb	r1, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	e7f9      	b.n	80079da <memset+0x4>
	...

080079e8 <sniprintf>:
 80079e8:	b40c      	push	{r2, r3}
 80079ea:	b530      	push	{r4, r5, lr}
 80079ec:	4b17      	ldr	r3, [pc, #92]	; (8007a4c <sniprintf+0x64>)
 80079ee:	000c      	movs	r4, r1
 80079f0:	681d      	ldr	r5, [r3, #0]
 80079f2:	b09d      	sub	sp, #116	; 0x74
 80079f4:	2900      	cmp	r1, #0
 80079f6:	da08      	bge.n	8007a0a <sniprintf+0x22>
 80079f8:	238b      	movs	r3, #139	; 0x8b
 80079fa:	2001      	movs	r0, #1
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	4240      	negs	r0, r0
 8007a00:	b01d      	add	sp, #116	; 0x74
 8007a02:	bc30      	pop	{r4, r5}
 8007a04:	bc08      	pop	{r3}
 8007a06:	b002      	add	sp, #8
 8007a08:	4718      	bx	r3
 8007a0a:	2382      	movs	r3, #130	; 0x82
 8007a0c:	466a      	mov	r2, sp
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	8293      	strh	r3, [r2, #20]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9002      	str	r0, [sp, #8]
 8007a16:	9006      	str	r0, [sp, #24]
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	d000      	beq.n	8007a1e <sniprintf+0x36>
 8007a1c:	1e4b      	subs	r3, r1, #1
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	9307      	str	r3, [sp, #28]
 8007a22:	2301      	movs	r3, #1
 8007a24:	466a      	mov	r2, sp
 8007a26:	425b      	negs	r3, r3
 8007a28:	82d3      	strh	r3, [r2, #22]
 8007a2a:	0028      	movs	r0, r5
 8007a2c:	ab21      	add	r3, sp, #132	; 0x84
 8007a2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a30:	a902      	add	r1, sp, #8
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	f000 f8a6 	bl	8007b84 <_svfiprintf_r>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	da01      	bge.n	8007a40 <sniprintf+0x58>
 8007a3c:	238b      	movs	r3, #139	; 0x8b
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	d0dd      	beq.n	8007a00 <sniprintf+0x18>
 8007a44:	2300      	movs	r3, #0
 8007a46:	9a02      	ldr	r2, [sp, #8]
 8007a48:	7013      	strb	r3, [r2, #0]
 8007a4a:	e7d9      	b.n	8007a00 <sniprintf+0x18>
 8007a4c:	20000160 	.word	0x20000160

08007a50 <_vsniprintf_r>:
 8007a50:	b530      	push	{r4, r5, lr}
 8007a52:	0014      	movs	r4, r2
 8007a54:	0005      	movs	r5, r0
 8007a56:	001a      	movs	r2, r3
 8007a58:	b09b      	sub	sp, #108	; 0x6c
 8007a5a:	2c00      	cmp	r4, #0
 8007a5c:	da05      	bge.n	8007a6a <_vsniprintf_r+0x1a>
 8007a5e:	238b      	movs	r3, #139	; 0x8b
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	2001      	movs	r0, #1
 8007a64:	4240      	negs	r0, r0
 8007a66:	b01b      	add	sp, #108	; 0x6c
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	2382      	movs	r3, #130	; 0x82
 8007a6c:	4668      	mov	r0, sp
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	8183      	strh	r3, [r0, #12]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9100      	str	r1, [sp, #0]
 8007a76:	9104      	str	r1, [sp, #16]
 8007a78:	429c      	cmp	r4, r3
 8007a7a:	d000      	beq.n	8007a7e <_vsniprintf_r+0x2e>
 8007a7c:	1e63      	subs	r3, r4, #1
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	2301      	movs	r3, #1
 8007a84:	4669      	mov	r1, sp
 8007a86:	425b      	negs	r3, r3
 8007a88:	81cb      	strh	r3, [r1, #14]
 8007a8a:	0028      	movs	r0, r5
 8007a8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a8e:	f000 f879 	bl	8007b84 <_svfiprintf_r>
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	da01      	bge.n	8007a9a <_vsniprintf_r+0x4a>
 8007a96:	238b      	movs	r3, #139	; 0x8b
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	2c00      	cmp	r4, #0
 8007a9c:	d0e3      	beq.n	8007a66 <_vsniprintf_r+0x16>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9a00      	ldr	r2, [sp, #0]
 8007aa2:	7013      	strb	r3, [r2, #0]
 8007aa4:	e7df      	b.n	8007a66 <_vsniprintf_r+0x16>
	...

08007aa8 <vsniprintf>:
 8007aa8:	b507      	push	{r0, r1, r2, lr}
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	0013      	movs	r3, r2
 8007aae:	000a      	movs	r2, r1
 8007ab0:	0001      	movs	r1, r0
 8007ab2:	4802      	ldr	r0, [pc, #8]	; (8007abc <vsniprintf+0x14>)
 8007ab4:	6800      	ldr	r0, [r0, #0]
 8007ab6:	f7ff ffcb 	bl	8007a50 <_vsniprintf_r>
 8007aba:	bd0e      	pop	{r1, r2, r3, pc}
 8007abc:	20000160 	.word	0x20000160

08007ac0 <__ssputs_r>:
 8007ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac2:	688e      	ldr	r6, [r1, #8]
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	0007      	movs	r7, r0
 8007ac8:	000c      	movs	r4, r1
 8007aca:	9203      	str	r2, [sp, #12]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	d83c      	bhi.n	8007b4c <__ssputs_r+0x8c>
 8007ad2:	2390      	movs	r3, #144	; 0x90
 8007ad4:	898a      	ldrh	r2, [r1, #12]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	421a      	tst	r2, r3
 8007ada:	d034      	beq.n	8007b46 <__ssputs_r+0x86>
 8007adc:	6909      	ldr	r1, [r1, #16]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	6960      	ldr	r0, [r4, #20]
 8007ae2:	1a5b      	subs	r3, r3, r1
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	4343      	muls	r3, r0
 8007aea:	0fdd      	lsrs	r5, r3, #31
 8007aec:	18ed      	adds	r5, r5, r3
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	9802      	ldr	r0, [sp, #8]
 8007af2:	3301      	adds	r3, #1
 8007af4:	181b      	adds	r3, r3, r0
 8007af6:	106d      	asrs	r5, r5, #1
 8007af8:	42ab      	cmp	r3, r5
 8007afa:	d900      	bls.n	8007afe <__ssputs_r+0x3e>
 8007afc:	001d      	movs	r5, r3
 8007afe:	0553      	lsls	r3, r2, #21
 8007b00:	d532      	bpl.n	8007b68 <__ssputs_r+0xa8>
 8007b02:	0029      	movs	r1, r5
 8007b04:	0038      	movs	r0, r7
 8007b06:	f000 fb49 	bl	800819c <_malloc_r>
 8007b0a:	1e06      	subs	r6, r0, #0
 8007b0c:	d109      	bne.n	8007b22 <__ssputs_r+0x62>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	2340      	movs	r3, #64	; 0x40
 8007b14:	2001      	movs	r0, #1
 8007b16:	89a2      	ldrh	r2, [r4, #12]
 8007b18:	4240      	negs	r0, r0
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	b005      	add	sp, #20
 8007b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b22:	9a02      	ldr	r2, [sp, #8]
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	f7ff ff4d 	bl	80079c4 <memcpy>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <__ssputs_r+0xc0>)
 8007b2e:	401a      	ands	r2, r3
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	4313      	orrs	r3, r2
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	6126      	str	r6, [r4, #16]
 8007b3a:	18f6      	adds	r6, r6, r3
 8007b3c:	6026      	str	r6, [r4, #0]
 8007b3e:	6165      	str	r5, [r4, #20]
 8007b40:	9e01      	ldr	r6, [sp, #4]
 8007b42:	1aed      	subs	r5, r5, r3
 8007b44:	60a5      	str	r5, [r4, #8]
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	429e      	cmp	r6, r3
 8007b4a:	d900      	bls.n	8007b4e <__ssputs_r+0x8e>
 8007b4c:	9e01      	ldr	r6, [sp, #4]
 8007b4e:	0032      	movs	r2, r6
 8007b50:	9903      	ldr	r1, [sp, #12]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	f000 faa3 	bl	800809e <memmove>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	1b9b      	subs	r3, r3, r6
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	199e      	adds	r6, r3, r6
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	e7da      	b.n	8007b1e <__ssputs_r+0x5e>
 8007b68:	002a      	movs	r2, r5
 8007b6a:	0038      	movs	r0, r7
 8007b6c:	f000 fb8c 	bl	8008288 <_realloc_r>
 8007b70:	1e06      	subs	r6, r0, #0
 8007b72:	d1e0      	bne.n	8007b36 <__ssputs_r+0x76>
 8007b74:	0038      	movs	r0, r7
 8007b76:	6921      	ldr	r1, [r4, #16]
 8007b78:	f000 faa4 	bl	80080c4 <_free_r>
 8007b7c:	e7c7      	b.n	8007b0e <__ssputs_r+0x4e>
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	fffffb7f 	.word	0xfffffb7f

08007b84 <_svfiprintf_r>:
 8007b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b86:	b0a1      	sub	sp, #132	; 0x84
 8007b88:	9003      	str	r0, [sp, #12]
 8007b8a:	001d      	movs	r5, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	000f      	movs	r7, r1
 8007b90:	0016      	movs	r6, r2
 8007b92:	061b      	lsls	r3, r3, #24
 8007b94:	d511      	bpl.n	8007bba <_svfiprintf_r+0x36>
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10e      	bne.n	8007bba <_svfiprintf_r+0x36>
 8007b9c:	2140      	movs	r1, #64	; 0x40
 8007b9e:	f000 fafd 	bl	800819c <_malloc_r>
 8007ba2:	6038      	str	r0, [r7, #0]
 8007ba4:	6138      	str	r0, [r7, #16]
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d105      	bne.n	8007bb6 <_svfiprintf_r+0x32>
 8007baa:	230c      	movs	r3, #12
 8007bac:	9a03      	ldr	r2, [sp, #12]
 8007bae:	3801      	subs	r0, #1
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	b021      	add	sp, #132	; 0x84
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	ac08      	add	r4, sp, #32
 8007bbe:	6163      	str	r3, [r4, #20]
 8007bc0:	3320      	adds	r3, #32
 8007bc2:	7663      	strb	r3, [r4, #25]
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	76a3      	strb	r3, [r4, #26]
 8007bc8:	9507      	str	r5, [sp, #28]
 8007bca:	0035      	movs	r5, r6
 8007bcc:	782b      	ldrb	r3, [r5, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <_svfiprintf_r+0x52>
 8007bd2:	2b25      	cmp	r3, #37	; 0x25
 8007bd4:	d147      	bne.n	8007c66 <_svfiprintf_r+0xe2>
 8007bd6:	1bab      	subs	r3, r5, r6
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	42b5      	cmp	r5, r6
 8007bdc:	d00c      	beq.n	8007bf8 <_svfiprintf_r+0x74>
 8007bde:	0032      	movs	r2, r6
 8007be0:	0039      	movs	r1, r7
 8007be2:	9803      	ldr	r0, [sp, #12]
 8007be4:	f7ff ff6c 	bl	8007ac0 <__ssputs_r>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d100      	bne.n	8007bee <_svfiprintf_r+0x6a>
 8007bec:	e0ae      	b.n	8007d4c <_svfiprintf_r+0x1c8>
 8007bee:	6962      	ldr	r2, [r4, #20]
 8007bf0:	9b05      	ldr	r3, [sp, #20]
 8007bf2:	4694      	mov	ip, r2
 8007bf4:	4463      	add	r3, ip
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	782b      	ldrb	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d100      	bne.n	8007c00 <_svfiprintf_r+0x7c>
 8007bfe:	e0a5      	b.n	8007d4c <_svfiprintf_r+0x1c8>
 8007c00:	2201      	movs	r2, #1
 8007c02:	2300      	movs	r3, #0
 8007c04:	4252      	negs	r2, r2
 8007c06:	6062      	str	r2, [r4, #4]
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	3254      	adds	r2, #84	; 0x54
 8007c0c:	1852      	adds	r2, r2, r1
 8007c0e:	1c6e      	adds	r6, r5, #1
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	60e3      	str	r3, [r4, #12]
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	7013      	strb	r3, [r2, #0]
 8007c18:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	7831      	ldrb	r1, [r6, #0]
 8007c1e:	4854      	ldr	r0, [pc, #336]	; (8007d70 <_svfiprintf_r+0x1ec>)
 8007c20:	f000 fa32 	bl	8008088 <memchr>
 8007c24:	1c75      	adds	r5, r6, #1
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d11f      	bne.n	8007c6a <_svfiprintf_r+0xe6>
 8007c2a:	6822      	ldr	r2, [r4, #0]
 8007c2c:	06d3      	lsls	r3, r2, #27
 8007c2e:	d504      	bpl.n	8007c3a <_svfiprintf_r+0xb6>
 8007c30:	2353      	movs	r3, #83	; 0x53
 8007c32:	a904      	add	r1, sp, #16
 8007c34:	185b      	adds	r3, r3, r1
 8007c36:	2120      	movs	r1, #32
 8007c38:	7019      	strb	r1, [r3, #0]
 8007c3a:	0713      	lsls	r3, r2, #28
 8007c3c:	d504      	bpl.n	8007c48 <_svfiprintf_r+0xc4>
 8007c3e:	2353      	movs	r3, #83	; 0x53
 8007c40:	a904      	add	r1, sp, #16
 8007c42:	185b      	adds	r3, r3, r1
 8007c44:	212b      	movs	r1, #43	; 0x2b
 8007c46:	7019      	strb	r1, [r3, #0]
 8007c48:	7833      	ldrb	r3, [r6, #0]
 8007c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4c:	d016      	beq.n	8007c7c <_svfiprintf_r+0xf8>
 8007c4e:	0035      	movs	r5, r6
 8007c50:	2100      	movs	r1, #0
 8007c52:	200a      	movs	r0, #10
 8007c54:	68e3      	ldr	r3, [r4, #12]
 8007c56:	782a      	ldrb	r2, [r5, #0]
 8007c58:	1c6e      	adds	r6, r5, #1
 8007c5a:	3a30      	subs	r2, #48	; 0x30
 8007c5c:	2a09      	cmp	r2, #9
 8007c5e:	d94e      	bls.n	8007cfe <_svfiprintf_r+0x17a>
 8007c60:	2900      	cmp	r1, #0
 8007c62:	d111      	bne.n	8007c88 <_svfiprintf_r+0x104>
 8007c64:	e017      	b.n	8007c96 <_svfiprintf_r+0x112>
 8007c66:	3501      	adds	r5, #1
 8007c68:	e7b0      	b.n	8007bcc <_svfiprintf_r+0x48>
 8007c6a:	4b41      	ldr	r3, [pc, #260]	; (8007d70 <_svfiprintf_r+0x1ec>)
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	1ac0      	subs	r0, r0, r3
 8007c70:	2301      	movs	r3, #1
 8007c72:	4083      	lsls	r3, r0
 8007c74:	4313      	orrs	r3, r2
 8007c76:	002e      	movs	r6, r5
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	e7ce      	b.n	8007c1a <_svfiprintf_r+0x96>
 8007c7c:	9b07      	ldr	r3, [sp, #28]
 8007c7e:	1d19      	adds	r1, r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	9107      	str	r1, [sp, #28]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	db01      	blt.n	8007c8c <_svfiprintf_r+0x108>
 8007c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c8a:	e004      	b.n	8007c96 <_svfiprintf_r+0x112>
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	60e3      	str	r3, [r4, #12]
 8007c90:	2302      	movs	r3, #2
 8007c92:	4313      	orrs	r3, r2
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	782b      	ldrb	r3, [r5, #0]
 8007c98:	2b2e      	cmp	r3, #46	; 0x2e
 8007c9a:	d10a      	bne.n	8007cb2 <_svfiprintf_r+0x12e>
 8007c9c:	786b      	ldrb	r3, [r5, #1]
 8007c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca0:	d135      	bne.n	8007d0e <_svfiprintf_r+0x18a>
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	3502      	adds	r5, #2
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	9207      	str	r2, [sp, #28]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	db2b      	blt.n	8007d08 <_svfiprintf_r+0x184>
 8007cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb2:	4e30      	ldr	r6, [pc, #192]	; (8007d74 <_svfiprintf_r+0x1f0>)
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	0030      	movs	r0, r6
 8007cb8:	7829      	ldrb	r1, [r5, #0]
 8007cba:	f000 f9e5 	bl	8008088 <memchr>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d006      	beq.n	8007cd0 <_svfiprintf_r+0x14c>
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	1b80      	subs	r0, r0, r6
 8007cc6:	4083      	lsls	r3, r0
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	3501      	adds	r5, #1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	7829      	ldrb	r1, [r5, #0]
 8007cd2:	2206      	movs	r2, #6
 8007cd4:	4828      	ldr	r0, [pc, #160]	; (8007d78 <_svfiprintf_r+0x1f4>)
 8007cd6:	1c6e      	adds	r6, r5, #1
 8007cd8:	7621      	strb	r1, [r4, #24]
 8007cda:	f000 f9d5 	bl	8008088 <memchr>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d03c      	beq.n	8007d5c <_svfiprintf_r+0x1d8>
 8007ce2:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <_svfiprintf_r+0x1f8>)
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d125      	bne.n	8007d34 <_svfiprintf_r+0x1b0>
 8007ce8:	2207      	movs	r2, #7
 8007cea:	9b07      	ldr	r3, [sp, #28]
 8007cec:	3307      	adds	r3, #7
 8007cee:	4393      	bics	r3, r2
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	6963      	ldr	r3, [r4, #20]
 8007cf6:	9a04      	ldr	r2, [sp, #16]
 8007cf8:	189b      	adds	r3, r3, r2
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	e765      	b.n	8007bca <_svfiprintf_r+0x46>
 8007cfe:	4343      	muls	r3, r0
 8007d00:	0035      	movs	r5, r6
 8007d02:	2101      	movs	r1, #1
 8007d04:	189b      	adds	r3, r3, r2
 8007d06:	e7a6      	b.n	8007c56 <_svfiprintf_r+0xd2>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	425b      	negs	r3, r3
 8007d0c:	e7d0      	b.n	8007cb0 <_svfiprintf_r+0x12c>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	200a      	movs	r0, #10
 8007d12:	001a      	movs	r2, r3
 8007d14:	3501      	adds	r5, #1
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	7829      	ldrb	r1, [r5, #0]
 8007d1a:	1c6e      	adds	r6, r5, #1
 8007d1c:	3930      	subs	r1, #48	; 0x30
 8007d1e:	2909      	cmp	r1, #9
 8007d20:	d903      	bls.n	8007d2a <_svfiprintf_r+0x1a6>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0c5      	beq.n	8007cb2 <_svfiprintf_r+0x12e>
 8007d26:	9209      	str	r2, [sp, #36]	; 0x24
 8007d28:	e7c3      	b.n	8007cb2 <_svfiprintf_r+0x12e>
 8007d2a:	4342      	muls	r2, r0
 8007d2c:	0035      	movs	r5, r6
 8007d2e:	2301      	movs	r3, #1
 8007d30:	1852      	adds	r2, r2, r1
 8007d32:	e7f1      	b.n	8007d18 <_svfiprintf_r+0x194>
 8007d34:	ab07      	add	r3, sp, #28
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	003a      	movs	r2, r7
 8007d3a:	0021      	movs	r1, r4
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <_svfiprintf_r+0x1fc>)
 8007d3e:	9803      	ldr	r0, [sp, #12]
 8007d40:	e000      	b.n	8007d44 <_svfiprintf_r+0x1c0>
 8007d42:	bf00      	nop
 8007d44:	9004      	str	r0, [sp, #16]
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d1d3      	bne.n	8007cf4 <_svfiprintf_r+0x170>
 8007d4c:	89bb      	ldrh	r3, [r7, #12]
 8007d4e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d50:	065b      	lsls	r3, r3, #25
 8007d52:	d400      	bmi.n	8007d56 <_svfiprintf_r+0x1d2>
 8007d54:	e72d      	b.n	8007bb2 <_svfiprintf_r+0x2e>
 8007d56:	2001      	movs	r0, #1
 8007d58:	4240      	negs	r0, r0
 8007d5a:	e72a      	b.n	8007bb2 <_svfiprintf_r+0x2e>
 8007d5c:	ab07      	add	r3, sp, #28
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	003a      	movs	r2, r7
 8007d62:	0021      	movs	r1, r4
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <_svfiprintf_r+0x1fc>)
 8007d66:	9803      	ldr	r0, [sp, #12]
 8007d68:	f000 f87c 	bl	8007e64 <_printf_i>
 8007d6c:	e7ea      	b.n	8007d44 <_svfiprintf_r+0x1c0>
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	08008c76 	.word	0x08008c76
 8007d74:	08008c7c 	.word	0x08008c7c
 8007d78:	08008c80 	.word	0x08008c80
 8007d7c:	00000000 	.word	0x00000000
 8007d80:	08007ac1 	.word	0x08007ac1

08007d84 <_printf_common>:
 8007d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d86:	0015      	movs	r5, r2
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	688a      	ldr	r2, [r1, #8]
 8007d8c:	690b      	ldr	r3, [r1, #16]
 8007d8e:	000c      	movs	r4, r1
 8007d90:	9000      	str	r0, [sp, #0]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	da00      	bge.n	8007d98 <_printf_common+0x14>
 8007d96:	0013      	movs	r3, r2
 8007d98:	0022      	movs	r2, r4
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	3243      	adds	r2, #67	; 0x43
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d001      	beq.n	8007da8 <_printf_common+0x24>
 8007da4:	3301      	adds	r3, #1
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	069b      	lsls	r3, r3, #26
 8007dac:	d502      	bpl.n	8007db4 <_printf_common+0x30>
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	3302      	adds	r3, #2
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	6822      	ldr	r2, [r4, #0]
 8007db6:	2306      	movs	r3, #6
 8007db8:	0017      	movs	r7, r2
 8007dba:	401f      	ands	r7, r3
 8007dbc:	421a      	tst	r2, r3
 8007dbe:	d027      	beq.n	8007e10 <_printf_common+0x8c>
 8007dc0:	0023      	movs	r3, r4
 8007dc2:	3343      	adds	r3, #67	; 0x43
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	1e5a      	subs	r2, r3, #1
 8007dc8:	4193      	sbcs	r3, r2
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d430      	bmi.n	8007e32 <_printf_common+0xae>
 8007dd0:	0022      	movs	r2, r4
 8007dd2:	9901      	ldr	r1, [sp, #4]
 8007dd4:	9800      	ldr	r0, [sp, #0]
 8007dd6:	9e08      	ldr	r6, [sp, #32]
 8007dd8:	3243      	adds	r2, #67	; 0x43
 8007dda:	47b0      	blx	r6
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d025      	beq.n	8007e2c <_printf_common+0xa8>
 8007de0:	2306      	movs	r3, #6
 8007de2:	6820      	ldr	r0, [r4, #0]
 8007de4:	682a      	ldr	r2, [r5, #0]
 8007de6:	68e1      	ldr	r1, [r4, #12]
 8007de8:	2500      	movs	r5, #0
 8007dea:	4003      	ands	r3, r0
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d103      	bne.n	8007df8 <_printf_common+0x74>
 8007df0:	1a8d      	subs	r5, r1, r2
 8007df2:	43eb      	mvns	r3, r5
 8007df4:	17db      	asrs	r3, r3, #31
 8007df6:	401d      	ands	r5, r3
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	6922      	ldr	r2, [r4, #16]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	dd01      	ble.n	8007e04 <_printf_common+0x80>
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	18ed      	adds	r5, r5, r3
 8007e04:	2700      	movs	r7, #0
 8007e06:	42bd      	cmp	r5, r7
 8007e08:	d120      	bne.n	8007e4c <_printf_common+0xc8>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e010      	b.n	8007e30 <_printf_common+0xac>
 8007e0e:	3701      	adds	r7, #1
 8007e10:	68e3      	ldr	r3, [r4, #12]
 8007e12:	682a      	ldr	r2, [r5, #0]
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	42bb      	cmp	r3, r7
 8007e18:	ddd2      	ble.n	8007dc0 <_printf_common+0x3c>
 8007e1a:	0022      	movs	r2, r4
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	9901      	ldr	r1, [sp, #4]
 8007e20:	9800      	ldr	r0, [sp, #0]
 8007e22:	9e08      	ldr	r6, [sp, #32]
 8007e24:	3219      	adds	r2, #25
 8007e26:	47b0      	blx	r6
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d1f0      	bne.n	8007e0e <_printf_common+0x8a>
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	4240      	negs	r0, r0
 8007e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e32:	2030      	movs	r0, #48	; 0x30
 8007e34:	18e1      	adds	r1, r4, r3
 8007e36:	3143      	adds	r1, #67	; 0x43
 8007e38:	7008      	strb	r0, [r1, #0]
 8007e3a:	0021      	movs	r1, r4
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	3145      	adds	r1, #69	; 0x45
 8007e40:	7809      	ldrb	r1, [r1, #0]
 8007e42:	18a2      	adds	r2, r4, r2
 8007e44:	3243      	adds	r2, #67	; 0x43
 8007e46:	3302      	adds	r3, #2
 8007e48:	7011      	strb	r1, [r2, #0]
 8007e4a:	e7c1      	b.n	8007dd0 <_printf_common+0x4c>
 8007e4c:	0022      	movs	r2, r4
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9901      	ldr	r1, [sp, #4]
 8007e52:	9800      	ldr	r0, [sp, #0]
 8007e54:	9e08      	ldr	r6, [sp, #32]
 8007e56:	321a      	adds	r2, #26
 8007e58:	47b0      	blx	r6
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d0e6      	beq.n	8007e2c <_printf_common+0xa8>
 8007e5e:	3701      	adds	r7, #1
 8007e60:	e7d1      	b.n	8007e06 <_printf_common+0x82>
	...

08007e64 <_printf_i>:
 8007e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e66:	b08b      	sub	sp, #44	; 0x2c
 8007e68:	9206      	str	r2, [sp, #24]
 8007e6a:	000a      	movs	r2, r1
 8007e6c:	3243      	adds	r2, #67	; 0x43
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	9005      	str	r0, [sp, #20]
 8007e72:	9204      	str	r2, [sp, #16]
 8007e74:	7e0a      	ldrb	r2, [r1, #24]
 8007e76:	000c      	movs	r4, r1
 8007e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e7a:	2a78      	cmp	r2, #120	; 0x78
 8007e7c:	d807      	bhi.n	8007e8e <_printf_i+0x2a>
 8007e7e:	2a62      	cmp	r2, #98	; 0x62
 8007e80:	d809      	bhi.n	8007e96 <_printf_i+0x32>
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d100      	bne.n	8007e88 <_printf_i+0x24>
 8007e86:	e0c1      	b.n	800800c <_printf_i+0x1a8>
 8007e88:	2a58      	cmp	r2, #88	; 0x58
 8007e8a:	d100      	bne.n	8007e8e <_printf_i+0x2a>
 8007e8c:	e08c      	b.n	8007fa8 <_printf_i+0x144>
 8007e8e:	0026      	movs	r6, r4
 8007e90:	3642      	adds	r6, #66	; 0x42
 8007e92:	7032      	strb	r2, [r6, #0]
 8007e94:	e022      	b.n	8007edc <_printf_i+0x78>
 8007e96:	0010      	movs	r0, r2
 8007e98:	3863      	subs	r0, #99	; 0x63
 8007e9a:	2815      	cmp	r0, #21
 8007e9c:	d8f7      	bhi.n	8007e8e <_printf_i+0x2a>
 8007e9e:	f7f8 f94f 	bl	8000140 <__gnu_thumb1_case_shi>
 8007ea2:	0016      	.short	0x0016
 8007ea4:	fff6001f 	.word	0xfff6001f
 8007ea8:	fff6fff6 	.word	0xfff6fff6
 8007eac:	001ffff6 	.word	0x001ffff6
 8007eb0:	fff6fff6 	.word	0xfff6fff6
 8007eb4:	fff6fff6 	.word	0xfff6fff6
 8007eb8:	003600a8 	.word	0x003600a8
 8007ebc:	fff6009a 	.word	0xfff6009a
 8007ec0:	00b9fff6 	.word	0x00b9fff6
 8007ec4:	0036fff6 	.word	0x0036fff6
 8007ec8:	fff6fff6 	.word	0xfff6fff6
 8007ecc:	009e      	.short	0x009e
 8007ece:	0026      	movs	r6, r4
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	3642      	adds	r6, #66	; 0x42
 8007ed4:	1d11      	adds	r1, r2, #4
 8007ed6:	6019      	str	r1, [r3, #0]
 8007ed8:	6813      	ldr	r3, [r2, #0]
 8007eda:	7033      	strb	r3, [r6, #0]
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0a7      	b.n	8008030 <_printf_i+0x1cc>
 8007ee0:	6808      	ldr	r0, [r1, #0]
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	1d0a      	adds	r2, r1, #4
 8007ee6:	0605      	lsls	r5, r0, #24
 8007ee8:	d50b      	bpl.n	8007f02 <_printf_i+0x9e>
 8007eea:	680d      	ldr	r5, [r1, #0]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	da03      	bge.n	8007efa <_printf_i+0x96>
 8007ef2:	232d      	movs	r3, #45	; 0x2d
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	426d      	negs	r5, r5
 8007ef8:	7013      	strb	r3, [r2, #0]
 8007efa:	4b61      	ldr	r3, [pc, #388]	; (8008080 <_printf_i+0x21c>)
 8007efc:	270a      	movs	r7, #10
 8007efe:	9303      	str	r3, [sp, #12]
 8007f00:	e01b      	b.n	8007f3a <_printf_i+0xd6>
 8007f02:	680d      	ldr	r5, [r1, #0]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	0641      	lsls	r1, r0, #25
 8007f08:	d5f1      	bpl.n	8007eee <_printf_i+0x8a>
 8007f0a:	b22d      	sxth	r5, r5
 8007f0c:	e7ef      	b.n	8007eee <_printf_i+0x8a>
 8007f0e:	680d      	ldr	r5, [r1, #0]
 8007f10:	6819      	ldr	r1, [r3, #0]
 8007f12:	1d08      	adds	r0, r1, #4
 8007f14:	6018      	str	r0, [r3, #0]
 8007f16:	062e      	lsls	r6, r5, #24
 8007f18:	d501      	bpl.n	8007f1e <_printf_i+0xba>
 8007f1a:	680d      	ldr	r5, [r1, #0]
 8007f1c:	e003      	b.n	8007f26 <_printf_i+0xc2>
 8007f1e:	066d      	lsls	r5, r5, #25
 8007f20:	d5fb      	bpl.n	8007f1a <_printf_i+0xb6>
 8007f22:	680d      	ldr	r5, [r1, #0]
 8007f24:	b2ad      	uxth	r5, r5
 8007f26:	4b56      	ldr	r3, [pc, #344]	; (8008080 <_printf_i+0x21c>)
 8007f28:	2708      	movs	r7, #8
 8007f2a:	9303      	str	r3, [sp, #12]
 8007f2c:	2a6f      	cmp	r2, #111	; 0x6f
 8007f2e:	d000      	beq.n	8007f32 <_printf_i+0xce>
 8007f30:	3702      	adds	r7, #2
 8007f32:	0023      	movs	r3, r4
 8007f34:	2200      	movs	r2, #0
 8007f36:	3343      	adds	r3, #67	; 0x43
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	60a3      	str	r3, [r4, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	db03      	blt.n	8007f4a <_printf_i+0xe6>
 8007f42:	2204      	movs	r2, #4
 8007f44:	6821      	ldr	r1, [r4, #0]
 8007f46:	4391      	bics	r1, r2
 8007f48:	6021      	str	r1, [r4, #0]
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	d102      	bne.n	8007f54 <_printf_i+0xf0>
 8007f4e:	9e04      	ldr	r6, [sp, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <_printf_i+0x10a>
 8007f54:	9e04      	ldr	r6, [sp, #16]
 8007f56:	0028      	movs	r0, r5
 8007f58:	0039      	movs	r1, r7
 8007f5a:	f7f8 f981 	bl	8000260 <__aeabi_uidivmod>
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	3e01      	subs	r6, #1
 8007f62:	5c5b      	ldrb	r3, [r3, r1]
 8007f64:	7033      	strb	r3, [r6, #0]
 8007f66:	002b      	movs	r3, r5
 8007f68:	0005      	movs	r5, r0
 8007f6a:	429f      	cmp	r7, r3
 8007f6c:	d9f3      	bls.n	8007f56 <_printf_i+0xf2>
 8007f6e:	2f08      	cmp	r7, #8
 8007f70:	d109      	bne.n	8007f86 <_printf_i+0x122>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	07db      	lsls	r3, r3, #31
 8007f76:	d506      	bpl.n	8007f86 <_printf_i+0x122>
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	6922      	ldr	r2, [r4, #16]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	dc02      	bgt.n	8007f86 <_printf_i+0x122>
 8007f80:	2330      	movs	r3, #48	; 0x30
 8007f82:	3e01      	subs	r6, #1
 8007f84:	7033      	strb	r3, [r6, #0]
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	1b9b      	subs	r3, r3, r6
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	0021      	movs	r1, r4
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	aa09      	add	r2, sp, #36	; 0x24
 8007f98:	f7ff fef4 	bl	8007d84 <_printf_common>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d14c      	bne.n	800803a <_printf_i+0x1d6>
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	4240      	negs	r0, r0
 8007fa4:	b00b      	add	sp, #44	; 0x2c
 8007fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa8:	3145      	adds	r1, #69	; 0x45
 8007faa:	700a      	strb	r2, [r1, #0]
 8007fac:	4a34      	ldr	r2, [pc, #208]	; (8008080 <_printf_i+0x21c>)
 8007fae:	9203      	str	r2, [sp, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	6821      	ldr	r1, [r4, #0]
 8007fb4:	ca20      	ldmia	r2!, {r5}
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	0608      	lsls	r0, r1, #24
 8007fba:	d516      	bpl.n	8007fea <_printf_i+0x186>
 8007fbc:	07cb      	lsls	r3, r1, #31
 8007fbe:	d502      	bpl.n	8007fc6 <_printf_i+0x162>
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	4319      	orrs	r1, r3
 8007fc4:	6021      	str	r1, [r4, #0]
 8007fc6:	2710      	movs	r7, #16
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	d1b2      	bne.n	8007f32 <_printf_i+0xce>
 8007fcc:	2320      	movs	r3, #32
 8007fce:	6822      	ldr	r2, [r4, #0]
 8007fd0:	439a      	bics	r2, r3
 8007fd2:	6022      	str	r2, [r4, #0]
 8007fd4:	e7ad      	b.n	8007f32 <_printf_i+0xce>
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	6809      	ldr	r1, [r1, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	6022      	str	r2, [r4, #0]
 8007fde:	0022      	movs	r2, r4
 8007fe0:	2178      	movs	r1, #120	; 0x78
 8007fe2:	3245      	adds	r2, #69	; 0x45
 8007fe4:	7011      	strb	r1, [r2, #0]
 8007fe6:	4a27      	ldr	r2, [pc, #156]	; (8008084 <_printf_i+0x220>)
 8007fe8:	e7e1      	b.n	8007fae <_printf_i+0x14a>
 8007fea:	0648      	lsls	r0, r1, #25
 8007fec:	d5e6      	bpl.n	8007fbc <_printf_i+0x158>
 8007fee:	b2ad      	uxth	r5, r5
 8007ff0:	e7e4      	b.n	8007fbc <_printf_i+0x158>
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	680d      	ldr	r5, [r1, #0]
 8007ff6:	1d10      	adds	r0, r2, #4
 8007ff8:	6949      	ldr	r1, [r1, #20]
 8007ffa:	6018      	str	r0, [r3, #0]
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	062e      	lsls	r6, r5, #24
 8008000:	d501      	bpl.n	8008006 <_printf_i+0x1a2>
 8008002:	6019      	str	r1, [r3, #0]
 8008004:	e002      	b.n	800800c <_printf_i+0x1a8>
 8008006:	066d      	lsls	r5, r5, #25
 8008008:	d5fb      	bpl.n	8008002 <_printf_i+0x19e>
 800800a:	8019      	strh	r1, [r3, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	9e04      	ldr	r6, [sp, #16]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	e7bb      	b.n	8007f8c <_printf_i+0x128>
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	1d11      	adds	r1, r2, #4
 8008018:	6019      	str	r1, [r3, #0]
 800801a:	6816      	ldr	r6, [r2, #0]
 800801c:	2100      	movs	r1, #0
 800801e:	0030      	movs	r0, r6
 8008020:	6862      	ldr	r2, [r4, #4]
 8008022:	f000 f831 	bl	8008088 <memchr>
 8008026:	2800      	cmp	r0, #0
 8008028:	d001      	beq.n	800802e <_printf_i+0x1ca>
 800802a:	1b80      	subs	r0, r0, r6
 800802c:	6060      	str	r0, [r4, #4]
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2300      	movs	r3, #0
 8008034:	9a04      	ldr	r2, [sp, #16]
 8008036:	7013      	strb	r3, [r2, #0]
 8008038:	e7a8      	b.n	8007f8c <_printf_i+0x128>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	0032      	movs	r2, r6
 800803e:	9906      	ldr	r1, [sp, #24]
 8008040:	9805      	ldr	r0, [sp, #20]
 8008042:	9d07      	ldr	r5, [sp, #28]
 8008044:	47a8      	blx	r5
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d0aa      	beq.n	8007fa0 <_printf_i+0x13c>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	079b      	lsls	r3, r3, #30
 800804e:	d415      	bmi.n	800807c <_printf_i+0x218>
 8008050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008052:	68e0      	ldr	r0, [r4, #12]
 8008054:	4298      	cmp	r0, r3
 8008056:	daa5      	bge.n	8007fa4 <_printf_i+0x140>
 8008058:	0018      	movs	r0, r3
 800805a:	e7a3      	b.n	8007fa4 <_printf_i+0x140>
 800805c:	0022      	movs	r2, r4
 800805e:	2301      	movs	r3, #1
 8008060:	9906      	ldr	r1, [sp, #24]
 8008062:	9805      	ldr	r0, [sp, #20]
 8008064:	9e07      	ldr	r6, [sp, #28]
 8008066:	3219      	adds	r2, #25
 8008068:	47b0      	blx	r6
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d098      	beq.n	8007fa0 <_printf_i+0x13c>
 800806e:	3501      	adds	r5, #1
 8008070:	68e3      	ldr	r3, [r4, #12]
 8008072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	42ab      	cmp	r3, r5
 8008078:	dcf0      	bgt.n	800805c <_printf_i+0x1f8>
 800807a:	e7e9      	b.n	8008050 <_printf_i+0x1ec>
 800807c:	2500      	movs	r5, #0
 800807e:	e7f7      	b.n	8008070 <_printf_i+0x20c>
 8008080:	08008c87 	.word	0x08008c87
 8008084:	08008c98 	.word	0x08008c98

08008088 <memchr>:
 8008088:	b2c9      	uxtb	r1, r1
 800808a:	1882      	adds	r2, r0, r2
 800808c:	4290      	cmp	r0, r2
 800808e:	d101      	bne.n	8008094 <memchr+0xc>
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	7803      	ldrb	r3, [r0, #0]
 8008096:	428b      	cmp	r3, r1
 8008098:	d0fb      	beq.n	8008092 <memchr+0xa>
 800809a:	3001      	adds	r0, #1
 800809c:	e7f6      	b.n	800808c <memchr+0x4>

0800809e <memmove>:
 800809e:	b510      	push	{r4, lr}
 80080a0:	4288      	cmp	r0, r1
 80080a2:	d902      	bls.n	80080aa <memmove+0xc>
 80080a4:	188b      	adds	r3, r1, r2
 80080a6:	4298      	cmp	r0, r3
 80080a8:	d303      	bcc.n	80080b2 <memmove+0x14>
 80080aa:	2300      	movs	r3, #0
 80080ac:	e007      	b.n	80080be <memmove+0x20>
 80080ae:	5c8b      	ldrb	r3, [r1, r2]
 80080b0:	5483      	strb	r3, [r0, r2]
 80080b2:	3a01      	subs	r2, #1
 80080b4:	d2fb      	bcs.n	80080ae <memmove+0x10>
 80080b6:	bd10      	pop	{r4, pc}
 80080b8:	5ccc      	ldrb	r4, [r1, r3]
 80080ba:	54c4      	strb	r4, [r0, r3]
 80080bc:	3301      	adds	r3, #1
 80080be:	429a      	cmp	r2, r3
 80080c0:	d1fa      	bne.n	80080b8 <memmove+0x1a>
 80080c2:	e7f8      	b.n	80080b6 <memmove+0x18>

080080c4 <_free_r>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	0005      	movs	r5, r0
 80080c8:	2900      	cmp	r1, #0
 80080ca:	d010      	beq.n	80080ee <_free_r+0x2a>
 80080cc:	1f0c      	subs	r4, r1, #4
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da00      	bge.n	80080d6 <_free_r+0x12>
 80080d4:	18e4      	adds	r4, r4, r3
 80080d6:	0028      	movs	r0, r5
 80080d8:	f000 f918 	bl	800830c <__malloc_lock>
 80080dc:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <_free_r+0x90>)
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <_free_r+0x2c>
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	6014      	str	r4, [r2, #0]
 80080e8:	0028      	movs	r0, r5
 80080ea:	f000 f917 	bl	800831c <__malloc_unlock>
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d908      	bls.n	8008106 <_free_r+0x42>
 80080f4:	6821      	ldr	r1, [r4, #0]
 80080f6:	1860      	adds	r0, r4, r1
 80080f8:	4283      	cmp	r3, r0
 80080fa:	d1f3      	bne.n	80080e4 <_free_r+0x20>
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1841      	adds	r1, r0, r1
 8008102:	6021      	str	r1, [r4, #0]
 8008104:	e7ee      	b.n	80080e4 <_free_r+0x20>
 8008106:	001a      	movs	r2, r3
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <_free_r+0x4e>
 800810e:	42a3      	cmp	r3, r4
 8008110:	d9f9      	bls.n	8008106 <_free_r+0x42>
 8008112:	6811      	ldr	r1, [r2, #0]
 8008114:	1850      	adds	r0, r2, r1
 8008116:	42a0      	cmp	r0, r4
 8008118:	d10b      	bne.n	8008132 <_free_r+0x6e>
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	1809      	adds	r1, r1, r0
 800811e:	1850      	adds	r0, r2, r1
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	4283      	cmp	r3, r0
 8008124:	d1e0      	bne.n	80080e8 <_free_r+0x24>
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	1841      	adds	r1, r0, r1
 800812c:	6011      	str	r1, [r2, #0]
 800812e:	6053      	str	r3, [r2, #4]
 8008130:	e7da      	b.n	80080e8 <_free_r+0x24>
 8008132:	42a0      	cmp	r0, r4
 8008134:	d902      	bls.n	800813c <_free_r+0x78>
 8008136:	230c      	movs	r3, #12
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	e7d5      	b.n	80080e8 <_free_r+0x24>
 800813c:	6821      	ldr	r1, [r4, #0]
 800813e:	1860      	adds	r0, r4, r1
 8008140:	4283      	cmp	r3, r0
 8008142:	d103      	bne.n	800814c <_free_r+0x88>
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	1841      	adds	r1, r0, r1
 800814a:	6021      	str	r1, [r4, #0]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	6054      	str	r4, [r2, #4]
 8008150:	e7ca      	b.n	80080e8 <_free_r+0x24>
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	200016ac 	.word	0x200016ac

08008158 <sbrk_aligned>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	4e0f      	ldr	r6, [pc, #60]	; (8008198 <sbrk_aligned+0x40>)
 800815c:	000d      	movs	r5, r1
 800815e:	6831      	ldr	r1, [r6, #0]
 8008160:	0004      	movs	r4, r0
 8008162:	2900      	cmp	r1, #0
 8008164:	d102      	bne.n	800816c <sbrk_aligned+0x14>
 8008166:	f000 f8bf 	bl	80082e8 <_sbrk_r>
 800816a:	6030      	str	r0, [r6, #0]
 800816c:	0029      	movs	r1, r5
 800816e:	0020      	movs	r0, r4
 8008170:	f000 f8ba 	bl	80082e8 <_sbrk_r>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d00a      	beq.n	800818e <sbrk_aligned+0x36>
 8008178:	2303      	movs	r3, #3
 800817a:	1cc5      	adds	r5, r0, #3
 800817c:	439d      	bics	r5, r3
 800817e:	42a8      	cmp	r0, r5
 8008180:	d007      	beq.n	8008192 <sbrk_aligned+0x3a>
 8008182:	1a29      	subs	r1, r5, r0
 8008184:	0020      	movs	r0, r4
 8008186:	f000 f8af 	bl	80082e8 <_sbrk_r>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d101      	bne.n	8008192 <sbrk_aligned+0x3a>
 800818e:	2501      	movs	r5, #1
 8008190:	426d      	negs	r5, r5
 8008192:	0028      	movs	r0, r5
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	200016b0 	.word	0x200016b0

0800819c <_malloc_r>:
 800819c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800819e:	2203      	movs	r2, #3
 80081a0:	1ccb      	adds	r3, r1, #3
 80081a2:	4393      	bics	r3, r2
 80081a4:	3308      	adds	r3, #8
 80081a6:	0006      	movs	r6, r0
 80081a8:	001f      	movs	r7, r3
 80081aa:	2b0c      	cmp	r3, #12
 80081ac:	d232      	bcs.n	8008214 <_malloc_r+0x78>
 80081ae:	270c      	movs	r7, #12
 80081b0:	42b9      	cmp	r1, r7
 80081b2:	d831      	bhi.n	8008218 <_malloc_r+0x7c>
 80081b4:	0030      	movs	r0, r6
 80081b6:	f000 f8a9 	bl	800830c <__malloc_lock>
 80081ba:	4d32      	ldr	r5, [pc, #200]	; (8008284 <_malloc_r+0xe8>)
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	001c      	movs	r4, r3
 80081c0:	2c00      	cmp	r4, #0
 80081c2:	d12e      	bne.n	8008222 <_malloc_r+0x86>
 80081c4:	0039      	movs	r1, r7
 80081c6:	0030      	movs	r0, r6
 80081c8:	f7ff ffc6 	bl	8008158 <sbrk_aligned>
 80081cc:	0004      	movs	r4, r0
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	d11e      	bne.n	8008210 <_malloc_r+0x74>
 80081d2:	682c      	ldr	r4, [r5, #0]
 80081d4:	0025      	movs	r5, r4
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	d14a      	bne.n	8008270 <_malloc_r+0xd4>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	0029      	movs	r1, r5
 80081de:	18e3      	adds	r3, r4, r3
 80081e0:	0030      	movs	r0, r6
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	f000 f880 	bl	80082e8 <_sbrk_r>
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	4283      	cmp	r3, r0
 80081ec:	d143      	bne.n	8008276 <_malloc_r+0xda>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	3703      	adds	r7, #3
 80081f2:	1aff      	subs	r7, r7, r3
 80081f4:	2303      	movs	r3, #3
 80081f6:	439f      	bics	r7, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	2f0c      	cmp	r7, #12
 80081fc:	d200      	bcs.n	8008200 <_malloc_r+0x64>
 80081fe:	270c      	movs	r7, #12
 8008200:	0039      	movs	r1, r7
 8008202:	0030      	movs	r0, r6
 8008204:	f7ff ffa8 	bl	8008158 <sbrk_aligned>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d034      	beq.n	8008276 <_malloc_r+0xda>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	19df      	adds	r7, r3, r7
 8008210:	6027      	str	r7, [r4, #0]
 8008212:	e013      	b.n	800823c <_malloc_r+0xa0>
 8008214:	2b00      	cmp	r3, #0
 8008216:	dacb      	bge.n	80081b0 <_malloc_r+0x14>
 8008218:	230c      	movs	r3, #12
 800821a:	2500      	movs	r5, #0
 800821c:	6033      	str	r3, [r6, #0]
 800821e:	0028      	movs	r0, r5
 8008220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	1bd1      	subs	r1, r2, r7
 8008226:	d420      	bmi.n	800826a <_malloc_r+0xce>
 8008228:	290b      	cmp	r1, #11
 800822a:	d917      	bls.n	800825c <_malloc_r+0xc0>
 800822c:	19e2      	adds	r2, r4, r7
 800822e:	6027      	str	r7, [r4, #0]
 8008230:	42a3      	cmp	r3, r4
 8008232:	d111      	bne.n	8008258 <_malloc_r+0xbc>
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	6863      	ldr	r3, [r4, #4]
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	6053      	str	r3, [r2, #4]
 800823c:	0030      	movs	r0, r6
 800823e:	0025      	movs	r5, r4
 8008240:	f000 f86c 	bl	800831c <__malloc_unlock>
 8008244:	2207      	movs	r2, #7
 8008246:	350b      	adds	r5, #11
 8008248:	1d23      	adds	r3, r4, #4
 800824a:	4395      	bics	r5, r2
 800824c:	1aea      	subs	r2, r5, r3
 800824e:	429d      	cmp	r5, r3
 8008250:	d0e5      	beq.n	800821e <_malloc_r+0x82>
 8008252:	1b5b      	subs	r3, r3, r5
 8008254:	50a3      	str	r3, [r4, r2]
 8008256:	e7e2      	b.n	800821e <_malloc_r+0x82>
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	e7ec      	b.n	8008236 <_malloc_r+0x9a>
 800825c:	6862      	ldr	r2, [r4, #4]
 800825e:	42a3      	cmp	r3, r4
 8008260:	d101      	bne.n	8008266 <_malloc_r+0xca>
 8008262:	602a      	str	r2, [r5, #0]
 8008264:	e7ea      	b.n	800823c <_malloc_r+0xa0>
 8008266:	605a      	str	r2, [r3, #4]
 8008268:	e7e8      	b.n	800823c <_malloc_r+0xa0>
 800826a:	0023      	movs	r3, r4
 800826c:	6864      	ldr	r4, [r4, #4]
 800826e:	e7a7      	b.n	80081c0 <_malloc_r+0x24>
 8008270:	002c      	movs	r4, r5
 8008272:	686d      	ldr	r5, [r5, #4]
 8008274:	e7af      	b.n	80081d6 <_malloc_r+0x3a>
 8008276:	230c      	movs	r3, #12
 8008278:	0030      	movs	r0, r6
 800827a:	6033      	str	r3, [r6, #0]
 800827c:	f000 f84e 	bl	800831c <__malloc_unlock>
 8008280:	e7cd      	b.n	800821e <_malloc_r+0x82>
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	200016ac 	.word	0x200016ac

08008288 <_realloc_r>:
 8008288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828a:	0007      	movs	r7, r0
 800828c:	000e      	movs	r6, r1
 800828e:	0014      	movs	r4, r2
 8008290:	2900      	cmp	r1, #0
 8008292:	d105      	bne.n	80082a0 <_realloc_r+0x18>
 8008294:	0011      	movs	r1, r2
 8008296:	f7ff ff81 	bl	800819c <_malloc_r>
 800829a:	0005      	movs	r5, r0
 800829c:	0028      	movs	r0, r5
 800829e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	d103      	bne.n	80082ac <_realloc_r+0x24>
 80082a4:	f7ff ff0e 	bl	80080c4 <_free_r>
 80082a8:	0025      	movs	r5, r4
 80082aa:	e7f7      	b.n	800829c <_realloc_r+0x14>
 80082ac:	f000 f83e 	bl	800832c <_malloc_usable_size_r>
 80082b0:	9001      	str	r0, [sp, #4]
 80082b2:	4284      	cmp	r4, r0
 80082b4:	d803      	bhi.n	80082be <_realloc_r+0x36>
 80082b6:	0035      	movs	r5, r6
 80082b8:	0843      	lsrs	r3, r0, #1
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	d3ee      	bcc.n	800829c <_realloc_r+0x14>
 80082be:	0021      	movs	r1, r4
 80082c0:	0038      	movs	r0, r7
 80082c2:	f7ff ff6b 	bl	800819c <_malloc_r>
 80082c6:	1e05      	subs	r5, r0, #0
 80082c8:	d0e8      	beq.n	800829c <_realloc_r+0x14>
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	0022      	movs	r2, r4
 80082ce:	429c      	cmp	r4, r3
 80082d0:	d900      	bls.n	80082d4 <_realloc_r+0x4c>
 80082d2:	001a      	movs	r2, r3
 80082d4:	0031      	movs	r1, r6
 80082d6:	0028      	movs	r0, r5
 80082d8:	f7ff fb74 	bl	80079c4 <memcpy>
 80082dc:	0031      	movs	r1, r6
 80082de:	0038      	movs	r0, r7
 80082e0:	f7ff fef0 	bl	80080c4 <_free_r>
 80082e4:	e7da      	b.n	800829c <_realloc_r+0x14>
	...

080082e8 <_sbrk_r>:
 80082e8:	2300      	movs	r3, #0
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	4d06      	ldr	r5, [pc, #24]	; (8008308 <_sbrk_r+0x20>)
 80082ee:	0004      	movs	r4, r0
 80082f0:	0008      	movs	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7f8 fcaa 	bl	8000c4c <_sbrk>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d103      	bne.n	8008304 <_sbrk_r+0x1c>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d000      	beq.n	8008304 <_sbrk_r+0x1c>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd70      	pop	{r4, r5, r6, pc}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	200016b4 	.word	0x200016b4

0800830c <__malloc_lock>:
 800830c:	b510      	push	{r4, lr}
 800830e:	4802      	ldr	r0, [pc, #8]	; (8008318 <__malloc_lock+0xc>)
 8008310:	f000 f814 	bl	800833c <__retarget_lock_acquire_recursive>
 8008314:	bd10      	pop	{r4, pc}
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	200016b8 	.word	0x200016b8

0800831c <__malloc_unlock>:
 800831c:	b510      	push	{r4, lr}
 800831e:	4802      	ldr	r0, [pc, #8]	; (8008328 <__malloc_unlock+0xc>)
 8008320:	f000 f80d 	bl	800833e <__retarget_lock_release_recursive>
 8008324:	bd10      	pop	{r4, pc}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	200016b8 	.word	0x200016b8

0800832c <_malloc_usable_size_r>:
 800832c:	1f0b      	subs	r3, r1, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	1f18      	subs	r0, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	da01      	bge.n	800833a <_malloc_usable_size_r+0xe>
 8008336:	580b      	ldr	r3, [r1, r0]
 8008338:	18c0      	adds	r0, r0, r3
 800833a:	4770      	bx	lr

0800833c <__retarget_lock_acquire_recursive>:
 800833c:	4770      	bx	lr

0800833e <__retarget_lock_release_recursive>:
 800833e:	4770      	bx	lr

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
