
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b0  20000000  08008be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001630  200001b0  08008d90  000201b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200017e0  08008d90  000217e0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029330  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008e6d  00000000  00000000  0004954b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b38  00000000  00000000  000523b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000194d  00000000  00000000  00053ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00010ad4  00000000  00000000  0005583d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a8a8  00000000  00000000  00066311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a2bfa  00000000  00000000  000a0bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000050e4  00000000  00000000  001437b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0000e170  00000000  00000000  00148898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000011f  00000000  00000000  00156a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b0 	.word	0x200001b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008278 	.word	0x08008278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b4 	.word	0x200001b4
 8000104:	08008278 	.word	0x08008278

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f834 	bl	80004dc <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4699      	mov	r9, r3
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	469c      	mov	ip, r3
 800048a:	0413      	lsls	r3, r2, #16
 800048c:	4647      	mov	r7, r8
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	001d      	movs	r5, r3
 8000492:	000e      	movs	r6, r1
 8000494:	4661      	mov	r1, ip
 8000496:	0404      	lsls	r4, r0, #16
 8000498:	0c24      	lsrs	r4, r4, #16
 800049a:	b580      	push	{r7, lr}
 800049c:	0007      	movs	r7, r0
 800049e:	0c10      	lsrs	r0, r2, #16
 80004a0:	434b      	muls	r3, r1
 80004a2:	4365      	muls	r5, r4
 80004a4:	4341      	muls	r1, r0
 80004a6:	4360      	muls	r0, r4
 80004a8:	0c2c      	lsrs	r4, r5, #16
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	1820      	adds	r0, r4, r0
 80004ae:	468c      	mov	ip, r1
 80004b0:	4283      	cmp	r3, r0
 80004b2:	d903      	bls.n	80004bc <__aeabi_lmul+0x3c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	025b      	lsls	r3, r3, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	44c4      	add	ip, r8
 80004bc:	4649      	mov	r1, r9
 80004be:	4379      	muls	r1, r7
 80004c0:	4356      	muls	r6, r2
 80004c2:	0c03      	lsrs	r3, r0, #16
 80004c4:	042d      	lsls	r5, r5, #16
 80004c6:	0c2d      	lsrs	r5, r5, #16
 80004c8:	1989      	adds	r1, r1, r6
 80004ca:	4463      	add	r3, ip
 80004cc:	0400      	lsls	r0, r0, #16
 80004ce:	1940      	adds	r0, r0, r5
 80004d0:	18c9      	adds	r1, r1, r3
 80004d2:	bcc0      	pop	{r6, r7}
 80004d4:	46b9      	mov	r9, r7
 80004d6:	46b0      	mov	r8, r6
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__udivmoddi4>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	4657      	mov	r7, sl
 80004e0:	464e      	mov	r6, r9
 80004e2:	4645      	mov	r5, r8
 80004e4:	46de      	mov	lr, fp
 80004e6:	b5e0      	push	{r5, r6, r7, lr}
 80004e8:	0004      	movs	r4, r0
 80004ea:	000d      	movs	r5, r1
 80004ec:	4692      	mov	sl, r2
 80004ee:	4699      	mov	r9, r3
 80004f0:	b083      	sub	sp, #12
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d830      	bhi.n	8000558 <__udivmoddi4+0x7c>
 80004f6:	d02d      	beq.n	8000554 <__udivmoddi4+0x78>
 80004f8:	4649      	mov	r1, r9
 80004fa:	4650      	mov	r0, sl
 80004fc:	f000 f8d8 	bl	80006b0 <__clzdi2>
 8000500:	0029      	movs	r1, r5
 8000502:	0006      	movs	r6, r0
 8000504:	0020      	movs	r0, r4
 8000506:	f000 f8d3 	bl	80006b0 <__clzdi2>
 800050a:	1a33      	subs	r3, r6, r0
 800050c:	4698      	mov	r8, r3
 800050e:	3b20      	subs	r3, #32
 8000510:	d434      	bmi.n	800057c <__udivmoddi4+0xa0>
 8000512:	469b      	mov	fp, r3
 8000514:	4653      	mov	r3, sl
 8000516:	465a      	mov	r2, fp
 8000518:	4093      	lsls	r3, r2
 800051a:	4642      	mov	r2, r8
 800051c:	001f      	movs	r7, r3
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	001e      	movs	r6, r3
 8000524:	42af      	cmp	r7, r5
 8000526:	d83b      	bhi.n	80005a0 <__udivmoddi4+0xc4>
 8000528:	42af      	cmp	r7, r5
 800052a:	d100      	bne.n	800052e <__udivmoddi4+0x52>
 800052c:	e079      	b.n	8000622 <__udivmoddi4+0x146>
 800052e:	465b      	mov	r3, fp
 8000530:	1ba4      	subs	r4, r4, r6
 8000532:	41bd      	sbcs	r5, r7
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <__udivmoddi4+0x5e>
 8000538:	e076      	b.n	8000628 <__udivmoddi4+0x14c>
 800053a:	2200      	movs	r2, #0
 800053c:	2300      	movs	r3, #0
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	465a      	mov	r2, fp
 8000546:	4093      	lsls	r3, r2
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	4642      	mov	r2, r8
 800054e:	4093      	lsls	r3, r2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	e029      	b.n	80005a8 <__udivmoddi4+0xcc>
 8000554:	4282      	cmp	r2, r0
 8000556:	d9cf      	bls.n	80004f8 <__udivmoddi4+0x1c>
 8000558:	2200      	movs	r2, #0
 800055a:	2300      	movs	r3, #0
 800055c:	9200      	str	r2, [sp, #0]
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <__udivmoddi4+0x8e>
 8000566:	601c      	str	r4, [r3, #0]
 8000568:	605d      	str	r5, [r3, #4]
 800056a:	9800      	ldr	r0, [sp, #0]
 800056c:	9901      	ldr	r1, [sp, #4]
 800056e:	b003      	add	sp, #12
 8000570:	bcf0      	pop	{r4, r5, r6, r7}
 8000572:	46bb      	mov	fp, r7
 8000574:	46b2      	mov	sl, r6
 8000576:	46a9      	mov	r9, r5
 8000578:	46a0      	mov	r8, r4
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4642      	mov	r2, r8
 800057e:	469b      	mov	fp, r3
 8000580:	2320      	movs	r3, #32
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	4652      	mov	r2, sl
 8000586:	40da      	lsrs	r2, r3
 8000588:	4641      	mov	r1, r8
 800058a:	0013      	movs	r3, r2
 800058c:	464a      	mov	r2, r9
 800058e:	408a      	lsls	r2, r1
 8000590:	0017      	movs	r7, r2
 8000592:	4642      	mov	r2, r8
 8000594:	431f      	orrs	r7, r3
 8000596:	4653      	mov	r3, sl
 8000598:	4093      	lsls	r3, r2
 800059a:	001e      	movs	r6, r3
 800059c:	42af      	cmp	r7, r5
 800059e:	d9c3      	bls.n	8000528 <__udivmoddi4+0x4c>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	4643      	mov	r3, r8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0d8      	beq.n	8000560 <__udivmoddi4+0x84>
 80005ae:	07fb      	lsls	r3, r7, #31
 80005b0:	0872      	lsrs	r2, r6, #1
 80005b2:	431a      	orrs	r2, r3
 80005b4:	4646      	mov	r6, r8
 80005b6:	087b      	lsrs	r3, r7, #1
 80005b8:	e00e      	b.n	80005d8 <__udivmoddi4+0xfc>
 80005ba:	42ab      	cmp	r3, r5
 80005bc:	d101      	bne.n	80005c2 <__udivmoddi4+0xe6>
 80005be:	42a2      	cmp	r2, r4
 80005c0:	d80c      	bhi.n	80005dc <__udivmoddi4+0x100>
 80005c2:	1aa4      	subs	r4, r4, r2
 80005c4:	419d      	sbcs	r5, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2100      	movs	r1, #0
 80005ce:	3e01      	subs	r6, #1
 80005d0:	1824      	adds	r4, r4, r0
 80005d2:	414d      	adcs	r5, r1
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d006      	beq.n	80005e6 <__udivmoddi4+0x10a>
 80005d8:	42ab      	cmp	r3, r5
 80005da:	d9ee      	bls.n	80005ba <__udivmoddi4+0xde>
 80005dc:	3e01      	subs	r6, #1
 80005de:	1924      	adds	r4, r4, r4
 80005e0:	416d      	adcs	r5, r5
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d1f8      	bne.n	80005d8 <__udivmoddi4+0xfc>
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	465b      	mov	r3, fp
 80005ec:	1900      	adds	r0, r0, r4
 80005ee:	4169      	adcs	r1, r5
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db24      	blt.n	800063e <__udivmoddi4+0x162>
 80005f4:	002b      	movs	r3, r5
 80005f6:	465a      	mov	r2, fp
 80005f8:	4644      	mov	r4, r8
 80005fa:	40d3      	lsrs	r3, r2
 80005fc:	002a      	movs	r2, r5
 80005fe:	40e2      	lsrs	r2, r4
 8000600:	001c      	movs	r4, r3
 8000602:	465b      	mov	r3, fp
 8000604:	0015      	movs	r5, r2
 8000606:	2b00      	cmp	r3, #0
 8000608:	db2a      	blt.n	8000660 <__udivmoddi4+0x184>
 800060a:	0026      	movs	r6, r4
 800060c:	409e      	lsls	r6, r3
 800060e:	0033      	movs	r3, r6
 8000610:	0026      	movs	r6, r4
 8000612:	4647      	mov	r7, r8
 8000614:	40be      	lsls	r6, r7
 8000616:	0032      	movs	r2, r6
 8000618:	1a80      	subs	r0, r0, r2
 800061a:	4199      	sbcs	r1, r3
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	9101      	str	r1, [sp, #4]
 8000620:	e79e      	b.n	8000560 <__udivmoddi4+0x84>
 8000622:	42a3      	cmp	r3, r4
 8000624:	d8bc      	bhi.n	80005a0 <__udivmoddi4+0xc4>
 8000626:	e782      	b.n	800052e <__udivmoddi4+0x52>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	2100      	movs	r1, #0
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	9100      	str	r1, [sp, #0]
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2201      	movs	r2, #1
 8000638:	40da      	lsrs	r2, r3
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	e785      	b.n	800054a <__udivmoddi4+0x6e>
 800063e:	4642      	mov	r2, r8
 8000640:	2320      	movs	r3, #32
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	4646      	mov	r6, r8
 8000648:	409a      	lsls	r2, r3
 800064a:	0023      	movs	r3, r4
 800064c:	40f3      	lsrs	r3, r6
 800064e:	4644      	mov	r4, r8
 8000650:	4313      	orrs	r3, r2
 8000652:	002a      	movs	r2, r5
 8000654:	40e2      	lsrs	r2, r4
 8000656:	001c      	movs	r4, r3
 8000658:	465b      	mov	r3, fp
 800065a:	0015      	movs	r5, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	dad4      	bge.n	800060a <__udivmoddi4+0x12e>
 8000660:	4642      	mov	r2, r8
 8000662:	002f      	movs	r7, r5
 8000664:	2320      	movs	r3, #32
 8000666:	0026      	movs	r6, r4
 8000668:	4097      	lsls	r7, r2
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	40de      	lsrs	r6, r3
 800066e:	003b      	movs	r3, r7
 8000670:	4333      	orrs	r3, r6
 8000672:	e7cd      	b.n	8000610 <__udivmoddi4+0x134>

08000674 <__clzsi2>:
 8000674:	211c      	movs	r1, #28
 8000676:	2301      	movs	r3, #1
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0xe>
 800067e:	0c00      	lsrs	r0, r0, #16
 8000680:	3910      	subs	r1, #16
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	4298      	cmp	r0, r3
 8000686:	d301      	bcc.n	800068c <__clzsi2+0x18>
 8000688:	0a00      	lsrs	r0, r0, #8
 800068a:	3908      	subs	r1, #8
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	4298      	cmp	r0, r3
 8000690:	d301      	bcc.n	8000696 <__clzsi2+0x22>
 8000692:	0900      	lsrs	r0, r0, #4
 8000694:	3904      	subs	r1, #4
 8000696:	a202      	add	r2, pc, #8	; (adr r2, 80006a0 <__clzsi2+0x2c>)
 8000698:	5c10      	ldrb	r0, [r2, r0]
 800069a:	1840      	adds	r0, r0, r1
 800069c:	4770      	bx	lr
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	02020304 	.word	0x02020304
 80006a4:	01010101 	.word	0x01010101
	...

080006b0 <__clzdi2>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2900      	cmp	r1, #0
 80006b4:	d103      	bne.n	80006be <__clzdi2+0xe>
 80006b6:	f7ff ffdd 	bl	8000674 <__clzsi2>
 80006ba:	3020      	adds	r0, #32
 80006bc:	e002      	b.n	80006c4 <__clzdi2+0x14>
 80006be:	0008      	movs	r0, r1
 80006c0:	f7ff ffd8 	bl	8000674 <__clzsi2>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)

080006c8 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80006c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80006ca:	f000 f989 	bl	80009e0 <SystemApp_Init>
//  SubghzApp_Init();
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80006ce:	bd10      	pop	{r4, pc}

080006d0 <Error_Handler>:
		Error_Handler();
	}
}

void Error_Handler(void)
{
 80006d0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d2:	b672      	cpsid	i
	__disable_irq();
	MX_GPIO_Init();
 80006d4:	f006 f82e 	bl	8006734 <MX_GPIO_Init>
	LOG(LOG_INFOR, "Error");
 80006d8:	2004      	movs	r0, #4
 80006da:	4902      	ldr	r1, [pc, #8]	; (80006e4 <Error_Handler+0x14>)
 80006dc:	f006 fe2a 	bl	8007334 <LOG>
	while (1){}
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x10>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	0800864d 	.word	0x0800864d

080006e8 <SystemClock_Config>:
{
 80006e8:	b510      	push	{r4, lr}
 80006ea:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ec:	222c      	movs	r2, #44	; 0x2c
 80006ee:	2100      	movs	r1, #0
 80006f0:	a80f      	add	r0, sp, #60	; 0x3c
 80006f2:	f007 f93b 	bl	800796c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	2214      	movs	r2, #20
 80006f8:	2100      	movs	r1, #0
 80006fa:	4668      	mov	r0, sp
 80006fc:	f007 f936 	bl	800796c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	2224      	movs	r2, #36	; 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	a805      	add	r0, sp, #20
 8000706:	f007 f931 	bl	800796c <memset>
	RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800070e:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	031b      	lsls	r3, r3, #12
 8000714:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000716:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000718:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800071c:	041b      	lsls	r3, r3, #16
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000720:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000724:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f001 fad1 	bl	8001ccc <HAL_RCC_OscConfig>
 800072a:	2800      	cmp	r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x4a>
		Error_Handler();
 800072e:	f7ff ffcf 	bl	80006d0 <Error_Handler>
	__HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <SystemClock_Config+0xb0>)
 8000736:	055b      	lsls	r3, r3, #21
 8000738:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800073a:	430b      	orrs	r3, r1
 800073c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <SystemClock_Config+0xb4>)
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemClock_Config+0xb8>)
 8000742:	6811      	ldr	r1, [r2, #0]
 8000744:	4019      	ands	r1, r3
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
	while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800074e:	6851      	ldr	r1, [r2, #4]
 8000750:	000b      	movs	r3, r1
 8000752:	4023      	ands	r3, r4
 8000754:	4221      	tst	r1, r4
 8000756:	d1fa      	bne.n	800074e <SystemClock_Config+0x66>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000758:	220f      	movs	r2, #15
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075a:	2101      	movs	r1, #1
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800075c:	9200      	str	r2, [sp, #0]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	3a0c      	subs	r2, #12
 8000762:	9201      	str	r2, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076a:	f001 fd39 	bl	80021e0 <HAL_RCC_ClockConfig>
 800076e:	2800      	cmp	r0, #0
 8000770:	d1dd      	bne.n	800072e <SystemClock_Config+0x46>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000772:	23ab      	movs	r3, #171	; 0xab
 8000774:	9305      	str	r3, [sp, #20]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8000776:	23c0      	movs	r3, #192	; 0xc0
 8000778:	031b      	lsls	r3, r3, #12
 800077a:	930c      	str	r3, [sp, #48]	; 0x30
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800077c:	2304      	movs	r3, #4
 800077e:	9308      	str	r3, [sp, #32]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000780:	2380      	movs	r3, #128	; 0x80
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000782:	9007      	str	r0, [sp, #28]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000784:	900a      	str	r0, [sp, #40]	; 0x28
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000786:	025b      	lsls	r3, r3, #9
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	a805      	add	r0, sp, #20
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800078a:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f001 fe16 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8000790:	2800      	cmp	r0, #0
 8000792:	d1cc      	bne.n	800072e <SystemClock_Config+0x46>
}
 8000794:	b01c      	add	sp, #112	; 0x70
 8000796:	bd10      	pop	{r4, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	40007000 	.word	0x40007000
 80007a0:	ffffe7ff 	.word	0xffffe7ff

080007a4 <main>:
{
 80007a4:	b510      	push	{r4, lr}
	HAL_Init();
 80007a6:	f000 fd31 	bl	800120c <HAL_Init>
		SystemClock_Config();
 80007aa:	f7ff ff9d 	bl	80006e8 <SystemClock_Config>
	MX_SubGHz_Phy_Init();
 80007ae:	f7ff ff8b 	bl	80006c8 <MX_SubGHz_Phy_Init>
	Main_Task();
 80007b2:	f004 ff77 	bl	80056a4 <Main_Task>
}
 80007b6:	2000      	movs	r0, #0
 80007b8:	bd10      	pop	{r4, pc}
	...

080007bc <HAL_RTC_MspInit>:
    Error_Handler();
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80007bc:	b510      	push	{r4, lr}
 80007be:	0004      	movs	r4, r0
 80007c0:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	2238      	movs	r2, #56	; 0x38
 80007c4:	2100      	movs	r1, #0
 80007c6:	4668      	mov	r0, sp
 80007c8:	f007 f8d0 	bl	800796c <memset>
  if (rtcHandle->Instance == RTC)
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_RTC_MspInit+0x50>)
 80007ce:	6822      	ldr	r2, [r4, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d118      	bne.n	8000806 <HAL_RTC_MspInit+0x4a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80007d4:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80007d8:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007da:	33fc      	adds	r3, #252	; 0xfc
 80007dc:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f001 fa75 	bl	8001ccc <HAL_RCC_OscConfig>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d001      	beq.n	80007ea <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80007e6:	f7ff ff73 	bl	80006d0 <Error_Handler>
    }
    __HAL_RCC_RTC_ENABLE();
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_RTC_MspInit+0x54>)
 80007ee:	02db      	lsls	r3, r3, #11
 80007f0:	6d11      	ldr	r1, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80007f2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	0011      	movs	r1, r2
 80007fc:	f000 fe8a 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000800:	2002      	movs	r0, #2
 8000802:	f000 feb1 	bl	8001568 <HAL_NVIC_EnableIRQ>
  }
}
 8000806:	b00e      	add	sp, #56	; 0x38
 8000808:	bd10      	pop	{r4, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40002800 	.word	0x40002800
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_MspInit>:
#include "sys_debug.h"

#define ENABLE_FAST_WAKEUP
void HAL_MspInit(void)
{
	__HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_MspInit+0x28>)
 8000818:	055b      	lsls	r3, r3, #21
 800081a:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 800081c:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 800081e:	430b      	orrs	r3, r1
 8000820:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_DisablePVD();
 8000822:	f001 f9ef 	bl	8001c04 <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 8000826:	f001 f9ff 	bl	8001c28 <HAL_PWREx_EnableUltraLowPower>
	__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800082a:	2308      	movs	r3, #8
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_MspInit+0x2c>)
 800082e:	6811      	ldr	r1, [r2, #0]
 8000830:	430b      	orrs	r3, r1
 8000832:	6013      	str	r3, [r2, #0]
	DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

	#ifdef ENABLE_FAST_WAKEUP
		HAL_PWREx_EnableFastWakeUp();
 8000834:	f001 f9ee 	bl	8001c14 <HAL_PWREx_EnableFastWakeUp>
	#else
		HAL_PWREx_DisableFastWakeUp();
	#endif
}
 8000838:	bd10      	pop	{r4, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000
 8000840:	40022000 	.word	0x40022000

08000844 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_usart1_tx;
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart2_tx;
extern UART_HandleTypeDef huart2;

void NMI_Handler(void){ while (1){}}
 8000844:	e7fe      	b.n	8000844 <NMI_Handler>

08000846 <HardFault_Handler>:
void HardFault_Handler(void){ while (1){}}
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler>

08000848 <SVC_Handler>:
void MemManage_Handler(void){ while (1){}}
void BusFault_Handler(void){ while (1){}}
void UsageFault_Handler(void){ while (1){}}
void SVC_Handler(void){}
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:
void DebugMon_Handler(void){}
void PendSV_Handler(void){}
void SysTick_Handler(void)
{
 800084c:	b510      	push	{r4, lr}
	RtCountSystick_u32++;
 800084e:	4a03      	ldr	r2, [pc, #12]	; (800085c <SysTick_Handler+0x10>)
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	6013      	str	r3, [r2, #0]
	HAL_IncTick();
 8000856:	f000 fced 	bl	8001234 <HAL_IncTick>
}
 800085a:	bd10      	pop	{r4, pc}
 800085c:	2000136c 	.word	0x2000136c

08000860 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8000860:	b510      	push	{r4, lr}
	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <EXTI0_1_IRQHandler+0x10>)
 8000864:	f000 ff54 	bl	8001710 <HAL_EXTI_IRQHandler>
		HAL_EXTI_IRQHandler(&H_EXTI_1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <EXTI0_1_IRQHandler+0x14>)
 800086a:	f000 ff51 	bl	8001710 <HAL_EXTI_IRQHandler>
	#endif
}
 800086e:	bd10      	pop	{r4, pc}
 8000870:	20000268 	.word	0x20000268
 8000874:	20000260 	.word	0x20000260

08000878 <EXTI2_3_IRQHandler>:
 8000878:	4770      	bx	lr
	...

0800087c <EXTI4_15_IRQHandler>:
		HAL_EXTI_IRQHandler(&H_EXTI_3);
	#endif
}

void EXTI4_15_IRQHandler(void)
{
 800087c:	b510      	push	{r4, lr}
	HAL_EXTI_IRQHandler(&H_EXTI_4);
 800087e:	4819      	ldr	r0, [pc, #100]	; (80008e4 <EXTI4_15_IRQHandler+0x68>)
 8000880:	f000 ff46 	bl	8001710 <HAL_EXTI_IRQHandler>
	#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
		HAL_EXTI_IRQHandler(&H_EXTI_10);
	#endif

	#if (defined(CMWX1ZZABZ0XX))
		HAL_EXTI_IRQHandler(&H_EXTI_13);
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <EXTI4_15_IRQHandler+0x6c>)
 8000886:	f000 ff43 	bl	8001710 <HAL_EXTI_IRQHandler>
	#endif

	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800088a:	2010      	movs	r0, #16
 800088c:	f001 f9ae 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8000890:	2020      	movs	r0, #32
 8000892:	f001 f9ab 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8000896:	2040      	movs	r0, #64	; 0x40
 8000898:	f001 f9a8 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800089c:	2080      	movs	r0, #128	; 0x80
 800089e:	f001 f9a5 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	0040      	lsls	r0, r0, #1
 80008a6:	f001 f9a1 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	0080      	lsls	r0, r0, #2
 80008ae:	f001 f99d 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 80008b2:	2080      	movs	r0, #128	; 0x80
 80008b4:	00c0      	lsls	r0, r0, #3
 80008b6:	f001 f999 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	0100      	lsls	r0, r0, #4
 80008be:	f001 f995 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 80008c2:	2080      	movs	r0, #128	; 0x80
 80008c4:	0140      	lsls	r0, r0, #5
 80008c6:	f001 f991 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 80008ca:	2080      	movs	r0, #128	; 0x80
 80008cc:	0180      	lsls	r0, r0, #6
 80008ce:	f001 f98d 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	01c0      	lsls	r0, r0, #7
 80008d6:	f001 f989 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	0200      	lsls	r0, r0, #8
 80008de:	f001 f985 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
}
 80008e2:	bd10      	pop	{r4, pc}
 80008e4:	20000258 	.word	0x20000258
 80008e8:	20000270 	.word	0x20000270

080008ec <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler(void)
{
 80008ec:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008ee:	4802      	ldr	r0, [pc, #8]	; (80008f8 <DMA1_Channel2_3_IRQHandler+0xc>)
 80008f0:	f000 feb5 	bl	800165e <HAL_DMA_IRQHandler>
}
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200011c4 	.word	0x200011c4

080008fc <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80008fc:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008fe:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8000900:	f000 fead 	bl	800165e <HAL_DMA_IRQHandler>
}
 8000904:	bd10      	pop	{r4, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	2000117c 	.word	0x2000117c

0800090c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
	#ifdef DEVICE_TYPE_STATION
		uint8_t	TempRecieve_u8 = 0;
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <USART1_IRQHandler+0x30>)
{
 800090e:	b570      	push	{r4, r5, r6, lr}
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 8000910:	6803      	ldr	r3, [r0, #0]
 8000912:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <USART1_IRQHandler+0x34>)
 8000916:	889a      	ldrh	r2, [r3, #4]
 8000918:	6819      	ldr	r1, [r3, #0]
 800091a:	1c55      	adds	r5, r2, #1
 800091c:	809d      	strh	r5, [r3, #4]
		TempRecieve_u8 = (uint8_t)(huart1.Instance->RDR & 0x00FF);
 800091e:	548c      	strb	r4, [r1, r2]
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
			sUartDebug.Length_u16 = 0;
 8000920:	2196      	movs	r1, #150	; 0x96
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
 8000922:	889a      	ldrh	r2, [r3, #4]
			sUartDebug.Length_u16 = 0;
 8000924:	00c9      	lsls	r1, r1, #3
 8000926:	428a      	cmp	r2, r1
 8000928:	4189      	sbcs	r1, r1
 800092a:	400a      	ands	r2, r1
 800092c:	809a      	strh	r2, [r3, #4]
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
 800092e:	2201      	movs	r2, #1
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <USART1_IRQHandler+0x38>)
 8000932:	3302      	adds	r3, #2
 8000934:	77da      	strb	r2, [r3, #31]
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
			sUartDebug.Length_u16 = 0;
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
	#endif
	HAL_UART_IRQHandler(&huart1);
 8000936:	f002 fc2d 	bl	8003194 <HAL_UART_IRQHandler>
}
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	20001290 	.word	0x20001290
 8000940:	200000b8 	.word	0x200000b8
 8000944:	20000024 	.word	0x20000024

08000948 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
	#ifdef DEVICE_TYPE_STATION
		uint8_t	TempRecieve_u8 = 0;
		TempRecieve_u8 = (uint8_t)(huart2.Instance->RDR & 0x00FF);
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <USART2_IRQHandler+0x30>)
{
 800094a:	b570      	push	{r4, r5, r6, lr}
		TempRecieve_u8 = (uint8_t)(huart2.Instance->RDR & 0x00FF);
 800094c:	6803      	ldr	r3, [r0, #0]
 800094e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		*(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = TempRecieve_u8;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <USART2_IRQHandler+0x34>)
 8000952:	889a      	ldrh	r2, [r3, #4]
 8000954:	6819      	ldr	r1, [r3, #0]
 8000956:	1c55      	adds	r5, r2, #1
 8000958:	809d      	strh	r5, [r3, #4]
		TempRecieve_u8 = (uint8_t)(huart2.Instance->RDR & 0x00FF);
 800095a:	548c      	strb	r4, [r1, r2]
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
		sUartDebug.Length_u16 = 0;
 800095c:	2196      	movs	r1, #150	; 0x96
		if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
 800095e:	889a      	ldrh	r2, [r3, #4]
		sUartDebug.Length_u16 = 0;
 8000960:	00c9      	lsls	r1, r1, #3
 8000962:	428a      	cmp	r2, r1
 8000964:	4189      	sbcs	r1, r1
 8000966:	400a      	ands	r2, r1
 8000968:	809a      	strh	r2, [r3, #4]
		sEventAppCom[_EVENT_UART_DEBUG].e_status = 1;
 800096a:	2201      	movs	r2, #1
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <USART2_IRQHandler+0x38>)
 800096e:	3302      	adds	r3, #2
 8000970:	77da      	strb	r2, [r3, #31]
	#else
	#endif
	HAL_UART_IRQHandler(&huart2);
 8000972:	f002 fc0f 	bl	8003194 <HAL_UART_IRQHandler>
}
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	2000120c 	.word	0x2000120c
 800097c:	200000b8 	.word	0x200000b8
 8000980:	20000024 	.word	0x20000024

08000984 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8000984:	b510      	push	{r4, lr}
	HAL_RTC_AlarmIRQHandler(&hrtc);
 8000986:	4802      	ldr	r0, [pc, #8]	; (8000990 <RTC_IRQHandler+0xc>)
 8000988:	f001 fe56 	bl	8002638 <HAL_RTC_AlarmIRQHandler>
}
 800098c:	bd10      	pop	{r4, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	200001cc 	.word	0x200001cc

08000994 <tiny_snprintf_like.constprop.0>:
void UTIL_ADV_TRACE_PostSendHook(void)
{
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8000994:	b40c      	push	{r2, r3}
 8000996:	b507      	push	{r0, r1, r2, lr}
{
	va_list vaArgs;
	va_start(vaArgs, strFormat);
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000998:	2110      	movs	r1, #16
	va_start(vaArgs, strFormat);
 800099a:	ab05      	add	r3, sp, #20
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <tiny_snprintf_like.constprop.0+0x18>)
	va_start(vaArgs, strFormat);
 800099e:	9301      	str	r3, [sp, #4]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80009a0:	f006 fe4e 	bl	8007640 <tiny_vsnprintf_like>
	va_end(vaArgs);
}
 80009a4:	b003      	add	sp, #12
 80009a6:	bc08      	pop	{r3}
 80009a8:	b002      	add	sp, #8
 80009aa:	4718      	bx	r3
 80009ac:	080085e4 	.word	0x080085e4

080009b0 <TimestampNow>:
{
 80009b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80009b2:	0004      	movs	r4, r0
	SysTime_t curtime = SysTimeGet();
 80009b4:	ae02      	add	r6, sp, #8
 80009b6:	0030      	movs	r0, r6
{
 80009b8:	000d      	movs	r5, r1
	SysTime_t curtime = SysTimeGet();
 80009ba:	f006 fe19 	bl	80075f0 <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80009be:	2104      	movs	r1, #4
 80009c0:	5e73      	ldrsh	r3, [r6, r1]
 80009c2:	0020      	movs	r0, r4
 80009c4:	2110      	movs	r1, #16
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <TimestampNow+0x2c>)
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	9b02      	ldr	r3, [sp, #8]
 80009cc:	f7ff ffe2 	bl	8000994 <tiny_snprintf_like.constprop.0>
	*size = strlen((char *)buff);
 80009d0:	0020      	movs	r0, r4
 80009d2:	f7ff fb99 	bl	8000108 <strlen>
 80009d6:	8028      	strh	r0, [r5, #0]
}
 80009d8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	080085e4 	.word	0x080085e4

080009e0 <SystemApp_Init>:
{
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2501      	movs	r5, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	2602      	movs	r6, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2704      	movs	r7, #4
{
 80009e8:	b08b      	sub	sp, #44	; 0x2c
	UTIL_TIMER_Init();
 80009ea:	f006 fb1d 	bl	8007028 <UTIL_TIMER_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	220c      	movs	r2, #12
 80009f0:	2100      	movs	r1, #0
 80009f2:	a807      	add	r0, sp, #28
 80009f4:	f006 ffba 	bl	800796c <memset>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009f8:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4c2c      	ldr	r4, [pc, #176]	; (8000aac <SystemApp_Init+0xcc>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	a905      	add	r1, sp, #20
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	432b      	orrs	r3, r5
 8000a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	402b      	ands	r3, r5
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a12:	4333      	orrs	r3, r6
 8000a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a18:	4033      	ands	r3, r6
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a20:	433b      	orrs	r3, r7
 8000a22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a26:	403b      	ands	r3, r7
 8000a28:	9303      	str	r3, [sp, #12]
 8000a2a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a34:	4013      	ands	r3, r2
 8000a36:	9304      	str	r3, [sp, #16]
 8000a38:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <SystemApp_Init+0xd0>)
 8000a40:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f000 ff79 	bl	8001938 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <SystemApp_Init+0xd4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	a905      	add	r1, sp, #20
 8000a4a:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <SystemApp_Init+0xd8>)
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000a4c:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f000 ff73 	bl	8001938 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	a905      	add	r1, sp, #20
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <SystemApp_Init+0xdc>)
 8000a56:	f000 ff6f 	bl	8001938 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5a:	a905      	add	r1, sp, #20
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <SystemApp_Init+0xe0>)
 8000a5e:	f000 ff6b 	bl	8001938 <HAL_GPIO_Init>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000a62:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000a64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a66:	43ab      	bics	r3, r5
 8000a68:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a6c:	43b3      	bics	r3, r6
 8000a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000a70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a72:	43bb      	bics	r3, r7
 8000a74:	62e3      	str	r3, [r4, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a78:	4393      	bics	r3, r2
 8000a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
	DBG_Disable();
 8000a7c:	f000 f83a 	bl	8000af4 <DBG_Disable>
	DBG_ProbesInit();
 8000a80:	f000 f83c 	bl	8000afc <DBG_ProbesInit>
	UTIL_ADV_TRACE_Init();
 8000a84:	f006 fd3c 	bl	8007500 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <SystemApp_Init+0xe4>)
 8000a8a:	f006 fd53 	bl	8007534 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a8e:	0030      	movs	r0, r6
 8000a90:	f006 fd56 	bl	8007540 <UTIL_ADV_TRACE_SetVerboseLevel>
	Sx_Board_Bus_Init();
 8000a94:	f000 fb42 	bl	800111c <CMWX1ZZABZ0XX_RADIO_Bus_Init>
	Sx_Board_IoInit();
 8000a98:	f000 f990 	bl	8000dbc <CMWX1ZZABZ0XX_RADIO_IoInit>
	UTIL_LPM_Init();
 8000a9c:	f005 ffd8 	bl	8006a50 <UTIL_LPM_Init>
		UTIL_LPM_SetStopMode( UTIL_LPM_DISABLE );
 8000aa0:	0028      	movs	r0, r5
 8000aa2:	f005 ffc7 	bl	8006a34 <UTIL_LPM_SetStopMode>
}
 8000aa6:	b00b      	add	sp, #44	; 0x2c
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	00009fff 	.word	0x00009fff
 8000ab4:	0000ffff 	.word	0x0000ffff
 8000ab8:	50000400 	.word	0x50000400
 8000abc:	50000800 	.word	0x50000800
 8000ac0:	50001c00 	.word	0x50001c00
 8000ac4:	080009b1 	.word	0x080009b1

08000ac8 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000ac8:	b510      	push	{r4, lr}
	UTIL_LPM_SetStopMode(UTIL_LPM_ENABLE);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f005 ffb2 	bl	8006a34 <UTIL_LPM_SetStopMode>
}
 8000ad0:	bd10      	pop	{r4, pc}
	...

08000ad4 <DBG_ConfigForLpm.part.0>:
		#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
	#endif /* DEBUGGER_OFF */

	if (enable_dbg == 1)
	{
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 8000ad8:	b510      	push	{r4, lr}
		__HAL_RCC_DBGMCU_CLK_ENABLE();
 8000ada:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000adc:	03db      	lsls	r3, r3, #15
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34

		HAL_DBGMCU_EnableDBGSleepMode();
 8000ae2:	f000 fbcb 	bl	800127c <HAL_DBGMCU_EnableDBGSleepMode>
		HAL_DBGMCU_EnableDBGStopMode();
 8000ae6:	f000 fbd9 	bl	800129c <HAL_DBGMCU_EnableDBGStopMode>
		HAL_DBGMCU_EnableDBGStandbyMode();
 8000aea:	f000 fbe7 	bl	80012bc <HAL_DBGMCU_EnableDBGStandbyMode>
		HAL_DBGMCU_DisableDBGSleepMode();
		HAL_DBGMCU_DisableDBGStopMode();
		HAL_DBGMCU_DisableDBGStandbyMode();
		__HAL_RCC_DBGMCU_CLK_DISABLE();
	}
}
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <DBG_Disable>:
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	f7ff ffed 	bl	8000ad4 <DBG_ConfigForLpm.part.0>
}
 8000afa:	bd10      	pop	{r4, pc}

08000afc <DBG_ProbesInit>:
		HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);

	#elif !defined (PROBE_PINS_ENABLED)
		#error "PROBE_PINS_ENABLED not defined or out of range <0,1>"
	#endif /* PROBE_PINS_ENABLED */
}
 8000afc:	4770      	bx	lr
	...

08000b00 <vcom_Init>:

static void (*TxCpltCallback)(void *);
static void (*RxCpltCallback)(uint8_t *rxChar, uint16_t size, uint8_t error);

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8000b00:	b510      	push	{r4, lr}
	TxCpltCallback = cb;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <vcom_Init+0x14>)
 8000b04:	6018      	str	r0, [r3, #0]
	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
 8000b06:	f005 fe43 	bl	8006790 <MX_USART1_UART_Init>
		MX_USART2_UART_Init();
 8000b0a:	f005 fe5d 	bl	80067c8 <MX_USART2_UART_Init>
	#else
		MX_USART1_UART_Init();
	#endif
	return UTIL_ADV_TRACE_OK;
}
 8000b0e:	2000      	movs	r0, #0
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	200001f0 	.word	0x200001f0

08000b18 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
#ifdef DEVICE_TYPE_STATION
	__HAL_RCC_USART1_FORCE_RESET();
 8000b18:	2380      	movs	r3, #128	; 0x80
{
 8000b1a:	b510      	push	{r4, lr}
	__HAL_RCC_USART1_FORCE_RESET();
 8000b1c:	4c0c      	ldr	r4, [pc, #48]	; (8000b50 <vcom_DeInit+0x38>)
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	6a62      	ldr	r2, [r4, #36]	; 0x24
	__HAL_RCC_USART1_RELEASE_RESET();
	HAL_UART_MspDeInit(&huart1);
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <vcom_DeInit+0x3c>)
	__HAL_RCC_USART1_FORCE_RESET();
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6263      	str	r3, [r4, #36]	; 0x24
	__HAL_RCC_USART1_RELEASE_RESET();
 8000b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <vcom_DeInit+0x40>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	6263      	str	r3, [r4, #36]	; 0x24
	HAL_UART_MspDeInit(&huart1);
 8000b30:	f005 fee0 	bl	80068f4 <HAL_UART_MspDeInit>
	__HAL_RCC_USART2_FORCE_RESET();
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b38:	029b      	lsls	r3, r3, #10
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	62a3      	str	r3, [r4, #40]	; 0x28
	__HAL_RCC_USART2_RELEASE_RESET();
 8000b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <vcom_DeInit+0x44>)
	HAL_UART_MspDeInit(&huart2);
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <vcom_DeInit+0x48>)
	__HAL_RCC_USART2_RELEASE_RESET();
 8000b44:	4013      	ands	r3, r2
 8000b46:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_UART_MspDeInit(&huart2);
 8000b48:	f005 fed4 	bl	80068f4 <HAL_UART_MspDeInit>
	__HAL_RCC_USART1_FORCE_RESET();
	__HAL_RCC_USART1_RELEASE_RESET();
	HAL_UART_MspDeInit(&huart1);
#endif
	return UTIL_ADV_TRACE_OK;
}
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	bd10      	pop	{r4, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	20001290 	.word	0x20001290
 8000b58:	ffffbfff 	.word	0xffffbfff
 8000b5c:	fffdffff 	.word	0xfffdffff
 8000b60:	2000120c 	.word	0x2000120c

08000b64 <vcom_Trace_DMA>:
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
	#endif
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
	#ifdef DEVICE_TYPE_STATION
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8000b66:	26fa      	movs	r6, #250	; 0xfa
{
 8000b68:	0004      	movs	r4, r0
 8000b6a:	000d      	movs	r5, r1
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
 8000b6c:	00b6      	lsls	r6, r6, #2
 8000b6e:	0033      	movs	r3, r6
 8000b70:	000a      	movs	r2, r1
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <vcom_Trace_DMA+0x30>)
 8000b74:	0021      	movs	r1, r4
 8000b76:	f002 fe71 	bl	800385c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, p_data, size, 1000);
 8000b7a:	0033      	movs	r3, r6
 8000b7c:	002a      	movs	r2, r5
 8000b7e:	0021      	movs	r1, r4
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <vcom_Trace_DMA+0x34>)
 8000b82:	f002 fe6b 	bl	800385c <HAL_UART_Transmit>
	#else
		HAL_UART_Transmit(&huart1, p_data, size, 1000);
	#endif
	TxCpltCallback(NULL);
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <vcom_Trace_DMA+0x38>)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4798      	blx	r3
	return UTIL_ADV_TRACE_OK;
}
 8000b8e:	2000      	movs	r0, #0
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20001290 	.word	0x20001290
 8000b98:	2000120c 	.word	0x2000120c
 8000b9c:	200001f0 	.word	0x200001f0

08000ba0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
	RxCpltCallback = RxCb;
	#ifdef DEVICE_TYPE_STATION
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000ba0:	2280      	movs	r2, #128	; 0x80
{
 8000ba2:	b510      	push	{r4, lr}
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <vcom_ReceiveInit+0x48>)
 8000ba6:	0252      	lsls	r2, r2, #9
 8000ba8:	6803      	ldr	r3, [r0, #0]
 8000baa:	69d9      	ldr	r1, [r3, #28]
 8000bac:	4211      	tst	r1, r2
 8000bae:	d1fc      	bne.n	8000baa <vcom_ReceiveInit+0xa>
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	03d2      	lsls	r2, r2, #15
 8000bb4:	69d9      	ldr	r1, [r3, #28]
 8000bb6:	4211      	tst	r1, r2
 8000bb8:	d0fc      	beq.n	8000bb4 <vcom_ReceiveInit+0x14>
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8000bba:	4c0c      	ldr	r4, [pc, #48]	; (8000bec <vcom_ReceiveInit+0x4c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	1d21      	adds	r1, r4, #4
 8000bc0:	f002 ff70 	bl	8003aa4 <HAL_UART_Receive_IT>
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <vcom_ReceiveInit+0x50>)
 8000bc8:	0252      	lsls	r2, r2, #9
 8000bca:	6803      	ldr	r3, [r0, #0]
 8000bcc:	69d9      	ldr	r1, [r3, #28]
 8000bce:	4211      	tst	r1, r2
 8000bd0:	d1fc      	bne.n	8000bcc <vcom_ReceiveInit+0x2c>
		while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	03d2      	lsls	r2, r2, #15
 8000bd6:	69d9      	ldr	r1, [r3, #28]
 8000bd8:	4211      	tst	r1, r2
 8000bda:	d0fc      	beq.n	8000bd6 <vcom_ReceiveInit+0x36>
		HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	1d21      	adds	r1, r4, #4
 8000be0:	f002 ff60 	bl	8003aa4 <HAL_UART_Receive_IT>
		while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
		HAL_UART_Receive_IT(&huart1, &charRx, 1);
	#endif

	return UTIL_ADV_TRACE_OK;
}
 8000be4:	2000      	movs	r0, #0
 8000be6:	bd10      	pop	{r4, pc}
 8000be8:	20001290 	.word	0x20001290
 8000bec:	200001f0 	.word	0x200001f0
 8000bf0:	2000120c 	.word	0x2000120c

08000bf4 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c22:	f000 faa3 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f006 feaf 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fdbb 	bl	80007a4 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
   ldr   r0, =_estack
 8000c30:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8000c3c:	08008be0 	.word	0x08008be0
  ldr r2, =_sbss
 8000c40:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000c44:	200017e0 	.word	0x200017e0

08000c48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_COMP_IRQHandler>
	...

08000c4c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <_sbrk+0x2c>)
{
 8000c4e:	0003      	movs	r3, r0
	if (heap_end == 0)
 8000c50:	6811      	ldr	r1, [r2, #0]
{
 8000c52:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d101      	bne.n	8000c5c <_sbrk+0x10>
		heap_end = &end;
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <_sbrk+0x30>)
 8000c5a:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000c5c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000c5e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000c60:	18c3      	adds	r3, r0, r3
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d906      	bls.n	8000c74 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c66:	f006 fe89 	bl	800797c <__errno>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000c72:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8000c74:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8000c76:	e7fc      	b.n	8000c72 <_sbrk+0x26>
 8000c78:	200001f8 	.word	0x200001f8
 8000c7c:	200017e0 	.word	0x200017e0

08000c80 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c80:	23fa      	movs	r3, #250	; 0xfa
{
 8000c82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c84:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c86:	009b      	lsls	r3, r3, #2
{
 8000c88:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <BSP_SPI1_SendRecv+0x28>)
 8000c8e:	0013      	movs	r3, r2
 8000c90:	000a      	movs	r2, r1
 8000c92:	0029      	movs	r1, r5
 8000c94:	f002 f8e4 	bl	8002e60 <HAL_SPI_TransmitReceive>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d101      	bne.n	8000ca0 <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 8000c9c:	0020      	movs	r0, r4
  }
  return ret;
}
 8000c9e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	4240      	negs	r0, r0
  return ret;
 8000ca4:	e7fb      	b.n	8000c9e <BSP_SPI1_SendRecv+0x1e>
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000200 	.word	0x20000200

08000cac <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI1_Init+0x54>)
{
 8000cae:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8000cb0:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000cb2:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000cb4:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000cba:	33fc      	adds	r3, #252	; 0xfc
 8000cbc:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000cbe:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc2:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc4:	6145      	str	r5, [r0, #20]
{
 8000cc6:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8000cc8:	f001 fb68 	bl	800239c <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8000ccc:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8000cce:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8000cd0:	490d      	ldr	r1, [pc, #52]	; (8000d08 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	d80d      	bhi.n	8000cf2 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000cda:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000cde:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8000ce0:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8000ce2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	f002 f853 	bl	8002d90 <HAL_SPI_Init>
 8000cea:	1e43      	subs	r3, r0, #1
 8000cec:	4198      	sbcs	r0, r3
  return ret;
 8000cee:	b2c0      	uxtb	r0, r0
}
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8000cf2:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8000cf4:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8000cf6:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d0ec      	beq.n	8000cd6 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8000cfc:	0840      	lsrs	r0, r0, #1
 8000cfe:	e7e8      	b.n	8000cd2 <MX_SPI1_Init+0x26>
 8000d00:	40013000 	.word	0x40013000
 8000d04:	00989680 	.word	0x00989680
 8000d08:	080082a0 	.word	0x080082a0

08000d0c <BSP_SPI1_Init>:
{
 8000d0c:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8000d0e:	4d1b      	ldr	r5, [pc, #108]	; (8000d7c <BSP_SPI1_Init+0x70>)
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000d12:	0028      	movs	r0, r5
{
 8000d14:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8000d16:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000d18:	f002 f9f4 	bl	8003104 <HAL_SPI_GetState>
 8000d1c:	1e04      	subs	r4, r0, #0
 8000d1e:	d002      	beq.n	8000d26 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8000d20:	2000      	movs	r0, #0
}
 8000d22:	b007      	add	sp, #28
 8000d24:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <BSP_SPI1_Init+0x78>)
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000d36:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d38:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d40:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000d42:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d44:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000d46:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d48:	f000 fdf6 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000d4c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000d4e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000d50:	a901      	add	r1, sp, #4
 8000d52:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000d54:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000d56:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000d58:	f000 fdee 	bl	8001938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000d5c:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000d5e:	480a      	ldr	r0, [pc, #40]	; (8000d88 <BSP_SPI1_Init+0x7c>)
 8000d60:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000d62:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000d64:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000d66:	f000 fde7 	bl	8001938 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	f7ff ff9e 	bl	8000cac <MX_SPI1_Init>
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d0d5      	beq.n	8000d20 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8000d74:	2008      	movs	r0, #8
 8000d76:	4240      	negs	r0, r0
  return ret;
 8000d78:	e7d3      	b.n	8000d22 <BSP_SPI1_Init+0x16>
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000200 	.word	0x20000200
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	50000400 	.word	0x50000400

08000d8c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	4770      	bx	lr

08000d90 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8000d90:	0002      	movs	r2, r0
 8000d92:	b510      	push	{r4, lr}

  if (state == SET)
 8000d94:	2801      	cmp	r0, #1
 8000d96:	d109      	bne.n	8000dac <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	20a0      	movs	r0, #160	; 0xa0
 8000d9c:	0149      	lsls	r1, r1, #5
 8000d9e:	05c0      	lsls	r0, r0, #23
 8000da0:	f000 ff14 	bl	8001bcc <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8000da4:	2005      	movs	r0, #5
 8000da6:	f000 fa57 	bl	8001258 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8000daa:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	20a0      	movs	r0, #160	; 0xa0
 8000db0:	2200      	movs	r2, #0
 8000db2:	0149      	lsls	r1, r1, #5
 8000db4:	05c0      	lsls	r0, r0, #23
 8000db6:	f000 ff09 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8000dba:	e7f6      	b.n	8000daa <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08000dbc <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8000dbc:	2300      	movs	r3, #0
{
 8000dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dc0:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8000dc2:	2204      	movs	r2, #4
{
 8000dc4:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dc6:	4c65      	ldr	r4, [pc, #404]	; (8000f5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8000dc8:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000dcc:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dce:	433b      	orrs	r3, r7
 8000dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000dd4:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8000dd6:	403b      	ands	r3, r7
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8000ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000dde:	4e60      	ldr	r6, [pc, #384]	; (8000f60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8000de0:	433b      	orrs	r3, r7
 8000de2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000de6:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8000de8:	403b      	ands	r3, r7
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8000dee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000df0:	433b      	orrs	r3, r7
 8000df2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000df6:	403b      	ands	r3, r7
 8000df8:	9303      	str	r3, [sp, #12]
 8000dfa:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8000dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000e04:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8000e06:	4013      	ands	r3, r2
 8000e08:	9304      	str	r3, [sp, #16]
 8000e0a:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e0c:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e0e:	0001      	movs	r1, r0
 8000e10:	4854      	ldr	r0, [pc, #336]	; (8000f64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e12:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e14:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8000e16:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e18:	f000 fd8e 	bl	8001938 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e1c:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e1e:	a80c      	add	r0, sp, #48	; 0x30
 8000e20:	0001      	movs	r1, r0
 8000e22:	4850      	ldr	r0, [pc, #320]	; (8000f64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e24:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e26:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e28:	f000 fd86 	bl	8001938 <HAL_GPIO_Init>
 8000e2c:	a80c      	add	r0, sp, #48	; 0x30
 8000e2e:	0001      	movs	r1, r0
 8000e30:	484c      	ldr	r0, [pc, #304]	; (8000f64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e32:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e34:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e36:	f000 fd7f 	bl	8001938 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e3a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e3c:	a80c      	add	r0, sp, #48	; 0x30
 8000e3e:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e40:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e42:	484a      	ldr	r0, [pc, #296]	; (8000f6c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000e44:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000e46:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000e48:	f000 fd76 	bl	8001938 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8000e4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e4e:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8000e50:	433b      	orrs	r3, r7
 8000e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8000e58:	403b      	ands	r3, r7
 8000e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8000e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e60:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8000e62:	432b      	orrs	r3, r5
 8000e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e68:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8000e6a:	402b      	ands	r3, r5
 8000e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8000e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8000e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e72:	432b      	orrs	r3, r5
 8000e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8000e7a:	402b      	ands	r3, r5
 8000e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8000e80:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e82:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8000e84:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e86:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8000e88:	3380      	adds	r3, #128	; 0x80
 8000e8a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8e:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e90:	f000 fd52 	bl	8001938 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8000e94:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e96:	a811      	add	r0, sp, #68	; 0x44
 8000e98:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8000e9a:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e9c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8000e9e:	3340      	adds	r3, #64	; 0x40
 8000ea0:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000ea2:	f000 fd49 	bl	8001938 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8000ea6:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ea8:	a811      	add	r0, sp, #68	; 0x44
 8000eaa:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8000eac:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000eae:	482d      	ldr	r0, [pc, #180]	; (8000f64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000eb4:	f000 fd40 	bl	8001938 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8000eb8:	2080      	movs	r0, #128	; 0x80
 8000eba:	0200      	lsls	r0, r0, #8
 8000ebc:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8000ec0:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8000ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ec4:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8000ec6:	432b      	orrs	r3, r5
 8000ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ecc:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8000ece:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ed0:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8000ed2:	9305      	str	r3, [sp, #20]
 8000ed4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8000ed6:	f000 fd2f 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	002a      	movs	r2, r5
 8000ede:	0030      	movs	r0, r6
 8000ee0:	0209      	lsls	r1, r1, #8
 8000ee2:	f000 fe73 	bl	8001bcc <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8000ee6:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8000ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000eea:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8000eec:	432b      	orrs	r3, r5
 8000eee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8000ef2:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 8000ef4:	402b      	ands	r3, r5
 8000ef6:	9306      	str	r3, [sp, #24]
 8000ef8:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8000efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000efc:	432b      	orrs	r3, r5
 8000efe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f02:	402b      	ands	r3, r5
 8000f04:	9307      	str	r3, [sp, #28]
 8000f06:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8000f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f10:	4013      	ands	r3, r2
 8000f12:	9308      	str	r3, [sp, #32]
 8000f14:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8000f16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f1e:	0014      	movs	r4, r2
 8000f20:	4013      	ands	r3, r2
 8000f22:	9311      	str	r3, [sp, #68]	; 0x44
 8000f24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8000f2a:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8000f2c:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8000f2e:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8000f30:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8000f32:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8000f36:	f000 fcff 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8000f3a:	0030      	movs	r0, r6
 8000f3c:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8000f3e:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8000f40:	f000 fcfa 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8000f44:	a90c      	add	r1, sp, #48	; 0x30
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8000f48:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8000f4a:	f000 fcf5 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8000f50:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8000f52:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8000f54:	f000 fcf0 	bl	8001938 <HAL_GPIO_Init>
}
 8000f58:	b017      	add	sp, #92	; 0x5c
 8000f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	10110000 	.word	0x10110000
 8000f64:	50000400 	.word	0x50000400
 8000f68:	10310000 	.word	0x10310000
 8000f6c:	50000800 	.word	0x50000800

08000f70 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8000f72:	2608      	movs	r6, #8
{
 8000f74:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8000f76:	0032      	movs	r2, r6
 8000f78:	2100      	movs	r1, #0
 8000f7a:	a803      	add	r0, sp, #12
 8000f7c:	f006 fcf6 	bl	800796c <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8000f80:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000f82:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f84:	4c22      	ldr	r4, [pc, #136]	; (8001010 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f86:	4f23      	ldr	r7, [pc, #140]	; (8001014 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f88:	4669      	mov	r1, sp
 8000f8a:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8000f8c:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f8e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000f90:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f92:	f000 fcd1 	bl	8001938 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000f98:	4669      	mov	r1, sp
 8000f9a:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000f9c:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000f9e:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fa0:	f000 fcca 	bl	8001938 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fa4:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fa6:	4669      	mov	r1, sp
 8000fa8:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000faa:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fac:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fae:	f000 fcc3 	bl	8001938 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fb2:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fb4:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fb6:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fb8:	4818      	ldr	r0, [pc, #96]	; (800101c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8000fba:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8000fbc:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8000fbe:	f000 fcbb 	bl	8001938 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fc4:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8000fc8:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fca:	05ed      	lsls	r5, r5, #23
 8000fcc:	0028      	movs	r0, r5
 8000fce:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8000fd2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fd4:	f000 fcb0 	bl	8001938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8000fd8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000fda:	0028      	movs	r0, r5
 8000fdc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8000fde:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000fe0:	f000 fcaa 	bl	8001938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000fe4:	0020      	movs	r0, r4
 8000fe6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8000fe8:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000fea:	f000 fca5 	bl	8001938 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8000fee:	0039      	movs	r1, r7
 8000ff0:	0028      	movs	r0, r5
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f000 fdea 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8000ff8:	0028      	movs	r0, r5
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	f000 fde5 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	0031      	movs	r1, r6
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fde0 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800100c:	b00b      	add	sp, #44	; 0x2c
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	50000400 	.word	0x50000400
 8001014:	10110000 	.word	0x10110000
 8001018:	10310000 	.word	0x10310000
 800101c:	50000800 	.word	0x50000800

08001020 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8001020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001022:	9000      	str	r0, [sp, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001024:	f3ef 8310 	mrs	r3, PRIMASK
 8001028:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800102a:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800102c:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 800102e:	4e11      	ldr	r6, [pc, #68]	; (8001074 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8001030:	4d11      	ldr	r5, [pc, #68]	; (8001078 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8001032:	00e3      	lsls	r3, r4, #3
 8001034:	18f6      	adds	r6, r6, r3
 8001036:	00a7      	lsls	r7, r4, #2
 8001038:	5979      	ldr	r1, [r7, r5]
 800103a:	0030      	movs	r0, r6
 800103c:	f000 fb61 	bl	8001702 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8001040:	9b00      	ldr	r3, [sp, #0]
 8001042:	2100      	movs	r1, #0
 8001044:	59da      	ldr	r2, [r3, r7]
 8001046:	0030      	movs	r0, r6
 8001048:	f000 fb54 	bl	80016f4 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 800104c:	002b      	movs	r3, r5
 800104e:	3310      	adds	r3, #16
 8001050:	56e6      	ldrsb	r6, [r4, r3]
 8001052:	3514      	adds	r5, #20
 8001054:	2200      	movs	r2, #0
 8001056:	0030      	movs	r0, r6
 8001058:	5979      	ldr	r1, [r7, r5]
 800105a:	f000 fa5b 	bl	8001514 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800105e:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8001060:	0030      	movs	r0, r6
 8001062:	f000 fa81 	bl	8001568 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001066:	2c04      	cmp	r4, #4
 8001068:	d1e1      	bne.n	800102e <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	f383 8810 	msr	PRIMASK, r3
}
 8001070:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	20000258 	.word	0x20000258
 8001078:	080082c0 	.word	0x080082c0

0800107c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 800107c:	2000      	movs	r0, #0
 800107e:	4770      	bx	lr

08001080 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8001080:	3801      	subs	r0, #1
{
 8001082:	b510      	push	{r4, lr}
  switch (state)
 8001084:	2803      	cmp	r0, #3
 8001086:	d811      	bhi.n	80010ac <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8001088:	f7ff f850 	bl	800012c <__gnu_thumb1_case_uqi>
 800108c:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8001090:	20a0      	movs	r0, #160	; 0xa0
 8001092:	2201      	movs	r2, #1
 8001094:	2102      	movs	r1, #2
 8001096:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001098:	f000 fd98 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800109c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80010a4:	e7f8      	b.n	8001098 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80010a8:	2102      	movs	r1, #2
 80010aa:	e7fa      	b.n	80010a2 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80010ac:	20a0      	movs	r0, #160	; 0xa0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	05c0      	lsls	r0, r0, #23
 80010b4:	f000 fd8a 	bl	8001bcc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2104      	movs	r1, #4
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80010be:	f000 fd85 	bl	8001bcc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	e7f0      	b.n	80010a8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	50000800 	.word	0x50000800

080010cc <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 80010cc:	2001      	movs	r0, #1
 80010ce:	4770      	bx	lr

080010d0 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80010d4:	220c      	movs	r2, #12
 80010d6:	2100      	movs	r1, #0
 80010d8:	a803      	add	r0, sp, #12
 80010da:	f006 fc47 	bl	800796c <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80010e0:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80010e2:	4d0d      	ldr	r5, [pc, #52]	; (8001118 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 80010e4:	a901      	add	r1, sp, #4
 80010e6:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 80010e8:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80010ec:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80010ee:	f000 fc23 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	0021      	movs	r1, r4
 80010f6:	0028      	movs	r0, r5
 80010f8:	f000 fd68 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80010fc:	0020      	movs	r0, r4
 80010fe:	f000 f8ab 	bl	8001258 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001104:	0028      	movs	r0, r5
 8001106:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8001108:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800110a:	f000 fc15 	bl	8001938 <HAL_GPIO_Init>
  HAL_Delay(6);
 800110e:	2006      	movs	r0, #6
 8001110:	f000 f8a2 	bl	8001258 <HAL_Delay>
}
 8001114:	b007      	add	sp, #28
 8001116:	bd30      	pop	{r4, r5, pc}
 8001118:	50000800 	.word	0x50000800

0800111c <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 800111c:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 800111e:	f7ff fdf5 	bl	8000d0c <BSP_SPI1_Init>
}
 8001122:	bd10      	pop	{r4, pc}

08001124 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8001124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001126:	240e      	movs	r4, #14
{
 8001128:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800112a:	446c      	add	r4, sp
{
 800112c:	80d8      	strh	r0, [r3, #6]
 800112e:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	0021      	movs	r1, r4
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fda3 	bl	8000c80 <BSP_SPI1_SendRecv>
  return rxData;
 800113a:	8820      	ldrh	r0, [r4, #0]
}
 800113c:	b004      	add	sp, #16
 800113e:	bd10      	pop	{r4, pc}

08001140 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8001140:	0002      	movs	r2, r0
 8001142:	b510      	push	{r4, lr}
  if (state == 0)
 8001144:	2800      	cmp	r0, #0
 8001146:	d106      	bne.n	8001156 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	20a0      	movs	r0, #160	; 0xa0
 800114c:	0209      	lsls	r1, r1, #8
 800114e:	05c0      	lsls	r0, r0, #23
 8001150:	f000 fd3c 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8001154:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	e7f6      	b.n	8001148 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

0800115c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 800115c:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 800115e:	2102      	movs	r1, #2
 8001160:	4801      	ldr	r0, [pc, #4]	; (8001168 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8001162:	f000 fd2d 	bl	8001bc0 <HAL_GPIO_ReadPin>
}
 8001166:	bd10      	pop	{r4, pc}
 8001168:	50000400 	.word	0x50000400

0800116c <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <SystemInit+0x44>)
 8001170:	0052      	lsls	r2, r2, #1
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <SystemInit+0x48>)
 800117c:	400a      	ands	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <SystemInit+0x4c>)
 8001184:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001186:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001188:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	438a      	bics	r2, r1
 800118e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	490a      	ldr	r1, [pc, #40]	; (80011bc <SystemInit+0x50>)
 8001194:	400a      	ands	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	4909      	ldr	r1, [pc, #36]	; (80011c0 <SystemInit+0x54>)
 800119c:	400a      	ands	r2, r1
 800119e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <SystemInit+0x58>)
 80011a8:	0512      	lsls	r2, r2, #20
 80011aa:	609a      	str	r2, [r3, #8]
#endif
}
 80011ac:	4770      	bx	lr
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	40021000 	.word	0x40021000
 80011b4:	88ff400c 	.word	0x88ff400c
 80011b8:	fef6fff6 	.word	0xfef6fff6
 80011bc:	fffbffff 	.word	0xfffbffff
 80011c0:	ff02ffff 	.word	0xff02ffff
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	20fa      	movs	r0, #250	; 0xfa
 80011ce:	4e0d      	ldr	r6, [pc, #52]	; (8001204 <HAL_InitTick+0x3c>)
 80011d0:	0080      	lsls	r0, r0, #2
 80011d2:	7831      	ldrb	r1, [r6, #0]
 80011d4:	f7fe ffbe 	bl	8000154 <__udivsi3>
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <HAL_InitTick+0x40>)
 80011da:	0001      	movs	r1, r0
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	f7fe ffb9 	bl	8000154 <__udivsi3>
 80011e2:	f000 f9dd 	bl	80015a0 <HAL_SYSTICK_Config>
 80011e6:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d108      	bne.n	8001200 <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	2d03      	cmp	r5, #3
 80011f0:	d806      	bhi.n	8001200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f2:	3802      	subs	r0, #2
 80011f4:	0022      	movs	r2, r4
 80011f6:	0029      	movs	r1, r5
 80011f8:	f000 f98c 	bl	8001514 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	0020      	movs	r0, r4
 80011fe:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001200:	bd70      	pop	{r4, r5, r6, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	20000004 	.word	0x20000004
 8001208:	20000000 	.word	0x20000000

0800120c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	2302      	movs	r3, #2
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_Init+0x24>)
{
 8001210:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001212:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001214:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121a:	f7ff ffd5 	bl	80011c8 <HAL_InitTick>
 800121e:	1e04      	subs	r4, r0, #0
 8001220:	d103      	bne.n	800122a <HAL_Init+0x1e>
    HAL_MspInit();
 8001222:	f7ff faf7 	bl	8000814 <HAL_MspInit>
}
 8001226:	0020      	movs	r0, r4
 8001228:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800122a:	2401      	movs	r4, #1
 800122c:	e7fb      	b.n	8001226 <HAL_Init+0x1a>
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_IncTick+0x10>)
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_IncTick+0x14>)
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	185b      	adds	r3, r3, r1
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	4770      	bx	lr
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000278 	.word	0x20000278
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <HAL_GetTick+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
}
 8001250:	4770      	bx	lr
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000278 	.word	0x20000278

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fff6 	bl	800124c <HAL_GetTick>
 8001260:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	1c63      	adds	r3, r4, #1
 8001264:	d002      	beq.n	800126c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_Delay+0x20>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	42a0      	cmp	r0, r4
 8001274:	d3fa      	bcc.n	800126c <HAL_Delay+0x14>
  {
  }
}
 8001276:	bd70      	pop	{r4, r5, r6, pc}
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800127c:	2301      	movs	r3, #1
 800127e:	4a02      	ldr	r2, [pc, #8]	; (8001288 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001280:	6851      	ldr	r1, [r2, #4]
 8001282:	430b      	orrs	r3, r1
 8001284:	6053      	str	r3, [r2, #4]
}
 8001286:	4770      	bx	lr
 8001288:	40015800 	.word	0x40015800

0800128c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800128c:	2101      	movs	r1, #1
 800128e:	4a02      	ldr	r2, [pc, #8]	; (8001298 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8001290:	6853      	ldr	r3, [r2, #4]
 8001292:	438b      	bics	r3, r1
 8001294:	6053      	str	r3, [r2, #4]
}
 8001296:	4770      	bx	lr
 8001298:	40015800 	.word	0x40015800

0800129c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800129c:	2302      	movs	r3, #2
 800129e:	4a02      	ldr	r2, [pc, #8]	; (80012a8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80012a0:	6851      	ldr	r1, [r2, #4]
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6053      	str	r3, [r2, #4]
}
 80012a6:	4770      	bx	lr
 80012a8:	40015800 	.word	0x40015800

080012ac <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80012ac:	2102      	movs	r1, #2
 80012ae:	4a02      	ldr	r2, [pc, #8]	; (80012b8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80012b0:	6853      	ldr	r3, [r2, #4]
 80012b2:	438b      	bics	r3, r1
 80012b4:	6053      	str	r3, [r2, #4]
}
 80012b6:	4770      	bx	lr
 80012b8:	40015800 	.word	0x40015800

080012bc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80012bc:	2304      	movs	r3, #4
 80012be:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80012c0:	6851      	ldr	r1, [r2, #4]
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6053      	str	r3, [r2, #4]
}
 80012c6:	4770      	bx	lr
 80012c8:	40015800 	.word	0x40015800

080012cc <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80012cc:	2104      	movs	r1, #4
 80012ce:	4a02      	ldr	r2, [pc, #8]	; (80012d8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80012d0:	6853      	ldr	r3, [r2, #4]
 80012d2:	438b      	bics	r3, r1
 80012d4:	6053      	str	r3, [r2, #4]
}
 80012d6:	4770      	bx	lr
 80012d8:	40015800 	.word	0x40015800

080012dc <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <ADC_DelayMicroSecond+0x24>)
{
 80012de:	b513      	push	{r0, r1, r4, lr}
 80012e0:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <ADC_DelayMicroSecond+0x28>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	f7fe ff35 	bl	8000154 <__udivsi3>
 80012ea:	4344      	muls	r4, r0
 80012ec:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80012ee:	9b01      	ldr	r3, [sp, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d100      	bne.n	80012f6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80012f4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	e7f7      	b.n	80012ee <ADC_DelayMicroSecond+0x12>
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	20000000 	.word	0x20000000
 8001304:	000f4240 	.word	0x000f4240

08001308 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001308:	2103      	movs	r1, #3
 800130a:	6803      	ldr	r3, [r0, #0]
{
 800130c:	b570      	push	{r4, r5, r6, lr}
 800130e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001310:	6898      	ldr	r0, [r3, #8]
 8001312:	4008      	ands	r0, r1
 8001314:	2801      	cmp	r0, #1
 8001316:	d001      	beq.n	800131c <ADC_Disable+0x14>
  return HAL_OK;
 8001318:	2000      	movs	r0, #0
}
 800131a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4202      	tst	r2, r0
 8001320:	d0fa      	beq.n	8001318 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001322:	2205      	movs	r2, #5
 8001324:	689d      	ldr	r5, [r3, #8]
 8001326:	4015      	ands	r5, r2
 8001328:	2d01      	cmp	r5, #1
 800132a:	d119      	bne.n	8001360 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 800132c:	6898      	ldr	r0, [r3, #8]
 800132e:	3a03      	subs	r2, #3
 8001330:	4302      	orrs	r2, r0
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001336:	f7ff ff89 	bl	800124c <HAL_GetTick>
 800133a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	422b      	tst	r3, r5
 8001342:	d0e9      	beq.n	8001318 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001344:	f7ff ff82 	bl	800124c <HAL_GetTick>
 8001348:	1b80      	subs	r0, r0, r6
 800134a:	280a      	cmp	r0, #10
 800134c:	d9f6      	bls.n	800133c <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134e:	2310      	movs	r3, #16
 8001350:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8001352:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	4313      	orrs	r3, r2
 8001356:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800135a:	432b      	orrs	r3, r5
 800135c:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800135e:	e7dc      	b.n	800131a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	2310      	movs	r3, #16
 8001362:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001364:	4313      	orrs	r3, r2
 8001366:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800136a:	4303      	orrs	r3, r0
 800136c:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800136e:	e7d4      	b.n	800131a <ADC_Disable+0x12>

08001370 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001370:	2204      	movs	r2, #4
 8001372:	6803      	ldr	r3, [r0, #0]
{
 8001374:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001376:	6899      	ldr	r1, [r3, #8]
{
 8001378:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800137a:	4211      	tst	r1, r2
 800137c:	d101      	bne.n	8001382 <ADC_ConversionStop+0x12>
  return HAL_OK;
 800137e:	2000      	movs	r0, #0
}
 8001380:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001382:	6899      	ldr	r1, [r3, #8]
 8001384:	4211      	tst	r1, r2
 8001386:	d006      	beq.n	8001396 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001388:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800138a:	0792      	lsls	r2, r2, #30
 800138c:	d403      	bmi.n	8001396 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800138e:	2210      	movs	r2, #16
 8001390:	6899      	ldr	r1, [r3, #8]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001396:	f7ff ff59 	bl	800124c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800139a:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800139c:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4233      	tst	r3, r6
 80013a4:	d0eb      	beq.n	800137e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80013a6:	f7ff ff51 	bl	800124c <HAL_GetTick>
 80013aa:	1b40      	subs	r0, r0, r5
 80013ac:	280a      	cmp	r0, #10
 80013ae:	d9f6      	bls.n	800139e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b0:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80013b6:	4313      	orrs	r3, r2
 80013b8:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013bc:	4303      	orrs	r3, r0
 80013be:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80013c0:	e7de      	b.n	8001380 <ADC_ConversionStop+0x10>
	...

080013c4 <HAL_ADC_DeInit>:
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013c8:	2501      	movs	r5, #1
  if(hadc == NULL)
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d011      	beq.n	80013f2 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80013ce:	2302      	movs	r3, #2
 80013d0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80013d2:	4313      	orrs	r3, r2
 80013d4:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013d6:	f7ff ffcb 	bl	8001370 <ADC_ConversionStop>
 80013da:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80013dc:	d137      	bne.n	800144e <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 80013de:	0020      	movs	r0, r4
 80013e0:	f7ff ff92 	bl	8001308 <ADC_Disable>
 80013e4:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 80013e6:	2801      	cmp	r0, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80013ea:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 80013ec:	2300      	movs	r3, #0
 80013ee:	3450      	adds	r4, #80	; 0x50
 80013f0:	7023      	strb	r3, [r4, #0]
}
 80013f2:	0028      	movs	r0, r5
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 80013f6:	2301      	movs	r3, #1
 80013f8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	4915      	ldr	r1, [pc, #84]	; (8001454 <HAL_ADC_DeInit+0x90>)
 80013fe:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8001400:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8001402:	400a      	ands	r2, r1
 8001404:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8001408:	4914      	ldr	r1, [pc, #80]	; (800145c <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800140a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	400a      	ands	r2, r1
 8001410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	4912      	ldr	r1, [pc, #72]	; (8001460 <HAL_ADC_DeInit+0x9c>)
 8001416:	400a      	ands	r2, r1
 8001418:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	4911      	ldr	r1, [pc, #68]	; (8001464 <HAL_ADC_DeInit+0xa0>)
 800141e:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8001420:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8001422:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	438a      	bics	r2, r1
 8001428:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800142a:	6a1a      	ldr	r2, [r3, #32]
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <HAL_ADC_DeInit+0xa4>)
 800142e:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001430:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8001432:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001434:	33b4      	adds	r3, #180	; 0xb4
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	438a      	bics	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	438a      	bics	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8001442:	f005 f975 	bl	8006730 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001446:	2300      	movs	r3, #0
 8001448:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 800144a:	6563      	str	r3, [r4, #84]	; 0x54
 800144c:	e7ce      	b.n	80013ec <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800144e:	2801      	cmp	r0, #1
 8001450:	d0cb      	beq.n	80013ea <HAL_ADC_DeInit+0x26>
 8001452:	e7d2      	b.n	80013fa <HAL_ADC_DeInit+0x36>
 8001454:	fffff760 	.word	0xfffff760
 8001458:	0000089f 	.word	0x0000089f
 800145c:	efffffff 	.word	0xefffffff
 8001460:	833e0200 	.word	0x833e0200
 8001464:	3ffffc02 	.word	0x3ffffc02
 8001468:	f000f000 	.word	0xf000f000

0800146c <HAL_ADC_ConfigChannel>:
{
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800146e:	0004      	movs	r4, r0
 8001470:	3450      	adds	r4, #80	; 0x50
 8001472:	7822      	ldrb	r2, [r4, #0]
{
 8001474:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8001476:	2002      	movs	r0, #2
 8001478:	2a01      	cmp	r2, #1
 800147a:	d00b      	beq.n	8001494 <HAL_ADC_ConfigChannel+0x28>
 800147c:	3801      	subs	r0, #1
 800147e:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	6895      	ldr	r5, [r2, #8]
 8001484:	076d      	lsls	r5, r5, #29
 8001486:	d506      	bpl.n	8001496 <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001488:	2220      	movs	r2, #32
 800148a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800148c:	430a      	orrs	r2, r1
 800148e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001490:	2300      	movs	r3, #0
 8001492:	7023      	strb	r3, [r4, #0]
}
 8001494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	2680      	movs	r6, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800149a:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800149c:	4f19      	ldr	r7, [pc, #100]	; (8001504 <HAL_ADC_ConfigChannel+0x98>)
 800149e:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014a0:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014a2:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014a4:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014a6:	402b      	ands	r3, r5
 80014a8:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 80014aa:	42b9      	cmp	r1, r7
 80014ac:	d018      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80014b0:	4301      	orrs	r1, r0
 80014b2:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <HAL_ADC_ConfigChannel+0x9c>)
 80014bc:	041b      	lsls	r3, r3, #16
 80014be:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014c0:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80014c2:	430b      	orrs	r3, r1
 80014c4:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014c6:	f7ff ff09 	bl	80012dc <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014ca:	4235      	tst	r5, r6
 80014cc:	d005      	beq.n	80014da <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_ADC_ConfigChannel+0x9c>)
 80014d2:	03db      	lsls	r3, r3, #15
 80014d4:	6811      	ldr	r1, [r2, #0]
 80014d6:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80014d8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80014da:	2000      	movs	r0, #0
 80014dc:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80014de:	e7d9      	b.n	8001494 <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80014e2:	4381      	bics	r1, r0
 80014e4:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_ADC_ConfigChannel+0x9c>)
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <HAL_ADC_ConfigChannel+0xa0>)
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	400b      	ands	r3, r1
 80014f2:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014f4:	4235      	tst	r5, r6
 80014f6:	d0f0      	beq.n	80014da <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <HAL_ADC_ConfigChannel+0x9c>)
 80014fa:	4905      	ldr	r1, [pc, #20]	; (8001510 <HAL_ADC_ConfigChannel+0xa4>)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	400b      	ands	r3, r1
 8001500:	e7ea      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x6c>
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	00001001 	.word	0x00001001
 8001508:	40012708 	.word	0x40012708
 800150c:	ff7fffff 	.word	0xff7fffff
 8001510:	ffbfffff 	.word	0xffbfffff

08001514 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001514:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001516:	25ff      	movs	r5, #255	; 0xff
 8001518:	2403      	movs	r4, #3
 800151a:	002a      	movs	r2, r5
 800151c:	4004      	ands	r4, r0
 800151e:	00e4      	lsls	r4, r4, #3
 8001520:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001522:	0189      	lsls	r1, r1, #6
 8001524:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001526:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001528:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800152c:	2800      	cmp	r0, #0
 800152e:	db0a      	blt.n	8001546 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001530:	24c0      	movs	r4, #192	; 0xc0
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_NVIC_SetPriority+0x4c>)
 8001534:	0880      	lsrs	r0, r0, #2
 8001536:	0080      	lsls	r0, r0, #2
 8001538:	18c0      	adds	r0, r0, r3
 800153a:	00a4      	lsls	r4, r4, #2
 800153c:	5903      	ldr	r3, [r0, r4]
 800153e:	4013      	ands	r3, r2
 8001540:	430b      	orrs	r3, r1
 8001542:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001544:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001546:	200f      	movs	r0, #15
 8001548:	4003      	ands	r3, r0
 800154a:	3b08      	subs	r3, #8
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_NVIC_SetPriority+0x50>)
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	181b      	adds	r3, r3, r0
 8001554:	69d8      	ldr	r0, [r3, #28]
 8001556:	4002      	ands	r2, r0
 8001558:	430a      	orrs	r2, r1
 800155a:	61da      	str	r2, [r3, #28]
 800155c:	e7f2      	b.n	8001544 <HAL_NVIC_SetPriority+0x30>
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001568:	2800      	cmp	r0, #0
 800156a:	db05      	blt.n	8001578 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156c:	231f      	movs	r3, #31
 800156e:	4018      	ands	r0, r3
 8001570:	3b1e      	subs	r3, #30
 8001572:	4083      	lsls	r3, r0
 8001574:	4a01      	ldr	r2, [pc, #4]	; (800157c <HAL_NVIC_EnableIRQ+0x14>)
 8001576:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001578:	4770      	bx	lr
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	e000e100 	.word	0xe000e100

08001580 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001580:	2800      	cmp	r0, #0
 8001582:	db09      	blt.n	8001598 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001584:	231f      	movs	r3, #31
 8001586:	4018      	ands	r0, r3
 8001588:	3b1e      	subs	r3, #30
 800158a:	4083      	lsls	r3, r0
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_NVIC_DisableIRQ+0x1c>)
 800158e:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001590:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001594:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001598:	4770      	bx	lr
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	e000e104 	.word	0xe000e104

080015a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	1e43      	subs	r3, r0, #1
 80015a4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d20d      	bcs.n	80015c8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	6a03      	ldr	r3, [r0, #32]
 80015b6:	0609      	lsls	r1, r1, #24
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	430b      	orrs	r3, r1
 80015be:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015c8:	4770      	bx	lr
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	e000e010 	.word	0xe000e010
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d4:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d6:	1d84      	adds	r4, r0, #6
 80015d8:	7fe2      	ldrb	r2, [r4, #31]
{
 80015da:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015dc:	2a02      	cmp	r2, #2
 80015de:	d006      	beq.n	80015ee <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e0:	2204      	movs	r2, #4
 80015e2:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80015e6:	2200      	movs	r2, #0
 80015e8:	3305      	adds	r3, #5
 80015ea:	77da      	strb	r2, [r3, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80015ec:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ee:	6802      	ldr	r2, [r0, #0]
 80015f0:	200e      	movs	r0, #14
 80015f2:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015f4:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f6:	4381      	bics	r1, r0
 80015f8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80015fa:	2101      	movs	r1, #1
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	4388      	bics	r0, r1
 8001600:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001604:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001606:	402a      	ands	r2, r5
 8001608:	000d      	movs	r5, r1
 800160a:	4095      	lsls	r5, r2
 800160c:	6045      	str	r5, [r0, #4]
    return status;
 800160e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001610:	77e1      	strb	r1, [r4, #31]
    return status;
 8001612:	e7e8      	b.n	80015e6 <HAL_DMA_Abort+0x12>

08001614 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001614:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001616:	1d84      	adds	r4, r0, #6
 8001618:	7fe3      	ldrb	r3, [r4, #31]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	2304      	movs	r3, #4
 8001620:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001622:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001624:	0018      	movs	r0, r3
 8001626:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001628:	210e      	movs	r1, #14
 800162a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800162c:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001634:	2201      	movs	r2, #1
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	4391      	bics	r1, r2
 800163a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800163c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800163e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001640:	402b      	ands	r3, r5
 8001642:	0015      	movs	r5, r2
 8001644:	409d      	lsls	r5, r3
 8001646:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800164a:	2400      	movs	r4, #0
 800164c:	1d43      	adds	r3, r0, #5
 800164e:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001650:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001654:	42a2      	cmp	r2, r4
 8001656:	d0e5      	beq.n	8001624 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001658:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	0023      	movs	r3, r4
 800165c:	e7e2      	b.n	8001624 <HAL_DMA_Abort_IT+0x10>

0800165e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800165e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001660:	261c      	movs	r6, #28
 8001662:	2704      	movs	r7, #4
 8001664:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001666:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001668:	4032      	ands	r2, r6
 800166a:	003e      	movs	r6, r7
 800166c:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800166e:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001670:	6803      	ldr	r3, [r0, #0]
 8001672:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001674:	4235      	tst	r5, r6
 8001676:	d00d      	beq.n	8001694 <HAL_DMA_IRQHandler+0x36>
 8001678:	423c      	tst	r4, r7
 800167a:	d00b      	beq.n	8001694 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	0692      	lsls	r2, r2, #26
 8001680:	d402      	bmi.n	8001688 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	43ba      	bics	r2, r7
 8001686:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001688:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800168a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800168c:	2b00      	cmp	r3, #0
 800168e:	d019      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001690:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001692:	e017      	b.n	80016c4 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001694:	2702      	movs	r7, #2
 8001696:	003e      	movs	r6, r7
 8001698:	4096      	lsls	r6, r2
 800169a:	4235      	tst	r5, r6
 800169c:	d013      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x68>
 800169e:	423c      	tst	r4, r7
 80016a0:	d011      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	0692      	lsls	r2, r2, #26
 80016a6:	d406      	bmi.n	80016b6 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016a8:	240a      	movs	r4, #10
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	43a2      	bics	r2, r4
 80016ae:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80016b0:	2201      	movs	r2, #1
 80016b2:	1d83      	adds	r3, r0, #6
 80016b4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80016b6:	2200      	movs	r2, #0
 80016b8:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80016ba:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80016bc:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80016be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d1e5      	bne.n	8001690 <HAL_DMA_IRQHandler+0x32>
}
 80016c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016c6:	2608      	movs	r6, #8
 80016c8:	0037      	movs	r7, r6
 80016ca:	4097      	lsls	r7, r2
 80016cc:	423d      	tst	r5, r7
 80016ce:	d0f9      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x66>
 80016d0:	4234      	tst	r4, r6
 80016d2:	d0f7      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d4:	250e      	movs	r5, #14
 80016d6:	681c      	ldr	r4, [r3, #0]
 80016d8:	43ac      	bics	r4, r5
 80016da:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016dc:	2301      	movs	r3, #1
 80016de:	001c      	movs	r4, r3
 80016e0:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80016e2:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016e4:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80016e8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80016ea:	2200      	movs	r2, #0
 80016ec:	1d43      	adds	r3, r0, #5
 80016ee:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80016f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016f2:	e7e5      	b.n	80016c0 <HAL_DMA_IRQHandler+0x62>

080016f4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80016f4:	0003      	movs	r3, r0
 80016f6:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80016f8:	d101      	bne.n	80016fe <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80016fa:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80016fc:	4770      	bx	lr
      status = HAL_ERROR;
 80016fe:	2001      	movs	r0, #1
 8001700:	e7fc      	b.n	80016fc <HAL_EXTI_RegisterCallback+0x8>

08001702 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001702:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
  if (hexti == NULL)
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 800170a:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 800170c:	6019      	str	r1, [r3, #0]
  }
}
 800170e:	4770      	bx	lr

08001710 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001710:	231f      	movs	r3, #31
 8001712:	6802      	ldr	r2, [r0, #0]
{
 8001714:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001716:	401a      	ands	r2, r3
 8001718:	3b1e      	subs	r3, #30
 800171a:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_EXTI_IRQHandler+0x20>)
 800171e:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8001720:	420b      	tst	r3, r1
 8001722:	d004      	beq.n	800172e <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001724:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001726:	6843      	ldr	r3, [r0, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d000      	beq.n	800172e <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 800172c:	4798      	blx	r3
    }
  }
}
 800172e:	bd10      	pop	{r4, pc}
 8001730:	40010400 	.word	0x40010400

08001734 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001734:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <FLASH_SetErrorCode+0xa4>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	6990      	ldr	r0, [r2, #24]
 800173a:	0049      	lsls	r1, r1, #1
 800173c:	0003      	movs	r3, r0
{
 800173e:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001740:	400b      	ands	r3, r1
 8001742:	4208      	tst	r0, r1
 8001744:	d005      	beq.n	8001752 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001746:	2302      	movs	r3, #2
 8001748:	4824      	ldr	r0, [pc, #144]	; (80017dc <FLASH_SetErrorCode+0xa8>)
 800174a:	6944      	ldr	r4, [r0, #20]
 800174c:	4323      	orrs	r3, r4
 800174e:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001750:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001752:	2080      	movs	r0, #128	; 0x80
 8001754:	6991      	ldr	r1, [r2, #24]
 8001756:	0080      	lsls	r0, r0, #2
 8001758:	4201      	tst	r1, r0
 800175a:	d005      	beq.n	8001768 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800175c:	2101      	movs	r1, #1
 800175e:	4c1f      	ldr	r4, [pc, #124]	; (80017dc <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8001760:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001762:	6965      	ldr	r5, [r4, #20]
 8001764:	4329      	orrs	r1, r5
 8001766:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001768:	2080      	movs	r0, #128	; 0x80
 800176a:	6991      	ldr	r1, [r2, #24]
 800176c:	00c0      	lsls	r0, r0, #3
 800176e:	4201      	tst	r1, r0
 8001770:	d005      	beq.n	800177e <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001772:	2108      	movs	r1, #8
 8001774:	4c19      	ldr	r4, [pc, #100]	; (80017dc <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8001776:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001778:	6965      	ldr	r5, [r4, #20]
 800177a:	4329      	orrs	r1, r5
 800177c:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800177e:	2080      	movs	r0, #128	; 0x80
 8001780:	6991      	ldr	r1, [r2, #24]
 8001782:	0100      	lsls	r0, r0, #4
 8001784:	4201      	tst	r1, r0
 8001786:	d005      	beq.n	8001794 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001788:	2104      	movs	r1, #4
 800178a:	4c14      	ldr	r4, [pc, #80]	; (80017dc <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 800178c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800178e:	6965      	ldr	r5, [r4, #20]
 8001790:	4329      	orrs	r1, r5
 8001792:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001794:	2080      	movs	r0, #128	; 0x80
 8001796:	6991      	ldr	r1, [r2, #24]
 8001798:	0180      	lsls	r0, r0, #6
 800179a:	4201      	tst	r1, r0
 800179c:	d005      	beq.n	80017aa <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800179e:	2110      	movs	r1, #16
 80017a0:	4c0e      	ldr	r4, [pc, #56]	; (80017dc <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 80017a2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80017a4:	6965      	ldr	r5, [r4, #20]
 80017a6:	4329      	orrs	r1, r5
 80017a8:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80017aa:	6991      	ldr	r1, [r2, #24]
 80017ac:	0389      	lsls	r1, r1, #14
 80017ae:	d505      	bpl.n	80017bc <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80017b0:	2020      	movs	r0, #32
 80017b2:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80017b4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80017b6:	6961      	ldr	r1, [r4, #20]
 80017b8:	4301      	orrs	r1, r0
 80017ba:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80017bc:	2080      	movs	r0, #128	; 0x80
 80017be:	6991      	ldr	r1, [r2, #24]
 80017c0:	0240      	lsls	r0, r0, #9
 80017c2:	4201      	tst	r1, r0
 80017c4:	d005      	beq.n	80017d2 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	4c04      	ldr	r4, [pc, #16]	; (80017dc <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80017ca:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80017cc:	6965      	ldr	r5, [r4, #20]
 80017ce:	4329      	orrs	r1, r5
 80017d0:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017d2:	6193      	str	r3, [r2, #24]
}  
 80017d4:	bd30      	pop	{r4, r5, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	40022000 	.word	0x40022000
 80017dc:	2000027c 	.word	0x2000027c

080017e0 <HAL_FLASH_Unlock>:
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80017e0:	2201      	movs	r2, #1
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_FLASH_Unlock+0x50>)
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	4211      	tst	r1, r2
 80017e8:	d106      	bne.n	80017f8 <HAL_FLASH_Unlock+0x18>
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	2202      	movs	r2, #2
 80017ee:	0008      	movs	r0, r1
 80017f0:	4010      	ands	r0, r2
 80017f2:	4211      	tst	r1, r2
 80017f4:	d10e      	bne.n	8001814 <HAL_FLASH_Unlock+0x34>
}
 80017f6:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <HAL_FLASH_Unlock+0x54>)
 8001800:	60d8      	str	r0, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <HAL_FLASH_Unlock+0x58>)
 8001804:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001806:	f381 8810 	msr	PRIMASK, r1
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800180a:	6859      	ldr	r1, [r3, #4]
      return HAL_ERROR;
 800180c:	0010      	movs	r0, r2
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800180e:	4211      	tst	r1, r2
 8001810:	d0eb      	beq.n	80017ea <HAL_FLASH_Unlock+0xa>
 8001812:	e7f0      	b.n	80017f6 <HAL_FLASH_Unlock+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001814:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <HAL_FLASH_Unlock+0x5c>)
 800181c:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <HAL_FLASH_Unlock+0x60>)
 8001820:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001822:	f382 8810 	msr	PRIMASK, r2
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8001826:	6858      	ldr	r0, [r3, #4]
 8001828:	0780      	lsls	r0, r0, #30
      return HAL_ERROR;
 800182a:	0fc0      	lsrs	r0, r0, #31
 800182c:	e7e3      	b.n	80017f6 <HAL_FLASH_Unlock+0x16>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40022000 	.word	0x40022000
 8001834:	89abcdef 	.word	0x89abcdef
 8001838:	02030405 	.word	0x02030405
 800183c:	8c9daebf 	.word	0x8c9daebf
 8001840:	13141516 	.word	0x13141516

08001844 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001844:	2202      	movs	r2, #2
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_FLASH_Lock+0x18>)
}
 8001848:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001850:	2201      	movs	r2, #1
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
}
 8001858:	4770      	bx	lr
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40022000 	.word	0x40022000

08001860 <FLASH_WaitForLastOperation>:
{
 8001860:	b570      	push	{r4, r5, r6, lr}
 8001862:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fcf2 	bl	800124c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001868:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800186a:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <FLASH_WaitForLastOperation+0x70>)
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	4232      	tst	r2, r6
 8001872:	d121      	bne.n	80018b8 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001874:	2202      	movs	r2, #2
 8001876:	6999      	ldr	r1, [r3, #24]
 8001878:	4211      	tst	r1, r2
 800187a:	d000      	beq.n	800187e <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800187c:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	05d2      	lsls	r2, r2, #23
 8001882:	d415      	bmi.n	80018b0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001884:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001886:	0592      	lsls	r2, r2, #22
 8001888:	d412      	bmi.n	80018b0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800188a:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800188c:	0552      	lsls	r2, r2, #21
 800188e:	d40f      	bmi.n	80018b0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001890:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001892:	0512      	lsls	r2, r2, #20
 8001894:	d40c      	bmi.n	80018b0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001896:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001898:	0492      	lsls	r2, r2, #18
 800189a:	d409      	bmi.n	80018b0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800189c:	6999      	ldr	r1, [r3, #24]
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	0008      	movs	r0, r1
 80018a2:	0292      	lsls	r2, r2, #10
 80018a4:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80018a6:	4211      	tst	r1, r2
 80018a8:	d102      	bne.n	80018b0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80018aa:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80018ac:	03db      	lsls	r3, r3, #15
 80018ae:	d508      	bpl.n	80018c2 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80018b0:	f7ff ff40 	bl	8001734 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
 80018b6:	e004      	b.n	80018c2 <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80018b8:	1c62      	adds	r2, r4, #1
 80018ba:	d0d8      	beq.n	800186e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d101      	bne.n	80018c4 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 80018c0:	2003      	movs	r0, #3
}
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018c4:	f7ff fcc2 	bl	800124c <HAL_GetTick>
 80018c8:	1b40      	subs	r0, r0, r5
 80018ca:	42a0      	cmp	r0, r4
 80018cc:	d9ce      	bls.n	800186c <FLASH_WaitForLastOperation+0xc>
 80018ce:	e7f7      	b.n	80018c0 <FLASH_WaitForLastOperation+0x60>
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_FLASH_Program>:
{
 80018d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 80018d6:	4c0b      	ldr	r4, [pc, #44]	; (8001904 <HAL_FLASH_Program+0x30>)
{
 80018d8:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 80018da:	7c23      	ldrb	r3, [r4, #16]
{
 80018dc:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 80018de:	2002      	movs	r0, #2
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d00d      	beq.n	8001900 <HAL_FLASH_Program+0x2c>
 80018e4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018e6:	4808      	ldr	r0, [pc, #32]	; (8001908 <HAL_FLASH_Program+0x34>)
  __HAL_LOCK(&pFlash);
 80018e8:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018ea:	f7ff ffb9 	bl	8001860 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d104      	bne.n	80018fc <HAL_FLASH_Program+0x28>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018f2:	6160      	str	r0, [r4, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <HAL_FLASH_Program+0x34>)
    *(__IO uint32_t *)Address = Data;
 80018f6:	602e      	str	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018f8:	f7ff ffb2 	bl	8001860 <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 80018fc:	2300      	movs	r3, #0
 80018fe:	7423      	strb	r3, [r4, #16]
}
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	2000027c 	.word	0x2000027c
 8001908:	0000c350 	.word	0x0000c350

0800190c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800190c:	2100      	movs	r1, #0

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800190e:	2280      	movs	r2, #128	; 0x80
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <FLASH_PageErase+0x24>)
{
 8001912:	b510      	push	{r4, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001914:	6159      	str	r1, [r3, #20]
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <FLASH_PageErase+0x28>)
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	685c      	ldr	r4, [r3, #4]
 800191c:	4322      	orrs	r2, r4
 800191e:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001920:	2208      	movs	r2, #8
 8001922:	685c      	ldr	r4, [r3, #4]
 8001924:	4322      	orrs	r2, r4
 8001926:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8001928:	237f      	movs	r3, #127	; 0x7f
 800192a:	4398      	bics	r0, r3
 800192c:	6001      	str	r1, [r0, #0]
}
 800192e:	bd10      	pop	{r4, pc}
 8001930:	2000027c 	.word	0x2000027c
 8001934:	40022000 	.word	0x40022000

08001938 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001938:	4a59      	ldr	r2, [pc, #356]	; (8001aa0 <HAL_GPIO_Init+0x168>)
{
 800193a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800193c:	1882      	adds	r2, r0, r2
 800193e:	1e54      	subs	r4, r2, #1
 8001940:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001942:	2300      	movs	r3, #0
{
 8001944:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001946:	3205      	adds	r2, #5
{
 8001948:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800194a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800194c:	9a02      	ldr	r2, [sp, #8]
 800194e:	6814      	ldr	r4, [r2, #0]
 8001950:	0022      	movs	r2, r4
 8001952:	40da      	lsrs	r2, r3
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001956:	b007      	add	sp, #28
 8001958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800195a:	2201      	movs	r2, #1
 800195c:	0025      	movs	r5, r4
 800195e:	409a      	lsls	r2, r3
 8001960:	4015      	ands	r5, r2
 8001962:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8001964:	4214      	tst	r4, r2
 8001966:	d100      	bne.n	800196a <HAL_GPIO_Init+0x32>
 8001968:	e098      	b.n	8001a9c <HAL_GPIO_Init+0x164>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800196a:	9902      	ldr	r1, [sp, #8]
 800196c:	2510      	movs	r5, #16
 800196e:	684c      	ldr	r4, [r1, #4]
 8001970:	005f      	lsls	r7, r3, #1
 8001972:	0026      	movs	r6, r4
 8001974:	43ae      	bics	r6, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001976:	3d0d      	subs	r5, #13
 8001978:	40bd      	lsls	r5, r7
 800197a:	43e9      	mvns	r1, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197c:	1e75      	subs	r5, r6, #1
 800197e:	46b4      	mov	ip, r6
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001980:	9103      	str	r1, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001982:	2d01      	cmp	r5, #1
 8001984:	d80d      	bhi.n	80019a2 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8001986:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001988:	9903      	ldr	r1, [sp, #12]
 800198a:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198c:	9902      	ldr	r1, [sp, #8]
 800198e:	68cd      	ldr	r5, [r1, #12]
 8001990:	40bd      	lsls	r5, r7
 8001992:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001994:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001996:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800199a:	0922      	lsrs	r2, r4, #4
 800199c:	409a      	lsls	r2, r3
 800199e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80019a0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80019a2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a4:	9a03      	ldr	r2, [sp, #12]
 80019a6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	9a02      	ldr	r2, [sp, #8]
 80019aa:	6892      	ldr	r2, [r2, #8]
 80019ac:	40ba      	lsls	r2, r7
 80019ae:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80019b0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b2:	4662      	mov	r2, ip
 80019b4:	2a02      	cmp	r2, #2
 80019b6:	d110      	bne.n	80019da <HAL_GPIO_Init+0xa2>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019b8:	2507      	movs	r5, #7
 80019ba:	210f      	movs	r1, #15
 80019bc:	401d      	ands	r5, r3
 80019be:	00ad      	lsls	r5, r5, #2
 80019c0:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	1882      	adds	r2, r0, r2
 80019c8:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019ca:	438e      	bics	r6, r1
 80019cc:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80019ce:	9902      	ldr	r1, [sp, #8]
 80019d0:	690e      	ldr	r6, [r1, #16]
 80019d2:	4661      	mov	r1, ip
 80019d4:	40ae      	lsls	r6, r5
 80019d6:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80019d8:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80019da:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019dc:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019de:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e0:	402a      	ands	r2, r5
 80019e2:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e4:	0022      	movs	r2, r4
 80019e6:	4032      	ands	r2, r6
 80019e8:	40ba      	lsls	r2, r7
 80019ea:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 80019ec:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	00e2      	lsls	r2, r4, #3
 80019f0:	d554      	bpl.n	8001a9c <HAL_GPIO_Init+0x164>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2701      	movs	r7, #1
 80019f4:	4d2b      	ldr	r5, [pc, #172]	; (8001aa4 <HAL_GPIO_Init+0x16c>)
 80019f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019f8:	433a      	orrs	r2, r7
 80019fa:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_GPIO_Init+0x170>)
 80019fe:	089d      	lsrs	r5, r3, #2
 8001a00:	00ad      	lsls	r5, r5, #2
 8001a02:	18ad      	adds	r5, r5, r2
 8001a04:	68aa      	ldr	r2, [r5, #8]
 8001a06:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a08:	001a      	movs	r2, r3
 8001a0a:	4032      	ands	r2, r6
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	9203      	str	r2, [sp, #12]
 8001a10:	220f      	movs	r2, #15
 8001a12:	9903      	ldr	r1, [sp, #12]
 8001a14:	408a      	lsls	r2, r1
 8001a16:	4661      	mov	r1, ip
 8001a18:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a1a:	22a0      	movs	r2, #160	; 0xa0
 8001a1c:	05d2      	lsls	r2, r2, #23
 8001a1e:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a20:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a22:	2200      	movs	r2, #0
 8001a24:	4560      	cmp	r0, ip
 8001a26:	d011      	beq.n	8001a4c <HAL_GPIO_Init+0x114>
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <HAL_GPIO_Init+0x174>)
 8001a2a:	4694      	mov	ip, r2
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	4560      	cmp	r0, ip
 8001a30:	d00c      	beq.n	8001a4c <HAL_GPIO_Init+0x114>
 8001a32:	4f1f      	ldr	r7, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x178>)
 8001a34:	1892      	adds	r2, r2, r2
 8001a36:	42b8      	cmp	r0, r7
 8001a38:	d008      	beq.n	8001a4c <HAL_GPIO_Init+0x114>
 8001a3a:	4f1e      	ldr	r7, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x17c>)
 8001a3c:	0032      	movs	r2, r6
 8001a3e:	42b8      	cmp	r0, r7
 8001a40:	d004      	beq.n	8001a4c <HAL_GPIO_Init+0x114>
 8001a42:	4e1d      	ldr	r6, [pc, #116]	; (8001ab8 <HAL_GPIO_Init+0x180>)
 8001a44:	3201      	adds	r2, #1
 8001a46:	42b0      	cmp	r0, r6
 8001a48:	d000      	beq.n	8001a4c <HAL_GPIO_Init+0x114>
 8001a4a:	9a05      	ldr	r2, [sp, #20]
 8001a4c:	9903      	ldr	r1, [sp, #12]
 8001a4e:	408a      	lsls	r2, r1
 8001a50:	9904      	ldr	r1, [sp, #16]
 8001a52:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8001a54:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a56:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8001a58:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_GPIO_Init+0x184>)
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001a5e:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8001a60:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a62:	03e1      	lsls	r1, r4, #15
 8001a64:	d401      	bmi.n	8001a6a <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 8001a66:	003e      	movs	r6, r7
 8001a68:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001a6a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001a6c:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8001a6e:	9e01      	ldr	r6, [sp, #4]
 8001a70:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a72:	03a1      	lsls	r1, r4, #14
 8001a74:	d401      	bmi.n	8001a7a <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8001a76:	003e      	movs	r6, r7
 8001a78:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001a7a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001a7c:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8001a7e:	9e01      	ldr	r6, [sp, #4]
 8001a80:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a82:	02e1      	lsls	r1, r4, #11
 8001a84:	d401      	bmi.n	8001a8a <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 8001a86:	003e      	movs	r6, r7
 8001a88:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001a8a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001a8c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001a8e:	9f01      	ldr	r7, [sp, #4]
 8001a90:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a92:	02a4      	lsls	r4, r4, #10
 8001a94:	d401      	bmi.n	8001a9a <HAL_GPIO_Init+0x162>
        temp &= ~((uint32_t)iocurrent);
 8001a96:	402e      	ands	r6, r5
 8001a98:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001a9a:	60d7      	str	r7, [r2, #12]
    position++;
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	e755      	b.n	800194c <HAL_GPIO_Init+0x14>
 8001aa0:	afffe400 	.word	0xafffe400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	50000400 	.word	0x50000400
 8001ab0:	50000800 	.word	0x50000800
 8001ab4:	50000c00 	.word	0x50000c00
 8001ab8:	50001000 	.word	0x50001000
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ac2:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_GPIO_DeInit+0xe4>)
{
 8001ac4:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ac6:	1882      	adds	r2, r0, r2
{
 8001ac8:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001aca:	1e51      	subs	r1, r2, #1
 8001acc:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8001ace:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ad0:	3205      	adds	r2, #5
 8001ad2:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8001ad4:	9a02      	ldr	r2, [sp, #8]
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8001ada:	b007      	add	sp, #28
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8001ade:	2701      	movs	r7, #1
 8001ae0:	003a      	movs	r2, r7
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	9c02      	ldr	r4, [sp, #8]
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	4014      	ands	r4, r2
    if (iocurrent)
 8001aea:	9901      	ldr	r1, [sp, #4]
 8001aec:	9a02      	ldr	r2, [sp, #8]
 8001aee:	420a      	tst	r2, r1
 8001af0:	d056      	beq.n	8001ba0 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_GPIO_DeInit+0xe8>)
 8001af4:	0899      	lsrs	r1, r3, #2
 8001af6:	0089      	lsls	r1, r1, #2
 8001af8:	1889      	adds	r1, r1, r2
 8001afa:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001afc:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001afe:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001b00:	2203      	movs	r2, #3
 8001b02:	4015      	ands	r5, r2
 8001b04:	00ad      	lsls	r5, r5, #2
 8001b06:	320c      	adds	r2, #12
 8001b08:	40aa      	lsls	r2, r5
 8001b0a:	9203      	str	r2, [sp, #12]
 8001b0c:	4032      	ands	r2, r6
 8001b0e:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b10:	22a0      	movs	r2, #160	; 0xa0
 8001b12:	05d2      	lsls	r2, r2, #23
 8001b14:	4694      	mov	ip, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	4560      	cmp	r0, ip
 8001b1a:	d011      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_GPIO_DeInit+0xec>)
 8001b1e:	4694      	mov	ip, r2
 8001b20:	003a      	movs	r2, r7
 8001b22:	4560      	cmp	r0, ip
 8001b24:	d00c      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b26:	4f22      	ldr	r7, [pc, #136]	; (8001bb0 <HAL_GPIO_DeInit+0xf0>)
 8001b28:	1892      	adds	r2, r2, r2
 8001b2a:	42b8      	cmp	r0, r7
 8001b2c:	d008      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b2e:	4f21      	ldr	r7, [pc, #132]	; (8001bb4 <HAL_GPIO_DeInit+0xf4>)
 8001b30:	3201      	adds	r2, #1
 8001b32:	42b8      	cmp	r0, r7
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b36:	4e20      	ldr	r6, [pc, #128]	; (8001bb8 <HAL_GPIO_DeInit+0xf8>)
 8001b38:	3201      	adds	r2, #1
 8001b3a:	42b0      	cmp	r0, r6
 8001b3c:	d000      	beq.n	8001b40 <HAL_GPIO_DeInit+0x80>
 8001b3e:	9a05      	ldr	r2, [sp, #20]
 8001b40:	40aa      	lsls	r2, r5
 8001b42:	9d04      	ldr	r5, [sp, #16]
 8001b44:	42aa      	cmp	r2, r5
 8001b46:	d110      	bne.n	8001b6a <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_GPIO_DeInit+0xfc>)
 8001b4a:	6815      	ldr	r5, [r2, #0]
 8001b4c:	43a5      	bics	r5, r4
 8001b4e:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b50:	6855      	ldr	r5, [r2, #4]
 8001b52:	43a5      	bics	r5, r4
 8001b54:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b56:	6895      	ldr	r5, [r2, #8]
 8001b58:	43a5      	bics	r5, r4
 8001b5a:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b5c:	68d5      	ldr	r5, [r2, #12]
 8001b5e:	43a5      	bics	r5, r4
 8001b60:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b62:	688a      	ldr	r2, [r1, #8]
 8001b64:	9c03      	ldr	r4, [sp, #12]
 8001b66:	43a2      	bics	r2, r4
 8001b68:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	005c      	lsls	r4, r3, #1
 8001b6e:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b70:	2407      	movs	r4, #7
 8001b72:	260f      	movs	r6, #15
 8001b74:	401c      	ands	r4, r3
 8001b76:	00a4      	lsls	r4, r4, #2
 8001b78:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b7a:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001b7c:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	1882      	adds	r2, r0, r2
 8001b88:	6a15      	ldr	r5, [r2, #32]
 8001b8a:	43b5      	bics	r5, r6
 8001b8c:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b8e:	68c2      	ldr	r2, [r0, #12]
 8001b90:	438a      	bics	r2, r1
 8001b92:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001b94:	6842      	ldr	r2, [r0, #4]
 8001b96:	43a2      	bics	r2, r4
 8001b98:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b9a:	6882      	ldr	r2, [r0, #8]
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	6082      	str	r2, [r0, #8]
    position++;
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	e797      	b.n	8001ad4 <HAL_GPIO_DeInit+0x14>
 8001ba4:	afffe400 	.word	0xafffe400
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	50000400 	.word	0x50000400
 8001bb0:	50000800 	.word	0x50000800
 8001bb4:	50000c00 	.word	0x50000c00
 8001bb8:	50001000 	.word	0x50001000
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	6900      	ldr	r0, [r0, #16]
 8001bc2:	4008      	ands	r0, r1
 8001bc4:	1e43      	subs	r3, r0, #1
 8001bc6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001bc8:	b2c0      	uxtb	r0, r0
}
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001bd2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001bd4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001bd6:	e7fc      	b.n	8001bd2 <HAL_GPIO_WritePin+0x6>

08001bd8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bd8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bda:	0013      	movs	r3, r2
 8001bdc:	400b      	ands	r3, r1
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	4391      	bics	r1, r2
 8001be2:	430b      	orrs	r3, r1
 8001be4:	6183      	str	r3, [r0, #24]
}
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001bee:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4210      	tst	r0, r2
 8001bf4:	d002      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	f7ff fff6 	bl	8001be8 <HAL_GPIO_EXTI_Callback>
}
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8001c04:	2110      	movs	r1, #16
 8001c06:	4a02      	ldr	r2, [pc, #8]	; (8001c10 <HAL_PWR_DisablePVD+0xc>)
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	438b      	bics	r3, r1
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	4770      	bx	lr
 8001c10:	40007000 	.word	0x40007000

08001c14 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	6811      	ldr	r1, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	4770      	bx	lr
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	6811      	ldr	r1, [r2, #0]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	4770      	bx	lr
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c3c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001c42:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	4022      	ands	r2, r4
 8001c46:	2a08      	cmp	r2, #8
 8001c48:	d031      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
 8001c4a:	2a0c      	cmp	r2, #12
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x26>
 8001c4e:	2a04      	cmp	r2, #4
 8001c50:	d125      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c52:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c56:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001c58:	17c0      	asrs	r0, r0, #31
 8001c5a:	4018      	ands	r0, r3
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x80>)
 8001c5e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c62:	02a2      	lsls	r2, r4, #10
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x84>)
 8001c66:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c68:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c6c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c70:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c74:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4211      	tst	r1, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f7fe fbfe 	bl	8000480 <__aeabi_lmul>
 8001c84:	0022      	movs	r2, r4
 8001c86:	2300      	movs	r3, #0
 8001c88:	f7fe fbda 	bl	8000440 <__aeabi_uldivmod>
 8001c8c:	e7e8      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2310      	movs	r3, #16
 8001c92:	421a      	tst	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001c98:	e7f0      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x80>)
 8001c9c:	e7ee      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c9e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ca0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ca2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4098      	lsls	r0, r3
      break;
 8001cac:	e7d8      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001cb0:	e7d6      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x24>
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	ff48e500 	.word	0xff48e500
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	080082e4 	.word	0x080082e4
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_OscConfig>:
{
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	0005      	movs	r5, r0
 8001cd0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d059      	beq.n	8001d8a <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	4cb8      	ldr	r4, [pc, #736]	; (8001fbc <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cdc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cde:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	07d2      	lsls	r2, r2, #31
 8001cec:	d441      	bmi.n	8001d72 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	079b      	lsls	r3, r3, #30
 8001cf2:	d500      	bpl.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
 8001cf4:	e08a      	b.n	8001e0c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	06db      	lsls	r3, r3, #27
 8001cfa:	d528      	bpl.n	8001d4e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfc:	2e00      	cmp	r6, #0
 8001cfe:	d000      	beq.n	8001d02 <HAL_RCC_OscConfig+0x36>
 8001d00:	e0e3      	b.n	8001eca <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	059b      	lsls	r3, r3, #22
 8001d06:	d502      	bpl.n	8001d0e <HAL_RCC_OscConfig+0x42>
 8001d08:	69eb      	ldr	r3, [r5, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03d      	beq.n	8001d8a <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d0e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d10:	6862      	ldr	r2, [r4, #4]
 8001d12:	49ab      	ldr	r1, [pc, #684]	; (8001fc0 <HAL_RCC_OscConfig+0x2f4>)
 8001d14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d16:	400a      	ands	r2, r1
 8001d18:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d1a:	0b5b      	lsrs	r3, r3, #13
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	023f      	lsls	r7, r7, #8
 8001d20:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d22:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d24:	6861      	ldr	r1, [r4, #4]
 8001d26:	6a2a      	ldr	r2, [r5, #32]
 8001d28:	0209      	lsls	r1, r1, #8
 8001d2a:	0a09      	lsrs	r1, r1, #8
 8001d2c:	0612      	lsls	r2, r2, #24
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d32:	68e1      	ldr	r1, [r4, #12]
 8001d34:	48a3      	ldr	r0, [pc, #652]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001d36:	060b      	lsls	r3, r1, #24
 8001d38:	0f1b      	lsrs	r3, r3, #28
 8001d3a:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d3c:	4aa2      	ldr	r2, [pc, #648]	; (8001fc8 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d3e:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8001d40:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d42:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f7ff fa3f 	bl	80011c8 <HAL_InitTick>
        if(status != HAL_OK)
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d134      	bne.n	8001db8 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	682b      	ldr	r3, [r5, #0]
 8001d50:	071b      	lsls	r3, r3, #28
 8001d52:	d500      	bpl.n	8001d56 <HAL_RCC_OscConfig+0x8a>
 8001d54:	e0f0      	b.n	8001f38 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d56:	682b      	ldr	r3, [r5, #0]
 8001d58:	075b      	lsls	r3, r3, #29
 8001d5a:	d500      	bpl.n	8001d5e <HAL_RCC_OscConfig+0x92>
 8001d5c:	e112      	b.n	8001f84 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	069b      	lsls	r3, r3, #26
 8001d62:	d500      	bpl.n	8001d66 <HAL_RCC_OscConfig+0x9a>
 8001d64:	e197      	b.n	8002096 <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d000      	beq.n	8001d6e <HAL_RCC_OscConfig+0xa2>
 8001d6c:	e1c6      	b.n	80020fc <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8001d6e:	2000      	movs	r0, #0
 8001d70:	e022      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d72:	2e08      	cmp	r6, #8
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d76:	2e0c      	cmp	r6, #12
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_OscConfig+0xc2>
 8001d7a:	2f00      	cmp	r7, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	039b      	lsls	r3, r3, #14
 8001d82:	d5b4      	bpl.n	8001cee <HAL_RCC_OscConfig+0x22>
 8001d84:	686b      	ldr	r3, [r5, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1b1      	bne.n	8001cee <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	e014      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	686a      	ldr	r2, [r5, #4]
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d113      	bne.n	8001dbc <HAL_RCC_OscConfig+0xf0>
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa57 	bl	800124c <HAL_GetTick>
 8001d9e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	0292      	lsls	r2, r2, #10
 8001da6:	4213      	tst	r3, r2
 8001da8:	d1a1      	bne.n	8001cee <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001daa:	f7ff fa4f 	bl	800124c <HAL_GetTick>
 8001dae:	9b00      	ldr	r3, [sp, #0]
 8001db0:	1ac0      	subs	r0, r0, r3
 8001db2:	2864      	cmp	r0, #100	; 0x64
 8001db4:	d9f4      	bls.n	8001da0 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
}
 8001db8:	b005      	add	sp, #20
 8001dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	21a0      	movs	r1, #160	; 0xa0
 8001dbe:	02c9      	lsls	r1, r1, #11
 8001dc0:	428a      	cmp	r2, r1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x104>
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	6821      	ldr	r1, [r4, #0]
 8001dc8:	02d2      	lsls	r2, r2, #11
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	6022      	str	r2, [r4, #0]
 8001dce:	e7e1      	b.n	8001d94 <HAL_RCC_OscConfig+0xc8>
 8001dd0:	6821      	ldr	r1, [r4, #0]
 8001dd2:	487f      	ldr	r0, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x304>)
 8001dd4:	4001      	ands	r1, r0
 8001dd6:	6021      	str	r1, [r4, #0]
 8001dd8:	6821      	ldr	r1, [r4, #0]
 8001dda:	400b      	ands	r3, r1
 8001ddc:	9303      	str	r3, [sp, #12]
 8001dde:	9b03      	ldr	r3, [sp, #12]
 8001de0:	497c      	ldr	r1, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x308>)
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	400b      	ands	r3, r1
 8001de6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d1d6      	bne.n	8001d9a <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8001dec:	f7ff fa2e 	bl	800124c <HAL_GetTick>
 8001df0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	0292      	lsls	r2, r2, #10
 8001df8:	4213      	tst	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <HAL_RCC_OscConfig+0x132>
 8001dfc:	e777      	b.n	8001cee <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fa25 	bl	800124c <HAL_GetTick>
 8001e02:	9b00      	ldr	r3, [sp, #0]
 8001e04:	1ac0      	subs	r0, r0, r3
 8001e06:	2864      	cmp	r0, #100	; 0x64
 8001e08:	d9f3      	bls.n	8001df2 <HAL_RCC_OscConfig+0x126>
 8001e0a:	e7d4      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e0c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001e0e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e10:	4213      	tst	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e14:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e16:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1c:	2e04      	cmp	r6, #4
 8001e1e:	d003      	beq.n	8001e28 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e20:	2e0c      	cmp	r6, #12
 8001e22:	d124      	bne.n	8001e6e <HAL_RCC_OscConfig+0x1a2>
 8001e24:	2f00      	cmp	r7, #0
 8001e26:	d122      	bne.n	8001e6e <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	0752      	lsls	r2, r2, #29
 8001e2c:	d501      	bpl.n	8001e32 <HAL_RCC_OscConfig+0x166>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0ab      	beq.n	8001d8a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	6861      	ldr	r1, [r4, #4]
 8001e34:	692a      	ldr	r2, [r5, #16]
 8001e36:	4868      	ldr	r0, [pc, #416]	; (8001fd8 <HAL_RCC_OscConfig+0x30c>)
 8001e38:	0212      	lsls	r2, r2, #8
 8001e3a:	4001      	ands	r1, r0
 8001e3c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e3e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	438a      	bics	r2, r1
 8001e46:	4313      	orrs	r3, r2
 8001e48:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4a:	f7ff fef7 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001e4e:	68e3      	ldr	r3, [r4, #12]
 8001e50:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e52:	061b      	lsls	r3, r3, #24
 8001e54:	0f1b      	lsrs	r3, r3, #28
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	495b      	ldr	r1, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x2fc>)
 8001e5a:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e5e:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f7ff f9b1 	bl	80011c8 <HAL_InitTick>
      if(status != HAL_OK)
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d100      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1a0>
 8001e6a:	e744      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
 8001e6c:	e7a4      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d019      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e72:	2109      	movs	r1, #9
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	438a      	bics	r2, r1
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9e6 	bl	800124c <HAL_GetTick>
 8001e80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e82:	2204      	movs	r2, #4
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	4213      	tst	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	6862      	ldr	r2, [r4, #4]
 8001e8c:	692b      	ldr	r3, [r5, #16]
 8001e8e:	4952      	ldr	r1, [pc, #328]	; (8001fd8 <HAL_RCC_OscConfig+0x30c>)
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	400a      	ands	r2, r1
 8001e94:	4313      	orrs	r3, r2
 8001e96:	6063      	str	r3, [r4, #4]
 8001e98:	e72d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff f9d7 	bl	800124c <HAL_GetTick>
 8001e9e:	1bc0      	subs	r0, r0, r7
 8001ea0:	2802      	cmp	r0, #2
 8001ea2:	d9ee      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1b6>
 8001ea4:	e787      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	4393      	bics	r3, r2
 8001eac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eae:	f7ff f9cd 	bl	800124c <HAL_GetTick>
 8001eb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	4213      	tst	r3, r2
 8001eba:	d100      	bne.n	8001ebe <HAL_RCC_OscConfig+0x1f2>
 8001ebc:	e71b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f9c5 	bl	800124c <HAL_GetTick>
 8001ec2:	1bc0      	subs	r0, r0, r7
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9f5      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1e8>
 8001ec8:	e775      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eca:	69eb      	ldr	r3, [r5, #28]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eda:	f7ff f9b7 	bl	800124c <HAL_GetTick>
 8001ede:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4213      	tst	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eea:	6863      	ldr	r3, [r4, #4]
 8001eec:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_RCC_OscConfig+0x2f4>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef6:	6862      	ldr	r2, [r4, #4]
 8001ef8:	6a2b      	ldr	r3, [r5, #32]
 8001efa:	0212      	lsls	r2, r2, #8
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	0a12      	lsrs	r2, r2, #8
 8001f00:	4313      	orrs	r3, r2
 8001f02:	6063      	str	r3, [r4, #4]
 8001f04:	e723      	b.n	8001d4e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f06:	f7ff f9a1 	bl	800124c <HAL_GetTick>
 8001f0a:	1bc0      	subs	r0, r0, r7
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d9e7      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x214>
 8001f10:	e751      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x310>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f997 	bl	800124c <HAL_GetTick>
 8001f1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4213      	tst	r3, r2
 8001f28:	d100      	bne.n	8001f2c <HAL_RCC_OscConfig+0x260>
 8001f2a:	e710      	b.n	8001d4e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f98e 	bl	800124c <HAL_GetTick>
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	2802      	cmp	r0, #2
 8001f34:	d9f4      	bls.n	8001f20 <HAL_RCC_OscConfig+0x254>
 8001f36:	e73e      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f38:	696a      	ldr	r2, [r5, #20]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8001f40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f42:	4313      	orrs	r3, r2
 8001f44:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001f46:	f7ff f981 	bl	800124c <HAL_GetTick>
 8001f4a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f50:	4213      	tst	r3, r2
 8001f52:	d000      	beq.n	8001f56 <HAL_RCC_OscConfig+0x28a>
 8001f54:	e6ff      	b.n	8001d56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f979 	bl	800124c <HAL_GetTick>
 8001f5a:	1bc0      	subs	r0, r0, r7
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	d9f5      	bls.n	8001f4c <HAL_RCC_OscConfig+0x280>
 8001f60:	e729      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 8001f62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f64:	439a      	bics	r2, r3
 8001f66:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001f68:	f7ff f970 	bl	800124c <HAL_GetTick>
 8001f6c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f6e:	2202      	movs	r2, #2
 8001f70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f72:	4213      	tst	r3, r2
 8001f74:	d100      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2ac>
 8001f76:	e6ee      	b.n	8001d56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff f968 	bl	800124c <HAL_GetTick>
 8001f7c:	1bc0      	subs	r0, r0, r7
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9f5      	bls.n	8001f6e <HAL_RCC_OscConfig+0x2a2>
 8001f82:	e718      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f84:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f8a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001f8c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	421a      	tst	r2, r3
 8001f90:	d104      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f94:	4313      	orrs	r3, r2
 8001f96:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	4f10      	ldr	r7, [pc, #64]	; (8001fe0 <HAL_RCC_OscConfig+0x314>)
 8001fa0:	0052      	lsls	r2, r2, #1
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4213      	tst	r3, r2
 8001fa6:	d01d      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	68ab      	ldr	r3, [r5, #8]
 8001fac:	0052      	lsls	r2, r2, #1
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12c      	bne.n	800200c <HAL_RCC_OscConfig+0x340>
 8001fb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	6523      	str	r3, [r4, #80]	; 0x50
 8001fb8:	e04d      	b.n	8002056 <HAL_RCC_OscConfig+0x38a>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	ffff1fff 	.word	0xffff1fff
 8001fc4:	080082ed 	.word	0x080082ed
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	ffffe0ff 	.word	0xffffe0ff
 8001fdc:	fffffeff 	.word	0xfffffeff
 8001fe0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	4313      	orrs	r3, r2
 8001fec:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001fee:	f7ff f92d 	bl	800124c <HAL_GetTick>
 8001ff2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	0052      	lsls	r2, r2, #1
 8001ffa:	4213      	tst	r3, r2
 8001ffc:	d1d4      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f925 	bl	800124c <HAL_GetTick>
 8002002:	9b01      	ldr	r3, [sp, #4]
 8002004:	1ac0      	subs	r0, r0, r3
 8002006:	2864      	cmp	r0, #100	; 0x64
 8002008:	d9f4      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 800200a:	e6d4      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	2b00      	cmp	r3, #0
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x372>
 8002010:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002012:	4a6b      	ldr	r2, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	4013      	ands	r3, r2
 8002016:	6523      	str	r3, [r4, #80]	; 0x50
 8002018:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800201a:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	4013      	ands	r3, r2
 800201e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002020:	f7ff f914 	bl	800124c <HAL_GetTick>
 8002024:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4213      	tst	r3, r2
 800202e:	d01a      	beq.n	8002066 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f90c 	bl	800124c <HAL_GetTick>
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 8002036:	1bc0      	subs	r0, r0, r7
 8002038:	4298      	cmp	r0, r3
 800203a:	d9f4      	bls.n	8002026 <HAL_RCC_OscConfig+0x35a>
 800203c:	e6bb      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203e:	21a0      	movs	r1, #160	; 0xa0
 8002040:	00c9      	lsls	r1, r1, #3
 8002042:	428b      	cmp	r3, r1
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x3ac>
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	430b      	orrs	r3, r1
 800204e:	6523      	str	r3, [r4, #80]	; 0x50
 8002050:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002052:	431a      	orrs	r2, r3
 8002054:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002056:	f7ff f8f9 	bl	800124c <HAL_GetTick>
 800205a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4213      	tst	r3, r2
 8002064:	d010      	beq.n	8002088 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8002066:	9b00      	ldr	r3, [sp, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d000      	beq.n	800206e <HAL_RCC_OscConfig+0x3a2>
 800206c:	e677      	b.n	8001d5e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002070:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_RCC_OscConfig+0x500>)
 8002072:	4013      	ands	r3, r2
 8002074:	63a3      	str	r3, [r4, #56]	; 0x38
 8002076:	e672      	b.n	8001d5e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	4013      	ands	r3, r2
 800207e:	6523      	str	r3, [r4, #80]	; 0x50
 8002080:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002082:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 8002084:	4013      	ands	r3, r2
 8002086:	e796      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff f8e0 	bl	800124c <HAL_GetTick>
 800208c:	4b4e      	ldr	r3, [pc, #312]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 800208e:	1bc0      	subs	r0, r0, r7
 8002090:	4298      	cmp	r0, r3
 8002092:	d9e3      	bls.n	800205c <HAL_RCC_OscConfig+0x390>
 8002094:	e68f      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002096:	69aa      	ldr	r2, [r5, #24]
 8002098:	2101      	movs	r1, #1
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800209c:	2a00      	cmp	r2, #0
 800209e:	d018      	beq.n	80020d2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80020a0:	68a2      	ldr	r2, [r4, #8]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60a2      	str	r2, [r4, #8]
 80020a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80020a8:	430a      	orrs	r2, r1
 80020aa:	6362      	str	r2, [r4, #52]	; 0x34
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	6a19      	ldr	r1, [r3, #32]
 80020b0:	0192      	lsls	r2, r2, #6
 80020b2:	430a      	orrs	r2, r1
 80020b4:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80020b6:	f7ff f8c9 	bl	800124c <HAL_GetTick>
 80020ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020bc:	2202      	movs	r2, #2
 80020be:	68a3      	ldr	r3, [r4, #8]
 80020c0:	4213      	tst	r3, r2
 80020c2:	d000      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3fa>
 80020c4:	e64f      	b.n	8001d66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c6:	f7ff f8c1 	bl	800124c <HAL_GetTick>
 80020ca:	1bc0      	subs	r0, r0, r7
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d9f5      	bls.n	80020bc <HAL_RCC_OscConfig+0x3f0>
 80020d0:	e671      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 80020d2:	68a2      	ldr	r2, [r4, #8]
 80020d4:	438a      	bics	r2, r1
 80020d6:	60a2      	str	r2, [r4, #8]
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	493e      	ldr	r1, [pc, #248]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 80020dc:	400a      	ands	r2, r1
 80020de:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80020e0:	f7ff f8b4 	bl	800124c <HAL_GetTick>
 80020e4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e6:	2202      	movs	r2, #2
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	4213      	tst	r3, r2
 80020ec:	d100      	bne.n	80020f0 <HAL_RCC_OscConfig+0x424>
 80020ee:	e63a      	b.n	8001d66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f0:	f7ff f8ac 	bl	800124c <HAL_GetTick>
 80020f4:	1bc0      	subs	r0, r0, r7
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9f5      	bls.n	80020e6 <HAL_RCC_OscConfig+0x41a>
 80020fa:	e65c      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	2e0c      	cmp	r6, #12
 80020fe:	d043      	beq.n	8002188 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002100:	4a35      	ldr	r2, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x50c>)
 8002102:	2b02      	cmp	r3, #2
 8002104:	d12e      	bne.n	8002164 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 8002106:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002108:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800210a:	4013      	ands	r3, r2
 800210c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800210e:	f7ff f89d 	bl	800124c <HAL_GetTick>
 8002112:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002114:	04bf      	lsls	r7, r7, #18
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	423b      	tst	r3, r7
 800211a:	d11d      	bne.n	8002158 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800211e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002120:	68e2      	ldr	r2, [r4, #12]
 8002122:	430b      	orrs	r3, r1
 8002124:	492d      	ldr	r1, [pc, #180]	; (80021dc <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002126:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	400a      	ands	r2, r1
 800212a:	4313      	orrs	r3, r2
 800212c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800212e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4313      	orrs	r3, r2
 8002132:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	6822      	ldr	r2, [r4, #0]
 8002138:	045b      	lsls	r3, r3, #17
 800213a:	4313      	orrs	r3, r2
 800213c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800213e:	f7ff f885 	bl	800124c <HAL_GetTick>
 8002142:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	4233      	tst	r3, r6
 8002148:	d000      	beq.n	800214c <HAL_RCC_OscConfig+0x480>
 800214a:	e610      	b.n	8001d6e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f87e 	bl	800124c <HAL_GetTick>
 8002150:	1b40      	subs	r0, r0, r5
 8002152:	2802      	cmp	r0, #2
 8002154:	d9f6      	bls.n	8002144 <HAL_RCC_OscConfig+0x478>
 8002156:	e62e      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f878 	bl	800124c <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	2802      	cmp	r0, #2
 8002160:	d9d9      	bls.n	8002116 <HAL_RCC_OscConfig+0x44a>
 8002162:	e628      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8002164:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002166:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002168:	4013      	ands	r3, r2
 800216a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800216c:	f7ff f86e 	bl	800124c <HAL_GetTick>
 8002170:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002172:	04b6      	lsls	r6, r6, #18
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	4233      	tst	r3, r6
 8002178:	d100      	bne.n	800217c <HAL_RCC_OscConfig+0x4b0>
 800217a:	e5f8      	b.n	8001d6e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff f866 	bl	800124c <HAL_GetTick>
 8002180:	1b40      	subs	r0, r0, r5
 8002182:	2802      	cmp	r0, #2
 8002184:	d9f6      	bls.n	8002174 <HAL_RCC_OscConfig+0x4a8>
 8002186:	e616      	b.n	8001db6 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8002188:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218a:	2b01      	cmp	r3, #1
 800218c:	d100      	bne.n	8002190 <HAL_RCC_OscConfig+0x4c4>
 800218e:	e613      	b.n	8001db8 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002192:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002196:	0252      	lsls	r2, r2, #9
 8002198:	401a      	ands	r2, r3
 800219a:	428a      	cmp	r2, r1
 800219c:	d000      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4d4>
 800219e:	e5f4      	b.n	8001d8a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a4:	0392      	lsls	r2, r2, #14
 80021a6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	428a      	cmp	r2, r1
 80021aa:	d000      	beq.n	80021ae <HAL_RCC_OscConfig+0x4e2>
 80021ac:	e5ed      	b.n	8001d8a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021ae:	22c0      	movs	r2, #192	; 0xc0
 80021b0:	0412      	lsls	r2, r2, #16
 80021b2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d100      	bne.n	80021bc <HAL_RCC_OscConfig+0x4f0>
 80021ba:	e5d8      	b.n	8001d6e <HAL_RCC_OscConfig+0xa2>
 80021bc:	e5e5      	b.n	8001d8a <HAL_RCC_OscConfig+0xbe>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	fffffeff 	.word	0xfffffeff
 80021c4:	fffffbff 	.word	0xfffffbff
 80021c8:	00001388 	.word	0x00001388
 80021cc:	efffffff 	.word	0xefffffff
 80021d0:	40010000 	.word	0x40010000
 80021d4:	ffffdfff 	.word	0xffffdfff
 80021d8:	feffffff 	.word	0xfeffffff
 80021dc:	ff02ffff 	.word	0xff02ffff

080021e0 <HAL_RCC_ClockConfig>:
{
 80021e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021e2:	1e04      	subs	r4, r0, #0
 80021e4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
}
 80021ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	2501      	movs	r5, #1
 80021ee:	4e5b      	ldr	r6, [pc, #364]	; (800235c <HAL_RCC_ClockConfig+0x17c>)
 80021f0:	9a01      	ldr	r2, [sp, #4]
 80021f2:	6833      	ldr	r3, [r6, #0]
 80021f4:	402b      	ands	r3, r5
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d331      	bcc.n	800225e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	0793      	lsls	r3, r2, #30
 80021fe:	d443      	bmi.n	8002288 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002200:	07d2      	lsls	r2, r2, #31
 8002202:	d449      	bmi.n	8002298 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	2501      	movs	r5, #1
 8002206:	6833      	ldr	r3, [r6, #0]
 8002208:	9a01      	ldr	r2, [sp, #4]
 800220a:	402b      	ands	r3, r5
 800220c:	4293      	cmp	r3, r2
 800220e:	d909      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002210:	6833      	ldr	r3, [r6, #0]
 8002212:	43ab      	bics	r3, r5
 8002214:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002216:	f7ff f819 	bl	800124c <HAL_GetTick>
 800221a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	6833      	ldr	r3, [r6, #0]
 800221e:	422b      	tst	r3, r5
 8002220:	d000      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
 8002222:	e08c      	b.n	800233e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	4d4e      	ldr	r5, [pc, #312]	; (8002360 <HAL_RCC_ClockConfig+0x180>)
 8002228:	0753      	lsls	r3, r2, #29
 800222a:	d500      	bpl.n	800222e <HAL_RCC_ClockConfig+0x4e>
 800222c:	e08f      	b.n	800234e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	0712      	lsls	r2, r2, #28
 8002230:	d506      	bpl.n	8002240 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	68ea      	ldr	r2, [r5, #12]
 8002234:	6923      	ldr	r3, [r4, #16]
 8002236:	494b      	ldr	r1, [pc, #300]	; (8002364 <HAL_RCC_ClockConfig+0x184>)
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	400a      	ands	r2, r1
 800223c:	4313      	orrs	r3, r2
 800223e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002240:	f7ff fcfc 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8002244:	68eb      	ldr	r3, [r5, #12]
 8002246:	4a48      	ldr	r2, [pc, #288]	; (8002368 <HAL_RCC_ClockConfig+0x188>)
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	0f1b      	lsrs	r3, r3, #28
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	4947      	ldr	r1, [pc, #284]	; (800236c <HAL_RCC_ClockConfig+0x18c>)
 8002250:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002254:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	f7fe ffb6 	bl	80011c8 <HAL_InitTick>
  if(status != HAL_OK)
 800225c:	e7c5      	b.n	80021ea <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	6833      	ldr	r3, [r6, #0]
 8002260:	9a01      	ldr	r2, [sp, #4]
 8002262:	43ab      	bics	r3, r5
 8002264:	4313      	orrs	r3, r2
 8002266:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002268:	f7fe fff0 	bl	800124c <HAL_GetTick>
 800226c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	6833      	ldr	r3, [r6, #0]
 8002270:	9a01      	ldr	r2, [sp, #4]
 8002272:	402b      	ands	r3, r5
 8002274:	4293      	cmp	r3, r2
 8002276:	d0c0      	beq.n	80021fa <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe ffe8 	bl	800124c <HAL_GetTick>
 800227c:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 800227e:	1bc0      	subs	r0, r0, r7
 8002280:	4298      	cmp	r0, r3
 8002282:	d9f4      	bls.n	800226e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	e7b0      	b.n	80021ea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	20f0      	movs	r0, #240	; 0xf0
 800228a:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_RCC_ClockConfig+0x180>)
 800228c:	68cb      	ldr	r3, [r1, #12]
 800228e:	4383      	bics	r3, r0
 8002290:	68a0      	ldr	r0, [r4, #8]
 8002292:	4303      	orrs	r3, r0
 8002294:	60cb      	str	r3, [r1, #12]
 8002296:	e7b3      	b.n	8002200 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	4d31      	ldr	r5, [pc, #196]	; (8002360 <HAL_RCC_ClockConfig+0x180>)
 800229a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800229c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	2a02      	cmp	r2, #2
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a2:	039b      	lsls	r3, r3, #14
 80022a4:	d5a0      	bpl.n	80021e8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	2103      	movs	r1, #3
 80022a8:	68eb      	ldr	r3, [r5, #12]
 80022aa:	438b      	bics	r3, r1
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80022b0:	f7fe ffcc 	bl	800124c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80022b6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d118      	bne.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	220c      	movs	r2, #12
 80022be:	68eb      	ldr	r3, [r5, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d09e      	beq.n	8002204 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe ffc1 	bl	800124c <HAL_GetTick>
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 80022cc:	1bc0      	subs	r0, r0, r7
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d9f4      	bls.n	80022bc <HAL_RCC_ClockConfig+0xdc>
 80022d2:	e7d7      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	2a03      	cmp	r2, #3
 80022d6:	d102      	bne.n	80022de <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	d4e4      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
 80022dc:	e784      	b.n	80021e8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022de:	2a01      	cmp	r2, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e2:	075b      	lsls	r3, r3, #29
 80022e4:	d4df      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
 80022e6:	e77f      	b.n	80021e8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022e8:	059b      	lsls	r3, r3, #22
 80022ea:	d4dc      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
 80022ec:	e77c      	b.n	80021e8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	220c      	movs	r2, #12
 80022f4:	68eb      	ldr	r3, [r5, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d083      	beq.n	8002204 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7fe ffa6 	bl	800124c <HAL_GetTick>
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	4298      	cmp	r0, r3
 8002306:	d9f4      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x112>
 8002308:	e7bc      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800230a:	2b01      	cmp	r3, #1
 800230c:	d011      	beq.n	8002332 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800230e:	220c      	movs	r2, #12
 8002310:	68eb      	ldr	r3, [r5, #12]
 8002312:	4213      	tst	r3, r2
 8002314:	d100      	bne.n	8002318 <HAL_RCC_ClockConfig+0x138>
 8002316:	e775      	b.n	8002204 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe ff98 	bl	800124c <HAL_GetTick>
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 800231e:	1bc0      	subs	r0, r0, r7
 8002320:	4298      	cmp	r0, r3
 8002322:	d9f4      	bls.n	800230e <HAL_RCC_ClockConfig+0x12e>
 8002324:	e7ae      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7fe ff91 	bl	800124c <HAL_GetTick>
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 800232c:	1bc0      	subs	r0, r0, r7
 800232e:	4298      	cmp	r0, r3
 8002330:	d8a8      	bhi.n	8002284 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	220c      	movs	r2, #12
 8002334:	68eb      	ldr	r3, [r5, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b04      	cmp	r3, #4
 800233a:	d1f4      	bne.n	8002326 <HAL_RCC_ClockConfig+0x146>
 800233c:	e762      	b.n	8002204 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233e:	f7fe ff85 	bl	800124c <HAL_GetTick>
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCC_ClockConfig+0x194>)
 8002344:	1bc0      	subs	r0, r0, r7
 8002346:	4298      	cmp	r0, r3
 8002348:	d800      	bhi.n	800234c <HAL_RCC_ClockConfig+0x16c>
 800234a:	e767      	b.n	800221c <HAL_RCC_ClockConfig+0x3c>
 800234c:	e79a      	b.n	8002284 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234e:	68eb      	ldr	r3, [r5, #12]
 8002350:	4909      	ldr	r1, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x198>)
 8002352:	400b      	ands	r3, r1
 8002354:	68e1      	ldr	r1, [r4, #12]
 8002356:	430b      	orrs	r3, r1
 8002358:	60eb      	str	r3, [r5, #12]
 800235a:	e768      	b.n	800222e <HAL_RCC_ClockConfig+0x4e>
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	ffffc7ff 	.word	0xffffc7ff
 8002368:	080082ed 	.word	0x080082ed
 800236c:	20000000 	.word	0x20000000
 8002370:	20000008 	.word	0x20000008
 8002374:	00001388 	.word	0x00001388
 8002378:	fffff8ff 	.word	0xfffff8ff

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	4905      	ldr	r1, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002384:	055b      	lsls	r3, r3, #21
 8002386:	0f5b      	lsrs	r3, r3, #29
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	6810      	ldr	r0, [r2, #0]
 800238c:	40d8      	lsrs	r0, r3
}
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000
 8002394:	20000000 	.word	0x20000000
 8002398:	080082fd 	.word	0x080082fd

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4905      	ldr	r1, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023a4:	049b      	lsls	r3, r3, #18
 80023a6:	0f5b      	lsrs	r3, r3, #29
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	6810      	ldr	r0, [r2, #0]
 80023ac:	40d8      	lsrs	r0, r3
}
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	20000000 	.word	0x20000000
 80023b8:	080082fd 	.word	0x080082fd

080023bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023bc:	6803      	ldr	r3, [r0, #0]
{
 80023be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023c0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	d53d      	bpl.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80023c8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4c5f      	ldr	r4, [pc, #380]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80023cc:	055b      	lsls	r3, r3, #21
 80023ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80023d0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	421a      	tst	r2, r3
 80023d4:	d104      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023d8:	4313      	orrs	r3, r2
 80023da:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	2780      	movs	r7, #128	; 0x80
 80023e2:	4e5a      	ldr	r6, [pc, #360]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80023e4:	007f      	lsls	r7, r7, #1
 80023e6:	6833      	ldr	r3, [r6, #0]
 80023e8:	423b      	tst	r3, r7
 80023ea:	d06c      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023ec:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80023ee:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023f0:	0001      	movs	r1, r0
 80023f2:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023f4:	4042      	eors	r2, r0
 80023f6:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023f8:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023fa:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023fc:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023fe:	4202      	tst	r2, r0
 8002400:	d000      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002402:	e071      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002404:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002406:	0010      	movs	r0, r2
 8002408:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800240a:	421a      	tst	r2, r3
 800240c:	d000      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800240e:	e074      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002410:	6869      	ldr	r1, [r5, #4]
 8002412:	23c0      	movs	r3, #192	; 0xc0
 8002414:	000a      	movs	r2, r1
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	401a      	ands	r2, r3
 800241a:	429a      	cmp	r2, r3
 800241c:	d107      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	484b      	ldr	r0, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002422:	4003      	ands	r3, r0
 8002424:	20c0      	movs	r0, #192	; 0xc0
 8002426:	0380      	lsls	r0, r0, #14
 8002428:	4001      	ands	r1, r0
 800242a:	430b      	orrs	r3, r1
 800242c:	6023      	str	r3, [r4, #0]
 800242e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002430:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002432:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002434:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8002436:	2b01      	cmp	r3, #1
 8002438:	d103      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800243c:	4a45      	ldr	r2, [pc, #276]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800243e:	4013      	ands	r3, r2
 8002440:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002442:	682b      	ldr	r3, [r5, #0]
 8002444:	07da      	lsls	r2, r3, #31
 8002446:	d506      	bpl.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002448:	2003      	movs	r0, #3
 800244a:	493f      	ldr	r1, [pc, #252]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800244c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800244e:	4382      	bics	r2, r0
 8002450:	68a8      	ldr	r0, [r5, #8]
 8002452:	4302      	orrs	r2, r0
 8002454:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002456:	079a      	lsls	r2, r3, #30
 8002458:	d506      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245a:	200c      	movs	r0, #12
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800245e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002460:	4382      	bics	r2, r0
 8002462:	68e8      	ldr	r0, [r5, #12]
 8002464:	4302      	orrs	r2, r0
 8002466:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002468:	075a      	lsls	r2, r3, #29
 800246a:	d506      	bpl.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800246c:	4936      	ldr	r1, [pc, #216]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800246e:	483a      	ldr	r0, [pc, #232]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002470:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002472:	4002      	ands	r2, r0
 8002474:	6928      	ldr	r0, [r5, #16]
 8002476:	4302      	orrs	r2, r0
 8002478:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247a:	071a      	lsls	r2, r3, #28
 800247c:	d506      	bpl.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247e:	4932      	ldr	r1, [pc, #200]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002480:	4836      	ldr	r0, [pc, #216]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002482:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002484:	4002      	ands	r2, r0
 8002486:	6968      	ldr	r0, [r5, #20]
 8002488:	4302      	orrs	r2, r0
 800248a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248c:	05da      	lsls	r2, r3, #23
 800248e:	d506      	bpl.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002490:	492d      	ldr	r1, [pc, #180]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002492:	4833      	ldr	r0, [pc, #204]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002494:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002496:	4002      	ands	r2, r0
 8002498:	69a8      	ldr	r0, [r5, #24]
 800249a:	4302      	orrs	r2, r0
 800249c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249e:	065a      	lsls	r2, r3, #25
 80024a0:	d506      	bpl.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a2:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80024a4:	482f      	ldr	r0, [pc, #188]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024a6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80024a8:	4002      	ands	r2, r0
 80024aa:	6a28      	ldr	r0, [r5, #32]
 80024ac:	4302      	orrs	r2, r0
 80024ae:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80024b0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	d517      	bpl.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80024b8:	492b      	ldr	r1, [pc, #172]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80024bc:	400b      	ands	r3, r1
 80024be:	69e9      	ldr	r1, [r5, #28]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c4:	e00f      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	6833      	ldr	r3, [r6, #0]
 80024c8:	433b      	orrs	r3, r7
 80024ca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80024cc:	f7fe febe 	bl	800124c <HAL_GetTick>
 80024d0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	6833      	ldr	r3, [r6, #0]
 80024d4:	423b      	tst	r3, r7
 80024d6:	d189      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe feb8 	bl	800124c <HAL_GetTick>
 80024dc:	9b01      	ldr	r3, [sp, #4]
 80024de:	1ac0      	subs	r0, r0, r3
 80024e0:	2864      	cmp	r0, #100	; 0x64
 80024e2:	d9f6      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 80024e4:	2003      	movs	r0, #3
}
 80024e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024e8:	4299      	cmp	r1, r3
 80024ea:	d000      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x132>
 80024ec:	e78a      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024ee:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024f2:	0392      	lsls	r2, r2, #14
 80024f4:	d400      	bmi.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024f6:	e785      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80024f8:	e7f5      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024fa:	4288      	cmp	r0, r1
 80024fc:	d100      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80024fe:	e787      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	d400      	bmi.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002506:	e783      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002508:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800250a:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800250c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800250e:	0309      	lsls	r1, r1, #12
 8002510:	4301      	orrs	r1, r0
 8002512:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002514:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002518:	4814      	ldr	r0, [pc, #80]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800251a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251c:	4001      	ands	r1, r0
 800251e:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002520:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002522:	05db      	lsls	r3, r3, #23
 8002524:	d400      	bmi.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002526:	e773      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8002528:	f7fe fe90 	bl	800124c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800252c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800252e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002530:	00bf      	lsls	r7, r7, #2
 8002532:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002534:	423b      	tst	r3, r7
 8002536:	d000      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8002538:	e76a      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fe87 	bl	800124c <HAL_GetTick>
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002540:	1b80      	subs	r0, r0, r6
 8002542:	4298      	cmp	r0, r3
 8002544:	d9f5      	bls.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8002546:	e7cd      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	ffcfffff 	.word	0xffcfffff
 8002554:	efffffff 	.word	0xefffffff
 8002558:	fffff3ff 	.word	0xfffff3ff
 800255c:	ffffcfff 	.word	0xffffcfff
 8002560:	fffcffff 	.word	0xfffcffff
 8002564:	fbffffff 	.word	0xfbffffff
 8002568:	fff3ffff 	.word	0xfff3ffff
 800256c:	fff7ffff 	.word	0xfff7ffff
 8002570:	00001388 	.word	0x00001388

08002574 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002576:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002578:	1c45      	adds	r5, r0, #1
 800257a:	7feb      	ldrb	r3, [r5, #31]
{
 800257c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800257e:	0038      	movs	r0, r7
 8002580:	2b01      	cmp	r3, #1
 8002582:	d027      	beq.n	80025d4 <HAL_RTC_DeactivateAlarm+0x60>
 8002584:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002586:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002588:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 800258a:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800258c:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
 8002592:	3a77      	subs	r2, #119	; 0x77
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002596:	32ad      	adds	r2, #173	; 0xad
 8002598:	4291      	cmp	r1, r2
 800259a:	d12a      	bne.n	80025f2 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80025a0:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025a2:	400a      	ands	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4920      	ldr	r1, [pc, #128]	; (800262c <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80025aa:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80025ac:	400a      	ands	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025b0:	f7fe fe4c 	bl	800124c <HAL_GetTick>
 80025b4:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80025b6:	2201      	movs	r2, #1
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	401a      	ands	r2, r3
 80025be:	9201      	str	r2, [sp, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4213      	tst	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025ca:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80025ce:	2301      	movs	r3, #1
 80025d0:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80025d2:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80025d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80025d6:	f7fe fe39 	bl	800124c <HAL_GetTick>
 80025da:	9b00      	ldr	r3, [sp, #0]
 80025dc:	1ac0      	subs	r0, r0, r3
 80025de:	42b8      	cmp	r0, r7
 80025e0:	d9e9      	bls.n	80025b6 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e2:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e4:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025ea:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80025ec:	9b01      	ldr	r3, [sp, #4]
 80025ee:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 80025f0:	e7f0      	b.n	80025d4 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RTC_DeactivateAlarm+0xbc>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	490d      	ldr	r1, [pc, #52]	; (8002634 <HAL_RTC_DeactivateAlarm+0xc0>)
 80025fe:	400a      	ands	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002602:	f7fe fe23 	bl	800124c <HAL_GetTick>
 8002606:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	001a      	movs	r2, r3
 800260e:	403a      	ands	r2, r7
 8002610:	9201      	str	r2, [sp, #4]
 8002612:	423b      	tst	r3, r7
 8002614:	d1d7      	bne.n	80025c6 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002616:	f7fe fe19 	bl	800124c <HAL_GetTick>
 800261a:	9b00      	ldr	r3, [sp, #0]
 800261c:	1ac0      	subs	r0, r0, r3
 800261e:	23fa      	movs	r3, #250	; 0xfa
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4298      	cmp	r0, r3
 8002624:	d9f0      	bls.n	8002608 <HAL_RTC_DeactivateAlarm+0x94>
 8002626:	e7dc      	b.n	80025e2 <HAL_RTC_DeactivateAlarm+0x6e>
 8002628:	fffffeff 	.word	0xfffffeff
 800262c:	ffffefff 	.word	0xffffefff
 8002630:	fffffdff 	.word	0xfffffdff
 8002634:	ffffdfff 	.word	0xffffdfff

08002638 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002638:	6803      	ldr	r3, [r0, #0]
{
 800263a:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800263c:	689a      	ldr	r2, [r3, #8]
{
 800263e:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002640:	04d2      	lsls	r2, r2, #19
 8002642:	d50a      	bpl.n	800265a <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	05db      	lsls	r3, r3, #23
 8002648:	d507      	bpl.n	800265a <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800264a:	f004 fbcb 	bl	8006de4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800264e:	6821      	ldr	r1, [r4, #0]
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_RTC_AlarmIRQHandler+0x54>)
 8002652:	68ca      	ldr	r2, [r1, #12]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4313      	orrs	r3, r2
 8002658:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	0492      	lsls	r2, r2, #18
 8002660:	d50b      	bpl.n	800267a <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	059b      	lsls	r3, r3, #22
 8002666:	d508      	bpl.n	800267a <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002668:	0020      	movs	r0, r4
 800266a:	f000 faf9 	bl	8002c60 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800266e:	6821      	ldr	r1, [r4, #0]
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002672:	68ca      	ldr	r2, [r1, #12]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	4313      	orrs	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800267e:	0292      	lsls	r2, r2, #10
 8002680:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002682:	2301      	movs	r3, #1
 8002684:	3402      	adds	r4, #2
 8002686:	77e3      	strb	r3, [r4, #31]
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	fffffe7f 	.word	0xfffffe7f
 8002690:	fffffd7f 	.word	0xfffffd7f
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002698:	21a0      	movs	r1, #160	; 0xa0
 800269a:	6802      	ldr	r2, [r0, #0]
{
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800269e:	68d3      	ldr	r3, [r2, #12]
{
 80026a0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026a2:	438b      	bics	r3, r1
 80026a4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80026a6:	f7fe fdd1 	bl	800124c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026aa:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80026ac:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026ae:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026b0:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4233      	tst	r3, r6
 80026b8:	d001      	beq.n	80026be <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80026ba:	2000      	movs	r0, #0
}
 80026bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026be:	f7fe fdc5 	bl	800124c <HAL_GetTick>
 80026c2:	1b40      	subs	r0, r0, r5
 80026c4:	42b8      	cmp	r0, r7
 80026c6:	d9f4      	bls.n	80026b2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80026c8:	2003      	movs	r0, #3
 80026ca:	e7f7      	b.n	80026bc <HAL_RTC_WaitForSynchro+0x24>

080026cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80026ce:	2640      	movs	r6, #64	; 0x40
 80026d0:	6803      	ldr	r3, [r0, #0]
{
 80026d2:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4232      	tst	r2, r6
 80026d8:	d001      	beq.n	80026de <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80026da:	2000      	movs	r0, #0
}
 80026dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80026de:	2201      	movs	r2, #1
 80026e0:	4252      	negs	r2, r2
 80026e2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80026e4:	f7fe fdb2 	bl	800124c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026e8:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80026ea:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026ec:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4233      	tst	r3, r6
 80026f4:	d1f1      	bne.n	80026da <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026f6:	f7fe fda9 	bl	800124c <HAL_GetTick>
 80026fa:	1b40      	subs	r0, r0, r5
 80026fc:	42b8      	cmp	r0, r7
 80026fe:	d9f6      	bls.n	80026ee <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8002700:	2003      	movs	r0, #3
 8002702:	e7eb      	b.n	80026dc <RTC_EnterInitMode+0x10>

08002704 <HAL_RTC_Init>:
{
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002708:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800270a:	2800      	cmp	r0, #0
 800270c:	d01a      	beq.n	8002744 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800270e:	1c86      	adds	r6, r0, #2
 8002710:	7ff3      	ldrb	r3, [r6, #31]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8002718:	1943      	adds	r3, r0, r5
 800271a:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 800271c:	f7fe f84e 	bl	80007bc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002720:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002722:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002724:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002726:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002728:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
 800272c:	3a77      	subs	r2, #119	; 0x77
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002730:	f7ff ffcc 	bl	80026cc <RTC_EnterInitMode>
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	1e05      	subs	r5, r0, #0
 8002738:	d006      	beq.n	8002748 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273a:	22ff      	movs	r2, #255	; 0xff
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800273e:	2304      	movs	r3, #4
 8002740:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8002742:	2501      	movs	r5, #1
}
 8002744:	0028      	movs	r0, r5
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	491b      	ldr	r1, [pc, #108]	; (80027b8 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800274c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800274e:	400a      	ands	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002752:	6862      	ldr	r2, [r4, #4]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	4302      	orrs	r2, r0
 8002758:	69a0      	ldr	r0, [r4, #24]
 800275a:	4302      	orrs	r2, r0
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002760:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002762:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002764:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002766:	68a2      	ldr	r2, [r4, #8]
 8002768:	6919      	ldr	r1, [r3, #16]
 800276a:	0412      	lsls	r2, r2, #16
 800276c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800276e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002770:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	438a      	bics	r2, r1
 8002776:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277a:	397d      	subs	r1, #125	; 0x7d
 800277c:	438a      	bics	r2, r1
 800277e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002780:	69e2      	ldr	r2, [r4, #28]
 8002782:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002784:	4302      	orrs	r2, r0
 8002786:	430a      	orrs	r2, r1
 8002788:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	d40c      	bmi.n	80027aa <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002790:	0020      	movs	r0, r4
 8002792:	f7ff ff81 	bl	8002698 <HAL_RTC_WaitForSynchro>
 8002796:	2800      	cmp	r0, #0
 8002798:	d007      	beq.n	80027aa <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800279e:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027a2:	2304      	movs	r3, #4
 80027a4:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80027a6:	77e5      	strb	r5, [r4, #31]
 80027a8:	e7cb      	b.n	8002742 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027aa:	22ff      	movs	r2, #255	; 0xff
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80027b0:	2301      	movs	r3, #1
 80027b2:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80027b4:	e7c6      	b.n	8002744 <HAL_RTC_Init+0x40>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	ff8fffbf 	.word	0xff8fffbf

080027bc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80027bc:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80027be:	2809      	cmp	r0, #9
 80027c0:	d803      	bhi.n	80027ca <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4318      	orrs	r0, r3
 80027c6:	b2c0      	uxtb	r0, r0
}
 80027c8:	4770      	bx	lr
    Param -= 10U;
 80027ca:	380a      	subs	r0, #10
    bcdhigh++;
 80027cc:	3301      	adds	r3, #1
    Param -= 10U;
 80027ce:	b2c0      	uxtb	r0, r0
 80027d0:	e7f5      	b.n	80027be <RTC_ByteToBcd2+0x2>
	...

080027d4 <HAL_RTC_SetTime>:
{
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80027d6:	1c43      	adds	r3, r0, #1
{
 80027d8:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80027da:	9301      	str	r3, [sp, #4]
{
 80027dc:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80027de:	7fd9      	ldrb	r1, [r3, #31]
 80027e0:	2302      	movs	r3, #2
{
 80027e2:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80027e4:	001f      	movs	r7, r3
 80027e6:	2901      	cmp	r1, #1
 80027e8:	d036      	beq.n	8002858 <HAL_RTC_SetTime+0x84>
 80027ea:	2101      	movs	r1, #1
 80027ec:	1840      	adds	r0, r0, r1
 80027ee:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027f0:	18e9      	adds	r1, r5, r3
 80027f2:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027f4:	682f      	ldr	r7, [r5, #0]
 80027f6:	7820      	ldrb	r0, [r4, #0]
 80027f8:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027fa:	9102      	str	r1, [sp, #8]
 80027fc:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d12d      	bne.n	800285e <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	0011      	movs	r1, r2
 8002806:	4019      	ands	r1, r3
 8002808:	421a      	tst	r2, r3
 800280a:	d100      	bne.n	800280e <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 800280c:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800280e:	f7ff ffd5 	bl	80027bc <RTC_ByteToBcd2>
 8002812:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002814:	0030      	movs	r0, r6
 8002816:	f7ff ffd1 	bl	80027bc <RTC_ByteToBcd2>
 800281a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800281c:	78a0      	ldrb	r0, [r4, #2]
 800281e:	f7ff ffcd 	bl	80027bc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002822:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002824:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002826:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002828:	4303      	orrs	r3, r0
 800282a:	0412      	lsls	r2, r2, #16
 800282c:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800282e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002830:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002832:	23ca      	movs	r3, #202	; 0xca
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	3b77      	subs	r3, #119	; 0x77
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800283a:	0028      	movs	r0, r5
 800283c:	f7ff ff46 	bl	80026cc <RTC_EnterInitMode>
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	1e07      	subs	r7, r0, #0
 8002844:	d019      	beq.n	800287a <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800284a:	2304      	movs	r3, #4
 800284c:	9a02      	ldr	r2, [sp, #8]
 800284e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002850:	2300      	movs	r3, #0
 8002852:	9a01      	ldr	r2, [sp, #4]
 8002854:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8002856:	2701      	movs	r7, #1
}
 8002858:	0038      	movs	r0, r7
 800285a:	b005      	add	sp, #20
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	0011      	movs	r1, r2
 8002862:	4019      	ands	r1, r3
 8002864:	421a      	tst	r2, r3
 8002866:	d100      	bne.n	800286a <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8002868:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 800286a:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800286c:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800286e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002870:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002872:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002874:	78e3      	ldrb	r3, [r4, #3]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	e7da      	b.n	8002830 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800287c:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800287e:	4016      	ands	r6, r2
 8002880:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002882:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002884:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002886:	400a      	ands	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800288a:	68e2      	ldr	r2, [r4, #12]
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	4302      	orrs	r2, r0
 8002890:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002892:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002894:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	438a      	bics	r2, r1
 800289a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	069b      	lsls	r3, r3, #26
 80028a0:	d40d      	bmi.n	80028be <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028a2:	0028      	movs	r0, r5
 80028a4:	f7ff fef8 	bl	8002698 <HAL_RTC_WaitForSynchro>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d008      	beq.n	80028be <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028ac:	22ff      	movs	r2, #255	; 0xff
 80028ae:	682b      	ldr	r3, [r5, #0]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028b2:	2304      	movs	r3, #4
 80028b4:	9a02      	ldr	r2, [sp, #8]
 80028b6:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80028b8:	9b01      	ldr	r3, [sp, #4]
 80028ba:	77df      	strb	r7, [r3, #31]
 80028bc:	e7cb      	b.n	8002856 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028be:	22ff      	movs	r2, #255	; 0xff
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80028c4:	2301      	movs	r3, #1
 80028c6:	9a02      	ldr	r2, [sp, #8]
 80028c8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80028ca:	2300      	movs	r3, #0
 80028cc:	9a01      	ldr	r2, [sp, #4]
 80028ce:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 80028d0:	e7c2      	b.n	8002858 <HAL_RTC_SetTime+0x84>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	007f7f7f 	.word	0x007f7f7f
 80028d8:	fffbffff 	.word	0xfffbffff

080028dc <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 80028dc:	2302      	movs	r3, #2
{
 80028de:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80028e0:	1c47      	adds	r7, r0, #1
{
 80028e2:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80028e4:	7ff9      	ldrb	r1, [r7, #31]
{
 80028e6:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80028e8:	001d      	movs	r5, r3
{
 80028ea:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80028ec:	2901      	cmp	r1, #1
 80028ee:	d036      	beq.n	800295e <HAL_RTC_SetDate+0x82>
 80028f0:	2101      	movs	r1, #1
 80028f2:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028f4:	18c1      	adds	r1, r0, r3
 80028f6:	77cb      	strb	r3, [r1, #31]
 80028f8:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 80028fa:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80028fc:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 80028fe:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002900:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002902:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8002904:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002906:	2a00      	cmp	r2, #0
 8002908:	d14c      	bne.n	80029a4 <HAL_RTC_SetDate+0xc8>
 800290a:	3210      	adds	r2, #16
 800290c:	4213      	tst	r3, r2
 800290e:	d002      	beq.n	8002916 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002910:	4393      	bics	r3, r2
 8002912:	330a      	adds	r3, #10
 8002914:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002916:	f7ff ff51 	bl	80027bc <RTC_ByteToBcd2>
 800291a:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800291c:	7870      	ldrb	r0, [r6, #1]
 800291e:	f7ff ff4d 	bl	80027bc <RTC_ByteToBcd2>
 8002922:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002924:	0028      	movs	r0, r5
 8002926:	f7ff ff49 	bl	80027bc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800292a:	9b03      	ldr	r3, [sp, #12]
 800292c:	9a02      	ldr	r2, [sp, #8]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	4310      	orrs	r0, r2
 8002932:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002934:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002936:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002938:	22ca      	movs	r2, #202	; 0xca
 800293a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800293c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
 8002940:	3a77      	subs	r2, #119	; 0x77
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002944:	f7ff fec2 	bl	80026cc <RTC_EnterInitMode>
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	1e05      	subs	r5, r0, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002952:	2304      	movs	r3, #4
 8002954:	9a01      	ldr	r2, [sp, #4]
 8002956:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002958:	2300      	movs	r3, #0
 800295a:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800295c:	2501      	movs	r5, #1
}
 800295e:	0028      	movs	r0, r5
 8002960:	b005      	add	sp, #20
 8002962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002964:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <HAL_RTC_SetDate+0xd8>)
 8002968:	4032      	ands	r2, r6
 800296a:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	438a      	bics	r2, r1
 8002970:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	d40c      	bmi.n	8002992 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002978:	0020      	movs	r0, r4
 800297a:	f7ff fe8d 	bl	8002698 <HAL_RTC_WaitForSynchro>
 800297e:	2800      	cmp	r0, #0
 8002980:	d007      	beq.n	8002992 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002988:	2304      	movs	r3, #4
 800298a:	9a01      	ldr	r2, [sp, #4]
 800298c:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800298e:	77fd      	strb	r5, [r7, #31]
 8002990:	e7e4      	b.n	800295c <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002998:	2301      	movs	r3, #1
 800299a:	9a01      	ldr	r2, [sp, #4]
 800299c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800299e:	2300      	movs	r3, #0
 80029a0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80029a2:	e7dc      	b.n	800295e <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029a4:	9a02      	ldr	r2, [sp, #8]
 80029a6:	0400      	lsls	r0, r0, #16
 80029a8:	4310      	orrs	r0, r2
 80029aa:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->Month) << 8U) | \
 80029ac:	021e      	lsls	r6, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029ae:	4306      	orrs	r6, r0
 80029b0:	e7c2      	b.n	8002938 <HAL_RTC_SetDate+0x5c>
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	00ffff3f 	.word	0x00ffff3f

080029b8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80029b8:	2302      	movs	r3, #2
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80029be:	1c41      	adds	r1, r0, #1
 80029c0:	7fce      	ldrb	r6, [r1, #31]
{
 80029c2:	0004      	movs	r4, r0
 80029c4:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80029c6:	0018      	movs	r0, r3
 80029c8:	2e01      	cmp	r6, #1
 80029ca:	d100      	bne.n	80029ce <HAL_RTC_SetAlarm_IT+0x16>
 80029cc:	e097      	b.n	8002afe <HAL_RTC_SetAlarm_IT+0x146>
 80029ce:	3801      	subs	r0, #1
 80029d0:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d2:	18e1      	adds	r1, r4, r3
 80029d4:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80029d6:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029d8:	6826      	ldr	r6, [r4, #0]
 80029da:	9101      	str	r1, [sp, #4]
 80029dc:	7828      	ldrb	r0, [r5, #0]
 80029de:	78af      	ldrb	r7, [r5, #2]
 80029e0:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d165      	bne.n	8002ab2 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029e6:	68b2      	ldr	r2, [r6, #8]
 80029e8:	0011      	movs	r1, r2
 80029ea:	4019      	ands	r1, r3
 80029ec:	421a      	tst	r2, r3
 80029ee:	d100      	bne.n	80029f2 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029f0:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029f2:	f7ff fee3 	bl	80027bc <RTC_ByteToBcd2>
 80029f6:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029f8:	9801      	ldr	r0, [sp, #4]
 80029fa:	f7ff fedf 	bl	80027bc <RTC_ByteToBcd2>
 80029fe:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002a00:	0038      	movs	r0, r7
 8002a02:	f7ff fedb 	bl	80027bc <RTC_ByteToBcd2>
 8002a06:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a08:	1c6b      	adds	r3, r5, #1
 8002a0a:	7fd8      	ldrb	r0, [r3, #31]
 8002a0c:	f7ff fed6 	bl	80027bc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a10:	696a      	ldr	r2, [r5, #20]
 8002a12:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a14:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a16:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a18:	78ea      	ldrb	r2, [r5, #3]
 8002a1a:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	431f      	orrs	r7, r3
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a26:	9b01      	ldr	r3, [sp, #4]
 8002a28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a2a:	431f      	orrs	r7, r3
 8002a2c:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a2e:	69ab      	ldr	r3, [r5, #24]
 8002a30:	686a      	ldr	r2, [r5, #4]
 8002a32:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a34:	23ca      	movs	r3, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a36:	9201      	str	r2, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a38:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a3a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a3c:	3b77      	subs	r3, #119	; 0x77
 8002a3e:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a40:	33ad      	adds	r3, #173	; 0xad
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d15d      	bne.n	8002b02 <HAL_RTC_SetAlarm_IT+0x14a>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a46:	68b3      	ldr	r3, [r6, #8]
 8002a48:	4a42      	ldr	r2, [pc, #264]	; (8002b54 <HAL_RTC_SetAlarm_IT+0x19c>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a4a:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a50:	68f2      	ldr	r2, [r6, #12]
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002a5a:	f7fe fbf7 	bl	800124c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a5e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8002a60:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a62:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	0011      	movs	r1, r2
 8002a6a:	4029      	ands	r1, r5
 8002a6c:	9103      	str	r1, [sp, #12]
 8002a6e:	422a      	tst	r2, r5
 8002a70:	d036      	beq.n	8002ae0 <HAL_RTC_SetAlarm_IT+0x128>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a72:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a74:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	0052      	lsls	r2, r2, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <HAL_RTC_SetAlarm_IT+0x1a4>)
 8002a90:	0292      	lsls	r2, r2, #10
 8002a92:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8002a94:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002a96:	4311      	orrs	r1, r2
 8002a98:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002aa6:	3afe      	subs	r2, #254	; 0xfe
 8002aa8:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8002aaa:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8002aac:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8002aae:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002ab0:	e025      	b.n	8002afe <HAL_RTC_SetAlarm_IT+0x146>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ab2:	68b2      	ldr	r2, [r6, #8]
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	4019      	ands	r1, r3
 8002ab8:	421a      	tst	r2, r3
 8002aba:	d100      	bne.n	8002abe <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002abc:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002abe:	69eb      	ldr	r3, [r5, #28]
 8002ac0:	696a      	ldr	r2, [r5, #20]
 8002ac2:	0400      	lsls	r0, r0, #16
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ac8:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002aca:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002acc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ace:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ad0:	78eb      	ldrb	r3, [r5, #3]
 8002ad2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ad4:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002ad6:	1c6b      	adds	r3, r5, #1
 8002ad8:	7fdb      	ldrb	r3, [r3, #31]
 8002ada:	061b      	lsls	r3, r3, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002adc:	431f      	orrs	r7, r3
 8002ade:	e7a6      	b.n	8002a2e <HAL_RTC_SetAlarm_IT+0x76>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ae0:	f7fe fbb4 	bl	800124c <HAL_GetTick>
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	1ac0      	subs	r0, r0, r3
 8002ae8:	42b0      	cmp	r0, r6
 8002aea:	d9bb      	bls.n	8002a64 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aec:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aee:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002af4:	1ca3      	adds	r3, r4, #2
 8002af6:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8002af8:	9b03      	ldr	r3, [sp, #12]
 8002afa:	3401      	adds	r4, #1
 8002afc:	77e3      	strb	r3, [r4, #31]
}
 8002afe:	b005      	add	sp, #20
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b02:	68b3      	ldr	r3, [r6, #8]
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_RTC_SetAlarm_IT+0x1a8>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b06:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b0c:	68f2      	ldr	r2, [r6, #12]
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RTC_SetAlarm_IT+0x1ac>)
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002b16:	f7fe fb99 	bl	800124c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b1a:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8002b1c:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b1e:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	0011      	movs	r1, r2
 8002b26:	4029      	ands	r1, r5
 8002b28:	9103      	str	r1, [sp, #12]
 8002b2a:	422a      	tst	r2, r5
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RTC_SetAlarm_IT+0x18e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b2e:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b30:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b32:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	0192      	lsls	r2, r2, #6
 8002b44:	e7a0      	b.n	8002a88 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b46:	f7fe fb81 	bl	800124c <HAL_GetTick>
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	1ac0      	subs	r0, r0, r3
 8002b4e:	42b0      	cmp	r0, r6
 8002b50:	d9e6      	bls.n	8002b20 <HAL_RTC_SetAlarm_IT+0x168>
 8002b52:	e7cb      	b.n	8002aec <HAL_RTC_SetAlarm_IT+0x134>
 8002b54:	fffffeff 	.word	0xfffffeff
 8002b58:	fffffe7f 	.word	0xfffffe7f
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	fffffdff 	.word	0xfffffdff
 8002b64:	fffffd7f 	.word	0xfffffd7f

08002b68 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002b68:	0902      	lsrs	r2, r0, #4
{
 8002b6a:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002b6c:	200a      	movs	r0, #10
 8002b6e:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002b70:	220f      	movs	r2, #15
 8002b72:	4013      	ands	r3, r2
 8002b74:	18c0      	adds	r0, r0, r3
 8002b76:	b2c0      	uxtb	r0, r0
}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_RTC_GetTime>:
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b80:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b82:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002b86:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b88:	690b      	ldr	r3, [r1, #16]
 8002b8a:	045b      	lsls	r3, r3, #17
 8002b8c:	0c5b      	lsrs	r3, r3, #17
 8002b8e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b90:	680b      	ldr	r3, [r1, #0]
 8002b92:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_RTC_GetTime+0x50>)
 8002b94:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b96:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002b98:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002b9a:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002b9c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b9e:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002ba0:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002ba2:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002ba4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002ba6:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ba8:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002baa:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bb0:	f7ff ffda 	bl	8002b68 <RTC_Bcd2ToByte>
 8002bb4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002bb6:	0030      	movs	r0, r6
 8002bb8:	f7ff ffd6 	bl	8002b68 <RTC_Bcd2ToByte>
 8002bbc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002bbe:	0028      	movs	r0, r5
 8002bc0:	f7ff ffd2 	bl	8002b68 <RTC_Bcd2ToByte>
 8002bc4:	70a0      	strb	r0, [r4, #2]
}
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	007f7f7f 	.word	0x007f7f7f

08002bd0 <HAL_RTC_GetDate>:
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002bd4:	6803      	ldr	r3, [r0, #0]
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RTC_GetDate+0x40>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002bdc:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002bde:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002be0:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002be2:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002be4:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002be6:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002be8:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002bea:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002bec:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002bee:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	d10a      	bne.n	8002c0a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002bf4:	f7ff ffb8 	bl	8002b68 <RTC_Bcd2ToByte>
 8002bf8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002bfa:	0028      	movs	r0, r5
 8002bfc:	f7ff ffb4 	bl	8002b68 <RTC_Bcd2ToByte>
 8002c00:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002c02:	0030      	movs	r0, r6
 8002c04:	f7ff ffb0 	bl	8002b68 <RTC_Bcd2ToByte>
 8002c08:	70a0      	strb	r0, [r4, #2]
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	00ffff3f 	.word	0x00ffff3f

08002c14 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c14:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8002c16:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c18:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8002c1a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c1c:	600a      	str	r2, [r1, #0]
}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c20:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8002c22:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c24:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8002c26:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002c28:	6808      	ldr	r0, [r1, #0]
}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c2c:	2202      	movs	r2, #2
{
 8002c2e:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8002c30:	1c41      	adds	r1, r0, #1
 8002c32:	7fcc      	ldrb	r4, [r1, #31]
{
 8002c34:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8002c36:	0010      	movs	r0, r2
 8002c38:	2c01      	cmp	r4, #1
 8002c3a:	d010      	beq.n	8002c5e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c3c:	1898      	adds	r0, r3, r2
 8002c3e:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	32c8      	adds	r2, #200	; 0xc8
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
 8002c46:	3a77      	subs	r2, #119	; 0x77
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002c4a:	689c      	ldr	r4, [r3, #8]
 8002c4c:	3a33      	subs	r2, #51	; 0x33
 8002c4e:	4322      	orrs	r2, r4
 8002c50:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c56:	2301      	movs	r3, #1
 8002c58:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8002c5e:	bd10      	pop	{r4, pc}

08002c60 <HAL_RTCEx_AlarmBEventCallback>:
 8002c60:	4770      	bx	lr
	...

08002c64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	001f      	movs	r7, r3
 8002c68:	b085      	sub	sp, #20
 8002c6a:	000e      	movs	r6, r1
 8002c6c:	9201      	str	r2, [sp, #4]
 8002c6e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c70:	f7fe faec 	bl	800124c <HAL_GetTick>
 8002c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c76:	19dd      	adds	r5, r3, r7
 8002c78:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002c7a:	f7fe fae7 	bl	800124c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 8002c80:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	0d1b      	lsrs	r3, r3, #20
 8002c88:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002c8c:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8e:	6893      	ldr	r3, [r2, #8]
 8002c90:	4033      	ands	r3, r6
 8002c92:	1b9b      	subs	r3, r3, r6
 8002c94:	4259      	negs	r1, r3
 8002c96:	414b      	adcs	r3, r1
 8002c98:	9901      	ldr	r1, [sp, #4]
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	d101      	bne.n	8002ca2 <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e032      	b.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	1c7b      	adds	r3, r7, #1
 8002ca4:	d0f3      	beq.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ca6:	f7fe fad1 	bl	800124c <HAL_GetTick>
 8002caa:	9b00      	ldr	r3, [sp, #0]
 8002cac:	1ac0      	subs	r0, r0, r3
 8002cae:	42a8      	cmp	r0, r5
 8002cb0:	d32c      	bcc.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cb2:	21e0      	movs	r1, #224	; 0xe0
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	438a      	bics	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbc:	2282      	movs	r2, #130	; 0x82
 8002cbe:	6861      	ldr	r1, [r4, #4]
 8002cc0:	0052      	lsls	r2, r2, #1
 8002cc2:	4291      	cmp	r1, r2
 8002cc4:	d10c      	bne.n	8002ce0 <SPI_WaitFlagStateUntilTimeout+0x7c>
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	68a2      	ldr	r2, [r4, #8]
 8002cca:	0209      	lsls	r1, r1, #8
 8002ccc:	428a      	cmp	r2, r1
 8002cce:	d003      	beq.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	00c9      	lsls	r1, r1, #3
 8002cd4:	428a      	cmp	r2, r1
 8002cd6:	d103      	bne.n	8002ce0 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ce4:	0189      	lsls	r1, r1, #6
 8002ce6:	428a      	cmp	r2, r1
 8002ce8:	d106      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	480c      	ldr	r0, [pc, #48]	; (8002d20 <SPI_WaitFlagStateUntilTimeout+0xbc>)
 8002cee:	4001      	ands	r1, r0
 8002cf0:	6019      	str	r1, [r3, #0]
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002cf8:	0023      	movs	r3, r4
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	3351      	adds	r3, #81	; 0x51
 8002cfe:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8002d00:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002d02:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002d04:	3450      	adds	r4, #80	; 0x50
 8002d06:	7023      	strb	r3, [r4, #0]
}
 8002d08:	b005      	add	sp, #20
 8002d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8002d0c:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	4193      	sbcs	r3, r2
 8002d12:	425b      	negs	r3, r3
 8002d14:	401d      	ands	r5, r3
      count--;
 8002d16:	9b03      	ldr	r3, [sp, #12]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	e7b6      	b.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0x26>
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	ffffdfff 	.word	0xffffdfff

08002d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <SPI_EndRxTxTransaction+0x60>)
{
 8002d28:	0004      	movs	r4, r0
 8002d2a:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	4916      	ldr	r1, [pc, #88]	; (8002d88 <SPI_EndRxTxTransaction+0x64>)
{
 8002d30:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d32:	f7fd fa0f 	bl	8000154 <__udivsi3>
 8002d36:	23fa      	movs	r3, #250	; 0xfa
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4343      	muls	r3, r0
 8002d3c:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3e:	2382      	movs	r3, #130	; 0x82
 8002d40:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d42:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4299      	cmp	r1, r3
 8002d48:	d10f      	bne.n	8002d6a <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	002b      	movs	r3, r5
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	0020      	movs	r0, r4
 8002d52:	9600      	str	r6, [sp, #0]
 8002d54:	f7ff ff86 	bl	8002c64 <SPI_WaitFlagStateUntilTimeout>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d010      	beq.n	8002d7e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5c:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002d62:	4313      	orrs	r3, r2
 8002d64:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8002d66:	b004      	add	sp, #16
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8002d6a:	9b03      	ldr	r3, [sp, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <SPI_EndRxTxTransaction+0x5a>
      count--;
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4213      	tst	r3, r2
 8002d7c:	d1f5      	bne.n	8002d6a <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8002d7e:	2000      	movs	r0, #0
 8002d80:	e7f1      	b.n	8002d66 <SPI_EndRxTxTransaction+0x42>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20000000 	.word	0x20000000
 8002d88:	016e3600 	.word	0x016e3600

08002d8c <HAL_SPI_MspInit>:
}
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_SPI_Init>:
{
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002d96:	2c00      	cmp	r4, #0
 8002d98:	d05a      	beq.n	8002e50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d158      	bne.n	8002e52 <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da0:	2282      	movs	r2, #130	; 0x82
 8002da2:	6861      	ldr	r1, [r4, #4]
 8002da4:	0052      	lsls	r2, r2, #1
 8002da6:	4291      	cmp	r1, r2
 8002da8:	d000      	beq.n	8002dac <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002daa:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dac:	0025      	movs	r5, r4
 8002dae:	3551      	adds	r5, #81	; 0x51
 8002db0:	782b      	ldrb	r3, [r5, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8002db8:	0023      	movs	r3, r4
 8002dba:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8002dbc:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002dbe:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8002dc0:	f7ff ffe4 	bl	8002d8c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc4:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 8002dc6:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc8:	2682      	movs	r6, #130	; 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dca:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dcc:	2784      	movs	r7, #132	; 0x84
  __HAL_SPI_DISABLE(hspi);
 8002dce:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd0:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 8002dd2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd4:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	69a2      	ldr	r2, [r4, #24]
 8002dde:	4033      	ands	r3, r6
 8002de0:	68a6      	ldr	r6, [r4, #8]
 8002de2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002de4:	403e      	ands	r6, r7
 8002de6:	2780      	movs	r7, #128	; 0x80
 8002de8:	4333      	orrs	r3, r6
 8002dea:	68e6      	ldr	r6, [r4, #12]
 8002dec:	013f      	lsls	r7, r7, #4
 8002dee:	403e      	ands	r6, r7
 8002df0:	2702      	movs	r7, #2
 8002df2:	4333      	orrs	r3, r6
 8002df4:	6926      	ldr	r6, [r4, #16]
 8002df6:	403e      	ands	r6, r7
 8002df8:	4333      	orrs	r3, r6
 8002dfa:	6966      	ldr	r6, [r4, #20]
 8002dfc:	3f01      	subs	r7, #1
 8002dfe:	403e      	ands	r6, r7
 8002e00:	4333      	orrs	r3, r6
 8002e02:	2680      	movs	r6, #128	; 0x80
 8002e04:	00b6      	lsls	r6, r6, #2
 8002e06:	4016      	ands	r6, r2
 8002e08:	4333      	orrs	r3, r6
 8002e0a:	69e6      	ldr	r6, [r4, #28]
 8002e0c:	3737      	adds	r7, #55	; 0x37
 8002e0e:	403e      	ands	r6, r7
 8002e10:	4333      	orrs	r3, r6
 8002e12:	6a26      	ldr	r6, [r4, #32]
 8002e14:	3748      	adds	r7, #72	; 0x48
 8002e16:	403e      	ands	r6, r7
 8002e18:	4333      	orrs	r3, r6
 8002e1a:	2680      	movs	r6, #128	; 0x80
 8002e1c:	0007      	movs	r7, r0
 8002e1e:	01b6      	lsls	r6, r6, #6
 8002e20:	4037      	ands	r7, r6
 8002e22:	433b      	orrs	r3, r7
 8002e24:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e26:	2304      	movs	r3, #4
 8002e28:	2710      	movs	r7, #16
 8002e2a:	0c12      	lsrs	r2, r2, #16
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e30:	403b      	ands	r3, r7
 8002e32:	431a      	orrs	r2, r3
 8002e34:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e36:	42b0      	cmp	r0, r6
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e40:	69cb      	ldr	r3, [r1, #28]
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e44:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e46:	4013      	ands	r3, r2
 8002e48:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4e:	702b      	strb	r3, [r5, #0]
}
 8002e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e56:	6163      	str	r3, [r4, #20]
 8002e58:	e7a8      	b.n	8002dac <HAL_SPI_Init+0x1c>
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	fffff7ff 	.word	0xfffff7ff

08002e60 <HAL_SPI_TransmitReceive>:
{
 8002e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e62:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8002e64:	0003      	movs	r3, r0
{
 8002e66:	b087      	sub	sp, #28
 8002e68:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8002e6a:	3350      	adds	r3, #80	; 0x50
 8002e6c:	781a      	ldrb	r2, [r3, #0]
{
 8002e6e:	0004      	movs	r4, r0
 8002e70:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 8002e72:	2502      	movs	r5, #2
 8002e74:	2a01      	cmp	r2, #1
 8002e76:	d100      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x1a>
 8002e78:	e0a8      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x16c>
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002e7e:	f7fe f9e5 	bl	800124c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002e82:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002e84:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8002e86:	3351      	adds	r3, #81	; 0x51
 8002e88:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e8a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002e8c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00b      	beq.n	8002eaa <HAL_SPI_TransmitReceive+0x4a>
 8002e92:	2382      	movs	r3, #130	; 0x82
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4299      	cmp	r1, r3
 8002e98:	d000      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x3c>
 8002e9a:	e090      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e9c:	68a3      	ldr	r3, [r4, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x44>
 8002ea2:	e08c      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
 8002ea4:	2a04      	cmp	r2, #4
 8002ea6:	d000      	beq.n	8002eaa <HAL_SPI_TransmitReceive+0x4a>
 8002ea8:	e089      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 8002eaa:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eac:	2e00      	cmp	r6, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x52>
 8002eb0:	e085      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d100      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x5a>
 8002eb8:	e081      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
 8002eba:	2f00      	cmp	r7, #0
 8002ebc:	d100      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x60>
 8002ebe:	e07e      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec0:	0023      	movs	r3, r4
 8002ec2:	3351      	adds	r3, #81	; 0x51
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	2a04      	cmp	r2, #4
 8002ec8:	d001      	beq.n	8002ece <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eca:	2205      	movs	r2, #5
 8002ecc:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ece:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed0:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed2:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed6:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8002eda:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002edc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ede:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8002ee0:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 8002ee2:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ee4:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ee6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ee8:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eea:	0180      	lsls	r0, r0, #6
 8002eec:	4282      	cmp	r2, r0
 8002eee:	d106      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	4d82      	ldr	r5, [pc, #520]	; (80030fc <HAL_SPI_TransmitReceive+0x29c>)
 8002ef4:	4028      	ands	r0, r5
 8002ef6:	6018      	str	r0, [r3, #0]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	4302      	orrs	r2, r0
 8002efc:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	4210      	tst	r0, r2
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	4302      	orrs	r2, r0
 8002f0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	68e0      	ldr	r0, [r4, #12]
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d000      	beq.n	8002f18 <HAL_SPI_TransmitReceive+0xb8>
 8002f16:	e072      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0xc0>
 8002f1c:	2f01      	cmp	r7, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f20:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f22:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002f26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f28:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002f30:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 8002f32:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f34:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002f36:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x110>
 8002f3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d115      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d000      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0xf0>
 8002f4e:	e0b1      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x254>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002f50:	2201      	movs	r2, #1
 8002f52:	9b02      	ldr	r3, [sp, #8]
 8002f54:	0011      	movs	r1, r2
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	0020      	movs	r0, r4
 8002f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f5c:	f7ff fe82 	bl	8002c64 <SPI_WaitFlagStateUntilTimeout>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d100      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x106>
 8002f64:	e0a4      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x250>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f66:	2302      	movs	r3, #2
 8002f68:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	6563      	str	r3, [r4, #84]	; 0x54
 8002f6e:	e025      	b.n	8002fbc <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4232      	tst	r2, r6
 8002f76:	d005      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x124>
 8002f78:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002f7a:	2a00      	cmp	r2, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x124>
 8002f7e:	2d01      	cmp	r5, #1
 8002f80:	d027      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x172>
{
 8002f82:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f84:	6898      	ldr	r0, [r3, #8]
 8002f86:	2101      	movs	r1, #1
 8002f88:	0002      	movs	r2, r0
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	4208      	tst	r0, r1
 8002f8e:	d00c      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x14a>
 8002f90:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002f92:	2900      	cmp	r1, #0
 8002f94:	d009      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 8002f96:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f9c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002fa2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002faa:	f7fe f94f 	bl	800124c <HAL_GetTick>
 8002fae:	9b02      	ldr	r3, [sp, #8]
 8002fb0:	1ac0      	subs	r0, r0, r3
 8002fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	d3bf      	bcc.n	8002f38 <HAL_SPI_TransmitReceive+0xd8>
 8002fb8:	3301      	adds	r3, #1
 8002fba:	d0bd      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8002fbc:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002fbe:	0023      	movs	r3, r4
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	3351      	adds	r3, #81	; 0x51
 8002fc4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	3450      	adds	r4, #80	; 0x50
 8002fca:	7023      	strb	r3, [r4, #0]
}
 8002fcc:	0028      	movs	r0, r5
 8002fce:	b007      	add	sp, #28
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fd4:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd6:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd8:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fda:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002fdc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002fe4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002fe6:	b295      	uxth	r5, r2
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d1ca      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x122>
 8002fec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fee:	42ba      	cmp	r2, r7
 8002ff0:	d1c7      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	0152      	lsls	r2, r2, #5
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e7c2      	b.n	8002f84 <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d001      	beq.n	8003006 <HAL_SPI_TransmitReceive+0x1a6>
 8003002:	2f01      	cmp	r7, #1
 8003004:	d108      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003006:	7832      	ldrb	r2, [r6, #0]
 8003008:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800300a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800300c:	3301      	adds	r3, #1
 800300e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003010:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003012:	3b01      	subs	r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003018:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 800301a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800301c:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800301e:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003020:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_SPI_TransmitReceive+0x1ce>
 8003026:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003028:	2b00      	cmp	r3, #0
 800302a:	d100      	bne.n	800302e <HAL_SPI_TransmitReceive+0x1ce>
 800302c:	e78a      	b.n	8002f44 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	4232      	tst	r2, r6
 8003034:	d005      	beq.n	8003042 <HAL_SPI_TransmitReceive+0x1e2>
 8003036:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003038:	2a00      	cmp	r2, #0
 800303a:	d002      	beq.n	8003042 <HAL_SPI_TransmitReceive+0x1e2>
 800303c:	2d01      	cmp	r5, #1
 800303e:	d01f      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 8003040:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	6898      	ldr	r0, [r3, #8]
 8003048:	0002      	movs	r2, r0
 800304a:	400a      	ands	r2, r1
 800304c:	4208      	tst	r0, r1
 800304e:	d00d      	beq.n	800306c <HAL_SPI_TransmitReceive+0x20c>
 8003050:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003052:	2900      	cmp	r1, #0
 8003054:	d00a      	beq.n	800306c <HAL_SPI_TransmitReceive+0x20c>
        txallowed = 1U;
 8003056:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800305c:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 800305e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003060:	3301      	adds	r3, #1
 8003062:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003064:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800306c:	f7fe f8ee 	bl	800124c <HAL_GetTick>
 8003070:	9b02      	ldr	r3, [sp, #8]
 8003072:	1ac0      	subs	r0, r0, r3
 8003074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003076:	4298      	cmp	r0, r3
 8003078:	d3d2      	bcc.n	8003020 <HAL_SPI_TransmitReceive+0x1c0>
 800307a:	3301      	adds	r3, #1
 800307c:	d0d0      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x1c0>
 800307e:	e79d      	b.n	8002fbc <HAL_SPI_TransmitReceive+0x15c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003080:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003088:	3301      	adds	r3, #1
 800308a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800308c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800308e:	3b01      	subs	r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003094:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003096:	b29d      	uxth	r5, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1d1      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x1e0>
 800309c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800309e:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80030a0:	42bb      	cmp	r3, r7
 80030a2:	d1cd      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	6811      	ldr	r1, [r2, #0]
 80030a8:	015b      	lsls	r3, r3, #5
 80030aa:	430b      	orrs	r3, r1
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e7c8      	b.n	8003042 <HAL_SPI_TransmitReceive+0x1e2>
    READ_REG(hspi->Instance->DR);
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80030b4:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030b6:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80030b8:	6893      	ldr	r3, [r2, #8]
 80030ba:	06db      	lsls	r3, r3, #27
 80030bc:	d506      	bpl.n	80030cc <HAL_SPI_TransmitReceive+0x26c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80030be:	2302      	movs	r3, #2
 80030c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80030c2:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_SPI_TransmitReceive+0x2a0>)
 80030ca:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030cc:	0020      	movs	r0, r4
 80030ce:	9a02      	ldr	r2, [sp, #8]
 80030d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030d2:	f7ff fe27 	bl	8002d24 <SPI_EndRxTxTransaction>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x282>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030da:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80030dc:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030de:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 80030e0:	e76d      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030e2:	68a3      	ldr	r3, [r4, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d000      	beq.n	80030ea <HAL_SPI_TransmitReceive+0x28a>
 80030e8:	e769      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ea:	9305      	str	r3, [sp, #20]
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	9205      	str	r2, [sp, #20]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	9305      	str	r3, [sp, #20]
 80030f6:	9b05      	ldr	r3, [sp, #20]
 80030f8:	e761      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x15e>
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	ffffdfff 	.word	0xffffdfff
 8003100:	0000ffef 	.word	0x0000ffef

08003104 <HAL_SPI_GetState>:
  return hspi->State;
 8003104:	3051      	adds	r0, #81	; 0x51
 8003106:	7800      	ldrb	r0, [r0, #0]
 8003108:	b2c0      	uxtb	r0, r0
}
 800310a:	4770      	bx	lr

0800310c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800310c:	6803      	ldr	r3, [r0, #0]
 800310e:	490b      	ldr	r1, [pc, #44]	; (800313c <UART_EndRxTransfer+0x30>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	400a      	ands	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	3123      	adds	r1, #35	; 0x23
 800311a:	31ff      	adds	r1, #255	; 0xff
 800311c:	438a      	bics	r2, r1
 800311e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003120:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003122:	428a      	cmp	r2, r1
 8003124:	d103      	bne.n	800312e <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	310f      	adds	r1, #15
 800312a:	438a      	bics	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800312e:	2320      	movs	r3, #32
 8003130:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	2300      	movs	r3, #0
 8003134:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003136:	6643      	str	r3, [r0, #100]	; 0x64
}
 8003138:	4770      	bx	lr
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	fffffedf 	.word	0xfffffedf

08003140 <HAL_UART_DeInit>:
{
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003144:	2001      	movs	r0, #1
  if (huart == NULL)
 8003146:	2c00      	cmp	r4, #0
 8003148:	d014      	beq.n	8003174 <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 800314a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 800314c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800314e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4382      	bics	r2, r0
 8003156:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8003158:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0U;
 800315a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800315c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800315e:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8003160:	f003 fbc8 	bl	80068f4 <HAL_UART_MspDeInit>
  return HAL_OK;
 8003164:	0028      	movs	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	1d23      	adds	r3, r4, #4
 8003168:	67dd      	str	r5, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800316a:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800316c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	6625      	str	r5, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003170:	3474      	adds	r4, #116	; 0x74
 8003172:	7025      	strb	r5, [r4, #0]
}
 8003174:	bd70      	pop	{r4, r5, r6, pc}

08003176 <HAL_UART_RxCpltCallback>:
 8003176:	4770      	bx	lr

08003178 <HAL_UART_ErrorCallback>:
 8003178:	4770      	bx	lr

0800317a <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800317a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	0002      	movs	r2, r0
{
 8003180:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003182:	325a      	adds	r2, #90	; 0x5a
 8003184:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003186:	3a08      	subs	r2, #8
 8003188:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800318a:	f7ff fff5 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318e:	bd10      	pop	{r4, pc}

08003190 <HAL_UARTEx_RxEventCallback>:
}
 8003190:	4770      	bx	lr
	...

08003194 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003194:	6803      	ldr	r3, [r0, #0]
{
 8003196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003198:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800319a:	4a85      	ldr	r2, [pc, #532]	; (80033b0 <HAL_UART_IRQHandler+0x21c>)
{
 800319c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800319e:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a0:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80031a2:	4211      	tst	r1, r2
 80031a4:	d10b      	bne.n	80031be <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031a6:	2220      	movs	r2, #32
 80031a8:	4211      	tst	r1, r2
 80031aa:	d100      	bne.n	80031ae <HAL_UART_IRQHandler+0x1a>
 80031ac:	e076      	b.n	800329c <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ae:	4210      	tst	r0, r2
 80031b0:	d100      	bne.n	80031b4 <HAL_UART_IRQHandler+0x20>
 80031b2:	e073      	b.n	800329c <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80031b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 80031b6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d165      	bne.n	8003288 <HAL_UART_IRQHandler+0xf4>
 80031bc:	e065      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031be:	2201      	movs	r2, #1
 80031c0:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031c2:	4d7c      	ldr	r5, [pc, #496]	; (80033b4 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031c4:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031c6:	4005      	ands	r5, r0
 80031c8:	433d      	orrs	r5, r7
 80031ca:	d067      	beq.n	800329c <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031cc:	1d25      	adds	r5, r4, #4
 80031ce:	4211      	tst	r1, r2
 80031d0:	d005      	beq.n	80031de <HAL_UART_IRQHandler+0x4a>
 80031d2:	05c6      	lsls	r6, r0, #23
 80031d4:	d503      	bpl.n	80031de <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d6:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d8:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80031da:	4332      	orrs	r2, r6
 80031dc:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031de:	2202      	movs	r2, #2
 80031e0:	4211      	tst	r1, r2
 80031e2:	d006      	beq.n	80031f2 <HAL_UART_IRQHandler+0x5e>
 80031e4:	2f00      	cmp	r7, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031e8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ea:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80031ec:	1892      	adds	r2, r2, r2
 80031ee:	4332      	orrs	r2, r6
 80031f0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f2:	2204      	movs	r2, #4
 80031f4:	4211      	tst	r1, r2
 80031f6:	d006      	beq.n	8003206 <HAL_UART_IRQHandler+0x72>
 80031f8:	2f00      	cmp	r7, #0
 80031fa:	d004      	beq.n	8003206 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031fc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031fe:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8003200:	3a02      	subs	r2, #2
 8003202:	4332      	orrs	r2, r6
 8003204:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003206:	2208      	movs	r2, #8
 8003208:	4211      	tst	r1, r2
 800320a:	d007      	beq.n	800321c <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800320c:	2620      	movs	r6, #32
 800320e:	4006      	ands	r6, r0
 8003210:	433e      	orrs	r6, r7
 8003212:	d003      	beq.n	800321c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003214:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003216:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8003218:	4332      	orrs	r2, r6
 800321a:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	4211      	tst	r1, r2
 8003222:	d006      	beq.n	8003232 <HAL_UART_IRQHandler+0x9e>
 8003224:	0146      	lsls	r6, r0, #5
 8003226:	d504      	bpl.n	8003232 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003228:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800322a:	2320      	movs	r3, #32
 800322c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800322e:	4313      	orrs	r3, r2
 8003230:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003232:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d028      	beq.n	800328a <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003238:	2320      	movs	r3, #32
 800323a:	4219      	tst	r1, r3
 800323c:	d006      	beq.n	800324c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800323e:	4218      	tst	r0, r3
 8003240:	d004      	beq.n	800324c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8003242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8003248:	0020      	movs	r0, r4
 800324a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324c:	2240      	movs	r2, #64	; 0x40
 800324e:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 8003250:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003252:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 8003254:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003256:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003258:	3a18      	subs	r2, #24
 800325a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800325c:	431e      	orrs	r6, r3
 800325e:	d019      	beq.n	8003294 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8003260:	f7ff ff54 	bl	800310c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4213      	tst	r3, r2
 800326a:	d00f      	beq.n	800328c <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326c:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 800326e:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003270:	4393      	bics	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8003274:	2800      	cmp	r0, #0
 8003276:	d009      	beq.n	800328c <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003278:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_UART_IRQHandler+0x224>)
 800327a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327c:	f7fe f9ca 	bl	8001614 <HAL_DMA_Abort_IT>
 8003280:	2800      	cmp	r0, #0
 8003282:	d002      	beq.n	800328a <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003284:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003286:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003288:	4798      	blx	r3
}
 800328a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800328c:	0020      	movs	r0, r4
 800328e:	f7ff ff73 	bl	8003178 <HAL_UART_ErrorCallback>
 8003292:	e7fa      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8003294:	f7ff ff70 	bl	8003178 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	67ee      	str	r6, [r5, #124]	; 0x7c
 800329a:	e7f6      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800329c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800329e:	2d01      	cmp	r5, #1
 80032a0:	d161      	bne.n	8003366 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80032a2:	2210      	movs	r2, #16
 80032a4:	4211      	tst	r1, r2
 80032a6:	d05e      	beq.n	8003366 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80032a8:	4210      	tst	r0, r2
 80032aa:	d05c      	beq.n	8003366 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ac:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	2640      	movs	r6, #64	; 0x40
 80032b2:	000f      	movs	r7, r1
 80032b4:	4037      	ands	r7, r6
 80032b6:	4231      	tst	r1, r6
 80032b8:	d038      	beq.n	800332c <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ba:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80032bc:	680f      	ldr	r7, [r1, #0]
 80032be:	9100      	str	r1, [sp, #0]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d0e0      	beq.n	800328a <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032c8:	2058      	movs	r0, #88	; 0x58
 80032ca:	4684      	mov	ip, r0
 80032cc:	44a4      	add	ip, r4
 80032ce:	4660      	mov	r0, ip
 80032d0:	8800      	ldrh	r0, [r0, #0]
 80032d2:	4288      	cmp	r0, r1
 80032d4:	d9d9      	bls.n	800328a <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 80032d6:	205a      	movs	r0, #90	; 0x5a
 80032d8:	4684      	mov	ip, r0
 80032da:	44a4      	add	ip, r4
 80032dc:	4660      	mov	r0, ip
 80032de:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032e0:	683f      	ldr	r7, [r7, #0]
 80032e2:	2120      	movs	r1, #32
 80032e4:	0038      	movs	r0, r7
 80032e6:	4008      	ands	r0, r1
 80032e8:	9001      	str	r0, [sp, #4]
 80032ea:	420f      	tst	r7, r1
 80032ec:	d112      	bne.n	8003314 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ee:	681f      	ldr	r7, [r3, #0]
 80032f0:	4832      	ldr	r0, [pc, #200]	; (80033bc <HAL_UART_IRQHandler+0x228>)
 80032f2:	4007      	ands	r7, r0
 80032f4:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032f8:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	43af      	bics	r7, r5
 80032fc:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	689d      	ldr	r5, [r3, #8]
 8003300:	43b5      	bics	r5, r6
 8003302:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8003304:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	9901      	ldr	r1, [sp, #4]
 8003308:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	4391      	bics	r1, r2
 800330e:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003310:	f7fe f960 	bl	80015d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003314:	0023      	movs	r3, r4
 8003316:	0022      	movs	r2, r4
 8003318:	335a      	adds	r3, #90	; 0x5a
 800331a:	3258      	adds	r2, #88	; 0x58
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	8811      	ldrh	r1, [r2, #0]
 8003320:	1ac9      	subs	r1, r1, r3
 8003322:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003324:	0020      	movs	r0, r4
 8003326:	f7ff ff33 	bl	8003190 <HAL_UARTEx_RxEventCallback>
 800332a:	e7ae      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800332c:	0026      	movs	r6, r4
 800332e:	0021      	movs	r1, r4
 8003330:	365a      	adds	r6, #90	; 0x5a
 8003332:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8003334:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003336:	3158      	adds	r1, #88	; 0x58
 8003338:	8809      	ldrh	r1, [r1, #0]
 800333a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800333c:	2e00      	cmp	r6, #0
 800333e:	d0a4      	beq.n	800328a <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003340:	1a09      	subs	r1, r1, r0
 8003342:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8003344:	2900      	cmp	r1, #0
 8003346:	d0a0      	beq.n	800328a <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	4e1d      	ldr	r6, [pc, #116]	; (80033c0 <HAL_UART_IRQHandler+0x22c>)
 800334c:	4030      	ands	r0, r6
 800334e:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003350:	6898      	ldr	r0, [r3, #8]
 8003352:	43a8      	bics	r0, r5
 8003354:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003356:	2020      	movs	r0, #32
 8003358:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335a:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 800335e:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003360:	4390      	bics	r0, r2
 8003362:	6018      	str	r0, [r3, #0]
 8003364:	e7de      	b.n	8003324 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	0352      	lsls	r2, r2, #13
 800336a:	4211      	tst	r1, r2
 800336c:	d006      	beq.n	800337c <HAL_UART_IRQHandler+0x1e8>
 800336e:	0276      	lsls	r6, r6, #9
 8003370:	d504      	bpl.n	800337c <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8003372:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003374:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003376:	f000 fbc9 	bl	8003b0c <HAL_UARTEx_WakeupCallback>
    return;
 800337a:	e786      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	4211      	tst	r1, r2
 8003380:	d003      	beq.n	800338a <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003382:	4210      	tst	r0, r2
 8003384:	d001      	beq.n	800338a <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8003386:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003388:	e715      	b.n	80031b6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800338a:	2540      	movs	r5, #64	; 0x40
 800338c:	4229      	tst	r1, r5
 800338e:	d100      	bne.n	8003392 <HAL_UART_IRQHandler+0x1fe>
 8003390:	e77b      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
 8003392:	4228      	tst	r0, r5
 8003394:	d100      	bne.n	8003398 <HAL_UART_IRQHandler+0x204>
 8003396:	e778      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003398:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800339a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800339c:	43aa      	bics	r2, r5
 800339e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	2320      	movs	r3, #32
 80033a2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80033a8:	f7fd fc24 	bl	8000bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ac:	e76d      	b.n	800328a <HAL_UART_IRQHandler+0xf6>
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	0000080f 	.word	0x0000080f
 80033b4:	04000120 	.word	0x04000120
 80033b8:	0800317b 	.word	0x0800317b
 80033bc:	fffffeff 	.word	0xfffffeff
 80033c0:	fffffedf 	.word	0xfffffedf

080033c4 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80033c4:	0003      	movs	r3, r0
{
 80033c6:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033c8:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 80033ca:	335c      	adds	r3, #92	; 0x5c
 80033cc:	881a      	ldrh	r2, [r3, #0]
{
 80033ce:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033d0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d2:	2922      	cmp	r1, #34	; 0x22
 80033d4:	d131      	bne.n	800343a <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033d8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80033da:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80033dc:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033de:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 80033e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80033e2:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80033e4:	3301      	adds	r3, #1
 80033e6:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80033e8:	8813      	ldrh	r3, [r2, #0]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80033f0:	8813      	ldrh	r3, [r2, #0]
 80033f2:	b299      	uxth	r1, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11b      	bne.n	8003430 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f8:	6803      	ldr	r3, [r0, #0]
 80033fa:	4812      	ldr	r0, [pc, #72]	; (8003444 <UART_RxISR_8BIT+0x80>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4002      	ands	r2, r0
 8003400:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	3023      	adds	r0, #35	; 0x23
 8003406:	30ff      	adds	r0, #255	; 0xff
 8003408:	4382      	bics	r2, r0
 800340a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800340c:	2220      	movs	r2, #32
 800340e:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8003412:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003414:	4282      	cmp	r2, r0
 8003416:	d10c      	bne.n	8003432 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	2110      	movs	r1, #16
 800341a:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800341c:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341e:	438a      	bics	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003422:	0023      	movs	r3, r4
 8003424:	3358      	adds	r3, #88	; 0x58
 8003426:	8819      	ldrh	r1, [r3, #0]
 8003428:	f7ff feb2 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	2300      	movs	r3, #0
 800342e:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003430:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8003432:	0020      	movs	r0, r4
 8003434:	f7ff fe9f 	bl	8003176 <HAL_UART_RxCpltCallback>
 8003438:	e7f8      	b.n	800342c <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800343a:	2208      	movs	r2, #8
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	430a      	orrs	r2, r1
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	e7f5      	b.n	8003430 <UART_RxISR_8BIT+0x6c>
 8003444:	fffffedf 	.word	0xfffffedf

08003448 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003448:	b510      	push	{r4, lr}
 800344a:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800344c:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800344e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8003450:	335c      	adds	r3, #92	; 0x5c
 8003452:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003454:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003456:	2a22      	cmp	r2, #34	; 0x22
 8003458:	d12f      	bne.n	80034ba <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800345a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800345c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800345e:	4001      	ands	r1, r0
 8003460:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8003462:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8003464:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8003466:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8003468:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 800346a:	880a      	ldrh	r2, [r1, #0]
 800346c:	3a01      	subs	r2, #1
 800346e:	b292      	uxth	r2, r2
 8003470:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8003472:	880a      	ldrh	r2, [r1, #0]
 8003474:	b291      	uxth	r1, r2
 8003476:	2a00      	cmp	r2, #0
 8003478:	d11a      	bne.n	80034b0 <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4811      	ldr	r0, [pc, #68]	; (80034c4 <UART_RxISR_16BIT+0x7c>)
 800347e:	4002      	ands	r2, r0
 8003480:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	3023      	adds	r0, #35	; 0x23
 8003486:	30ff      	adds	r0, #255	; 0xff
 8003488:	4382      	bics	r2, r0
 800348a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800348c:	2220      	movs	r2, #32
 800348e:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8003492:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	4282      	cmp	r2, r0
 8003496:	d10c      	bne.n	80034b2 <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	2110      	movs	r1, #16
 800349a:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349c:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349e:	438a      	bics	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a2:	0023      	movs	r3, r4
 80034a4:	3358      	adds	r3, #88	; 0x58
 80034a6:	8819      	ldrh	r1, [r3, #0]
 80034a8:	f7ff fe72 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	2300      	movs	r3, #0
 80034ae:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034b0:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7ff fe5f 	bl	8003176 <HAL_UART_RxCpltCallback>
 80034b8:	e7f8      	b.n	80034ac <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034ba:	2208      	movs	r2, #8
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	430a      	orrs	r2, r1
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	e7f5      	b.n	80034b0 <UART_RxISR_16BIT+0x68>
 80034c4:	fffffedf 	.word	0xfffffedf

080034c8 <UART_SetConfig>:
{
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034cc:	6925      	ldr	r5, [r4, #16]
 80034ce:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d2:	4329      	orrs	r1, r5
 80034d4:	6965      	ldr	r5, [r4, #20]
 80034d6:	69c3      	ldr	r3, [r0, #28]
 80034d8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034da:	6810      	ldr	r0, [r2, #0]
 80034dc:	4d78      	ldr	r5, [pc, #480]	; (80036c0 <UART_SetConfig+0x1f8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034de:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e0:	4028      	ands	r0, r5
 80034e2:	4301      	orrs	r1, r0
 80034e4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e6:	6851      	ldr	r1, [r2, #4]
 80034e8:	4876      	ldr	r0, [pc, #472]	; (80036c4 <UART_SetConfig+0x1fc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034ea:	4d77      	ldr	r5, [pc, #476]	; (80036c8 <UART_SetConfig+0x200>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	4001      	ands	r1, r0
 80034ee:	68e0      	ldr	r0, [r4, #12]
 80034f0:	4301      	orrs	r1, r0
 80034f2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034f6:	42aa      	cmp	r2, r5
 80034f8:	d001      	beq.n	80034fe <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80034fa:	6a21      	ldr	r1, [r4, #32]
 80034fc:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fe:	6891      	ldr	r1, [r2, #8]
 8003500:	4e72      	ldr	r6, [pc, #456]	; (80036cc <UART_SetConfig+0x204>)
 8003502:	4031      	ands	r1, r6
 8003504:	4301      	orrs	r1, r0
 8003506:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003508:	4971      	ldr	r1, [pc, #452]	; (80036d0 <UART_SetConfig+0x208>)
 800350a:	428a      	cmp	r2, r1
 800350c:	d10f      	bne.n	800352e <UART_SetConfig+0x66>
 800350e:	2103      	movs	r1, #3
 8003510:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <UART_SetConfig+0x20c>)
 8003512:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003514:	400a      	ands	r2, r1
 8003516:	3a01      	subs	r2, #1
 8003518:	496f      	ldr	r1, [pc, #444]	; (80036d8 <UART_SetConfig+0x210>)
 800351a:	2a02      	cmp	r2, #2
 800351c:	d910      	bls.n	8003540 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	0212      	lsls	r2, r2, #8
 8003522:	4293      	cmp	r3, r2
 8003524:	d000      	beq.n	8003528 <UART_SetConfig+0x60>
 8003526:	e0a2      	b.n	800366e <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe ff38 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 800352c:	e0c3      	b.n	80036b6 <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800352e:	496b      	ldr	r1, [pc, #428]	; (80036dc <UART_SetConfig+0x214>)
 8003530:	428a      	cmp	r2, r1
 8003532:	d118      	bne.n	8003566 <UART_SetConfig+0x9e>
 8003534:	200c      	movs	r0, #12
 8003536:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <UART_SetConfig+0x20c>)
 8003538:	4967      	ldr	r1, [pc, #412]	; (80036d8 <UART_SetConfig+0x210>)
 800353a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800353c:	3103      	adds	r1, #3
 800353e:	4002      	ands	r2, r0
 8003540:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	0212      	lsls	r2, r2, #8
 8003546:	4293      	cmp	r3, r2
 8003548:	d000      	beq.n	800354c <UART_SetConfig+0x84>
 800354a:	e082      	b.n	8003652 <UART_SetConfig+0x18a>
    switch (clocksource)
 800354c:	2808      	cmp	r0, #8
 800354e:	d824      	bhi.n	800359a <UART_SetConfig+0xd2>
 8003550:	f7fc fdf6 	bl	8000140 <__gnu_thumb1_case_shi>
 8003554:	ffea00af 	.word	0xffea00af
 8003558:	0023005c 	.word	0x0023005c
 800355c:	0023007c 	.word	0x0023007c
 8003560:	00230023 	.word	0x00230023
 8003564:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003566:	495e      	ldr	r1, [pc, #376]	; (80036e0 <UART_SetConfig+0x218>)
 8003568:	428a      	cmp	r2, r1
 800356a:	d100      	bne.n	800356e <UART_SetConfig+0xa6>
 800356c:	e09d      	b.n	80036aa <UART_SetConfig+0x1e2>
 800356e:	495d      	ldr	r1, [pc, #372]	; (80036e4 <UART_SetConfig+0x21c>)
 8003570:	428a      	cmp	r2, r1
 8003572:	d100      	bne.n	8003576 <UART_SetConfig+0xae>
 8003574:	e099      	b.n	80036aa <UART_SetConfig+0x1e2>
 8003576:	42aa      	cmp	r2, r5
 8003578:	d10f      	bne.n	800359a <UART_SetConfig+0xd2>
 800357a:	21c0      	movs	r1, #192	; 0xc0
 800357c:	2080      	movs	r0, #128	; 0x80
 800357e:	4a55      	ldr	r2, [pc, #340]	; (80036d4 <UART_SetConfig+0x20c>)
 8003580:	0109      	lsls	r1, r1, #4
 8003582:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003584:	0100      	lsls	r0, r0, #4
 8003586:	400b      	ands	r3, r1
 8003588:	4283      	cmp	r3, r0
 800358a:	d016      	beq.n	80035ba <UART_SetConfig+0xf2>
 800358c:	d807      	bhi.n	800359e <UART_SetConfig+0xd6>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_SetConfig+0xe0>
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	00d2      	lsls	r2, r2, #3
 8003596:	4293      	cmp	r3, r2
 8003598:	d035      	beq.n	8003606 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359a:	2001      	movs	r0, #1
 800359c:	e009      	b.n	80035b2 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	428b      	cmp	r3, r1
 80035a0:	d1fb      	bne.n	800359a <UART_SetConfig+0xd2>
 80035a2:	2080      	movs	r0, #128	; 0x80
 80035a4:	0200      	lsls	r0, r0, #8
 80035a6:	e012      	b.n	80035ce <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7fe fee8 	bl	800237c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d10e      	bne.n	80035ce <UART_SetConfig+0x106>
 80035b0:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80035b6:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80035b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ba:	2310      	movs	r3, #16
 80035bc:	6810      	ldr	r0, [r2, #0]
 80035be:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035c0:	4243      	negs	r3, r0
 80035c2:	4158      	adcs	r0, r3
 80035c4:	4b48      	ldr	r3, [pc, #288]	; (80036e8 <UART_SetConfig+0x220>)
 80035c6:	4240      	negs	r0, r0
 80035c8:	4018      	ands	r0, r3
 80035ca:	4b48      	ldr	r3, [pc, #288]	; (80036ec <UART_SetConfig+0x224>)
 80035cc:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035ce:	2203      	movs	r2, #3
 80035d0:	6863      	ldr	r3, [r4, #4]
 80035d2:	435a      	muls	r2, r3
 80035d4:	4290      	cmp	r0, r2
 80035d6:	d3e0      	bcc.n	800359a <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035d8:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035da:	4290      	cmp	r0, r2
 80035dc:	d8dd      	bhi.n	800359a <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035de:	2700      	movs	r7, #0
 80035e0:	0e02      	lsrs	r2, r0, #24
 80035e2:	0201      	lsls	r1, r0, #8
 80035e4:	085e      	lsrs	r6, r3, #1
 80035e6:	1989      	adds	r1, r1, r6
 80035e8:	417a      	adcs	r2, r7
 80035ea:	0008      	movs	r0, r1
 80035ec:	0011      	movs	r1, r2
 80035ee:	001a      	movs	r2, r3
 80035f0:	003b      	movs	r3, r7
 80035f2:	f7fc ff25 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035f6:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <UART_SetConfig+0x228>)
 80035f8:	18c2      	adds	r2, r0, r3
 80035fa:	4b3e      	ldr	r3, [pc, #248]	; (80036f4 <UART_SetConfig+0x22c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d8cc      	bhi.n	800359a <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	60d8      	str	r0, [r3, #12]
 8003604:	e7d4      	b.n	80035b0 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe fb19 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
        break;
 800360a:	e7cf      	b.n	80035ac <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800360c:	2210      	movs	r2, #16
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <UART_SetConfig+0x20c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003614:	425a      	negs	r2, r3
 8003616:	4153      	adcs	r3, r2
 8003618:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <UART_SetConfig+0x220>)
 800361a:	425b      	negs	r3, r3
 800361c:	4013      	ands	r3, r2
 800361e:	4a33      	ldr	r2, [pc, #204]	; (80036ec <UART_SetConfig+0x224>)
 8003620:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003622:	6861      	ldr	r1, [r4, #4]
 8003624:	0058      	lsls	r0, r3, #1
 8003626:	084b      	lsrs	r3, r1, #1
 8003628:	18c0      	adds	r0, r0, r3
 800362a:	f7fc fd93 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362e:	4932      	ldr	r1, [pc, #200]	; (80036f8 <UART_SetConfig+0x230>)
 8003630:	b282      	uxth	r2, r0
 8003632:	3a10      	subs	r2, #16
 8003634:	0403      	lsls	r3, r0, #16
 8003636:	428a      	cmp	r2, r1
 8003638:	d8af      	bhi.n	800359a <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363a:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363c:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363e:	4390      	bics	r0, r2
 8003640:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003642:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003644:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8003646:	4318      	orrs	r0, r3
 8003648:	60d0      	str	r0, [r2, #12]
 800364a:	e7b1      	b.n	80035b0 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800364c:	f7fe faf6 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8003650:	e031      	b.n	80036b6 <UART_SetConfig+0x1ee>
    switch (clocksource)
 8003652:	2808      	cmp	r0, #8
 8003654:	d8a1      	bhi.n	800359a <UART_SetConfig+0xd2>
 8003656:	f7fc fd5f 	bl	8000118 <__gnu_thumb1_case_sqi>
 800365a:	0a05      	.short	0x0a05
 800365c:	a022a00d 	.word	0xa022a00d
 8003660:	a0a0      	.short	0xa0a0
 8003662:	25          	.byte	0x25
 8003663:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7fe fe8a 	bl	800237c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003668:	2800      	cmp	r0, #0
 800366a:	d0a1      	beq.n	80035b0 <UART_SetConfig+0xe8>
 800366c:	e00d      	b.n	800368a <UART_SetConfig+0x1c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800366e:	f7fe fe95 	bl	800239c <HAL_RCC_GetPCLK2Freq>
        break;
 8003672:	e7f9      	b.n	8003668 <UART_SetConfig+0x1a0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <UART_SetConfig+0x20c>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	2310      	movs	r3, #16
 800367a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800367c:	4243      	negs	r3, r0
 800367e:	4158      	adcs	r0, r3
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <UART_SetConfig+0x220>)
 8003682:	4240      	negs	r0, r0
 8003684:	4018      	ands	r0, r3
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <UART_SetConfig+0x224>)
 8003688:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800368a:	6861      	ldr	r1, [r4, #4]
 800368c:	084b      	lsrs	r3, r1, #1
 800368e:	1818      	adds	r0, r3, r0
 8003690:	f7fc fd60 	bl	8000154 <__udivsi3>
 8003694:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003696:	0002      	movs	r2, r0
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <UART_SetConfig+0x230>)
 800369a:	3a10      	subs	r2, #16
 800369c:	e7ae      	b.n	80035fc <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 800369e:	f7fe facd 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
        break;
 80036a2:	e7e1      	b.n	8003668 <UART_SetConfig+0x1a0>
    switch (clocksource)
 80036a4:	2080      	movs	r0, #128	; 0x80
 80036a6:	0200      	lsls	r0, r0, #8
 80036a8:	e7ef      	b.n	800368a <UART_SetConfig+0x1c2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	0212      	lsls	r2, r2, #8
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d1d8      	bne.n	8003664 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b2:	f7fe fe63 	bl	800237c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80036b6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80036b8:	d100      	bne.n	80036bc <UART_SetConfig+0x1f4>
 80036ba:	e779      	b.n	80035b0 <UART_SetConfig+0xe8>
 80036bc:	e7b1      	b.n	8003622 <UART_SetConfig+0x15a>
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	efff69f3 	.word	0xefff69f3
 80036c4:	ffffcfff 	.word	0xffffcfff
 80036c8:	40004800 	.word	0x40004800
 80036cc:	fffff4ff 	.word	0xfffff4ff
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08008305 	.word	0x08008305
 80036dc:	40004400 	.word	0x40004400
 80036e0:	40004c00 	.word	0x40004c00
 80036e4:	40005000 	.word	0x40005000
 80036e8:	00b71b00 	.word	0x00b71b00
 80036ec:	003d0900 	.word	0x003d0900
 80036f0:	fffffd00 	.word	0xfffffd00
 80036f4:	000ffcff 	.word	0x000ffcff
 80036f8:	0000ffef 	.word	0x0000ffef

080036fc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80036fe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003700:	07da      	lsls	r2, r3, #31
 8003702:	d506      	bpl.n	8003712 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003704:	6801      	ldr	r1, [r0, #0]
 8003706:	4c28      	ldr	r4, [pc, #160]	; (80037a8 <UART_AdvFeatureConfig+0xac>)
 8003708:	684a      	ldr	r2, [r1, #4]
 800370a:	4022      	ands	r2, r4
 800370c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800370e:	4322      	orrs	r2, r4
 8003710:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003712:	079a      	lsls	r2, r3, #30
 8003714:	d506      	bpl.n	8003724 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003716:	6801      	ldr	r1, [r0, #0]
 8003718:	4c24      	ldr	r4, [pc, #144]	; (80037ac <UART_AdvFeatureConfig+0xb0>)
 800371a:	684a      	ldr	r2, [r1, #4]
 800371c:	4022      	ands	r2, r4
 800371e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003720:	4322      	orrs	r2, r4
 8003722:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003724:	075a      	lsls	r2, r3, #29
 8003726:	d506      	bpl.n	8003736 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003728:	6801      	ldr	r1, [r0, #0]
 800372a:	4c21      	ldr	r4, [pc, #132]	; (80037b0 <UART_AdvFeatureConfig+0xb4>)
 800372c:	684a      	ldr	r2, [r1, #4]
 800372e:	4022      	ands	r2, r4
 8003730:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003732:	4322      	orrs	r2, r4
 8003734:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003736:	071a      	lsls	r2, r3, #28
 8003738:	d506      	bpl.n	8003748 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373a:	6801      	ldr	r1, [r0, #0]
 800373c:	4c1d      	ldr	r4, [pc, #116]	; (80037b4 <UART_AdvFeatureConfig+0xb8>)
 800373e:	684a      	ldr	r2, [r1, #4]
 8003740:	4022      	ands	r2, r4
 8003742:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003744:	4322      	orrs	r2, r4
 8003746:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003748:	06da      	lsls	r2, r3, #27
 800374a:	d506      	bpl.n	800375a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	6801      	ldr	r1, [r0, #0]
 800374e:	4c1a      	ldr	r4, [pc, #104]	; (80037b8 <UART_AdvFeatureConfig+0xbc>)
 8003750:	688a      	ldr	r2, [r1, #8]
 8003752:	4022      	ands	r2, r4
 8003754:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003756:	4322      	orrs	r2, r4
 8003758:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800375a:	069a      	lsls	r2, r3, #26
 800375c:	d506      	bpl.n	800376c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375e:	6801      	ldr	r1, [r0, #0]
 8003760:	4c16      	ldr	r4, [pc, #88]	; (80037bc <UART_AdvFeatureConfig+0xc0>)
 8003762:	688a      	ldr	r2, [r1, #8]
 8003764:	4022      	ands	r2, r4
 8003766:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003768:	4322      	orrs	r2, r4
 800376a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800376c:	065a      	lsls	r2, r3, #25
 800376e:	d510      	bpl.n	8003792 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003770:	6801      	ldr	r1, [r0, #0]
 8003772:	4d13      	ldr	r5, [pc, #76]	; (80037c0 <UART_AdvFeatureConfig+0xc4>)
 8003774:	684a      	ldr	r2, [r1, #4]
 8003776:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003778:	402a      	ands	r2, r5
 800377a:	4322      	orrs	r2, r4
 800377c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0352      	lsls	r2, r2, #13
 8003782:	4294      	cmp	r4, r2
 8003784:	d105      	bne.n	8003792 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003786:	684a      	ldr	r2, [r1, #4]
 8003788:	4c0e      	ldr	r4, [pc, #56]	; (80037c4 <UART_AdvFeatureConfig+0xc8>)
 800378a:	4022      	ands	r2, r4
 800378c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800378e:	4322      	orrs	r2, r4
 8003790:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	d506      	bpl.n	80037a4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003796:	6802      	ldr	r2, [r0, #0]
 8003798:	490b      	ldr	r1, [pc, #44]	; (80037c8 <UART_AdvFeatureConfig+0xcc>)
 800379a:	6853      	ldr	r3, [r2, #4]
 800379c:	400b      	ands	r3, r1
 800379e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6053      	str	r3, [r2, #4]
}
 80037a4:	bd30      	pop	{r4, r5, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	fffdffff 	.word	0xfffdffff
 80037ac:	fffeffff 	.word	0xfffeffff
 80037b0:	fffbffff 	.word	0xfffbffff
 80037b4:	ffff7fff 	.word	0xffff7fff
 80037b8:	ffffefff 	.word	0xffffefff
 80037bc:	ffffdfff 	.word	0xffffdfff
 80037c0:	ffefffff 	.word	0xffefffff
 80037c4:	ff9fffff 	.word	0xff9fffff
 80037c8:	fff7ffff 	.word	0xfff7ffff

080037cc <UART_WaitOnFlagUntilTimeout>:
{
 80037cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ce:	2780      	movs	r7, #128	; 0x80
{
 80037d0:	0004      	movs	r4, r0
 80037d2:	000d      	movs	r5, r1
 80037d4:	0016      	movs	r6, r2
 80037d6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	69d3      	ldr	r3, [r2, #28]
 80037de:	402b      	ands	r3, r5
 80037e0:	1b5b      	subs	r3, r3, r5
 80037e2:	4259      	negs	r1, r3
 80037e4:	414b      	adcs	r3, r1
 80037e6:	42b3      	cmp	r3, r6
 80037e8:	d001      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80037ea:	2000      	movs	r0, #0
 80037ec:	e01c      	b.n	8003828 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	9b08      	ldr	r3, [sp, #32]
 80037f0:	3301      	adds	r3, #1
 80037f2:	d0f3      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7fd fd2a 	bl	800124c <HAL_GetTick>
 80037f8:	9b01      	ldr	r3, [sp, #4]
 80037fa:	9a08      	ldr	r2, [sp, #32]
 80037fc:	1ac0      	subs	r0, r0, r3
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	4290      	cmp	r0, r2
 8003802:	d801      	bhi.n	8003808 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003804:	2a00      	cmp	r2, #0
 8003806:	d110      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4913      	ldr	r1, [pc, #76]	; (8003858 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800380c:	400a      	ands	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	31a3      	adds	r1, #163	; 0xa3
 8003814:	31ff      	adds	r1, #255	; 0xff
 8003816:	438a      	bics	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800381a:	2320      	movs	r3, #32
 800381c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800381e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003820:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003822:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003824:	3474      	adds	r4, #116	; 0x74
 8003826:	7023      	strb	r3, [r4, #0]
}
 8003828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800382a:	2104      	movs	r1, #4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	420a      	tst	r2, r1
 8003830:	d0d3      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	423a      	tst	r2, r7
 8003836:	d0d0      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003838:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4906      	ldr	r1, [pc, #24]	; (8003858 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800383e:	400a      	ands	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	31a3      	adds	r1, #163	; 0xa3
 8003846:	31ff      	adds	r1, #255	; 0xff
 8003848:	438a      	bics	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800384c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800384e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8003850:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003852:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003854:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003856:	e7e3      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x54>
 8003858:	fffffe5f 	.word	0xfffffe5f

0800385c <HAL_UART_Transmit>:
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003862:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8003864:	0004      	movs	r4, r0
 8003866:	000d      	movs	r5, r1
 8003868:	0016      	movs	r6, r2
    return HAL_BUSY;
 800386a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800386c:	2b20      	cmp	r3, #32
 800386e:	d151      	bne.n	8003914 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8003870:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003872:	2900      	cmp	r1, #0
 8003874:	d04e      	beq.n	8003914 <HAL_UART_Transmit+0xb8>
 8003876:	2a00      	cmp	r2, #0
 8003878:	d04c      	beq.n	8003914 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	68a2      	ldr	r2, [r4, #8]
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	429a      	cmp	r2, r3
 8003882:	d104      	bne.n	800388e <HAL_UART_Transmit+0x32>
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800388a:	4201      	tst	r1, r0
 800388c:	d142      	bne.n	8003914 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800388e:	0023      	movs	r3, r4
 8003890:	3374      	adds	r3, #116	; 0x74
 8003892:	9303      	str	r3, [sp, #12]
 8003894:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8003896:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003898:	2b01      	cmp	r3, #1
 800389a:	d03b      	beq.n	8003914 <HAL_UART_Transmit+0xb8>
 800389c:	2301      	movs	r3, #1
 800389e:	9a03      	ldr	r2, [sp, #12]
 80038a0:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	2200      	movs	r2, #0
 80038a4:	1d23      	adds	r3, r4, #4
 80038a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a8:	2321      	movs	r3, #33	; 0x21
 80038aa:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80038ac:	f7fd fcce 	bl	800124c <HAL_GetTick>
    huart->TxXferSize  = Size;
 80038b0:	0023      	movs	r3, r4
 80038b2:	3350      	adds	r3, #80	; 0x50
 80038b4:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80038b6:	3302      	adds	r3, #2
 80038b8:	801e      	strh	r6, [r3, #0]
 80038ba:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80038c0:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80038c2:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d104      	bne.n	80038d4 <HAL_UART_Transmit+0x78>
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	42b3      	cmp	r3, r6
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Transmit+0x78>
 80038d0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80038d2:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80038d4:	2300      	movs	r3, #0
 80038d6:	9a03      	ldr	r2, [sp, #12]
 80038d8:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80038da:	0023      	movs	r3, r4
 80038dc:	3352      	adds	r3, #82	; 0x52
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	9b05      	ldr	r3, [sp, #20]
 80038e8:	2140      	movs	r1, #64	; 0x40
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	0020      	movs	r0, r4
 80038ee:	003b      	movs	r3, r7
 80038f0:	f7ff ff6c 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d10c      	bne.n	8003912 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80038f8:	2320      	movs	r3, #32
 80038fa:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80038fc:	e00a      	b.n	8003914 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fe:	9b05      	ldr	r3, [sp, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	003b      	movs	r3, r7
 8003908:	0020      	movs	r0, r4
 800390a:	f7ff ff5f 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 800390e:	2800      	cmp	r0, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 8003912:	2003      	movs	r0, #3
}
 8003914:	b007      	add	sp, #28
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003918:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800391a:	2d00      	cmp	r5, #0
 800391c:	d10b      	bne.n	8003936 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800391e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003920:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003922:	05db      	lsls	r3, r3, #23
 8003924:	0ddb      	lsrs	r3, r3, #23
 8003926:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003928:	9b04      	ldr	r3, [sp, #16]
 800392a:	9a04      	ldr	r2, [sp, #16]
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	8013      	strh	r3, [r2, #0]
 8003934:	e7d1      	b.n	80038da <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003936:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003938:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800393a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800393c:	e7f4      	b.n	8003928 <HAL_UART_Transmit+0xcc>
	...

08003940 <UART_CheckIdleState>:
{
 8003940:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	2600      	movs	r6, #0
{
 8003944:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003946:	1d03      	adds	r3, r0, #4
 8003948:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800394a:	f7fd fc7f 	bl	800124c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003950:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	d416      	bmi.n	8003986 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	075b      	lsls	r3, r3, #29
 800395e:	d50a      	bpl.n	8003976 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <UART_CheckIdleState+0x60>)
 8003964:	2200      	movs	r2, #0
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	0020      	movs	r0, r4
 800396a:	002b      	movs	r3, r5
 800396c:	03c9      	lsls	r1, r1, #15
 800396e:	f7ff ff2d 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 8003972:	2800      	cmp	r0, #0
 8003974:	d112      	bne.n	800399c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8003976:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800397a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003980:	3474      	adds	r4, #116	; 0x74
 8003982:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003984:	e00b      	b.n	800399e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <UART_CheckIdleState+0x60>)
 800398a:	0032      	movs	r2, r6
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	0389      	lsls	r1, r1, #14
 8003990:	0003      	movs	r3, r0
 8003992:	0020      	movs	r0, r4
 8003994:	f7ff ff1a 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 8003998:	2800      	cmp	r0, #0
 800399a:	d0dd      	beq.n	8003958 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800399c:	2003      	movs	r0, #3
}
 800399e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80039a0:	01ffffff 	.word	0x01ffffff

080039a4 <HAL_UART_Init>:
{
 80039a4:	b510      	push	{r4, lr}
 80039a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80039aa:	2001      	movs	r0, #1
}
 80039ac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80039ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80039b4:	0002      	movs	r2, r0
 80039b6:	3274      	adds	r2, #116	; 0x74
 80039b8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80039ba:	f002 ff21 	bl	8006800 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80039be:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80039c0:	2101      	movs	r1, #1
 80039c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80039c6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80039ca:	438b      	bics	r3, r1
 80039cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ce:	f7ff fd7b 	bl	80034c8 <UART_SetConfig>
 80039d2:	2801      	cmp	r0, #1
 80039d4:	d0e9      	beq.n	80039aa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80039dc:	0020      	movs	r0, r4
 80039de:	f7ff fe8d 	bl	80036fc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	4907      	ldr	r1, [pc, #28]	; (8003a04 <HAL_UART_Init+0x60>)
 80039e6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80039e8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	438a      	bics	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80039f6:	2201      	movs	r2, #1
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80039fe:	f7ff ff9f 	bl	8003940 <UART_CheckIdleState>
 8003a02:	e7d3      	b.n	80039ac <HAL_UART_Init+0x8>
 8003a04:	ffffb7ff 	.word	0xffffb7ff

08003a08 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003a08:	0003      	movs	r3, r0
 8003a0a:	3358      	adds	r3, #88	; 0x58
{
 8003a0c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8003a0e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a10:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8003a12:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	6881      	ldr	r1, [r0, #8]
 8003a18:	015b      	lsls	r3, r3, #5
 8003a1a:	4299      	cmp	r1, r3
 8003a1c:	d128      	bne.n	8003a70 <UART_Start_Receive_IT+0x68>
 8003a1e:	6903      	ldr	r3, [r0, #16]
 8003a20:	1e5a      	subs	r2, r3, #1
 8003a22:	4193      	sbcs	r3, r2
 8003a24:	22ff      	movs	r2, #255	; 0xff
 8003a26:	425b      	negs	r3, r3
 8003a28:	4393      	bics	r3, r2
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <UART_Start_Receive_IT+0x90>)
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	0002      	movs	r2, r0
 8003a30:	325c      	adds	r2, #92	; 0x5c
 8003a32:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	2200      	movs	r2, #0
 8003a36:	1d03      	adds	r3, r0, #4
 8003a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3a:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3e:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	6894      	ldr	r4, [r2, #8]
 8003a42:	3b21      	subs	r3, #33	; 0x21
 8003a44:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a46:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4a:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <UART_Start_Receive_IT+0x94>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4e:	42a1      	cmp	r1, r4
 8003a50:	d103      	bne.n	8003a5a <UART_Start_Receive_IT+0x52>
 8003a52:	6901      	ldr	r1, [r0, #16]
 8003a54:	2900      	cmp	r1, #0
 8003a56:	d100      	bne.n	8003a5a <UART_Start_Receive_IT+0x52>
    huart->RxISR = UART_RxISR_16BIT;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <UART_Start_Receive_IT+0x98>)
 8003a5a:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	2000      	movs	r0, #0
 8003a60:	3374      	adds	r3, #116	; 0x74
 8003a62:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a64:	2390      	movs	r3, #144	; 0x90
 8003a66:	6811      	ldr	r1, [r2, #0]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d105      	bne.n	8003a80 <UART_Start_Receive_IT+0x78>
 8003a74:	6902      	ldr	r2, [r0, #16]
 8003a76:	237f      	movs	r3, #127	; 0x7f
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d1d8      	bne.n	8003a2e <UART_Start_Receive_IT+0x26>
 8003a7c:	3380      	adds	r3, #128	; 0x80
 8003a7e:	e7d6      	b.n	8003a2e <UART_Start_Receive_IT+0x26>
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	2300      	movs	r3, #0
 8003a84:	0552      	lsls	r2, r2, #21
 8003a86:	4291      	cmp	r1, r2
 8003a88:	d1d1      	bne.n	8003a2e <UART_Start_Receive_IT+0x26>
 8003a8a:	6902      	ldr	r2, [r0, #16]
 8003a8c:	337f      	adds	r3, #127	; 0x7f
 8003a8e:	2a00      	cmp	r2, #0
 8003a90:	d0cd      	beq.n	8003a2e <UART_Start_Receive_IT+0x26>
 8003a92:	3b40      	subs	r3, #64	; 0x40
 8003a94:	e7cb      	b.n	8003a2e <UART_Start_Receive_IT+0x26>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	000001ff 	.word	0x000001ff
 8003a9c:	080033c5 	.word	0x080033c5
 8003aa0:	08003449 	.word	0x08003449

08003aa4 <HAL_UART_Receive_IT>:
{
 8003aa4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa6:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 8003aa8:	0003      	movs	r3, r0
    return HAL_BUSY;
 8003aaa:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aac:	2c20      	cmp	r4, #32
 8003aae:	d129      	bne.n	8003b04 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8003ab0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003ab2:	2900      	cmp	r1, #0
 8003ab4:	d026      	beq.n	8003b04 <HAL_UART_Receive_IT+0x60>
 8003ab6:	2a00      	cmp	r2, #0
 8003ab8:	d024      	beq.n	8003b04 <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aba:	2080      	movs	r0, #128	; 0x80
 8003abc:	689c      	ldr	r4, [r3, #8]
 8003abe:	0140      	lsls	r0, r0, #5
 8003ac0:	4284      	cmp	r4, r0
 8003ac2:	d106      	bne.n	8003ad2 <HAL_UART_Receive_IT+0x2e>
 8003ac4:	6918      	ldr	r0, [r3, #16]
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003aca:	2401      	movs	r4, #1
      return HAL_ERROR;
 8003acc:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ace:	4221      	tst	r1, r4
 8003ad0:	d118      	bne.n	8003b04 <HAL_UART_Receive_IT+0x60>
    __HAL_LOCK(huart);
 8003ad2:	001c      	movs	r4, r3
 8003ad4:	3474      	adds	r4, #116	; 0x74
 8003ad6:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8003ad8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003ada:	2d01      	cmp	r5, #1
 8003adc:	d012      	beq.n	8003b04 <HAL_UART_Receive_IT+0x60>
 8003ade:	3801      	subs	r0, #1
 8003ae0:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae2:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ae4:	4c08      	ldr	r4, [pc, #32]	; (8003b08 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	6618      	str	r0, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	42a0      	cmp	r0, r4
 8003aec:	d007      	beq.n	8003afe <HAL_UART_Receive_IT+0x5a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aee:	6844      	ldr	r4, [r0, #4]
 8003af0:	0224      	lsls	r4, r4, #8
 8003af2:	d504      	bpl.n	8003afe <HAL_UART_Receive_IT+0x5a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003af4:	2480      	movs	r4, #128	; 0x80
 8003af6:	6805      	ldr	r5, [r0, #0]
 8003af8:	04e4      	lsls	r4, r4, #19
 8003afa:	432c      	orrs	r4, r5
 8003afc:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff ff82 	bl	8003a08 <UART_Start_Receive_IT>
}
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	40004800 	.word	0x40004800

08003b0c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b0c:	4770      	bx	lr
	...

08003b10 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <SX1276GetStatus+0x8>)
 8003b12:	7918      	ldrb	r0, [r3, #4]
}
 8003b14:	4770      	bx	lr
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	20000294 	.word	0x20000294

08003b1c <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <GetFskBandwidthRegValue+0x28>)
{
 8003b1e:	2300      	movs	r3, #0
 8003b20:	0011      	movs	r1, r2
 8003b22:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8003b24:	6814      	ldr	r4, [r2, #0]
 8003b26:	4284      	cmp	r4, r0
 8003b28:	d802      	bhi.n	8003b30 <GetFskBandwidthRegValue+0x14>
 8003b2a:	6894      	ldr	r4, [r2, #8]
 8003b2c:	4284      	cmp	r4, r0
 8003b2e:	d804      	bhi.n	8003b3a <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b30:	3301      	adds	r3, #1
 8003b32:	3208      	adds	r2, #8
 8003b34:	2b15      	cmp	r3, #21
 8003b36:	d1f5      	bne.n	8003b24 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8003b38:	e7fe      	b.n	8003b38 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	18c9      	adds	r1, r1, r3
 8003b3e:	7908      	ldrb	r0, [r1, #4]
}
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	08008354 	.word	0x08008354

08003b48 <SX1276GetTimeOnAir>:
{
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	0014      	movs	r4, r2
 8003b4c:	aa08      	add	r2, sp, #32
 8003b4e:	8816      	ldrh	r6, [r2, #0]
 8003b50:	aa09      	add	r2, sp, #36	; 0x24
 8003b52:	000d      	movs	r5, r1
 8003b54:	7811      	ldrb	r1, [r2, #0]
 8003b56:	aa0a      	add	r2, sp, #40	; 0x28
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	af0b      	add	r7, sp, #44	; 0x2c
 8003b5c:	4694      	mov	ip, r2
 8003b5e:	783f      	ldrb	r7, [r7, #0]
    switch( modem )
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d009      	beq.n	8003b78 <SX1276GetTimeOnAir+0x30>
 8003b64:	2801      	cmp	r0, #1
 8003b66:	d014      	beq.n	8003b92 <SX1276GetTimeOnAir+0x4a>
 8003b68:	2401      	movs	r4, #1
 8003b6a:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8003b6c:	1900      	adds	r0, r0, r4
 8003b6e:	0021      	movs	r1, r4
 8003b70:	3801      	subs	r0, #1
 8003b72:	f7fc faef 	bl	8000154 <__udivsi3>
}
 8003b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 8003b78:	2301      	movs	r3, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8003b7a:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8003b7c:	404b      	eors	r3, r1
    return ( preambleLen << 3 ) +
 8003b7e:	18f3      	adds	r3, r6, r3
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8003b80:	007f      	lsls	r7, r7, #1
    return ( preambleLen << 3 ) +
 8003b82:	00db      	lsls	r3, r3, #3
               ( 0 ) + // Address filter size
 8003b84:	4467      	add	r7, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8003b86:	3318      	adds	r3, #24
               ) << 3 
 8003b88:	00ff      	lsls	r7, r7, #3
             ( syncWordLength << 3 ) +
 8003b8a:	19df      	adds	r7, r3, r7
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8003b8c:	0080      	lsls	r0, r0, #2
 8003b8e:	4378      	muls	r0, r7
        break;
 8003b90:	e7ec      	b.n	8003b6c <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 8003b92:	3304      	adds	r3, #4
 8003b94:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8003b96:	1f63      	subs	r3, r4, #5
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d804      	bhi.n	8003ba6 <SX1276GetTimeOnAir+0x5e>
    {
        if( preambleLen < 12 )
 8003b9c:	1c33      	adds	r3, r6, #0
 8003b9e:	2e0c      	cmp	r6, #12
 8003ba0:	d200      	bcs.n	8003ba4 <SX1276GetTimeOnAir+0x5c>
 8003ba2:	230c      	movs	r3, #12
 8003ba4:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	d135      	bne.n	8003c16 <SX1276GetTimeOnAir+0xce>
 8003baa:	0023      	movs	r3, r4
 8003bac:	2001      	movs	r0, #1
 8003bae:	002a      	movs	r2, r5
 8003bb0:	3b0b      	subs	r3, #11
 8003bb2:	4298      	cmp	r0, r3
 8003bb4:	416a      	adcs	r2, r5
 8003bb6:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003bb8:	b2db      	uxtb	r3, r3
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8003bba:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 8003bbc:	013f      	lsls	r7, r7, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8003bbe:	00d2      	lsls	r2, r2, #3
 8003bc0:	19d2      	adds	r2, r2, r7
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 8003bc2:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 8003bc4:	00a0      	lsls	r0, r4, #2
                            ( crcOn ? 16 : 0 ) -
 8003bc6:	1a12      	subs	r2, r2, r0
                            ( fixLen ? 0 : 20 );
 8003bc8:	42b9      	cmp	r1, r7
 8003bca:	d100      	bne.n	8003bce <SX1276GetTimeOnAir+0x86>
 8003bcc:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 8003bce:	19d2      	adds	r2, r2, r7

    if( datarate <= 6 )
    {
        ceilDenominator = 4 * datarate;
 8003bd0:	0001      	movs	r1, r0
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8003bd2:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8003bd4:	2c06      	cmp	r4, #6
 8003bd6:	d903      	bls.n	8003be0 <SX1276GetTimeOnAir+0x98>
        ceilNumerator += 8;
 8003bd8:	3208      	adds	r2, #8
        if( lowDatareOptimize == true )
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d000      	beq.n	8003be0 <SX1276GetTimeOnAir+0x98>
            ceilDenominator = 4 * ( datarate - 2 );
 8003bde:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8003be0:	43d3      	mvns	r3, r2
 8003be2:	17db      	asrs	r3, r3, #31
 8003be4:	401a      	ands	r2, r3
 8003be6:	1852      	adds	r2, r2, r1
 8003be8:	1e50      	subs	r0, r2, #1
 8003bea:	f7fc fb3d 	bl	8000268 <__divsi3>
 8003bee:	9b01      	ldr	r3, [sp, #4]
 8003bf0:	4343      	muls	r3, r0
 8003bf2:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	330e      	adds	r3, #14
    if( datarate <= 6 )
 8003bf8:	2c06      	cmp	r4, #6
 8003bfa:	d900      	bls.n	8003bfe <SX1276GetTimeOnAir+0xb6>
    int32_t intermediate =
 8003bfc:	3b02      	subs	r3, #2
    switch( bw )
 8003bfe:	2d02      	cmp	r5, #2
 8003c00:	d811      	bhi.n	8003c26 <SX1276GetTimeOnAir+0xde>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8003c02:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8003c04:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8003c06:	3301      	adds	r3, #1
 8003c08:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8003c0a:	0080      	lsls	r0, r0, #2
 8003c0c:	4358      	muls	r0, r3
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <SX1276GetTimeOnAir+0xe0>)
 8003c10:	00ad      	lsls	r5, r5, #2
 8003c12:	58ec      	ldr	r4, [r5, r3]
 8003c14:	e7aa      	b.n	8003b6c <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8003c16:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003c18:	2d01      	cmp	r5, #1
 8003c1a:	d1ce      	bne.n	8003bba <SX1276GetTimeOnAir+0x72>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003c1c:	0023      	movs	r3, r4
 8003c1e:	3b0c      	subs	r3, #12
 8003c20:	4258      	negs	r0, r3
 8003c22:	4143      	adcs	r3, r0
 8003c24:	e7c8      	b.n	8003bb8 <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
 8003c26:	deff      	udf	#255	; 0xff
 8003c28:	08008318 	.word	0x08008318

08003c2c <SX1276GetWakeupTime>:
{
 8003c2c:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8003c2e:	f7fd f8ad 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8003c32:	3002      	adds	r0, #2
}
 8003c34:	bd10      	pop	{r4, pc}

08003c36 <SX1276WriteBuffer>:
{
 8003c36:	b570      	push	{r4, r5, r6, lr}
 8003c38:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8003c3a:	2000      	movs	r0, #0
{
 8003c3c:	000c      	movs	r4, r1
 8003c3e:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 8003c40:	f7fd fa7e 	bl	8001140 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8003c44:	2080      	movs	r0, #128	; 0x80
 8003c46:	4330      	orrs	r0, r6
 8003c48:	b280      	uxth	r0, r0
 8003c4a:	f7fd fa6b 	bl	8001124 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8003c4e:	1965      	adds	r5, r4, r5
 8003c50:	42ac      	cmp	r4, r5
 8003c52:	d103      	bne.n	8003c5c <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7fd fa73 	bl	8001140 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8003c5c:	7820      	ldrb	r0, [r4, #0]
 8003c5e:	f7fd fa61 	bl	8001124 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8003c62:	3401      	adds	r4, #1
 8003c64:	e7f4      	b.n	8003c50 <SX1276WriteBuffer+0x1a>

08003c66 <SX1276Write>:
{
 8003c66:	b507      	push	{r0, r1, r2, lr}
 8003c68:	466b      	mov	r3, sp
 8003c6a:	71d9      	strb	r1, [r3, #7]
 8003c6c:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8003c6e:	2201      	movs	r2, #1
 8003c70:	0019      	movs	r1, r3
 8003c72:	f7ff ffe0 	bl	8003c36 <SX1276WriteBuffer>
}
 8003c76:	bd07      	pop	{r0, r1, r2, pc}

08003c78 <SX1276SetChannel>:
{
 8003c78:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003c7a:	4911      	ldr	r1, [pc, #68]	; (8003cc0 <SX1276SetChannel+0x48>)
{
 8003c7c:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003c7e:	f7fc faef 	bl	8000260 <__aeabi_uidivmod>
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <SX1276SetChannel+0x4c>)
 8003c84:	0208      	lsls	r0, r1, #8
 8003c86:	18c0      	adds	r0, r0, r3
 8003c88:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <SX1276SetChannel+0x48>)
 8003c8a:	f7fc fa63 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8003c8e:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003c90:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8003c92:	0028      	movs	r0, r5
 8003c94:	f7fc fa5e 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8003c98:	0200      	lsls	r0, r0, #8
 8003c9a:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003c9e:	0c21      	lsrs	r1, r4, #16
 8003ca0:	2006      	movs	r0, #6
 8003ca2:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 8003ca4:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003ca6:	f7ff ffde 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8003caa:	0a21      	lsrs	r1, r4, #8
 8003cac:	2007      	movs	r0, #7
 8003cae:	b2c9      	uxtb	r1, r1
 8003cb0:	f7ff ffd9 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8003cb4:	2008      	movs	r0, #8
 8003cb6:	b2e1      	uxtb	r1, r4
 8003cb8:	f7ff ffd5 	bl	8003c66 <SX1276Write>
}
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	00003d09 	.word	0x00003d09
 8003cc4:	00001e84 	.word	0x00001e84
 8003cc8:	20000294 	.word	0x20000294

08003ccc <SX1276ReadBuffer>:
{
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 8003cd0:	2000      	movs	r0, #0
{
 8003cd2:	000c      	movs	r4, r1
 8003cd4:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 8003cd6:	f7fd fa33 	bl	8001140 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 8003cda:	207f      	movs	r0, #127	; 0x7f
 8003cdc:	4028      	ands	r0, r5
 8003cde:	f7fd fa21 	bl	8001124 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8003ce2:	19a6      	adds	r6, r4, r6
 8003ce4:	42b4      	cmp	r4, r6
 8003ce6:	d103      	bne.n	8003cf0 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fd fa29 	bl	8001140 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fd fa17 	bl	8001124 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8003cf6:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 8003cf8:	3401      	adds	r4, #1
 8003cfa:	e7f3      	b.n	8003ce4 <SX1276ReadBuffer+0x18>

08003cfc <SX1276Read>:
{
 8003cfc:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8003cfe:	466b      	mov	r3, sp
 8003d00:	1ddc      	adds	r4, r3, #7
 8003d02:	2201      	movs	r2, #1
 8003d04:	0021      	movs	r1, r4
 8003d06:	f7ff ffe1 	bl	8003ccc <SX1276ReadBuffer>
    return data;
 8003d0a:	7820      	ldrb	r0, [r4, #0]
}
 8003d0c:	bd16      	pop	{r1, r2, r4, pc}
	...

08003d10 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 8003d10:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003d12:	4c2c      	ldr	r4, [pc, #176]	; (8003dc4 <SX1276OnDio2Irq+0xb4>)
 8003d14:	7925      	ldrb	r5, [r4, #4]
 8003d16:	2d01      	cmp	r5, #1
 8003d18:	d002      	beq.n	8003d20 <SX1276OnDio2Irq+0x10>
 8003d1a:	2d02      	cmp	r5, #2
 8003d1c:	d049      	beq.n	8003db2 <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003d20:	7963      	ldrb	r3, [r4, #5]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d017      	beq.n	8003d56 <SX1276OnDio2Irq+0x46>
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d1f9      	bne.n	8003d1e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003d2a:	3453      	adds	r4, #83	; 0x53
 8003d2c:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003d2e:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f4      	beq.n	8003d1e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003d34:	2012      	movs	r0, #18
 8003d36:	f7ff ff96 	bl	8003c66 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <SX1276OnDio2Irq+0xb8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ed      	beq.n	8003d1e <SX1276OnDio2Irq+0xe>
 8003d42:	695c      	ldr	r4, [r3, #20]
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d0ea      	beq.n	8003d1e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003d48:	201c      	movs	r0, #28
 8003d4a:	f7ff ffd7 	bl	8003cfc <SX1276Read>
 8003d4e:	233f      	movs	r3, #63	; 0x3f
 8003d50:	4018      	ands	r0, r3
 8003d52:	47a0      	blx	r4
}
 8003d54:	e7e3      	b.n	8003d1e <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003d56:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8003d58:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003d5a:	3330      	adds	r3, #48	; 0x30
 8003d5c:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8003d5e:	3631      	adds	r6, #49	; 0x31
 8003d60:	7833      	ldrb	r3, [r6, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1db      	bne.n	8003d1e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003d66:	0020      	movs	r0, r4
 8003d68:	3068      	adds	r0, #104	; 0x68
 8003d6a:	f003 f9c7 	bl	80070fc <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003d6e:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003d70:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003d72:	f7ff ffc3 	bl	8003cfc <SX1276Read>
 8003d76:	0023      	movs	r3, r4
 8003d78:	0840      	lsrs	r0, r0, #1
 8003d7a:	3332      	adds	r3, #50	; 0x32
 8003d7c:	4240      	negs	r0, r0
 8003d7e:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d80:	201b      	movs	r0, #27
 8003d82:	f7ff ffbb 	bl	8003cfc <SX1276Read>
 8003d86:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003d88:	201c      	movs	r0, #28
 8003d8a:	f7ff ffb7 	bl	8003cfc <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d8e:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d92:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8003d94:	b2c0      	uxtb	r0, r0
 8003d96:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8003d98:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8003d9a:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8003d9c:	3080      	adds	r0, #128	; 0x80
 8003d9e:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8003da0:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003da2:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003da4:	200c      	movs	r0, #12
 8003da6:	f7ff ffa9 	bl	8003cfc <SX1276Read>
 8003daa:	3438      	adds	r4, #56	; 0x38
 8003dac:	0940      	lsrs	r0, r0, #5
 8003dae:	7020      	strb	r0, [r4, #0]
 8003db0:	e7b5      	b.n	8003d1e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003db2:	7963      	ldrb	r3, [r4, #5]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d1b2      	bne.n	8003d1e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003db8:	3453      	adds	r4, #83	; 0x53
 8003dba:	7823      	ldrb	r3, [r4, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ae      	beq.n	8003d1e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003dc0:	0029      	movs	r1, r5
 8003dc2:	e7b7      	b.n	8003d34 <SX1276OnDio2Irq+0x24>
 8003dc4:	20000294 	.word	0x20000294
 8003dc8:	20000314 	.word	0x20000314
 8003dcc:	00003d09 	.word	0x00003d09

08003dd0 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <SX1276OnDio4Irq+0x18>)
 8003dd2:	795a      	ldrb	r2, [r3, #5]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d105      	bne.n	8003de4 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8003dd8:	3330      	adds	r3, #48	; 0x30
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d101      	bne.n	8003de4 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003de0:	3201      	adds	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8003de4:	4770      	bx	lr
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000294 	.word	0x20000294

08003dec <SX1276OnDio3Irq>:
{
 8003dec:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <SX1276OnDio3Irq+0x4c>)
 8003df0:	795c      	ldrb	r4, [r3, #5]
 8003df2:	2c01      	cmp	r4, #1
 8003df4:	d112      	bne.n	8003e1c <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003df6:	2012      	movs	r0, #18
 8003df8:	f7ff ff80 	bl	8003cfc <SX1276Read>
 8003dfc:	0005      	movs	r5, r0
 8003dfe:	4e0f      	ldr	r6, [pc, #60]	; (8003e3c <SX1276OnDio3Irq+0x50>)
 8003e00:	4025      	ands	r5, r4
 8003e02:	4220      	tst	r0, r4
 8003e04:	d00b      	beq.n	8003e1e <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003e06:	2105      	movs	r1, #5
 8003e08:	2012      	movs	r0, #18
 8003e0a:	f7ff ff2c 	bl	8003c66 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e0e:	6833      	ldr	r3, [r6, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <SX1276OnDio3Irq+0x30>
 8003e14:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8003e16:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <SX1276OnDio3Irq+0x48>
}
 8003e1c:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003e1e:	2104      	movs	r1, #4
 8003e20:	2012      	movs	r0, #18
 8003e22:	f7ff ff20 	bl	8003c66 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e26:	6833      	ldr	r3, [r6, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f7      	beq.n	8003e1c <SX1276OnDio3Irq+0x30>
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f4      	beq.n	8003e1c <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 8003e32:	0028      	movs	r0, r5
 8003e34:	4798      	blx	r3
}
 8003e36:	e7f1      	b.n	8003e1c <SX1276OnDio3Irq+0x30>
 8003e38:	20000294 	.word	0x20000294
 8003e3c:	20000314 	.word	0x20000314

08003e40 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8003e44:	2805      	cmp	r0, #5
 8003e46:	d111      	bne.n	8003e6c <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f7fc ffa1 	bl	8000d90 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fd f916 	bl	8001080 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003e54:	2001      	movs	r0, #1
 8003e56:	f7ff ff51 	bl	8003cfc <SX1276Read>
 8003e5a:	2307      	movs	r3, #7
 8003e5c:	0001      	movs	r1, r0
 8003e5e:	4399      	bics	r1, r3
 8003e60:	4321      	orrs	r1, r4
 8003e62:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7ff fefe 	bl	8003c66 <SX1276Write>
}
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8003e6c:	2009      	movs	r0, #9
 8003e6e:	f7ff ff45 	bl	8003cfc <SX1276Read>
 8003e72:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8003e74:	2001      	movs	r0, #1
 8003e76:	f7fc ff8b 	bl	8000d90 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8003e7a:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8003e7c:	062d      	lsls	r5, r5, #24
 8003e7e:	d400      	bmi.n	8003e82 <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8003e80:	2002      	movs	r0, #2
 8003e82:	f7fd f8fd 	bl	8001080 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7ff ff38 	bl	8003cfc <SX1276Read>
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	4398      	bics	r0, r3
 8003e90:	4304      	orrs	r4, r0
 8003e92:	b2e1      	uxtb	r1, r4
 8003e94:	e7e6      	b.n	8003e64 <SX1276SetOpMode.part.0+0x24>
	...

08003e98 <SX1276SetStby>:
{
 8003e98:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003e9a:	4c09      	ldr	r4, [pc, #36]	; (8003ec0 <SX1276SetStby+0x28>)
 8003e9c:	1d20      	adds	r0, r4, #4
 8003e9e:	f003 f92d 	bl	80070fc <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	301c      	adds	r0, #28
 8003ea6:	f003 f929 	bl	80070fc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8003eaa:	4c06      	ldr	r4, [pc, #24]	; (8003ec4 <SX1276SetStby+0x2c>)
 8003eac:	0020      	movs	r0, r4
 8003eae:	3068      	adds	r0, #104	; 0x68
 8003eb0:	f003 f924 	bl	80070fc <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f7ff ffc3 	bl	8003e40 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	7123      	strb	r3, [r4, #4]
}
 8003ebe:	bd10      	pop	{r4, pc}
 8003ec0:	20000314 	.word	0x20000314
 8003ec4:	20000294 	.word	0x20000294

08003ec8 <SX1276SetRx>:
    TimerStop( &TxTimeoutTimer );
 8003ec8:	4b7b      	ldr	r3, [pc, #492]	; (80040b8 <SX1276SetRx+0x1f0>)
{
 8003eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ecc:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 8003ece:	0018      	movs	r0, r3
 8003ed0:	301c      	adds	r0, #28
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	f003 f912 	bl	80070fc <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8003ed8:	4c78      	ldr	r4, [pc, #480]	; (80040bc <SX1276SetRx+0x1f4>)
 8003eda:	7965      	ldrb	r5, [r4, #5]
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	d02f      	beq.n	8003f40 <SX1276SetRx+0x78>
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	2d01      	cmp	r5, #1
 8003ee4:	d151      	bne.n	8003f8a <SX1276SetRx+0xc2>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003ee6:	0023      	movs	r3, r4
 8003ee8:	3355      	adds	r3, #85	; 0x55
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003eee:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d100      	bne.n	8003ef6 <SX1276SetRx+0x2e>
 8003ef4:	e06f      	b.n	8003fd6 <SX1276SetRx+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003ef6:	f7ff ff01 	bl	8003cfc <SX1276Read>
 8003efa:	4330      	orrs	r0, r6
 8003efc:	b2c1      	uxtb	r1, r0
 8003efe:	2033      	movs	r0, #51	; 0x33
 8003f00:	f7ff feb1 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003f04:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003f06:	203b      	movs	r0, #59	; 0x3b
 8003f08:	f7ff fead 	bl	8003c66 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003f0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003f0e:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d900      	bls.n	8003f16 <SX1276SetRx+0x4e>
 8003f14:	e0b7      	b.n	8004086 <SX1276SetRx+0x1be>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003f16:	f7ff fef1 	bl	8003cfc <SX1276Read>
 8003f1a:	217f      	movs	r1, #127	; 0x7f
 8003f1c:	4001      	ands	r1, r0
 8003f1e:	2031      	movs	r0, #49	; 0x31
 8003f20:	f7ff fea1 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8003f24:	2030      	movs	r0, #48	; 0x30
 8003f26:	2100      	movs	r1, #0
 8003f28:	f7ff fe9d 	bl	8003c66 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8003f2c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003f2e:	2808      	cmp	r0, #8
 8003f30:	d864      	bhi.n	8003ffc <SX1276SetRx+0x134>
 8003f32:	f7fc f8fb 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f36:	805a      	.short	0x805a
 8003f38:	9c958e87 	.word	0x9c958e87
 8003f3c:	a3a3      	.short	0xa3a3
 8003f3e:	a3          	.byte	0xa3
 8003f3f:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003f40:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f42:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003f44:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f46:	f7ff fed9 	bl	8003cfc <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003f4a:	2303      	movs	r3, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f4c:	210c      	movs	r1, #12
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003f4e:	4018      	ands	r0, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003f50:	4301      	orrs	r1, r0
 8003f52:	2040      	movs	r0, #64	; 0x40
 8003f54:	f7ff fe87 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003f58:	2041      	movs	r0, #65	; 0x41
 8003f5a:	f7ff fecf 	bl	8003cfc <SX1276Read>
 8003f5e:	213f      	movs	r1, #63	; 0x3f
 8003f60:	4249      	negs	r1, r1
 8003f62:	4301      	orrs	r1, r0
 8003f64:	b2c9      	uxtb	r1, r1
 8003f66:	2041      	movs	r0, #65	; 0x41
 8003f68:	f7ff fe7d 	bl	8003c66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003f6c:	2035      	movs	r0, #53	; 0x35
 8003f6e:	f7ff fec5 	bl	8003cfc <SX1276Read>
 8003f72:	233f      	movs	r3, #63	; 0x3f
 8003f74:	4018      	ands	r0, r3
 8003f76:	0023      	movs	r3, r4
 8003f78:	333e      	adds	r3, #62	; 0x3e
 8003f7a:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003f7c:	211e      	movs	r1, #30
 8003f7e:	200d      	movs	r0, #13
 8003f80:	f7ff fe71 	bl	8003c66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003f84:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003f86:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003f88:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	484c      	ldr	r0, [pc, #304]	; (80040c0 <SX1276SetRx+0x1f8>)
 8003f90:	0052      	lsls	r2, r2, #1
 8003f92:	f003 fceb 	bl	800796c <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8003f96:	2301      	movs	r3, #1
 8003f98:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8003f9a:	2f00      	cmp	r7, #0
 8003f9c:	d008      	beq.n	8003fb0 <SX1276SetRx+0xe8>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003f9e:	9d01      	ldr	r5, [sp, #4]
 8003fa0:	0039      	movs	r1, r7
 8003fa2:	3504      	adds	r5, #4
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	f003 f933 	bl	8007210 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8003faa:	0028      	movs	r0, r5
 8003fac:	f003 f8f8 	bl	80071a0 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8003fb0:	7963      	ldrb	r3, [r4, #5]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d000      	beq.n	8003fb8 <SX1276SetRx+0xf0>
 8003fb6:	e077      	b.n	80040a8 <SX1276SetRx+0x1e0>
    if( opMode == RF_OPMODE_SLEEP )
 8003fb8:	2005      	movs	r0, #5
 8003fba:	f7ff ff41 	bl	8003e40 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 8003fbe:	2e00      	cmp	r6, #0
 8003fc0:	d108      	bne.n	8003fd4 <SX1276SetRx+0x10c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8003fc2:	0025      	movs	r5, r4
 8003fc4:	3568      	adds	r5, #104	; 0x68
 8003fc6:	0028      	movs	r0, r5
 8003fc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003fca:	f003 f921 	bl	8007210 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8003fce:	0028      	movs	r0, r5
 8003fd0:	f003 f8e6 	bl	80071a0 <UTIL_TIMER_Start>
}
 8003fd4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003fd6:	f7ff fe91 	bl	8003cfc <SX1276Read>
 8003fda:	43b0      	bics	r0, r6
 8003fdc:	4305      	orrs	r5, r0
 8003fde:	b2e9      	uxtb	r1, r5
 8003fe0:	2033      	movs	r0, #51	; 0x33
 8003fe2:	f7ff fe40 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003fe6:	211d      	movs	r1, #29
 8003fe8:	e78d      	b.n	8003f06 <SX1276SetRx+0x3e>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8003fea:	202f      	movs	r0, #47	; 0x2f
 8003fec:	2148      	movs	r1, #72	; 0x48
 8003fee:	f7ff fe3a 	bl	8003c66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003ff2:	68a0      	ldr	r0, [r4, #8]
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003ff6:	18c0      	adds	r0, r0, r3
 8003ff8:	f7ff fe3e 	bl	8003c78 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8003ffc:	0023      	movs	r3, r4
 8003ffe:	3356      	adds	r3, #86	; 0x56
 8004000:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004002:	0023      	movs	r3, r4
 8004004:	3353      	adds	r3, #83	; 0x53
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d044      	beq.n	8004096 <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800400c:	211d      	movs	r1, #29
 800400e:	2011      	movs	r0, #17
 8004010:	f7ff fe29 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004014:	2040      	movs	r0, #64	; 0x40
 8004016:	f7ff fe71 	bl	8003cfc <SX1276Read>
 800401a:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800401c:	4001      	ands	r1, r0
 800401e:	2040      	movs	r0, #64	; 0x40
 8004020:	f7ff fe21 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004024:	2100      	movs	r1, #0
 8004026:	200f      	movs	r0, #15
 8004028:	f7ff fe1d 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800402c:	2100      	movs	r1, #0
 800402e:	200d      	movs	r0, #13
 8004030:	f7ff fe19 	bl	8003c66 <SX1276Write>
        break;
 8004034:	e7a9      	b.n	8003f8a <SX1276SetRx+0xc2>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004036:	202f      	movs	r0, #47	; 0x2f
 8004038:	2144      	movs	r1, #68	; 0x44
 800403a:	f7ff fe14 	bl	8003c66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800403e:	68a0      	ldr	r0, [r4, #8]
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <SX1276SetRx+0x200>)
 8004042:	e7d8      	b.n	8003ff6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004044:	202f      	movs	r0, #47	; 0x2f
 8004046:	2144      	movs	r1, #68	; 0x44
 8004048:	f7ff fe0d 	bl	8003c66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800404c:	68a0      	ldr	r0, [r4, #8]
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <SX1276SetRx+0x204>)
 8004050:	e7d1      	b.n	8003ff6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004052:	202f      	movs	r0, #47	; 0x2f
 8004054:	2144      	movs	r1, #68	; 0x44
 8004056:	f7ff fe06 	bl	8003c66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800405a:	68a0      	ldr	r0, [r4, #8]
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <SX1276SetRx+0x208>)
 800405e:	e7ca      	b.n	8003ff6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004060:	202f      	movs	r0, #47	; 0x2f
 8004062:	2144      	movs	r1, #68	; 0x44
 8004064:	f7ff fdff 	bl	8003c66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8004068:	68a0      	ldr	r0, [r4, #8]
 800406a:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <SX1276SetRx+0x20c>)
 800406c:	e7c3      	b.n	8003ff6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800406e:	202f      	movs	r0, #47	; 0x2f
 8004070:	2144      	movs	r1, #68	; 0x44
 8004072:	f7ff fdf8 	bl	8003c66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004076:	68a0      	ldr	r0, [r4, #8]
 8004078:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <SX1276SetRx+0x210>)
 800407a:	e7bc      	b.n	8003ff6 <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800407c:	2140      	movs	r1, #64	; 0x40
 800407e:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004080:	f7ff fdf1 	bl	8003c66 <SX1276Write>
 8004084:	e7ba      	b.n	8003ffc <SX1276SetRx+0x134>
 8004086:	f7ff fe39 	bl	8003cfc <SX1276Read>
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	4249      	negs	r1, r1
 800408e:	4301      	orrs	r1, r0
 8004090:	b2c9      	uxtb	r1, r1
 8004092:	2031      	movs	r0, #49	; 0x31
 8004094:	e7f4      	b.n	8004080 <SX1276SetRx+0x1b8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004096:	211f      	movs	r1, #31
 8004098:	2011      	movs	r0, #17
 800409a:	f7ff fde4 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800409e:	2040      	movs	r0, #64	; 0x40
 80040a0:	f7ff fe2c 	bl	8003cfc <SX1276Read>
 80040a4:	213f      	movs	r1, #63	; 0x3f
 80040a6:	e7b9      	b.n	800401c <SX1276SetRx+0x154>
        if( rxContinuous == true )
 80040a8:	2005      	movs	r0, #5
 80040aa:	2e00      	cmp	r6, #0
 80040ac:	d100      	bne.n	80040b0 <SX1276SetRx+0x1e8>
    if( opMode == RF_OPMODE_SLEEP )
 80040ae:	2006      	movs	r0, #6
 80040b0:	f7ff fec6 	bl	8003e40 <SX1276SetOpMode.part.0>
}
 80040b4:	e78e      	b.n	8003fd4 <SX1276SetRx+0x10c>
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	20000314 	.word	0x20000314
 80040bc:	20000294 	.word	0x20000294
 80040c0:	20000348 	.word	0x20000348
 80040c4:	00001e82 	.word	0x00001e82
 80040c8:	000028b4 	.word	0x000028b4
 80040cc:	00003d04 	.word	0x00003d04
 80040d0:	0000515e 	.word	0x0000515e
 80040d4:	00007a12 	.word	0x00007a12
 80040d8:	0000a2c6 	.word	0x0000a2c6

080040dc <SX1276StartCad>:
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80040de:	4c0b      	ldr	r4, [pc, #44]	; (800410c <SX1276StartCad+0x30>)
 80040e0:	7963      	ldrb	r3, [r4, #5]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d110      	bne.n	8004108 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80040e6:	21fa      	movs	r1, #250	; 0xfa
 80040e8:	2011      	movs	r0, #17
 80040ea:	f7ff fdbc 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80040ee:	2040      	movs	r0, #64	; 0x40
 80040f0:	f7ff fe04 	bl	8003cfc <SX1276Read>
 80040f4:	2503      	movs	r5, #3
 80040f6:	43a8      	bics	r0, r5
 80040f8:	b2c1      	uxtb	r1, r0
 80040fa:	2040      	movs	r0, #64	; 0x40
 80040fc:	f7ff fdb3 	bl	8003c66 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8004100:	2007      	movs	r0, #7
 8004102:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 8004104:	f7ff fe9c 	bl	8003e40 <SX1276SetOpMode.part.0>
}
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	20000294 	.word	0x20000294

08004110 <SX1276ReadRssi>:
{
 8004110:	b510      	push	{r4, lr}
    switch( modem )
 8004112:	2800      	cmp	r0, #0
 8004114:	d004      	beq.n	8004120 <SX1276ReadRssi+0x10>
 8004116:	2801      	cmp	r0, #1
 8004118:	d00a      	beq.n	8004130 <SX1276ReadRssi+0x20>
 800411a:	2001      	movs	r0, #1
 800411c:	4240      	negs	r0, r0
}
 800411e:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004120:	2011      	movs	r0, #17
 8004122:	f7ff fdeb 	bl	8003cfc <SX1276Read>
 8004126:	0840      	lsrs	r0, r0, #1
 8004128:	b2c0      	uxtb	r0, r0
 800412a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800412c:	b200      	sxth	r0, r0
 800412e:	e7f6      	b.n	800411e <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <SX1276ReadRssi+0x3c>)
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <SX1276ReadRssi+0x40>)
 8004134:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004136:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004138:	4293      	cmp	r3, r2
 800413a:	d903      	bls.n	8004144 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800413c:	f7ff fdde 	bl	8003cfc <SX1276Read>
 8004140:	389d      	subs	r0, #157	; 0x9d
 8004142:	e7f3      	b.n	800412c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004144:	f7ff fdda 	bl	8003cfc <SX1276Read>
 8004148:	38a4      	subs	r0, #164	; 0xa4
 800414a:	e7ef      	b.n	800412c <SX1276ReadRssi+0x1c>
 800414c:	20000294 	.word	0x20000294
 8004150:	1f4add40 	.word	0x1f4add40

08004154 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8004154:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004156:	2001      	movs	r0, #1
 8004158:	f7ff fdd0 	bl	8003cfc <SX1276Read>
 800415c:	21f8      	movs	r1, #248	; 0xf8
 800415e:	4001      	ands	r1, r0
 8004160:	2001      	movs	r0, #1
 8004162:	f7ff fd80 	bl	8003c66 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 8004166:	2000      	movs	r0, #0
 8004168:	f7fc ff8a 	bl	8001080 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800416c:	2000      	movs	r0, #0
 800416e:	f7fc fe0f 	bl	8000d90 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 8004172:	bd10      	pop	{r4, pc}

08004174 <SX1276SetModem>:
{
 8004174:	b510      	push	{r4, lr}
 8004176:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004178:	2001      	movs	r0, #1
 800417a:	f7ff fdbf 	bl	8003cfc <SX1276Read>
 800417e:	b2c0      	uxtb	r0, r0
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 8004182:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 8004184:	42a0      	cmp	r0, r4
 8004186:	d101      	bne.n	800418c <SX1276SetModem+0x18>
 8004188:	7158      	strb	r0, [r3, #5]
}
 800418a:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800418c:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800418e:	2c01      	cmp	r4, #1
 8004190:	d012      	beq.n	80041b8 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004192:	f7ff ffdf 	bl	8004154 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004196:	2001      	movs	r0, #1
 8004198:	f7ff fdb0 	bl	8003cfc <SX1276Read>
 800419c:	217f      	movs	r1, #127	; 0x7f
 800419e:	4001      	ands	r1, r0
 80041a0:	2001      	movs	r0, #1
 80041a2:	f7ff fd60 	bl	8003c66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80041a6:	2100      	movs	r1, #0
 80041a8:	2040      	movs	r0, #64	; 0x40
 80041aa:	f7ff fd5c 	bl	8003c66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80041ae:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80041b0:	2041      	movs	r0, #65	; 0x41
 80041b2:	f7ff fd58 	bl	8003c66 <SX1276Write>
        break;
 80041b6:	e7e8      	b.n	800418a <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80041b8:	f7ff ffcc 	bl	8004154 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80041bc:	0020      	movs	r0, r4
 80041be:	f7ff fd9d 	bl	8003cfc <SX1276Read>
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	4249      	negs	r1, r1
 80041c6:	4301      	orrs	r1, r0
 80041c8:	b2c9      	uxtb	r1, r1
 80041ca:	0020      	movs	r0, r4
 80041cc:	f7ff fd4b 	bl	8003c66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80041d0:	2100      	movs	r1, #0
 80041d2:	2040      	movs	r0, #64	; 0x40
 80041d4:	f7ff fd47 	bl	8003c66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80041d8:	2100      	movs	r1, #0
 80041da:	e7e9      	b.n	80041b0 <SX1276SetModem+0x3c>
 80041dc:	20000294 	.word	0x20000294

080041e0 <SX1276SetMaxPayloadLength>:
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	0004      	movs	r4, r0
 80041e4:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80041e6:	f7ff ffc5 	bl	8004174 <SX1276SetModem>
    switch( modem )
 80041ea:	2c00      	cmp	r4, #0
 80041ec:	d002      	beq.n	80041f4 <SX1276SetMaxPayloadLength+0x14>
 80041ee:	2c01      	cmp	r4, #1
 80041f0:	d00a      	beq.n	8004208 <SX1276SetMaxPayloadLength+0x28>
}
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SX1276SetMaxPayloadLength+0x30>)
 80041f6:	3303      	adds	r3, #3
 80041f8:	7fdb      	ldrb	r3, [r3, #31]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f9      	bne.n	80041f2 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80041fe:	0029      	movs	r1, r5
 8004200:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004202:	f7ff fd30 	bl	8003c66 <SX1276Write>
}
 8004206:	e7f4      	b.n	80041f2 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004208:	0029      	movs	r1, r5
 800420a:	2023      	movs	r0, #35	; 0x23
 800420c:	e7f9      	b.n	8004202 <SX1276SetMaxPayloadLength+0x22>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20000294 	.word	0x20000294

08004214 <SX1276SetPublicNetwork>:
{
 8004214:	b510      	push	{r4, lr}
 8004216:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8004218:	2001      	movs	r0, #1
 800421a:	f7ff ffab 	bl	8004174 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004220:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004222:	335c      	adds	r3, #92	; 0x5c
 8004224:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8004226:	2c00      	cmp	r4, #0
 8004228:	d100      	bne.n	800422c <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800422a:	2112      	movs	r1, #18
 800422c:	2039      	movs	r0, #57	; 0x39
 800422e:	f7ff fd1a 	bl	8003c66 <SX1276Write>
}
 8004232:	bd10      	pop	{r4, pc}
 8004234:	20000294 	.word	0x20000294

08004238 <SX1276SetRxConfig>:
{
 8004238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423a:	b08b      	sub	sp, #44	; 0x2c
 800423c:	9305      	str	r3, [sp, #20]
 800423e:	ab10      	add	r3, sp, #64	; 0x40
 8004240:	cb80      	ldmia	r3!, {r7}
 8004242:	0014      	movs	r4, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	aa0a      	add	r2, sp, #40	; 0x28
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	ab12      	add	r3, sp, #72	; 0x48
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	0005      	movs	r5, r0
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	ab13      	add	r3, sp, #76	; 0x4c
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	000e      	movs	r6, r1
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	ab14      	add	r3, sp, #80	; 0x50
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	ab15      	add	r3, sp, #84	; 0x54
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	9303      	str	r3, [sp, #12]
 8004266:	ab16      	add	r3, sp, #88	; 0x58
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	9308      	str	r3, [sp, #32]
 800426c:	ab17      	add	r3, sp, #92	; 0x5c
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	9309      	str	r3, [sp, #36]	; 0x24
 8004272:	2319      	movs	r3, #25
 8004274:	189b      	adds	r3, r3, r2
 8004276:	7fdb      	ldrb	r3, [r3, #31]
 8004278:	9306      	str	r3, [sp, #24]
 800427a:	231d      	movs	r3, #29
 800427c:	189b      	adds	r3, r3, r2
 800427e:	7fdb      	ldrb	r3, [r3, #31]
 8004280:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 8004282:	f7ff ff77 	bl	8004174 <SX1276SetModem>
    switch( modem )
 8004286:	2d00      	cmp	r5, #0
 8004288:	d003      	beq.n	8004292 <SX1276SetRxConfig+0x5a>
 800428a:	2d01      	cmp	r5, #1
 800428c:	d067      	beq.n	800435e <SX1276SetRxConfig+0x126>
}
 800428e:	b00b      	add	sp, #44	; 0x2c
 8004290:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004292:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004294:	4d99      	ldr	r5, [pc, #612]	; (80044fc <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004296:	9a01      	ldr	r2, [sp, #4]
 8004298:	1ceb      	adds	r3, r5, #3
 800429a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800429c:	9a02      	ldr	r2, [sp, #8]
 800429e:	1d2b      	adds	r3, r5, #4
 80042a0:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80042a2:	9a03      	ldr	r2, [sp, #12]
 80042a4:	1d6b      	adds	r3, r5, #5
 80042a6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80042a8:	9a06      	ldr	r2, [sp, #24]
 80042aa:	1dab      	adds	r3, r5, #6
 80042ac:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80042ae:	9a07      	ldr	r2, [sp, #28]
 80042b0:	1deb      	adds	r3, r5, #7
 80042b2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80042b4:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042b6:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80042b8:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042ba:	9b04      	ldr	r3, [sp, #16]
 80042bc:	0021      	movs	r1, r4
 80042be:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 80042c0:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80042c2:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80042c4:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042c6:	f7fb ff45 	bl	8000154 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80042ca:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80042cc:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80042ce:	488c      	ldr	r0, [pc, #560]	; (8004500 <SX1276SetRxConfig+0x2c8>)
 80042d0:	f7fb ff40 	bl	8000154 <__udivsi3>
 80042d4:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80042d6:	0a01      	lsrs	r1, r0, #8
 80042d8:	b2c9      	uxtb	r1, r1
 80042da:	2002      	movs	r0, #2
 80042dc:	f7ff fcc3 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80042e0:	b2e1      	uxtb	r1, r4
 80042e2:	2003      	movs	r0, #3
 80042e4:	f7ff fcbf 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80042e8:	0030      	movs	r0, r6
 80042ea:	f7ff fc17 	bl	8003b1c <GetFskBandwidthRegValue>
 80042ee:	0001      	movs	r1, r0
 80042f0:	2012      	movs	r0, #18
 80042f2:	f7ff fcb8 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80042f6:	0038      	movs	r0, r7
 80042f8:	f7ff fc10 	bl	8003b1c <GetFskBandwidthRegValue>
 80042fc:	0001      	movs	r1, r0
 80042fe:	2013      	movs	r0, #19
 8004300:	f7ff fcb1 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004304:	9b00      	ldr	r3, [sp, #0]
 8004306:	2025      	movs	r0, #37	; 0x25
 8004308:	0a19      	lsrs	r1, r3, #8
 800430a:	f7ff fcac 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800430e:	466b      	mov	r3, sp
 8004310:	2026      	movs	r0, #38	; 0x26
 8004312:	7819      	ldrb	r1, [r3, #0]
 8004314:	f7ff fca7 	bl	8003c66 <SX1276Write>
            if( fixLen == 1 )
 8004318:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800431a:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800431c:	2b00      	cmp	r3, #0
 800431e:	d100      	bne.n	8004322 <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8004320:	21ff      	movs	r1, #255	; 0xff
 8004322:	2032      	movs	r0, #50	; 0x32
 8004324:	f7ff fc9f 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004328:	2030      	movs	r0, #48	; 0x30
 800432a:	f7ff fce7 	bl	8003cfc <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800432e:	2101      	movs	r1, #1
 8004330:	9b01      	ldr	r3, [sp, #4]
 8004332:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 8004334:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004336:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8004338:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800433a:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800433c:	236f      	movs	r3, #111	; 0x6f
 800433e:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004340:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8004342:	b2c9      	uxtb	r1, r1
 8004344:	2030      	movs	r0, #48	; 0x30
 8004346:	f7ff fc8e 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800434a:	2031      	movs	r0, #49	; 0x31
 800434c:	f7ff fcd6 	bl	8003cfc <SX1276Read>
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	4301      	orrs	r1, r0
 8004354:	2031      	movs	r0, #49	; 0x31
 8004356:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004358:	f7ff fc85 	bl	8003c66 <SX1276Write>
}
 800435c:	e797      	b.n	800428e <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800435e:	2e02      	cmp	r6, #2
 8004360:	d900      	bls.n	8004364 <SX1276SetRxConfig+0x12c>
                while( 1 );
 8004362:	e7fe      	b.n	8004362 <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004364:	4b65      	ldr	r3, [pc, #404]	; (80044fc <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8004366:	9905      	ldr	r1, [sp, #20]
 8004368:	001a      	movs	r2, r3
 800436a:	324d      	adds	r2, #77	; 0x4d
 800436c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800436e:	001a      	movs	r2, r3
 8004370:	9900      	ldr	r1, [sp, #0]
 8004372:	324e      	adds	r2, #78	; 0x4e
 8004374:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004376:	001a      	movs	r2, r3
 8004378:	9901      	ldr	r1, [sp, #4]
 800437a:	3250      	adds	r2, #80	; 0x50
 800437c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800437e:	001a      	movs	r2, r3
 8004380:	9902      	ldr	r1, [sp, #8]
 8004382:	3251      	adds	r2, #81	; 0x51
 8004384:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004386:	001a      	movs	r2, r3
 8004388:	9903      	ldr	r1, [sp, #12]
 800438a:	3252      	adds	r2, #82	; 0x52
 800438c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800438e:	001a      	movs	r2, r3
 8004390:	9908      	ldr	r1, [sp, #32]
 8004392:	3253      	adds	r2, #83	; 0x53
 8004394:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004396:	001a      	movs	r2, r3
 8004398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800439a:	3254      	adds	r2, #84	; 0x54
 800439c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800439e:	001a      	movs	r2, r3
 80043a0:	9906      	ldr	r1, [sp, #24]
 80043a2:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80043a4:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80043a6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80043a8:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80043aa:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80043ac:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80043ae:	3356      	adds	r3, #86	; 0x56
 80043b0:	0025      	movs	r5, r4
 80043b2:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 80043b4:	2c06      	cmp	r4, #6
 80043b6:	d300      	bcc.n	80043ba <SX1276SetRxConfig+0x182>
 80043b8:	e081      	b.n	80044be <SX1276SetRxConfig+0x286>
 80043ba:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80043bc:	2f07      	cmp	r7, #7
 80043be:	d000      	beq.n	80043c2 <SX1276SetRxConfig+0x18a>
 80043c0:	e082      	b.n	80044c8 <SX1276SetRxConfig+0x290>
 80043c2:	002a      	movs	r2, r5
 80043c4:	2300      	movs	r3, #0
 80043c6:	2101      	movs	r1, #1
 80043c8:	3a0b      	subs	r2, #11
 80043ca:	4291      	cmp	r1, r2
 80043cc:	415b      	adcs	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4a4c      	ldr	r2, [pc, #304]	; (8004504 <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80043d2:	201d      	movs	r0, #29
 80043d4:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043d6:	4e49      	ldr	r6, [pc, #292]	; (80044fc <SX1276SetRxConfig+0x2c4>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80043d8:	f7ff fc90 	bl	8003cfc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043dc:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043de:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043e0:	0059      	lsls	r1, r3, #1
 80043e2:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80043e4:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043e6:	4319      	orrs	r1, r3
 80043e8:	013b      	lsls	r3, r7, #4
 80043ea:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043ec:	b2c9      	uxtb	r1, r1
 80043ee:	f7ff fc3a 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80043f2:	201e      	movs	r0, #30
 80043f4:	f7ff fc82 	bl	8003cfc <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80043f8:	9b04      	ldr	r3, [sp, #16]
 80043fa:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80043fc:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80043fe:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004400:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004402:	4319      	orrs	r1, r3
 8004404:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8004406:	2508      	movs	r5, #8
 8004408:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800440a:	4301      	orrs	r1, r0
 800440c:	b2c9      	uxtb	r1, r1
 800440e:	201e      	movs	r0, #30
 8004410:	f7ff fc29 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004414:	2026      	movs	r0, #38	; 0x26
 8004416:	f7ff fc71 	bl	8003cfc <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800441a:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800441c:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800441e:	7819      	ldrb	r1, [r3, #0]
 8004420:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004422:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004424:	b2c9      	uxtb	r1, r1
 8004426:	2026      	movs	r0, #38	; 0x26
 8004428:	f7ff fc1d 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800442c:	466b      	mov	r3, sp
 800442e:	201f      	movs	r0, #31
 8004430:	7c19      	ldrb	r1, [r3, #16]
 8004432:	f7ff fc18 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004436:	9b00      	ldr	r3, [sp, #0]
 8004438:	2020      	movs	r0, #32
 800443a:	0a19      	lsrs	r1, r3, #8
 800443c:	f7ff fc13 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004440:	466b      	mov	r3, sp
 8004442:	2021      	movs	r0, #33	; 0x21
 8004444:	7819      	ldrb	r1, [r3, #0]
 8004446:	f7ff fc0e 	bl	8003c66 <SX1276Write>
            if( fixLen == 1 )
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <SX1276SetRxConfig+0x220>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8004450:	2022      	movs	r0, #34	; 0x22
 8004452:	9902      	ldr	r1, [sp, #8]
 8004454:	f7ff fc07 	bl	8003c66 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004458:	0033      	movs	r3, r6
 800445a:	3353      	adds	r3, #83	; 0x53
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00f      	beq.n	8004482 <SX1276SetRxConfig+0x24a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004462:	2044      	movs	r0, #68	; 0x44
 8004464:	f7ff fc4a 	bl	8003cfc <SX1276Read>
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	4249      	negs	r1, r1
 800446c:	4301      	orrs	r1, r0
 800446e:	b2c9      	uxtb	r1, r1
 8004470:	2044      	movs	r0, #68	; 0x44
 8004472:	f7ff fbf8 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004476:	0033      	movs	r3, r6
 8004478:	3354      	adds	r3, #84	; 0x54
 800447a:	2024      	movs	r0, #36	; 0x24
 800447c:	7819      	ldrb	r1, [r3, #0]
 800447e:	f7ff fbf2 	bl	8003c66 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004482:	2f09      	cmp	r7, #9
 8004484:	d12c      	bne.n	80044e0 <SX1276SetRxConfig+0x2a8>
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <SX1276SetRxConfig+0x2d0>)
 8004488:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800448a:	2102      	movs	r1, #2
 800448c:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800448e:	429a      	cmp	r2, r3
 8004490:	d922      	bls.n	80044d8 <SX1276SetRxConfig+0x2a0>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004492:	f7ff fbe8 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8004496:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8004498:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800449a:	f7ff fbe4 	bl	8003c66 <SX1276Write>
            if( datarate == 6 )
 800449e:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044a0:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80044a2:	2c06      	cmp	r4, #6
 80044a4:	d81f      	bhi.n	80044e6 <SX1276SetRxConfig+0x2ae>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044a6:	f7ff fc29 	bl	8003cfc <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044aa:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044ac:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044ae:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80044b0:	b2c9      	uxtb	r1, r1
 80044b2:	2031      	movs	r0, #49	; 0x31
 80044b4:	f7ff fbd7 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044b8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044ba:	2037      	movs	r0, #55	; 0x37
 80044bc:	e74c      	b.n	8004358 <SX1276SetRxConfig+0x120>
 80044be:	2c0c      	cmp	r4, #12
 80044c0:	d800      	bhi.n	80044c4 <SX1276SetRxConfig+0x28c>
 80044c2:	e77b      	b.n	80043bc <SX1276SetRxConfig+0x184>
 80044c4:	250c      	movs	r5, #12
 80044c6:	e779      	b.n	80043bc <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80044c8:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80044ca:	2f08      	cmp	r7, #8
 80044cc:	d180      	bne.n	80043d0 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80044ce:	330b      	adds	r3, #11
 80044d0:	42a3      	cmp	r3, r4
 80044d2:	419b      	sbcs	r3, r3
 80044d4:	425b      	negs	r3, r3
 80044d6:	e77b      	b.n	80043d0 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80044d8:	f7ff fbc5 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80044dc:	217f      	movs	r1, #127	; 0x7f
 80044de:	e7db      	b.n	8004498 <SX1276SetRxConfig+0x260>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80044e0:	2103      	movs	r1, #3
 80044e2:	2036      	movs	r0, #54	; 0x36
 80044e4:	e7d9      	b.n	800449a <SX1276SetRxConfig+0x262>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044e6:	f7ff fc09 	bl	8003cfc <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044ea:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80044ec:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044ee:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80044f0:	b2c9      	uxtb	r1, r1
 80044f2:	2031      	movs	r0, #49	; 0x31
 80044f4:	f7ff fbb7 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044f8:	210a      	movs	r1, #10
 80044fa:	e7de      	b.n	80044ba <SX1276SetRxConfig+0x282>
 80044fc:	20000294 	.word	0x20000294
 8004500:	01e84800 	.word	0x01e84800
 8004504:	200002e0 	.word	0x200002e0
 8004508:	1f4add40 	.word	0x1f4add40

0800450c <SX1276SetSleep>:
{
 800450c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800450e:	4c0a      	ldr	r4, [pc, #40]	; (8004538 <SX1276SetSleep+0x2c>)
 8004510:	1d20      	adds	r0, r4, #4
 8004512:	f002 fdf3 	bl	80070fc <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8004516:	0020      	movs	r0, r4
 8004518:	301c      	adds	r0, #28
 800451a:	f002 fdef 	bl	80070fc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800451e:	4c07      	ldr	r4, [pc, #28]	; (800453c <SX1276SetSleep+0x30>)
 8004520:	0020      	movs	r0, r4
 8004522:	3068      	adds	r0, #104	; 0x68
 8004524:	f002 fdea 	bl	80070fc <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004528:	f7ff fe14 	bl	8004154 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800452c:	2000      	movs	r0, #0
 800452e:	f7fc fc2f 	bl	8000d90 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 8004532:	2300      	movs	r3, #0
 8004534:	7123      	strb	r3, [r4, #4]
}
 8004536:	bd10      	pop	{r4, pc}
 8004538:	20000314 	.word	0x20000314
 800453c:	20000294 	.word	0x20000294

08004540 <SX1276IsChannelFree>:
{
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	0007      	movs	r7, r0
 8004544:	000c      	movs	r4, r1
 8004546:	0016      	movs	r6, r2
 8004548:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800454a:	f7ff ffdf 	bl	800450c <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800454e:	2000      	movs	r0, #0
 8004550:	f7ff fe10 	bl	8004174 <SX1276SetModem>
    SX1276SetChannel( freq );
 8004554:	0038      	movs	r0, r7
 8004556:	f7ff fb8f 	bl	8003c78 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800455a:	0020      	movs	r0, r4
 800455c:	f7ff fade 	bl	8003b1c <GetFskBandwidthRegValue>
 8004560:	0004      	movs	r4, r0
 8004562:	0001      	movs	r1, r0
 8004564:	2012      	movs	r0, #18
 8004566:	f7ff fb7e 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800456a:	0021      	movs	r1, r4
 800456c:	2013      	movs	r0, #19
 800456e:	f7ff fb7a 	bl	8003c66 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 8004572:	2005      	movs	r0, #5
 8004574:	f7ff fc64 	bl	8003e40 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8004578:	2001      	movs	r0, #1
 800457a:	f7fc fe6d 	bl	8001258 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800457e:	f002 fd7b 	bl	8007078 <UTIL_TIMER_GetCurrentTime>
 8004582:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8004584:	0020      	movs	r0, r4
 8004586:	f002 fd81 	bl	800708c <UTIL_TIMER_GetElapsedTime>
 800458a:	42a8      	cmp	r0, r5
 800458c:	d304      	bcc.n	8004598 <SX1276IsChannelFree+0x58>
    bool status = true;
 800458e:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8004590:	f7ff ffbc 	bl	800450c <SX1276SetSleep>
}
 8004594:	0020      	movs	r0, r4
 8004596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8004598:	2000      	movs	r0, #0
 800459a:	f7ff fdb9 	bl	8004110 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800459e:	42b0      	cmp	r0, r6
 80045a0:	ddf0      	ble.n	8004584 <SX1276IsChannelFree+0x44>
            status = false;
 80045a2:	2400      	movs	r4, #0
 80045a4:	e7f4      	b.n	8004590 <SX1276IsChannelFree+0x50>

080045a6 <SX1276Random>:
{
 80045a6:	b570      	push	{r4, r5, r6, lr}
 80045a8:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7ff fde2 	bl	8004174 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80045b0:	21ff      	movs	r1, #255	; 0xff
 80045b2:	2011      	movs	r0, #17
 80045b4:	f7ff fb57 	bl	8003c66 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 80045b8:	2005      	movs	r0, #5
 80045ba:	f7ff fc41 	bl	8003e40 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 80045be:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 80045c0:	2601      	movs	r6, #1
 80045c2:	0030      	movs	r0, r6
 80045c4:	f7fc fe48 	bl	8001258 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80045c8:	202c      	movs	r0, #44	; 0x2c
 80045ca:	f7ff fb97 	bl	8003cfc <SX1276Read>
 80045ce:	4030      	ands	r0, r6
 80045d0:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 80045d2:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80045d4:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80045d6:	2c20      	cmp	r4, #32
 80045d8:	d1f3      	bne.n	80045c2 <SX1276Random+0x1c>
    SX1276SetSleep( );
 80045da:	f7ff ff97 	bl	800450c <SX1276SetSleep>
}
 80045de:	0028      	movs	r0, r5
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080045e4 <SX1276SetTxConfig>:
{
 80045e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e6:	b08d      	sub	sp, #52	; 0x34
 80045e8:	9306      	str	r3, [sp, #24]
 80045ea:	ab12      	add	r3, sp, #72	; 0x48
 80045ec:	cb40      	ldmia	r3!, {r6}
 80045ee:	9002      	str	r0, [sp, #8]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	9205      	str	r2, [sp, #20]
 80045f4:	9307      	str	r3, [sp, #28]
 80045f6:	ab14      	add	r3, sp, #80	; 0x50
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	000c      	movs	r4, r1
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	ab15      	add	r3, sp, #84	; 0x54
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	9303      	str	r3, [sp, #12]
 8004604:	ab16      	add	r3, sp, #88	; 0x58
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	9304      	str	r3, [sp, #16]
 800460a:	ab17      	add	r3, sp, #92	; 0x5c
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	9308      	str	r3, [sp, #32]
 8004610:	ab18      	add	r3, sp, #96	; 0x60
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	930a      	str	r3, [sp, #40]	; 0x28
 8004616:	ab19      	add	r3, sp, #100	; 0x64
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800461c:	4bb8      	ldr	r3, [pc, #736]	; (8004900 <SX1276SetTxConfig+0x31c>)
 800461e:	791d      	ldrb	r5, [r3, #4]
 8004620:	2d01      	cmp	r5, #1
 8004622:	d106      	bne.n	8004632 <SX1276SetTxConfig+0x4e>
 8004624:	2800      	cmp	r0, #0
 8004626:	d104      	bne.n	8004632 <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8004628:	f7ff ff70 	bl	800450c <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800462c:	0028      	movs	r0, r5
 800462e:	f7fc fe13 	bl	8001258 <HAL_Delay>
    SX1276SetModem( modem );
 8004632:	9802      	ldr	r0, [sp, #8]
 8004634:	f7ff fd9e 	bl	8004174 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8004638:	2009      	movs	r0, #9
 800463a:	f7ff fb5f 	bl	8003cfc <SX1276Read>
 800463e:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 8004640:	204d      	movs	r0, #77	; 0x4d
 8004642:	f7ff fb5b 	bl	8003cfc <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8004646:	4bae      	ldr	r3, [pc, #696]	; (8004900 <SX1276SetTxConfig+0x31c>)
    paDac = SX1276Read( REG_PADAC );
 8004648:	0007      	movs	r7, r0
 800464a:	0005      	movs	r5, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800464c:	6898      	ldr	r0, [r3, #8]
 800464e:	f7fc fd15 	bl	800107c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 8004652:	2800      	cmp	r0, #0
 8004654:	d02c      	beq.n	80046b0 <SX1276SetTxConfig+0xcc>
 8004656:	2300      	movs	r3, #0
 8004658:	2201      	movs	r2, #1
 800465a:	3802      	subs	r0, #2
 800465c:	b2c0      	uxtb	r0, r0
 800465e:	4282      	cmp	r2, r0
 8004660:	415b      	adcs	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8004662:	217f      	movs	r1, #127	; 0x7f
 8004664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if (power > 14)
 8004666:	01db      	lsls	r3, r3, #7
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8004668:	400a      	ands	r2, r1
 800466a:	0011      	movs	r1, r2
        if (power > 14)
 800466c:	b2db      	uxtb	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800466e:	4319      	orrs	r1, r3
 8004670:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004672:	2900      	cmp	r1, #0
 8004674:	da2b      	bge.n	80046ce <SX1276SetTxConfig+0xea>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8004676:	23f0      	movs	r3, #240	; 0xf0
 8004678:	2507      	movs	r5, #7
 800467a:	4019      	ands	r1, r3
        if( power > 17 )
 800467c:	2c11      	cmp	r4, #17
 800467e:	dd1c      	ble.n	80046ba <SX1276SetTxConfig+0xd6>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8004680:	433d      	orrs	r5, r7
 8004682:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8004684:	1c23      	adds	r3, r4, #0
 8004686:	2c14      	cmp	r4, #20
 8004688:	dd00      	ble.n	800468c <SX1276SetTxConfig+0xa8>
 800468a:	2314      	movs	r3, #20
 800468c:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800468e:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 8004690:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8004692:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8004694:	f7ff fae7 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8004698:	0029      	movs	r1, r5
 800469a:	204d      	movs	r0, #77	; 0x4d
 800469c:	f7ff fae3 	bl	8003c66 <SX1276Write>
    switch( modem )
 80046a0:	9b02      	ldr	r3, [sp, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <SX1276SetTxConfig+0x108>
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d100      	bne.n	80046ac <SX1276SetTxConfig+0xc8>
 80046aa:	e080      	b.n	80047ae <SX1276SetTxConfig+0x1ca>
}
 80046ac:	b00d      	add	sp, #52	; 0x34
 80046ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 80046b0:	2301      	movs	r3, #1
 80046b2:	2c0e      	cmp	r4, #14
 80046b4:	dcd5      	bgt.n	8004662 <SX1276SetTxConfig+0x7e>
 80046b6:	1c03      	adds	r3, r0, #0
 80046b8:	e7d3      	b.n	8004662 <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80046ba:	43af      	bics	r7, r5
 80046bc:	2504      	movs	r5, #4
 80046be:	433d      	orrs	r5, r7
 80046c0:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80046c2:	1c23      	adds	r3, r4, #0
 80046c4:	2c02      	cmp	r4, #2
 80046c6:	da00      	bge.n	80046ca <SX1276SetTxConfig+0xe6>
 80046c8:	2302      	movs	r3, #2
 80046ca:	3b02      	subs	r3, #2
 80046cc:	e7df      	b.n	800468e <SX1276SetTxConfig+0xaa>
        if( power > 0 )
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	dd05      	ble.n	80046de <SX1276SetTxConfig+0xfa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80046d2:	1c23      	adds	r3, r4, #0
 80046d4:	2c0f      	cmp	r4, #15
 80046d6:	dd00      	ble.n	80046da <SX1276SetTxConfig+0xf6>
 80046d8:	230f      	movs	r3, #15
 80046da:	2170      	movs	r1, #112	; 0x70
 80046dc:	e7d7      	b.n	800468e <SX1276SetTxConfig+0xaa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80046de:	1c21      	adds	r1, r4, #0
 80046e0:	1d23      	adds	r3, r4, #4
 80046e2:	da01      	bge.n	80046e8 <SX1276SetTxConfig+0x104>
 80046e4:	4b87      	ldr	r3, [pc, #540]	; (8004904 <SX1276SetTxConfig+0x320>)
 80046e6:	7819      	ldrb	r1, [r3, #0]
 80046e8:	3104      	adds	r1, #4
 80046ea:	e7d1      	b.n	8004690 <SX1276SetTxConfig+0xac>
            SX1276.Settings.Fsk.Power = power;
 80046ec:	4b84      	ldr	r3, [pc, #528]	; (8004900 <SX1276SetTxConfig+0x31c>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80046ee:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80046f0:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80046f2:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80046f4:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.Power = power;
 80046f6:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80046f8:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80046fa:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80046fc:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80046fe:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004700:	1cda      	adds	r2, r3, #3
 8004702:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004704:	9904      	ldr	r1, [sp, #16]
 8004706:	1d5a      	adds	r2, r3, #5
 8004708:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800470a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800470c:	1d9a      	adds	r2, r3, #6
 800470e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004710:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 8004712:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004716:	497c      	ldr	r1, [pc, #496]	; (8004908 <SX1276SetTxConfig+0x324>)
 8004718:	f7fb fda2 	bl	8000260 <__aeabi_uidivmod>
 800471c:	4b7b      	ldr	r3, [pc, #492]	; (800490c <SX1276SetTxConfig+0x328>)
 800471e:	0208      	lsls	r0, r1, #8
 8004720:	18c0      	adds	r0, r0, r3
 8004722:	4979      	ldr	r1, [pc, #484]	; (8004908 <SX1276SetTxConfig+0x324>)
 8004724:	f7fb fd16 	bl	8000154 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004728:	4977      	ldr	r1, [pc, #476]	; (8004908 <SX1276SetTxConfig+0x324>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800472a:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800472c:	9805      	ldr	r0, [sp, #20]
 800472e:	f7fb fd11 	bl	8000154 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004732:	0200      	lsls	r0, r0, #8
 8004734:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8004736:	0a21      	lsrs	r1, r4, #8
 8004738:	2004      	movs	r0, #4
 800473a:	b2c9      	uxtb	r1, r1
 800473c:	f7ff fa93 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8004740:	b2e1      	uxtb	r1, r4
 8004742:	2005      	movs	r0, #5
 8004744:	f7ff fa8f 	bl	8003c66 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004748:	0031      	movs	r1, r6
 800474a:	4871      	ldr	r0, [pc, #452]	; (8004910 <SX1276SetTxConfig+0x32c>)
 800474c:	f7fb fd02 	bl	8000154 <__udivsi3>
 8004750:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004752:	0a01      	lsrs	r1, r0, #8
 8004754:	b2c9      	uxtb	r1, r1
 8004756:	2002      	movs	r0, #2
 8004758:	f7ff fa85 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800475c:	2003      	movs	r0, #3
 800475e:	b2e1      	uxtb	r1, r4
 8004760:	f7ff fa81 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004764:	9b01      	ldr	r3, [sp, #4]
 8004766:	2025      	movs	r0, #37	; 0x25
 8004768:	0a19      	lsrs	r1, r3, #8
 800476a:	f7ff fa7c 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800476e:	466b      	mov	r3, sp
 8004770:	2026      	movs	r0, #38	; 0x26
 8004772:	7919      	ldrb	r1, [r3, #4]
 8004774:	f7ff fa77 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004778:	2030      	movs	r0, #48	; 0x30
 800477a:	f7ff fabf 	bl	8003cfc <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800477e:	2101      	movs	r1, #1
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 8004784:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004786:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8004788:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800478a:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800478c:	236f      	movs	r3, #111	; 0x6f
 800478e:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004790:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8004792:	b2c9      	uxtb	r1, r1
 8004794:	2030      	movs	r0, #48	; 0x30
 8004796:	f7ff fa66 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800479a:	2031      	movs	r0, #49	; 0x31
 800479c:	f7ff faae 	bl	8003cfc <SX1276Read>
 80047a0:	2140      	movs	r1, #64	; 0x40
 80047a2:	4301      	orrs	r1, r0
 80047a4:	2031      	movs	r0, #49	; 0x31
 80047a6:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80047a8:	f7ff fa5d 	bl	8003c66 <SX1276Write>
}
 80047ac:	e77e      	b.n	80046ac <SX1276SetTxConfig+0xc8>
            SX1276.Settings.LoRa.Power = power;
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <SX1276SetTxConfig+0x31c>)
 80047b0:	001a      	movs	r2, r3
 80047b2:	3240      	adds	r2, #64	; 0x40
 80047b4:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 80047b6:	9a06      	ldr	r2, [sp, #24]
 80047b8:	2a02      	cmp	r2, #2
 80047ba:	d900      	bls.n	80047be <SX1276SetTxConfig+0x1da>
                while( 1 );
 80047bc:	e7fe      	b.n	80047bc <SX1276SetTxConfig+0x1d8>
            SX1276.Settings.LoRa.Coderate = coderate;
 80047be:	001a      	movs	r2, r3
 80047c0:	9907      	ldr	r1, [sp, #28]
 80047c2:	324d      	adds	r2, #77	; 0x4d
 80047c4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80047c6:	001a      	movs	r2, r3
 80047c8:	9901      	ldr	r1, [sp, #4]
 80047ca:	324e      	adds	r2, #78	; 0x4e
 80047cc:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80047ce:	001a      	movs	r2, r3
 80047d0:	9903      	ldr	r1, [sp, #12]
 80047d2:	3250      	adds	r2, #80	; 0x50
 80047d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80047d6:	001a      	movs	r2, r3
 80047d8:	9908      	ldr	r1, [sp, #32]
 80047da:	3253      	adds	r2, #83	; 0x53
 80047dc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80047de:	001a      	movs	r2, r3
 80047e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047e2:	3254      	adds	r2, #84	; 0x54
 80047e4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80047e6:	001a      	movs	r2, r3
 80047e8:	9904      	ldr	r1, [sp, #16]
 80047ea:	3252      	adds	r2, #82	; 0x52
 80047ec:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80047ee:	001a      	movs	r2, r3
 80047f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047f2:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80047f4:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80047f6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80047f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 80047fa:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80047fc:	0034      	movs	r4, r6
 80047fe:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8004800:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8004802:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8004804:	2e06      	cmp	r6, #6
 8004806:	d263      	bcs.n	80048d0 <SX1276SetTxConfig+0x2ec>
 8004808:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800480a:	2d07      	cmp	r5, #7
 800480c:	d164      	bne.n	80048d8 <SX1276SetTxConfig+0x2f4>
 800480e:	0022      	movs	r2, r4
 8004810:	2300      	movs	r3, #0
 8004812:	2101      	movs	r1, #1
 8004814:	3a0b      	subs	r2, #11
 8004816:	4291      	cmp	r1, r2
 8004818:	415b      	adcs	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	4f38      	ldr	r7, [pc, #224]	; (8004900 <SX1276SetTxConfig+0x31c>)
 800481e:	003a      	movs	r2, r7
 8004820:	324c      	adds	r2, #76	; 0x4c
 8004822:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004824:	9b08      	ldr	r3, [sp, #32]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00f      	beq.n	800484a <SX1276SetTxConfig+0x266>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800482a:	2044      	movs	r0, #68	; 0x44
 800482c:	f7ff fa66 	bl	8003cfc <SX1276Read>
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	4249      	negs	r1, r1
 8004834:	4301      	orrs	r1, r0
 8004836:	b2c9      	uxtb	r1, r1
 8004838:	2044      	movs	r0, #68	; 0x44
 800483a:	f7ff fa14 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800483e:	003b      	movs	r3, r7
 8004840:	3354      	adds	r3, #84	; 0x54
 8004842:	2024      	movs	r0, #36	; 0x24
 8004844:	7819      	ldrb	r1, [r3, #0]
 8004846:	f7ff fa0e 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800484a:	201d      	movs	r0, #29
 800484c:	f7ff fa56 	bl	8003cfc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004850:	9b07      	ldr	r3, [sp, #28]
 8004852:	012d      	lsls	r5, r5, #4
 8004854:	0059      	lsls	r1, r3, #1
 8004856:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004858:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800485a:	430b      	orrs	r3, r1
 800485c:	0019      	movs	r1, r3
 800485e:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004860:	b2c9      	uxtb	r1, r1
 8004862:	f7ff fa00 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004866:	201e      	movs	r0, #30
 8004868:	f7ff fa48 	bl	8003cfc <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	0124      	lsls	r4, r4, #4
 8004870:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004872:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8004874:	230b      	movs	r3, #11
 8004876:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004878:	4304      	orrs	r4, r0
 800487a:	b2e1      	uxtb	r1, r4
 800487c:	201e      	movs	r0, #30
 800487e:	f7ff f9f2 	bl	8003c66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004882:	2026      	movs	r0, #38	; 0x26
 8004884:	f7ff fa3a 	bl	8003cfc <SX1276Read>
 8004888:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800488a:	374c      	adds	r7, #76	; 0x4c
 800488c:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800488e:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004890:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004892:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004894:	b2c9      	uxtb	r1, r1
 8004896:	2026      	movs	r0, #38	; 0x26
 8004898:	f7ff f9e5 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800489c:	9b01      	ldr	r3, [sp, #4]
 800489e:	2020      	movs	r0, #32
 80048a0:	0a19      	lsrs	r1, r3, #8
 80048a2:	f7ff f9e0 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80048a6:	466b      	mov	r3, sp
 80048a8:	2021      	movs	r0, #33	; 0x21
 80048aa:	7919      	ldrb	r1, [r3, #4]
 80048ac:	f7ff f9db 	bl	8003c66 <SX1276Write>
            if( datarate == 6 )
 80048b0:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048b2:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80048b4:	2e06      	cmp	r6, #6
 80048b6:	d817      	bhi.n	80048e8 <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048b8:	f7ff fa20 	bl	8003cfc <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048bc:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048be:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048c0:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80048c2:	b2c9      	uxtb	r1, r1
 80048c4:	2031      	movs	r0, #49	; 0x31
 80048c6:	f7ff f9ce 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80048ca:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80048cc:	2037      	movs	r0, #55	; 0x37
 80048ce:	e76b      	b.n	80047a8 <SX1276SetTxConfig+0x1c4>
 80048d0:	2e0c      	cmp	r6, #12
 80048d2:	d99a      	bls.n	800480a <SX1276SetTxConfig+0x226>
 80048d4:	240c      	movs	r4, #12
 80048d6:	e798      	b.n	800480a <SX1276SetTxConfig+0x226>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80048d8:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80048da:	2d08      	cmp	r5, #8
 80048dc:	d19e      	bne.n	800481c <SX1276SetTxConfig+0x238>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80048de:	330b      	adds	r3, #11
 80048e0:	42b3      	cmp	r3, r6
 80048e2:	419b      	sbcs	r3, r3
 80048e4:	425b      	negs	r3, r3
 80048e6:	e799      	b.n	800481c <SX1276SetTxConfig+0x238>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048e8:	f7ff fa08 	bl	8003cfc <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048ec:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80048ee:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80048f0:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80048f2:	b2c9      	uxtb	r1, r1
 80048f4:	2031      	movs	r0, #49	; 0x31
 80048f6:	f7ff f9b6 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80048fa:	210a      	movs	r1, #10
 80048fc:	e7e6      	b.n	80048cc <SX1276SetTxConfig+0x2e8>
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	20000294 	.word	0x20000294
 8004904:	080085ed 	.word	0x080085ed
 8004908:	00003d09 	.word	0x00003d09
 800490c:	00001e84 	.word	0x00001e84
 8004910:	01e84800 	.word	0x01e84800

08004914 <SX1276SetTxContinuousWave>:
{
 8004914:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 8004916:	24fa      	movs	r4, #250	; 0xfa
{
 8004918:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800491a:	00a4      	lsls	r4, r4, #2
 800491c:	4354      	muls	r4, r2
{
 800491e:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8004920:	f7ff f9aa 	bl	8003c78 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004924:	2305      	movs	r3, #5
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	2396      	movs	r3, #150	; 0x96
 800492a:	2000      	movs	r0, #0
 800492c:	015b      	lsls	r3, r3, #5
 800492e:	0002      	movs	r2, r0
 8004930:	0029      	movs	r1, r5
 8004932:	9007      	str	r0, [sp, #28]
 8004934:	9006      	str	r0, [sp, #24]
 8004936:	9005      	str	r0, [sp, #20]
 8004938:	9004      	str	r0, [sp, #16]
 800493a:	9003      	str	r0, [sp, #12]
 800493c:	9001      	str	r0, [sp, #4]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	9408      	str	r4, [sp, #32]
 8004942:	0003      	movs	r3, r0
 8004944:	f7ff fe4e 	bl	80045e4 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8004948:	2031      	movs	r0, #49	; 0x31
 800494a:	f7ff f9d7 	bl	8003cfc <SX1276Read>
 800494e:	2540      	movs	r5, #64	; 0x40
 8004950:	43a8      	bics	r0, r5
 8004952:	b2c1      	uxtb	r1, r0
 8004954:	2031      	movs	r0, #49	; 0x31
 8004956:	f7ff f986 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800495a:	0028      	movs	r0, r5
 800495c:	21f0      	movs	r1, #240	; 0xf0
 800495e:	f7ff f982 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8004962:	21a0      	movs	r1, #160	; 0xa0
 8004964:	2041      	movs	r0, #65	; 0x41
 8004966:	f7ff f97e 	bl	8003c66 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800496a:	4d08      	ldr	r5, [pc, #32]	; (800498c <SX1276SetTxContinuousWave+0x78>)
 800496c:	0021      	movs	r1, r4
 800496e:	351c      	adds	r5, #28
 8004970:	0028      	movs	r0, r5
 8004972:	f002 fc4d 	bl	8007210 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 8004976:	2202      	movs	r2, #2
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800497a:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800497c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800497e:	f002 fc0f 	bl	80071a0 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8004982:	2003      	movs	r0, #3
 8004984:	f7ff fa5c 	bl	8003e40 <SX1276SetOpMode.part.0>
}
 8004988:	b00b      	add	sp, #44	; 0x2c
 800498a:	bd30      	pop	{r4, r5, pc}
 800498c:	20000314 	.word	0x20000314
 8004990:	20000294 	.word	0x20000294

08004994 <RxChainCalibration>:
{
 8004994:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8004996:	2009      	movs	r0, #9
 8004998:	f7ff f9b0 	bl	8003cfc <SX1276Read>
 800499c:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800499e:	2006      	movs	r0, #6
 80049a0:	f7ff f9ac 	bl	8003cfc <SX1276Read>
 80049a4:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80049a6:	2007      	movs	r0, #7
 80049a8:	f7ff f9a8 	bl	8003cfc <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80049ac:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80049ae:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80049b0:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80049b2:	2008      	movs	r0, #8
 80049b4:	f7ff f9a2 	bl	8003cfc <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80049ba:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80049bc:	b2c0      	uxtb	r0, r0
 80049be:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80049c0:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80049c2:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80049c4:	3080      	adds	r0, #128	; 0x80
 80049c6:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80049c8:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80049ca:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 80049cc:	2009      	movs	r0, #9
 80049ce:	f7ff f94a 	bl	8003c66 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80049d2:	203b      	movs	r0, #59	; 0x3b
 80049d4:	f7ff f992 	bl	8003cfc <SX1276Read>
 80049d8:	2140      	movs	r1, #64	; 0x40
 80049da:	4301      	orrs	r1, r0
 80049dc:	b2c9      	uxtb	r1, r1
 80049de:	203b      	movs	r0, #59	; 0x3b
 80049e0:	f7ff f941 	bl	8003c66 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80049e4:	2620      	movs	r6, #32
 80049e6:	203b      	movs	r0, #59	; 0x3b
 80049e8:	f7ff f988 	bl	8003cfc <SX1276Read>
 80049ec:	4230      	tst	r0, r6
 80049ee:	d1fa      	bne.n	80049e6 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80049f0:	480d      	ldr	r0, [pc, #52]	; (8004a28 <RxChainCalibration+0x94>)
 80049f2:	f7ff f941 	bl	8003c78 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80049f6:	203b      	movs	r0, #59	; 0x3b
 80049f8:	f7ff f980 	bl	8003cfc <SX1276Read>
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	4301      	orrs	r1, r0
 8004a00:	b2c9      	uxtb	r1, r1
 8004a02:	203b      	movs	r0, #59	; 0x3b
 8004a04:	f7ff f92f 	bl	8003c66 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8004a08:	2620      	movs	r6, #32
 8004a0a:	203b      	movs	r0, #59	; 0x3b
 8004a0c:	f7ff f976 	bl	8003cfc <SX1276Read>
 8004a10:	4230      	tst	r0, r6
 8004a12:	d1fa      	bne.n	8004a0a <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8004a14:	0029      	movs	r1, r5
 8004a16:	2009      	movs	r0, #9
 8004a18:	f7ff f925 	bl	8003c66 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8004a1c:	0020      	movs	r0, r4
 8004a1e:	f7ff f92b 	bl	8003c78 <SX1276SetChannel>
}
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	00003d09 	.word	0x00003d09
 8004a28:	33bca100 	.word	0x33bca100

08004a2c <SX1276Init>:
{
 8004a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 8004a2e:	4e21      	ldr	r6, [pc, #132]	; (8004ab4 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8004a30:	2400      	movs	r4, #0
    RadioEvents = events;
 8004a32:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8004a34:	2101      	movs	r1, #1
 8004a36:	0030      	movs	r0, r6
 8004a38:	4d1f      	ldr	r5, [pc, #124]	; (8004ab8 <SX1276Init+0x8c>)
 8004a3a:	0022      	movs	r2, r4
 8004a3c:	002b      	movs	r3, r5
 8004a3e:	9400      	str	r4, [sp, #0]
 8004a40:	4249      	negs	r1, r1
 8004a42:	301c      	adds	r0, #28
 8004a44:	f002 fafc 	bl	8007040 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8004a48:	2101      	movs	r1, #1
 8004a4a:	002b      	movs	r3, r5
 8004a4c:	0022      	movs	r2, r4
 8004a4e:	1d30      	adds	r0, r6, #4
 8004a50:	9400      	str	r4, [sp, #0]
 8004a52:	4249      	negs	r1, r1
 8004a54:	f002 faf4 	bl	8007040 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8004a58:	4e18      	ldr	r6, [pc, #96]	; (8004abc <SX1276Init+0x90>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	0030      	movs	r0, r6
 8004a5e:	002b      	movs	r3, r5
 8004a60:	0022      	movs	r2, r4
 8004a62:	4249      	negs	r1, r1
 8004a64:	9400      	str	r4, [sp, #0]
 8004a66:	3068      	adds	r0, #104	; 0x68
 8004a68:	f002 faea 	bl	8007040 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f7fc f98f 	bl	8000d90 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 8004a72:	f7fc fb2d 	bl	80010d0 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 8004a76:	f7ff ff8d 	bl	8004994 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004a7a:	f7ff fb6b 	bl	8004154 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 8004a7e:	4810      	ldr	r0, [pc, #64]	; (8004ac0 <SX1276Init+0x94>)
 8004a80:	f7fc face 	bl	8001020 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004a84:	4d0f      	ldr	r5, [pc, #60]	; (8004ac4 <SX1276Init+0x98>)
 8004a86:	002c      	movs	r4, r5
 8004a88:	353c      	adds	r5, #60	; 0x3c
 8004a8a:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 8004a8c:	7820      	ldrb	r0, [r4, #0]
 8004a8e:	f7ff fb71 	bl	8004174 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004a92:	78a1      	ldrb	r1, [r4, #2]
 8004a94:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004a96:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004a98:	f7ff f8e5 	bl	8003c66 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004a9c:	42ac      	cmp	r4, r5
 8004a9e:	d1f5      	bne.n	8004a8c <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f7ff fb67 	bl	8004174 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8004aaa:	f7fc f96f 	bl	8000d8c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8004aae:	3002      	adds	r0, #2
}
 8004ab0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20000314 	.word	0x20000314
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	20000294 	.word	0x20000294
 8004ac0:	2000000c 	.word	0x2000000c
 8004ac4:	08008318 	.word	0x08008318

08004ac8 <SX1276OnTimeoutIrq>:
{
 8004ac8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004aca:	4c2a      	ldr	r4, [pc, #168]	; (8004b74 <SX1276OnTimeoutIrq+0xac>)
 8004acc:	7923      	ldrb	r3, [r4, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d002      	beq.n	8004ad8 <SX1276OnTimeoutIrq+0x10>
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d02a      	beq.n	8004b2c <SX1276OnTimeoutIrq+0x64>
}
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004ad8:	7963      	ldrb	r3, [r4, #5]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d117      	bne.n	8004b0e <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004ade:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004ae0:	210b      	movs	r1, #11
 8004ae2:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004ae4:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004ae6:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004ae8:	f7ff f8bd 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004aec:	2110      	movs	r1, #16
 8004aee:	203f      	movs	r0, #63	; 0x3f
 8004af0:	f7ff f8b9 	bl	8003c66 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004af4:	1de3      	adds	r3, r4, #7
 8004af6:	7fdb      	ldrb	r3, [r3, #31]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d011      	beq.n	8004b20 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004afc:	200d      	movs	r0, #13
 8004afe:	f7ff f8fd 	bl	8003cfc <SX1276Read>
 8004b02:	2140      	movs	r1, #64	; 0x40
 8004b04:	4301      	orrs	r1, r0
 8004b06:	b2c9      	uxtb	r1, r1
 8004b08:	200d      	movs	r0, #13
 8004b0a:	f7ff f8ac 	bl	8003c66 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <SX1276OnTimeoutIrq+0xb0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0df      	beq.n	8004ad6 <SX1276OnTimeoutIrq+0xe>
 8004b16:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0dc      	beq.n	8004ad6 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8004b1c:	4798      	blx	r3
}
 8004b1e:	e7da      	b.n	8004ad6 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004b20:	0020      	movs	r0, r4
 8004b22:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 8004b24:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004b26:	f002 fae9 	bl	80070fc <UTIL_TIMER_Stop>
 8004b2a:	e7f0      	b.n	8004b0e <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 8004b2c:	f7fc fad0 	bl	80010d0 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 8004b30:	f7ff ff30 	bl	8004994 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b34:	f7ff fb0e 	bl	8004154 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b38:	4e10      	ldr	r6, [pc, #64]	; (8004b7c <SX1276OnTimeoutIrq+0xb4>)
 8004b3a:	0035      	movs	r5, r6
 8004b3c:	363c      	adds	r6, #60	; 0x3c
 8004b3e:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 8004b40:	7828      	ldrb	r0, [r5, #0]
 8004b42:	f7ff fb17 	bl	8004174 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004b46:	78a9      	ldrb	r1, [r5, #2]
 8004b48:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b4a:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004b4c:	f7ff f88b 	bl	8003c66 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b50:	42b5      	cmp	r5, r6
 8004b52:	d1f5      	bne.n	8004b40 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff fb0d 	bl	8004174 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8004b5a:	0023      	movs	r3, r4
 8004b5c:	335c      	adds	r3, #92	; 0x5c
 8004b5e:	7818      	ldrb	r0, [r3, #0]
 8004b60:	f7ff fb58 	bl	8004214 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <SX1276OnTimeoutIrq+0xb0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0b2      	beq.n	8004ad6 <SX1276OnTimeoutIrq+0xe>
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	e7d1      	b.n	8004b18 <SX1276OnTimeoutIrq+0x50>
 8004b74:	20000294 	.word	0x20000294
 8004b78:	20000314 	.word	0x20000314
 8004b7c:	08008318 	.word	0x08008318

08004b80 <SX1276OnDio0Irq>:
{
 8004b80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 8004b82:	466b      	mov	r3, sp
 8004b84:	1dde      	adds	r6, r3, #7
 8004b86:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8004b88:	4c8b      	ldr	r4, [pc, #556]	; (8004db8 <SX1276OnDio0Irq+0x238>)
    volatile uint8_t irqFlags = 0;
 8004b8a:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 8004b8c:	7923      	ldrb	r3, [r4, #4]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d003      	beq.n	8004b9a <SX1276OnDio0Irq+0x1a>
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d100      	bne.n	8004b98 <SX1276OnDio0Irq+0x18>
 8004b96:	e0fa      	b.n	8004d8e <SX1276OnDio0Irq+0x20e>
}
 8004b98:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8004b9a:	7963      	ldrb	r3, [r4, #5]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <SX1276OnDio0Irq+0x68>
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d1f9      	bne.n	8004b98 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004ba4:	2140      	movs	r1, #64	; 0x40
 8004ba6:	2012      	movs	r0, #18
 8004ba8:	f7ff f85d 	bl	8003c66 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004bac:	2012      	movs	r0, #18
 8004bae:	f7ff f8a5 	bl	8003cfc <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004bb2:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004bb4:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004bb6:	7833      	ldrb	r3, [r6, #0]
 8004bb8:	4d80      	ldr	r5, [pc, #512]	; (8004dbc <SX1276OnDio0Irq+0x23c>)
 8004bba:	420b      	tst	r3, r1
 8004bbc:	d100      	bne.n	8004bc0 <SX1276OnDio0Irq+0x40>
 8004bbe:	e08a      	b.n	8004cd6 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004bc0:	2012      	movs	r0, #18
 8004bc2:	f7ff f850 	bl	8003c66 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004bc6:	0023      	movs	r3, r4
 8004bc8:	3356      	adds	r3, #86	; 0x56
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d100      	bne.n	8004bd2 <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 8004bd0:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8004bd2:	1d28      	adds	r0, r5, #4
 8004bd4:	f002 fa92 	bl	80070fc <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0dc      	beq.n	8004b98 <SX1276OnDio0Irq+0x18>
 8004bde:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0d9      	beq.n	8004b98 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8004be4:	4798      	blx	r3
}
 8004be6:	e7d7      	b.n	8004b98 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8004be8:	1d63      	adds	r3, r4, #5
 8004bea:	7fdb      	ldrb	r3, [r3, #31]
 8004bec:	4d73      	ldr	r5, [pc, #460]	; (8004dbc <SX1276OnDio0Irq+0x23c>)
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d030      	beq.n	8004c54 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8004bf2:	203f      	movs	r0, #63	; 0x3f
 8004bf4:	f7ff f882 	bl	8003cfc <SX1276Read>
 8004bf8:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8004bfa:	7833      	ldrb	r3, [r6, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d429      	bmi.n	8004c54 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004c00:	210b      	movs	r1, #11
 8004c02:	203e      	movs	r0, #62	; 0x3e
 8004c04:	f7ff f82f 	bl	8003c66 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004c08:	2110      	movs	r1, #16
 8004c0a:	203f      	movs	r0, #63	; 0x3f
 8004c0c:	f7ff f82b 	bl	8003c66 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8004c10:	1d28      	adds	r0, r5, #4
 8004c12:	f002 fa73 	bl	80070fc <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8004c16:	1de3      	adds	r3, r4, #7
 8004c18:	7fde      	ldrb	r6, [r3, #31]
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	d110      	bne.n	8004c40 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 8004c1e:	0020      	movs	r0, r4
 8004c20:	3068      	adds	r0, #104	; 0x68
 8004c22:	f002 fa6b 	bl	80070fc <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8004c26:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <SX1276OnDio0Irq+0xb6>
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d000      	beq.n	8004c36 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8004c34:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004c36:	2300      	movs	r3, #0
 8004c38:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004c3a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8004c3c:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8004c3e:	e7ab      	b.n	8004b98 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004c40:	200d      	movs	r0, #13
 8004c42:	f7ff f85b 	bl	8003cfc <SX1276Read>
 8004c46:	2140      	movs	r1, #64	; 0x40
 8004c48:	4301      	orrs	r1, r0
 8004c4a:	b2c9      	uxtb	r1, r1
 8004c4c:	200d      	movs	r0, #13
 8004c4e:	f7ff f80a 	bl	8003c66 <SX1276Write>
 8004c52:	e7e9      	b.n	8004c28 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004c54:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8004c56:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8004c58:	0013      	movs	r3, r2
 8004c5a:	4e59      	ldr	r6, [pc, #356]	; (8004dc0 <SX1276OnDio0Irq+0x240>)
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	d10a      	bne.n	8004c76 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004c60:	1ce3      	adds	r3, r4, #3
 8004c62:	7fd8      	ldrb	r0, [r3, #31]
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d127      	bne.n	8004cb8 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8004c68:	0021      	movs	r1, r4
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	313a      	adds	r1, #58	; 0x3a
 8004c6e:	f7ff f82d 	bl	8003ccc <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c72:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8004c74:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c76:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8004c78:	2000      	movs	r0, #0
 8004c7a:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c7c:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 8004c7e:	f7ff f825 	bl	8003ccc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c82:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8004c84:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004c86:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8004c88:	f002 fa38 	bl	80070fc <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004c8c:	1de3      	adds	r3, r4, #7
 8004c8e:	7fdb      	ldrb	r3, [r3, #31]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d116      	bne.n	8004cc2 <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8004c94:	0020      	movs	r0, r4
 8004c96:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 8004c98:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004c9a:	f002 fa2f 	bl	80070fc <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0c8      	beq.n	8004c36 <SX1276OnDio0Irq+0xb6>
 8004ca4:	689d      	ldr	r5, [r3, #8]
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	d0c5      	beq.n	8004c36 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8004caa:	2232      	movs	r2, #50	; 0x32
 8004cac:	2300      	movs	r3, #0
 8004cae:	0030      	movs	r0, r6
 8004cb0:	56a2      	ldrsb	r2, [r4, r2]
 8004cb2:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8004cb4:	47a8      	blx	r5
 8004cb6:	e7be      	b.n	8004c36 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004cb8:	2032      	movs	r0, #50	; 0x32
 8004cba:	f7ff f81f 	bl	8003cfc <SX1276Read>
 8004cbe:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004cc0:	e7d7      	b.n	8004c72 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004cc2:	200d      	movs	r0, #13
 8004cc4:	f7ff f81a 	bl	8003cfc <SX1276Read>
 8004cc8:	2140      	movs	r1, #64	; 0x40
 8004cca:	4301      	orrs	r1, r0
 8004ccc:	b2c9      	uxtb	r1, r1
 8004cce:	200d      	movs	r0, #13
 8004cd0:	f7fe ffc9 	bl	8003c66 <SX1276Write>
 8004cd4:	e7e3      	b.n	8004c9e <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004cd6:	2019      	movs	r0, #25
 8004cd8:	f7ff f810 	bl	8003cfc <SX1276Read>
 8004cdc:	0026      	movs	r6, r4
 8004cde:	b240      	sxtb	r0, r0
 8004ce0:	3002      	adds	r0, #2
 8004ce2:	1080      	asrs	r0, r0, #2
 8004ce4:	3660      	adds	r6, #96	; 0x60
 8004ce6:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004ce8:	201a      	movs	r0, #26
 8004cea:	f7ff f807 	bl	8003cfc <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004cee:	2200      	movs	r2, #0
 8004cf0:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004cf2:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004cf4:	4933      	ldr	r1, [pc, #204]	; (8004dc4 <SX1276OnDio0Irq+0x244>)
 8004cf6:	111b      	asrs	r3, r3, #4
 8004cf8:	b280      	uxth	r0, r0
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	da3e      	bge.n	8004d7c <SX1276OnDio0Irq+0x1fc>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004cfe:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8004d00:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004d02:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004d04:	428e      	cmp	r6, r1
 8004d06:	d937      	bls.n	8004d78 <SX1276OnDio0Irq+0x1f8>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004d08:	3a9d      	subs	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004d0a:	1882      	adds	r2, r0, r2
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	0022      	movs	r2, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004d10:	b21b      	sxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004d12:	3262      	adds	r2, #98	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8004d14:	2013      	movs	r0, #19
 8004d16:	0026      	movs	r6, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004d18:	8013      	strh	r3, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8004d1a:	f7fe ffef 	bl	8003cfc <SX1276Read>
 8004d1e:	3664      	adds	r6, #100	; 0x64
 8004d20:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8004d22:	2010      	movs	r0, #16
 8004d24:	f7fe ffea 	bl	8003cfc <SX1276Read>
 8004d28:	0001      	movs	r1, r0
 8004d2a:	200d      	movs	r0, #13
 8004d2c:	f7fe ff9b 	bl	8003c66 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8004d30:	7832      	ldrb	r2, [r6, #0]
 8004d32:	4e23      	ldr	r6, [pc, #140]	; (8004dc0 <SX1276OnDio0Irq+0x240>)
 8004d34:	2000      	movs	r0, #0
 8004d36:	0031      	movs	r1, r6
 8004d38:	f7fe ffc8 	bl	8003ccc <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8004d3c:	0023      	movs	r3, r4
 8004d3e:	3356      	adds	r3, #86	; 0x56
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d100      	bne.n	8004d48 <SX1276OnDio0Irq+0x1c8>
                        SX1276.Settings.State = RF_IDLE;
 8004d46:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8004d48:	1d28      	adds	r0, r5, #4
 8004d4a:	f002 f9d7 	bl	80070fc <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d100      	bne.n	8004d56 <SX1276OnDio0Irq+0x1d6>
 8004d54:	e720      	b.n	8004b98 <SX1276OnDio0Irq+0x18>
 8004d56:	689d      	ldr	r5, [r3, #8]
 8004d58:	2d00      	cmp	r5, #0
 8004d5a:	d100      	bne.n	8004d5e <SX1276OnDio0Irq+0x1de>
 8004d5c:	e71c      	b.n	8004b98 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8004d5e:	0023      	movs	r3, r4
 8004d60:	0022      	movs	r2, r4
 8004d62:	3360      	adds	r3, #96	; 0x60
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	3464      	adds	r4, #100	; 0x64
 8004d68:	3262      	adds	r2, #98	; 0x62
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	5e52      	ldrsh	r2, [r2, r1]
 8004d6e:	0030      	movs	r0, r6
 8004d70:	7821      	ldrb	r1, [r4, #0]
 8004d72:	b25b      	sxtb	r3, r3
 8004d74:	47a8      	blx	r5
 8004d76:	e70f      	b.n	8004b98 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004d78:	3aa4      	subs	r2, #164	; 0xa4
 8004d7a:	e7c6      	b.n	8004d0a <SX1276OnDio0Irq+0x18a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004d7c:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004d7e:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004d80:	428a      	cmp	r2, r1
 8004d82:	d902      	bls.n	8004d8a <SX1276OnDio0Irq+0x20a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004d84:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004d86:	181b      	adds	r3, r3, r0
 8004d88:	e7c1      	b.n	8004d0e <SX1276OnDio0Irq+0x18e>
 8004d8a:	38a4      	subs	r0, #164	; 0xa4
 8004d8c:	e7fb      	b.n	8004d86 <SX1276OnDio0Irq+0x206>
            TimerStop( &TxTimeoutTimer );
 8004d8e:	4d0b      	ldr	r5, [pc, #44]	; (8004dbc <SX1276OnDio0Irq+0x23c>)
 8004d90:	0028      	movs	r0, r5
 8004d92:	301c      	adds	r0, #28
 8004d94:	f002 f9b2 	bl	80070fc <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8004d98:	7963      	ldrb	r3, [r4, #5]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d103      	bne.n	8004da6 <SX1276OnDio0Irq+0x226>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004d9e:	2108      	movs	r1, #8
 8004da0:	2012      	movs	r0, #18
 8004da2:	f7fe ff60 	bl	8003c66 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004daa:	682b      	ldr	r3, [r5, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d100      	bne.n	8004db2 <SX1276OnDio0Irq+0x232>
 8004db0:	e6f2      	b.n	8004b98 <SX1276OnDio0Irq+0x18>
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	e714      	b.n	8004be0 <SX1276OnDio0Irq+0x60>
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	20000294 	.word	0x20000294
 8004dbc:	20000314 	.word	0x20000314
 8004dc0:	20000348 	.word	0x20000348
 8004dc4:	1f4add40 	.word	0x1f4add40

08004dc8 <SX1276Send>:
{
 8004dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dca:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8004dcc:	4c5f      	ldr	r4, [pc, #380]	; (8004f4c <SX1276Send+0x184>)
{
 8004dce:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8004dd0:	7965      	ldrb	r5, [r4, #5]
{
 8004dd2:	1ddf      	adds	r7, r3, #7
 8004dd4:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	d01c      	beq.n	8004e14 <SX1276Send+0x4c>
 8004dda:	2d01      	cmp	r5, #1
 8004ddc:	d040      	beq.n	8004e60 <SX1276Send+0x98>
 8004dde:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 8004de0:	4d5b      	ldr	r5, [pc, #364]	; (8004f50 <SX1276Send+0x188>)
 8004de2:	1d28      	adds	r0, r5, #4
 8004de4:	f002 f98a 	bl	80070fc <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8004de8:	0028      	movs	r0, r5
 8004dea:	0031      	movs	r1, r6
 8004dec:	301c      	adds	r0, #28
 8004dee:	f002 fa0f 	bl	8007210 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8004df2:	7963      	ldrb	r3, [r4, #5]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d100      	bne.n	8004dfa <SX1276Send+0x32>
 8004df8:	e071      	b.n	8004ede <SX1276Send+0x116>
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d100      	bne.n	8004e00 <SX1276Send+0x38>
 8004dfe:	e087      	b.n	8004f10 <SX1276Send+0x148>
    TimerStart( &TxTimeoutTimer );
 8004e00:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8004e02:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8004e04:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 8004e06:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8004e08:	f002 f9ca 	bl	80071a0 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8004e0c:	2003      	movs	r0, #3
 8004e0e:	f7ff f817 	bl	8003e40 <SX1276SetOpMode.part.0>
}
 8004e12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 8004e14:	7839      	ldrb	r1, [r7, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004e16:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004e18:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8004e1a:	1ce3      	adds	r3, r4, #3
 8004e1c:	7fd8      	ldrb	r0, [r3, #31]
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d11a      	bne.n	8004e58 <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 8004e22:	2201      	movs	r2, #1
 8004e24:	0039      	movs	r1, r7
 8004e26:	f7fe ff06 	bl	8003c36 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8004e2a:	783a      	ldrb	r2, [r7, #0]
 8004e2c:	1e53      	subs	r3, r2, #1
 8004e2e:	2b3f      	cmp	r3, #63	; 0x3f
 8004e30:	d905      	bls.n	8004e3e <SX1276Send+0x76>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8004e32:	b292      	uxth	r2, r2
 8004e34:	0031      	movs	r1, r6
 8004e36:	4847      	ldr	r0, [pc, #284]	; (8004f54 <SX1276Send+0x18c>)
 8004e38:	f002 fbcc 	bl	80075d4 <UTIL_MEM_cpy_8>
 8004e3c:	2220      	movs	r2, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004e3e:	0025      	movs	r5, r4
    SX1276WriteBuffer( 0, buffer, size );
 8004e40:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004e42:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8004e44:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004e46:	702a      	strb	r2, [r5, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8004e48:	f7fe fef5 	bl	8003c36 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004e4c:	782b      	ldrb	r3, [r5, #0]
 8004e4e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004e50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 8004e56:	e7c3      	b.n	8004de0 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8004e58:	2032      	movs	r0, #50	; 0x32
 8004e5a:	f7fe ff04 	bl	8003c66 <SX1276Write>
 8004e5e:	e7e4      	b.n	8004e2a <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004e60:	0023      	movs	r3, r4
 8004e62:	3355      	adds	r3, #85	; 0x55
 8004e64:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004e66:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02d      	beq.n	8004ec8 <SX1276Send+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004e6c:	f7fe ff46 	bl	8003cfc <SX1276Read>
 8004e70:	2341      	movs	r3, #65	; 0x41
 8004e72:	4398      	bics	r0, r3
 8004e74:	b2c1      	uxtb	r1, r0
 8004e76:	2033      	movs	r0, #51	; 0x33
 8004e78:	f7fe fef5 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004e7c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004e7e:	203b      	movs	r0, #59	; 0x3b
 8004e80:	f7fe fef1 	bl	8003c66 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004e84:	0023      	movs	r3, r4
 8004e86:	783d      	ldrb	r5, [r7, #0]
 8004e88:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004e8a:	0029      	movs	r1, r5
 8004e8c:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004e8e:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004e90:	f7fe fee9 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8004e94:	2100      	movs	r1, #0
 8004e96:	200e      	movs	r0, #14
 8004e98:	f7fe fee5 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	200d      	movs	r0, #13
 8004ea0:	f7fe fee1 	bl	8003c66 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f7fe ff29 	bl	8003cfc <SX1276Read>
 8004eaa:	23f8      	movs	r3, #248	; 0xf8
 8004eac:	4398      	bics	r0, r3
 8004eae:	d104      	bne.n	8004eba <SX1276Send+0xf2>
                SX1276SetStby( );
 8004eb0:	f7fe fff2 	bl	8003e98 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7fc f9cf 	bl	8001258 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 8004eba:	0031      	movs	r1, r6
 8004ebc:	002a      	movs	r2, r5
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fe feb9 	bl	8003c36 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8004ec4:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 8004ec6:	e78b      	b.n	8004de0 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004ec8:	f7fe ff18 	bl	8003cfc <SX1276Read>
 8004ecc:	2341      	movs	r3, #65	; 0x41
 8004ece:	4398      	bics	r0, r3
 8004ed0:	4305      	orrs	r5, r0
 8004ed2:	b2e9      	uxtb	r1, r5
 8004ed4:	2033      	movs	r0, #51	; 0x33
 8004ed6:	f7fe fec6 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004eda:	211d      	movs	r1, #29
 8004edc:	e7cf      	b.n	8004e7e <SX1276Send+0xb6>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004ede:	2040      	movs	r0, #64	; 0x40
 8004ee0:	f7fe ff0c 	bl	8003cfc <SX1276Read>
 8004ee4:	2103      	movs	r1, #3
 8004ee6:	4001      	ands	r1, r0
 8004ee8:	2040      	movs	r0, #64	; 0x40
 8004eea:	f7fe febc 	bl	8003c66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004eee:	2041      	movs	r0, #65	; 0x41
 8004ef0:	f7fe ff04 	bl	8003cfc <SX1276Read>
 8004ef4:	213e      	movs	r1, #62	; 0x3e
 8004ef6:	4001      	ands	r1, r0
 8004ef8:	2041      	movs	r0, #65	; 0x41
 8004efa:	f7fe feb4 	bl	8003c66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004efe:	2035      	movs	r0, #53	; 0x35
 8004f00:	f7fe fefc 	bl	8003cfc <SX1276Read>
 8004f04:	233f      	movs	r3, #63	; 0x3f
 8004f06:	4018      	ands	r0, r3
 8004f08:	0023      	movs	r3, r4
 8004f0a:	333e      	adds	r3, #62	; 0x3e
 8004f0c:	7018      	strb	r0, [r3, #0]
        break;
 8004f0e:	e777      	b.n	8004e00 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004f10:	0023      	movs	r3, r4
 8004f12:	3353      	adds	r3, #83	; 0x53
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00e      	beq.n	8004f38 <SX1276Send+0x170>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004f1a:	21f5      	movs	r1, #245	; 0xf5
 8004f1c:	2011      	movs	r0, #17
 8004f1e:	f7fe fea2 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8004f22:	2040      	movs	r0, #64	; 0x40
 8004f24:	f7fe feea 	bl	8003cfc <SX1276Read>
 8004f28:	2333      	movs	r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004f2a:	0001      	movs	r1, r0
 8004f2c:	2040      	movs	r0, #64	; 0x40
 8004f2e:	4019      	ands	r1, r3
 8004f30:	4301      	orrs	r1, r0
 8004f32:	f7fe fe98 	bl	8003c66 <SX1276Write>
 8004f36:	e763      	b.n	8004e00 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004f38:	21f7      	movs	r1, #247	; 0xf7
 8004f3a:	2011      	movs	r0, #17
 8004f3c:	f7fe fe93 	bl	8003c66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004f40:	2040      	movs	r0, #64	; 0x40
 8004f42:	f7fe fedb 	bl	8003cfc <SX1276Read>
 8004f46:	233f      	movs	r3, #63	; 0x3f
 8004f48:	e7ef      	b.n	8004f2a <SX1276Send+0x162>
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	20000294 	.word	0x20000294
 8004f50:	20000314 	.word	0x20000314
 8004f54:	20000348 	.word	0x20000348

08004f58 <SX1276OnDio1Irq>:
{
 8004f58:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004f5a:	4c39      	ldr	r4, [pc, #228]	; (8005040 <SX1276OnDio1Irq+0xe8>)
 8004f5c:	7925      	ldrb	r5, [r4, #4]
 8004f5e:	2d01      	cmp	r5, #1
 8004f60:	d002      	beq.n	8004f68 <SX1276OnDio1Irq+0x10>
 8004f62:	2d02      	cmp	r5, #2
 8004f64:	d050      	beq.n	8005008 <SX1276OnDio1Irq+0xb0>
}
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8004f68:	7963      	ldrb	r3, [r4, #5]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <SX1276OnDio1Irq+0x46>
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d1f9      	bne.n	8004f66 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8004f72:	f7fc f8f3 	bl	800115c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d0f5      	beq.n	8004f66 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8004f7a:	4d32      	ldr	r5, [pc, #200]	; (8005044 <SX1276OnDio1Irq+0xec>)
 8004f7c:	1d28      	adds	r0, r5, #4
 8004f7e:	f002 f8bd 	bl	80070fc <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	2012      	movs	r0, #18
 8004f86:	f7fe fe6e 	bl	8003c66 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0e8      	beq.n	8004f66 <SX1276OnDio1Irq+0xe>
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0e5      	beq.n	8004f66 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8004f9a:	4798      	blx	r3
 8004f9c:	e7e3      	b.n	8004f66 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8004f9e:	f7fc f8dd 	bl	800115c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d0df      	beq.n	8004f66 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	3068      	adds	r0, #104	; 0x68
 8004faa:	f002 f8a7 	bl	80070fc <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004fae:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004fb0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004fb6:	1ce3      	adds	r3, r4, #3
 8004fb8:	7fd8      	ldrb	r0, [r3, #31]
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d119      	bne.n	8004ff2 <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	002a      	movs	r2, r5
 8004fc2:	313a      	adds	r1, #58	; 0x3a
 8004fc4:	f7fe fe82 	bl	8003ccc <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004fc8:	0025      	movs	r5, r4
 8004fca:	353e      	adds	r5, #62	; 0x3e
 8004fcc:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8004fce:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fd0:	491d      	ldr	r1, [pc, #116]	; (8005048 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004fd2:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fd4:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004fd6:	1a1b      	subs	r3, r3, r0
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	db0f      	blt.n	8004ffc <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fdc:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f7fe fe73 	bl	8003ccc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8004fe6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004fe8:	782b      	ldrb	r3, [r5, #0]
 8004fea:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004fec:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004fee:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8004ff0:	e7b9      	b.n	8004f66 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004ff2:	2032      	movs	r0, #50	; 0x32
 8004ff4:	f7fe fe82 	bl	8003cfc <SX1276Read>
 8004ff8:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004ffa:	e7e5      	b.n	8004fc8 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	f7fe fe64 	bl	8003ccc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005004:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8005006:	e7f2      	b.n	8004fee <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8005008:	7965      	ldrb	r5, [r4, #5]
 800500a:	2d00      	cmp	r5, #0
 800500c:	d1ab      	bne.n	8004f66 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800500e:	f7fc f8a5 	bl	800115c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8005012:	2801      	cmp	r0, #1
 8005014:	d0a7      	beq.n	8004f66 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005016:	0026      	movs	r6, r4
 8005018:	363f      	adds	r6, #63	; 0x3f
 800501a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800501c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800501e:	490a      	ldr	r1, [pc, #40]	; (8005048 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005020:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005022:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005024:	1a1b      	subs	r3, r3, r0
 8005026:	4293      	cmp	r3, r2
 8005028:	dd05      	ble.n	8005036 <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 800502a:	0028      	movs	r0, r5
 800502c:	f7fe fe03 	bl	8003c36 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005030:	7833      	ldrb	r3, [r6, #0]
 8005032:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8005034:	e7da      	b.n	8004fec <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 8005036:	0028      	movs	r0, r5
 8005038:	b2da      	uxtb	r2, r3
 800503a:	f7fe fdfc 	bl	8003c36 <SX1276WriteBuffer>
 800503e:	e7e1      	b.n	8005004 <SX1276OnDio1Irq+0xac>
 8005040:	20000294 	.word	0x20000294
 8005044:	20000314 	.word	0x20000314
 8005048:	20000348 	.word	0x20000348

0800504c <_Cb_Timer_Lora_Tx>:
}

static uint8_t _Cb_Timer_Lora_Tx(uint8_t event)
{
	#ifdef DEVICE_TYPE_STATION
		sModem.Mode = _MODE_SLEEP;
 800504c:	2200      	movs	r2, #0
 800504e:	4b02      	ldr	r3, [pc, #8]	; (8005058 <_Cb_Timer_Lora_Tx+0xc>)
		UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
		UTIL_TIMER_Start (&TimerLoraTx);
		USER_Payload_Node_Single(sModem.TimeDelaySingle_u32);
	#endif
    return 1;
}
 8005050:	2001      	movs	r0, #1
		sModem.Mode = _MODE_SLEEP;
 8005052:	765a      	strb	r2, [r3, #25]
}
 8005054:	4770      	bx	lr
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	200000c0 	.word	0x200000c0

0800505c <_Cb_Idle_Handler>:
	}
	return 1;
}

static uint8_t _Cb_Idle_Handler(uint8_t event)
{
 800505c:	b510      	push	{r4, lr}
	#ifdef DEVICE_TYPE_STATION
		fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 800505e:	2103      	movs	r1, #3
 8005060:	4803      	ldr	r0, [pc, #12]	; (8005070 <_Cb_Idle_Handler+0x14>)
 8005062:	f001 fc7a 	bl	800695a <fevent_enable>
		LED_TOGGLE(__LED_MODE);
 8005066:	2000      	movs	r0, #0
 8005068:	f002 fa32 	bl	80074d0 <LED_TOGGLE>
				}
			}
		}
	#endif
	return 1;
}
 800506c:	2001      	movs	r0, #1
 800506e:	bd10      	pop	{r4, pc}
 8005070:	20000024 	.word	0x20000024

08005074 <_Cb_Timer_Start>:
{
 8005074:	b510      	push	{r4, lr}
	UTIL_TIMER_IRQ_Handler();
 8005076:	f002 f8e7 	bl	8007248 <UTIL_TIMER_IRQ_Handler>
}
 800507a:	2001      	movs	r0, #1
 800507c:	bd10      	pop	{r4, pc}
	...

08005080 <AppCom_IRQ_Timer_CallBack>:
{
 8005080:	b510      	push	{r4, lr}
    fevent_active(sEventAppCom, _EVENT_TIMER_START);
 8005082:	2100      	movs	r1, #0
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <AppCom_IRQ_Timer_CallBack+0xc>)
 8005086:	f001 fc61 	bl	800694c <fevent_active>
}
 800508a:	bd10      	pop	{r4, pc}
 800508c:	20000024 	.word	0x20000024

08005090 <_Cb_Uart_Debug>:
{
 8005090:	b510      	push	{r4, lr}
	if (MarkFirstRecvUart == 0)
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <_Cb_Uart_Debug+0x38>)
{
 8005094:	0001      	movs	r1, r0
		LastLengthRecv = sUartDebug.Length_u16;
 8005096:	4c0d      	ldr	r4, [pc, #52]	; (80050cc <_Cb_Uart_Debug+0x3c>)
	if (MarkFirstRecvUart == 0)
 8005098:	7818      	ldrb	r0, [r3, #0]
		LastLengthRecv = sUartDebug.Length_u16;
 800509a:	88a2      	ldrh	r2, [r4, #4]
	if (MarkFirstRecvUart == 0)
 800509c:	2800      	cmp	r0, #0
 800509e:	d106      	bne.n	80050ae <_Cb_Uart_Debug+0x1e>
		MarkFirstRecvUart = 1;
 80050a0:	3001      	adds	r0, #1
 80050a2:	7018      	strb	r0, [r3, #0]
			fevent_enable(sEventAppCom, event);
 80050a4:	480a      	ldr	r0, [pc, #40]	; (80050d0 <_Cb_Uart_Debug+0x40>)
			LastLengthRecv = sUartDebug.Length_u16;
 80050a6:	805a      	strh	r2, [r3, #2]
			fevent_enable(sEventAppCom, event);
 80050a8:	f001 fc57 	bl	800695a <fevent_enable>
 80050ac:	e00a      	b.n	80050c4 <_Cb_Uart_Debug+0x34>
		if (sUartDebug.Length_u16 == LastLengthRecv)
 80050ae:	8858      	ldrh	r0, [r3, #2]
 80050b0:	4290      	cmp	r0, r2
 80050b2:	d1f7      	bne.n	80050a4 <_Cb_Uart_Debug+0x14>
			MarkFirstRecvUart = 0;
 80050b4:	2200      	movs	r2, #0
			Check_AT_User(&sUartDebug);
 80050b6:	0020      	movs	r0, r4
			MarkFirstRecvUart = 0;
 80050b8:	701a      	strb	r2, [r3, #0]
			Check_AT_User(&sUartDebug);
 80050ba:	f000 fe5b 	bl	8005d74 <Check_AT_User>
			Reset_Buff(&sUartDebug);
 80050be:	0020      	movs	r0, r4
 80050c0:	f002 f900 	bl	80072c4 <Reset_Buff>
}
 80050c4:	2001      	movs	r0, #1
 80050c6:	bd10      	pop	{r4, pc}
 80050c8:	20000448 	.word	0x20000448
 80050cc:	200000b8 	.word	0x200000b8
 80050d0:	20000024 	.word	0x20000024

080050d4 <AppCom_Task>:
	uint8_t Result = 0;
 80050d4:	2000      	movs	r0, #0
{
 80050d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < _EVENT_END_COMM; i++)
 80050d8:	0005      	movs	r5, r0
            Result = 1;
 80050da:	2701      	movs	r7, #1
 80050dc:	4c0f      	ldr	r4, [pc, #60]	; (800511c <AppCom_Task+0x48>)
		if (sEventAppCom[i].e_status == 1)
 80050de:	7866      	ldrb	r6, [r4, #1]
 80050e0:	2e01      	cmp	r6, #1
 80050e2:	d10b      	bne.n	80050fc <AppCom_Task+0x28>
			if ((sEventAppCom[i].e_systick == 0) ||
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10e      	bne.n	8005108 <AppCom_Task+0x34>
                sEventAppCom[i].e_status = 0;  //Disable event
 80050ea:	2300      	movs	r3, #0
 80050ec:	7063      	strb	r3, [r4, #1]
				sEventAppCom[i].e_systick = HAL_GetTick();
 80050ee:	f7fc f8ad 	bl	800124c <HAL_GetTick>
				sEventAppCom[i].e_function_handler(i);
 80050f2:	68e3      	ldr	r3, [r4, #12]
				sEventAppCom[i].e_systick = HAL_GetTick();
 80050f4:	6060      	str	r0, [r4, #4]
				sEventAppCom[i].e_function_handler(i);
 80050f6:	0028      	movs	r0, r5
 80050f8:	4798      	blx	r3
            Result = 1;
 80050fa:	0030      	movs	r0, r6
	for (i = 0; i < _EVENT_END_COMM; i++)
 80050fc:	3501      	adds	r5, #1
 80050fe:	b2ed      	uxtb	r5, r5
 8005100:	3410      	adds	r4, #16
 8005102:	2d04      	cmp	r5, #4
 8005104:	d1eb      	bne.n	80050de <AppCom_Task+0xa>
}
 8005106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					((HAL_GetTick() - sEventAppCom[i].e_systick)  >=  sEventAppCom[i].e_period))
 8005108:	f7fc f8a0 	bl	800124c <HAL_GetTick>
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	1ac0      	subs	r0, r0, r3
			if ((sEventAppCom[i].e_systick == 0) ||
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	4298      	cmp	r0, r3
 8005114:	d2e9      	bcs.n	80050ea <AppCom_Task+0x16>
            Result = 1;
 8005116:	0038      	movs	r0, r7
 8005118:	e7f0      	b.n	80050fc <AppCom_Task+0x28>
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	20000024 	.word	0x20000024

08005120 <AppCom_Cacul_Random_Delay>:
{
 8005120:	b570      	push	{r4, r5, r6, lr}
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 8005122:	4c11      	ldr	r4, [pc, #68]	; (8005168 <AppCom_Cacul_Random_Delay+0x48>)
 8005124:	88a5      	ldrh	r5, [r4, #4]
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 8005126:	6823      	ldr	r3, [r4, #0]
    uint16_t Index = sModem.sDCU_id.Length_u16 - 1;
 8005128:	3d01      	subs	r5, #1
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 800512a:	b2ad      	uxth	r5, r5
 800512c:	5d58      	ldrb	r0, [r3, r5]
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <AppCom_Cacul_Random_Delay+0x4c>)
    sModem.TimeDelayTx_u32 = (*(sModem.sDCU_id.Data_a8 + Index) - 0x30);
 8005130:	3830      	subs	r0, #48	; 0x30
	sModem.TimeDelayTx_u32 = sModem.TimeDelayTx_u32 % sFreqInfor.FreqWakeup_u32;
 8005132:	8859      	ldrh	r1, [r3, #2]
 8005134:	f7fb f894 	bl	8000260 <__aeabi_uidivmod>
	if(sModem.TimeDelayTx_u32 == 0){
 8005138:	2900      	cmp	r1, #0
 800513a:	d100      	bne.n	800513e <AppCom_Cacul_Random_Delay+0x1e>
		sModem.TimeDelayTx_u32 += 10;
 800513c:	310a      	adds	r1, #10
	sModem.TimeDelayTx_u32 *= 1000;
 800513e:	23fa      	movs	r3, #250	; 0xfa
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	434b      	muls	r3, r1
 8005144:	6423      	str	r3, [r4, #64]	; 0x40
	sModem.TimeDelaySingle_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_SINGLE_DELAY;
 8005146:	23fa      	movs	r3, #250	; 0xfa
 8005148:	015b      	lsls	r3, r3, #5
 800514a:	434b      	muls	r3, r1
 800514c:	6463      	str	r3, [r4, #68]	; 0x44
	sModem.TimeDelayCalib_u32 = sModem.TimeDelayTx_u32 * DEFAULT_TIME_CALIB_DELAY;
 800514e:	64a3      	str	r3, [r4, #72]	; 0x48
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 8005150:	68a3      	ldr	r3, [r4, #8]
 8005152:	4a07      	ldr	r2, [pc, #28]	; (8005170 <AppCom_Cacul_Random_Delay+0x50>)
 8005154:	5d5b      	ldrb	r3, [r3, r5]
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 8005156:	2004      	movs	r0, #4
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 8005158:	3b30      	subs	r3, #48	; 0x30
 800515a:	435a      	muls	r2, r3
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 800515c:	4905      	ldr	r1, [pc, #20]	; (8005174 <AppCom_Cacul_Random_Delay+0x54>)
	sModem.TimeDelayNetwork_u32 = (*(sModem.sNET_id.Data_a8 + Index) - 0x30) * 1000 * DEFAULT_TIME_NETWORK_DELAY;
 800515e:	64e2      	str	r2, [r4, #76]	; 0x4c
	LOG(LOG_INFOR, "Network delay: %d", sModem.TimeDelayNetwork_u32);
 8005160:	f002 f8e8 	bl	8007334 <LOG>
}
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	200000c0 	.word	0x200000c0
 800516c:	20000114 	.word	0x20000114
 8005170:	00001388 	.word	0x00001388
 8005174:	080085ee 	.word	0x080085ee

08005178 <AppCom_Init>:
    	sModem.TypeModem_u8 = _LORA_STATION;
 8005178:	2302      	movs	r3, #2
{
 800517a:	b510      	push	{r4, lr}
    	sModem.TypeModem_u8 = _LORA_STATION;
 800517c:	4c0b      	ldr	r4, [pc, #44]	; (80051ac <AppCom_Init+0x34>)
    pModemProcessIRQTimer = AppCom_IRQ_Timer_CallBack;
 800517e:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <AppCom_Init+0x38>)
    	sModem.TypeModem_u8 = _LORA_STATION;
 8005180:	7623      	strb	r3, [r4, #24]
    pModemProcessIRQTimer = AppCom_IRQ_Timer_CallBack;
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <AppCom_Init+0x3c>)
 8005184:	601a      	str	r2, [r3, #0]
    sLPMFeatureHandler = &sModemLPMHandler;
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <AppCom_Init+0x40>)
 8005188:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <AppCom_Init+0x44>)
 800518a:	601a      	str	r2, [r3, #0]
    AppCom_Cacul_Random_Delay();
 800518c:	f7ff ffc8 	bl	8005120 <AppCom_Cacul_Random_Delay>
    LOG_Array(LOG_INFOR, sModem.sDCU_id.Data_a8, sModem.sDCU_id.Length_u16, "DCU ID:");
 8005190:	88a2      	ldrh	r2, [r4, #4]
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	2004      	movs	r0, #4
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <AppCom_Init+0x48>)
 8005198:	f002 f916 	bl	80073c8 <LOG_Array>
    LOG_Array(LOG_INFOR, sModem.sNET_id.Data_a8, sModem.sNET_id.Length_u16, "NET ID:");
 800519c:	2004      	movs	r0, #4
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <AppCom_Init+0x4c>)
 80051a0:	89a2      	ldrh	r2, [r4, #12]
 80051a2:	68a1      	ldr	r1, [r4, #8]
 80051a4:	f002 f910 	bl	80073c8 <LOG_Array>
}
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	200000c0 	.word	0x200000c0
 80051b0:	08005081 	.word	0x08005081
 80051b4:	20001364 	.word	0x20001364
 80051b8:	20001314 	.word	0x20001314
 80051bc:	20000118 	.word	0x20000118
 80051c0:	08008600 	.word	0x08008600
 80051c4:	08008608 	.word	0x08008608

080051c8 <_Cb_Active_Lora_Tx_Event>:

void _Cb_Active_Lora_Tx_Event(void *context)
{
 80051c8:	b510      	push	{r4, lr}
	 fevent_active(sEventAppCom, _EVENT_TIMER_LORA_TX);
 80051ca:	2101      	movs	r1, #1
 80051cc:	4801      	ldr	r0, [pc, #4]	; (80051d4 <_Cb_Active_Lora_Tx_Event+0xc>)
 80051ce:	f001 fbbd 	bl	800694c <fevent_active>
}
 80051d2:	bd10      	pop	{r4, pc}
 80051d4:	20000024 	.word	0x20000024

080051d8 <_Cb_Lora_Tx>:
    return 1;
}
static uint8_t _Cb_Lora_Tx(uint8_t event)
{
    return 1;
}
 80051d8:	2001      	movs	r0, #1
 80051da:	4770      	bx	lr

080051dc <_Cb_Timer_Lora_Tx_Again>:
}

static void _Cb_Timer_Lora_Tx_Again(void *context)
{

}
 80051dc:	4770      	bx	lr
	...

080051e0 <_Cb_Lora_IRQ>:
{
 80051e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Radio.Sleep();
 80051e2:	4d34      	ldr	r5, [pc, #208]	; (80052b4 <_Cb_Lora_IRQ+0xd4>)
 80051e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80051e6:	4798      	blx	r3
    switch (State)
 80051e8:	4c33      	ldr	r4, [pc, #204]	; (80052b8 <_Cb_Lora_IRQ+0xd8>)
 80051ea:	7820      	ldrb	r0, [r4, #0]
 80051ec:	2804      	cmp	r0, #4
 80051ee:	d81d      	bhi.n	800522c <_Cb_Lora_IRQ+0x4c>
 80051f0:	f7fa ff9c 	bl	800012c <__gnu_thumb1_case_uqi>
 80051f4:	1e583003 	.word	0x1e583003
 80051f8:	2b          	.byte	0x2b
 80051f9:	00          	.byte	0x00
				sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 80051fa:	2202      	movs	r2, #2
				sModem.TimeTrySendAgain = 0;
 80051fc:	2600      	movs	r6, #0
				sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <_Cb_Lora_IRQ+0xdc>)
				Reset_Buff(&sModem.sBackup);
 8005200:	482f      	ldr	r0, [pc, #188]	; (80052c0 <_Cb_Lora_IRQ+0xe0>)
				sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8005202:	849a      	strh	r2, [r3, #36]	; 0x24
				sModem.TimeTrySendAgain = 0;
 8005204:	3307      	adds	r3, #7
 8005206:	77de      	strb	r6, [r3, #31]
				Reset_Buff(&sModem.sBackup);
 8005208:	f002 f85c 	bl	80072c4 <Reset_Buff>
	        	LOG(LOG_DEBUG, "OnRxDone");
 800520c:	2001      	movs	r0, #1
 800520e:	492d      	ldr	r1, [pc, #180]	; (80052c4 <_Cb_Lora_IRQ+0xe4>)
 8005210:	f002 f890 	bl	8007334 <LOG>
	        	if (Protocol_Extract_Rx(BufferRx, RxBufferSize, 0, &sLoraVar.sFrameRx) == TRUE)
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <_Cb_Lora_IRQ+0xe8>)
 8005216:	0032      	movs	r2, r6
 8005218:	78a1      	ldrb	r1, [r4, #2]
 800521a:	482c      	ldr	r0, [pc, #176]	; (80052cc <_Cb_Lora_IRQ+0xec>)
 800521c:	3310      	adds	r3, #16
 800521e:	f001 fa01 	bl	8006624 <Protocol_Extract_Rx>
 8005222:	2801      	cmp	r0, #1
 8005224:	d002      	beq.n	800522c <_Cb_Lora_IRQ+0x4c>
				Radio.Rx(RX_TIMEOUT_VALUE);
 8005226:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005228:	4829      	ldr	r0, [pc, #164]	; (80052d0 <_Cb_Lora_IRQ+0xf0>)
 800522a:	4798      	blx	r3
}
 800522c:	2001      	movs	r0, #1
 800522e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	sModem.RxTimeBefore = SysTimeGet();
 8005230:	466e      	mov	r6, sp
        	LOG(LOG_DEBUG, "OnTxDone");
 8005232:	4928      	ldr	r1, [pc, #160]	; (80052d4 <_Cb_Lora_IRQ+0xf4>)
 8005234:	2001      	movs	r0, #1
 8005236:	f002 f87d 	bl	8007334 <LOG>
        	sModem.RxTimeBefore = SysTimeGet();
 800523a:	4c20      	ldr	r4, [pc, #128]	; (80052bc <_Cb_Lora_IRQ+0xdc>)
 800523c:	0030      	movs	r0, r6
 800523e:	3428      	adds	r4, #40	; 0x28
 8005240:	f002 f9d6 	bl	80075f0 <SysTimeGet>
 8005244:	ce06      	ldmia	r6!, {r1, r2}
 8005246:	c406      	stmia	r4!, {r1, r2}
 8005248:	e7ed      	b.n	8005226 <_Cb_Lora_IRQ+0x46>
        	LOG(LOG_DEBUG, "OnTxTimeOut");
 800524a:	2001      	movs	r0, #1
 800524c:	4922      	ldr	r1, [pc, #136]	; (80052d8 <_Cb_Lora_IRQ+0xf8>)
 800524e:	f002 f871 	bl	8007334 <LOG>
            break;
 8005252:	e7eb      	b.n	800522c <_Cb_Lora_IRQ+0x4c>
        	LOG(LOG_DEBUG, "OnRxTimeOut");
 8005254:	4921      	ldr	r1, [pc, #132]	; (80052dc <_Cb_Lora_IRQ+0xfc>)
        	LOG(LOG_DEBUG, "OnRxError");
 8005256:	2001      	movs	r0, #1
 8005258:	f002 f86c 	bl	8007334 <LOG>
				if (sModem.bNeedConfirm == DATA_CONFIRMED_DOWN)
 800525c:	4c17      	ldr	r4, [pc, #92]	; (80052bc <_Cb_Lora_IRQ+0xdc>)
 800525e:	1d63      	adds	r3, r4, #5
 8005260:	7fd8      	ldrb	r0, [r3, #31]
 8005262:	2804      	cmp	r0, #4
 8005264:	d120      	bne.n	80052a8 <_Cb_Lora_IRQ+0xc8>
					LOG(LOG_INFOR, "Time retry: %d", sModem.TimeTrySendAgain);
 8005266:	1de6      	adds	r6, r4, #7
 8005268:	7ff2      	ldrb	r2, [r6, #31]
 800526a:	491d      	ldr	r1, [pc, #116]	; (80052e0 <_Cb_Lora_IRQ+0x100>)
 800526c:	f002 f862 	bl	8007334 <LOG>
					if (sModem.TimeTrySendAgain < 2)
 8005270:	7ff3      	ldrb	r3, [r6, #31]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d80b      	bhi.n	800528e <_Cb_Lora_IRQ+0xae>
						Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 8005276:	8c21      	ldrh	r1, [r4, #32]
 8005278:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800527a:	69e0      	ldr	r0, [r4, #28]
 800527c:	b2c9      	uxtb	r1, r1
 800527e:	4798      	blx	r3
						LED_OFF(__LED_MEASURE);
 8005280:	2001      	movs	r0, #1
 8005282:	f002 f915 	bl	80074b0 <LED_OFF>
						sModem.TimeTrySendAgain++;
 8005286:	7ff3      	ldrb	r3, [r6, #31]
 8005288:	3301      	adds	r3, #1
 800528a:	77f3      	strb	r3, [r6, #31]
 800528c:	e7ce      	b.n	800522c <_Cb_Lora_IRQ+0x4c>
						sModem.Mode = 0;
 800528e:	2200      	movs	r2, #0
						sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8005290:	2102      	movs	r1, #2
						sModem.Mode = 0;
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <_Cb_Lora_IRQ+0xdc>)
						Reset_Buff(&sModem.sBackup);
 8005294:	480a      	ldr	r0, [pc, #40]	; (80052c0 <_Cb_Lora_IRQ+0xe0>)
						sModem.Mode = 0;
 8005296:	765a      	strb	r2, [r3, #25]
						sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8005298:	8499      	strh	r1, [r3, #36]	; 0x24
						sModem.TimeTrySendAgain = 0;
 800529a:	3307      	adds	r3, #7
 800529c:	77da      	strb	r2, [r3, #31]
						Reset_Buff(&sModem.sBackup);
 800529e:	f002 f811 	bl	80072c4 <Reset_Buff>
 80052a2:	e7c3      	b.n	800522c <_Cb_Lora_IRQ+0x4c>
        	LOG(LOG_DEBUG, "OnRxError");
 80052a4:	490f      	ldr	r1, [pc, #60]	; (80052e4 <_Cb_Lora_IRQ+0x104>)
 80052a6:	e7d6      	b.n	8005256 <_Cb_Lora_IRQ+0x76>
					Radio.Rx(RX_TIMEOUT_VALUE);
 80052a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80052aa:	4809      	ldr	r0, [pc, #36]	; (80052d0 <_Cb_Lora_IRQ+0xf0>)
 80052ac:	4798      	blx	r3
					sModem.Mode = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	7663      	strb	r3, [r4, #25]
 80052b2:	e7bb      	b.n	800522c <_Cb_Lora_IRQ+0x4c>
 80052b4:	08008404 	.word	0x08008404
 80052b8:	20000464 	.word	0x20000464
 80052bc:	200000c0 	.word	0x200000c0
 80052c0:	200000dc 	.word	0x200000dc
 80052c4:	08008610 	.word	0x08008610
 80052c8:	20000064 	.word	0x20000064
 80052cc:	200007b4 	.word	0x200007b4
 80052d0:	0037b1d0 	.word	0x0037b1d0
 80052d4:	08008619 	.word	0x08008619
 80052d8:	08008622 	.word	0x08008622
 80052dc:	0800862e 	.word	0x0800862e
 80052e0:	0800863a 	.word	0x0800863a
 80052e4:	08008649 	.word	0x08008649

080052e8 <_Cb_Timer_Send_Event>:

static void _Cb_Timer_Send_Event(void *context)
{
 80052e8:	b510      	push	{r4, lr}
	Radio.Send(sModem.sBackup.Data_a8, sModem.sBackup.Length_u16);
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <_Cb_Timer_Send_Event+0x18>)
 80052ec:	4a05      	ldr	r2, [pc, #20]	; (8005304 <_Cb_Timer_Send_Event+0x1c>)
 80052ee:	8c19      	ldrh	r1, [r3, #32]
 80052f0:	69d8      	ldr	r0, [r3, #28]
 80052f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052f4:	b2c9      	uxtb	r1, r1
 80052f6:	4790      	blx	r2
    LED_OFF(__LED_MEASURE);
 80052f8:	2001      	movs	r0, #1
 80052fa:	f002 f8d9 	bl	80074b0 <LED_OFF>
}
 80052fe:	bd10      	pop	{r4, pc}
 8005300:	200000c0 	.word	0x200000c0
 8005304:	08008404 	.word	0x08008404

08005308 <OnRxError>:
    Radio.Sleep();
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <OnRxError+0x1c>)
{
 800530a:	b510      	push	{r4, lr}
    Radio.Sleep();
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4798      	blx	r3
    State = RX_ERROR;
 8005310:	2202      	movs	r2, #2
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005312:	4805      	ldr	r0, [pc, #20]	; (8005328 <OnRxError+0x20>)
    State = RX_ERROR;
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <OnRxError+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005316:	2101      	movs	r1, #1
 8005318:	3024      	adds	r0, #36	; 0x24
    State = RX_ERROR;
 800531a:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800531c:	f001 fb16 	bl	800694c <fevent_active>
}
 8005320:	bd10      	pop	{r4, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	08008404 	.word	0x08008404
 8005328:	20000064 	.word	0x20000064
 800532c:	20000464 	.word	0x20000464

08005330 <OnRxTimeout>:
    Radio.Sleep();
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <OnRxTimeout+0x18>)
{
 8005332:	b510      	push	{r4, lr}
    Radio.Sleep();
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	4798      	blx	r3
    State = RX_TIMEOUT;
 8005338:	2101      	movs	r1, #1
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800533a:	4804      	ldr	r0, [pc, #16]	; (800534c <OnRxTimeout+0x1c>)
    State = RX_TIMEOUT;
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <OnRxTimeout+0x20>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800533e:	3024      	adds	r0, #36	; 0x24
    State = RX_TIMEOUT;
 8005340:	7019      	strb	r1, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005342:	f001 fb03 	bl	800694c <fevent_active>
}
 8005346:	bd10      	pop	{r4, pc}
 8005348:	08008404 	.word	0x08008404
 800534c:	20000064 	.word	0x20000064
 8005350:	20000464 	.word	0x20000464

08005354 <OnTxTimeout>:
    Radio.Sleep();
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <OnTxTimeout+0x1c>)
{
 8005356:	b510      	push	{r4, lr}
    Radio.Sleep();
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	4798      	blx	r3
    State = TX_TIMEOUT;
 800535c:	2204      	movs	r2, #4
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800535e:	4805      	ldr	r0, [pc, #20]	; (8005374 <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <OnTxTimeout+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005362:	2101      	movs	r1, #1
 8005364:	3024      	adds	r0, #36	; 0x24
    State = TX_TIMEOUT;
 8005366:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005368:	f001 faf0 	bl	800694c <fevent_active>
}
 800536c:	bd10      	pop	{r4, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	08008404 	.word	0x08008404
 8005374:	20000064 	.word	0x20000064
 8005378:	20000464 	.word	0x20000464

0800537c <OnTxDone>:
    Radio.Sleep();
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <OnTxDone+0x1c>)
{
 800537e:	b510      	push	{r4, lr}
    Radio.Sleep();
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	4798      	blx	r3
    State = TX;
 8005384:	2203      	movs	r2, #3
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005386:	4805      	ldr	r0, [pc, #20]	; (800539c <OnTxDone+0x20>)
    State = TX;
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <OnTxDone+0x24>)
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 800538a:	2101      	movs	r1, #1
 800538c:	3024      	adds	r0, #36	; 0x24
    State = TX;
 800538e:	701a      	strb	r2, [r3, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 8005390:	f001 fadc 	bl	800694c <fevent_active>
}
 8005394:	bd10      	pop	{r4, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	08008404 	.word	0x08008404
 800539c:	20000064 	.word	0x20000064
 80053a0:	20000464 	.word	0x20000464

080053a4 <OnRxDone>:
{
 80053a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a6:	9301      	str	r3, [sp, #4]
    Radio.Sleep();
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <OnRxDone+0x44>)
{
 80053aa:	000c      	movs	r4, r1
    Radio.Sleep();
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80053ae:	0006      	movs	r6, r0
 80053b0:	9200      	str	r2, [sp, #0]
    Radio.Sleep();
 80053b2:	4798      	blx	r3
    State = RX;
 80053b4:	2100      	movs	r1, #0
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 80053b6:	4f0d      	ldr	r7, [pc, #52]	; (80053ec <OnRxDone+0x48>)
    State = RX;
 80053b8:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <OnRxDone+0x4c>)
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 80053ba:	22ff      	movs	r2, #255	; 0xff
 80053bc:	0038      	movs	r0, r7
    State = RX;
 80053be:	7029      	strb	r1, [r5, #0]
    memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 80053c0:	f002 fad4 	bl	800796c <memset>
    RxBufferSize = size;
 80053c4:	806c      	strh	r4, [r5, #2]
    if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 80053c6:	2cff      	cmp	r4, #255	; 0xff
 80053c8:	d804      	bhi.n	80053d4 <OnRxDone+0x30>
        memcpy(BufferRx, payload, RxBufferSize);
 80053ca:	0022      	movs	r2, r4
 80053cc:	0031      	movs	r1, r6
 80053ce:	0038      	movs	r0, r7
 80053d0:	f002 fb00 	bl	80079d4 <memcpy>
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 80053d4:	4807      	ldr	r0, [pc, #28]	; (80053f4 <OnRxDone+0x50>)
 80053d6:	9b01      	ldr	r3, [sp, #4]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80053d8:	2101      	movs	r1, #1
    sLoraVar.Snr_u8 = LoraSnr_FskCfo;
 80053da:	7043      	strb	r3, [r0, #1]
    sLoraVar.Rssi_u8 = rssi;
 80053dc:	9b00      	ldr	r3, [sp, #0]
 80053de:	7003      	strb	r3, [r0, #0]
    fevent_active(sEventAppLora, _EVENT_LORA_IRQ);
 80053e0:	3024      	adds	r0, #36	; 0x24
 80053e2:	f001 fab3 	bl	800694c <fevent_active>
}
 80053e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80053e8:	08008404 	.word	0x08008404
 80053ec:	200007b4 	.word	0x200007b4
 80053f0:	20000464 	.word	0x20000464
 80053f4:	20000064 	.word	0x20000064

080053f8 <_Cb_Lora_Led>:
 80053f8:	2001      	movs	r0, #1
 80053fa:	4770      	bx	lr

080053fc <AppLora_Init>:
{
 80053fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioEvents.TxDone = 	OnTxDone;
 80053fe:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <AppLora_Init+0xc0>)
 8005400:	4d2f      	ldr	r5, [pc, #188]	; (80054c0 <AppLora_Init+0xc4>)
{
 8005402:	b08d      	sub	sp, #52	; 0x34
    RadioEvents.TxDone = 	OnTxDone;
 8005404:	606b      	str	r3, [r5, #4]
    RadioEvents.RxDone = 	OnRxDone;
 8005406:	4b2f      	ldr	r3, [pc, #188]	; (80054c4 <AppLora_Init+0xc8>)
    Radio.Init(&RadioEvents);
 8005408:	1d28      	adds	r0, r5, #4
    RadioEvents.RxDone = 	OnRxDone;
 800540a:	60eb      	str	r3, [r5, #12]
    RadioEvents.TxTimeout = OnTxTimeout;
 800540c:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <AppLora_Init+0xcc>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800540e:	2400      	movs	r4, #0
    RadioEvents.TxTimeout = OnTxTimeout;
 8005410:	60ab      	str	r3, [r5, #8]
    RadioEvents.RxTimeout = OnRxTimeout;
 8005412:	4b2e      	ldr	r3, [pc, #184]	; (80054cc <AppLora_Init+0xd0>)
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8005414:	2701      	movs	r7, #1
    RadioEvents.RxTimeout = OnRxTimeout;
 8005416:	612b      	str	r3, [r5, #16]
    RadioEvents.RxError = 	OnRxError;
 8005418:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <AppLora_Init+0xd4>)
 800541a:	616b      	str	r3, [r5, #20]
    Radio.Init(&RadioEvents);
 800541c:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <AppLora_Init+0xd8>)
 800541e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4798      	blx	r3
    random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8005424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 800542a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542c:	482a      	ldr	r0, [pc, #168]	; (80054d8 <AppLora_Init+0xdc>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <AppLora_Init+0xe0>)
 8005434:	220a      	movs	r2, #10
 8005436:	9308      	str	r3, [sp, #32]
 8005438:	2308      	movs	r3, #8
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800543e:	9200      	str	r2, [sp, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	0038      	movs	r0, r7
 8005444:	0016      	movs	r6, r2
 8005446:	0023      	movs	r3, r4
 8005448:	0022      	movs	r2, r4
 800544a:	9704      	str	r7, [sp, #16]
 800544c:	9701      	str	r7, [sp, #4]
 800544e:	2113      	movs	r1, #19
 8005450:	9407      	str	r4, [sp, #28]
 8005452:	9406      	str	r4, [sp, #24]
 8005454:	9405      	str	r4, [sp, #20]
 8005456:	9403      	str	r4, [sp, #12]
 8005458:	47b0      	blx	r6
		Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800545a:	2305      	movs	r3, #5
 800545c:	9302      	str	r3, [sp, #8]
 800545e:	3303      	adds	r3, #3
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005464:	220a      	movs	r2, #10
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	0021      	movs	r1, r4
 800546a:	001e      	movs	r6, r3
 800546c:	0038      	movs	r0, r7
 800546e:	003b      	movs	r3, r7
 8005470:	9709      	str	r7, [sp, #36]	; 0x24
 8005472:	9705      	str	r7, [sp, #20]
 8005474:	9408      	str	r4, [sp, #32]
 8005476:	9407      	str	r4, [sp, #28]
 8005478:	9406      	str	r4, [sp, #24]
 800547a:	9404      	str	r4, [sp, #16]
 800547c:	9403      	str	r4, [sp, #12]
 800547e:	9400      	str	r4, [sp, #0]
 8005480:	47b0      	blx	r6
		Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8005482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005484:	0038      	movs	r0, r7
 8005486:	21ff      	movs	r1, #255	; 0xff
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	4798      	blx	r3
	UTIL_TIMER_Create(&TimerSend, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Send_Event, NULL);
 800548c:	0028      	movs	r0, r5
 800548e:	3f02      	subs	r7, #2
 8005490:	0022      	movs	r2, r4
 8005492:	0039      	movs	r1, r7
 8005494:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <AppLora_Init+0xe4>)
 8005496:	9400      	str	r4, [sp, #0]
 8005498:	3020      	adds	r0, #32
 800549a:	f001 fdd1 	bl	8007040 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&TimerLoraTxAgain, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Timer_Lora_Tx_Again, NULL);
 800549e:	0028      	movs	r0, r5
 80054a0:	0022      	movs	r2, r4
 80054a2:	0039      	movs	r1, r7
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <AppLora_Init+0xe8>)
 80054a6:	9400      	str	r4, [sp, #0]
 80054a8:	3038      	adds	r0, #56	; 0x38
 80054aa:	f001 fdc9 	bl	8007040 <UTIL_TIMER_Create>
    	Radio.Rx(RX_TIMEOUT_VALUE);
 80054ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b0:	480d      	ldr	r0, [pc, #52]	; (80054e8 <AppLora_Init+0xec>)
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	4798      	blx	r3
}
 80054b6:	b00d      	add	sp, #52	; 0x34
 80054b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	0800537d 	.word	0x0800537d
 80054c0:	20000464 	.word	0x20000464
 80054c4:	080053a5 	.word	0x080053a5
 80054c8:	08005355 	.word	0x08005355
 80054cc:	08005331 	.word	0x08005331
 80054d0:	08005309 	.word	0x08005309
 80054d4:	08008404 	.word	0x08008404
 80054d8:	3703dcc0 	.word	0x3703dcc0
 80054dc:	00002710 	.word	0x00002710
 80054e0:	080052e9 	.word	0x080052e9
 80054e4:	080051dd 	.word	0x080051dd
 80054e8:	0037b1d0 	.word	0x0037b1d0

080054ec <AppLora_Send>:
{
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	b085      	sub	sp, #20
 80054f0:	000d      	movs	r5, r1
 80054f2:	0007      	movs	r7, r0
 80054f4:	0011      	movs	r1, r2
 80054f6:	ae01      	add	r6, sp, #4
 80054f8:	001a      	movs	r2, r3
    if (Length != 0) // Co payload
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	d03e      	beq.n	800557c <AppLora_Send+0x90>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, DataType);
 80054fe:	0030      	movs	r0, r6
 8005500:	f001 f8ee 	bl	80066e0 <Protocol_Packet_Header>
        UTIL_MEM_set( aLORA_TX, 0, sizeof(aLORA_TX) );
 8005504:	4c2a      	ldr	r4, [pc, #168]	; (80055b0 <AppLora_Send+0xc4>)
 8005506:	22ff      	movs	r2, #255	; 0xff
 8005508:	2100      	movs	r1, #0
 800550a:	0020      	movs	r0, r4
 800550c:	f001 ff0e 	bl	800732c <UTIL_MEM_set>
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 8005510:	7833      	ldrb	r3, [r6, #0]
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 8005512:	4928      	ldr	r1, [pc, #160]	; (80055b4 <AppLora_Send+0xc8>)
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = sFrameMess.Header.Value;
 8005514:	7023      	strb	r3, [r4, #0]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 24);
 8005516:	6873      	ldr	r3, [r6, #4]
 8005518:	0e1a      	lsrs	r2, r3, #24
 800551a:	7062      	strb	r2, [r4, #1]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 16);
 800551c:	0c1a      	lsrs	r2, r3, #16
 800551e:	70a2      	strb	r2, [r4, #2]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.DevAddr;
 8005520:	7123      	strb	r3, [r4, #4]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 8005522:	0a1a      	lsrs	r2, r3, #8
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 8005524:	68b3      	ldr	r3, [r6, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.DevAddr >> 8);
 8005526:	70e2      	strb	r2, [r4, #3]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 24);
 8005528:	0e1a      	lsrs	r2, r3, #24
 800552a:	7162      	strb	r2, [r4, #5]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 16);
 800552c:	0c1a      	lsrs	r2, r3, #16
 800552e:	71a2      	strb	r2, [r4, #6]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) sFrameMess.NetAddr;
 8005530:	7223      	strb	r3, [r4, #8]
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 8005532:	0a1a      	lsrs	r2, r3, #8
        for (i = 0; i < Length; i++)
 8005534:	2300      	movs	r3, #0
        *(sMessTx.Data_a8 + sMessTx.Length_u16++) = (uint8_t) (sFrameMess.NetAddr >> 8);
 8005536:	71e2      	strb	r2, [r4, #7]
        for (i = 0; i < Length; i++)
 8005538:	001e      	movs	r6, r3
 800553a:	b2da      	uxtb	r2, r3
 800553c:	3609      	adds	r6, #9
 800553e:	b2b6      	uxth	r6, r6
 8005540:	42aa      	cmp	r2, r5
 8005542:	d324      	bcc.n	800558e <AppLora_Send+0xa2>
 8005544:	2300      	movs	r3, #0
        	*(sModem.sBackup.Data_a8 + i) = *(sMessTx.Data_a8 + i);
 8005546:	491c      	ldr	r1, [pc, #112]	; (80055b8 <AppLora_Send+0xcc>)
 8005548:	5ce0      	ldrb	r0, [r4, r3]
 800554a:	69ca      	ldr	r2, [r1, #28]
 800554c:	54d0      	strb	r0, [r2, r3]
        for (i = 0; i < sMessTx.Length_u16; i++)
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	b2d3      	uxtb	r3, r2
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	42b2      	cmp	r2, r6
 8005556:	d3f7      	bcc.n	8005548 <AppLora_Send+0x5c>
    	LED_ON(__LED_MEASURE);
 8005558:	2001      	movs	r0, #1
        sModem.sBackup.Length_u16 = sMessTx.Length_u16;
 800555a:	840e      	strh	r6, [r1, #32]
    	LED_ON(__LED_MEASURE);
 800555c:	f001 ff98 	bl	8007490 <LED_ON>
        if (delay != 0)
 8005560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01b      	beq.n	800559e <AppLora_Send+0xb2>
        	UTIL_TIMER_SetPeriod(&TimerSend, delay);
 8005566:	4c15      	ldr	r4, [pc, #84]	; (80055bc <AppLora_Send+0xd0>)
 8005568:	0019      	movs	r1, r3
 800556a:	3420      	adds	r4, #32
 800556c:	0020      	movs	r0, r4
 800556e:	f001 fe4f 	bl	8007210 <UTIL_TIMER_SetPeriod>
        	UTIL_TIMER_Start(&TimerSend);
 8005572:	0020      	movs	r0, r4
 8005574:	f001 fe14 	bl	80071a0 <UTIL_TIMER_Start>
        return 1;
 8005578:	2501      	movs	r5, #1
 800557a:	e005      	b.n	8005588 <AppLora_Send+0x9c>
        CheckACKRequest = Protocol_Packet_Header(&sFrameMess, RespondType, _DATA_NONE);
 800557c:	002a      	movs	r2, r5
 800557e:	0030      	movs	r0, r6
 8005580:	f001 f8ae 	bl	80066e0 <Protocol_Packet_Header>
    if ( (Length != 0) || (CheckACKRequest == TRUE) )
 8005584:	2801      	cmp	r0, #1
 8005586:	d0bd      	beq.n	8005504 <AppLora_Send+0x18>
}
 8005588:	0028      	movs	r0, r5
 800558a:	b005      	add	sp, #20
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (sMessTx.Length_u16 >= sizeof(aLORA_TX) )
 800558e:	2bf6      	cmp	r3, #246	; 0xf6
 8005590:	d003      	beq.n	800559a <AppLora_Send+0xae>
            *(sMessTx.Data_a8 + sMessTx.Length_u16++) = *(pData + i);
 8005592:	5cfa      	ldrb	r2, [r7, r3]
 8005594:	54ca      	strb	r2, [r1, r3]
        for (i = 0; i < Length; i++)
 8005596:	3301      	adds	r3, #1
 8005598:	e7ce      	b.n	8005538 <AppLora_Send+0x4c>
 800559a:	26ff      	movs	r6, #255	; 0xff
 800559c:	e7d2      	b.n	8005544 <AppLora_Send+0x58>
        	Radio.Send(sMessTx.Data_a8, sMessTx.Length_u16);
 800559e:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <AppLora_Send+0xd4>)
 80055a0:	0020      	movs	r0, r4
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	b2f1      	uxtb	r1, r6
 80055a6:	4798      	blx	r3
            LED_OFF(__LED_MEASURE);
 80055a8:	2001      	movs	r0, #1
 80055aa:	f001 ff81 	bl	80074b0 <LED_OFF>
 80055ae:	e7e3      	b.n	8005578 <AppLora_Send+0x8c>
 80055b0:	200006b5 	.word	0x200006b5
 80055b4:	200006be 	.word	0x200006be
 80055b8:	200000c0 	.word	0x200000c0
 80055bc:	20000464 	.word	0x20000464
 80055c0:	08008404 	.word	0x08008404

080055c4 <AppLora_Task>:
{
 80055c4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < _EVENT_LORA_END; i++)
 80055c6:	2500      	movs	r5, #0
 80055c8:	4c0f      	ldr	r4, [pc, #60]	; (8005608 <AppLora_Task+0x44>)
 80055ca:	3424      	adds	r4, #36	; 0x24
		if (sEventAppLora[i].e_status == 1)
 80055cc:	7863      	ldrb	r3, [r4, #1]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10a      	bne.n	80055e8 <AppLora_Task+0x24>
			if ((sEventAppLora[i].e_systick == 0) ||
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10e      	bne.n	80055f6 <AppLora_Task+0x32>
                sEventAppLora[i].e_status = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	7063      	strb	r3, [r4, #1]
				sEventAppLora[i].e_systick = HAL_GetTick();
 80055dc:	f7fb fe36 	bl	800124c <HAL_GetTick>
				sEventAppLora[i].e_function_handler(i);
 80055e0:	68e3      	ldr	r3, [r4, #12]
				sEventAppLora[i].e_systick = HAL_GetTick();
 80055e2:	6060      	str	r0, [r4, #4]
				sEventAppLora[i].e_function_handler(i);
 80055e4:	0028      	movs	r0, r5
 80055e6:	4798      	blx	r3
	for (i = 0; i < _EVENT_LORA_END; i++)
 80055e8:	3501      	adds	r5, #1
 80055ea:	b2ed      	uxtb	r5, r5
 80055ec:	3410      	adds	r4, #16
 80055ee:	2d03      	cmp	r5, #3
 80055f0:	d1ec      	bne.n	80055cc <AppLora_Task+0x8>
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
					((HAL_GetTick() - sEventAppLora[i].e_systick)  >=  sEventAppLora[i].e_period))
 80055f6:	f7fb fe29 	bl	800124c <HAL_GetTick>
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	1ac0      	subs	r0, r0, r3
			if ((sEventAppLora[i].e_systick == 0) ||
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	4298      	cmp	r0, r3
 8005602:	d2e9      	bcs.n	80055d8 <AppLora_Task+0x14>
 8005604:	e7f0      	b.n	80055e8 <AppLora_Task+0x24>
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20000064 	.word	0x20000064

0800560c <AppLora_Deinit_IO_Radio>:
{
 800560c:	b510      	push	{r4, lr}
    Sx_Board_IoDeInit();
 800560e:	f7fb fcaf 	bl	8000f70 <CMWX1ZZABZ0XX_RADIO_IoDeInit>
}
 8005612:	bd10      	pop	{r4, pc}

08005614 <AppLora_Init_IO_Radio>:
{
 8005614:	b510      	push	{r4, lr}
    Sx_Board_IoInit();
 8005616:	f7fb fbd1 	bl	8000dbc <CMWX1ZZABZ0XX_RADIO_IoInit>
}
 800561a:	bd10      	pop	{r4, pc}

0800561c <SysApp_Init>:
#include "i2c.h"
#include "radio.h"

/* Exported functions --------------------------------------------------------*/
void SysApp_Init (void)
{
 800561c:	b510      	push	{r4, lr}
	MX_GPIO_Init();
 800561e:	f001 f889 	bl	8006734 <MX_GPIO_Init>

	#ifdef DEVICE_TYPE_STATION
		MX_USART1_UART_Init();
 8005622:	f001 f8b5 	bl	8006790 <MX_USART1_UART_Init>
		MX_USART2_UART_Init();
 8005626:	f001 f8cf 	bl	80067c8 <MX_USART2_UART_Init>
		MX_USART1_UART_Init();
		MX_ADC_Init();
		MX_I2C1_Init();
	#endif

	AppLora_Init ();
 800562a:	f7ff fee7 	bl	80053fc <AppLora_Init>
	UTIL_LPM_Init();
 800562e:	f001 fa0f 	bl	8006a50 <UTIL_LPM_Init>
	Init_Uart_Module();
 8005632:	f000 fc33 	bl	8005e9c <Init_Uart_Module>
	Init_Memory_Infor();
 8005636:	f000 fdfd 	bl	8006234 <Init_Memory_Infor>
	AppCom_Init();
 800563a:	f7ff fd9d 	bl	8005178 <AppCom_Init>
}
 800563e:	bd10      	pop	{r4, pc}

08005640 <SysApp_Start>:

void SysApp_Start(void)
{
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG(LOG_DEBUG, "Main task start");
 8005642:	2001      	movs	r0, #1
 8005644:	4910      	ldr	r1, [pc, #64]	; (8005688 <SysApp_Start+0x48>)
 8005646:	f001 fe75 	bl	8007334 <LOG>
	UTIL_TIMER_Create(&TimerLoraTx,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, _Cb_Active_Lora_Tx_Event, NULL);
 800564a:	2500      	movs	r5, #0
 800564c:	2101      	movs	r1, #1
 800564e:	4c0f      	ldr	r4, [pc, #60]	; (800568c <SysApp_Start+0x4c>)
 8005650:	002a      	movs	r2, r5
 8005652:	9500      	str	r5, [sp, #0]
 8005654:	0020      	movs	r0, r4
 8005656:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <SysApp_Start+0x50>)
 8005658:	4249      	negs	r1, r1
 800565a:	f001 fcf1 	bl	8007040 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000);
 800565e:	21fa      	movs	r1, #250	; 0xfa
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <SysApp_Start+0x54>)
 8005662:	0089      	lsls	r1, r1, #2
 8005664:	885b      	ldrh	r3, [r3, #2]
 8005666:	0020      	movs	r0, r4
 8005668:	4359      	muls	r1, r3
 800566a:	f001 fdd1 	bl	8007210 <UTIL_TIMER_SetPeriod>
	#ifdef DEVICE_TYPE_STATION
		LED_OFF(__LED_MODE);
 800566e:	0028      	movs	r0, r5
 8005670:	f001 ff1e 	bl	80074b0 <LED_OFF>
		Radio.Rx(RX_TIMEOUT_VALUE);
 8005674:	4b08      	ldr	r3, [pc, #32]	; (8005698 <SysApp_Start+0x58>)
 8005676:	4809      	ldr	r0, [pc, #36]	; (800569c <SysApp_Start+0x5c>)
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	4798      	blx	r3
	#else
		LED_ON(__LED_MODE);
		LED_OFF(__LED_MEASURE);
		USER_Payload_Node_Join(sModem.TimeDelaySingle_u32);
	#endif
	fevent_enable(sEventAppCom, _EVENT_IDLE_HANDLER);
 800567c:	2103      	movs	r1, #3
 800567e:	4808      	ldr	r0, [pc, #32]	; (80056a0 <SysApp_Start+0x60>)
 8005680:	f001 f96b 	bl	800695a <fevent_enable>
}
 8005684:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	08008653 	.word	0x08008653
 800568c:	2000044c 	.word	0x2000044c
 8005690:	080051c9 	.word	0x080051c9
 8005694:	20000114 	.word	0x20000114
 8005698:	08008404 	.word	0x08008404
 800569c:	0037b1d0 	.word	0x0037b1d0
 80056a0:	20000024 	.word	0x20000024

080056a4 <Main_Task>:

void Main_Task (void)
{
 80056a4:	b510      	push	{r4, lr}
    uint8_t TaskStatus_u8 = 0;

    SysApp_Init();
 80056a6:	f7ff ffb9 	bl	800561c <SysApp_Init>
    SysApp_Start();
 80056aa:	f7ff ffc9 	bl	8005640 <SysApp_Start>
	for (;;)
	{
		TaskStatus_u8 = 0;

		TaskStatus_u8 |= AppCom_Task();
 80056ae:	f7ff fd11 	bl	80050d4 <AppCom_Task>

		TaskStatus_u8 |= AppLora_Task();
 80056b2:	f7ff ff87 	bl	80055c4 <AppLora_Task>
	for (;;)
 80056b6:	e7fa      	b.n	80056ae <Main_Task+0xa>

080056b8 <ADC_Desequence_Powerhungry_Channels>:
	__HAL_RCC_ADC1_CLK_DISABLE() ;
    return adcData;
}

void ADC_Desequence_Powerhungry_Channels(void)
{
 80056b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined (STM32L072xx) || defined (STM32L082xx)
     ADC_ChannelConfTypeDef sConfig;

    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056ba:	4c08      	ldr	r4, [pc, #32]	; (80056dc <ADC_Desequence_Powerhungry_Channels+0x24>)
    sConfig.Rank = ADC_RANK_NONE;
 80056bc:	4d08      	ldr	r5, [pc, #32]	; (80056e0 <ADC_Desequence_Powerhungry_Channels+0x28>)
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <ADC_Desequence_Powerhungry_Channels+0x2c>)
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056c0:	4669      	mov	r1, sp
 80056c2:	0020      	movs	r0, r4
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80056c4:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_NONE;
 80056c6:	9501      	str	r5, [sp, #4]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056c8:	f7fb fed0 	bl	800146c <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <ADC_Desequence_Powerhungry_Channels+0x30>)
    sConfig.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056ce:	4669      	mov	r1, sp
 80056d0:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_NONE;
 80056d2:	9501      	str	r5, [sp, #4]
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80056d4:	9300      	str	r3, [sp, #0]
    HAL_ADC_ConfigChannel (&hadc1, &sConfig);
 80056d6:	f7fb fec9 	bl	800146c <HAL_ADC_ConfigChannel>
#endif
}
 80056da:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80056dc:	20001120 	.word	0x20001120
 80056e0:	00001001 	.word	0x00001001
 80056e4:	48040000 	.word	0x48040000
 80056e8:	44020000 	.word	0x44020000

080056ec <_fAT_SET_LED>:
}

void _fAT_SET_LED(sData *str_Receiv, uint16_t Pos)
{

}
 80056ec:	4770      	bx	lr
	...

080056f0 <_fAT_GET_DEVICE_ID>:
{
 80056f0:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sDCU_id.Data_a8, sModem.sDCU_id.Length_u16);
 80056f2:	4b03      	ldr	r3, [pc, #12]	; (8005700 <_fAT_GET_DEVICE_ID+0x10>)
 80056f4:	8899      	ldrh	r1, [r3, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	f000 fbf6 	bl	8005ee8 <DCU_Response_AT>
}
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	200000c0 	.word	0x200000c0

08005704 <_fAT_GET_NETWORK_ID>:
{
 8005704:	b510      	push	{r4, lr}
    DCU_Response_AT(sModem.sNET_id.Data_a8, sModem.sNET_id.Length_u16);
 8005706:	4b03      	ldr	r3, [pc, #12]	; (8005714 <_fAT_GET_NETWORK_ID+0x10>)
 8005708:	8999      	ldrh	r1, [r3, #12]
 800570a:	6898      	ldr	r0, [r3, #8]
 800570c:	f000 fbec 	bl	8005ee8 <DCU_Response_AT>
}
 8005710:	bd10      	pop	{r4, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	200000c0 	.word	0x200000c0

08005718 <_fAT_GET_DUTY_WAKEUP>:
{
 8005718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t     aTemp[14] = {0};
 800571a:	240a      	movs	r4, #10
 800571c:	0022      	movs	r2, r4
 800571e:	2100      	movs	r1, #0
 8005720:	a801      	add	r0, sp, #4
 8005722:	f002 f923 	bl	800796c <memset>
    aTemp[length++] = 'F';
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <_fAT_GET_DUTY_WAKEUP+0x70>)
    aTemp[length++] = '=';
 8005728:	466a      	mov	r2, sp
    aTemp[length++] = 'F';
 800572a:	9300      	str	r3, [sp, #0]
    aTemp[length++] = '=';
 800572c:	233d      	movs	r3, #61	; 0x3d
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 800572e:	4d17      	ldr	r5, [pc, #92]	; (800578c <_fAT_GET_DUTY_WAKEUP+0x74>)
    aTemp[length++] = '=';
 8005730:	7113      	strb	r3, [r2, #4]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 / 10 + 0x30;
 8005732:	782e      	ldrb	r6, [r5, #0]
 8005734:	0021      	movs	r1, r4
 8005736:	0030      	movs	r0, r6
 8005738:	f7fa fd0c 	bl	8000154 <__udivsi3>
 800573c:	466b      	mov	r3, sp
 800573e:	3030      	adds	r0, #48	; 0x30
 8005740:	7158      	strb	r0, [r3, #5]
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 8005742:	0021      	movs	r1, r4
 8005744:	0030      	movs	r0, r6
 8005746:	f7fa fd8b 	bl	8000260 <__aeabi_uidivmod>
 800574a:	466b      	mov	r3, sp
 800574c:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = 'x';
 800574e:	466a      	mov	r2, sp
    aTemp[length++] = sFreqInfor.NumWakeup_u8 % 10 + 0x30;
 8005750:	7199      	strb	r1, [r3, #6]
    aTemp[length++] = 'x';
 8005752:	2378      	movs	r3, #120	; 0x78
 8005754:	71d3      	strb	r3, [r2, #7]
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 8005756:	886d      	ldrh	r5, [r5, #2]
 8005758:	0021      	movs	r1, r4
 800575a:	0028      	movs	r0, r5
 800575c:	f7fa fcfa 	bl	8000154 <__udivsi3>
 8005760:	0021      	movs	r1, r4
 8005762:	b280      	uxth	r0, r0
 8005764:	f7fa fd7c 	bl	8000260 <__aeabi_uidivmod>
 8005768:	466b      	mov	r3, sp
 800576a:	3130      	adds	r1, #48	; 0x30
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 800576c:	0028      	movs	r0, r5
    aTemp[length++] = (sFreqInfor.FreqWakeup_u32  / 10) % 10 + 0x30;
 800576e:	7219      	strb	r1, [r3, #8]
    aTemp[length++] = sFreqInfor.FreqWakeup_u32  % 10 + 0x30;
 8005770:	0021      	movs	r1, r4
 8005772:	f7fa fd75 	bl	8000260 <__aeabi_uidivmod>
 8005776:	466b      	mov	r3, sp
 8005778:	3130      	adds	r1, #48	; 0x30
 800577a:	7259      	strb	r1, [r3, #9]
    DCU_Response_AT(&aTemp[0], length);
 800577c:	4668      	mov	r0, sp
 800577e:	0021      	movs	r1, r4
 8005780:	f000 fbb2 	bl	8005ee8 <DCU_Response_AT>
}
 8005784:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	51455246 	.word	0x51455246
 800578c:	20000114 	.word	0x20000114

08005790 <_fAT_GET_TYPE_MODEM>:
{
 8005790:	b510      	push	{r4, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
    uint8_t     aTemp[50] = {0};
 8005794:	222e      	movs	r2, #46	; 0x2e
 8005796:	2100      	movs	r1, #0
 8005798:	a802      	add	r0, sp, #8
 800579a:	f002 f8e7 	bl	800796c <memset>
    aTemp[length++] = 'T';
 800579e:	4b27      	ldr	r3, [pc, #156]	; (800583c <_fAT_GET_TYPE_MODEM+0xac>)
    uint8_t     aTemp[50] = {0};
 80057a0:	ac01      	add	r4, sp, #4
    aTemp[length++] = 'T';
 80057a2:	9301      	str	r3, [sp, #4]
    aTemp[length++] = ':';
 80057a4:	4b26      	ldr	r3, [pc, #152]	; (8005840 <_fAT_GET_TYPE_MODEM+0xb0>)
 80057a6:	80a3      	strh	r3, [r4, #4]
    switch (sModem.TypeModem_u8)
 80057a8:	4b26      	ldr	r3, [pc, #152]	; (8005844 <_fAT_GET_TYPE_MODEM+0xb4>)
 80057aa:	7e1b      	ldrb	r3, [r3, #24]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d041      	beq.n	8005834 <_fAT_GET_TYPE_MODEM+0xa4>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d041      	beq.n	8005838 <_fAT_GET_TYPE_MODEM+0xa8>
 80057b4:	2106      	movs	r1, #6
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d136      	bne.n	8005828 <_fAT_GET_TYPE_MODEM+0x98>
    	    aTemp[length++] = 'A';
 80057ba:	220e      	movs	r2, #14
    	    aTemp[length++] = 'N';
 80057bc:	4b22      	ldr	r3, [pc, #136]	; (8005848 <_fAT_GET_TYPE_MODEM+0xb8>)
 80057be:	80e3      	strh	r3, [r4, #6]
    	    aTemp[length++] = 'D';
 80057c0:	4b22      	ldr	r3, [pc, #136]	; (800584c <_fAT_GET_TYPE_MODEM+0xbc>)
 80057c2:	9303      	str	r3, [sp, #12]
    	    aTemp[length++] = 'N';
 80057c4:	4b22      	ldr	r3, [pc, #136]	; (8005850 <_fAT_GET_TYPE_MODEM+0xc0>)
 80057c6:	81a3      	strh	r3, [r4, #12]
    	    aTemp[length++] = 'N';
 80057c8:	234e      	movs	r3, #78	; 0x4e
    	    aTemp[length++] = 'O';
 80057ca:	214f      	movs	r1, #79	; 0x4f
    	    aTemp[length++] = 'N';
 80057cc:	54a3      	strb	r3, [r4, r2]
    	    aTemp[length++] = 'O';
 80057ce:	1c53      	adds	r3, r2, #1
 80057d0:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'D';
 80057d2:	1c93      	adds	r3, r2, #2
 80057d4:	390b      	subs	r1, #11
 80057d6:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'E';
 80057d8:	1cd3      	adds	r3, r2, #3
 80057da:	3101      	adds	r1, #1
 80057dc:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = ' ';
 80057de:	1d13      	adds	r3, r2, #4
 80057e0:	3925      	subs	r1, #37	; 0x25
 80057e2:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'V';
 80057e4:	1d53      	adds	r3, r2, #5
 80057e6:	3136      	adds	r1, #54	; 0x36
 80057e8:	54e1      	strb	r1, [r4, r3]
    	    aTemp[length++] = 'P';
 80057ea:	1dd3      	adds	r3, r2, #7
 80057ec:	3906      	subs	r1, #6
 80057ee:	3206      	adds	r2, #6
 80057f0:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'S';
 80057f2:	2253      	movs	r2, #83	; 0x53
    	    aTemp[length++] = 'T';
 80057f4:	2154      	movs	r1, #84	; 0x54
    	    aTemp[length++] = 'A';
 80057f6:	2041      	movs	r0, #65	; 0x41
    	    aTemp[length++] = 'S';
 80057f8:	54e2      	strb	r2, [r4, r3]
 80057fa:	1c5a      	adds	r2, r3, #1
    	    aTemp[length++] = 'T';
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	54a1      	strb	r1, [r4, r2]
 8005800:	1c9a      	adds	r2, r3, #2
    	    aTemp[length++] = 'A';
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	54a0      	strb	r0, [r4, r2]
 8005806:	1cda      	adds	r2, r3, #3
    	    aTemp[length++] = 'T';
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	54a1      	strb	r1, [r4, r2]
 800580c:	1d1a      	adds	r2, r3, #4
    	    aTemp[length++] = 'I';
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	390b      	subs	r1, #11
 8005812:	54a1      	strb	r1, [r4, r2]
 8005814:	1d5a      	adds	r2, r3, #5
    	    aTemp[length++] = 'O';
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	3106      	adds	r1, #6
 800581a:	54a1      	strb	r1, [r4, r2]
    	    aTemp[length++] = 'N';
 800581c:	224e      	movs	r2, #78	; 0x4e
 800581e:	1dd9      	adds	r1, r3, #7
    	    aTemp[length++] = 'O';
 8005820:	3306      	adds	r3, #6
    	    aTemp[length++] = 'N';
 8005822:	b2db      	uxtb	r3, r3
 8005824:	b2c9      	uxtb	r1, r1
 8005826:	54e2      	strb	r2, [r4, r3]
    DCU_Response_AT(&aTemp[0], length);
 8005828:	0020      	movs	r0, r4
 800582a:	b289      	uxth	r1, r1
 800582c:	f000 fb5c 	bl	8005ee8 <DCU_Response_AT>
}
 8005830:	b00e      	add	sp, #56	; 0x38
 8005832:	bd10      	pop	{r4, pc}
    switch (sModem.TypeModem_u8)
 8005834:	2206      	movs	r2, #6
 8005836:	e7c7      	b.n	80057c8 <_fAT_GET_TYPE_MODEM+0x38>
 8005838:	2306      	movs	r3, #6
 800583a:	e7da      	b.n	80057f2 <_fAT_GET_TYPE_MODEM+0x62>
 800583c:	45505954 	.word	0x45505954
 8005840:	0000203a 	.word	0x0000203a
 8005844:	200000c0 	.word	0x200000c0
 8005848:	00004f4e 	.word	0x00004f4e
 800584c:	56204544 	.word	0x56204544
 8005850:	0000414e 	.word	0x0000414e

08005854 <_fAT_GET_RTC>:
{
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
    uint8_t aTEMP_RTC[40] = {0};
 8005858:	2224      	movs	r2, #36	; 0x24
 800585a:	2100      	movs	r1, #0
 800585c:	a801      	add	r0, sp, #4
 800585e:	f002 f885 	bl	800796c <memset>
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8005862:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <_fAT_GET_RTC+0xfc>)
    aTEMP_RTC[length++] = '=';
 8005864:	466a      	mov	r2, sp
	aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'I'; aTEMP_RTC[length++] = 'M'; aTEMP_RTC[length++] = 'E';
 8005866:	9300      	str	r3, [sp, #0]
    aTEMP_RTC[length++] = '=';
 8005868:	233d      	movs	r3, #61	; 0x3d
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 800586a:	4c3a      	ldr	r4, [pc, #232]	; (8005954 <_fAT_GET_RTC+0x100>)
    aTEMP_RTC[length++] = '=';
 800586c:	7113      	strb	r3, [r2, #4]
	aTEMP_RTC[length++] = sRTC.hour / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.hour % 10 + 0x30;    aTEMP_RTC[length++] = ':';
 800586e:	7825      	ldrb	r5, [r4, #0]
 8005870:	210a      	movs	r1, #10
 8005872:	0028      	movs	r0, r5
 8005874:	f7fa fc6e 	bl	8000154 <__udivsi3>
 8005878:	466b      	mov	r3, sp
 800587a:	3030      	adds	r0, #48	; 0x30
 800587c:	7158      	strb	r0, [r3, #5]
 800587e:	210a      	movs	r1, #10
 8005880:	0028      	movs	r0, r5
 8005882:	f7fa fced 	bl	8000260 <__aeabi_uidivmod>
 8005886:	253a      	movs	r5, #58	; 0x3a
 8005888:	466b      	mov	r3, sp
 800588a:	3130      	adds	r1, #48	; 0x30
 800588c:	7199      	strb	r1, [r3, #6]
 800588e:	71dd      	strb	r5, [r3, #7]
	aTEMP_RTC[length++] = sRTC.min / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.min % 10 + 0x30;     aTEMP_RTC[length++] = ':';
 8005890:	7866      	ldrb	r6, [r4, #1]
 8005892:	210a      	movs	r1, #10
 8005894:	0030      	movs	r0, r6
 8005896:	f7fa fc5d 	bl	8000154 <__udivsi3>
 800589a:	466b      	mov	r3, sp
 800589c:	3030      	adds	r0, #48	; 0x30
 800589e:	7218      	strb	r0, [r3, #8]
 80058a0:	210a      	movs	r1, #10
 80058a2:	0030      	movs	r0, r6
 80058a4:	f7fa fcdc 	bl	8000260 <__aeabi_uidivmod>
 80058a8:	466b      	mov	r3, sp
 80058aa:	3130      	adds	r1, #48	; 0x30
 80058ac:	7259      	strb	r1, [r3, #9]
 80058ae:	729d      	strb	r5, [r3, #10]
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 80058b0:	78a5      	ldrb	r5, [r4, #2]
 80058b2:	210a      	movs	r1, #10
 80058b4:	0028      	movs	r0, r5
 80058b6:	f7fa fc4d 	bl	8000154 <__udivsi3>
 80058ba:	466b      	mov	r3, sp
 80058bc:	3030      	adds	r0, #48	; 0x30
 80058be:	72d8      	strb	r0, [r3, #11]
 80058c0:	210a      	movs	r1, #10
 80058c2:	0028      	movs	r0, r5
 80058c4:	f7fa fccc 	bl	8000260 <__aeabi_uidivmod>
 80058c8:	466b      	mov	r3, sp
 80058ca:	3130      	adds	r1, #48	; 0x30
 80058cc:	466a      	mov	r2, sp
 80058ce:	7319      	strb	r1, [r3, #12]
 80058d0:	233b      	movs	r3, #59	; 0x3b
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 80058d2:	252d      	movs	r5, #45	; 0x2d
	aTEMP_RTC[length++] = sRTC.sec / 10 + 0x30;     aTEMP_RTC[length++] = sRTC.sec % 10 + 0x30;     aTEMP_RTC[length++] = ';';
 80058d4:	7353      	strb	r3, [r2, #13]
    aTEMP_RTC[length++] = 0x0D;
 80058d6:	4b20      	ldr	r3, [pc, #128]	; (8005958 <_fAT_GET_RTC+0x104>)
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 80058d8:	210a      	movs	r1, #10
    aTEMP_RTC[length++] = 0x0D;
 80058da:	81d3      	strh	r3, [r2, #14]
	aTEMP_RTC[length++] = 'D'; aTEMP_RTC[length++] = 'A'; aTEMP_RTC[length++] = 'T'; aTEMP_RTC[length++] = 'E';
 80058dc:	4b1f      	ldr	r3, [pc, #124]	; (800595c <_fAT_GET_RTC+0x108>)
 80058de:	9304      	str	r3, [sp, #16]
	aTEMP_RTC[length++] = sRTC.day + 0x31;          aTEMP_RTC[length++] = '-';
 80058e0:	78e3      	ldrb	r3, [r4, #3]
 80058e2:	7555      	strb	r5, [r2, #21]
 80058e4:	3331      	adds	r3, #49	; 0x31
 80058e6:	7513      	strb	r3, [r2, #20]
	aTEMP_RTC[length++] = sRTC.date / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.date % 10 + 0x30;      aTEMP_RTC[length++] = '-';
 80058e8:	7926      	ldrb	r6, [r4, #4]
 80058ea:	0030      	movs	r0, r6
 80058ec:	f7fa fc32 	bl	8000154 <__udivsi3>
 80058f0:	466b      	mov	r3, sp
 80058f2:	3030      	adds	r0, #48	; 0x30
 80058f4:	7598      	strb	r0, [r3, #22]
 80058f6:	210a      	movs	r1, #10
 80058f8:	0030      	movs	r0, r6
 80058fa:	f7fa fcb1 	bl	8000260 <__aeabi_uidivmod>
 80058fe:	466b      	mov	r3, sp
 8005900:	3130      	adds	r1, #48	; 0x30
 8005902:	75d9      	strb	r1, [r3, #23]
 8005904:	761d      	strb	r5, [r3, #24]
	aTEMP_RTC[length++] = sRTC.month / 10 + 0x30;   aTEMP_RTC[length++] = sRTC.month % 10 + 0x30;     aTEMP_RTC[length++] = '-';
 8005906:	7966      	ldrb	r6, [r4, #5]
 8005908:	210a      	movs	r1, #10
 800590a:	0030      	movs	r0, r6
 800590c:	f7fa fc22 	bl	8000154 <__udivsi3>
 8005910:	466b      	mov	r3, sp
 8005912:	3030      	adds	r0, #48	; 0x30
 8005914:	7658      	strb	r0, [r3, #25]
 8005916:	210a      	movs	r1, #10
 8005918:	0030      	movs	r0, r6
 800591a:	f7fa fca1 	bl	8000260 <__aeabi_uidivmod>
 800591e:	466b      	mov	r3, sp
 8005920:	3130      	adds	r1, #48	; 0x30
 8005922:	7699      	strb	r1, [r3, #26]
 8005924:	76dd      	strb	r5, [r3, #27]
	aTEMP_RTC[length++] = sRTC.year / 10 + 0x30;    aTEMP_RTC[length++] = sRTC.year % 10 + 0x30;
 8005926:	79a4      	ldrb	r4, [r4, #6]
 8005928:	210a      	movs	r1, #10
 800592a:	0020      	movs	r0, r4
 800592c:	f7fa fc12 	bl	8000154 <__udivsi3>
 8005930:	466b      	mov	r3, sp
 8005932:	3030      	adds	r0, #48	; 0x30
 8005934:	7718      	strb	r0, [r3, #28]
 8005936:	210a      	movs	r1, #10
 8005938:	0020      	movs	r0, r4
 800593a:	f7fa fc91 	bl	8000260 <__aeabi_uidivmod>
 800593e:	466b      	mov	r3, sp
 8005940:	3130      	adds	r1, #48	; 0x30
 8005942:	7759      	strb	r1, [r3, #29]
	DCU_Response_AT(aTEMP_RTC, length);
 8005944:	4668      	mov	r0, sp
 8005946:	211e      	movs	r1, #30
 8005948:	f000 face 	bl	8005ee8 <DCU_Response_AT>
}
 800594c:	b00a      	add	sp, #40	; 0x28
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	454d4954 	.word	0x454d4954
 8005954:	20001374 	.word	0x20001374
 8005958:	0000440d 	.word	0x0000440d
 800595c:	3d455441 	.word	0x3d455441

08005960 <_fAT_GET_AUTHOR>:
{
//    DCU_Response_AT(sFirmVersion.Data_a8, sFirmVersion.Length_u16);
}

void _fAT_GET_AUTHOR(sData *str_Receiv, uint16_t Pos)
{
 8005960:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"Hello, we are the developers of this project.", 45);
 8005962:	212d      	movs	r1, #45	; 0x2d
 8005964:	481f      	ldr	r0, [pc, #124]	; (80059e4 <_fAT_GET_AUTHOR+0x84>)
 8005966:	f000 fabf 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hanoi University of Science and Technology.", 43);
 800596a:	212b      	movs	r1, #43	; 0x2b
 800596c:	481e      	ldr	r0, [pc, #120]	; (80059e8 <_fAT_GET_AUTHOR+0x88>)
 800596e:	f000 fabb 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Industrial Instrumentation & IoT Laboratory.", 44);
 8005972:	212c      	movs	r1, #44	; 0x2c
 8005974:	481d      	ldr	r0, [pc, #116]	; (80059ec <_fAT_GET_AUTHOR+0x8c>)
 8005976:	f000 fab7 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"List of project participants:", 29);
 800597a:	211d      	movs	r1, #29
 800597c:	481c      	ldr	r0, [pc, #112]	; (80059f0 <_fAT_GET_AUTHOR+0x90>)
 800597e:	f000 fab3 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Project Manager: Nguyen Quang Huy", 33);
 8005982:	2121      	movs	r1, #33	; 0x21
 8005984:	481b      	ldr	r0, [pc, #108]	; (80059f4 <_fAT_GET_AUTHOR+0x94>)
 8005986:	f000 faaf 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Hardware Designer: Ninh La Van Canh", 35);
 800598a:	2123      	movs	r1, #35	; 0x23
 800598c:	481a      	ldr	r0, [pc, #104]	; (80059f8 <_fAT_GET_AUTHOR+0x98>)
 800598e:	f000 faab 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Software Developer: Huy Hung\r\n", 28);
 8005992:	211c      	movs	r1, #28
 8005994:	4819      	ldr	r0, [pc, #100]	; (80059fc <_fAT_GET_AUTHOR+0x9c>)
 8005996:	f000 faa7 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"and me.", 7);
 800599a:	2107      	movs	r1, #7
 800599c:	4818      	ldr	r0, [pc, #96]	; (8005a00 <_fAT_GET_AUTHOR+0xa0>)
 800599e:	f000 faa3 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"  ______   _____   _______  _______  _______ ", 45);
 80059a2:	212d      	movs	r1, #45	; 0x2d
 80059a4:	4817      	ldr	r0, [pc, #92]	; (8005a04 <_fAT_GET_AUTHOR+0xa4>)
 80059a6:	f000 fa9f 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" / _____) / ___ \\ /  _____)|__   __||__   __|", 45);
 80059aa:	212d      	movs	r1, #45	; 0x2d
 80059ac:	4816      	ldr	r0, [pc, #88]	; (8005a08 <_fAT_GET_AUTHOR+0xa8>)
 80059ae:	f000 fa9b 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"( (____  / /___\\ \\| |  ___    | |      | |   ", 42);
 80059b2:	212a      	movs	r1, #42	; 0x2a
 80059b4:	4815      	ldr	r0, [pc, #84]	; (8005a0c <_fAT_GET_AUTHOR+0xac>)
 80059b6:	f000 fa97 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" \\____ \\ |  ___  || | |__ |   | |      | |   ", 42);
 80059ba:	212a      	movs	r1, #42	; 0x2a
 80059bc:	4814      	ldr	r0, [pc, #80]	; (8005a10 <_fAT_GET_AUTHOR+0xb0>)
 80059be:	f000 fa93 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)" _____) )| |   | || |___/ | __| |__    | |   ", 42);
 80059c2:	212a      	movs	r1, #42	; 0x2a
 80059c4:	4813      	ldr	r0, [pc, #76]	; (8005a14 <_fAT_GET_AUTHOR+0xb4>)
 80059c6:	f000 fa8f 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"(______/ |_|   |_|\\_______/|_______|   |_|   ", 42);
 80059ca:	212a      	movs	r1, #42	; 0x2a
 80059cc:	4812      	ldr	r0, [pc, #72]	; (8005a18 <_fAT_GET_AUTHOR+0xb8>)
 80059ce:	f000 fa8b 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"/******(C) COPYRIGHT by Bui Viet Duc ******/ ", 42);
 80059d2:	212a      	movs	r1, #42	; 0x2a
 80059d4:	4811      	ldr	r0, [pc, #68]	; (8005a1c <_fAT_GET_AUTHOR+0xbc>)
 80059d6:	f000 fa87 	bl	8005ee8 <DCU_Response_AT>
	DCU_Response_AT((uint8_t *)"Thank you for everything. Good luck. See you again.", 51);
 80059da:	2133      	movs	r1, #51	; 0x33
 80059dc:	4810      	ldr	r0, [pc, #64]	; (8005a20 <_fAT_GET_AUTHOR+0xc0>)
 80059de:	f000 fa83 	bl	8005ee8 <DCU_Response_AT>
}
 80059e2:	bd10      	pop	{r4, pc}
 80059e4:	08008663 	.word	0x08008663
 80059e8:	08008691 	.word	0x08008691
 80059ec:	080086bd 	.word	0x080086bd
 80059f0:	080086ea 	.word	0x080086ea
 80059f4:	08008708 	.word	0x08008708
 80059f8:	0800872a 	.word	0x0800872a
 80059fc:	0800874e 	.word	0x0800874e
 8005a00:	0800876d 	.word	0x0800876d
 8005a04:	08008775 	.word	0x08008775
 8005a08:	080087a3 	.word	0x080087a3
 8005a0c:	080087d1 	.word	0x080087d1
 8005a10:	080087ff 	.word	0x080087ff
 8005a14:	0800882d 	.word	0x0800882d
 8005a18:	0800885b 	.word	0x0800885b
 8005a1c:	08008889 	.word	0x08008889
 8005a20:	080088b7 	.word	0x080088b7

08005a24 <_fAT_SET_DUTY_WAKEUP>:
{
 8005a24:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 < (Pos + 5))
 8005a26:	8883      	ldrh	r3, [r0, #4]
 8005a28:	1d0c      	adds	r4, r1, #4
 8005a2a:	429c      	cmp	r4, r3
 8005a2c:	db04      	blt.n	8005a38 <_fAT_SET_DUTY_WAKEUP+0x14>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4815      	ldr	r0, [pc, #84]	; (8005a88 <_fAT_SET_DUTY_WAKEUP+0x64>)
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005a32:	f000 fa59 	bl	8005ee8 <DCU_Response_AT>
}
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a38:	220a      	movs	r2, #10
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	1c4d      	adds	r5, r1, #1
 8005a3e:	5c43      	ldrb	r3, [r0, r1]
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a40:	b2ad      	uxth	r5, r5
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a42:	3b30      	subs	r3, #48	; 0x30
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a44:	4353      	muls	r3, r2
 8005a46:	5d45      	ldrb	r5, [r0, r5]
    Pos++;
 8005a48:	3103      	adds	r1, #3
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a4a:	195b      	adds	r3, r3, r5
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a4c:	b289      	uxth	r1, r1
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a4e:	b2db      	uxtb	r3, r3
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a50:	b2a4      	uxth	r4, r4
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a52:	5c45      	ldrb	r5, [r0, r1]
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a54:	5d01      	ldrb	r1, [r0, r4]
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 8005a56:	0018      	movs	r0, r3
 8005a58:	3831      	subs	r0, #49	; 0x31
 8005a5a:	2809      	cmp	r0, #9
 8005a5c:	d811      	bhi.n	8005a82 <_fAT_SET_DUTY_WAKEUP+0x5e>
    TempFre = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a5e:	3d30      	subs	r5, #48	; 0x30
    TempFre = TempFre * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a60:	436a      	muls	r2, r5
 8005a62:	3930      	subs	r1, #48	; 0x30
 8005a64:	1852      	adds	r2, r2, r1
 8005a66:	b292      	uxth	r2, r2
    if (((TempNum > 0) && (TempNum <= MAX_NUMBER_WAKE_UP)) && (TempFre <= 100))
 8005a68:	2a64      	cmp	r2, #100	; 0x64
 8005a6a:	d80a      	bhi.n	8005a82 <_fAT_SET_DUTY_WAKEUP+0x5e>
        sFreqInfor.NumWakeup_u8 = TempNum;
 8005a6c:	4907      	ldr	r1, [pc, #28]	; (8005a8c <_fAT_SET_DUTY_WAKEUP+0x68>)
    TempNum = TempNum * 10 + *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005a6e:	3b30      	subs	r3, #48	; 0x30
        sFreqInfor.NumWakeup_u8 = TempNum;
 8005a70:	700b      	strb	r3, [r1, #0]
        sFreqInfor.FreqWakeup_u32 = TempFre;
 8005a72:	804a      	strh	r2, [r1, #2]
        Save_Freq_Send_Data();
 8005a74:	f000 fb4e 	bl	8006114 <Save_Freq_Send_Data>
        Reset_Chip_Immediately();
 8005a78:	f000 fa28 	bl	8005ecc <Reset_Chip_Immediately>
        DCU_Response_AT ((uint8_t *)"OK", 2);
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4804      	ldr	r0, [pc, #16]	; (8005a90 <_fAT_SET_DUTY_WAKEUP+0x6c>)
 8005a80:	e7d7      	b.n	8005a32 <_fAT_SET_DUTY_WAKEUP+0xe>
    	DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005a82:	2105      	movs	r1, #5
 8005a84:	4803      	ldr	r0, [pc, #12]	; (8005a94 <_fAT_SET_DUTY_WAKEUP+0x70>)
 8005a86:	e7d4      	b.n	8005a32 <_fAT_SET_DUTY_WAKEUP+0xe>
 8005a88:	080088eb 	.word	0x080088eb
 8005a8c:	20000114 	.word	0x20000114
 8005a90:	080088f0 	.word	0x080088f0
 8005a94:	080088f3 	.word	0x080088f3

08005a98 <_fAT_RESET_MODEM>:
{
 8005a98:	b510      	push	{r4, lr}
	DCU_Response_AT((uint8_t *)"OK", 2);
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	4808      	ldr	r0, [pc, #32]	; (8005ac0 <_fAT_RESET_MODEM+0x28>)
 8005a9e:	f000 fa23 	bl	8005ee8 <DCU_Response_AT>
	sFreqInfor.NumWakeup_u8 = 1;
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <_fAT_RESET_MODEM+0x2c>)
 8005aa6:	701a      	strb	r2, [r3, #0]
	sFreqInfor.FreqWakeup_u32 = 100;
 8005aa8:	3263      	adds	r2, #99	; 0x63
 8005aaa:	805a      	strh	r2, [r3, #2]
	Save_Freq_Send_Data();
 8005aac:	f000 fb32 	bl	8006114 <Save_Freq_Send_Data>
		sModem.TypeModem_u8 = _LORA_STATION;
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <_fAT_RESET_MODEM+0x30>)
 8005ab4:	761a      	strb	r2, [r3, #24]
	Save_Device_Type();
 8005ab6:	f000 fb7d 	bl	80061b4 <Save_Device_Type>
    Reset_Chip_Immediately();
 8005aba:	f000 fa07 	bl	8005ecc <Reset_Chip_Immediately>
}
 8005abe:	bd10      	pop	{r4, pc}
 8005ac0:	080088f0 	.word	0x080088f0
 8005ac4:	20000114 	.word	0x20000114
 8005ac8:	200000c0 	.word	0x200000c0

08005acc <_fAT_SET_RTC>:
{
 8005acc:	b530      	push	{r4, r5, lr}
 8005ace:	0005      	movs	r5, r0
 8005ad0:	b085      	sub	sp, #20
	ST_TIME_FORMAT    sRTC_temp = {0};
 8005ad2:	ac01      	add	r4, sp, #4
 8005ad4:	220c      	movs	r2, #12
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	0020      	movs	r0, r4
 8005ada:	f001 ff47 	bl	800796c <memset>
	if((*(str_Receiv->Data_a8+1)!= '-')||(*(str_Receiv->Data_a8+4)!= '-')|| (*(str_Receiv->Data_a8+7)!= '-') ||
 8005ade:	682b      	ldr	r3, [r5, #0]
 8005ae0:	785a      	ldrb	r2, [r3, #1]
 8005ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8005ae4:	d10e      	bne.n	8005b04 <_fAT_SET_RTC+0x38>
 8005ae6:	791a      	ldrb	r2, [r3, #4]
 8005ae8:	2a2d      	cmp	r2, #45	; 0x2d
 8005aea:	d10b      	bne.n	8005b04 <_fAT_SET_RTC+0x38>
 8005aec:	79da      	ldrb	r2, [r3, #7]
 8005aee:	2a2d      	cmp	r2, #45	; 0x2d
 8005af0:	d108      	bne.n	8005b04 <_fAT_SET_RTC+0x38>
 8005af2:	7a9a      	ldrb	r2, [r3, #10]
 8005af4:	2a2c      	cmp	r2, #44	; 0x2c
 8005af6:	d105      	bne.n	8005b04 <_fAT_SET_RTC+0x38>
		(*(str_Receiv->Data_a8+10)!= ',')||(*(str_Receiv->Data_a8+13)!= ':')||(*(str_Receiv->Data_a8+16)!= ':'))
 8005af8:	7b5a      	ldrb	r2, [r3, #13]
 8005afa:	2a3a      	cmp	r2, #58	; 0x3a
 8005afc:	d102      	bne.n	8005b04 <_fAT_SET_RTC+0x38>
 8005afe:	7c1a      	ldrb	r2, [r3, #16]
 8005b00:	2a3a      	cmp	r2, #58	; 0x3a
 8005b02:	d005      	beq.n	8005b10 <_fAT_SET_RTC+0x44>
		DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005b04:	2105      	movs	r1, #5
 8005b06:	4820      	ldr	r0, [pc, #128]	; (8005b88 <_fAT_SET_RTC+0xbc>)
			DCU_Response_AT((uint8_t *)"OK", 2);
 8005b08:	f000 f9ee 	bl	8005ee8 <DCU_Response_AT>
}
 8005b0c:	b005      	add	sp, #20
 8005b0e:	bd30      	pop	{r4, r5, pc}
		sRTC_temp.day   = (*(str_Receiv->Data_a8))-0x30 - 1;
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	3a31      	subs	r2, #49	; 0x31
 8005b14:	70e2      	strb	r2, [r4, #3]
		sRTC_temp.date  = ((*(str_Receiv->Data_a8 + 2))-0x30)*10 + (*(str_Receiv->Data_a8 + 3) - 0x30);
 8005b16:	220a      	movs	r2, #10
 8005b18:	7899      	ldrb	r1, [r3, #2]
 8005b1a:	78d8      	ldrb	r0, [r3, #3]
 8005b1c:	4351      	muls	r1, r2
 8005b1e:	3810      	subs	r0, #16
 8005b20:	1809      	adds	r1, r1, r0
 8005b22:	7121      	strb	r1, [r4, #4]
		sRTC_temp.month = ((*(str_Receiv->Data_a8 + 5))-0x30)*10 + (*(str_Receiv->Data_a8 + 6) - 0x30);
 8005b24:	7959      	ldrb	r1, [r3, #5]
 8005b26:	7998      	ldrb	r0, [r3, #6]
 8005b28:	4351      	muls	r1, r2
 8005b2a:	3810      	subs	r0, #16
 8005b2c:	1809      	adds	r1, r1, r0
 8005b2e:	7161      	strb	r1, [r4, #5]
		sRTC_temp.year  = ((*(str_Receiv->Data_a8 + 8))-0x30)*10 + (*(str_Receiv->Data_a8 + 9) - 0x30);
 8005b30:	7a19      	ldrb	r1, [r3, #8]
 8005b32:	7a58      	ldrb	r0, [r3, #9]
 8005b34:	4351      	muls	r1, r2
 8005b36:	3810      	subs	r0, #16
 8005b38:	1809      	adds	r1, r1, r0
 8005b3a:	71a1      	strb	r1, [r4, #6]
		sRTC_temp.hour  = ((*(str_Receiv->Data_a8 + 11))-0x30)*10 + (*(str_Receiv->Data_a8 + 12) - 0x30);
 8005b3c:	7ad9      	ldrb	r1, [r3, #11]
 8005b3e:	7b18      	ldrb	r0, [r3, #12]
 8005b40:	4351      	muls	r1, r2
 8005b42:	3810      	subs	r0, #16
 8005b44:	1809      	adds	r1, r1, r0
 8005b46:	7021      	strb	r1, [r4, #0]
		sRTC_temp.min   = ((*(str_Receiv->Data_a8 + 14))-0x30)*10 + (*(str_Receiv->Data_a8 + 15) - 0x30);
 8005b48:	7b99      	ldrb	r1, [r3, #14]
 8005b4a:	7bd8      	ldrb	r0, [r3, #15]
 8005b4c:	4351      	muls	r1, r2
 8005b4e:	3810      	subs	r0, #16
 8005b50:	1809      	adds	r1, r1, r0
 8005b52:	7061      	strb	r1, [r4, #1]
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 8005b54:	7c59      	ldrb	r1, [r3, #17]
 8005b56:	7c9b      	ldrb	r3, [r3, #18]
 8005b58:	434a      	muls	r2, r1
 8005b5a:	3b10      	subs	r3, #16
 8005b5c:	18d2      	adds	r2, r2, r3
		if (Check_update_Time(&sRTC_temp) != 1)
 8005b5e:	0020      	movs	r0, r4
		sRTC_temp.sec   = ((*(str_Receiv->Data_a8 + 17))-0x30)*10 + (*(str_Receiv->Data_a8 + 18) - 0x30);
 8005b60:	70a2      	strb	r2, [r4, #2]
		if (Check_update_Time(&sRTC_temp) != 1)
 8005b62:	f001 fa0f 	bl	8006f84 <Check_update_Time>
 8005b66:	2801      	cmp	r0, #1
 8005b68:	d1cc      	bne.n	8005b04 <_fAT_SET_RTC+0x38>
			sRTCSet.hour    = sRTC_temp.hour;
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <_fAT_SET_RTC+0xc0>)
			sRTCSet.year    = sRTC_temp.year;
 8005b6c:	79a2      	ldrb	r2, [r4, #6]
			sRTCSet.date    = sRTC_temp.date;
 8005b6e:	88a1      	ldrh	r1, [r4, #4]
			sRTCSet.hour    = sRTC_temp.hour;
 8005b70:	9801      	ldr	r0, [sp, #4]
			sRTCSet.year    = sRTC_temp.year;
 8005b72:	719a      	strb	r2, [r3, #6]
			sRTCSet.date    = sRTC_temp.date;
 8005b74:	8099      	strh	r1, [r3, #4]
			Set_RTC(sRTCSet);
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	689a      	ldr	r2, [r3, #8]
			sRTCSet.hour    = sRTC_temp.hour;
 8005b7a:	6018      	str	r0, [r3, #0]
			Set_RTC(sRTCSet);
 8005b7c:	f001 fa1e 	bl	8006fbc <Set_RTC>
			DCU_Response_AT((uint8_t *)"OK", 2);
 8005b80:	2102      	movs	r1, #2
 8005b82:	4803      	ldr	r0, [pc, #12]	; (8005b90 <_fAT_SET_RTC+0xc4>)
 8005b84:	e7c0      	b.n	8005b08 <_fAT_SET_RTC+0x3c>
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	080088f3 	.word	0x080088f3
 8005b8c:	20001110 	.word	0x20001110
 8005b90:	080088f0 	.word	0x080088f0

08005b94 <_fAT_SET_DEVICE_ID>:
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8005b94:	000b      	movs	r3, r1
{
 8005b96:	b570      	push	{r4, r5, r6, lr}
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8005b98:	8882      	ldrh	r2, [r0, #4]
 8005b9a:	3314      	adds	r3, #20
{
 8005b9c:	0005      	movs	r5, r0
 8005b9e:	000c      	movs	r4, r1
    if (str_Receivv->Length_u16 <= (Pos + 20))
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	dc21      	bgt.n	8005be8 <_fAT_SET_DEVICE_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	4813      	ldr	r0, [pc, #76]	; (8005bf4 <_fAT_SET_DEVICE_ID+0x60>)
 8005ba8:	f000 f99e 	bl	8005ee8 <DCU_Response_AT>
        UTIL_MEM_set(&aDCU_ID, 0, sizeof(aDCU_ID));
 8005bac:	2214      	movs	r2, #20
 8005bae:	2100      	movs	r1, #0
 8005bb0:	4811      	ldr	r0, [pc, #68]	; (8005bf8 <_fAT_SET_DEVICE_ID+0x64>)
 8005bb2:	f001 fbbb 	bl	800732c <UTIL_MEM_set>
        sModem.sDCU_id.Length_u16 = 0;
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <_fAT_SET_DEVICE_ID+0x68>)
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005bba:	b2e1      	uxtb	r1, r4
        sModem.sDCU_id.Length_u16 = 0;
 8005bbc:	809a      	strh	r2, [r3, #4]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005bbe:	88aa      	ldrh	r2, [r5, #4]
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	d805      	bhi.n	8005bd0 <_fAT_SET_DEVICE_ID+0x3c>
        Save_ID(0);
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f000 fa3d 	bl	8006044 <Save_ID>
        Reset_Chip_Immediately();
 8005bca:	f000 f97f 	bl	8005ecc <Reset_Chip_Immediately>
}
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sDCU_id.Length_u16 >= sizeof(aDCU_ID))
 8005bd0:	889a      	ldrh	r2, [r3, #4]
 8005bd2:	2a13      	cmp	r2, #19
 8005bd4:	d8f6      	bhi.n	8005bc4 <_fAT_SET_DEVICE_ID+0x30>
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8005bd6:	682c      	ldr	r4, [r5, #0]
 8005bd8:	1c56      	adds	r6, r2, #1
 8005bda:	809e      	strh	r6, [r3, #4]
 8005bdc:	5c64      	ldrb	r4, [r4, r1]
 8005bde:	6818      	ldr	r0, [r3, #0]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005be0:	3101      	adds	r1, #1
        	sModem.sDCU_id.Data_a8[sModem.sDCU_id.Length_u16++] = *(str_Receivv->Data_a8 + i);
 8005be2:	5484      	strb	r4, [r0, r2]
        for (i = Pos; i < (str_Receivv->Length_u16); i++)
 8005be4:	b2c9      	uxtb	r1, r1
 8005be6:	e7ea      	b.n	8005bbe <_fAT_SET_DEVICE_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005be8:	2104      	movs	r1, #4
 8005bea:	4805      	ldr	r0, [pc, #20]	; (8005c00 <_fAT_SET_DEVICE_ID+0x6c>)
 8005bec:	f000 f97c 	bl	8005ee8 <DCU_Response_AT>
}
 8005bf0:	e7ed      	b.n	8005bce <_fAT_SET_DEVICE_ID+0x3a>
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	080088f0 	.word	0x080088f0
 8005bf8:	2000013c 	.word	0x2000013c
 8005bfc:	200000c0 	.word	0x200000c0
 8005c00:	080088eb 	.word	0x080088eb

08005c04 <_fAT_SET_NETWORK_ID>:
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8005c04:	000b      	movs	r3, r1
{
 8005c06:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8005c08:	8882      	ldrh	r2, [r0, #4]
 8005c0a:	3314      	adds	r3, #20
{
 8005c0c:	0005      	movs	r5, r0
 8005c0e:	000c      	movs	r4, r1
    if (str_Receiv->Length_u16 <= (Pos + 20))
 8005c10:	429a      	cmp	r2, r3
 8005c12:	dc21      	bgt.n	8005c58 <_fAT_SET_NETWORK_ID+0x54>
    	DCU_Response_AT ((uint8_t *)"OK", 2);
 8005c14:	2102      	movs	r1, #2
 8005c16:	4813      	ldr	r0, [pc, #76]	; (8005c64 <_fAT_SET_NETWORK_ID+0x60>)
 8005c18:	f000 f966 	bl	8005ee8 <DCU_Response_AT>
        UTIL_MEM_set(&aNET_ID, 0, sizeof(aNET_ID));
 8005c1c:	2214      	movs	r2, #20
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4811      	ldr	r0, [pc, #68]	; (8005c68 <_fAT_SET_NETWORK_ID+0x64>)
 8005c22:	f001 fb83 	bl	800732c <UTIL_MEM_set>
        sModem.sNET_id.Length_u16 = 0;
 8005c26:	2200      	movs	r2, #0
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <_fAT_SET_NETWORK_ID+0x68>)
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c2a:	b2e1      	uxtb	r1, r4
        sModem.sNET_id.Length_u16 = 0;
 8005c2c:	819a      	strh	r2, [r3, #12]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c2e:	88aa      	ldrh	r2, [r5, #4]
 8005c30:	428a      	cmp	r2, r1
 8005c32:	d805      	bhi.n	8005c40 <_fAT_SET_NETWORK_ID+0x3c>
        Save_ID(1);
 8005c34:	2001      	movs	r0, #1
 8005c36:	f000 fa05 	bl	8006044 <Save_ID>
        Reset_Chip_Immediately();
 8005c3a:	f000 f947 	bl	8005ecc <Reset_Chip_Immediately>
}
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
            if (sModem.sNET_id.Length_u16 >= sizeof(aNET_ID))
 8005c40:	899a      	ldrh	r2, [r3, #12]
 8005c42:	2a13      	cmp	r2, #19
 8005c44:	d8f6      	bhi.n	8005c34 <_fAT_SET_NETWORK_ID+0x30>
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 8005c46:	682c      	ldr	r4, [r5, #0]
 8005c48:	1c56      	adds	r6, r2, #1
 8005c4a:	819e      	strh	r6, [r3, #12]
 8005c4c:	5c64      	ldrb	r4, [r4, r1]
 8005c4e:	6898      	ldr	r0, [r3, #8]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c50:	3101      	adds	r1, #1
        	sModem.sNET_id.Data_a8[sModem.sNET_id.Length_u16++] = *(str_Receiv->Data_a8 + i);
 8005c52:	5484      	strb	r4, [r0, r2]
        for (i = Pos; i < (str_Receiv->Length_u16); i++)
 8005c54:	b2c9      	uxtb	r1, r1
 8005c56:	e7ea      	b.n	8005c2e <_fAT_SET_NETWORK_ID+0x2a>
    	DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005c58:	2104      	movs	r1, #4
 8005c5a:	4805      	ldr	r0, [pc, #20]	; (8005c70 <_fAT_SET_NETWORK_ID+0x6c>)
 8005c5c:	f000 f944 	bl	8005ee8 <DCU_Response_AT>
}
 8005c60:	e7ed      	b.n	8005c3e <_fAT_SET_NETWORK_ID+0x3a>
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	080088f0 	.word	0x080088f0
 8005c68:	20000128 	.word	0x20000128
 8005c6c:	200000c0 	.word	0x200000c0
 8005c70:	080088eb 	.word	0x080088eb

08005c74 <_fAT_SET_TYPE_MODEM>:
{
 8005c74:	b510      	push	{r4, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8005c76:	8883      	ldrh	r3, [r0, #4]
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	d804      	bhi.n	8005c86 <_fAT_SET_TYPE_MODEM+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <_fAT_SET_TYPE_MODEM+0x30>)
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005c80:	f000 f932 	bl	8005ee8 <DCU_Response_AT>
}
 8005c84:	bd10      	pop	{r4, pc}
    TempNum = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005c86:	6803      	ldr	r3, [r0, #0]
		if (TempNum == 2)
 8005c88:	5c5b      	ldrb	r3, [r3, r1]
 8005c8a:	2b32      	cmp	r3, #50	; 0x32
 8005c8c:	d107      	bne.n	8005c9e <_fAT_SET_TYPE_MODEM+0x2a>
			sModem.TypeModem_u8 = _LORA_STATION;
 8005c8e:	2402      	movs	r4, #2
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <_fAT_SET_TYPE_MODEM+0x34>)
 8005c92:	761c      	strb	r4, [r3, #24]
			Save_Device_Type();
 8005c94:	f000 fa8e 	bl	80061b4 <Save_Device_Type>
			DCU_Response_AT ((uint8_t *)"OK", 2);
 8005c98:	0021      	movs	r1, r4
 8005c9a:	4804      	ldr	r0, [pc, #16]	; (8005cac <_fAT_SET_TYPE_MODEM+0x38>)
 8005c9c:	e7f0      	b.n	8005c80 <_fAT_SET_TYPE_MODEM+0xc>
			DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005c9e:	2105      	movs	r1, #5
 8005ca0:	4803      	ldr	r0, [pc, #12]	; (8005cb0 <_fAT_SET_TYPE_MODEM+0x3c>)
 8005ca2:	e7ed      	b.n	8005c80 <_fAT_SET_TYPE_MODEM+0xc>
 8005ca4:	080088eb 	.word	0x080088eb
 8005ca8:	200000c0 	.word	0x200000c0
 8005cac:	080088f0 	.word	0x080088f0
 8005cb0:	080088f3 	.word	0x080088f3

08005cb4 <_fAT_SET_MODE>:
{
 8005cb4:	b570      	push	{r4, r5, r6, lr}
    if (str_Receiv->Length_u16 < (Pos + 1))
 8005cb6:	8883      	ldrh	r3, [r0, #4]
 8005cb8:	428b      	cmp	r3, r1
 8005cba:	d804      	bhi.n	8005cc6 <_fAT_SET_MODE+0x12>
        DCU_Response_AT((uint8_t *)"FAIL", 4);
 8005cbc:	2104      	movs	r1, #4
 8005cbe:	4824      	ldr	r0, [pc, #144]	; (8005d50 <_fAT_SET_MODE+0x9c>)
				DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005cc0:	f000 f912 	bl	8005ee8 <DCU_Response_AT>
				break;
 8005cc4:	e01c      	b.n	8005d00 <_fAT_SET_MODE+0x4c>
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005cc6:	6803      	ldr	r3, [r0, #0]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8005cc8:	2004      	movs	r0, #4
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005cca:	5c5c      	ldrb	r4, [r3, r1]
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8005ccc:	4921      	ldr	r1, [pc, #132]	; (8005d54 <_fAT_SET_MODE+0xa0>)
    TempMode = *(str_Receiv->Data_a8 + Pos++) - 0x30;
 8005cce:	3c30      	subs	r4, #48	; 0x30
 8005cd0:	b2e4      	uxtb	r4, r4
    LOG(LOG_INFOR, "Mode: %d", TempMode);
 8005cd2:	0022      	movs	r2, r4
 8005cd4:	f001 fb2e 	bl	8007334 <LOG>
		switch (TempMode)
 8005cd8:	2c01      	cmp	r4, #1
 8005cda:	d012      	beq.n	8005d02 <_fAT_SET_MODE+0x4e>
 8005cdc:	2c02      	cmp	r4, #2
 8005cde:	d022      	beq.n	8005d26 <_fAT_SET_MODE+0x72>
 8005ce0:	2c00      	cmp	r4, #0
 8005ce2:	d131      	bne.n	8005d48 <_fAT_SET_MODE+0x94>
				sModem.Mode = _MODE_SLEEP;
 8005ce4:	4d1c      	ldr	r5, [pc, #112]	; (8005d58 <_fAT_SET_MODE+0xa4>)
				sModem.SendAll = 1;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	002e      	movs	r6, r5
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005cea:	2102      	movs	r1, #2
 8005cec:	481b      	ldr	r0, [pc, #108]	; (8005d5c <_fAT_SET_MODE+0xa8>)
				sModem.SendAll = 1;
 8005cee:	3650      	adds	r6, #80	; 0x50
 8005cf0:	7033      	strb	r3, [r6, #0]
				sModem.Mode = _MODE_SLEEP;
 8005cf2:	766c      	strb	r4, [r5, #25]
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005cf4:	f000 f8f8 	bl	8005ee8 <DCU_Response_AT>
				USER_Payload_Station_Mode(sModem.TimeDelayNetwork_u32);
 8005cf8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005cfa:	f000 fb0d 	bl	8006318 <USER_Payload_Station_Mode>
				sModem.SendAll = 0;
 8005cfe:	7034      	strb	r4, [r6, #0]
}
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
				sModem.Mode = _MODE_WAKEUP;
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <_fAT_SET_MODE+0xa4>)
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d04:	2102      	movs	r1, #2
 8005d06:	4815      	ldr	r0, [pc, #84]	; (8005d5c <_fAT_SET_MODE+0xa8>)
				sModem.Mode = _MODE_WAKEUP;
 8005d08:	765c      	strb	r4, [r3, #25]
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d0a:	f000 f8ed 	bl	8005ee8 <DCU_Response_AT>
				UTIL_TIMER_SetPeriod (&TimerLoraTx, sFreqInfor.FreqWakeup_u32 * 1000 * 3);
 8005d0e:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <_fAT_SET_MODE+0xac>)
 8005d10:	4c14      	ldr	r4, [pc, #80]	; (8005d64 <_fAT_SET_MODE+0xb0>)
 8005d12:	885b      	ldrh	r3, [r3, #2]
 8005d14:	4914      	ldr	r1, [pc, #80]	; (8005d68 <_fAT_SET_MODE+0xb4>)
 8005d16:	0020      	movs	r0, r4
 8005d18:	4359      	muls	r1, r3
 8005d1a:	f001 fa79 	bl	8007210 <UTIL_TIMER_SetPeriod>
				UTIL_TIMER_Start (&TimerLoraTx);
 8005d1e:	0020      	movs	r0, r4
 8005d20:	f001 fa3e 	bl	80071a0 <UTIL_TIMER_Start>
				break;
 8005d24:	e7ec      	b.n	8005d00 <_fAT_SET_MODE+0x4c>
				sModem.Mode = _MODE_MEASURE;
 8005d26:	4d0c      	ldr	r5, [pc, #48]	; (8005d58 <_fAT_SET_MODE+0xa4>)
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d28:	0021      	movs	r1, r4
 8005d2a:	480c      	ldr	r0, [pc, #48]	; (8005d5c <_fAT_SET_MODE+0xa8>)
				sModem.Mode = _MODE_MEASURE;
 8005d2c:	766c      	strb	r4, [r5, #25]
				sModem.SendAll = 1;
 8005d2e:	002c      	movs	r4, r5
				DCU_Response_AT((uint8_t *)"OK", 2);
 8005d30:	f000 f8da 	bl	8005ee8 <DCU_Response_AT>
				sModem.SendAll = 1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	3450      	adds	r4, #80	; 0x50
				USER_Payload_Station_Mode(sModem.TimeDelayNetwork_u32);
 8005d38:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
				sModem.SendAll = 1;
 8005d3a:	7023      	strb	r3, [r4, #0]
				USER_Payload_Station_Mode(sModem.TimeDelayNetwork_u32);
 8005d3c:	f000 faec 	bl	8006318 <USER_Payload_Station_Mode>
				sModem.SendAll = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	7023      	strb	r3, [r4, #0]
				sModem.Mode = _MODE_SLEEP;
 8005d44:	766b      	strb	r3, [r5, #25]
				break;
 8005d46:	e7db      	b.n	8005d00 <_fAT_SET_MODE+0x4c>
				DCU_Response_AT((uint8_t *)"ERROR", 5);
 8005d48:	2105      	movs	r1, #5
 8005d4a:	4808      	ldr	r0, [pc, #32]	; (8005d6c <_fAT_SET_MODE+0xb8>)
 8005d4c:	e7b8      	b.n	8005cc0 <_fAT_SET_MODE+0xc>
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	080088eb 	.word	0x080088eb
 8005d54:	08008abd 	.word	0x08008abd
 8005d58:	200000c0 	.word	0x200000c0
 8005d5c:	080088f0 	.word	0x080088f0
 8005d60:	20000114 	.word	0x20000114
 8005d64:	2000044c 	.word	0x2000044c
 8005d68:	00000bb8 	.word	0x00000bb8
 8005d6c:	080088f3 	.word	0x080088f3

08005d70 <_fAT_GET_FIRM_VER>:
 8005d70:	4770      	bx	lr
	...

08005d74 <Check_AT_User>:
{
 8005d74:	b5f0      	push	{r4, r5, r6, r7, lr}
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8005d76:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <Check_AT_User+0xe8>)
{
 8005d78:	b085      	sub	sp, #20
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	2300      	movs	r3, #0
{
 8005d7e:	0004      	movs	r4, r0
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8005d80:	2102      	movs	r1, #2
	sData sDataConfig = {&aDATA_CONFIG[0], 0};
 8005d82:	aa02      	add	r2, sp, #8
 8005d84:	8093      	strh	r3, [r2, #4]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 8005d86:	88a2      	ldrh	r2, [r4, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d825      	bhi.n	8005dd8 <Check_AT_User+0x64>
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	4f34      	ldr	r7, [pc, #208]	; (8005e60 <Check_AT_User+0xec>)
		Pos_Str = Find_String_V2((sData*) &CheckList_AT_CONFIG[var].sTempReceiver, StrUartRecei);
 8005d90:	0038      	movs	r0, r7
 8005d92:	0021      	movs	r1, r4
 8005d94:	3008      	adds	r0, #8
 8005d96:	f001 f855 	bl	8006e44 <Find_String_V2>
 8005d9a:	1e06      	subs	r6, r0, #0
		if ((Pos_Str >= 0) && (CheckList_AT_CONFIG[var].CallBack != NULL))
 8005d9c:	db58      	blt.n	8005e50 <Check_AT_User+0xdc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d054      	beq.n	8005e50 <Check_AT_User+0xdc>
			Reset_Buff(&sModem.strATCmd);
 8005da6:	482f      	ldr	r0, [pc, #188]	; (8005e64 <Check_AT_User+0xf0>)
 8005da8:	f001 fa8c 	bl	80072c4 <Reset_Buff>
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005dac:	2300      	movs	r3, #0
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8005dae:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <Check_AT_User+0xf4>)
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005db0:	88a1      	ldrh	r1, [r4, #4]
 8005db2:	1b89      	subs	r1, r1, r6
 8005db4:	428b      	cmp	r3, r1
 8005db6:	db1f      	blt.n	8005df8 <Check_AT_User+0x84>
			Pos_Str += CheckList_AT_CONFIG[var].sTempReceiver.Length_u16;
 8005db8:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <Check_AT_User+0xec>)
 8005dba:	012d      	lsls	r5, r5, #4
 8005dbc:	195b      	adds	r3, r3, r5
 8005dbe:	899b      	ldrh	r3, [r3, #12]
 8005dc0:	199b      	adds	r3, r3, r6
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 8005dc2:	88a2      	ldrh	r2, [r4, #4]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d82b      	bhi.n	8005e22 <Check_AT_User+0xae>
			CheckList_AT_CONFIG[var].CallBack(&sDataConfig, 0);
 8005dca:	a802      	add	r0, sp, #8
 8005dcc:	2100      	movs	r1, #0
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	4798      	blx	r3
			return 1;
 8005dd2:	2001      	movs	r0, #1
}
 8005dd4:	b005      	add	sp, #20
 8005dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((*(StrUartRecei->Data_a8 + i) == '=') || (*(StrUartRecei->Data_a8 + i) == '?'))
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	18d0      	adds	r0, r2, r3
 8005ddc:	5cd2      	ldrb	r2, [r2, r3]
 8005dde:	0015      	movs	r5, r2
 8005de0:	438d      	bics	r5, r1
 8005de2:	2d3d      	cmp	r5, #61	; 0x3d
 8005de4:	d0d2      	beq.n	8005d8c <Check_AT_User+0x18>
		if ((*(StrUartRecei->Data_a8 + i) >= 0x41) && (*(StrUartRecei->Data_a8 + i) <= 0x5A))
 8005de6:	0015      	movs	r5, r2
 8005de8:	3d41      	subs	r5, #65	; 0x41
 8005dea:	2d19      	cmp	r5, #25
 8005dec:	d801      	bhi.n	8005df2 <Check_AT_User+0x7e>
			*(StrUartRecei->Data_a8 + i) = *(StrUartRecei->Data_a8 + i) + 0x20;
 8005dee:	3220      	adds	r2, #32
 8005df0:	7002      	strb	r2, [r0, #0]
	for (i = 0; i < StrUartRecei->Length_u16; i++)
 8005df2:	3301      	adds	r3, #1
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	e7c6      	b.n	8005d86 <Check_AT_User+0x12>
				if ((*(StrUartRecei->Data_a8 + Pos_Str + i) == '?') || (*(StrUartRecei->Data_a8+Pos_Str+i) == '=') \
 8005df8:	6827      	ldr	r7, [r4, #0]
 8005dfa:	1999      	adds	r1, r3, r6
 8005dfc:	1878      	adds	r0, r7, r1
 8005dfe:	5c79      	ldrb	r1, [r7, r1]
 8005e00:	2702      	movs	r7, #2
 8005e02:	43b9      	bics	r1, r7
 8005e04:	293d      	cmp	r1, #61	; 0x3d
 8005e06:	d0d7      	beq.n	8005db8 <Check_AT_User+0x44>
						|| (sModem.strATCmd.Length_u16 >= LEGNTH_AT_SERIAL))
 8005e08:	8f91      	ldrh	r1, [r2, #60]	; 0x3c
 8005e0a:	29ff      	cmp	r1, #255	; 0xff
 8005e0c:	d8d4      	bhi.n	8005db8 <Check_AT_User+0x44>
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8005e0e:	6b97      	ldr	r7, [r2, #56]	; 0x38
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005e10:	3301      	adds	r3, #1
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8005e12:	46bc      	mov	ip, r7
 8005e14:	1c4f      	adds	r7, r1, #1
 8005e16:	8797      	strh	r7, [r2, #60]	; 0x3c
 8005e18:	4667      	mov	r7, ip
 8005e1a:	7800      	ldrb	r0, [r0, #0]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005e1c:	b29b      	uxth	r3, r3
					*(sModem.strATCmd.Data_a8 + sModem.strATCmd.Length_u16++) = *(StrUartRecei->Data_a8+Pos_Str+i);
 8005e1e:	5478      	strb	r0, [r7, r1]
			for (i = 0; i <(StrUartRecei->Length_u16 - Pos_Str); i++)
 8005e20:	e7c6      	b.n	8005db0 <Check_AT_User+0x3c>
				if (*(StrUartRecei->Data_a8 + i) == 0x0D)
 8005e22:	6821      	ldr	r1, [r4, #0]
 8005e24:	18c8      	adds	r0, r1, r3
 8005e26:	5cc9      	ldrb	r1, [r1, r3]
 8005e28:	290d      	cmp	r1, #13
 8005e2a:	d105      	bne.n	8005e38 <Check_AT_User+0xc4>
					if ( (i < (StrUartRecei->Length_u16 - 1)) && (*(StrUartRecei->Data_a8 + i + 1) == 0x0A) )
 8005e2c:	3a01      	subs	r2, #1
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	da02      	bge.n	8005e38 <Check_AT_User+0xc4>
 8005e32:	7842      	ldrb	r2, [r0, #1]
 8005e34:	2a0a      	cmp	r2, #10
 8005e36:	d0c8      	beq.n	8005dca <Check_AT_User+0x56>
				if ( sDataConfig.Length_u16 < sizeof(aDATA_CONFIG) )
 8005e38:	aa02      	add	r2, sp, #8
 8005e3a:	8892      	ldrh	r2, [r2, #4]
 8005e3c:	2a7f      	cmp	r2, #127	; 0x7f
 8005e3e:	d805      	bhi.n	8005e4c <Check_AT_User+0xd8>
					*(sDataConfig.Data_a8 + sDataConfig.Length_u16++) = *(StrUartRecei->Data_a8 + i);
 8005e40:	1c55      	adds	r5, r2, #1
 8005e42:	ae02      	add	r6, sp, #8
 8005e44:	80b5      	strh	r5, [r6, #4]
 8005e46:	9902      	ldr	r1, [sp, #8]
 8005e48:	7800      	ldrb	r0, [r0, #0]
 8005e4a:	5488      	strb	r0, [r1, r2]
			for (i = Pos_Str; i < StrUartRecei->Length_u16; i++)
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	e7b8      	b.n	8005dc2 <Check_AT_User+0x4e>
	for (var = _AT_SET_DEVICE_ID; var <= _END_AT_CMD; var++)
 8005e50:	3501      	adds	r5, #1
 8005e52:	3710      	adds	r7, #16
 8005e54:	2d10      	cmp	r5, #16
 8005e56:	d19b      	bne.n	8005d90 <Check_AT_User+0x1c>
	return 0;
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7bb      	b.n	8005dd4 <Check_AT_User+0x60>
 8005e5c:	200008b4 	.word	0x200008b4
 8005e60:	08008470 	.word	0x08008470
 8005e64:	200000f8 	.word	0x200000f8
 8005e68:	200000c0 	.word	0x200000c0

08005e6c <Flash_Get_Infor>:

/**
 * @brief	Init Infor from Flash
 */
void Flash_Get_Infor (uint32_t AddStart, uint8_t *pData, uint16_t *Length, uint8_t MAX_LEGNTH_INFOR)
{
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	0017      	movs	r7, r2
    uint8_t LenTemp = 0;

    LenTemp = *(__IO uint8_t*) (AddStart);
 8005e70:	7802      	ldrb	r2, [r0, #0]
{
 8005e72:	0005      	movs	r5, r0
    LenTemp = *(__IO uint8_t*) (AddStart);
 8005e74:	b2d2      	uxtb	r2, r2
{
 8005e76:	000e      	movs	r6, r1
 8005e78:	1c14      	adds	r4, r2, #0
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d900      	bls.n	8005e80 <Flash_Get_Infor+0x14>
 8005e7e:	1c1c      	adds	r4, r3, #0
 8005e80:	b2e4      	uxtb	r4, r4

    if (LenTemp > MAX_LEGNTH_INFOR)
        LenTemp = MAX_LEGNTH_INFOR;
    //clear buff
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 8005e82:	0030      	movs	r0, r6
 8005e84:	b29a      	uxth	r2, r3
    //Read flash
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 8005e86:	b2a4      	uxth	r4, r4
    UTIL_MEM_set (pData, 0, MAX_LEGNTH_INFOR);
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f001 fa4f 	bl	800732c <UTIL_MEM_set>
    OnchipFlashReadData ((AddStart + 1), pData, LenTemp);
 8005e8e:	0031      	movs	r1, r6
 8005e90:	1c68      	adds	r0, r5, #1
 8005e92:	0022      	movs	r2, r4
 8005e94:	f000 fdc3 	bl	8006a1e <OnchipFlashReadData>
    *Length = LenTemp;
 8005e98:	803c      	strh	r4, [r7, #0]
}
 8005e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e9c <Init_Uart_Module>:

/* Exported functions --------------------------------------------------------*/
void Init_Uart_Module (void)
{
	#ifdef DEVICE_TYPE_STATION
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <Init_Uart_Module+0x18>)
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	680a      	ldr	r2, [r1, #0]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	600a      	str	r2, [r1, #0]
		__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
 8005ea8:	4a03      	ldr	r2, [pc, #12]	; (8005eb8 <Init_Uart_Module+0x1c>)
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	6811      	ldr	r1, [r2, #0]
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	6013      	str	r3, [r2, #0]
	#else
		__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
	#endif
}
 8005eb2:	4770      	bx	lr
 8005eb4:	2000120c 	.word	0x2000120c
 8005eb8:	20001290 	.word	0x20001290

08005ebc <Modem_Init_Before_IRQ_Handle>:

	#endif
}

void Modem_Init_Before_IRQ_Handle (void)
{
 8005ebc:	b510      	push	{r4, lr}
	AppLora_Init_IO_Radio();
 8005ebe:	f7ff fba9 	bl	8005614 <AppLora_Init_IO_Radio>
}
 8005ec2:	bd10      	pop	{r4, pc}

08005ec4 <Modem_Deinit_Before_IRQ_Handle>:

void Modem_Deinit_Before_IRQ_Handle (void)
{
 8005ec4:	b510      	push	{r4, lr}
	AppLora_Deinit_IO_Radio();
 8005ec6:	f7ff fba1 	bl	800560c <AppLora_Deinit_IO_Radio>
}
 8005eca:	bd10      	pop	{r4, pc}

08005ecc <Reset_Chip_Immediately>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005ecc:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 8005ece:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ed2:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <Reset_Chip_Immediately+0x14>)
 8005ed4:	4a03      	ldr	r2, [pc, #12]	; (8005ee4 <Reset_Chip_Immediately+0x18>)
 8005ed6:	60da      	str	r2, [r3, #12]
 8005ed8:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005edc:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8005ede:	e7fd      	b.n	8005edc <Reset_Chip_Immediately+0x10>
 8005ee0:	e000ed00 	.word	0xe000ed00
 8005ee4:	05fa0004 	.word	0x05fa0004

08005ee8 <DCU_Response_AT>:
{
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 8005eea:	27fa      	movs	r7, #250	; 0xfa
{
 8005eec:	000d      	movs	r5, r1
 8005eee:	0004      	movs	r4, r0
	HAL_UART_Transmit(&uart_debug, data, length, 1000);
 8005ef0:	4e0a      	ldr	r6, [pc, #40]	; (8005f1c <DCU_Response_AT+0x34>)
 8005ef2:	00bf      	lsls	r7, r7, #2
 8005ef4:	003b      	movs	r3, r7
 8005ef6:	000a      	movs	r2, r1
 8005ef8:	0001      	movs	r1, r0
 8005efa:	0030      	movs	r0, r6
 8005efc:	f7fd fcae 	bl	800385c <HAL_UART_Transmit>
	HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n", 2, 1000);
 8005f00:	003b      	movs	r3, r7
 8005f02:	0030      	movs	r0, r6
 8005f04:	2202      	movs	r2, #2
 8005f06:	4906      	ldr	r1, [pc, #24]	; (8005f20 <DCU_Response_AT+0x38>)
 8005f08:	f7fd fca8 	bl	800385c <HAL_UART_Transmit>
	HAL_UART_Transmit(&uart_mcu, data, length, 1000);
 8005f0c:	003b      	movs	r3, r7
 8005f0e:	002a      	movs	r2, r5
 8005f10:	0021      	movs	r1, r4
 8005f12:	4804      	ldr	r0, [pc, #16]	; (8005f24 <DCU_Response_AT+0x3c>)
 8005f14:	f7fd fca2 	bl	800385c <HAL_UART_Transmit>
}
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	2000120c 	.word	0x2000120c
 8005f20:	0800876a 	.word	0x0800876a
 8005f24:	20001290 	.word	0x20001290

08005f28 <MX_GPIO_DeInit>:

void MX_GPIO_DeInit(void)
{
 8005f28:	b500      	push	{lr}
 8005f2a:	b089      	sub	sp, #36	; 0x24
	#ifdef DEVICE_TYPE_STATION
		GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005f2c:	220c      	movs	r2, #12
 8005f2e:	2100      	movs	r1, #0
 8005f30:	a805      	add	r0, sp, #20
 8005f32:	f001 fd1b 	bl	800796c <memset>

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f36:	2101      	movs	r1, #1
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <MX_GPIO_DeInit+0x44>)

		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull   = GPIO_NOPULL;

		GPIO_InitStruct.Pin = LED_BLUE_Pin;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005f3a:	480d      	ldr	r0, [pc, #52]	; (8005f70 <MX_GPIO_DeInit+0x48>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	400a      	ands	r2, r1
 8005f46:	9201      	str	r2, [sp, #4]
 8005f48:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	1849      	adds	r1, r1, r1
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	400b      	ands	r3, r1
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8005f5a:	2303      	movs	r3, #3
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005f5c:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8005f5e:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005f60:	3301      	adds	r3, #1
 8005f62:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005f64:	f7fb fce8 	bl	8001938 <HAL_GPIO_Init>

		  /* Disable GPIOs clock */
		__HAL_RCC_GPIOA_CLK_DISABLE();
		__HAL_RCC_GPIOB_CLK_DISABLE();
	#endif
}
 8005f68:	b009      	add	sp, #36	; 0x24
 8005f6a:	bd00      	pop	{pc}
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	50000400 	.word	0x50000400

08005f74 <Modem_Deinit_Peripheral>:
{
 8005f74:	b510      	push	{r4, lr}
    	__HAL_UART_DISABLE_IT(&uart_mcu, UART_IT_RXNE);
 8005f76:	2420      	movs	r4, #32
    MX_GPIO_DeInit();
 8005f78:	f7ff ffd6 	bl	8005f28 <MX_GPIO_DeInit>
	ADC_Desequence_Powerhungry_Channels();
 8005f7c:	f7ff fb9c 	bl	80056b8 <ADC_Desequence_Powerhungry_Channels>
    HAL_ADC_DeInit(&hadc);
 8005f80:	4808      	ldr	r0, [pc, #32]	; (8005fa4 <Modem_Deinit_Peripheral+0x30>)
 8005f82:	f7fb fa1f 	bl	80013c4 <HAL_ADC_DeInit>
    	__HAL_UART_DISABLE_IT(&uart_mcu, UART_IT_RXNE);
 8005f86:	4808      	ldr	r0, [pc, #32]	; (8005fa8 <Modem_Deinit_Peripheral+0x34>)
 8005f88:	6802      	ldr	r2, [r0, #0]
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	43a3      	bics	r3, r4
 8005f8e:	6013      	str	r3, [r2, #0]
    	HAL_UART_DeInit(&uart_mcu);
 8005f90:	f7fd f8d6 	bl	8003140 <HAL_UART_DeInit>
    	__HAL_UART_DISABLE_IT(&uart_debug, UART_IT_RXNE);
 8005f94:	4805      	ldr	r0, [pc, #20]	; (8005fac <Modem_Deinit_Peripheral+0x38>)
 8005f96:	6802      	ldr	r2, [r0, #0]
 8005f98:	6813      	ldr	r3, [r2, #0]
 8005f9a:	43a3      	bics	r3, r4
 8005f9c:	6013      	str	r3, [r2, #0]
    	HAL_UART_DeInit(&uart_debug);
 8005f9e:	f7fd f8cf 	bl	8003140 <HAL_UART_DeInit>
}
 8005fa2:	bd10      	pop	{r4, pc}
 8005fa4:	20001120 	.word	0x20001120
 8005fa8:	20001290 	.word	0x20001290
 8005fac:	2000120c 	.word	0x2000120c

08005fb0 <Modem_Init_Gpio_Again>:

void Modem_Init_Gpio_Again(void)
{
 8005fb0:	b530      	push	{r4, r5, lr}
	#ifdef DEVICE_TYPE_STATION
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb2:	2401      	movs	r4, #1
{
 8005fb4:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb6:	2214      	movs	r2, #20
 8005fb8:	2100      	movs	r1, #0
 8005fba:	a803      	add	r0, sp, #12
 8005fbc:	f001 fcd6 	bl	800796c <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc0:	2102      	movs	r1, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <Modem_Init_Gpio_Again+0x54>)

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005fc4:	4d10      	ldr	r5, [pc, #64]	; (8006008 <Modem_Init_Gpio_Again+0x58>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005fc8:	0028      	movs	r0, r5
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005fca:	4322      	orrs	r2, r4
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4022      	ands	r2, r4
 8005fd2:	9201      	str	r2, [sp, #4]
 8005fd4:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005fde:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	9302      	str	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005fe4:	1849      	adds	r1, r1, r1
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005fe6:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005fe8:	f7fb fdf0 	bl	8001bcc <HAL_GPIO_WritePin>

		/*Configure GPIO pin : PtPin */
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005fec:	2304      	movs	r3, #4
 8005fee:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	2300      	movs	r3, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005ff2:	0028      	movs	r0, r5
 8005ff4:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ff6:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff8:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffa:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005ffc:	f7fb fc9c 	bl	8001938 <HAL_GPIO_Init>
	    GPIO_InitStruct.Pin = ADC_VNA_Pin|ADC_VP_Pin|ADC_BAT_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	#endif
}
 8006000:	b009      	add	sp, #36	; 0x24
 8006002:	bd30      	pop	{r4, r5, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	50000400 	.word	0x50000400

0800600c <Modem_Init_Peripheral>:
{
 800600c:	b510      	push	{r4, lr}
    Modem_Init_Gpio_Again();
 800600e:	f7ff ffcf 	bl	8005fb0 <Modem_Init_Gpio_Again>
    AdcInitialized = 0;
 8006012:	2200      	movs	r2, #0
    	__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
 8006014:	2420      	movs	r4, #32
    AdcInitialized = 0;
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <Modem_Init_Peripheral+0x2c>)
 8006018:	701a      	strb	r2, [r3, #0]
    	MX_USART1_UART_Init();
 800601a:	f000 fbb9 	bl	8006790 <MX_USART1_UART_Init>
    	__HAL_UART_ENABLE_IT(&uart_mcu, UART_IT_RXNE);
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <Modem_Init_Peripheral+0x30>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	4323      	orrs	r3, r4
 8006026:	6013      	str	r3, [r2, #0]
    	MX_USART2_UART_Init();
 8006028:	f000 fbce 	bl	80067c8 <MX_USART2_UART_Init>
    	__HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
 800602c:	4b04      	ldr	r3, [pc, #16]	; (8006040 <Modem_Init_Peripheral+0x34>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4314      	orrs	r4, r2
 8006034:	601c      	str	r4, [r3, #0]
}
 8006036:	bd10      	pop	{r4, pc}
 8006038:	200008b3 	.word	0x200008b3
 800603c:	20001290 	.word	0x20001290
 8006040:	2000120c 	.word	0x2000120c

08006044 <Save_ID>:
/**
 * @param	0: DCU_ID
 * 			1: NET_ID
 */
void Save_ID(uint8_t type)
{
 8006044:	b530      	push	{r4, r5, lr}
    uint8_t i=0;
	uint8_t temp_arr[40] = {0};
 8006046:	2400      	movs	r4, #0
{
 8006048:	b08b      	sub	sp, #44	; 0x2c
	uint8_t temp_arr[40] = {0};
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	0021      	movs	r1, r4
{
 800604e:	0005      	movs	r5, r0
	uint8_t temp_arr[40] = {0};
 8006050:	a801      	add	r0, sp, #4
 8006052:	9400      	str	r4, [sp, #0]
 8006054:	f001 fc8a 	bl	800796c <memset>

	if(type == 0)
 8006058:	22aa      	movs	r2, #170	; 0xaa
	{
		temp_arr[0] = BYTE_TEMP_FIRST;
 800605a:	4669      	mov	r1, sp
 800605c:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <Save_ID+0x74>)
 800605e:	700a      	strb	r2, [r1, #0]
	if(type == 0)
 8006060:	42a5      	cmp	r5, r4
 8006062:	d115      	bne.n	8006090 <Save_ID+0x4c>
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8006064:	889a      	ldrh	r2, [r3, #4]

		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 8006066:	681b      	ldr	r3, [r3, #0]
		temp_arr[1] = sModem.sDCU_id.Length_u16;
 8006068:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 800606a:	42aa      	cmp	r2, r5
 800606c:	d809      	bhi.n	8006082 <Save_ID+0x3e>

		OnchipFlashPageErase(ADDR_DCUID);
 800606e:	4813      	ldr	r0, [pc, #76]	; (80060bc <Save_ID+0x78>)
 8006070:	f000 fca4 	bl	80069bc <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_DCUID, temp_arr, 40);
 8006074:	2228      	movs	r2, #40	; 0x28
 8006076:	4669      	mov	r1, sp
 8006078:	4810      	ldr	r0, [pc, #64]	; (80060bc <Save_ID+0x78>)

		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];

		OnchipFlashPageErase(ADDR_NETID);
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 800607a:	f000 fc78 	bl	800696e <OnchipFlashWriteData>
	}
}
 800607e:	b00b      	add	sp, #44	; 0x2c
 8006080:	bd30      	pop	{r4, r5, pc}
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 8006082:	0029      	movs	r1, r5
 8006084:	5d58      	ldrb	r0, [r3, r5]
 8006086:	4469      	add	r1, sp
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 8006088:	3501      	adds	r5, #1
			temp_arr[i+2] = sModem.sDCU_id.Data_a8[i];
 800608a:	7088      	strb	r0, [r1, #2]
		for (i = 0;i < sModem.sDCU_id.Length_u16; i++)
 800608c:	b2ed      	uxtb	r5, r5
 800608e:	e7ec      	b.n	800606a <Save_ID+0x26>
		temp_arr[1] = sModem.sNET_id.Length_u16;
 8006090:	899a      	ldrh	r2, [r3, #12]
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 8006092:	689b      	ldr	r3, [r3, #8]
		temp_arr[1] = sModem.sNET_id.Length_u16;
 8006094:	704a      	strb	r2, [r1, #1]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 8006096:	0021      	movs	r1, r4
 8006098:	428a      	cmp	r2, r1
 800609a:	d806      	bhi.n	80060aa <Save_ID+0x66>
		OnchipFlashPageErase(ADDR_NETID);
 800609c:	4808      	ldr	r0, [pc, #32]	; (80060c0 <Save_ID+0x7c>)
 800609e:	f000 fc8d 	bl	80069bc <OnchipFlashPageErase>
		OnchipFlashWriteData(ADDR_NETID, temp_arr, 40);
 80060a2:	2228      	movs	r2, #40	; 0x28
 80060a4:	4669      	mov	r1, sp
 80060a6:	4806      	ldr	r0, [pc, #24]	; (80060c0 <Save_ID+0x7c>)
 80060a8:	e7e7      	b.n	800607a <Save_ID+0x36>
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80060aa:	0008      	movs	r0, r1
 80060ac:	5c5c      	ldrb	r4, [r3, r1]
 80060ae:	4468      	add	r0, sp
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80060b0:	3101      	adds	r1, #1
			temp_arr[i+2] = sModem.sNET_id.Data_a8[i];
 80060b2:	7084      	strb	r4, [r0, #2]
		for (i = 0;i < sModem.sNET_id.Length_u16; i++)
 80060b4:	b2c9      	uxtb	r1, r1
 80060b6:	e7ef      	b.n	8006098 <Save_ID+0x54>
 80060b8:	200000c0 	.word	0x200000c0
 80060bc:	0802f500 	.word	0x0802f500
 80060c0:	0802f580 	.word	0x0802f580

080060c4 <Init_ID>:
{
 80060c4:	b510      	push	{r4, lr}
    if(type == 0)
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d10c      	bne.n	80060e4 <Init_ID+0x20>
    	temp = *(__IO uint8_t*) ADDR_DCUID;
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <Init_ID+0x3c>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2d8      	uxtb	r0, r3
    	if (temp != FLASH_BYTE_EMPTY)
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d012      	beq.n	80060fa <Init_ID+0x36>
            Flash_Get_Infor ((ADDR_DCUID + 1), sModem.sDCU_id.Data_a8, &sModem.sDCU_id.Length_u16, 10);
 80060d4:	230a      	movs	r3, #10
 80060d6:	490b      	ldr	r1, [pc, #44]	; (8006104 <Init_ID+0x40>)
 80060d8:	480b      	ldr	r0, [pc, #44]	; (8006108 <Init_ID+0x44>)
 80060da:	1d0a      	adds	r2, r1, #4
 80060dc:	6809      	ldr	r1, [r1, #0]
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 80060de:	f7ff fec5 	bl	8005e6c <Flash_Get_Infor>
}
 80060e2:	bd10      	pop	{r4, pc}
    	temp = *(__IO uint8_t*) ADDR_NETID;
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <Init_ID+0x48>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
    	if (temp != FLASH_BYTE_EMPTY)
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <Init_ID+0x36>
            Flash_Get_Infor ((ADDR_NETID + 1), sModem.sNET_id.Data_a8, &sModem.sNET_id.Length_u16, 10);
 80060ec:	4905      	ldr	r1, [pc, #20]	; (8006104 <Init_ID+0x40>)
 80060ee:	230a      	movs	r3, #10
 80060f0:	000a      	movs	r2, r1
 80060f2:	4807      	ldr	r0, [pc, #28]	; (8006110 <Init_ID+0x4c>)
 80060f4:	6889      	ldr	r1, [r1, #8]
 80060f6:	320c      	adds	r2, #12
 80060f8:	e7f1      	b.n	80060de <Init_ID+0x1a>
    		Save_ID(type);
 80060fa:	f7ff ffa3 	bl	8006044 <Save_ID>
}
 80060fe:	e7f0      	b.n	80060e2 <Init_ID+0x1e>
 8006100:	0802f500 	.word	0x0802f500
 8006104:	200000c0 	.word	0x200000c0
 8006108:	0802f501 	.word	0x0802f501
 800610c:	0802f580 	.word	0x0802f580
 8006110:	0802f581 	.word	0x0802f581

08006114 <Save_Freq_Send_Data>:
        Save_Freq_Send_Data();
    }
}

void Save_Freq_Send_Data (void)
{
 8006114:	b510      	push	{r4, lr}
 8006116:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 8006118:	2214      	movs	r2, #20
 800611a:	2100      	movs	r1, #0
 800611c:	a801      	add	r0, sp, #4
 800611e:	f001 fc25 	bl	800796c <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 8006122:	466a      	mov	r2, sp
    Buff_temp[1] = 3;
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8006124:	4669      	mov	r1, sp
    Buff_temp[0] = BYTE_TEMP_FIRST;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <Save_Freq_Send_Data+0x40>)

    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;

    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 8006128:	4c0b      	ldr	r4, [pc, #44]	; (8006158 <Save_Freq_Send_Data+0x44>)
    Buff_temp[0] = BYTE_TEMP_FIRST;
 800612a:	8013      	strh	r3, [r2, #0]
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <Save_Freq_Send_Data+0x48>)
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 800612e:	0020      	movs	r0, r4
    Buff_temp[2] = sFreqInfor.NumWakeup_u8;
 8006130:	3354      	adds	r3, #84	; 0x54
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	708a      	strb	r2, [r1, #2]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	0a1a      	lsrs	r2, r3, #8
    Buff_temp[4] = sFreqInfor.FreqWakeup_u32 & 0xFF;
 800613a:	710b      	strb	r3, [r1, #4]
    Buff_temp[3] = (sFreqInfor.FreqWakeup_u32 >> 8) & 0xFF;
 800613c:	70ca      	strb	r2, [r1, #3]
    Erase_Firmware(ADDR_FREQ_ACTIVE, 1);
 800613e:	2101      	movs	r1, #1
 8006140:	f000 fc60 	bl	8006a04 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 16);
 8006144:	2210      	movs	r2, #16
 8006146:	4669      	mov	r1, sp
 8006148:	0020      	movs	r0, r4
 800614a:	f000 fc10 	bl	800696e <OnchipFlashWriteData>
}
 800614e:	b006      	add	sp, #24
 8006150:	bd10      	pop	{r4, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	000003aa 	.word	0x000003aa
 8006158:	0802f600 	.word	0x0802f600
 800615c:	200000c0 	.word	0x200000c0

08006160 <Init_Timer_Send>:
{
 8006160:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 8006162:	2100      	movs	r1, #0
 8006164:	2214      	movs	r2, #20
 8006166:	a801      	add	r0, sp, #4
 8006168:	9100      	str	r1, [sp, #0]
 800616a:	f001 fbff 	bl	800796c <memset>
    temp = *(__IO uint8_t*) (ADDR_FREQ_ACTIVE);
 800616e:	480f      	ldr	r0, [pc, #60]	; (80061ac <Init_Timer_Send+0x4c>)
 8006170:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 8006172:	2b00      	cmp	r3, #0
 8006174:	d016      	beq.n	80061a4 <Init_Timer_Send+0x44>
        OnchipFlashReadData(ADDR_FREQ_ACTIVE, &Buff_temp[0], 24);
 8006176:	2218      	movs	r2, #24
 8006178:	4669      	mov	r1, sp
 800617a:	f000 fc50 	bl	8006a1e <OnchipFlashReadData>
        if (Length < 24)
 800617e:	466b      	mov	r3, sp
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b17      	cmp	r3, #23
 8006184:	d80c      	bhi.n	80061a0 <Init_Timer_Send+0x40>
            sFreqInfor.NumWakeup_u8 = Buff_temp[2];
 8006186:	466b      	mov	r3, sp
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <Init_Timer_Send+0x50>)
 800618a:	789b      	ldrb	r3, [r3, #2]
 800618c:	3254      	adds	r2, #84	; 0x54
 800618e:	7013      	strb	r3, [r2, #0]
            sFreqInfor.FreqWakeup_u32 = (sFreqInfor.FreqWakeup_u32 << 8) | Buff_temp[4];
 8006190:	466b      	mov	r3, sp
 8006192:	78d9      	ldrb	r1, [r3, #3]
 8006194:	3303      	adds	r3, #3
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	430b      	orrs	r3, r1
 800619c:	ba5b      	rev16	r3, r3
 800619e:	8053      	strh	r3, [r2, #2]
}
 80061a0:	b007      	add	sp, #28
 80061a2:	bd00      	pop	{pc}
        Save_Freq_Send_Data();
 80061a4:	f7ff ffb6 	bl	8006114 <Save_Freq_Send_Data>
}
 80061a8:	e7fa      	b.n	80061a0 <Init_Timer_Send+0x40>
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	0802f600 	.word	0x0802f600
 80061b0:	200000c0 	.word	0x200000c0

080061b4 <Save_Device_Type>:
    }
}

void Save_Device_Type (void)
{
    uint8_t Buff_temp[24] = {0};
 80061b4:	2100      	movs	r1, #0
{
 80061b6:	b510      	push	{r4, lr}
 80061b8:	b086      	sub	sp, #24
    uint8_t Buff_temp[24] = {0};
 80061ba:	2214      	movs	r2, #20
 80061bc:	a801      	add	r0, sp, #4
 80061be:	9100      	str	r1, [sp, #0]
 80061c0:	f001 fbd4 	bl	800796c <memset>

    Buff_temp[0] = BYTE_TEMP_FIRST;
 80061c4:	23d5      	movs	r3, #213	; 0xd5
 80061c6:	466a      	mov	r2, sp
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	8013      	strh	r3, [r2, #0]
    Buff_temp[1] = 1;
    Buff_temp[2] = sModem.TypeModem_u8;
 80061cc:	4b07      	ldr	r3, [pc, #28]	; (80061ec <Save_Device_Type+0x38>)

    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 80061ce:	4c08      	ldr	r4, [pc, #32]	; (80061f0 <Save_Device_Type+0x3c>)
    Buff_temp[2] = sModem.TypeModem_u8;
 80061d0:	7e1b      	ldrb	r3, [r3, #24]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 80061d2:	0020      	movs	r0, r4
    Buff_temp[2] = sModem.TypeModem_u8;
 80061d4:	7093      	strb	r3, [r2, #2]
    Erase_Firmware(ADDR_DEVICE_TYPE, 1);
 80061d6:	2101      	movs	r1, #1
 80061d8:	f000 fc14 	bl	8006a04 <Erase_Firmware>
    OnchipFlashWriteData(ADDR_DEVICE_TYPE, &Buff_temp[0], 16);
 80061dc:	2210      	movs	r2, #16
 80061de:	4669      	mov	r1, sp
 80061e0:	0020      	movs	r0, r4
 80061e2:	f000 fbc4 	bl	800696e <OnchipFlashWriteData>
}
 80061e6:	b006      	add	sp, #24
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	200000c0 	.word	0x200000c0
 80061f0:	0802f680 	.word	0x0802f680

080061f4 <Init_Device_Type>:
{
 80061f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t 	Buff_temp[24] = {0};
 80061f6:	2100      	movs	r1, #0
 80061f8:	2214      	movs	r2, #20
 80061fa:	a801      	add	r0, sp, #4
 80061fc:	9100      	str	r1, [sp, #0]
 80061fe:	f001 fbb5 	bl	800796c <memset>
    temp = *(__IO uint8_t*) (ADDR_DEVICE_TYPE);
 8006202:	480a      	ldr	r0, [pc, #40]	; (800622c <Init_Device_Type+0x38>)
 8006204:	7803      	ldrb	r3, [r0, #0]
    if (temp != FLASH_BYTE_EMPTY)
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <Init_Device_Type+0x32>
        OnchipFlashReadData(ADDR_DEVICE_TYPE, &Buff_temp[0], 24);
 800620a:	2218      	movs	r2, #24
 800620c:	4669      	mov	r1, sp
 800620e:	f000 fc06 	bl	8006a1e <OnchipFlashReadData>
        if (Length < 24)
 8006212:	466b      	mov	r3, sp
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	2b17      	cmp	r3, #23
 8006218:	d803      	bhi.n	8006222 <Init_Device_Type+0x2e>
            sModem.TypeModem_u8 = Buff_temp[2];
 800621a:	466a      	mov	r2, sp
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <Init_Device_Type+0x3c>)
 800621e:	7892      	ldrb	r2, [r2, #2]
 8006220:	761a      	strb	r2, [r3, #24]
}
 8006222:	b007      	add	sp, #28
 8006224:	bd00      	pop	{pc}
        Save_Device_Type();
 8006226:	f7ff ffc5 	bl	80061b4 <Save_Device_Type>
}
 800622a:	e7fa      	b.n	8006222 <Init_Device_Type+0x2e>
 800622c:	0802f680 	.word	0x0802f680
 8006230:	200000c0 	.word	0x200000c0

08006234 <Init_Memory_Infor>:
{
 8006234:	b510      	push	{r4, lr}
    Init_Timer_Send();
 8006236:	f7ff ff93 	bl	8006160 <Init_Timer_Send>
    Init_Device_Type();
 800623a:	f7ff ffdb 	bl	80061f4 <Init_Device_Type>
	Init_ID(0);
 800623e:	2000      	movs	r0, #0
 8006240:	f7ff ff40 	bl	80060c4 <Init_ID>
	Init_ID(1);
 8006244:	2001      	movs	r0, #1
 8006246:	f7ff ff3d 	bl	80060c4 <Init_ID>
}
 800624a:	bd10      	pop	{r4, pc}

0800624c <USER_Payload_Station_RTC>:
	sModem.TypeDataMessage = _DATA_CONFIRM;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_UP, _DATA_CONFIRM, delay);
}

void USER_Payload_Station_RTC(uint32_t delay)
{
 800624c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_RTC");
	uint8_t     pData[128] = {0};
 800624e:	2600      	movs	r6, #0
{
 8006250:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_RTC");
 8006252:	492d      	ldr	r1, [pc, #180]	; (8006308 <USER_Payload_Station_RTC+0xbc>)
{
 8006254:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_RTC");
 8006256:	2001      	movs	r0, #1
 8006258:	f001 f86c 	bl	8007334 <LOG>
	uint8_t     pData[128] = {0};
 800625c:	0031      	movs	r1, r6
 800625e:	227c      	movs	r2, #124	; 0x7c
 8006260:	a805      	add	r0, sp, #20
 8006262:	9604      	str	r6, [sp, #16]
 8006264:	f001 fb82 	bl	800796c <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Measure */
    Get_RTC();
 8006268:	f000 fe66 	bl	8006f38 <Get_RTC>

    /* Packet */
    pData[length++] = OBIS_ID_STATION;
 800626c:	2302      	movs	r3, #2
    pData[length++] = sModem.sDCU_id.Length_u16;
 800626e:	4827      	ldr	r0, [pc, #156]	; (800630c <USER_Payload_Station_RTC+0xc0>)
	uint8_t     pData[128] = {0};
 8006270:	ac04      	add	r4, sp, #16
    pData[length++] = OBIS_ID_STATION;
 8006272:	7023      	strb	r3, [r4, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006274:	8881      	ldrh	r1, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006276:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006278:	b2cb      	uxtb	r3, r1
 800627a:	7063      	strb	r3, [r4, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800627c:	1cb2      	adds	r2, r6, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800627e:	b2b5      	uxth	r5, r6
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006280:	b2d2      	uxtb	r2, r2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006282:	42a9      	cmp	r1, r5
 8006284:	d837      	bhi.n	80062f6 <USER_Payload_Station_RTC+0xaa>

    pData[length++] = OBIS_TIME;
 8006286:	2103      	movs	r1, #3
 8006288:	54a1      	strb	r1, [r4, r2]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800628a:	185a      	adds	r2, r3, r1
    pData[length++] = 0x06;
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	1849      	adds	r1, r1, r1
 8006290:	54a1      	strb	r1, [r4, r2]
    pData[length++] = sRTC.year;
 8006292:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <USER_Payload_Station_RTC+0xc4>)
    pData[length++] = 0x06;
 8006294:	1d19      	adds	r1, r3, #4
    pData[length++] = sRTC.year;
 8006296:	7996      	ldrb	r6, [r2, #6]
 8006298:	b2c9      	uxtb	r1, r1
 800629a:	5466      	strb	r6, [r4, r1]
    pData[length++] = sRTC.month;
 800629c:	7956      	ldrb	r6, [r2, #5]
    pData[length++] = sRTC.year;
 800629e:	1d59      	adds	r1, r3, #5
    pData[length++] = sRTC.month;
 80062a0:	b2c9      	uxtb	r1, r1
 80062a2:	5466      	strb	r6, [r4, r1]
    pData[length++] = sRTC.date;
 80062a4:	7916      	ldrb	r6, [r2, #4]
    pData[length++] = sRTC.month;
 80062a6:	1d99      	adds	r1, r3, #6
    pData[length++] = sRTC.date;
 80062a8:	b2c9      	uxtb	r1, r1
 80062aa:	5466      	strb	r6, [r4, r1]
    pData[length++] = sRTC.hour;
 80062ac:	7816      	ldrb	r6, [r2, #0]
    pData[length++] = sRTC.date;
 80062ae:	1dd9      	adds	r1, r3, #7
    pData[length++] = sRTC.hour;
 80062b0:	b2c9      	uxtb	r1, r1
 80062b2:	5466      	strb	r6, [r4, r1]
 80062b4:	0019      	movs	r1, r3
    pData[length++] = sRTC.min;
 80062b6:	7856      	ldrb	r6, [r2, #1]
    pData[length++] = sRTC.hour;
 80062b8:	3108      	adds	r1, #8
    pData[length++] = sRTC.min;
 80062ba:	b2c9      	uxtb	r1, r1
 80062bc:	5466      	strb	r6, [r4, r1]
 80062be:	0019      	movs	r1, r3
    pData[length++] = sRTC.sec;
 80062c0:	7892      	ldrb	r2, [r2, #2]
    pData[length++] = sRTC.min;
 80062c2:	3109      	adds	r1, #9
    pData[length++] = sRTC.sec;
 80062c4:	b2c9      	uxtb	r1, r1
 80062c6:	5462      	strb	r2, [r4, r1]
 80062c8:	0019      	movs	r1, r3

    pData[length++] = 0x00;
 80062ca:	2200      	movs	r2, #0
    pData[length++] = sRTC.sec;
 80062cc:	310a      	adds	r1, #10
    pData[length++] = 0x00;
 80062ce:	b2c9      	uxtb	r1, r1

    length++;
 80062d0:	330c      	adds	r3, #12
    pData[length++] = 0x00;
 80062d2:	5462      	strb	r2, [r4, r1]
    length++;
 80062d4:	b2d9      	uxtb	r1, r3
    uint8_t     TempCrc = 0;
 80062d6:	0013      	movs	r3, r2
	for (i = 0; i < (length - 1); i++)
 80062d8:	1e4e      	subs	r6, r1, #1
 80062da:	42b2      	cmp	r2, r6
 80062dc:	db0f      	blt.n	80062fe <USER_Payload_Station_RTC+0xb2>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 80062de:	55a3      	strb	r3, [r4, r6]

    /* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <USER_Payload_Station_RTC+0xc8>)
	sModem.TypeDataMessage = _DATA_RTC;
	AppLora_Send(pData, length, DATA_CONFIRMED_DOWN, _DATA_RTC, delay);
 80062e2:	2204      	movs	r2, #4
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 80062e4:	8483      	strh	r3, [r0, #36]	; 0x24
	AppLora_Send(pData, length, DATA_CONFIRMED_DOWN, _DATA_RTC, delay);
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	0020      	movs	r0, r4
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	2306      	movs	r3, #6
 80062ee:	f7ff f8fd 	bl	80054ec <AppLora_Send>
}
 80062f2:	b025      	add	sp, #148	; 0x94
 80062f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80062f6:	5dbd      	ldrb	r5, [r7, r6]
 80062f8:	3601      	adds	r6, #1
 80062fa:	54a5      	strb	r5, [r4, r2]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80062fc:	e7be      	b.n	800627c <USER_Payload_Station_RTC+0x30>
		TempCrc ^= pData[i];
 80062fe:	5ca7      	ldrb	r7, [r4, r2]
	for (i = 0; i < (length - 1); i++)
 8006300:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 8006302:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 8006304:	b292      	uxth	r2, r2
 8006306:	e7e8      	b.n	80062da <USER_Payload_Station_RTC+0x8e>
 8006308:	08008a07 	.word	0x08008a07
 800630c:	200000c0 	.word	0x200000c0
 8006310:	20001374 	.word	0x20001374
 8006314:	00000604 	.word	0x00000604

08006318 <USER_Payload_Station_Mode>:

void USER_Payload_Station_Mode(uint32_t delay)
{
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_Mode");
	uint8_t     pData[128] = {0};
 800631a:	2600      	movs	r6, #0
{
 800631c:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_Mode");
 800631e:	4920      	ldr	r1, [pc, #128]	; (80063a0 <USER_Payload_Station_Mode+0x88>)
{
 8006320:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_Mode");
 8006322:	2001      	movs	r0, #1
 8006324:	f001 f806 	bl	8007334 <LOG>
	uint8_t     pData[128] = {0};
 8006328:	227c      	movs	r2, #124	; 0x7c
 800632a:	0031      	movs	r1, r6
 800632c:	a805      	add	r0, sp, #20
 800632e:	9604      	str	r6, [sp, #16]
 8006330:	f001 fb1c 	bl	800796c <memset>
	uint8_t     length = 0;
	uint8_t     TempCrc = 0;
	uint16_t	i = 0;

	/* Packet */
	pData[length++] = OBIS_ID_STATION;
 8006334:	2302      	movs	r3, #2
	pData[length++] = sModem.sDCU_id.Length_u16;
 8006336:	481b      	ldr	r0, [pc, #108]	; (80063a4 <USER_Payload_Station_Mode+0x8c>)
	uint8_t     pData[128] = {0};
 8006338:	ac04      	add	r4, sp, #16
	pData[length++] = OBIS_ID_STATION;
 800633a:	7023      	strb	r3, [r4, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 800633c:	8881      	ldrh	r1, [r0, #4]

	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800633e:	6807      	ldr	r7, [r0, #0]
	pData[length++] = sModem.sDCU_id.Length_u16;
 8006340:	b2ca      	uxtb	r2, r1
 8006342:	7062      	strb	r2, [r4, #1]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006344:	1cb3      	adds	r3, r6, #2
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006346:	b2b5      	uxth	r5, r6
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006348:	b2db      	uxtb	r3, r3
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800634a:	42a9      	cmp	r1, r5
 800634c:	d81f      	bhi.n	800638e <USER_Payload_Station_Mode+0x76>

	pData[length++] = OBIS_MODE;
 800634e:	2104      	movs	r1, #4
 8006350:	54e1      	strb	r1, [r4, r3]
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006352:	1cd3      	adds	r3, r2, #3
	pData[length++] = 0x01;
 8006354:	b2db      	uxtb	r3, r3
 8006356:	3903      	subs	r1, #3
 8006358:	54e1      	strb	r1, [r4, r3]
	pData[length++] = sModem.Mode & 0xFF;
 800635a:	7e41      	ldrb	r1, [r0, #25]
	pData[length++] = 0x01;
 800635c:	1d13      	adds	r3, r2, #4
	pData[length++] = sModem.Mode & 0xFF;
 800635e:	b2db      	uxtb	r3, r3
 8006360:	54e1      	strb	r1, [r4, r3]
	pData[length++] = 0x00;
 8006362:	2300      	movs	r3, #0
	pData[length++] = sModem.Mode & 0xFF;
 8006364:	1d51      	adds	r1, r2, #5
	pData[length++] = 0x00;
 8006366:	b2c9      	uxtb	r1, r1

	length++;
 8006368:	3207      	adds	r2, #7
	pData[length++] = 0x00;
 800636a:	5463      	strb	r3, [r4, r1]
	length++;
 800636c:	b2d1      	uxtb	r1, r2
	uint8_t     TempCrc = 0;
 800636e:	001a      	movs	r2, r3
	for (i = 0; i < (length - 1); i++)
 8006370:	1e4e      	subs	r6, r1, #1
 8006372:	42b3      	cmp	r3, r6
 8006374:	db0f      	blt.n	8006396 <USER_Payload_Station_Mode+0x7e>
		TempCrc ^= pData[i];

	pData[length-1] = TempCrc;

	/* Send */
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 8006376:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <USER_Payload_Station_Mode+0x90>)
	pData[length-1] = TempCrc;
 8006378:	55a2      	strb	r2, [r4, r6]
	sModem.bNeedConfirm = DATA_CONFIRMED_DOWN;
 800637a:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_MODE;
	AppLora_Send(pData, length, DATA_CONFIRMED_DOWN, _DATA_MODE, delay);
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	2204      	movs	r2, #4
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	0020      	movs	r0, r4
 8006384:	2305      	movs	r3, #5
 8006386:	f7ff f8b1 	bl	80054ec <AppLora_Send>
}
 800638a:	b025      	add	sp, #148	; 0x94
 800638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800638e:	5dbd      	ldrb	r5, [r7, r6]
 8006390:	3601      	adds	r6, #1
 8006392:	54e5      	strb	r5, [r4, r3]
	for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006394:	e7d6      	b.n	8006344 <USER_Payload_Station_Mode+0x2c>
		TempCrc ^= pData[i];
 8006396:	5ce7      	ldrb	r7, [r4, r3]
	for (i = 0; i < (length - 1); i++)
 8006398:	3301      	adds	r3, #1
		TempCrc ^= pData[i];
 800639a:	407a      	eors	r2, r7
	for (i = 0; i < (length - 1); i++)
 800639c:	b29b      	uxth	r3, r3
 800639e:	e7e8      	b.n	8006372 <USER_Payload_Station_Mode+0x5a>
 80063a0:	08008a20 	.word	0x08008a20
 80063a4:	200000c0 	.word	0x200000c0
 80063a8:	00000504 	.word	0x00000504

080063ac <USER_Payload_Station_Confirm>:

void USER_Payload_Station_Confirm(uint32_t delay)
{
 80063ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_Confirm");
	uint8_t     pData[128] = {0};
 80063ae:	2400      	movs	r4, #0
{
 80063b0:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_Confirm");
 80063b2:	491c      	ldr	r1, [pc, #112]	; (8006424 <USER_Payload_Station_Confirm+0x78>)
{
 80063b4:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_Confirm");
 80063b6:	2001      	movs	r0, #1
 80063b8:	f000 ffbc 	bl	8007334 <LOG>
	uint8_t     pData[128] = {0};
 80063bc:	227c      	movs	r2, #124	; 0x7c
 80063be:	0021      	movs	r1, r4
 80063c0:	a805      	add	r0, sp, #20
 80063c2:	9404      	str	r4, [sp, #16]
 80063c4:	f001 fad2 	bl	800796c <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Packet */
    pData[length++] = OBIS_ID_STATION;
 80063c8:	2302      	movs	r3, #2
    pData[length++] = sModem.sDCU_id.Length_u16;
 80063ca:	4817      	ldr	r0, [pc, #92]	; (8006428 <USER_Payload_Station_Confirm+0x7c>)
	uint8_t     pData[128] = {0};
 80063cc:	ad04      	add	r5, sp, #16
    pData[length++] = OBIS_ID_STATION;
 80063ce:	702b      	strb	r3, [r5, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80063d0:	8882      	ldrh	r2, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80063d2:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 80063d4:	b2d1      	uxtb	r1, r2
 80063d6:	7069      	strb	r1, [r5, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80063d8:	1ca3      	adds	r3, r4, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80063da:	b2a6      	uxth	r6, r4
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80063dc:	b2db      	uxtb	r3, r3
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 80063de:	42b2      	cmp	r2, r6
 80063e0:	d817      	bhi.n	8006412 <USER_Payload_Station_Confirm+0x66>

    pData[length++] = OBIS_CONFIRM;
 80063e2:	2211      	movs	r2, #17
 80063e4:	54ea      	strb	r2, [r5, r3]
    pData[length++] = 0x00;
 80063e6:	2300      	movs	r3, #0
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 80063e8:	1cca      	adds	r2, r1, #3
    pData[length++] = 0x00;
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	54ab      	strb	r3, [r5, r2]

    length++;
	for (i = 0; i < (length - 1); i++)
 80063ee:	001a      	movs	r2, r3
    length++;
 80063f0:	3105      	adds	r1, #5
 80063f2:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 80063f4:	1e4c      	subs	r4, r1, #1
 80063f6:	42a2      	cmp	r2, r4
 80063f8:	db0f      	blt.n	800641a <USER_Payload_Station_Confirm+0x6e>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 80063fa:	552b      	strb	r3, [r5, r4]

    /* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <USER_Payload_Station_Confirm+0x80>)
	sModem.TypeDataMessage = _DATA_CONFIRM;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_DOWN, _DATA_CONFIRM, delay);
 80063fe:	2202      	movs	r2, #2
	sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8006400:	8483      	strh	r3, [r0, #36]	; 0x24
	AppLora_Send(pData, length, DATA_UNCONFIRMED_DOWN, _DATA_CONFIRM, delay);
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	0028      	movs	r0, r5
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2307      	movs	r3, #7
 800640a:	f7ff f86f 	bl	80054ec <AppLora_Send>
}
 800640e:	b025      	add	sp, #148	; 0x94
 8006410:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006412:	5d3e      	ldrb	r6, [r7, r4]
 8006414:	3401      	adds	r4, #1
 8006416:	54ee      	strb	r6, [r5, r3]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006418:	e7de      	b.n	80063d8 <USER_Payload_Station_Confirm+0x2c>
		TempCrc ^= pData[i];
 800641a:	5caf      	ldrb	r7, [r5, r2]
	for (i = 0; i < (length - 1); i++)
 800641c:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 800641e:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 8006420:	b292      	uxth	r2, r2
 8006422:	e7e8      	b.n	80063f6 <USER_Payload_Station_Confirm+0x4a>
 8006424:	08008a3a 	.word	0x08008a3a
 8006428:	200000c0 	.word	0x200000c0
 800642c:	00000702 	.word	0x00000702

08006430 <USER_Payload_Station_Accept>:

void USER_Payload_Station_Accept(uint32_t delay)
{
 8006430:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init */
	LOG(LOG_DEBUG, "USER_Payload_Station_Accecpt");
	uint8_t     pData[128] = {0};
 8006432:	2400      	movs	r4, #0
{
 8006434:	b0a5      	sub	sp, #148	; 0x94
	LOG(LOG_DEBUG, "USER_Payload_Station_Accecpt");
 8006436:	491c      	ldr	r1, [pc, #112]	; (80064a8 <USER_Payload_Station_Accept+0x78>)
{
 8006438:	9003      	str	r0, [sp, #12]
	LOG(LOG_DEBUG, "USER_Payload_Station_Accecpt");
 800643a:	2001      	movs	r0, #1
 800643c:	f000 ff7a 	bl	8007334 <LOG>
	uint8_t     pData[128] = {0};
 8006440:	227c      	movs	r2, #124	; 0x7c
 8006442:	0021      	movs	r1, r4
 8006444:	a805      	add	r0, sp, #20
 8006446:	9404      	str	r4, [sp, #16]
 8006448:	f001 fa90 	bl	800796c <memset>
    uint8_t     length = 0;
    uint16_t	i = 0;
    uint8_t     TempCrc = 0;

    /* Packet */
    pData[length++] = OBIS_ID_STATION;
 800644c:	2302      	movs	r3, #2
    pData[length++] = sModem.sDCU_id.Length_u16;
 800644e:	4817      	ldr	r0, [pc, #92]	; (80064ac <USER_Payload_Station_Accept+0x7c>)
	uint8_t     pData[128] = {0};
 8006450:	ad04      	add	r5, sp, #16
    pData[length++] = OBIS_ID_STATION;
 8006452:	702b      	strb	r3, [r5, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006454:	8882      	ldrh	r2, [r0, #4]

    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006456:	6807      	ldr	r7, [r0, #0]
    pData[length++] = sModem.sDCU_id.Length_u16;
 8006458:	b2d1      	uxtb	r1, r2
 800645a:	7069      	strb	r1, [r5, #1]
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800645c:	1ca3      	adds	r3, r4, #2
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800645e:	b2a6      	uxth	r6, r4
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006460:	b2db      	uxtb	r3, r3
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 8006462:	42b2      	cmp	r2, r6
 8006464:	d817      	bhi.n	8006496 <USER_Payload_Station_Accept+0x66>

    pData[length++] = OBIS_CONFIRM;
 8006466:	2211      	movs	r2, #17
 8006468:	54ea      	strb	r2, [r5, r3]
    pData[length++] = 0x00;
 800646a:	2300      	movs	r3, #0
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 800646c:	1cca      	adds	r2, r1, #3
    pData[length++] = 0x00;
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	54ab      	strb	r3, [r5, r2]

    length++;
	for (i = 0; i < (length - 1); i++)
 8006472:	001a      	movs	r2, r3
    length++;
 8006474:	3105      	adds	r1, #5
 8006476:	b2c9      	uxtb	r1, r1
	for (i = 0; i < (length - 1); i++)
 8006478:	1e4c      	subs	r4, r1, #1
 800647a:	42a2      	cmp	r2, r4
 800647c:	db0f      	blt.n	800649e <USER_Payload_Station_Accept+0x6e>
		TempCrc ^= pData[i];

    pData[length-1] = TempCrc;
 800647e:	552b      	strb	r3, [r5, r4]

    /* Send */
	sModem.bNeedConfirm = DATA_UNCONFIRMED_DOWN;
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <USER_Payload_Station_Accept+0x80>)
 8006482:	8483      	strh	r3, [r0, #36]	; 0x24
	sModem.TypeDataMessage = _DATA_ACCEPT;
	AppLora_Send(pData, length, DATA_UNCONFIRMED_DOWN, _DATA_ACCEPT, delay);
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	0028      	movs	r0, r5
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2302      	movs	r3, #2
 800648c:	001a      	movs	r2, r3
 800648e:	f7ff f82d 	bl	80054ec <AppLora_Send>
}
 8006492:	b025      	add	sp, #148	; 0x94
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pData[length++] = *(sModem.sDCU_id.Data_a8 + i);
 8006496:	5d3e      	ldrb	r6, [r7, r4]
 8006498:	3401      	adds	r4, #1
 800649a:	54ee      	strb	r6, [r5, r3]
    for (i = 0; i < sModem.sDCU_id.Length_u16; i++)
 800649c:	e7de      	b.n	800645c <USER_Payload_Station_Accept+0x2c>
		TempCrc ^= pData[i];
 800649e:	5caf      	ldrb	r7, [r5, r2]
	for (i = 0; i < (length - 1); i++)
 80064a0:	3201      	adds	r2, #1
		TempCrc ^= pData[i];
 80064a2:	407b      	eors	r3, r7
	for (i = 0; i < (length - 1); i++)
 80064a4:	b292      	uxth	r2, r2
 80064a6:	e7e8      	b.n	800647a <USER_Payload_Station_Accept+0x4a>
 80064a8:	08008a57 	.word	0x08008a57
 80064ac:	200000c0 	.word	0x200000c0
 80064b0:	00000202 	.word	0x00000202

080064b4 <Protocol_Process_Rx>:
	#endif
    return Result;
}

uint8_t Protocol_Process_Rx (uint8_t DataType, uint8_t *pData, uint8_t Length)
{
 80064b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t 	Obis = 0;
    uint8_t 	Pos = 0;
	#ifdef DEVICE_TYPE_STATION
    	uint8_t 	length_data = 0;
		uint16_t 	i = 0;
    	switch(DataType)
 80064b6:	3801      	subs	r0, #1
{
 80064b8:	000d      	movs	r5, r1
 80064ba:	0014      	movs	r4, r2
    	switch(DataType)
 80064bc:	2806      	cmp	r0, #6
 80064be:	d81f      	bhi.n	8006500 <Protocol_Process_Rx+0x4c>
 80064c0:	f7f9 fe34 	bl	800012c <__gnu_thumb1_case_uqi>
 80064c4:	27041e61 	.word	0x27041e61
 80064c8:	1e43      	.short	0x1e43
 80064ca:	98          	.byte	0x98
 80064cb:	00          	.byte	0x00
    	{
    		case _DATA_SINGLE:
    			LOG(LOG_RECEI, "Single shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
 80064cc:	794b      	ldrb	r3, [r1, #5]
 80064ce:	790a      	ldrb	r2, [r1, #4]
 80064d0:	3b30      	subs	r3, #48	; 0x30
 80064d2:	494a      	ldr	r1, [pc, #296]	; (80065fc <Protocol_Process_Rx+0x148>)
 80064d4:	3a30      	subs	r2, #48	; 0x30
 80064d6:	2003      	movs	r0, #3
 80064d8:	f000 ff2c 	bl	8007334 <LOG>
				USER_Payload_Station_RTC(0);
 80064dc:	2000      	movs	r0, #0
 80064de:	f7ff feb5 	bl	800624c <USER_Payload_Station_RTC>
				Reset_Buff(&sLoraVar.sIntanData);
 80064e2:	4847      	ldr	r0, [pc, #284]	; (8006600 <Protocol_Process_Rx+0x14c>)
 80064e4:	f000 feee 	bl	80072c4 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 80064e8:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80064ea:	4846      	ldr	r0, [pc, #280]	; (8006604 <Protocol_Process_Rx+0x150>)
				for ( i = 0; i < (Length - 1); i++)
 80064ec:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80064ee:	69c1      	ldr	r1, [r0, #28]
 80064f0:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 80064f2:	42a3      	cmp	r3, r4
 80064f4:	db06      	blt.n	8006504 <Protocol_Process_Rx+0x50>
    			LOG(LOG_RECEI, "Join shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
    			USER_Payload_Station_Accept(0);
				Reset_Buff(&sLoraVar.sIntanData);
				for ( i = 0; i < (Length - 1); i++)
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
				HAL_UART_Transmit(&uart_mcu, sLoraVar.sIntanData.Data_a8, sLoraVar.sIntanData.Length_u16 , 1000);
 80064f6:	23fa      	movs	r3, #250	; 0xfa
 80064f8:	4843      	ldr	r0, [pc, #268]	; (8006608 <Protocol_Process_Rx+0x154>)
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	f7fd f9ae 	bl	800385c <HAL_UART_Transmit>
	    	default:
	    		break;
		}
	#endif
    return 1;
}
 8006500:	2001      	movs	r0, #1
 8006502:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006504:	1c56      	adds	r6, r2, #1
 8006506:	8406      	strh	r6, [r0, #32]
 8006508:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 800650a:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800650c:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 800650e:	b29b      	uxth	r3, r3
 8006510:	e7ed      	b.n	80064ee <Protocol_Process_Rx+0x3a>
    			LOG(LOG_RECEI, "Calib shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
 8006512:	794b      	ldrb	r3, [r1, #5]
 8006514:	790a      	ldrb	r2, [r1, #4]
 8006516:	3b30      	subs	r3, #48	; 0x30
 8006518:	493c      	ldr	r1, [pc, #240]	; (800660c <Protocol_Process_Rx+0x158>)
 800651a:	3a30      	subs	r2, #48	; 0x30
 800651c:	2003      	movs	r0, #3
 800651e:	f000 ff09 	bl	8007334 <LOG>
				USER_Payload_Station_Confirm(0);
 8006522:	2000      	movs	r0, #0
 8006524:	f7ff ff42 	bl	80063ac <USER_Payload_Station_Confirm>
				Reset_Buff(&sLoraVar.sIntanData);
 8006528:	4835      	ldr	r0, [pc, #212]	; (8006600 <Protocol_Process_Rx+0x14c>)
 800652a:	f000 fecb 	bl	80072c4 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 800652e:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006530:	4834      	ldr	r0, [pc, #208]	; (8006604 <Protocol_Process_Rx+0x150>)
				for ( i = 0; i < (Length - 1); i++)
 8006532:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006534:	69c1      	ldr	r1, [r0, #28]
 8006536:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 8006538:	42a3      	cmp	r3, r4
 800653a:	dadc      	bge.n	80064f6 <Protocol_Process_Rx+0x42>
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800653c:	1c56      	adds	r6, r2, #1
 800653e:	8406      	strh	r6, [r0, #32]
 8006540:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 8006542:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006544:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 8006546:	b29b      	uxth	r3, r3
 8006548:	e7f4      	b.n	8006534 <Protocol_Process_Rx+0x80>
    			LOG(LOG_RECEI, "Mode shot NodeID: %d%d, Mode: %d", pData[4]-0x30, pData[5]-0x30, pData[8]);
 800654a:	794b      	ldrb	r3, [r1, #5]
 800654c:	790a      	ldrb	r2, [r1, #4]
 800654e:	7a28      	ldrb	r0, [r5, #8]
 8006550:	3b30      	subs	r3, #48	; 0x30
 8006552:	492f      	ldr	r1, [pc, #188]	; (8006610 <Protocol_Process_Rx+0x15c>)
 8006554:	3a30      	subs	r2, #48	; 0x30
 8006556:	9000      	str	r0, [sp, #0]
 8006558:	2003      	movs	r0, #3
 800655a:	f000 feeb 	bl	8007334 <LOG>
				USER_Payload_Station_Confirm(0);
 800655e:	2000      	movs	r0, #0
 8006560:	f7ff ff24 	bl	80063ac <USER_Payload_Station_Confirm>
				Reset_Buff(&sLoraVar.sIntanData);
 8006564:	4826      	ldr	r0, [pc, #152]	; (8006600 <Protocol_Process_Rx+0x14c>)
 8006566:	f000 fead 	bl	80072c4 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 800656a:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 800656c:	4825      	ldr	r0, [pc, #148]	; (8006604 <Protocol_Process_Rx+0x150>)
				for ( i = 0; i < (Length - 1); i++)
 800656e:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006570:	69c1      	ldr	r1, [r0, #28]
 8006572:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 8006574:	42a3      	cmp	r3, r4
 8006576:	dabe      	bge.n	80064f6 <Protocol_Process_Rx+0x42>
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006578:	1c56      	adds	r6, r2, #1
 800657a:	8406      	strh	r6, [r0, #32]
 800657c:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 800657e:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 8006580:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 8006582:	b29b      	uxth	r3, r3
 8006584:	e7f4      	b.n	8006570 <Protocol_Process_Rx+0xbc>
    			LOG(LOG_RECEI, "Join shot NodeID: %d%d", pData[4]-0x30, pData[5]-0x30);
 8006586:	794b      	ldrb	r3, [r1, #5]
 8006588:	790a      	ldrb	r2, [r1, #4]
 800658a:	3b30      	subs	r3, #48	; 0x30
 800658c:	4921      	ldr	r1, [pc, #132]	; (8006614 <Protocol_Process_Rx+0x160>)
 800658e:	3a30      	subs	r2, #48	; 0x30
 8006590:	2003      	movs	r0, #3
 8006592:	f000 fecf 	bl	8007334 <LOG>
    			USER_Payload_Station_Accept(0);
 8006596:	2000      	movs	r0, #0
 8006598:	f7ff ff4a 	bl	8006430 <USER_Payload_Station_Accept>
				Reset_Buff(&sLoraVar.sIntanData);
 800659c:	4818      	ldr	r0, [pc, #96]	; (8006600 <Protocol_Process_Rx+0x14c>)
 800659e:	f000 fe91 	bl	80072c4 <Reset_Buff>
				for ( i = 0; i < (Length - 1); i++)
 80065a2:	2300      	movs	r3, #0
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065a4:	4817      	ldr	r0, [pc, #92]	; (8006604 <Protocol_Process_Rx+0x150>)
				for ( i = 0; i < (Length - 1); i++)
 80065a6:	3c01      	subs	r4, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065a8:	69c1      	ldr	r1, [r0, #28]
 80065aa:	8c02      	ldrh	r2, [r0, #32]
				for ( i = 0; i < (Length - 1); i++)
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	daa2      	bge.n	80064f6 <Protocol_Process_Rx+0x42>
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065b0:	1c56      	adds	r6, r2, #1
 80065b2:	8406      	strh	r6, [r0, #32]
 80065b4:	5cee      	ldrb	r6, [r5, r3]
				for ( i = 0; i < (Length - 1); i++)
 80065b6:	3301      	adds	r3, #1
					*(sLoraVar.sIntanData.Data_a8 + sLoraVar.sIntanData.Length_u16++) = *(pData + i);
 80065b8:	548e      	strb	r6, [r1, r2]
				for ( i = 0; i < (Length - 1); i++)
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	e7f4      	b.n	80065a8 <Protocol_Process_Rx+0xf4>
					Obis = *(pData + Pos++);
 80065be:	5ce9      	ldrb	r1, [r5, r3]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	b2d2      	uxtb	r2, r2
					switch (Obis)
 80065c4:	2901      	cmp	r1, #1
 80065c6:	d012      	beq.n	80065ee <Protocol_Process_Rx+0x13a>
							length_data = *(pData + Pos++);
 80065c8:	3302      	adds	r3, #2
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2911      	cmp	r1, #17
 80065ce:	d000      	beq.n	80065d2 <Protocol_Process_Rx+0x11e>
 80065d0:	0013      	movs	r3, r2
				while (Pos < (Length - 1))  //bo crc
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	dbf3      	blt.n	80065be <Protocol_Process_Rx+0x10a>
				if (sModem.Mode == _MODE_WAKEUP)
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <Protocol_Process_Rx+0x164>)
 80065d8:	7e5b      	ldrb	r3, [r3, #25]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d102      	bne.n	80065e4 <Protocol_Process_Rx+0x130>
					USER_Payload_Station_Mode(0);
 80065de:	2000      	movs	r0, #0
 80065e0:	f7ff fe9a 	bl	8006318 <USER_Payload_Station_Mode>
	            Radio.Rx(RX_TIMEOUT_VALUE);
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <Protocol_Process_Rx+0x168>)
 80065e6:	480e      	ldr	r0, [pc, #56]	; (8006620 <Protocol_Process_Rx+0x16c>)
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	4798      	blx	r3
    			break;
 80065ec:	e788      	b.n	8006500 <Protocol_Process_Rx+0x4c>
							Pos++;
 80065ee:	3306      	adds	r3, #6
 80065f0:	b2db      	uxtb	r3, r3
							break;
 80065f2:	e7ee      	b.n	80065d2 <Protocol_Process_Rx+0x11e>
    	switch(DataType)
 80065f4:	2300      	movs	r3, #0
				while (Pos < (Length - 1))  //bo crc
 80065f6:	3c01      	subs	r4, #1
 80065f8:	e7eb      	b.n	80065d2 <Protocol_Process_Rx+0x11e>
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	08008a74 	.word	0x08008a74
 8006600:	20000080 	.word	0x20000080
 8006604:	20000064 	.word	0x20000064
 8006608:	20001290 	.word	0x20001290
 800660c:	08008a8d 	.word	0x08008a8d
 8006610:	08008aa5 	.word	0x08008aa5
 8006614:	08008ac6 	.word	0x08008ac6
 8006618:	200000c0 	.word	0x200000c0
 800661c:	08008404 	.word	0x08008404
 8006620:	0037b1d0 	.word	0x0037b1d0

08006624 <Protocol_Extract_Rx>:
{
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	0004      	movs	r4, r0
 8006628:	001e      	movs	r6, r3
    LOG_Array(LOG_RECEI, pData, Length, "");
 800662a:	b28a      	uxth	r2, r1
 800662c:	4b27      	ldr	r3, [pc, #156]	; (80066cc <Protocol_Extract_Rx+0xa8>)
{
 800662e:	000f      	movs	r7, r1
    LOG_Array(LOG_RECEI, pData, Length, "");
 8006630:	0001      	movs	r1, r0
 8006632:	2003      	movs	r0, #3
 8006634:	f000 fec8 	bl	80073c8 <LOG_Array>
    sFrameRx->Header.Value 	= 	*(pData);
 8006638:	7822      	ldrb	r2, [r4, #0]
 800663a:	7032      	strb	r2, [r6, #0]
    DevAddrRx = DevAddrRx << 8 | *(pData + 1);
 800663c:	78a3      	ldrb	r3, [r4, #2]
 800663e:	7861      	ldrb	r1, [r4, #1]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	430b      	orrs	r3, r1
 8006644:	78e1      	ldrb	r1, [r4, #3]
 8006646:	0409      	lsls	r1, r1, #16
 8006648:	4319      	orrs	r1, r3
 800664a:	7923      	ldrb	r3, [r4, #4]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	430b      	orrs	r3, r1
 8006650:	ba1b      	rev	r3, r3
    sFrameRx->DevAddr = DevAddrRx;
 8006652:	6073      	str	r3, [r6, #4]
    NetAddrRx = NetAddrRx << 8 | *(pData + 5);
 8006654:	79a3      	ldrb	r3, [r4, #6]
 8006656:	7960      	ldrb	r0, [r4, #5]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	4303      	orrs	r3, r0
 800665c:	79e0      	ldrb	r0, [r4, #7]
 800665e:	1d61      	adds	r1, r4, #5
 8006660:	0400      	lsls	r0, r0, #16
 8006662:	4318      	orrs	r0, r3
 8006664:	7a23      	ldrb	r3, [r4, #8]
 8006666:	061b      	lsls	r3, r3, #24
 8006668:	4303      	orrs	r3, r0
 800666a:	ba1b      	rev	r3, r3
    sFrameRx->NetAddr = NetAddrRx;
 800666c:	60b3      	str	r3, [r6, #8]
		if ((*(pData + 1) != 0x54) || (*(pData + 11) != 0x54))
 800666e:	7863      	ldrb	r3, [r4, #1]
 8006670:	2b54      	cmp	r3, #84	; 0x54
 8006672:	d102      	bne.n	800667a <Protocol_Extract_Rx+0x56>
 8006674:	7ae3      	ldrb	r3, [r4, #11]
 8006676:	2b54      	cmp	r3, #84	; 0x54
 8006678:	d006      	beq.n	8006688 <Protocol_Extract_Rx+0x64>
			LOG(LOG_DEBUG, "Fail device");
 800667a:	4915      	ldr	r1, [pc, #84]	; (80066d0 <Protocol_Extract_Rx+0xac>)
				LOG(LOG_DEBUG, "Fail network id");
 800667c:	2001      	movs	r0, #1
 800667e:	f000 fe59 	bl	8007334 <LOG>
				return FALSE;
 8006682:	2500      	movs	r5, #0
}
 8006684:	0028      	movs	r0, r5
 8006686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ( *(pData + 5 + i) != *(sModem.sNET_id.Data_a8 + i))
 8006688:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <Protocol_Extract_Rx+0xb0>)
 800668a:	6898      	ldr	r0, [r3, #8]
 800668c:	2300      	movs	r3, #0
 800668e:	5ccd      	ldrb	r5, [r1, r3]
 8006690:	46ac      	mov	ip, r5
 8006692:	5cc5      	ldrb	r5, [r0, r3]
 8006694:	45ac      	cmp	ip, r5
 8006696:	d001      	beq.n	800669c <Protocol_Extract_Rx+0x78>
				LOG(LOG_DEBUG, "Fail network id");
 8006698:	490f      	ldr	r1, [pc, #60]	; (80066d8 <Protocol_Extract_Rx+0xb4>)
 800669a:	e7ef      	b.n	800667c <Protocol_Extract_Rx+0x58>
		for (i = 0; i < 4; i++)
 800669c:	3301      	adds	r3, #1
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d1f5      	bne.n	800668e <Protocol_Extract_Rx+0x6a>
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_UP)
 80066a2:	3303      	adds	r3, #3
    uint8_t 	Result = FALSE;
 80066a4:	2500      	movs	r5, #0
		if (sFrameRx->Header.Bits.RespondType_u8 == DATA_CONFIRMED_UP)
 80066a6:	401a      	ands	r2, r3
 80066a8:	2a03      	cmp	r2, #3
 80066aa:	d102      	bne.n	80066b2 <Protocol_Extract_Rx+0x8e>
			sCtrlLora.CtrlACK_u8 = TRUE;
 80066ac:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <Protocol_Extract_Rx+0xb8>)
 80066ae:	3501      	adds	r5, #1
 80066b0:	701d      	strb	r5, [r3, #0]
		if (Length > 9)
 80066b2:	2f09      	cmp	r7, #9
 80066b4:	d9e6      	bls.n	8006684 <Protocol_Extract_Rx+0x60>
			Protocol_Process_Rx (sFrameRx->Header.Bits.DataType_u8, pData + 9, Length - 9);
 80066b6:	0021      	movs	r1, r4
 80066b8:	7830      	ldrb	r0, [r6, #0]
 80066ba:	3f09      	subs	r7, #9
 80066bc:	0680      	lsls	r0, r0, #26
 80066be:	b2fa      	uxtb	r2, r7
 80066c0:	3109      	adds	r1, #9
 80066c2:	0f40      	lsrs	r0, r0, #29
 80066c4:	f7ff fef6 	bl	80064b4 <Protocol_Process_Rx>
 80066c8:	e7dc      	b.n	8006684 <Protocol_Extract_Rx+0x60>
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	0800876c 	.word	0x0800876c
 80066d0:	08008add 	.word	0x08008add
 80066d4:	200000c0 	.word	0x200000c0
 80066d8:	08008ae9 	.word	0x08008ae9
 80066dc:	2000111c 	.word	0x2000111c

080066e0 <Protocol_Packet_Header>:

uint8_t Protocol_Packet_Header (LoRaFrame_t *pFrame, uint8_t RespondType, uint8_t DataType)
{
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 80066e0:	2338      	movs	r3, #56	; 0x38
{
 80066e2:	b510      	push	{r4, lr}
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 80066e4:	2440      	movs	r4, #64	; 0x40
 80066e6:	00d2      	lsls	r2, r2, #3
 80066e8:	401a      	ands	r2, r3
 80066ea:	3b31      	subs	r3, #49	; 0x31
 80066ec:	4019      	ands	r1, r3
 80066ee:	430a      	orrs	r2, r1
	pFrame->Header.Bits.DataType_u8 = DataType;
	pFrame->Header.Bits.ACK_u8 = sCtrlLora.CtrlACK_u8;
 80066f0:	490c      	ldr	r1, [pc, #48]	; (8006724 <Protocol_Packet_Header+0x44>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 80066f2:	780b      	ldrb	r3, [r1, #0]
 80066f4:	019b      	lsls	r3, r3, #6
 80066f6:	4023      	ands	r3, r4
 80066f8:	431a      	orrs	r2, r3

	#ifdef DEVICE_TYPE_STATION
		if (sModem.SendAll == 1)
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <Protocol_Packet_Header+0x48>)
 80066fc:	3350      	adds	r3, #80	; 0x50
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	425c      	negs	r4, r3
 8006704:	4163      	adcs	r3, r4
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 8006706:	01db      	lsls	r3, r3, #7
 8006708:	431a      	orrs	r2, r3
	#else
		pFrame->Header.Bits.SendAll = 0;
	#endif

	#ifdef DEVICE_TYPE_STATION
		pFrame->DevAddr = sLoraVar.sFrameRx.DevAddr;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <Protocol_Packet_Header+0x4c>)
	pFrame->Header.Bits.RespondType_u8 = RespondType;
 800670c:	7002      	strb	r2, [r0, #0]
		pFrame->DevAddr = sLoraVar.sFrameRx.DevAddr;
 800670e:	695a      	ldr	r2, [r3, #20]
		pFrame->NetAddr = sLoraVar.sFrameRx.NetAddr;
 8006710:	699b      	ldr	r3, [r3, #24]
		pFrame->DevAddr = sLoraVar.sFrameRx.DevAddr;
 8006712:	6042      	str	r2, [r0, #4]
		pFrame->NetAddr = sLoraVar.sFrameRx.NetAddr;
 8006714:	6083      	str	r3, [r0, #8]

		pFrame->DevAddr = DCUID_u32;
		pFrame->NetAddr = NETID_u32;
	#endif

	sCtrlLora.CtrlACK_u8 = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	700b      	strb	r3, [r1, #0]

    if (pFrame->Header.Bits.ACK_u8 != 0)
 800671a:	7800      	ldrb	r0, [r0, #0]
 800671c:	0640      	lsls	r0, r0, #25
    {
        return 1;
    }
    return 0;
}
 800671e:	0fc0      	lsrs	r0, r0, #31
 8006720:	bd10      	pop	{r4, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	2000111c 	.word	0x2000111c
 8006728:	200000c0 	.word	0x200000c0
 800672c:	20000064 	.word	0x20000064

08006730 <HAL_ADC_MspDeInit>:
 8006730:	4770      	bx	lr
	...

08006734 <MX_GPIO_Init>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* Exported functions --------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 8006734:	b530      	push	{r4, r5, lr}
	#ifdef DEVICE_TYPE_STATION
		GPIO_InitTypeDef GPIO_InitStruct = {0};

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006736:	2401      	movs	r4, #1
{
 8006738:	b089      	sub	sp, #36	; 0x24
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800673a:	2214      	movs	r2, #20
 800673c:	2100      	movs	r1, #0
 800673e:	a803      	add	r0, sp, #12
 8006740:	f001 f914 	bl	800796c <memset>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006744:	2102      	movs	r1, #2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <MX_GPIO_Init+0x54>)

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006748:	4d10      	ldr	r5, [pc, #64]	; (800678c <MX_GPIO_Init+0x58>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800674c:	0028      	movs	r0, r5
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800674e:	4322      	orrs	r2, r4
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4022      	ands	r2, r4
 8006756:	9201      	str	r2, [sp, #4]
 8006758:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	430a      	orrs	r2, r1
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006762:	2200      	movs	r2, #0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006764:	400b      	ands	r3, r1
 8006766:	9302      	str	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006768:	1849      	adds	r1, r1, r1
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800676a:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800676c:	f7fb fa2e 	bl	8001bcc <HAL_GPIO_WritePin>

		/*Configure GPIO pin : PtPin */
		GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8006770:	2304      	movs	r3, #4
 8006772:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006774:	2300      	movs	r3, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8006776:	0028      	movs	r0, r5
 8006778:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800677a:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677c:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800677e:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8006780:	f7fb f8da 	bl	8001938 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
		#endif
}
 8006784:	b009      	add	sp, #36	; 0x24
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	40021000 	.word	0x40021000
 800678c:	50000400 	.word	0x50000400

08006790 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart2_tx;

void MX_USART1_UART_Init(void)
{
	huart1.Instance = USART1;
 8006790:	480b      	ldr	r0, [pc, #44]	; (80067c0 <MX_USART1_UART_Init+0x30>)
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <MX_USART1_UART_Init+0x34>)
{
 8006794:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 8006796:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8006798:	23e1      	movs	r3, #225	; 0xe1
 800679a:	025b      	lsls	r3, r3, #9
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 800679c:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 800679e:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067a0:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 80067a2:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067a4:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80067a6:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80067a8:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067aa:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067ac:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ae:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067b0:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80067b2:	f7fd f8f7 	bl	80039a4 <HAL_UART_Init>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d001      	beq.n	80067be <MX_USART1_UART_Init+0x2e>
	{
		Error_Handler();
 80067ba:	f7f9 ff89 	bl	80006d0 <Error_Handler>
	}
}
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	20001290 	.word	0x20001290
 80067c4:	40013800 	.word	0x40013800

080067c8 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
	huart2.Instance = USART2;
 80067c8:	480b      	ldr	r0, [pc, #44]	; (80067f8 <MX_USART2_UART_Init+0x30>)
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <MX_USART2_UART_Init+0x34>)
{
 80067cc:	b510      	push	{r4, lr}
	huart2.Instance = USART2;
 80067ce:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80067d0:	23e1      	movs	r3, #225	; 0xe1
 80067d2:	025b      	lsls	r3, r3, #9
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 80067d4:	220c      	movs	r2, #12
	huart2.Init.BaudRate = 115200;
 80067d6:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067d8:	2300      	movs	r3, #0
	huart2.Init.Mode = UART_MODE_TX_RX;
 80067da:	6142      	str	r2, [r0, #20]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067dc:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80067de:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80067e0:	6103      	str	r3, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067e2:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067e4:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067e6:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067e8:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80067ea:	f7fd f8db 	bl	80039a4 <HAL_UART_Init>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d001      	beq.n	80067f6 <MX_USART2_UART_Init+0x2e>
	{
		Error_Handler();
 80067f2:	f7f9 ff6d 	bl	80006d0 <Error_Handler>
	}
}
 80067f6:	bd10      	pop	{r4, pc}
 80067f8:	2000120c 	.word	0x2000120c
 80067fc:	40004400 	.word	0x40004400

08006800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8006800:	b510      	push	{r4, lr}
 8006802:	0004      	movs	r4, r0
 8006804:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006806:	2214      	movs	r2, #20
 8006808:	2100      	movs	r1, #0
 800680a:	a802      	add	r0, sp, #8
 800680c:	f001 f8ae 	bl	800796c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006810:	2224      	movs	r2, #36	; 0x24
 8006812:	2100      	movs	r1, #0
 8006814:	a807      	add	r0, sp, #28
 8006816:	f001 f8a9 	bl	800796c <memset>

  if(uartHandle->Instance==USART1)
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	4a32      	ldr	r2, [pc, #200]	; (80068e8 <HAL_UART_MspInit+0xe8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d130      	bne.n	8006884 <HAL_UART_MspInit+0x84>
  {
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006822:	2280      	movs	r2, #128	; 0x80
 8006824:	4b31      	ldr	r3, [pc, #196]	; (80068ec <HAL_UART_MspInit+0xec>)
 8006826:	01d2      	lsls	r2, r2, #7
 8006828:	6b59      	ldr	r1, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();

	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800682a:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART1_CLK_ENABLE();
 800682c:	430a      	orrs	r2, r1
 800682e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006830:	2201      	movs	r2, #1
 8006832:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006834:	4311      	orrs	r1, r2
 8006836:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800683a:	9207      	str	r2, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800683c:	4013      	ands	r3, r2
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	9b00      	ldr	r3, [sp, #0]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8006842:	920a      	str	r2, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006844:	f7fb fdba 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8006848:	2800      	cmp	r0, #0
 800684a:	d001      	beq.n	8006850 <HAL_UART_MspInit+0x50>
	    {
	    	Error_Handler();
 800684c:	f7f9 ff40 	bl	80006d0 <Error_Handler>
		/**USART1 GPIO Configuration
		PA9     ------> USART1_TX
		PA10     ------> USART1_RX
		*/
		#ifdef DEVICE_TYPE_STATION
				GPIO_InitStruct.Pin = MCU_TX_Pin|MCU_RX_Pin;
 8006850:	23c0      	movs	r3, #192	; 0xc0
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	9302      	str	r3, [sp, #8]
		#else
				GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
		#endif
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006856:	2302      	movs	r3, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006858:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685a:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800685c:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800685e:	3301      	adds	r3, #1
 8006860:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006862:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006864:	3301      	adds	r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006866:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006868:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686a:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800686c:	f7fb f864 	bl	8001938 <HAL_GPIO_Init>

	    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8006870:	201b      	movs	r0, #27
 8006872:	2201      	movs	r2, #1
 8006874:	0021      	movs	r1, r4
 8006876:	f7fa fe4d 	bl	8001514 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800687a:	201b      	movs	r0, #27
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800687c:	f7fa fe74 	bl	8001568 <HAL_NVIC_EnableIRQ>
//	    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
//	#else
//	#endif
  }
}
 8006880:	b010      	add	sp, #64	; 0x40
 8006882:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8006884:	4a1a      	ldr	r2, [pc, #104]	; (80068f0 <HAL_UART_MspInit+0xf0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d1fa      	bne.n	8006880 <HAL_UART_MspInit+0x80>
	    __HAL_RCC_USART2_CLK_ENABLE();
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	4b17      	ldr	r3, [pc, #92]	; (80068ec <HAL_UART_MspInit+0xec>)
 800688e:	0292      	lsls	r2, r2, #10
 8006890:	6b99      	ldr	r1, [r3, #56]	; 0x38
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006892:	a807      	add	r0, sp, #28
	    __HAL_RCC_USART2_CLK_ENABLE();
 8006894:	430a      	orrs	r2, r1
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006896:	2101      	movs	r1, #1
	    __HAL_RCC_USART2_CLK_ENABLE();
 8006898:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	430a      	orrs	r2, r1
 800689e:	62da      	str	r2, [r3, #44]	; 0x2c
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	400b      	ands	r3, r1
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	9b01      	ldr	r3, [sp, #4]
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068a8:	2302      	movs	r3, #2
 80068aa:	9307      	str	r3, [sp, #28]
	    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80068ac:	18db      	adds	r3, r3, r3
 80068ae:	930a      	str	r3, [sp, #40]	; 0x28
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068b0:	f7fb fd84 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d001      	beq.n	80068bc <HAL_UART_MspInit+0xbc>
	    	Error_Handler();
 80068b8:	f7f9 ff0a 	bl	80006d0 <Error_Handler>
	    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80068bc:	230c      	movs	r3, #12
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068be:	20a0      	movs	r0, #160	; 0xa0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c0:	2400      	movs	r4, #0
	    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80068c2:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c4:	3b0a      	subs	r3, #10
 80068c6:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c8:	3301      	adds	r3, #1
 80068ca:	9305      	str	r3, [sp, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068cc:	a902      	add	r1, sp, #8
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80068ce:	3301      	adds	r3, #1
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d0:	05c0      	lsls	r0, r0, #23
	    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80068d2:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	9404      	str	r4, [sp, #16]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d6:	f7fb f82f 	bl	8001938 <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80068da:	201c      	movs	r0, #28
 80068dc:	2201      	movs	r2, #1
 80068de:	0021      	movs	r1, r4
 80068e0:	f7fa fe18 	bl	8001514 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068e4:	201c      	movs	r0, #28
 80068e6:	e7c9      	b.n	800687c <HAL_UART_MspInit+0x7c>
 80068e8:	40013800 	.word	0x40013800
 80068ec:	40021000 	.word	0x40021000
 80068f0:	40004400 	.word	0x40004400

080068f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if(uartHandle->Instance==USART1)
 80068f4:	6803      	ldr	r3, [r0, #0]
 80068f6:	4a10      	ldr	r2, [pc, #64]	; (8006938 <HAL_UART_MspDeInit+0x44>)
{
 80068f8:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d10d      	bne.n	800691a <HAL_UART_MspDeInit+0x26>
		PA10     ------> USART1_RX
		*/
//		#ifdef DEVICE_TYPE_STATION
//				HAL_GPIO_DeInit(GPIOA, MCU_TX_Pin|MCU_RX_Pin);
//		#else
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 80068fe:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_USART1_CLK_DISABLE();
 8006900:	4a0e      	ldr	r2, [pc, #56]	; (800693c <HAL_UART_MspDeInit+0x48>)
 8006902:	490f      	ldr	r1, [pc, #60]	; (8006940 <HAL_UART_MspDeInit+0x4c>)
 8006904:	6b53      	ldr	r3, [r2, #52]	; 0x34
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8006906:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_USART1_CLK_DISABLE();
 8006908:	400b      	ands	r3, r1
 800690a:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800690c:	210c      	movs	r1, #12
 800690e:	f7fb f8d7 	bl	8001ac0 <HAL_GPIO_DeInit>
//		#endif
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006912:	201b      	movs	r0, #27
	    /**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	    */
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006914:	f7fa fe34 	bl	8001580 <HAL_NVIC_DisableIRQ>
//	    HAL_DMA_DeInit(uartHandle->hdmatx);
//	#endif
  }
}
 8006918:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 800691a:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <HAL_UART_MspDeInit+0x50>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d1fb      	bne.n	8006918 <HAL_UART_MspDeInit+0x24>
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8006920:	20a0      	movs	r0, #160	; 0xa0
	    __HAL_RCC_USART2_CLK_DISABLE();
 8006922:	4a06      	ldr	r2, [pc, #24]	; (800693c <HAL_UART_MspDeInit+0x48>)
 8006924:	4908      	ldr	r1, [pc, #32]	; (8006948 <HAL_UART_MspDeInit+0x54>)
 8006926:	6b93      	ldr	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8006928:	05c0      	lsls	r0, r0, #23
	    __HAL_RCC_USART2_CLK_DISABLE();
 800692a:	400b      	ands	r3, r1
 800692c:	6393      	str	r3, [r2, #56]	; 0x38
	    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800692e:	210c      	movs	r1, #12
 8006930:	f7fb f8c6 	bl	8001ac0 <HAL_GPIO_DeInit>
	    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006934:	201c      	movs	r0, #28
 8006936:	e7ed      	b.n	8006914 <HAL_UART_MspDeInit+0x20>
 8006938:	40013800 	.word	0x40013800
 800693c:	40021000 	.word	0x40021000
 8006940:	ffffbfff 	.word	0xffffbfff
 8006944:	40004400 	.word	0x40004400
 8006948:	fffdffff 	.word	0xfffdffff

0800694c <fevent_active>:
 * @brief	Active 1 event len
 * @note	Cho event thuc hien luon
 */
uint8_t fevent_active(sEvent_struct *event_struct, uint8_t event_name)
{
	event_struct[event_name].e_status = 1;
 800694c:	0109      	lsls	r1, r1, #4
 800694e:	1841      	adds	r1, r0, r1
	event_struct[event_name].e_systick = 0;
 8006950:	2300      	movs	r3, #0
	event_struct[event_name].e_status = 1;
 8006952:	2001      	movs	r0, #1
 8006954:	7048      	strb	r0, [r1, #1]
	event_struct[event_name].e_systick = 0;
 8006956:	604b      	str	r3, [r1, #4]
	return 1;
}
 8006958:	4770      	bx	lr

0800695a <fevent_enable>:
/**
 * @brief	Enable 1 event len
 * @note	Cho phep mot event kich hoat sau period cua no
 */
uint8_t fevent_enable(sEvent_struct *event_struct, uint8_t event_name)
{
 800695a:	b570      	push	{r4, r5, r6, lr}
	event_struct[event_name].e_status = 1;
 800695c:	2501      	movs	r5, #1
 800695e:	010c      	lsls	r4, r1, #4
 8006960:	1904      	adds	r4, r0, r4
 8006962:	7065      	strb	r5, [r4, #1]
	event_struct[event_name].e_systick = HAL_GetTick();
 8006964:	f7fa fc72 	bl	800124c <HAL_GetTick>
 8006968:	6060      	str	r0, [r4, #4]
	return 1;
}
 800696a:	0028      	movs	r0, r5
 800696c:	bd70      	pop	{r4, r5, r6, pc}

0800696e <OnchipFlashWriteData>:
/* Exported functions --------------------------------------------------------*/
/**
 * @note	So luong bien truyen vao Phai la Boi cua 8
 */
HAL_StatusTypeDef	OnchipFlashWriteData (uint32_t andress, uint8_t	*data_address, uint32_t data_length)
{
 800696e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef   status = HAL_ERROR;

	temp_data_address = data_address;
	temp_write_address = andress;

	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 8006970:	2303      	movs	r3, #3
 8006972:	0014      	movs	r4, r2
{
 8006974:	000f      	movs	r7, r1
	HAL_StatusTypeDef   status = HAL_ERROR;
 8006976:	2501      	movs	r5, #1
{
 8006978:	9001      	str	r0, [sp, #4]
	if ((data_length % FLASH_BYTE_WRTIE) == 0)
 800697a:	401c      	ands	r4, r3
 800697c:	421a      	tst	r2, r3
 800697e:	d110      	bne.n	80069a2 <OnchipFlashWriteData+0x34>
	{
		//Calculate number of word to write
		writetime = data_length / FLASH_BYTE_WRTIE;
 8006980:	0893      	lsrs	r3, r2, #2
 8006982:	9300      	str	r3, [sp, #0]
		//Unlock flash
		HAL_FLASH_Unlock();
 8006984:	f7fa ff2c 	bl	80017e0 <HAL_FLASH_Unlock>
		//Wait for last operation to be completed
        FLASH_WaitForLastOperation(1000);
 8006988:	20fa      	movs	r0, #250	; 0xfa
 800698a:	0080      	lsls	r0, r0, #2
 800698c:	f7fa ff68 	bl	8001860 <FLASH_WaitForLastOperation>
	temp_data_address = data_address;
 8006990:	003e      	movs	r6, r7
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	1bd9      	subs	r1, r3, r7
		//Change bytes order then write
		for (i = 0; i < writetime; i++)
 8006996:	9b00      	ldr	r3, [sp, #0]
 8006998:	1871      	adds	r1, r6, r1
 800699a:	42a3      	cmp	r3, r4
 800699c:	d803      	bhi.n	80069a6 <OnchipFlashWriteData+0x38>
				break;
			temp_write_address = temp_write_address + FLASH_BYTE_WRTIE;
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
		}
		//Lock flash
		HAL_FLASH_Lock();
 800699e:	f7fa ff51 	bl	8001844 <HAL_FLASH_Lock>
	}
	return status;
}
 80069a2:	0028      	movs	r0, r5
 80069a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 80069a6:	2002      	movs	r0, #2
			WriteData = *(__IO uint32_t*)(temp_data_address);
 80069a8:	6832      	ldr	r2, [r6, #0]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp_write_address, WriteData);
 80069aa:	f7fa ff93 	bl	80018d4 <HAL_FLASH_Program>
 80069ae:	0005      	movs	r5, r0
			if (status == HAL_ERROR)
 80069b0:	2801      	cmp	r0, #1
 80069b2:	d0f4      	beq.n	800699e <OnchipFlashWriteData+0x30>
		for (i = 0; i < writetime; i++)
 80069b4:	3401      	adds	r4, #1
			temp_data_address = temp_data_address + FLASH_BYTE_WRTIE;
 80069b6:	3604      	adds	r6, #4
		for (i = 0; i < writetime; i++)
 80069b8:	b2a4      	uxth	r4, r4
 80069ba:	e7ea      	b.n	8006992 <OnchipFlashWriteData+0x24>

080069bc <OnchipFlashPageErase>:
	}
	return status;
}

HAL_StatusTypeDef OnchipFlashPageErase (uint32_t pageaddress)
{
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	0004      	movs	r4, r0
	HAL_StatusTypeDef status = HAL_ERROR;
    //Unlock flash
    status = HAL_FLASH_Unlock();
 80069c0:	f7fa ff0e 	bl	80017e0 <HAL_FLASH_Unlock>
 80069c4:	0005      	movs	r5, r0
    //Wait for last operation to be completed
    FLASH_WaitForLastOperation(1000);
 80069c6:	20fa      	movs	r0, #250	; 0xfa
 80069c8:	0080      	lsls	r0, r0, #2
 80069ca:	f7fa ff49 	bl	8001860 <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation(1000);
        //Disable the PER Bit
        CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
    #else
        //If the previous operation is completed, proceed to erase the page
        if (status == HAL_OK)
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	d102      	bne.n	80069d8 <OnchipFlashPageErase+0x1c>
            FLASH_PageErase(pageaddress);
 80069d2:	0020      	movs	r0, r4
 80069d4:	f7fa ff9a 	bl	800190c <FLASH_PageErase>
        //Wait for last operation to be completed
        status = FLASH_WaitForLastOperation(1000);
 80069d8:	20fa      	movs	r0, #250	; 0xfa
 80069da:	0080      	lsls	r0, r0, #2
 80069dc:	f7fa ff40 	bl	8001860 <FLASH_WaitForLastOperation>
        //Disable the PER Bit
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80069e0:	4b06      	ldr	r3, [pc, #24]	; (80069fc <OnchipFlashPageErase+0x40>)
 80069e2:	4907      	ldr	r1, [pc, #28]	; (8006a00 <OnchipFlashPageErase+0x44>)
 80069e4:	685a      	ldr	r2, [r3, #4]
        status = FLASH_WaitForLastOperation(1000);
 80069e6:	0004      	movs	r4, r0
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80069e8:	400a      	ands	r2, r1
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80069ea:	2108      	movs	r1, #8
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80069ec:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	438a      	bics	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
    #endif
    HAL_FLASH_Lock();
 80069f4:	f7fa ff26 	bl	8001844 <HAL_FLASH_Lock>
	return status;
}
 80069f8:	0020      	movs	r0, r4
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	40022000 	.word	0x40022000
 8006a00:	fffffdff 	.word	0xfffffdff

08006a04 <Erase_Firmware>:

void Erase_Firmware(uint32_t Add_Flash_update, uint32_t Total_page)
{
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	0006      	movs	r6, r0
 8006a08:	000d      	movs	r5, r1
	uint32_t var;
	for (var = 0; var < Total_page; var++)
 8006a0a:	2400      	movs	r4, #0
 8006a0c:	42ac      	cmp	r4, r5
 8006a0e:	d100      	bne.n	8006a12 <Erase_Firmware+0xe>
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
}
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
		OnchipFlashPageErase(Add_Flash_update + var * FLASH_PAGE_SIZE);
 8006a12:	01e0      	lsls	r0, r4, #7
 8006a14:	1980      	adds	r0, r0, r6
 8006a16:	f7ff ffd1 	bl	80069bc <OnchipFlashPageErase>
	for (var = 0; var < Total_page; var++)
 8006a1a:	3401      	adds	r4, #1
 8006a1c:	e7f6      	b.n	8006a0c <Erase_Firmware+0x8>

08006a1e <OnchipFlashReadData>:
	uint16_t    i=0;
	uint32_t    temp_address;
	uint8_t     *temp_destination;
	temp_address = address;
	temp_destination = destination;
	for (i = 0; i < length_inByte; i++)
 8006a1e:	2300      	movs	r3, #0
{
 8006a20:	b510      	push	{r4, lr}
	for (i = 0; i < length_inByte; i++)
 8006a22:	b29c      	uxth	r4, r3
 8006a24:	42a2      	cmp	r2, r4
 8006a26:	d800      	bhi.n	8006a2a <OnchipFlashReadData+0xc>
	{
		*temp_destination = *(__IO uint8_t*)temp_address;
		temp_destination++;
		temp_address++;
	}
}
 8006a28:	bd10      	pop	{r4, pc}
		*temp_destination = *(__IO uint8_t*)temp_address;
 8006a2a:	18c4      	adds	r4, r0, r3
 8006a2c:	7824      	ldrb	r4, [r4, #0]
 8006a2e:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < length_inByte; i++)
 8006a30:	3301      	adds	r3, #1
 8006a32:	e7f6      	b.n	8006a22 <OnchipFlashReadData+0x4>

08006a34 <UTIL_LPM_SetStopMode>:

}

void UTIL_LPM_SetStopMode(UTIL_LPM_State_t state)
{
	StopModeDisable = state;
 8006a34:	4b01      	ldr	r3, [pc, #4]	; (8006a3c <UTIL_LPM_SetStopMode+0x8>)
 8006a36:	7118      	strb	r0, [r3, #4]
}
 8006a38:	4770      	bx	lr
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	20001314 	.word	0x20001314

08006a40 <UTIL_LPM_Dis_Debug_STlink>:
{
	HAL_ResumeTick();
}

void UTIL_LPM_Dis_Debug_STlink (void)
{
 8006a40:	b510      	push	{r4, lr}
	HAL_DBGMCU_DisableDBGSleepMode( );
 8006a42:	f7fa fc23 	bl	800128c <HAL_DBGMCU_DisableDBGSleepMode>
	HAL_DBGMCU_DisableDBGStopMode( );
 8006a46:	f7fa fc31 	bl	80012ac <HAL_DBGMCU_DisableDBGStopMode>
	HAL_DBGMCU_DisableDBGStandbyMode( );
 8006a4a:	f7fa fc3f 	bl	80012cc <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8006a4e:	bd10      	pop	{r4, pc}

08006a50 <UTIL_LPM_Init>:
	StopModeDisable = LPM_TRUE;
 8006a50:	2201      	movs	r2, #1
{
 8006a52:	b510      	push	{r4, lr}
	StopModeDisable = LPM_TRUE;
 8006a54:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <UTIL_LPM_Init+0x10>)
 8006a56:	711a      	strb	r2, [r3, #4]
	UTIL_LPM_Dis_Debug_STlink();
 8006a58:	f7ff fff2 	bl	8006a40 <UTIL_LPM_Dis_Debug_STlink>
}
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	20001314 	.word	0x20001314

08006a64 <RTC_IF_GetTimerContext>:
 */
uint32_t RTC_IF_GetTimerContext(void)
{
	RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
	/*return time context*/
	return (uint32_t) RtcTimerContext.Rtc_Time;
 8006a64:	4b01      	ldr	r3, [pc, #4]	; (8006a6c <RTC_IF_GetTimerContext+0x8>)
 8006a66:	6818      	ldr	r0, [r3, #0]
}
 8006a68:	4770      	bx	lr
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	2000131c 	.word	0x2000131c

08006a70 <RTC_IF_GetMinimumTimeout>:
 * @retval minimum value for a timeout in ticks
 */
uint32_t RTC_IF_GetMinimumTimeout(void)
{
	return (MIN_ALARM_DELAY);
}
 8006a70:	2003      	movs	r0, #3
 8006a72:	4770      	bx	lr

08006a74 <RTC_IF_Convert_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8006a74:	b510      	push	{r4, lr}
	return (uint32_t) ((((uint64_t) timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8006a76:	0e41      	lsrs	r1, r0, #25
 8006a78:	227d      	movs	r2, #125	; 0x7d
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	01c0      	lsls	r0, r0, #7
 8006a7e:	f7f9 fcdf 	bl	8000440 <__aeabi_uldivmod>
}
 8006a82:	bd10      	pop	{r4, pc}

08006a84 <RTC_IF_Convert_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in timer milliseconds
 */
uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8006a84:	b510      	push	{r4, lr}
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8006a86:	227d      	movs	r2, #125	; 0x7d
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	f7f9 fcf8 	bl	8000480 <__aeabi_lmul>
 8006a90:	0649      	lsls	r1, r1, #25
 8006a92:	09c0      	lsrs	r0, r0, #7
 8006a94:	4308      	orrs	r0, r1
}
 8006a96:	bd10      	pop	{r4, pc}

08006a98 <RTC_IF_StopTimer>:
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8006a98:	4806      	ldr	r0, [pc, #24]	; (8006ab4 <RTC_IF_StopTimer+0x1c>)
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <RTC_IF_StopTimer+0x20>)
 8006a9c:	6801      	ldr	r1, [r0, #0]
{
 8006a9e:	b510      	push	{r4, lr}
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8006aa0:	68ca      	ldr	r2, [r1, #12]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60cb      	str	r3, [r1, #12]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8006aa8:	2180      	movs	r1, #128	; 0x80
 8006aaa:	0049      	lsls	r1, r1, #1
 8006aac:	f7fb fd62 	bl	8002574 <HAL_RTC_DeactivateAlarm>
}
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	bd10      	pop	{r4, pc}
 8006ab4:	200001cc 	.word	0x200001cc
 8006ab8:	fffffe7f 	.word	0xfffffe7f

08006abc <RTC_IF_StartTimer>:
{
 8006abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006abe:	0006      	movs	r6, r0
	uint16_t rtcAlarmSubSeconds = 0;
	uint16_t rtcAlarmSeconds = 0;
	uint16_t rtcAlarmMinutes = 0;
	uint16_t rtcAlarmHours = 0;
	uint16_t rtcAlarmDays = 0;
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006ac0:	4c41      	ldr	r4, [pc, #260]	; (8006bc8 <RTC_IF_StartTimer+0x10c>)
{
 8006ac2:	b087      	sub	sp, #28
	RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006ac4:	7923      	ldrb	r3, [r4, #4]
 8006ac6:	68a7      	ldr	r7, [r4, #8]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	7963      	ldrb	r3, [r4, #5]
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	79a3      	ldrb	r3, [r4, #6]
 8006ad0:	9302      	str	r3, [sp, #8]
 8006ad2:	79e3      	ldrb	r3, [r4, #7]
 8006ad4:	9303      	str	r3, [sp, #12]
	RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8006ad6:	7e63      	ldrb	r3, [r4, #25]
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	7ee3      	ldrb	r3, [r4, #27]
 8006adc:	7ea5      	ldrb	r5, [r4, #26]
 8006ade:	9305      	str	r3, [sp, #20]
	RTC_IF_StopTimer();
 8006ae0:	f7ff ffda 	bl	8006a98 <RTC_IF_StopTimer>
	/*reverse counter */
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8006ae4:	4b39      	ldr	r3, [pc, #228]	; (8006bcc <RTC_IF_StartTimer+0x110>)
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
	/* convert timeout  to seconds */
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
	/*convert microsecs to RTC format and add to 'Now' */
	rtcAlarmDays = RTC_DateStruct.Date;
	while (timeoutValue >= SECONDS_IN_1DAY )
 8006ae6:	493a      	ldr	r1, [pc, #232]	; (8006bd0 <RTC_IF_StartTimer+0x114>)
	rtcAlarmSubSeconds = RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8006ae8:	1bdf      	subs	r7, r3, r7
	rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8006aea:	05b3      	lsls	r3, r6, #22
 8006aec:	0d9b      	lsrs	r3, r3, #22
 8006aee:	18ff      	adds	r7, r7, r3
 8006af0:	b2ba      	uxth	r2, r7
	timeoutValue >>= RTC_N_PREDIV_S; /* convert timeout  in seconds */
 8006af2:	0ab3      	lsrs	r3, r6, #10
	rtcAlarmDays = RTC_DateStruct.Date;
 8006af4:	b2a8      	uxth	r0, r5
	while (timeoutValue >= SECONDS_IN_1DAY )
 8006af6:	428b      	cmp	r3, r1
 8006af8:	d846      	bhi.n	8006b88 <RTC_IF_StartTimer+0xcc>
	{
		timeoutValue -= SECONDS_IN_1DAY;
		rtcAlarmDays++;
	}
	/* calc hours */
	rtcAlarmHours = RTC_TimeStruct.Hours;
 8006afa:	4669      	mov	r1, sp
 8006afc:	880e      	ldrh	r6, [r1, #0]
	while (timeoutValue >= SECONDS_IN_1HOUR )
 8006afe:	21e1      	movs	r1, #225	; 0xe1
 8006b00:	0109      	lsls	r1, r1, #4
 8006b02:	428b      	cmp	r3, r1
 8006b04:	d245      	bcs.n	8006b92 <RTC_IF_StartTimer+0xd6>
	{
		timeoutValue -= SECONDS_IN_1HOUR;
		rtcAlarmHours++;
	}
	/* calc minutes */
	rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8006b06:	4669      	mov	r1, sp
 8006b08:	888f      	ldrh	r7, [r1, #4]
	while (timeoutValue >= SECONDS_IN_1MINUTE )
 8006b0a:	2b3b      	cmp	r3, #59	; 0x3b
 8006b0c:	d846      	bhi.n	8006b9c <RTC_IF_StartTimer+0xe0>
		rtcAlarmMinutes++;
	}
	/* calc seconds */
	rtcAlarmSeconds = RTC_TimeStruct.Seconds + timeoutValue;
	/***** correct for modulo********/
	while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8006b0e:	0a95      	lsrs	r5, r2, #10
 8006b10:	02a9      	lsls	r1, r5, #10
 8006b12:	1a52      	subs	r2, r2, r1
 8006b14:	b292      	uxth	r2, r2
 8006b16:	9200      	str	r2, [sp, #0]
 8006b18:	9a02      	ldr	r2, [sp, #8]
 8006b1a:	18ad      	adds	r5, r5, r2
 8006b1c:	18ed      	adds	r5, r5, r3
 8006b1e:	b2ad      	uxth	r5, r5
	{
		rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
		rtcAlarmSeconds++;
	}
	while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 8006b20:	2d3b      	cmp	r5, #59	; 0x3b
 8006b22:	d83f      	bhi.n	8006ba4 <RTC_IF_StartTimer+0xe8>
	{
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
		rtcAlarmMinutes++;
	}
	while (rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 8006b24:	2f3b      	cmp	r7, #59	; 0x3b
 8006b26:	d842      	bhi.n	8006bae <RTC_IF_StartTimer+0xf2>
	{
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
		rtcAlarmHours++;
	}
	while (rtcAlarmHours >= HOURS_IN_1DAY )
 8006b28:	2e17      	cmp	r6, #23
 8006b2a:	d845      	bhi.n	8006bb8 <RTC_IF_StartTimer+0xfc>
		rtcAlarmHours -= HOURS_IN_1DAY;
		rtcAlarmDays++;
	}
	if (RTC_DateStruct.Year % 4 == 0)
	{
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8006b2c:	9a04      	ldr	r2, [sp, #16]
	if (RTC_DateStruct.Year % 4 == 0)
 8006b2e:	9905      	ldr	r1, [sp, #20]
 8006b30:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <RTC_IF_StartTimer+0x118>)
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8006b32:	3a01      	subs	r2, #1
	if (RTC_DateStruct.Year % 4 == 0)
 8006b34:	0789      	lsls	r1, r1, #30
 8006b36:	d144      	bne.n	8006bc2 <RTC_IF_StartTimer+0x106>
		if (rtcAlarmDays > DaysInMonthLeapYear[RTC_DateStruct.Month - 1])
 8006b38:	5c99      	ldrb	r1, [r3, r2]
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[RTC_DateStruct.Month - 1];
		}
	} else
	{
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 8006b3a:	4288      	cmp	r0, r1
 8006b3c:	d902      	bls.n	8006b44 <RTC_IF_StartTimer+0x88>
		{
			rtcAlarmDays = rtcAlarmDays % DaysInMonth[RTC_DateStruct.Month - 1];
 8006b3e:	f7f9 fc79 	bl	8000434 <__aeabi_idivmod>
 8006b42:	b288      	uxth	r0, r1
		}
	}
	/* Set RTC_AlarmStructure with calculated values*/
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8006b44:	9a00      	ldr	r2, [sp, #0]
 8006b46:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <RTC_IF_StartTimer+0x110>)
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
	RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006b48:	77a5      	strb	r5, [r4, #30]
	RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	6223      	str	r3, [r4, #32]
	RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK;
 8006b4e:	23a0      	movs	r3, #160	; 0xa0
 8006b50:	051b      	lsls	r3, r3, #20
 8006b52:	6363      	str	r3, [r4, #52]	; 0x34
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8006b54:	0023      	movs	r3, r4
 8006b56:	333c      	adds	r3, #60	; 0x3c
 8006b58:	7018      	strb	r0, [r3, #0]
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 8006b5a:	9b03      	ldr	r3, [sp, #12]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006b5c:	2500      	movs	r5, #0
	RTC_AlarmStructure.AlarmTime.TimeFormat = RTC_TimeStruct.TimeFormat;
 8006b5e:	77e3      	strb	r3, [r4, #31]
	RTC_AlarmStructure.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;   // RTC_ALARMMASK_DATEWEEKDAY  ; Old: RTC_ALARMMASK_NONE
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	6323      	str	r3, [r4, #48]	; 0x30
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8006b66:	0021      	movs	r1, r4
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006b68:	2380      	movs	r3, #128	; 0x80
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	/* Set RTC_Alarm */
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006b6a:	002a      	movs	r2, r5
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006b6c:	005b      	lsls	r3, r3, #1
	RTC_AlarmStructure.AlarmDateWeekDay = (uint8_t) rtcAlarmDays;
 8006b6e:	311c      	adds	r1, #28
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006b70:	4819      	ldr	r0, [pc, #100]	; (8006bd8 <RTC_IF_StartTimer+0x11c>)
	RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8006b72:	7767      	strb	r7, [r4, #29]
	RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
 8006b74:	7726      	strb	r6, [r4, #28]
	RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006b76:	63a5      	str	r5, [r4, #56]	; 0x38
	RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006b78:	6423      	str	r3, [r4, #64]	; 0x40
	RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006b7a:	62a5      	str	r5, [r4, #40]	; 0x28
	RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006b7c:	62e5      	str	r5, [r4, #44]	; 0x2c
	HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006b7e:	f7fb ff1b 	bl	80029b8 <HAL_RTC_SetAlarm_IT>
}
 8006b82:	0028      	movs	r0, r5
 8006b84:	b007      	add	sp, #28
 8006b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		timeoutValue -= SECONDS_IN_1DAY;
 8006b88:	4d14      	ldr	r5, [pc, #80]	; (8006bdc <RTC_IF_StartTimer+0x120>)
		rtcAlarmDays++;
 8006b8a:	3001      	adds	r0, #1
		timeoutValue -= SECONDS_IN_1DAY;
 8006b8c:	195b      	adds	r3, r3, r5
		rtcAlarmDays++;
 8006b8e:	b280      	uxth	r0, r0
 8006b90:	e7b1      	b.n	8006af6 <RTC_IF_StartTimer+0x3a>
		timeoutValue -= SECONDS_IN_1HOUR;
 8006b92:	4d13      	ldr	r5, [pc, #76]	; (8006be0 <RTC_IF_StartTimer+0x124>)
		rtcAlarmHours++;
 8006b94:	3601      	adds	r6, #1
		timeoutValue -= SECONDS_IN_1HOUR;
 8006b96:	195b      	adds	r3, r3, r5
		rtcAlarmHours++;
 8006b98:	b2b6      	uxth	r6, r6
 8006b9a:	e7b2      	b.n	8006b02 <RTC_IF_StartTimer+0x46>
		rtcAlarmMinutes++;
 8006b9c:	3701      	adds	r7, #1
		timeoutValue -= SECONDS_IN_1MINUTE;
 8006b9e:	3b3c      	subs	r3, #60	; 0x3c
		rtcAlarmMinutes++;
 8006ba0:	b2bf      	uxth	r7, r7
 8006ba2:	e7b2      	b.n	8006b0a <RTC_IF_StartTimer+0x4e>
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006ba4:	3d3c      	subs	r5, #60	; 0x3c
		rtcAlarmMinutes++;
 8006ba6:	3701      	adds	r7, #1
		rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006ba8:	b2ad      	uxth	r5, r5
		rtcAlarmMinutes++;
 8006baa:	b2bf      	uxth	r7, r7
 8006bac:	e7b8      	b.n	8006b20 <RTC_IF_StartTimer+0x64>
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006bae:	3f3c      	subs	r7, #60	; 0x3c
		rtcAlarmHours++;
 8006bb0:	3601      	adds	r6, #1
		rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006bb2:	b2bf      	uxth	r7, r7
		rtcAlarmHours++;
 8006bb4:	b2b6      	uxth	r6, r6
 8006bb6:	e7b5      	b.n	8006b24 <RTC_IF_StartTimer+0x68>
		rtcAlarmHours -= HOURS_IN_1DAY;
 8006bb8:	3e18      	subs	r6, #24
		rtcAlarmDays++;
 8006bba:	3001      	adds	r0, #1
		rtcAlarmHours -= HOURS_IN_1DAY;
 8006bbc:	b2b6      	uxth	r6, r6
		rtcAlarmDays++;
 8006bbe:	b280      	uxth	r0, r0
 8006bc0:	e7b2      	b.n	8006b28 <RTC_IF_StartTimer+0x6c>
		if (rtcAlarmDays > DaysInMonth[RTC_DateStruct.Month - 1])
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	7b19      	ldrb	r1, [r3, #12]
 8006bc6:	e7b8      	b.n	8006b3a <RTC_IF_StartTimer+0x7e>
 8006bc8:	2000131c 	.word	0x2000131c
 8006bcc:	000003ff 	.word	0x000003ff
 8006bd0:	0001517f 	.word	0x0001517f
 8006bd4:	08008570 	.word	0x08008570
 8006bd8:	200001cc 	.word	0x200001cc
 8006bdc:	fffeae80 	.word	0xfffeae80
 8006be0:	fffff1f0 	.word	0xfffff1f0

08006be4 <RTC_GetCalendarValue>:
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct,
		RTC_TimeTypeDef *RTC_TimeStruct)
{
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	000c      	movs	r4, r1
	uint32_t calendarValue = 0;
	uint32_t correction;
	/* Get Time and Date*/
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8006be8:	4e1e      	ldr	r6, [pc, #120]	; (8006c64 <RTC_GetCalendarValue+0x80>)
{
 8006bea:	0005      	movs	r5, r0
	HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8006bec:	0001      	movs	r1, r0
 8006bee:	2200      	movs	r2, #0
 8006bf0:	0030      	movs	r0, r6
 8006bf2:	f7fb ffed 	bl	8002bd0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8006bf6:	0021      	movs	r1, r4
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	0030      	movs	r0, r6
 8006bfc:	f7fb ffbe 	bl	8002b7c <HAL_RTC_GetTime>
	/* calculte amount of elapsed days since 01/01/2000 */
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

	correction = ((RTC_DateStruct->Year % 4) == 0) ?
 8006c00:	2103      	movs	r1, #3
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c02:	78ea      	ldrb	r2, [r5, #3]
 8006c04:	4818      	ldr	r0, [pc, #96]	; (8006c68 <RTC_GetCalendarValue+0x84>)
					DAYS_IN_MONTH_CORRECTION_LEAP :
					DAYS_IN_MONTH_CORRECTION_NORM;

	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c06:	786e      	ldrb	r6, [r5, #1]
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c08:	4350      	muls	r0, r2
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8006c0a:	400a      	ands	r2, r1
 8006c0c:	4253      	negs	r3, r2
 8006c0e:	415a      	adcs	r2, r3
 8006c10:	4253      	negs	r3, r2
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <RTC_GetCalendarValue+0x88>)
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c14:	3e01      	subs	r6, #1
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8006c16:	4013      	ands	r3, r2
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <RTC_GetCalendarValue+0x8c>)
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

	calendarValue += (RTC_DateStruct->Date - 1);
 8006c1a:	78ad      	ldrb	r5, [r5, #2]
					DAYS_IN_MONTH_CORRECTION_LEAP :
 8006c1c:	189b      	adds	r3, r3, r2
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c1e:	223d      	movs	r2, #61	; 0x3d
 8006c20:	4372      	muls	r2, r6
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006c22:	0076      	lsls	r6, r6, #1
 8006c24:	40f3      	lsrs	r3, r6
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c26:	3201      	adds	r2, #1
 8006c28:	0fd7      	lsrs	r7, r2, #31
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c2a:	3003      	adds	r0, #3
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c2c:	18ba      	adds	r2, r7, r2
 8006c2e:	3d01      	subs	r5, #1
	calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006c30:	0880      	lsrs	r0, r0, #2
	calendarValue += (RTC_DateStruct->Date - 1);
 8006c32:	1828      	adds	r0, r5, r0
	calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8006c34:	1052      	asrs	r2, r2, #1
 8006c36:	1812      	adds	r2, r2, r0
	/* convert from days to seconds */
	calendarValue *= SECONDS_IN_1DAY;

	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c38:	20e1      	movs	r0, #225	; 0xe1
			2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006c3a:	400b      	ands	r3, r1
	calendarValue += (RTC_DateStruct->Date - 1);
 8006c3c:	1ad3      	subs	r3, r2, r3
	calendarValue *= SECONDS_IN_1DAY;
 8006c3e:	4a0d      	ldr	r2, [pc, #52]	; (8006c74 <RTC_GetCalendarValue+0x90>)
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c40:	0100      	lsls	r0, r0, #4
	calendarValue *= SECONDS_IN_1DAY;
 8006c42:	4353      	muls	r3, r2
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c44:	7822      	ldrb	r2, [r4, #0]
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 8006c46:	7861      	ldrb	r1, [r4, #1]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c48:	4350      	muls	r0, r2
			+ ((uint32_t) RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE )
 8006c4a:	223c      	movs	r2, #60	; 0x3c
 8006c4c:	434a      	muls	r2, r1
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c4e:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 8006c50:	78a2      	ldrb	r2, [r4, #2]
			+ ((uint32_t) RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ));
 8006c52:	1880      	adds	r0, r0, r2
	calendarValue += ((uint32_t) RTC_TimeStruct->Seconds
 8006c54:	18c0      	adds	r0, r0, r3
	calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8006c56:	6863      	ldr	r3, [r4, #4]
 8006c58:	0280      	lsls	r0, r0, #10
 8006c5a:	1ac0      	subs	r0, r0, r3
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <RTC_GetCalendarValue+0x94>)
 8006c5e:	18c0      	adds	r0, r0, r3
	return (calendarValue);
}
 8006c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	200001cc 	.word	0x200001cc
 8006c68:	000005b5 	.word	0x000005b5
 8006c6c:	ffaaaab0 	.word	0xffaaaab0
 8006c70:	0099aaa0 	.word	0x0099aaa0
 8006c74:	00015180 	.word	0x00015180
 8006c78:	000003ff 	.word	0x000003ff

08006c7c <RTC_IF_SetTimerContext>:
{
 8006c7c:	b510      	push	{r4, lr}
	RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date,
 8006c7e:	4c04      	ldr	r4, [pc, #16]	; (8006c90 <RTC_IF_SetTimerContext+0x14>)
 8006c80:	0020      	movs	r0, r4
 8006c82:	1d21      	adds	r1, r4, #4
 8006c84:	3018      	adds	r0, #24
 8006c86:	f7ff ffad 	bl	8006be4 <RTC_GetCalendarValue>
 8006c8a:	6020      	str	r0, [r4, #0]
}
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	2000131c 	.word	0x2000131c

08006c94 <RTC_IF_GetTimerElapsedTime>:
{
 8006c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006c96:	4668      	mov	r0, sp
 8006c98:	a901      	add	r1, sp, #4
 8006c9a:	f7ff ffa3 	bl	8006be4 <RTC_GetCalendarValue>
	return ((uint32_t) (CalendarValue - RtcTimerContext.Rtc_Time));
 8006c9e:	4b02      	ldr	r3, [pc, #8]	; (8006ca8 <RTC_IF_GetTimerElapsedTime+0x14>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	1ac0      	subs	r0, r0, r3
}
 8006ca4:	b007      	add	sp, #28
 8006ca6:	bd00      	pop	{pc}
 8006ca8:	2000131c 	.word	0x2000131c

08006cac <RTC_IF_GetTime>:
{
 8006cac:	b530      	push	{r4, r5, lr}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	0005      	movs	r5, r0
	uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006cb2:	a901      	add	r1, sp, #4
 8006cb4:	4668      	mov	r0, sp
 8006cb6:	f7ff ff95 	bl	8006be4 <RTC_GetCalendarValue>
 8006cba:	0004      	movs	r4, r0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8006cbc:	0580      	lsls	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8006cbe:	227d      	movs	r2, #125	; 0x7d
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2100      	movs	r1, #0
	ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8006cc4:	0d80      	lsrs	r0, r0, #22
	return (((uint64_t) (tick) * CONV_NUMER) / CONV_DENOM);
 8006cc6:	f7f9 fbdb 	bl	8000480 <__aeabi_lmul>
 8006cca:	09c0      	lsrs	r0, r0, #7
	*mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8006ccc:	8028      	strh	r0, [r5, #0]
	uint32_t seconds = (uint32_t) (calendarValue >> RTC_N_PREDIV_S);
 8006cce:	0aa0      	lsrs	r0, r4, #10
}
 8006cd0:	b007      	add	sp, #28
 8006cd2:	bd30      	pop	{r4, r5, pc}

08006cd4 <RTC_IF_BkUp_Write_Seconds>:
{
 8006cd4:	b510      	push	{r4, lr}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8006cd6:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8006cd8:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8006cda:	2100      	movs	r1, #0
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7fb ff99 	bl	8002c14 <HAL_RTCEx_BKUPWrite>
}
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	200001cc 	.word	0x200001cc

08006ce8 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8006ce8:	b510      	push	{r4, lr}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8006cea:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 8006cec:	0002      	movs	r2, r0
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8006cee:	2101      	movs	r1, #1
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7fb ff8f 	bl	8002c14 <HAL_RTCEx_BKUPWrite>
}
 8006cf6:	bd10      	pop	{r4, pc}
 8006cf8:	200001cc 	.word	0x200001cc

08006cfc <RTC_IF_BkUp_Read_Seconds>:
{
 8006cfc:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8006d02:	f7fb ff8d 	bl	8002c20 <HAL_RTCEx_BKUPRead>
}
 8006d06:	bd10      	pop	{r4, pc}
 8006d08:	200001cc 	.word	0x200001cc

08006d0c <RTC_IF_BkUp_Read_SubSeconds>:
{
 8006d0c:	b510      	push	{r4, lr}
	return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8006d0e:	2101      	movs	r1, #1
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8006d12:	f7fb ff85 	bl	8002c20 <HAL_RTCEx_BKUPRead>
}
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	200001cc 	.word	0x200001cc

08006d1c <RTC_IF_Init>:
{
 8006d1c:	b570      	push	{r4, r5, r6, lr}
	if (RTC_Initalized == false)
 8006d1e:	4e25      	ldr	r6, [pc, #148]	; (8006db4 <RTC_IF_Init+0x98>)
{
 8006d20:	b08a      	sub	sp, #40	; 0x28
	if (RTC_Initalized == false)
 8006d22:	0033      	movs	r3, r6
 8006d24:	3344      	adds	r3, #68	; 0x44
 8006d26:	781d      	ldrb	r5, [r3, #0]
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	d13f      	bne.n	8006dac <RTC_IF_Init+0x90>
	RTC_AlarmTypeDef sAlarm = { 0 };
 8006d2c:	2228      	movs	r2, #40	; 0x28
 8006d2e:	0029      	movs	r1, r5
 8006d30:	4668      	mov	r0, sp
 8006d32:	f000 fe1b 	bl	800796c <memset>
	hrtc.Instance = RTC;
 8006d36:	4c20      	ldr	r4, [pc, #128]	; (8006db8 <RTC_IF_Init+0x9c>)
 8006d38:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <RTC_IF_Init+0xa0>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006d3a:	0020      	movs	r0, r4
	hrtc.Instance = RTC;
 8006d3c:	6023      	str	r3, [r4, #0]
	hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8006d3e:	231f      	movs	r3, #31
 8006d40:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8006d42:	4b1f      	ldr	r3, [pc, #124]	; (8006dc0 <RTC_IF_Init+0xa4>)
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006d44:	6065      	str	r5, [r4, #4]
	hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8006d46:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006d48:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006d4a:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006d4c:	61a5      	str	r5, [r4, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006d4e:	61e5      	str	r5, [r4, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006d50:	f7fb fcd8 	bl	8002704 <HAL_RTC_Init>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d001      	beq.n	8006d5c <RTC_IF_Init+0x40>
		Error_Handler();
 8006d58:	f7f9 fcba 	bl	80006d0 <Error_Handler>
	sAlarm.AlarmTime.Hours = 0;
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	466b      	mov	r3, sp
 8006d60:	801a      	strh	r2, [r3, #0]
	sAlarm.AlarmTime.Seconds = 0;
 8006d62:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	9305      	str	r3, [sp, #20]
	sAlarm.AlarmDateWeekDay = 1;
 8006d6a:	466b      	mov	r3, sp
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	3301      	adds	r3, #1
 8006d70:	77d9      	strb	r1, [r3, #31]
	sAlarm.Alarm = RTC_ALARM_A;
 8006d72:	2380      	movs	r3, #128	; 0x80
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8006d74:	4669      	mov	r1, sp
	sAlarm.Alarm = RTC_ALARM_A;
 8006d76:	005b      	lsls	r3, r3, #1
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8006d78:	0020      	movs	r0, r4
	sAlarm.AlarmTime.SubSeconds = 0;
 8006d7a:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006d7c:	9203      	str	r2, [sp, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006d7e:	9204      	str	r2, [sp, #16]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006d80:	9206      	str	r2, [sp, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006d82:	9207      	str	r2, [sp, #28]
	sAlarm.Alarm = RTC_ALARM_A;
 8006d84:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8006d86:	f7fb fe17 	bl	80029b8 <HAL_RTC_SetAlarm_IT>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d001      	beq.n	8006d92 <RTC_IF_Init+0x76>
		Error_Handler();
 8006d8e:	f7f9 fc9f 	bl	80006d0 <Error_Handler>
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	0020      	movs	r0, r4
 8006d96:	0049      	lsls	r1, r1, #1
 8006d98:	f7fb fbec 	bl	8002574 <HAL_RTC_DeactivateAlarm>
		HAL_RTCEx_EnableBypassShadow(&hrtc);
 8006d9c:	0020      	movs	r0, r4
 8006d9e:	f7fb ff45 	bl	8002c2c <HAL_RTCEx_EnableBypassShadow>
		RTC_IF_SetTimerContext();
 8006da2:	f7ff ff6b 	bl	8006c7c <RTC_IF_SetTimerContext>
		RTC_Initalized = true;
 8006da6:	2301      	movs	r3, #1
 8006da8:	3644      	adds	r6, #68	; 0x44
 8006daa:	7033      	strb	r3, [r6, #0]
}
 8006dac:	2000      	movs	r0, #0
 8006dae:	b00a      	add	sp, #40	; 0x28
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	2000131c 	.word	0x2000131c
 8006db8:	200001cc 	.word	0x200001cc
 8006dbc:	40002800 	.word	0x40002800
 8006dc0:	000003ff 	.word	0x000003ff

08006dc4 <RTC_IF_GetTimerValue>:
{
 8006dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t CalendarValue = 0;
 8006dc6:	2000      	movs	r0, #0
	if (RTC_Initalized == true)
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <RTC_IF_GetTimerValue+0x1c>)
 8006dca:	3344      	adds	r3, #68	; 0x44
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4283      	cmp	r3, r0
 8006dd0:	d003      	beq.n	8006dda <RTC_IF_GetTimerValue+0x16>
		CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006dd2:	4668      	mov	r0, sp
 8006dd4:	a901      	add	r1, sp, #4
 8006dd6:	f7ff ff05 	bl	8006be4 <RTC_GetCalendarValue>
}
 8006dda:	b007      	add	sp, #28
 8006ddc:	bd00      	pop	{pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	2000131c 	.word	0x2000131c

08006de4 <HAL_RTC_AlarmAEventCallback>:
{
 8006de4:	b510      	push	{r4, lr}
    pModemProcessIRQTimer();
 8006de6:	4b02      	ldr	r3, [pc, #8]	; (8006df0 <HAL_RTC_AlarmAEventCallback+0xc>)
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	4798      	blx	r3
}
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	2000131c 	.word	0x2000131c

08006df4 <Find_str_fix>:
/**
 * @retval	-1: Neu khong tim thay chuoi
 * 			1 : Neu chuoi dung
 */
int16_t Find_str_fix (int16_t pos_fix, sData *sTemp_Receiv, sData *sResponding, int16_t Pos_Res, int16_t *Pos_sharp)
{
 8006df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006df6:	001d      	movs	r5, r3
 8006df8:	9001      	str	r0, [sp, #4]
	 int16_t    Result,count;
	 Result = 1,count = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2001      	movs	r0, #1
	 while ((pos_fix + count) < sTemp_Receiv->Length_u16)
 8006dfe:	9c01      	ldr	r4, [sp, #4]
 8006e00:	888f      	ldrh	r7, [r1, #4]
 8006e02:	18e4      	adds	r4, r4, r3
 8006e04:	42bc      	cmp	r4, r7
 8006e06:	da08      	bge.n	8006e1a <Find_str_fix+0x26>
     {
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) == '|')
 8006e08:	680f      	ldr	r7, [r1, #0]
 8006e0a:	46bc      	mov	ip, r7
 8006e0c:	4666      	mov	r6, ip
 8006e0e:	5d36      	ldrb	r6, [r6, r4]
 8006e10:	193f      	adds	r7, r7, r4
 8006e12:	2e7c      	cmp	r6, #124	; 0x7c
 8006e14:	d102      	bne.n	8006e1c <Find_str_fix+0x28>
          {
			   *Pos_sharp = pos_fix + count;
 8006e16:	9b08      	ldr	r3, [sp, #32]
 8006e18:	801c      	strh	r4, [r3, #0]
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
              Result = -1;
		  count++;
	 }
	 return Result;
}
 8006e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		  if ((Pos_Res + count) > sResponding->Length_u16)  // Vuot qua xau dich
 8006e1c:	8894      	ldrh	r4, [r2, #4]
 8006e1e:	18ee      	adds	r6, r5, r3
 8006e20:	42a6      	cmp	r6, r4
 8006e22:	dd04      	ble.n	8006e2e <Find_str_fix+0x3a>
			   *Pos_sharp = sResponding->Length_u16 + 1;
 8006e24:	9808      	ldr	r0, [sp, #32]
 8006e26:	3401      	adds	r4, #1
 8006e28:	8004      	strh	r4, [r0, #0]
			   Result = -1;
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	4240      	negs	r0, r0
		  if (*(sTemp_Receiv->Data_a8+pos_fix+count) != *(sResponding->Data_a8 + Pos_Res + count))
 8006e2e:	6814      	ldr	r4, [r2, #0]
 8006e30:	783f      	ldrb	r7, [r7, #0]
 8006e32:	18e4      	adds	r4, r4, r3
 8006e34:	5d64      	ldrb	r4, [r4, r5]
 8006e36:	42a7      	cmp	r7, r4
 8006e38:	d001      	beq.n	8006e3e <Find_str_fix+0x4a>
              Result = -1;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	4240      	negs	r0, r0
		  count++;
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b21b      	sxth	r3, r3
 8006e42:	e7dc      	b.n	8006dfe <Find_str_fix+0xa>

08006e44 <Find_String_V2>:
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8006e44:	230e      	movs	r3, #14
 8006e46:	2200      	movs	r2, #0
{
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	b08d      	sub	sp, #52	; 0x34
 8006e4c:	000e      	movs	r6, r1
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8006e4e:	a908      	add	r1, sp, #32
 8006e50:	185b      	adds	r3, r3, r1
 8006e52:	801a      	strh	r2, [r3, #0]
	if (*(sTemp_Receiv->Data_a8) == '!')
 8006e54:	6803      	ldr	r3, [r0, #0]
{
 8006e56:	0007      	movs	r7, r0
	if (*(sTemp_Receiv->Data_a8) == '!')
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8006e5c:	0014      	movs	r4, r2
	if (*(sTemp_Receiv->Data_a8) == '!')
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	3b21      	subs	r3, #33	; 0x21
 8006e62:	4259      	negs	r1, r3
 8006e64:	414b      	adcs	r3, r1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	9305      	str	r3, [sp, #20]
    int16_t     Pos_Sharp_first = 0, Pos_Sharp = 0;
 8006e6a:	9206      	str	r2, [sp, #24]
	for (i = 0; i < sResponding->Length_u16; ++i)
 8006e6c:	88b3      	ldrh	r3, [r6, #4]
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	db02      	blt.n	8006e78 <Find_String_V2+0x34>
	if (Off_Set == 0)
 8006e72:	9c05      	ldr	r4, [sp, #20]
 8006e74:	3c01      	subs	r4, #1
 8006e76:	e044      	b.n	8006f02 <Find_String_V2+0xbe>
		if (*(sTemp_Receiv->Data_a8 + Off_Set) == *(sResponding->Data_a8 +i))  // tim dc ky tu dau giong
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	9a05      	ldr	r2, [sp, #20]
 8006e7c:	9307      	str	r3, [sp, #28]
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	5c9a      	ldrb	r2, [r3, r2]
 8006e82:	9b07      	ldr	r3, [sp, #28]
 8006e84:	5d1b      	ldrb	r3, [r3, r4]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d152      	bne.n	8006f30 <Find_String_V2+0xec>
			j = 1 + Off_Set;
 8006e8a:	9b05      	ldr	r3, [sp, #20]
			Pos_Sharp = 0;
 8006e8c:	220e      	movs	r2, #14
			j = 1 + Off_Set;
 8006e8e:	1c5d      	adds	r5, r3, #1
			Pos_Sharp = 0;
 8006e90:	2300      	movs	r3, #0
			Check = 1;
 8006e92:	2001      	movs	r0, #1
			Pos_Sharp = 0;
 8006e94:	a908      	add	r1, sp, #32
 8006e96:	1852      	adds	r2, r2, r1
 8006e98:	8013      	strh	r3, [r2, #0]
			Check_sharp = 0;
 8006e9a:	9309      	str	r3, [sp, #36]	; 0x24
			while (j < sTemp_Receiv->Length_u16)
 8006e9c:	88bb      	ldrh	r3, [r7, #4]
 8006e9e:	429d      	cmp	r5, r3
 8006ea0:	db0a      	blt.n	8006eb8 <Find_String_V2+0x74>
			if (Check == 1)
 8006ea2:	2801      	cmp	r0, #1
 8006ea4:	d144      	bne.n	8006f30 <Find_String_V2+0xec>
	if (Off_Set == 0)
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	2b21      	cmp	r3, #33	; 0x21
 8006eaa:	d102      	bne.n	8006eb2 <Find_String_V2+0x6e>
	if (Result >= 0)
 8006eac:	43e4      	mvns	r4, r4
 8006eae:	0424      	lsls	r4, r4, #16
 8006eb0:	17e4      	asrs	r4, r4, #31
}
 8006eb2:	0020      	movs	r0, r4
 8006eb4:	b00d      	add	sp, #52	; 0x34
 8006eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (*(sTemp_Receiv->Data_a8+j) == '|')
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	5d5b      	ldrb	r3, [r3, r5]
 8006ebc:	9308      	str	r3, [sp, #32]
 8006ebe:	2b7c      	cmp	r3, #124	; 0x7c
 8006ec0:	d121      	bne.n	8006f06 <Find_String_V2+0xc2>
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8006ec2:	aa08      	add	r2, sp, #32
 8006ec4:	3b6e      	subs	r3, #110	; 0x6e
 8006ec6:	189b      	adds	r3, r3, r2
 8006ec8:	2200      	movs	r2, #0
 8006eca:	5e9b      	ldrsh	r3, [r3, r2]
						Pos_Sharp_first = i + j;
 8006ecc:	b2a8      	uxth	r0, r5
					if (Pos_Sharp == 0)  // Luu lai vi tri '|' dau tien
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d104      	bne.n	8006edc <Find_String_V2+0x98>
						Pos_Sharp_first = i + j;
 8006ed2:	1903      	adds	r3, r0, r4
 8006ed4:	b21b      	sxth	r3, r3
 8006ed6:	9306      	str	r3, [sp, #24]
						Check_sharp = 1;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	9309      	str	r3, [sp, #36]	; 0x24
					Check = Find_str_fix (j + 1 ,sTemp_Receiv,sResponding, Pos_Sharp_first, &Pos_Sharp);
 8006edc:	230e      	movs	r3, #14
 8006ede:	aa08      	add	r2, sp, #32
 8006ee0:	189b      	adds	r3, r3, r2
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	0032      	movs	r2, r6
 8006ee8:	0039      	movs	r1, r7
 8006eea:	9b06      	ldr	r3, [sp, #24]
 8006eec:	b200      	sxth	r0, r0
 8006eee:	f7ff ff81 	bl	8006df4 <Find_str_fix>
 8006ef2:	b2c0      	uxtb	r0, r0
					if (Check == 1)
 8006ef4:	2801      	cmp	r0, #1
 8006ef6:	d106      	bne.n	8006f06 <Find_String_V2+0xc2>
	if (Off_Set == 0)
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	2b21      	cmp	r3, #33	; 0x21
 8006efc:	d1d9      	bne.n	8006eb2 <Find_String_V2+0x6e>
	if (Result >= 0)
 8006efe:	43e4      	mvns	r4, r4
 8006f00:	17e4      	asrs	r4, r4, #31
	if (Off_Set == 0)
 8006f02:	b224      	sxth	r4, r4
 8006f04:	e7d5      	b.n	8006eb2 <Find_String_V2+0x6e>
				if ((Check_sharp == 0) && (*(sTemp_Receiv->Data_a8+j) != *(sResponding->Data_a8 + i + j)))
 8006f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d108      	bne.n	8006f1e <Find_String_V2+0xda>
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	9a08      	ldr	r2, [sp, #32]
 8006f10:	191b      	adds	r3, r3, r4
 8006f12:	5d5b      	ldrb	r3, [r3, r5]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d10b      	bne.n	8006f30 <Find_String_V2+0xec>
                        j++;
 8006f18:	3501      	adds	r5, #1
 8006f1a:	b22b      	sxth	r3, r5
 8006f1c:	e006      	b.n	8006f2c <Find_String_V2+0xe8>
					if (j < Pos_Sharp)
 8006f1e:	230e      	movs	r3, #14
 8006f20:	aa08      	add	r2, sp, #32
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	2200      	movs	r2, #0
 8006f26:	5e9b      	ldrsh	r3, [r3, r2]
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	ddf5      	ble.n	8006f18 <Find_String_V2+0xd4>
						Check_sharp = 1;
 8006f2c:	001d      	movs	r5, r3
 8006f2e:	e7b5      	b.n	8006e9c <Find_String_V2+0x58>
	for (i = 0; i < sResponding->Length_u16; ++i)
 8006f30:	3401      	adds	r4, #1
 8006f32:	b224      	sxth	r4, r4
 8006f34:	e79a      	b.n	8006e6c <Find_String_V2+0x28>
	...

08006f38 <Get_RTC>:
/* Exported functions --------------------------------------------------------*/
/**
 * @brief	Lay gia tri RTC
 */
void Get_RTC(void)
{
 8006f38:	b510      	push	{r4, lr}
    RTC_TimeTypeDef     sRTCTime;
    RTC_DateTypeDef     sRTCDate;

    HAL_RTC_GetTime(&hrtc, &sRTCTime, RTC_FORMAT_BIN);
 8006f3a:	4c10      	ldr	r4, [pc, #64]	; (8006f7c <Get_RTC+0x44>)
{
 8006f3c:	b086      	sub	sp, #24
    HAL_RTC_GetTime(&hrtc, &sRTCTime, RTC_FORMAT_BIN);
 8006f3e:	a901      	add	r1, sp, #4
 8006f40:	2200      	movs	r2, #0
 8006f42:	0020      	movs	r0, r4
 8006f44:	f7fb fe1a 	bl	8002b7c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sRTCDate, RTC_FORMAT_BIN);
 8006f48:	4669      	mov	r1, sp
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	0020      	movs	r0, r4
 8006f4e:	f7fb fe3f 	bl	8002bd0 <HAL_RTC_GetDate>

	sRTC.sec 	= sRTCTime.Seconds;
 8006f52:	466b      	mov	r3, sp
 8006f54:	799a      	ldrb	r2, [r3, #6]
	sRTC.min 	= sRTCTime.Minutes;
	sRTC.hour 	= sRTCTime.Hours;
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <Get_RTC+0x48>)
 8006f58:	4669      	mov	r1, sp
	sRTC.sec 	= sRTCTime.Seconds;
 8006f5a:	709a      	strb	r2, [r3, #2]
	sRTC.day 	= sRTCDate.WeekDay;
 8006f5c:	466a      	mov	r2, sp
 8006f5e:	7812      	ldrb	r2, [r2, #0]
	sRTC.hour 	= sRTCTime.Hours;
 8006f60:	8889      	ldrh	r1, [r1, #4]
	sRTC.day 	= sRTCDate.WeekDay;
 8006f62:	70da      	strb	r2, [r3, #3]
	sRTC.date 	= sRTCDate.Date;
 8006f64:	466a      	mov	r2, sp
	sRTC.hour 	= sRTCTime.Hours;
 8006f66:	8019      	strh	r1, [r3, #0]
	sRTC.date 	= sRTCDate.Date;
 8006f68:	7892      	ldrb	r2, [r2, #2]
 8006f6a:	711a      	strb	r2, [r3, #4]
	sRTC.month 	= sRTCDate.Month;
 8006f6c:	466a      	mov	r2, sp
 8006f6e:	7852      	ldrb	r2, [r2, #1]
 8006f70:	715a      	strb	r2, [r3, #5]
	sRTC.year 	= sRTCDate.Year;
 8006f72:	466a      	mov	r2, sp
 8006f74:	78d2      	ldrb	r2, [r2, #3]
 8006f76:	719a      	strb	r2, [r3, #6]

//	APP_LOG(TS_OFF, VLEVEL_M, "user_time.c: Get RTC\n\r");
}
 8006f78:	b006      	add	sp, #24
 8006f7a:	bd10      	pop	{r4, pc}
 8006f7c:	200001cc 	.word	0x200001cc
 8006f80:	20001374 	.word	0x20001374

08006f84 <Check_update_Time>:
 * @param	Con tro chua bien thoi gian
 * @retval	1: du lieu chinh xac
 */
uint8_t Check_update_Time(ST_TIME_FORMAT *sRTC_temp)
{
	if (sRTC_temp->sec > 60)
 8006f84:	7882      	ldrb	r2, [r0, #2]
{
 8006f86:	0003      	movs	r3, r0
        return 0;
 8006f88:	2000      	movs	r0, #0
	if (sRTC_temp->sec > 60)
 8006f8a:	2a3c      	cmp	r2, #60	; 0x3c
 8006f8c:	d815      	bhi.n	8006fba <Check_update_Time+0x36>
	if (sRTC_temp->min > 60)
 8006f8e:	785a      	ldrb	r2, [r3, #1]
 8006f90:	2a3c      	cmp	r2, #60	; 0x3c
 8006f92:	d812      	bhi.n	8006fba <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->hour > 23)
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	2a17      	cmp	r2, #23
 8006f98:	d80f      	bhi.n	8006fba <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->day > 8)
 8006f9a:	78da      	ldrb	r2, [r3, #3]
 8006f9c:	2a08      	cmp	r2, #8
 8006f9e:	d80c      	bhi.n	8006fba <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->date > 31)
 8006fa0:	791a      	ldrb	r2, [r3, #4]
 8006fa2:	2a1f      	cmp	r2, #31
 8006fa4:	d809      	bhi.n	8006fba <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->month > 12)
 8006fa6:	795a      	ldrb	r2, [r3, #5]
 8006fa8:	2a0c      	cmp	r2, #12
 8006faa:	d806      	bhi.n	8006fba <Check_update_Time+0x36>
        return 0;
	if (sRTC_temp->year > 99)
        return 0;
    if (sRTC_temp->year < 20){
 8006fac:	224f      	movs	r2, #79	; 0x4f
 8006fae:	799b      	ldrb	r3, [r3, #6]
 8006fb0:	3b14      	subs	r3, #20
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	4140      	adcs	r0, r0
 8006fb8:	b2c0      	uxtb	r0, r0
        return 0;
    }
	return 1;
}
 8006fba:	4770      	bx	lr

08006fbc <Set_RTC>:
{
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8006fbe:	2700      	movs	r7, #0
{
 8006fc0:	b08b      	sub	sp, #44	; 0x2c
 8006fc2:	9001      	str	r0, [sp, #4]
 8006fc4:	9102      	str	r1, [sp, #8]
 8006fc6:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8006fc8:	2100      	movs	r1, #0
 8006fca:	2214      	movs	r2, #20
{
 8006fcc:	ac01      	add	r4, sp, #4
    RTC_TimeTypeDef 		sRTCTime_Temp = {0};
 8006fce:	a805      	add	r0, sp, #20
 8006fd0:	f000 fccc 	bl	800796c <memset>
    if (Check_update_Time(&sRTC_Var) == 1)
 8006fd4:	0020      	movs	r0, r4
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8006fd6:	9704      	str	r7, [sp, #16]
    if (Check_update_Time(&sRTC_Var) == 1)
 8006fd8:	f7ff ffd4 	bl	8006f84 <Check_update_Time>
    RTC_DateTypeDef 		sRTCDate_Temp = {0};
 8006fdc:	ae04      	add	r6, sp, #16
    if (Check_update_Time(&sRTC_Var) == 1)
 8006fde:	0005      	movs	r5, r0
 8006fe0:	2801      	cmp	r0, #1
 8006fe2:	d11c      	bne.n	800701e <Set_RTC+0x62>
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8006fe4:	4669      	mov	r1, sp
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 8006fe6:	9b03      	ldr	r3, [sp, #12]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8006fe8:	8822      	ldrh	r2, [r4, #0]
        sRTCTime_Temp.SubSeconds     = sRTC_Var.SubSeconds;
 8006fea:	9306      	str	r3, [sp, #24]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8006fec:	78a3      	ldrb	r3, [r4, #2]
        sRTCTime_Temp.Hours 		 = sRTC_Var.hour;
 8006fee:	828a      	strh	r2, [r1, #20]
        sRTCTime_Temp.Seconds 	     = sRTC_Var.sec;
 8006ff0:	758b      	strb	r3, [r1, #22]
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 8006ff2:	78e3      	ldrb	r3, [r4, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8006ff4:	003a      	movs	r2, r7
        sRTCDate_Temp.WeekDay 	     = sRTC_Var.day;
 8006ff6:	7033      	strb	r3, [r6, #0]
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8006ff8:	7923      	ldrb	r3, [r4, #4]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8006ffa:	a905      	add	r1, sp, #20
        sRTCDate_Temp.Date 		     = sRTC_Var.date;
 8006ffc:	70b3      	strb	r3, [r6, #2]
        sRTCDate_Temp.Month 		 = sRTC_Var.month;
 8006ffe:	7963      	ldrb	r3, [r4, #5]
 8007000:	7073      	strb	r3, [r6, #1]
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 8007002:	79a3      	ldrb	r3, [r4, #6]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8007004:	4c07      	ldr	r4, [pc, #28]	; (8007024 <Set_RTC+0x68>)
        sRTCDate_Temp.Year 		     = sRTC_Var.year;
 8007006:	70f3      	strb	r3, [r6, #3]
        HAL_RTC_SetTime(&hrtc, &sRTCTime_Temp, RTC_FORMAT_BIN);
 8007008:	0020      	movs	r0, r4
 800700a:	f7fb fbe3 	bl	80027d4 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &sRTCDate_Temp, RTC_FORMAT_BIN);
 800700e:	003a      	movs	r2, r7
 8007010:	0031      	movs	r1, r6
 8007012:	0020      	movs	r0, r4
 8007014:	f7fb fc62 	bl	80028dc <HAL_RTC_SetDate>
}
 8007018:	0028      	movs	r0, r5
 800701a:	b00b      	add	sp, #44	; 0x2c
 800701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 800701e:	003d      	movs	r5, r7
 8007020:	e7fa      	b.n	8007018 <Set_RTC+0x5c>
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	200001cc 	.word	0x200001cc

08007028 <UTIL_TIMER_Init>:

/* Private functions definition -----------------------------------------------*/
UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
	UTIL_TIMER_INIT_CRITICAL_SECTION();
	TimerListHead = NULL;
 8007028:	2200      	movs	r2, #0
{
 800702a:	b510      	push	{r4, lr}
	TimerListHead = NULL;
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <UTIL_TIMER_Init+0x10>)
 800702e:	601a      	str	r2, [r3, #0]
	return UTIL_TimerDriver.InitTimer();
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <UTIL_TIMER_Init+0x14>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4798      	blx	r3
}
 8007036:	bd10      	pop	{r4, pc}
 8007038:	20001368 	.word	0x20001368
 800703c:	0800859c 	.word	0x0800859c

08007040 <UTIL_TIMER_Create>:
	return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create(UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue,
		UTIL_TIMER_Mode_t Mode, void (*Callback)(void*), void *Argument)
{
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	0004      	movs	r4, r0
 8007044:	0017      	movs	r7, r2
 8007046:	0008      	movs	r0, r1
 8007048:	001e      	movs	r6, r3
		TimerObject->Mode = Mode;
		TimerObject->Next = NULL;
		return UTIL_TIMER_OK;
	} else
	{
		return UTIL_TIMER_INVALID_PARAM;
 800704a:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (Callback != NULL))
 800704c:	2c00      	cmp	r4, #0
 800704e:	d00e      	beq.n	800706e <UTIL_TIMER_Create+0x2e>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00c      	beq.n	800706e <UTIL_TIMER_Create+0x2e>
		TimerObject->Timestamp = 0U;
 8007054:	2500      	movs	r5, #0
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <UTIL_TIMER_Create+0x34>)
		TimerObject->Timestamp = 0U;
 8007058:	6025      	str	r5, [r4, #0]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	4798      	blx	r3
		TimerObject->argument = Argument;      //Doi so cho ham callback
 800705e:	9b06      	ldr	r3, [sp, #24]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007060:	6060      	str	r0, [r4, #4]
		TimerObject->IsPending = 0U;
 8007062:	8125      	strh	r5, [r4, #8]
		TimerObject->IsReloadStopped = 0U;     //Danh dau stop timer set period
 8007064:	72a5      	strb	r5, [r4, #10]
		TimerObject->Callback = Callback;      //Ham callback
 8007066:	60e6      	str	r6, [r4, #12]
		TimerObject->argument = Argument;      //Doi so cho ham callback
 8007068:	6123      	str	r3, [r4, #16]
		TimerObject->Mode = Mode;
 800706a:	72e7      	strb	r7, [r4, #11]
		TimerObject->Next = NULL;
 800706c:	6165      	str	r5, [r4, #20]
	}
}
 800706e:	0028      	movs	r0, r5
 8007070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	0800859c 	.word	0x0800859c

08007078 <UTIL_TIMER_GetCurrentTime>:
		TimerSetTimeout(TimerListHead);
	}
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007078:	b510      	push	{r4, lr}
	uint32_t now = UTIL_TimerDriver.GetTimerValue();
 800707a:	4c03      	ldr	r4, [pc, #12]	; (8007088 <UTIL_TIMER_GetCurrentTime+0x10>)
 800707c:	69e3      	ldr	r3, [r4, #28]
 800707e:	4798      	blx	r3
	return UTIL_TimerDriver.Tick2ms(now);
 8007080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007082:	4798      	blx	r3
}
 8007084:	bd10      	pop	{r4, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	0800859c 	.word	0x0800859c

0800708c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past)
{
 800708c:	b570      	push	{r4, r5, r6, lr}
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 800708e:	4d06      	ldr	r5, [pc, #24]	; (80070a8 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8007090:	0006      	movs	r6, r0
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8007092:	69eb      	ldr	r3, [r5, #28]
 8007094:	4798      	blx	r3
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 8007096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8007098:	0004      	movs	r4, r0
	uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 800709a:	0030      	movs	r0, r6
 800709c:	4798      	blx	r3
	/* intentional wrap around. Works Ok if tick duation below 1ms */
	return UTIL_TimerDriver.Tick2ms(nowInTicks - pastInTicks);
 800709e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80070a0:	1a20      	subs	r0, r4, r0
 80070a2:	4798      	blx	r3
}
 80070a4:	bd70      	pop	{r4, r5, r6, pc}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	0800859c 	.word	0x0800859c

080070ac <TimerExists>:
 * @param 	TimerObject Structure containing the timer object parameters
 * @retval 	1 (the object is already in the list) or 0
 */
bool TimerExists(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <TimerExists+0x18>)
 80070ae:	681b      	ldr	r3, [r3, #0]
	while (cur != NULL)
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <TimerExists+0xc>
		{
			return true;
		}
		cur = cur->Next;
	}
	return false;
 80070b4:	0018      	movs	r0, r3
}
 80070b6:	4770      	bx	lr
		if (cur == TimerObject)
 80070b8:	4283      	cmp	r3, r0
 80070ba:	d001      	beq.n	80070c0 <TimerExists+0x14>
		cur = cur->Next;
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	e7f7      	b.n	80070b0 <TimerExists+0x4>
			return true;
 80070c0:	2001      	movs	r0, #1
 80070c2:	e7f8      	b.n	80070b6 <TimerExists+0xa>
 80070c4:	20001368 	.word	0x20001368

080070c8 <TimerSetTimeout>:
/**
 * @brief Sets a timeout with the duration "timestamp"
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout(UTIL_TIMER_Object_t *TimerObject)
{
 80070c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 80070ca:	4e0b      	ldr	r6, [pc, #44]	; (80070f8 <TimerSetTimeout+0x30>)
{
 80070cc:	0004      	movs	r4, r0
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 80070ce:	6a33      	ldr	r3, [r6, #32]
 80070d0:	4798      	blx	r3
	TimerObject->IsPending = 1;
 80070d2:	2301      	movs	r3, #1
 80070d4:	7223      	strb	r3, [r4, #8]
	/* In case deadline too soon */
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	69b7      	ldr	r7, [r6, #24]
	uint32_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 80070da:	0005      	movs	r5, r0
	if (TimerObject->Timestamp < (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks))
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	47b8      	blx	r7
 80070e0:	9b01      	ldr	r3, [sp, #4]
 80070e2:	1940      	adds	r0, r0, r5
 80070e4:	4283      	cmp	r3, r0
 80070e6:	d202      	bcs.n	80070ee <TimerSetTimeout+0x26>
	{
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime() + minTicks;
 80070e8:	47b8      	blx	r7
 80070ea:	1940      	adds	r0, r0, r5
 80070ec:	6020      	str	r0, [r4, #0]
	}
	UTIL_TimerDriver.StartTimerEvt(TimerObject->Timestamp);
 80070ee:	68b3      	ldr	r3, [r6, #8]
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	4798      	blx	r3
}
 80070f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	0800859c 	.word	0x0800859c

080070fc <UTIL_TIMER_Stop>:
	if (NULL != TimerObject)
 80070fc:	2101      	movs	r1, #1
{
 80070fe:	0003      	movs	r3, r0
 8007100:	b570      	push	{r4, r5, r6, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 8007102:	0008      	movs	r0, r1
	if (NULL != TimerObject)
 8007104:	2b00      	cmp	r3, #0
 8007106:	d022      	beq.n	800714e <UTIL_TIMER_Stop+0x52>
		UTIL_TIMER_Object_t *prev = TimerListHead;
 8007108:	4d11      	ldr	r5, [pc, #68]	; (8007150 <UTIL_TIMER_Stop+0x54>)
		TimerObject->IsReloadStopped = 1U;
 800710a:	7299      	strb	r1, [r3, #10]
		UTIL_TIMER_Object_t *prev = TimerListHead;
 800710c:	682a      	ldr	r2, [r5, #0]
		if (NULL != TimerListHead)
 800710e:	2a00      	cmp	r2, #0
 8007110:	d101      	bne.n	8007116 <UTIL_TIMER_Stop+0x1a>
			ret = UTIL_TIMER_OK;
 8007112:	2000      	movs	r0, #0
 8007114:	e01b      	b.n	800714e <UTIL_TIMER_Stop+0x52>
			TimerObject->IsRunning = 0U;
 8007116:	2600      	movs	r6, #0
 8007118:	725e      	strb	r6, [r3, #9]
				if (TimerListHead->Next != NULL)
 800711a:	6954      	ldr	r4, [r2, #20]
			if (TimerListHead == TimerObject) /* Stop the Head */
 800711c:	4293      	cmp	r3, r2
 800711e:	d10c      	bne.n	800713a <UTIL_TIMER_Stop+0x3e>
				TimerListHead->IsPending = 0;
 8007120:	721e      	strb	r6, [r3, #8]
				if (TimerListHead->Next != NULL)
 8007122:	42b4      	cmp	r4, r6
 8007124:	d004      	beq.n	8007130 <UTIL_TIMER_Stop+0x34>
					TimerSetTimeout(TimerListHead);
 8007126:	0020      	movs	r0, r4
					TimerListHead = TimerListHead->Next;
 8007128:	602c      	str	r4, [r5, #0]
					TimerSetTimeout(TimerListHead);
 800712a:	f7ff ffcd 	bl	80070c8 <TimerSetTimeout>
 800712e:	e7f0      	b.n	8007112 <UTIL_TIMER_Stop+0x16>
					UTIL_TimerDriver.StopTimerEvt();
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <UTIL_TIMER_Stop+0x58>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4798      	blx	r3
					TimerListHead = NULL;
 8007136:	602c      	str	r4, [r5, #0]
 8007138:	e7eb      	b.n	8007112 <UTIL_TIMER_Stop+0x16>
						cur = cur->Next;
 800713a:	0011      	movs	r1, r2
 800713c:	6952      	ldr	r2, [r2, #20]
				while (cur != NULL)
 800713e:	2a00      	cmp	r2, #0
 8007140:	d0e7      	beq.n	8007112 <UTIL_TIMER_Stop+0x16>
					if (cur == TimerObject)
 8007142:	4293      	cmp	r3, r2
 8007144:	d1f9      	bne.n	800713a <UTIL_TIMER_Stop+0x3e>
						if (cur->Next != NULL)
 8007146:	6958      	ldr	r0, [r3, #20]
							prev->Next = cur;
 8007148:	6148      	str	r0, [r1, #20]
						if (cur->Next != NULL)
 800714a:	2800      	cmp	r0, #0
 800714c:	d1e1      	bne.n	8007112 <UTIL_TIMER_Stop+0x16>
}
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	20001368 	.word	0x20001368
 8007154:	0800859c 	.word	0x0800859c

08007158 <TimerInsertTimer>:
 *     			next timer to expire.
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8007158:	4b09      	ldr	r3, [pc, #36]	; (8007180 <TimerInsertTimer+0x28>)
{
 800715a:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 800715c:	681a      	ldr	r2, [r3, #0]
	UTIL_TIMER_Object_t *next = TimerListHead->Next;
 800715e:	6953      	ldr	r3, [r2, #20]
	while (cur->Next != NULL)
 8007160:	6951      	ldr	r1, [r2, #20]
 8007162:	2900      	cmp	r1, #0
 8007164:	d102      	bne.n	800716c <TimerInsertTimer+0x14>
		{
			cur = next;
			next = next->Next;
		} else
		{
			cur->Next = TimerObject;
 8007166:	6150      	str	r0, [r2, #20]
			TimerObject->Next = next;
 8007168:	6141      	str	r1, [r0, #20]
			return;
		}
	}
	cur->Next = TimerObject;
	TimerObject->Next = NULL;
}
 800716a:	bd10      	pop	{r4, pc}
		if (TimerObject->Timestamp > next->Timestamp)
 800716c:	6804      	ldr	r4, [r0, #0]
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	428c      	cmp	r4, r1
 8007172:	d902      	bls.n	800717a <TimerInsertTimer+0x22>
			next = next->Next;
 8007174:	001a      	movs	r2, r3
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	e7f2      	b.n	8007160 <TimerInsertTimer+0x8>
 800717a:	0019      	movs	r1, r3
 800717c:	e7f3      	b.n	8007166 <TimerInsertTimer+0xe>
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	20001368 	.word	0x20001368

08007184 <TimerInsertNewHeadTimer>:
 * @remark 	The list is automatically sorted. The list head always contains the
 *         		next timer to expire.
 */
void TimerInsertNewHeadTimer(UTIL_TIMER_Object_t *TimerObject)
{
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8007184:	4a05      	ldr	r2, [pc, #20]	; (800719c <TimerInsertNewHeadTimer+0x18>)
{
 8007186:	b510      	push	{r4, lr}
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8007188:	6813      	ldr	r3, [r2, #0]
	if (cur != NULL)
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <TimerInsertNewHeadTimer+0xe>
	{
		cur->IsPending = 0;
 800718e:	2100      	movs	r1, #0
 8007190:	7219      	strb	r1, [r3, #8]
	}
	TimerObject->Next = cur;
 8007192:	6143      	str	r3, [r0, #20]
	TimerListHead = TimerObject;
 8007194:	6010      	str	r0, [r2, #0]
	TimerSetTimeout(TimerListHead);
 8007196:	f7ff ff97 	bl	80070c8 <TimerSetTimeout>
}
 800719a:	bd10      	pop	{r4, pc}
 800719c:	20001368 	.word	0x20001368

080071a0 <UTIL_TIMER_Start>:
{
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	0004      	movs	r4, r0
		ret = UTIL_TIMER_INVALID_PARAM;
 80071a4:	2501      	movs	r5, #1
	if ((TimerObject != NULL) && (TimerExists(TimerObject) == false)
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d01c      	beq.n	80071e4 <UTIL_TIMER_Start+0x44>
 80071aa:	f7ff ff7f 	bl	80070ac <TimerExists>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d118      	bne.n	80071e4 <UTIL_TIMER_Start+0x44>
			&& (TimerObject->IsRunning == 0U))
 80071b2:	7a65      	ldrb	r5, [r4, #9]
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	d124      	bne.n	8007202 <UTIL_TIMER_Start+0x62>
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 80071b8:	4e13      	ldr	r6, [pc, #76]	; (8007208 <UTIL_TIMER_Start+0x68>)
		ticks = TimerObject->ReloadValue;
 80071ba:	6867      	ldr	r7, [r4, #4]
		minValue = UTIL_TimerDriver.GetMinimumTimeout(); //tra  ve 3 tick
 80071bc:	6a33      	ldr	r3, [r6, #32]
 80071be:	4798      	blx	r3
		TimerObject->Timestamp = ticks;
 80071c0:	4287      	cmp	r7, r0
 80071c2:	d200      	bcs.n	80071c6 <UTIL_TIMER_Start+0x26>
 80071c4:	0007      	movs	r7, r0
		TimerObject->IsPending = 0U;
 80071c6:	2380      	movs	r3, #128	; 0x80
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	8123      	strh	r3, [r4, #8]
		TimerObject->IsReloadStopped = 0U;
 80071cc:	2300      	movs	r3, #0
		TimerObject->Timestamp = ticks;
 80071ce:	6027      	str	r7, [r4, #0]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 80071d0:	4f0e      	ldr	r7, [pc, #56]	; (800720c <UTIL_TIMER_Start+0x6c>)
		TimerObject->IsReloadStopped = 0U;
 80071d2:	72a3      	strb	r3, [r4, #10]
		if (TimerListHead == NULL)           //Neu dang k co alarm nào?
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <UTIL_TIMER_Start+0x48>
			UTIL_TimerDriver.SetTimerContext();       //Lay RTC va luu gia tri RTC luc hen gio
 80071da:	6933      	ldr	r3, [r6, #16]
 80071dc:	4798      	blx	r3
				TimerInsertNewHeadTimer(TimerObject);
 80071de:	0020      	movs	r0, r4
 80071e0:	f7ff ffd0 	bl	8007184 <TimerInsertNewHeadTimer>
}
 80071e4:	0028      	movs	r0, r5
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime(); //tinh xem da set alarm dc bao nhieu ms rôi
 80071e8:	69b3      	ldr	r3, [r6, #24]
 80071ea:	4798      	blx	r3
			TimerObject->Timestamp += elapsedTime;
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	18c0      	adds	r0, r0, r3
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 80071f0:	683b      	ldr	r3, [r7, #0]
			TimerObject->Timestamp += elapsedTime;
 80071f2:	6020      	str	r0, [r4, #0]
			if (TimerObject->Timestamp < TimerListHead->Timestamp) //neu timer tiep theo co gia tri nho hon cai dang set
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4298      	cmp	r0, r3
 80071f8:	d3f1      	bcc.n	80071de <UTIL_TIMER_Start+0x3e>
				TimerInsertTimer(TimerObject);     //chèn object vao giữa.
 80071fa:	0020      	movs	r0, r4
 80071fc:	f7ff ffac 	bl	8007158 <TimerInsertTimer>
 8007200:	e7f0      	b.n	80071e4 <UTIL_TIMER_Start+0x44>
		ret = UTIL_TIMER_INVALID_PARAM;
 8007202:	2501      	movs	r5, #1
 8007204:	e7ee      	b.n	80071e4 <UTIL_TIMER_Start+0x44>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	0800859c 	.word	0x0800859c
 800720c:	20001368 	.word	0x20001368

08007210 <UTIL_TIMER_SetPeriod>:
{
 8007210:	b510      	push	{r4, lr}
		ret = UTIL_TIMER_INVALID_PARAM;
 8007212:	2301      	movs	r3, #1
{
 8007214:	0004      	movs	r4, r0
 8007216:	0008      	movs	r0, r1
	if (NULL == TimerObject)
 8007218:	2c00      	cmp	r4, #0
 800721a:	d010      	beq.n	800723e <UTIL_TIMER_SetPeriod+0x2e>
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <UTIL_TIMER_SetPeriod+0x34>)
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	4798      	blx	r3
 8007222:	6060      	str	r0, [r4, #4]
		if (TimerExists(TimerObject))
 8007224:	0020      	movs	r0, r4
 8007226:	f7ff ff41 	bl	80070ac <TimerExists>
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800722a:	2300      	movs	r3, #0
		if (TimerExists(TimerObject))
 800722c:	4298      	cmp	r0, r3
 800722e:	d006      	beq.n	800723e <UTIL_TIMER_SetPeriod+0x2e>
			(void) UTIL_TIMER_Stop(TimerObject);
 8007230:	0020      	movs	r0, r4
 8007232:	f7ff ff63 	bl	80070fc <UTIL_TIMER_Stop>
			ret = UTIL_TIMER_Start(TimerObject);
 8007236:	0020      	movs	r0, r4
 8007238:	f7ff ffb2 	bl	80071a0 <UTIL_TIMER_Start>
 800723c:	0003      	movs	r3, r0
}
 800723e:	0018      	movs	r0, r3
 8007240:	bd10      	pop	{r4, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	0800859c 	.word	0x0800859c

08007248 <UTIL_TIMER_IRQ_Handler>:
{
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = UTIL_TimerDriver.GetTimerContext();
 800724a:	4e1c      	ldr	r6, [pc, #112]	; (80072bc <UTIL_TIMER_IRQ_Handler+0x74>)
 800724c:	6973      	ldr	r3, [r6, #20]
 800724e:	4798      	blx	r3
	now = UTIL_TimerDriver.SetTimerContext();
 8007250:	6933      	ldr	r3, [r6, #16]
	old = UTIL_TimerDriver.GetTimerContext();
 8007252:	0004      	movs	r4, r0
	now = UTIL_TimerDriver.SetTimerContext();
 8007254:	4798      	blx	r3
	if (TimerListHead != NULL)
 8007256:	4d1a      	ldr	r5, [pc, #104]	; (80072c0 <UTIL_TIMER_IRQ_Handler+0x78>)
	DeltaContext = now - old; /*intentional wrap around */
 8007258:	1b07      	subs	r7, r0, r4
	if (TimerListHead != NULL)
 800725a:	682b      	ldr	r3, [r5, #0]
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800725c:	1a24      	subs	r4, r4, r0
	if (TimerListHead != NULL)
 800725e:	2b00      	cmp	r3, #0
 8007260:	d108      	bne.n	8007274 <UTIL_TIMER_IRQ_Handler+0x2c>
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8007262:	2780      	movs	r7, #128	; 0x80
 8007264:	007f      	lsls	r7, r7, #1
	while ((TimerListHead != NULL)
 8007266:	682b      	ldr	r3, [r5, #0]
			&& ((TimerListHead->Timestamp == 0U)
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10b      	bne.n	8007284 <UTIL_TIMER_IRQ_Handler+0x3c>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 800726c:	6828      	ldr	r0, [r5, #0]
 800726e:	2800      	cmp	r0, #0
 8007270:	d11e      	bne.n	80072b0 <UTIL_TIMER_IRQ_Handler+0x68>
}
 8007272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (cur->Timestamp > DeltaContext)
 8007274:	6819      	ldr	r1, [r3, #0]
				cur->Timestamp = 0;
 8007276:	2200      	movs	r2, #0
			if (cur->Timestamp > DeltaContext)
 8007278:	42b9      	cmp	r1, r7
 800727a:	d900      	bls.n	800727e <UTIL_TIMER_IRQ_Handler+0x36>
				cur->Timestamp -= DeltaContext;   //tat ca cac timestamp se tru di gia tri sai lech
 800727c:	1862      	adds	r2, r4, r1
 800727e:	601a      	str	r2, [r3, #0]
			cur = cur->Next;
 8007280:	695b      	ldr	r3, [r3, #20]
		} while (cur != NULL);
 8007282:	e7ec      	b.n	800725e <UTIL_TIMER_IRQ_Handler+0x16>
			&& ((TimerListHead->Timestamp == 0U)
 8007284:	681c      	ldr	r4, [r3, #0]
 8007286:	2c00      	cmp	r4, #0
 8007288:	d003      	beq.n	8007292 <UTIL_TIMER_IRQ_Handler+0x4a>
					|| (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime())))
 800728a:	69b3      	ldr	r3, [r6, #24]
 800728c:	4798      	blx	r3
 800728e:	4284      	cmp	r4, r0
 8007290:	d2ec      	bcs.n	800726c <UTIL_TIMER_IRQ_Handler+0x24>
		cur = TimerListHead;
 8007292:	682c      	ldr	r4, [r5, #0]
		TimerListHead = TimerListHead->Next;
 8007294:	6963      	ldr	r3, [r4, #20]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 8007296:	6920      	ldr	r0, [r4, #16]
		TimerListHead = TimerListHead->Next;
 8007298:	602b      	str	r3, [r5, #0]
		cur->IsPending = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	8123      	strh	r3, [r4, #8]
		cur->Callback(cur->argument);          //thuc hien callback cua timer.
 800729e:	68e3      	ldr	r3, [r4, #12]
 80072a0:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80072a2:	8963      	ldrh	r3, [r4, #10]
 80072a4:	42bb      	cmp	r3, r7
 80072a6:	d1de      	bne.n	8007266 <UTIL_TIMER_IRQ_Handler+0x1e>
			(void) UTIL_TIMER_Start(cur);
 80072a8:	0020      	movs	r0, r4
 80072aa:	f7ff ff79 	bl	80071a0 <UTIL_TIMER_Start>
 80072ae:	e7da      	b.n	8007266 <UTIL_TIMER_IRQ_Handler+0x1e>
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U))
 80072b0:	7a03      	ldrb	r3, [r0, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1dd      	bne.n	8007272 <UTIL_TIMER_IRQ_Handler+0x2a>
		TimerSetTimeout(TimerListHead);
 80072b6:	f7ff ff07 	bl	80070c8 <TimerSetTimeout>
}
 80072ba:	e7da      	b.n	8007272 <UTIL_TIMER_IRQ_Handler+0x2a>
 80072bc:	0800859c 	.word	0x0800859c
 80072c0:	20001368 	.word	0x20001368

080072c4 <Reset_Buff>:
}

void Reset_Buff(sData *str)
{
	uint16_t i;
	for (i = 0; i < str->Length_u16; i++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	001a      	movs	r2, r3
 80072c8:	8881      	ldrh	r1, [r0, #4]
 80072ca:	4299      	cmp	r1, r3
 80072cc:	d801      	bhi.n	80072d2 <Reset_Buff+0xe>
		*(str->Data_a8 +i ) = 0;
	str->Length_u16 = 0;
 80072ce:	8082      	strh	r2, [r0, #4]
}
 80072d0:	4770      	bx	lr
		*(str->Data_a8 +i ) = 0;
 80072d2:	6801      	ldr	r1, [r0, #0]
 80072d4:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < str->Length_u16; i++)
 80072d6:	3301      	adds	r3, #1
 80072d8:	b29b      	uxth	r3, r3
 80072da:	e7f5      	b.n	80072c8 <Reset_Buff+0x4>

080072dc <Convert_Hex_To_String_Hex>:
void Convert_Hex_To_String_Hex(sData *sTaget, sData *sSource)
{
    uint8_t 	Temp_1 = 0;
    uint8_t 	Temp_2 = 0;
    uint16_t 	i = 0;
    for (i = 0; i < sSource->Length_u16; i++)
 80072dc:	2300      	movs	r3, #0
{
 80072de:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (i = 0; i < sSource->Length_u16; i++)
 80072e0:	888a      	ldrh	r2, [r1, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d802      	bhi.n	80072ec <Convert_Hex_To_String_Hex+0x10>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
        else
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
    }
    //Length gap doi source
    sTaget->Length_u16 = sSource->Length_u16 * 2;
 80072e6:	0052      	lsls	r2, r2, #1
 80072e8:	8082      	strh	r2, [r0, #4]
}
 80072ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
 80072ec:	2537      	movs	r5, #55	; 0x37
 80072ee:	46ac      	mov	ip, r5
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 80072f0:	680a      	ldr	r2, [r1, #0]
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80072f2:	005c      	lsls	r4, r3, #1
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 80072f4:	5cd7      	ldrb	r7, [r2, r3]
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80072f6:	6802      	ldr	r2, [r0, #0]
        Temp_1 = ((*(sSource->Data_a8 + i)) >> 4) & 0x0F;
 80072f8:	093e      	lsrs	r6, r7, #4
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 80072fa:	1912      	adds	r2, r2, r4
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x37;
 80072fc:	44b4      	add	ip, r6
        if (Temp_1 <= 9)
 80072fe:	2f9f      	cmp	r7, #159	; 0x9f
 8007300:	d801      	bhi.n	8007306 <Convert_Hex_To_String_Hex+0x2a>
        	*(sTaget->Data_a8 + 2*i) = Temp_1 + 0x30;
 8007302:	3630      	adds	r6, #48	; 0x30
 8007304:	46b4      	mov	ip, r6
 8007306:	4665      	mov	r5, ip
 8007308:	7015      	strb	r5, [r2, #0]
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 800730a:	250f      	movs	r5, #15
 800730c:	680a      	ldr	r2, [r1, #0]
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 800730e:	6806      	ldr	r6, [r0, #0]
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 8007310:	5cd2      	ldrb	r2, [r2, r3]
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 8007312:	3401      	adds	r4, #1
        Temp_2 = ((*(sSource->Data_a8 + i)) & 0x0F);
 8007314:	402a      	ands	r2, r5
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 8007316:	1934      	adds	r4, r6, r4
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x37;
 8007318:	0016      	movs	r6, r2
 800731a:	3637      	adds	r6, #55	; 0x37
        if (Temp_2 <= 9)
 800731c:	2a09      	cmp	r2, #9
 800731e:	d801      	bhi.n	8007324 <Convert_Hex_To_String_Hex+0x48>
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 8007320:	3230      	adds	r2, #48	; 0x30
 8007322:	0016      	movs	r6, r2
    for (i = 0; i < sSource->Length_u16; i++)
 8007324:	3301      	adds	r3, #1
        	*(sTaget->Data_a8 + 2*i + 1) = Temp_2 + 0x30;
 8007326:	7026      	strb	r6, [r4, #0]
    for (i = 0; i < sSource->Length_u16; i++)
 8007328:	b29b      	uxth	r3, r3
 800732a:	e7d9      	b.n	80072e0 <Convert_Hex_To_String_Hex+0x4>

0800732c <UTIL_MEM_set>:

void UTIL_MEM_set( void *dst, uint8_t value, uint16_t size )
{
 800732c:	b510      	push	{r4, lr}
    uint8_t* dst8= (uint8_t *) dst;
    while( size-- )
    {
        *dst8++ = value;
 800732e:	f000 fb1d 	bl	800796c <memset>
    }
}
 8007332:	bd10      	pop	{r4, pc}

08007334 <LOG>:
uint8_t Convert_Hex_To_StringHex (uint8_t Hex)
{
    return ((Hex /10) *16 + (Hex %10));
}

void LOG(log_level_t level, const char* message, ...){
 8007334:	b40e      	push	{r1, r2, r3}
	va_list args;
	va_start(args, message);
	char buffer[LOG_BUFFER_SIZE];
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 8007336:	2196      	movs	r1, #150	; 0x96
void LOG(log_level_t level, const char* message, ...){
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	4c1c      	ldr	r4, [pc, #112]	; (80073ac <LOG+0x78>)
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800733c:	0049      	lsls	r1, r1, #1
void LOG(log_level_t level, const char* message, ...){
 800733e:	44a5      	add	sp, r4
 8007340:	aba7      	add	r3, sp, #668	; 0x29c
 8007342:	cb04      	ldmia	r3!, {r2}
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 8007344:	ad08      	add	r5, sp, #32
void LOG(log_level_t level, const char* message, ...){
 8007346:	0004      	movs	r4, r0
	va_end(args);
	SysTime_t curtime = SysTimeGet();
 8007348:	ae06      	add	r6, sp, #24
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800734a:	0028      	movs	r0, r5
	va_start(args, message);
 800734c:	9305      	str	r3, [sp, #20]
	vsnprintf(buffer, LOG_BUFFER_SIZE, message, args);
 800734e:	f000 fb01 	bl	8007954 <vsniprintf>
	SysTime_t curtime = SysTimeGet();
 8007352:	0030      	movs	r0, r6
 8007354:	f000 f94c 	bl	80075f0 <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 8007358:	21fa      	movs	r1, #250	; 0xfa
 800735a:	9806      	ldr	r0, [sp, #24]
 800735c:	0089      	lsls	r1, r1, #2
 800735e:	f7f8 ff7f 	bl	8000260 <__aeabi_uidivmod>
 8007362:	000b      	movs	r3, r1
 8007364:	4912      	ldr	r1, [pc, #72]	; (80073b0 <LOG+0x7c>)
 8007366:	2c04      	cmp	r4, #4
 8007368:	d802      	bhi.n	8007370 <LOG+0x3c>
 800736a:	4a12      	ldr	r2, [pc, #72]	; (80073b4 <LOG+0x80>)
 800736c:	00a4      	lsls	r4, r4, #2
 800736e:	58a1      	ldr	r1, [r4, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s %s %s", second, curtime.SubSeconds, level_prefix, buffer, level_afterfix);
 8007370:	4811      	ldr	r0, [pc, #68]	; (80073b8 <LOG+0x84>)
 8007372:	9502      	str	r5, [sp, #8]
 8007374:	9003      	str	r0, [sp, #12]
 8007376:	9101      	str	r1, [sp, #4]
 8007378:	2004      	movs	r0, #4
 800737a:	5e31      	ldrsh	r1, [r6, r0]
 800737c:	4a0f      	ldr	r2, [pc, #60]	; (80073bc <LOG+0x88>)
 800737e:	9100      	str	r1, [sp, #0]
 8007380:	219e      	movs	r1, #158	; 0x9e
 8007382:	a853      	add	r0, sp, #332	; 0x14c
 8007384:	0049      	lsls	r1, r1, #1
 8007386:	f000 fa85 	bl	8007894 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 800738a:	a853      	add	r0, sp, #332	; 0x14c
 800738c:	f7f8 febc 	bl	8000108 <strlen>
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <LOG+0x8c>)
 8007392:	b282      	uxth	r2, r0
 8007394:	a953      	add	r1, sp, #332	; 0x14c
 8007396:	480b      	ldr	r0, [pc, #44]	; (80073c4 <LOG+0x90>)
 8007398:	f7fc fa60 	bl	800385c <HAL_UART_Transmit>
}
 800739c:	23a3      	movs	r3, #163	; 0xa3
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	449d      	add	sp, r3
 80073a2:	bc70      	pop	{r4, r5, r6}
 80073a4:	bc08      	pop	{r3}
 80073a6:	b003      	add	sp, #12
 80073a8:	4718      	bx	r3
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	fffffd74 	.word	0xfffffd74
 80073b0:	0800876c 	.word	0x0800876c
 80073b4:	080085c8 	.word	0x080085c8
 80073b8:	0800876a 	.word	0x0800876a
 80073bc:	08008af9 	.word	0x08008af9
 80073c0:	00002710 	.word	0x00002710
 80073c4:	2000120c 	.word	0x2000120c

080073c8 <LOG_Array>:

void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80073c8:	b408      	push	{r3}
 80073ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073cc:	000d      	movs	r5, r1
	va_list args;
	va_start(args, message);
	char buffer_mess[LOG_BUFFER_SIZE];
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80073ce:	2196      	movs	r1, #150	; 0x96
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80073d0:	4c28      	ldr	r4, [pc, #160]	; (8007474 <LOG_Array+0xac>)
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80073d2:	0049      	lsls	r1, r1, #1
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80073d4:	44a5      	add	sp, r4
 80073d6:	abf7      	add	r3, sp, #988	; 0x3dc
 80073d8:	9205      	str	r2, [sp, #20]
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80073da:	af0d      	add	r7, sp, #52	; 0x34
void LOG_Array(log_level_t level, uint8_t *pData, uint16_t Length, const char* message, ...){
 80073dc:	cb04      	ldmia	r3!, {r2}
 80073de:	0004      	movs	r4, r0
	va_end(args);
	SysTime_t curtime = SysTimeGet();
 80073e0:	ae07      	add	r6, sp, #28
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80073e2:	0038      	movs	r0, r7
	va_start(args, message);
 80073e4:	9306      	str	r3, [sp, #24]
	vsnprintf(buffer_mess, LOG_BUFFER_SIZE, message, args);
 80073e6:	f000 fab5 	bl	8007954 <vsniprintf>
	SysTime_t curtime = SysTimeGet();
 80073ea:	0030      	movs	r0, r6
 80073ec:	f000 f900 	bl	80075f0 <SysTimeGet>
	uint16_t second = curtime.Seconds % 1000;
 80073f0:	21fa      	movs	r1, #250	; 0xfa
 80073f2:	9807      	ldr	r0, [sp, #28]
 80073f4:	0089      	lsls	r1, r1, #2
 80073f6:	f7f8 ff33 	bl	8000260 <__aeabi_uidivmod>
 80073fa:	000b      	movs	r3, r1
 80073fc:	491e      	ldr	r1, [pc, #120]	; (8007478 <LOG_Array+0xb0>)
 80073fe:	2c04      	cmp	r4, #4
 8007400:	d802      	bhi.n	8007408 <LOG_Array+0x40>
 8007402:	4a1e      	ldr	r2, [pc, #120]	; (800747c <LOG_Array+0xb4>)
 8007404:	00a4      	lsls	r4, r4, #2
 8007406:	58a1      	ldr	r1, [r4, r2]
			break;
		default:
			break;
	}
	char log_message[LOG_BUFFER_SIZE + 16];
	snprintf(log_message, sizeof(log_message), "%03ds%03d: %s %s", second, curtime.SubSeconds, level_prefix, buffer_mess);
 8007408:	9702      	str	r7, [sp, #8]
 800740a:	9101      	str	r1, [sp, #4]
 800740c:	2004      	movs	r0, #4
 800740e:	5e31      	ldrsh	r1, [r6, r0]
 8007410:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <LOG_Array+0xb8>)
 8007412:	9100      	str	r1, [sp, #0]
 8007414:	219e      	movs	r1, #158	; 0x9e
 8007416:	a8a3      	add	r0, sp, #652	; 0x28c
 8007418:	0049      	lsls	r1, r1, #1
 800741a:	f000 fa3b 	bl	8007894 <sniprintf>
	HAL_UART_Transmit(&uart_debug, (uint8_t*) log_message, strlen(log_message), LOG_TIMEOUT);
 800741e:	a8a3      	add	r0, sp, #652	; 0x28c
 8007420:	f7f8 fe72 	bl	8000108 <strlen>
 8007424:	4e17      	ldr	r6, [pc, #92]	; (8007484 <LOG_Array+0xbc>)
 8007426:	b282      	uxth	r2, r0
 8007428:	a9a3      	add	r1, sp, #652	; 0x28c
 800742a:	0030      	movs	r0, r6
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <LOG_Array+0xc0>)
 800742e:	f7fc fa15 	bl	800385c <HAL_UART_Transmit>

	uint8_t buffer[LOG_BUFFER_SIZE];
	sData sSoucre = {&pData[0], Length * 2};
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	a909      	add	r1, sp, #36	; 0x24
 8007436:	005c      	lsls	r4, r3, #1
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 8007438:	2396      	movs	r3, #150	; 0x96
 800743a:	a80b      	add	r0, sp, #44	; 0x2c
	sData sSoucre = {&pData[0], Length * 2};
 800743c:	9509      	str	r5, [sp, #36]	; 0x24
 800743e:	b2a4      	uxth	r4, r4
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 8007440:	ad58      	add	r5, sp, #352	; 0x160
 8007442:	005b      	lsls	r3, r3, #1
	sData sSoucre = {&pData[0], Length * 2};
 8007444:	808c      	strh	r4, [r1, #4]
	sData sTarget = {&buffer[0], LOG_BUFFER_SIZE};
 8007446:	8083      	strh	r3, [r0, #4]
 8007448:	950b      	str	r5, [sp, #44]	; 0x2c
	Convert_Hex_To_String_Hex(&sTarget, &sSoucre);
 800744a:	f7ff ff47 	bl	80072dc <Convert_Hex_To_String_Hex>
	HAL_UART_Transmit(&uart_debug, buffer, Length * 2, LOG_TIMEOUT);
 800744e:	0022      	movs	r2, r4
 8007450:	0029      	movs	r1, r5
 8007452:	0030      	movs	r0, r6
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <LOG_Array+0xc0>)
 8007456:	f7fc fa01 	bl	800385c <HAL_UART_Transmit>
    HAL_UART_Transmit(&uart_debug, (uint8_t*)"\r\n" , 2, LOG_TIMEOUT);
 800745a:	2202      	movs	r2, #2
 800745c:	0030      	movs	r0, r6
 800745e:	490b      	ldr	r1, [pc, #44]	; (800748c <LOG_Array+0xc4>)
 8007460:	4b09      	ldr	r3, [pc, #36]	; (8007488 <LOG_Array+0xc0>)
 8007462:	f7fc f9fb 	bl	800385c <HAL_UART_Transmit>
}
 8007466:	23f2      	movs	r3, #242	; 0xf2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	449d      	add	sp, r3
 800746c:	bcf0      	pop	{r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	b001      	add	sp, #4
 8007472:	4718      	bx	r3
 8007474:	fffffc38 	.word	0xfffffc38
 8007478:	0800876c 	.word	0x0800876c
 800747c:	080085c8 	.word	0x080085c8
 8007480:	08008b0d 	.word	0x08008b0d
 8007484:	2000120c 	.word	0x2000120c
 8007488:	00002710 	.word	0x00002710
 800748c:	0800876a 	.word	0x0800876a

08007490 <LED_ON>:

void LED_ON (eLed_TypeDef Led)
{
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <LED_ON+0x18>)
 8007492:	0042      	lsls	r2, r0, #1
{
 8007494:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_RESET);
 8007496:	189b      	adds	r3, r3, r2
 8007498:	8a99      	ldrh	r1, [r3, #20]
 800749a:	4b04      	ldr	r3, [pc, #16]	; (80074ac <LED_ON+0x1c>)
 800749c:	0080      	lsls	r0, r0, #2
 800749e:	2200      	movs	r2, #0
 80074a0:	58c0      	ldr	r0, [r0, r3]
 80074a2:	f7fa fb93 	bl	8001bcc <HAL_GPIO_WritePin>
}
 80074a6:	bd10      	pop	{r4, pc}
 80074a8:	080085c8 	.word	0x080085c8
 80074ac:	20000150 	.word	0x20000150

080074b0 <LED_OFF>:

void LED_OFF (eLed_TypeDef Led)
{
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <LED_OFF+0x18>)
 80074b2:	0042      	lsls	r2, r0, #1
{
 80074b4:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(aLED_PORT[Led], aLED_PIN[Led], GPIO_PIN_SET);
 80074b6:	189b      	adds	r3, r3, r2
 80074b8:	8a99      	ldrh	r1, [r3, #20]
 80074ba:	4b04      	ldr	r3, [pc, #16]	; (80074cc <LED_OFF+0x1c>)
 80074bc:	0080      	lsls	r0, r0, #2
 80074be:	2201      	movs	r2, #1
 80074c0:	58c0      	ldr	r0, [r0, r3]
 80074c2:	f7fa fb83 	bl	8001bcc <HAL_GPIO_WritePin>
}
 80074c6:	bd10      	pop	{r4, pc}
 80074c8:	080085c8 	.word	0x080085c8
 80074cc:	20000150 	.word	0x20000150

080074d0 <LED_TOGGLE>:

void LED_TOGGLE (eLed_TypeDef Led)
{
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <LED_TOGGLE+0x18>)
 80074d2:	0042      	lsls	r2, r0, #1
{
 80074d4:	b510      	push	{r4, lr}
    HAL_GPIO_TogglePin(aLED_PORT[Led], aLED_PIN[Led]);
 80074d6:	189b      	adds	r3, r3, r2
 80074d8:	8a99      	ldrh	r1, [r3, #20]
 80074da:	4b04      	ldr	r3, [pc, #16]	; (80074ec <LED_TOGGLE+0x1c>)
 80074dc:	0080      	lsls	r0, r0, #2
 80074de:	58c0      	ldr	r0, [r0, r3]
 80074e0:	f7fa fb7a 	bl	8001bd8 <HAL_GPIO_TogglePin>
}
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	080085c8 	.word	0x080085c8
 80074ec:	20000150 	.word	0x20000150

080074f0 <TRACE_UnLock>:
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80074f0:	4a02      	ldr	r2, [pc, #8]	; (80074fc <TRACE_UnLock+0xc>)
 80074f2:	8ad3      	ldrh	r3, [r2, #22]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	82d3      	strh	r3, [r2, #22]
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80074f8:	4770      	bx	lr
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	20001380 	.word	0x20001380

08007500 <UTIL_ADV_TRACE_Init>:
{
 8007500:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8007502:	2218      	movs	r2, #24
 8007504:	2100      	movs	r1, #0
 8007506:	4807      	ldr	r0, [pc, #28]	; (8007524 <UTIL_ADV_TRACE_Init+0x24>)
 8007508:	f000 f86d 	bl	80075e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800750c:	2280      	movs	r2, #128	; 0x80
 800750e:	2100      	movs	r1, #0
 8007510:	4805      	ldr	r0, [pc, #20]	; (8007528 <UTIL_ADV_TRACE_Init+0x28>)
 8007512:	0092      	lsls	r2, r2, #2
 8007514:	f000 f867 	bl	80075e6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <UTIL_ADV_TRACE_Init+0x2c>)
 800751a:	4805      	ldr	r0, [pc, #20]	; (8007530 <UTIL_ADV_TRACE_Init+0x30>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4798      	blx	r3
}
 8007520:	bd10      	pop	{r4, pc}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	20001380 	.word	0x20001380
 8007528:	20001498 	.word	0x20001498
 800752c:	08008290 	.word	0x08008290
 8007530:	0800754d 	.word	0x0800754d

08007534 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8007534:	4b01      	ldr	r3, [pc, #4]	; (800753c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8007536:	6058      	str	r0, [r3, #4]
}
 8007538:	4770      	bx	lr
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	20001380 	.word	0x20001380

08007540 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8007540:	4b01      	ldr	r3, [pc, #4]	; (8007548 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8007542:	7218      	strb	r0, [r3, #8]
}
 8007544:	4770      	bx	lr
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	20001380 	.word	0x20001380

0800754c <TRACE_TxCpltCallback>:
{
 800754c:	b510      	push	{r4, lr}
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800754e:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <TRACE_TxCpltCallback+0x7c>)
 8007550:	789a      	ldrb	r2, [r3, #2]
 8007552:	2a02      	cmp	r2, #2
 8007554:	d11d      	bne.n	8007592 <TRACE_TxCpltCallback+0x46>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007556:	2200      	movs	r2, #0
 8007558:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800755a:	8a58      	ldrh	r0, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800755c:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800755e:	4290      	cmp	r0, r2
 8007560:	d02c      	beq.n	80075bc <TRACE_TxCpltCallback+0x70>
 8007562:	8ad9      	ldrh	r1, [r3, #22]
 8007564:	2901      	cmp	r1, #1
 8007566:	d129      	bne.n	80075bc <TRACE_TxCpltCallback+0x70>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007568:	7899      	ldrb	r1, [r3, #2]
 800756a:	2901      	cmp	r1, #1
 800756c:	d117      	bne.n	800759e <TRACE_TxCpltCallback+0x52>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800756e:	8819      	ldrh	r1, [r3, #0]
 8007570:	1a8a      	subs	r2, r1, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007572:	2102      	movs	r1, #2
 8007574:	7099      	strb	r1, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007576:	2100      	movs	r1, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8007578:	b292      	uxth	r2, r2
 800757a:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800757c:	8019      	strh	r1, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800757e:	428a      	cmp	r2, r1
 8007580:	d10f      	bne.n	80075a2 <TRACE_TxCpltCallback+0x56>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007582:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007584:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007586:	8a19      	ldrh	r1, [r3, #16]
 8007588:	4288      	cmp	r0, r1
 800758a:	d912      	bls.n	80075b2 <TRACE_TxCpltCallback+0x66>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800758c:	1a40      	subs	r0, r0, r1
 800758e:	8298      	strh	r0, [r3, #20]
 8007590:	e007      	b.n	80075a2 <TRACE_TxCpltCallback+0x56>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007592:	8a1a      	ldrh	r2, [r3, #16]
 8007594:	8a99      	ldrh	r1, [r3, #20]
 8007596:	1852      	adds	r2, r2, r1
 8007598:	05d2      	lsls	r2, r2, #23
 800759a:	0dd2      	lsrs	r2, r2, #23
 800759c:	e7dd      	b.n	800755a <TRACE_TxCpltCallback+0xe>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800759e:	2900      	cmp	r1, #0
 80075a0:	d0f1      	beq.n	8007586 <TRACE_TxCpltCallback+0x3a>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80075a2:	8a18      	ldrh	r0, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80075a4:	8a99      	ldrh	r1, [r3, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <TRACE_TxCpltCallback+0x80>)
 80075a8:	18c0      	adds	r0, r0, r3
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <TRACE_TxCpltCallback+0x84>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	4798      	blx	r3
}
 80075b0:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80075b2:	2280      	movs	r2, #128	; 0x80
 80075b4:	0092      	lsls	r2, r2, #2
 80075b6:	1a52      	subs	r2, r2, r1
 80075b8:	829a      	strh	r2, [r3, #20]
 80075ba:	e7f2      	b.n	80075a2 <TRACE_TxCpltCallback+0x56>
    UTIL_ADV_TRACE_PostSendHook();
 80075bc:	f7f9 fa84 	bl	8000ac8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80075c0:	f7ff ff96 	bl	80074f0 <TRACE_UnLock>
}
 80075c4:	e7f4      	b.n	80075b0 <TRACE_TxCpltCallback+0x64>
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	20001380 	.word	0x20001380
 80075cc:	20001498 	.word	0x20001498
 80075d0:	08008290 	.word	0x08008290

080075d4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80075d4:	2300      	movs	r3, #0
{
 80075d6:	b510      	push	{r4, lr}
  while( size-- )
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 80075dc:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 80075de:	5ccc      	ldrb	r4, [r1, r3]
 80075e0:	54c4      	strb	r4, [r0, r3]
 80075e2:	3301      	adds	r3, #1
 80075e4:	e7f8      	b.n	80075d8 <UTIL_MEM_cpy_8+0x4>

080075e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80075e6:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 80075e8:	f000 f9c0 	bl	800796c <memset>
  }
}
 80075ec:	bd10      	pop	{r4, pc}
	...

080075f0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 80075f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80075f2:	2300      	movs	r3, #0
 80075f4:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80075f6:	4e10      	ldr	r6, [pc, #64]	; (8007638 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80075f8:	8093      	strh	r3, [r2, #4]
 80075fa:	9300      	str	r3, [sp, #0]
{
 80075fc:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80075fe:	6933      	ldr	r3, [r6, #16]
 8007600:	a801      	add	r0, sp, #4
 8007602:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8007604:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8007606:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8007608:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800760a:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800760c:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800760e:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 8007610:	9b00      	ldr	r3, [sp, #0]
  if( c.SubSeconds >= 1000 )
 8007612:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 8007614:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8007616:	466b      	mov	r3, sp
 8007618:	889b      	ldrh	r3, [r3, #4]
  if( c.SubSeconds >= 1000 )
 800761a:	0089      	lsls	r1, r1, #2
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800761c:	195b      	adds	r3, r3, r5
 800761e:	b29a      	uxth	r2, r3
 8007620:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8007622:	428b      	cmp	r3, r1
 8007624:	db03      	blt.n	800762e <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 8007626:	4b05      	ldr	r3, [pc, #20]	; (800763c <SysTimeGet+0x4c>)
    c.Seconds++;
 8007628:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800762a:	18d2      	adds	r2, r2, r3
 800762c:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800762e:	6020      	str	r0, [r4, #0]
 8007630:	80a3      	strh	r3, [r4, #4]
}
 8007632:	0020      	movs	r0, r4
 8007634:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	08008588 	.word	0x08008588
 800763c:	fffffc18 	.word	0xfffffc18

08007640 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8007640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007642:	b09d      	sub	sp, #116	; 0x74
 8007644:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8007646:	2000      	movs	r0, #0
{
 8007648:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800764a:	9f02      	ldr	r7, [sp, #8]
{
 800764c:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800764e:	4281      	cmp	r1, r0
 8007650:	dc0a      	bgt.n	8007668 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 8007652:	b01d      	add	sp, #116	; 0x74
 8007654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8007656:	4298      	cmp	r0, r3
 8007658:	da0d      	bge.n	8007676 <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800765a:	2925      	cmp	r1, #37	; 0x25
 800765c:	d00e      	beq.n	800767c <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800765e:	7039      	strb	r1, [r7, #0]
      continue;
 8007660:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 8007662:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007664:	9a01      	ldr	r2, [sp, #4]
 8007666:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 8007668:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800766a:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800766c:	1af8      	subs	r0, r7, r3
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007672:	2900      	cmp	r1, #0
 8007674:	d1ef      	bne.n	8007656 <tiny_vsnprintf_like+0x16>
  *str = '\0';
 8007676:	2300      	movs	r3, #0
 8007678:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800767a:	e7ea      	b.n	8007652 <tiny_vsnprintf_like+0x12>
    fmt++;
 800767c:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800767e:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 8007680:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 8007682:	0010      	movs	r0, r2
 8007684:	3830      	subs	r0, #48	; 0x30
 8007686:	9203      	str	r2, [sp, #12]
 8007688:	4241      	negs	r1, r0
 800768a:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800768c:	b2c0      	uxtb	r0, r0
    flags = 0;
 800768e:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 8007690:	2809      	cmp	r0, #9
 8007692:	d92e      	bls.n	80076f2 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 8007694:	2001      	movs	r0, #1
 8007696:	4240      	negs	r0, r0
 8007698:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800769a:	9801      	ldr	r0, [sp, #4]
 800769c:	7800      	ldrb	r0, [r0, #0]
 800769e:	2869      	cmp	r0, #105	; 0x69
 80076a0:	d100      	bne.n	80076a4 <tiny_vsnprintf_like+0x64>
 80076a2:	e0a4      	b.n	80077ee <tiny_vsnprintf_like+0x1ae>
 80076a4:	d829      	bhi.n	80076fa <tiny_vsnprintf_like+0xba>
 80076a6:	2863      	cmp	r0, #99	; 0x63
 80076a8:	d038      	beq.n	800771c <tiny_vsnprintf_like+0xdc>
 80076aa:	2864      	cmp	r0, #100	; 0x64
 80076ac:	d100      	bne.n	80076b0 <tiny_vsnprintf_like+0x70>
 80076ae:	e09e      	b.n	80077ee <tiny_vsnprintf_like+0x1ae>
 80076b0:	2858      	cmp	r0, #88	; 0x58
 80076b2:	d066      	beq.n	8007782 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 80076b4:	0039      	movs	r1, r7
 80076b6:	2825      	cmp	r0, #37	; 0x25
 80076b8:	d126      	bne.n	8007708 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 80076ba:	9801      	ldr	r0, [sp, #4]
 80076bc:	7800      	ldrb	r0, [r0, #0]
 80076be:	2800      	cmp	r0, #0
 80076c0:	d100      	bne.n	80076c4 <tiny_vsnprintf_like+0x84>
 80076c2:	e098      	b.n	80077f6 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 80076c4:	1c4f      	adds	r7, r1, #1
 80076c6:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 80076c8:	9902      	ldr	r1, [sp, #8]
 80076ca:	1a79      	subs	r1, r7, r1
 80076cc:	4299      	cmp	r1, r3
 80076ce:	db00      	blt.n	80076d2 <tiny_vsnprintf_like+0x92>
 80076d0:	e08f      	b.n	80077f2 <tiny_vsnprintf_like+0x1b2>
 80076d2:	e7c7      	b.n	8007664 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80076d4:	9d01      	ldr	r5, [sp, #4]
 80076d6:	3501      	adds	r5, #1
 80076d8:	9501      	str	r5, [sp, #4]
 80076da:	9d00      	ldr	r5, [sp, #0]
 80076dc:	4375      	muls	r5, r6
 80076de:	182d      	adds	r5, r5, r0
 80076e0:	3d30      	subs	r5, #48	; 0x30
 80076e2:	9500      	str	r5, [sp, #0]
 80076e4:	9801      	ldr	r0, [sp, #4]
 80076e6:	7800      	ldrb	r0, [r0, #0]
 80076e8:	0005      	movs	r5, r0
 80076ea:	3d30      	subs	r5, #48	; 0x30
 80076ec:	2d09      	cmp	r5, #9
 80076ee:	d9f1      	bls.n	80076d4 <tiny_vsnprintf_like+0x94>
 80076f0:	e7d3      	b.n	800769a <tiny_vsnprintf_like+0x5a>
  int i = 0;
 80076f2:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80076f4:	260a      	movs	r6, #10
  int i = 0;
 80076f6:	9000      	str	r0, [sp, #0]
 80076f8:	e7f4      	b.n	80076e4 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 80076fa:	2875      	cmp	r0, #117	; 0x75
 80076fc:	d079      	beq.n	80077f2 <tiny_vsnprintf_like+0x1b2>
 80076fe:	2510      	movs	r5, #16
 8007700:	2878      	cmp	r0, #120	; 0x78
 8007702:	d041      	beq.n	8007788 <tiny_vsnprintf_like+0x148>
 8007704:	2873      	cmp	r0, #115	; 0x73
 8007706:	d01d      	beq.n	8007744 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8007708:	2025      	movs	r0, #37	; 0x25
 800770a:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800770c:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800770e:	1c79      	adds	r1, r7, #1
 8007710:	000f      	movs	r7, r1
    base = 10;
 8007712:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 8007714:	1a08      	subs	r0, r1, r0
 8007716:	4298      	cmp	r0, r3
 8007718:	da36      	bge.n	8007788 <tiny_vsnprintf_like+0x148>
 800771a:	e7ce      	b.n	80076ba <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800771c:	2500      	movs	r5, #0
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	42ab      	cmp	r3, r5
 8007722:	dd00      	ble.n	8007726 <tiny_vsnprintf_like+0xe6>
 8007724:	1e5d      	subs	r5, r3, #1
 8007726:	002a      	movs	r2, r5
 8007728:	2120      	movs	r1, #32
 800772a:	0038      	movs	r0, r7
 800772c:	f000 f91e 	bl	800796c <memset>
 8007730:	9a00      	ldr	r2, [sp, #0]
 8007732:	2301      	movs	r3, #1
 8007734:	197d      	adds	r5, r7, r5
 8007736:	2a00      	cmp	r2, #0
 8007738:	dd00      	ble.n	800773c <tiny_vsnprintf_like+0xfc>
 800773a:	0013      	movs	r3, r2
 800773c:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800773e:	cc08      	ldmia	r4!, {r3}
 8007740:	702b      	strb	r3, [r5, #0]
        continue;
 8007742:	e78f      	b.n	8007664 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 8007744:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 8007746:	2e00      	cmp	r6, #0
 8007748:	d100      	bne.n	800774c <tiny_vsnprintf_like+0x10c>
 800774a:	4e4f      	ldr	r6, [pc, #316]	; (8007888 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800774c:	0030      	movs	r0, r6
 800774e:	f7f8 fcdb 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 8007752:	2300      	movs	r3, #0
 8007754:	9303      	str	r3, [sp, #12]
 8007756:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 8007758:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800775a:	4283      	cmp	r3, r0
 800775c:	db01      	blt.n	8007762 <tiny_vsnprintf_like+0x122>
 800775e:	1a1b      	subs	r3, r3, r0
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	0038      	movs	r0, r7
 8007764:	2120      	movs	r1, #32
 8007766:	9a03      	ldr	r2, [sp, #12]
 8007768:	f000 f900 	bl	800796c <memset>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8007770:	2300      	movs	r3, #0
 8007772:	42ab      	cmp	r3, r5
 8007774:	db01      	blt.n	800777a <tiny_vsnprintf_like+0x13a>
 8007776:	197f      	adds	r7, r7, r5
 8007778:	e774      	b.n	8007664 <tiny_vsnprintf_like+0x24>
 800777a:	5cf2      	ldrb	r2, [r6, r3]
 800777c:	54fa      	strb	r2, [r7, r3]
 800777e:	3301      	adds	r3, #1
 8007780:	e7f7      	b.n	8007772 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 8007782:	2240      	movs	r2, #64	; 0x40
        base = 16;
 8007784:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 8007786:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007788:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800778a:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800778c:	1a3e      	subs	r6, r7, r0
 800778e:	0020      	movs	r0, r4
 8007790:	1b9e      	subs	r6, r3, r6
 8007792:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 8007794:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007796:	9004      	str	r0, [sp, #16]
  if (type & UPPERCASE)  dig = upper_digits;
 8007798:	483c      	ldr	r0, [pc, #240]	; (800788c <tiny_vsnprintf_like+0x24c>)
 800779a:	9007      	str	r0, [sp, #28]
 800779c:	2040      	movs	r0, #64	; 0x40
 800779e:	4202      	tst	r2, r0
 80077a0:	d101      	bne.n	80077a6 <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 80077a2:	4a3b      	ldr	r2, [pc, #236]	; (8007890 <tiny_vsnprintf_like+0x250>)
 80077a4:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 80077a6:	2230      	movs	r2, #48	; 0x30
 80077a8:	9208      	str	r2, [sp, #32]
 80077aa:	9a03      	ldr	r2, [sp, #12]
 80077ac:	2a30      	cmp	r2, #48	; 0x30
 80077ae:	d001      	beq.n	80077b4 <tiny_vsnprintf_like+0x174>
 80077b0:	2220      	movs	r2, #32
 80077b2:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d023      	beq.n	8007800 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da21      	bge.n	8007800 <tiny_vsnprintf_like+0x1c0>
      size--;
 80077bc:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 80077be:	425b      	negs	r3, r3
      size--;
 80077c0:	3a01      	subs	r2, #1
 80077c2:	9200      	str	r2, [sp, #0]
      sign = '-';
 80077c4:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 80077c6:	2400      	movs	r4, #0
 80077c8:	9205      	str	r2, [sp, #20]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80077ca:	0018      	movs	r0, r3
 80077cc:	0029      	movs	r1, r5
 80077ce:	9306      	str	r3, [sp, #24]
 80077d0:	f7f8 fd46 	bl	8000260 <__aeabi_uidivmod>
 80077d4:	0022      	movs	r2, r4
 80077d6:	4684      	mov	ip, r0
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	3401      	adds	r4, #1
 80077dc:	5c59      	ldrb	r1, [r3, r1]
 80077de:	ab0b      	add	r3, sp, #44	; 0x2c
 80077e0:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 80077e2:	9a06      	ldr	r2, [sp, #24]
 80077e4:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 80077e6:	4663      	mov	r3, ip
    while (num != 0)
 80077e8:	4295      	cmp	r5, r2
 80077ea:	d9ee      	bls.n	80077ca <tiny_vsnprintf_like+0x18a>
 80077ec:	e011      	b.n	8007812 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 80077ee:	2202      	movs	r2, #2
 80077f0:	430a      	orrs	r2, r1
    base = 10;
 80077f2:	250a      	movs	r5, #10
 80077f4:	e7c8      	b.n	8007788 <tiny_vsnprintf_like+0x148>
          --fmt;
 80077f6:	9801      	ldr	r0, [sp, #4]
 80077f8:	000f      	movs	r7, r1
 80077fa:	3801      	subs	r0, #1
 80077fc:	9001      	str	r0, [sp, #4]
 80077fe:	e763      	b.n	80076c8 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <tiny_vsnprintf_like+0x1c8>
 8007804:	2200      	movs	r2, #0
 8007806:	e7de      	b.n	80077c6 <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 8007808:	2130      	movs	r1, #48	; 0x30
 800780a:	2001      	movs	r0, #1
 800780c:	aa0b      	add	r2, sp, #44	; 0x2c
 800780e:	7011      	strb	r1, [r2, #0]
 8007810:	9305      	str	r3, [sp, #20]
  size -= precision;
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	2b30      	cmp	r3, #48	; 0x30
 800781a:	d006      	beq.n	800782a <tiny_vsnprintf_like+0x1ea>
 800781c:	003b      	movs	r3, r7
 800781e:	2120      	movs	r1, #32
 8007820:	0022      	movs	r2, r4
 8007822:	001f      	movs	r7, r3
 8007824:	3c01      	subs	r4, #1
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0c      	bgt.n	8007844 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d029      	beq.n	8007884 <tiny_vsnprintf_like+0x244>
 8007830:	232d      	movs	r3, #45	; 0x2d
 8007832:	3e01      	subs	r6, #1
 8007834:	1c7a      	adds	r2, r7, #1
 8007836:	703b      	strb	r3, [r7, #0]
 8007838:	2e00      	cmp	r6, #0
 800783a:	d009      	beq.n	8007850 <tiny_vsnprintf_like+0x210>
 800783c:	0013      	movs	r3, r2
 800783e:	0031      	movs	r1, r6
 8007840:	1ba4      	subs	r4, r4, r6
 8007842:	e00f      	b.n	8007864 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007844:	3301      	adds	r3, #1
 8007846:	3e01      	subs	r6, #1
 8007848:	001a      	movs	r2, r3
 800784a:	7039      	strb	r1, [r7, #0]
 800784c:	2e00      	cmp	r6, #0
 800784e:	d1e7      	bne.n	8007820 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007850:	0017      	movs	r7, r2
 8007852:	9c04      	ldr	r4, [sp, #16]
 8007854:	e706      	b.n	8007664 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 8007856:	9e08      	ldr	r6, [sp, #32]
 8007858:	3301      	adds	r3, #1
 800785a:	3901      	subs	r1, #1
 800785c:	001a      	movs	r2, r3
 800785e:	702e      	strb	r6, [r5, #0]
 8007860:	2900      	cmp	r1, #0
 8007862:	d0f5      	beq.n	8007850 <tiny_vsnprintf_like+0x210>
 8007864:	1862      	adds	r2, r4, r1
 8007866:	001d      	movs	r5, r3
 8007868:	2a00      	cmp	r2, #0
 800786a:	dcf4      	bgt.n	8007856 <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800786c:	ac0b      	add	r4, sp, #44	; 0x2c
 800786e:	1859      	adds	r1, r3, r1
 8007870:	001a      	movs	r2, r3
 8007872:	3801      	subs	r0, #1
 8007874:	d3ec      	bcc.n	8007850 <tiny_vsnprintf_like+0x210>
 8007876:	5d05      	ldrb	r5, [r0, r4]
 8007878:	1c53      	adds	r3, r2, #1
 800787a:	7015      	strb	r5, [r2, #0]
 800787c:	428b      	cmp	r3, r1
 800787e:	d1f7      	bne.n	8007870 <tiny_vsnprintf_like+0x230>
 8007880:	001a      	movs	r2, r3
 8007882:	e7e5      	b.n	8007850 <tiny_vsnprintf_like+0x210>
 8007884:	003a      	movs	r2, r7
 8007886:	e7d9      	b.n	800783c <tiny_vsnprintf_like+0x1fc>
 8007888:	08008b4b 	.word	0x08008b4b
 800788c:	08008b77 	.word	0x08008b77
 8007890:	08008b52 	.word	0x08008b52

08007894 <sniprintf>:
 8007894:	b40c      	push	{r2, r3}
 8007896:	b530      	push	{r4, r5, lr}
 8007898:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <sniprintf+0x64>)
 800789a:	000c      	movs	r4, r1
 800789c:	681d      	ldr	r5, [r3, #0]
 800789e:	b09d      	sub	sp, #116	; 0x74
 80078a0:	2900      	cmp	r1, #0
 80078a2:	da08      	bge.n	80078b6 <sniprintf+0x22>
 80078a4:	238b      	movs	r3, #139	; 0x8b
 80078a6:	2001      	movs	r0, #1
 80078a8:	602b      	str	r3, [r5, #0]
 80078aa:	4240      	negs	r0, r0
 80078ac:	b01d      	add	sp, #116	; 0x74
 80078ae:	bc30      	pop	{r4, r5}
 80078b0:	bc08      	pop	{r3}
 80078b2:	b002      	add	sp, #8
 80078b4:	4718      	bx	r3
 80078b6:	2382      	movs	r3, #130	; 0x82
 80078b8:	466a      	mov	r2, sp
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	8293      	strh	r3, [r2, #20]
 80078be:	2300      	movs	r3, #0
 80078c0:	9002      	str	r0, [sp, #8]
 80078c2:	9006      	str	r0, [sp, #24]
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d000      	beq.n	80078ca <sniprintf+0x36>
 80078c8:	1e4b      	subs	r3, r1, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	9307      	str	r3, [sp, #28]
 80078ce:	2301      	movs	r3, #1
 80078d0:	466a      	mov	r2, sp
 80078d2:	425b      	negs	r3, r3
 80078d4:	82d3      	strh	r3, [r2, #22]
 80078d6:	0028      	movs	r0, r5
 80078d8:	ab21      	add	r3, sp, #132	; 0x84
 80078da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078dc:	a902      	add	r1, sp, #8
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	f000 f9e2 	bl	8007ca8 <_svfiprintf_r>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	da01      	bge.n	80078ec <sniprintf+0x58>
 80078e8:	238b      	movs	r3, #139	; 0x8b
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	d0dd      	beq.n	80078ac <sniprintf+0x18>
 80078f0:	2200      	movs	r2, #0
 80078f2:	9b02      	ldr	r3, [sp, #8]
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e7d9      	b.n	80078ac <sniprintf+0x18>
 80078f8:	200001ac 	.word	0x200001ac

080078fc <_vsniprintf_r>:
 80078fc:	b530      	push	{r4, r5, lr}
 80078fe:	0014      	movs	r4, r2
 8007900:	0005      	movs	r5, r0
 8007902:	001a      	movs	r2, r3
 8007904:	b09b      	sub	sp, #108	; 0x6c
 8007906:	2c00      	cmp	r4, #0
 8007908:	da05      	bge.n	8007916 <_vsniprintf_r+0x1a>
 800790a:	238b      	movs	r3, #139	; 0x8b
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	2001      	movs	r0, #1
 8007910:	4240      	negs	r0, r0
 8007912:	b01b      	add	sp, #108	; 0x6c
 8007914:	bd30      	pop	{r4, r5, pc}
 8007916:	2382      	movs	r3, #130	; 0x82
 8007918:	4668      	mov	r0, sp
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	8183      	strh	r3, [r0, #12]
 800791e:	2300      	movs	r3, #0
 8007920:	9100      	str	r1, [sp, #0]
 8007922:	9104      	str	r1, [sp, #16]
 8007924:	429c      	cmp	r4, r3
 8007926:	d000      	beq.n	800792a <_vsniprintf_r+0x2e>
 8007928:	1e63      	subs	r3, r4, #1
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	9305      	str	r3, [sp, #20]
 800792e:	2301      	movs	r3, #1
 8007930:	4669      	mov	r1, sp
 8007932:	425b      	negs	r3, r3
 8007934:	81cb      	strh	r3, [r1, #14]
 8007936:	0028      	movs	r0, r5
 8007938:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800793a:	f000 f9b5 	bl	8007ca8 <_svfiprintf_r>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	da01      	bge.n	8007946 <_vsniprintf_r+0x4a>
 8007942:	238b      	movs	r3, #139	; 0x8b
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	2c00      	cmp	r4, #0
 8007948:	d0e3      	beq.n	8007912 <_vsniprintf_r+0x16>
 800794a:	2200      	movs	r2, #0
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e7df      	b.n	8007912 <_vsniprintf_r+0x16>
	...

08007954 <vsniprintf>:
 8007954:	b513      	push	{r0, r1, r4, lr}
 8007956:	4c04      	ldr	r4, [pc, #16]	; (8007968 <vsniprintf+0x14>)
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	0013      	movs	r3, r2
 800795c:	000a      	movs	r2, r1
 800795e:	0001      	movs	r1, r0
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	f7ff ffcb 	bl	80078fc <_vsniprintf_r>
 8007966:	bd16      	pop	{r1, r2, r4, pc}
 8007968:	200001ac 	.word	0x200001ac

0800796c <memset>:
 800796c:	0003      	movs	r3, r0
 800796e:	1882      	adds	r2, r0, r2
 8007970:	4293      	cmp	r3, r2
 8007972:	d100      	bne.n	8007976 <memset+0xa>
 8007974:	4770      	bx	lr
 8007976:	7019      	strb	r1, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	e7f9      	b.n	8007970 <memset+0x4>

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	; (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	200001ac 	.word	0x200001ac

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	2600      	movs	r6, #0
 800798c:	4c0c      	ldr	r4, [pc, #48]	; (80079c0 <__libc_init_array+0x38>)
 800798e:	4d0d      	ldr	r5, [pc, #52]	; (80079c4 <__libc_init_array+0x3c>)
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	2600      	movs	r6, #0
 800799a:	f000 fc6d 	bl	8008278 <_init>
 800799e:	4c0a      	ldr	r4, [pc, #40]	; (80079c8 <__libc_init_array+0x40>)
 80079a0:	4d0a      	ldr	r5, [pc, #40]	; (80079cc <__libc_init_array+0x44>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	00b3      	lsls	r3, r6, #2
 80079ae:	58eb      	ldr	r3, [r5, r3]
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	00b3      	lsls	r3, r6, #2
 80079b8:	58eb      	ldr	r3, [r5, r3]
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08008bd8 	.word	0x08008bd8
 80079c4:	08008bd8 	.word	0x08008bd8
 80079c8:	08008bdc 	.word	0x08008bdc
 80079cc:	08008bd8 	.word	0x08008bd8

080079d0 <__retarget_lock_acquire_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_release_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <memcpy>:
 80079d4:	2300      	movs	r3, #0
 80079d6:	b510      	push	{r4, lr}
 80079d8:	429a      	cmp	r2, r3
 80079da:	d100      	bne.n	80079de <memcpy+0xa>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	5ccc      	ldrb	r4, [r1, r3]
 80079e0:	54c4      	strb	r4, [r0, r3]
 80079e2:	3301      	adds	r3, #1
 80079e4:	e7f8      	b.n	80079d8 <memcpy+0x4>
	...

080079e8 <_free_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	0005      	movs	r5, r0
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d010      	beq.n	8007a12 <_free_r+0x2a>
 80079f0:	1f0c      	subs	r4, r1, #4
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da00      	bge.n	80079fa <_free_r+0x12>
 80079f8:	18e4      	adds	r4, r4, r3
 80079fa:	0028      	movs	r0, r5
 80079fc:	f000 f8e2 	bl	8007bc4 <__malloc_lock>
 8007a00:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <_free_r+0x90>)
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <_free_r+0x2c>
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	6014      	str	r4, [r2, #0]
 8007a0c:	0028      	movs	r0, r5
 8007a0e:	f000 f8e1 	bl	8007bd4 <__malloc_unlock>
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d908      	bls.n	8007a2a <_free_r+0x42>
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	1821      	adds	r1, r4, r0
 8007a1c:	428b      	cmp	r3, r1
 8007a1e:	d1f3      	bne.n	8007a08 <_free_r+0x20>
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	1809      	adds	r1, r1, r0
 8007a26:	6021      	str	r1, [r4, #0]
 8007a28:	e7ee      	b.n	8007a08 <_free_r+0x20>
 8007a2a:	001a      	movs	r2, r3
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <_free_r+0x4e>
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	d9f9      	bls.n	8007a2a <_free_r+0x42>
 8007a36:	6811      	ldr	r1, [r2, #0]
 8007a38:	1850      	adds	r0, r2, r1
 8007a3a:	42a0      	cmp	r0, r4
 8007a3c:	d10b      	bne.n	8007a56 <_free_r+0x6e>
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	1809      	adds	r1, r1, r0
 8007a42:	1850      	adds	r0, r2, r1
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	4283      	cmp	r3, r0
 8007a48:	d1e0      	bne.n	8007a0c <_free_r+0x24>
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	1841      	adds	r1, r0, r1
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	6053      	str	r3, [r2, #4]
 8007a54:	e7da      	b.n	8007a0c <_free_r+0x24>
 8007a56:	42a0      	cmp	r0, r4
 8007a58:	d902      	bls.n	8007a60 <_free_r+0x78>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	602b      	str	r3, [r5, #0]
 8007a5e:	e7d5      	b.n	8007a0c <_free_r+0x24>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	1821      	adds	r1, r4, r0
 8007a64:	428b      	cmp	r3, r1
 8007a66:	d103      	bne.n	8007a70 <_free_r+0x88>
 8007a68:	6819      	ldr	r1, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	1809      	adds	r1, r1, r0
 8007a6e:	6021      	str	r1, [r4, #0]
 8007a70:	6063      	str	r3, [r4, #4]
 8007a72:	6054      	str	r4, [r2, #4]
 8007a74:	e7ca      	b.n	8007a0c <_free_r+0x24>
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	200017d8 	.word	0x200017d8

08007a7c <sbrk_aligned>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4e0f      	ldr	r6, [pc, #60]	; (8007abc <sbrk_aligned+0x40>)
 8007a80:	000d      	movs	r5, r1
 8007a82:	6831      	ldr	r1, [r6, #0]
 8007a84:	0004      	movs	r4, r0
 8007a86:	2900      	cmp	r1, #0
 8007a88:	d102      	bne.n	8007a90 <sbrk_aligned+0x14>
 8007a8a:	f000 fba1 	bl	80081d0 <_sbrk_r>
 8007a8e:	6030      	str	r0, [r6, #0]
 8007a90:	0029      	movs	r1, r5
 8007a92:	0020      	movs	r0, r4
 8007a94:	f000 fb9c 	bl	80081d0 <_sbrk_r>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d00a      	beq.n	8007ab2 <sbrk_aligned+0x36>
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	1cc5      	adds	r5, r0, #3
 8007aa0:	439d      	bics	r5, r3
 8007aa2:	42a8      	cmp	r0, r5
 8007aa4:	d007      	beq.n	8007ab6 <sbrk_aligned+0x3a>
 8007aa6:	1a29      	subs	r1, r5, r0
 8007aa8:	0020      	movs	r0, r4
 8007aaa:	f000 fb91 	bl	80081d0 <_sbrk_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d101      	bne.n	8007ab6 <sbrk_aligned+0x3a>
 8007ab2:	2501      	movs	r5, #1
 8007ab4:	426d      	negs	r5, r5
 8007ab6:	0028      	movs	r0, r5
 8007ab8:	bd70      	pop	{r4, r5, r6, pc}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	200017dc 	.word	0x200017dc

08007ac0 <_malloc_r>:
 8007ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	1ccb      	adds	r3, r1, #3
 8007ac6:	4393      	bics	r3, r2
 8007ac8:	3308      	adds	r3, #8
 8007aca:	0006      	movs	r6, r0
 8007acc:	001f      	movs	r7, r3
 8007ace:	2b0c      	cmp	r3, #12
 8007ad0:	d238      	bcs.n	8007b44 <_malloc_r+0x84>
 8007ad2:	270c      	movs	r7, #12
 8007ad4:	42b9      	cmp	r1, r7
 8007ad6:	d837      	bhi.n	8007b48 <_malloc_r+0x88>
 8007ad8:	0030      	movs	r0, r6
 8007ada:	f000 f873 	bl	8007bc4 <__malloc_lock>
 8007ade:	4b38      	ldr	r3, [pc, #224]	; (8007bc0 <_malloc_r+0x100>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	001c      	movs	r4, r3
 8007ae6:	2c00      	cmp	r4, #0
 8007ae8:	d133      	bne.n	8007b52 <_malloc_r+0x92>
 8007aea:	0039      	movs	r1, r7
 8007aec:	0030      	movs	r0, r6
 8007aee:	f7ff ffc5 	bl	8007a7c <sbrk_aligned>
 8007af2:	0004      	movs	r4, r0
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d15e      	bne.n	8007bb6 <_malloc_r+0xf6>
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	681c      	ldr	r4, [r3, #0]
 8007afc:	0025      	movs	r5, r4
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	d14e      	bne.n	8007ba0 <_malloc_r+0xe0>
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	d051      	beq.n	8007baa <_malloc_r+0xea>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	0029      	movs	r1, r5
 8007b0a:	18e3      	adds	r3, r4, r3
 8007b0c:	0030      	movs	r0, r6
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	f000 fb5e 	bl	80081d0 <_sbrk_r>
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	4283      	cmp	r3, r0
 8007b18:	d147      	bne.n	8007baa <_malloc_r+0xea>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	0030      	movs	r0, r6
 8007b1e:	1aff      	subs	r7, r7, r3
 8007b20:	0039      	movs	r1, r7
 8007b22:	f7ff ffab 	bl	8007a7c <sbrk_aligned>
 8007b26:	3001      	adds	r0, #1
 8007b28:	d03f      	beq.n	8007baa <_malloc_r+0xea>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	19db      	adds	r3, r3, r7
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d040      	beq.n	8007bba <_malloc_r+0xfa>
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	42a2      	cmp	r2, r4
 8007b3c:	d133      	bne.n	8007ba6 <_malloc_r+0xe6>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	605a      	str	r2, [r3, #4]
 8007b42:	e014      	b.n	8007b6e <_malloc_r+0xae>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dac5      	bge.n	8007ad4 <_malloc_r+0x14>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	6033      	str	r3, [r6, #0]
 8007b4e:	0028      	movs	r0, r5
 8007b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b52:	6821      	ldr	r1, [r4, #0]
 8007b54:	1bc9      	subs	r1, r1, r7
 8007b56:	d420      	bmi.n	8007b9a <_malloc_r+0xda>
 8007b58:	290b      	cmp	r1, #11
 8007b5a:	d918      	bls.n	8007b8e <_malloc_r+0xce>
 8007b5c:	19e2      	adds	r2, r4, r7
 8007b5e:	6027      	str	r7, [r4, #0]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d112      	bne.n	8007b8a <_malloc_r+0xca>
 8007b64:	9b00      	ldr	r3, [sp, #0]
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	6011      	str	r1, [r2, #0]
 8007b6c:	6053      	str	r3, [r2, #4]
 8007b6e:	0030      	movs	r0, r6
 8007b70:	0025      	movs	r5, r4
 8007b72:	f000 f82f 	bl	8007bd4 <__malloc_unlock>
 8007b76:	2207      	movs	r2, #7
 8007b78:	350b      	adds	r5, #11
 8007b7a:	1d23      	adds	r3, r4, #4
 8007b7c:	4395      	bics	r5, r2
 8007b7e:	1aea      	subs	r2, r5, r3
 8007b80:	429d      	cmp	r5, r3
 8007b82:	d0e4      	beq.n	8007b4e <_malloc_r+0x8e>
 8007b84:	1b5b      	subs	r3, r3, r5
 8007b86:	50a3      	str	r3, [r4, r2]
 8007b88:	e7e1      	b.n	8007b4e <_malloc_r+0x8e>
 8007b8a:	605a      	str	r2, [r3, #4]
 8007b8c:	e7ec      	b.n	8007b68 <_malloc_r+0xa8>
 8007b8e:	6862      	ldr	r2, [r4, #4]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d1d5      	bne.n	8007b40 <_malloc_r+0x80>
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e7e9      	b.n	8007b6e <_malloc_r+0xae>
 8007b9a:	0023      	movs	r3, r4
 8007b9c:	6864      	ldr	r4, [r4, #4]
 8007b9e:	e7a2      	b.n	8007ae6 <_malloc_r+0x26>
 8007ba0:	002c      	movs	r4, r5
 8007ba2:	686d      	ldr	r5, [r5, #4]
 8007ba4:	e7ab      	b.n	8007afe <_malloc_r+0x3e>
 8007ba6:	0013      	movs	r3, r2
 8007ba8:	e7c4      	b.n	8007b34 <_malloc_r+0x74>
 8007baa:	230c      	movs	r3, #12
 8007bac:	0030      	movs	r0, r6
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f000 f810 	bl	8007bd4 <__malloc_unlock>
 8007bb4:	e7cb      	b.n	8007b4e <_malloc_r+0x8e>
 8007bb6:	6027      	str	r7, [r4, #0]
 8007bb8:	e7d9      	b.n	8007b6e <_malloc_r+0xae>
 8007bba:	605b      	str	r3, [r3, #4]
 8007bbc:	deff      	udf	#255	; 0xff
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	200017d8 	.word	0x200017d8

08007bc4 <__malloc_lock>:
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <__malloc_lock+0xc>)
 8007bc8:	f7ff ff02 	bl	80079d0 <__retarget_lock_acquire_recursive>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	200017d4 	.word	0x200017d4

08007bd4 <__malloc_unlock>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	4802      	ldr	r0, [pc, #8]	; (8007be0 <__malloc_unlock+0xc>)
 8007bd8:	f7ff fefb 	bl	80079d2 <__retarget_lock_release_recursive>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	200017d4 	.word	0x200017d4

08007be4 <__ssputs_r>:
 8007be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be6:	b085      	sub	sp, #20
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	9203      	str	r2, [sp, #12]
 8007bec:	688e      	ldr	r6, [r1, #8]
 8007bee:	9a01      	ldr	r2, [sp, #4]
 8007bf0:	0007      	movs	r7, r0
 8007bf2:	000c      	movs	r4, r1
 8007bf4:	680b      	ldr	r3, [r1, #0]
 8007bf6:	4296      	cmp	r6, r2
 8007bf8:	d831      	bhi.n	8007c5e <__ssputs_r+0x7a>
 8007bfa:	898a      	ldrh	r2, [r1, #12]
 8007bfc:	2190      	movs	r1, #144	; 0x90
 8007bfe:	00c9      	lsls	r1, r1, #3
 8007c00:	420a      	tst	r2, r1
 8007c02:	d029      	beq.n	8007c58 <__ssputs_r+0x74>
 8007c04:	2003      	movs	r0, #3
 8007c06:	6921      	ldr	r1, [r4, #16]
 8007c08:	1a5b      	subs	r3, r3, r1
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	6963      	ldr	r3, [r4, #20]
 8007c0e:	4343      	muls	r3, r0
 8007c10:	0fdd      	lsrs	r5, r3, #31
 8007c12:	18ed      	adds	r5, r5, r3
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	9802      	ldr	r0, [sp, #8]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	181b      	adds	r3, r3, r0
 8007c1c:	106d      	asrs	r5, r5, #1
 8007c1e:	42ab      	cmp	r3, r5
 8007c20:	d900      	bls.n	8007c24 <__ssputs_r+0x40>
 8007c22:	001d      	movs	r5, r3
 8007c24:	0552      	lsls	r2, r2, #21
 8007c26:	d529      	bpl.n	8007c7c <__ssputs_r+0x98>
 8007c28:	0029      	movs	r1, r5
 8007c2a:	0038      	movs	r0, r7
 8007c2c:	f7ff ff48 	bl	8007ac0 <_malloc_r>
 8007c30:	1e06      	subs	r6, r0, #0
 8007c32:	d02d      	beq.n	8007c90 <__ssputs_r+0xac>
 8007c34:	9a02      	ldr	r2, [sp, #8]
 8007c36:	6921      	ldr	r1, [r4, #16]
 8007c38:	f7ff fecc 	bl	80079d4 <memcpy>
 8007c3c:	89a2      	ldrh	r2, [r4, #12]
 8007c3e:	4b19      	ldr	r3, [pc, #100]	; (8007ca4 <__ssputs_r+0xc0>)
 8007c40:	401a      	ands	r2, r3
 8007c42:	2380      	movs	r3, #128	; 0x80
 8007c44:	4313      	orrs	r3, r2
 8007c46:	81a3      	strh	r3, [r4, #12]
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	6126      	str	r6, [r4, #16]
 8007c4c:	18f6      	adds	r6, r6, r3
 8007c4e:	6026      	str	r6, [r4, #0]
 8007c50:	6165      	str	r5, [r4, #20]
 8007c52:	9e01      	ldr	r6, [sp, #4]
 8007c54:	1aed      	subs	r5, r5, r3
 8007c56:	60a5      	str	r5, [r4, #8]
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	429e      	cmp	r6, r3
 8007c5c:	d900      	bls.n	8007c60 <__ssputs_r+0x7c>
 8007c5e:	9e01      	ldr	r6, [sp, #4]
 8007c60:	0032      	movs	r2, r6
 8007c62:	9903      	ldr	r1, [sp, #12]
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	f000 fa9f 	bl	80081a8 <memmove>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	68a3      	ldr	r3, [r4, #8]
 8007c6e:	1b9b      	subs	r3, r3, r6
 8007c70:	60a3      	str	r3, [r4, #8]
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	199b      	adds	r3, r3, r6
 8007c76:	6023      	str	r3, [r4, #0]
 8007c78:	b005      	add	sp, #20
 8007c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c7c:	002a      	movs	r2, r5
 8007c7e:	0038      	movs	r0, r7
 8007c80:	f000 fac3 	bl	800820a <_realloc_r>
 8007c84:	1e06      	subs	r6, r0, #0
 8007c86:	d1df      	bne.n	8007c48 <__ssputs_r+0x64>
 8007c88:	0038      	movs	r0, r7
 8007c8a:	6921      	ldr	r1, [r4, #16]
 8007c8c:	f7ff feac 	bl	80079e8 <_free_r>
 8007c90:	230c      	movs	r3, #12
 8007c92:	2001      	movs	r0, #1
 8007c94:	603b      	str	r3, [r7, #0]
 8007c96:	89a2      	ldrh	r2, [r4, #12]
 8007c98:	3334      	adds	r3, #52	; 0x34
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	4240      	negs	r0, r0
 8007ca0:	e7ea      	b.n	8007c78 <__ssputs_r+0x94>
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	fffffb7f 	.word	0xfffffb7f

08007ca8 <_svfiprintf_r>:
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	b0a1      	sub	sp, #132	; 0x84
 8007cac:	9003      	str	r0, [sp, #12]
 8007cae:	001d      	movs	r5, r3
 8007cb0:	898b      	ldrh	r3, [r1, #12]
 8007cb2:	000f      	movs	r7, r1
 8007cb4:	0016      	movs	r6, r2
 8007cb6:	061b      	lsls	r3, r3, #24
 8007cb8:	d511      	bpl.n	8007cde <_svfiprintf_r+0x36>
 8007cba:	690b      	ldr	r3, [r1, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10e      	bne.n	8007cde <_svfiprintf_r+0x36>
 8007cc0:	2140      	movs	r1, #64	; 0x40
 8007cc2:	f7ff fefd 	bl	8007ac0 <_malloc_r>
 8007cc6:	6038      	str	r0, [r7, #0]
 8007cc8:	6138      	str	r0, [r7, #16]
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d105      	bne.n	8007cda <_svfiprintf_r+0x32>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	9a03      	ldr	r2, [sp, #12]
 8007cd2:	3801      	subs	r0, #1
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	b021      	add	sp, #132	; 0x84
 8007cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cda:	2340      	movs	r3, #64	; 0x40
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	ac08      	add	r4, sp, #32
 8007ce2:	6163      	str	r3, [r4, #20]
 8007ce4:	3320      	adds	r3, #32
 8007ce6:	7663      	strb	r3, [r4, #25]
 8007ce8:	3310      	adds	r3, #16
 8007cea:	76a3      	strb	r3, [r4, #26]
 8007cec:	9507      	str	r5, [sp, #28]
 8007cee:	0035      	movs	r5, r6
 8007cf0:	782b      	ldrb	r3, [r5, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <_svfiprintf_r+0x52>
 8007cf6:	2b25      	cmp	r3, #37	; 0x25
 8007cf8:	d148      	bne.n	8007d8c <_svfiprintf_r+0xe4>
 8007cfa:	1bab      	subs	r3, r5, r6
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	42b5      	cmp	r5, r6
 8007d00:	d00b      	beq.n	8007d1a <_svfiprintf_r+0x72>
 8007d02:	0032      	movs	r2, r6
 8007d04:	0039      	movs	r1, r7
 8007d06:	9803      	ldr	r0, [sp, #12]
 8007d08:	f7ff ff6c 	bl	8007be4 <__ssputs_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d100      	bne.n	8007d12 <_svfiprintf_r+0x6a>
 8007d10:	e0af      	b.n	8007e72 <_svfiprintf_r+0x1ca>
 8007d12:	6963      	ldr	r3, [r4, #20]
 8007d14:	9a05      	ldr	r2, [sp, #20]
 8007d16:	189b      	adds	r3, r3, r2
 8007d18:	6163      	str	r3, [r4, #20]
 8007d1a:	782b      	ldrb	r3, [r5, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d100      	bne.n	8007d22 <_svfiprintf_r+0x7a>
 8007d20:	e0a7      	b.n	8007e72 <_svfiprintf_r+0x1ca>
 8007d22:	2201      	movs	r2, #1
 8007d24:	2300      	movs	r3, #0
 8007d26:	4252      	negs	r2, r2
 8007d28:	6062      	str	r2, [r4, #4]
 8007d2a:	a904      	add	r1, sp, #16
 8007d2c:	3254      	adds	r2, #84	; 0x54
 8007d2e:	1852      	adds	r2, r2, r1
 8007d30:	1c6e      	adds	r6, r5, #1
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	60e3      	str	r3, [r4, #12]
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	7013      	strb	r3, [r2, #0]
 8007d3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d3c:	4b55      	ldr	r3, [pc, #340]	; (8007e94 <_svfiprintf_r+0x1ec>)
 8007d3e:	2205      	movs	r2, #5
 8007d40:	0018      	movs	r0, r3
 8007d42:	7831      	ldrb	r1, [r6, #0]
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	f000 fa55 	bl	80081f4 <memchr>
 8007d4a:	1c75      	adds	r5, r6, #1
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d11f      	bne.n	8007d90 <_svfiprintf_r+0xe8>
 8007d50:	6822      	ldr	r2, [r4, #0]
 8007d52:	06d3      	lsls	r3, r2, #27
 8007d54:	d504      	bpl.n	8007d60 <_svfiprintf_r+0xb8>
 8007d56:	2353      	movs	r3, #83	; 0x53
 8007d58:	a904      	add	r1, sp, #16
 8007d5a:	185b      	adds	r3, r3, r1
 8007d5c:	2120      	movs	r1, #32
 8007d5e:	7019      	strb	r1, [r3, #0]
 8007d60:	0713      	lsls	r3, r2, #28
 8007d62:	d504      	bpl.n	8007d6e <_svfiprintf_r+0xc6>
 8007d64:	2353      	movs	r3, #83	; 0x53
 8007d66:	a904      	add	r1, sp, #16
 8007d68:	185b      	adds	r3, r3, r1
 8007d6a:	212b      	movs	r1, #43	; 0x2b
 8007d6c:	7019      	strb	r1, [r3, #0]
 8007d6e:	7833      	ldrb	r3, [r6, #0]
 8007d70:	2b2a      	cmp	r3, #42	; 0x2a
 8007d72:	d016      	beq.n	8007da2 <_svfiprintf_r+0xfa>
 8007d74:	0035      	movs	r5, r6
 8007d76:	2100      	movs	r1, #0
 8007d78:	200a      	movs	r0, #10
 8007d7a:	68e3      	ldr	r3, [r4, #12]
 8007d7c:	782a      	ldrb	r2, [r5, #0]
 8007d7e:	1c6e      	adds	r6, r5, #1
 8007d80:	3a30      	subs	r2, #48	; 0x30
 8007d82:	2a09      	cmp	r2, #9
 8007d84:	d94e      	bls.n	8007e24 <_svfiprintf_r+0x17c>
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d111      	bne.n	8007dae <_svfiprintf_r+0x106>
 8007d8a:	e017      	b.n	8007dbc <_svfiprintf_r+0x114>
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	e7af      	b.n	8007cf0 <_svfiprintf_r+0x48>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	1ac0      	subs	r0, r0, r3
 8007d96:	2301      	movs	r3, #1
 8007d98:	4083      	lsls	r3, r0
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	002e      	movs	r6, r5
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	e7cc      	b.n	8007d3c <_svfiprintf_r+0x94>
 8007da2:	9b07      	ldr	r3, [sp, #28]
 8007da4:	1d19      	adds	r1, r3, #4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	9107      	str	r1, [sp, #28]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	db01      	blt.n	8007db2 <_svfiprintf_r+0x10a>
 8007dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db0:	e004      	b.n	8007dbc <_svfiprintf_r+0x114>
 8007db2:	425b      	negs	r3, r3
 8007db4:	60e3      	str	r3, [r4, #12]
 8007db6:	2302      	movs	r3, #2
 8007db8:	4313      	orrs	r3, r2
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	782b      	ldrb	r3, [r5, #0]
 8007dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007dc0:	d10a      	bne.n	8007dd8 <_svfiprintf_r+0x130>
 8007dc2:	786b      	ldrb	r3, [r5, #1]
 8007dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc6:	d135      	bne.n	8007e34 <_svfiprintf_r+0x18c>
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	3502      	adds	r5, #2
 8007dcc:	1d1a      	adds	r2, r3, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	9207      	str	r2, [sp, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	db2b      	blt.n	8007e2e <_svfiprintf_r+0x186>
 8007dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd8:	4e2f      	ldr	r6, [pc, #188]	; (8007e98 <_svfiprintf_r+0x1f0>)
 8007dda:	2203      	movs	r2, #3
 8007ddc:	0030      	movs	r0, r6
 8007dde:	7829      	ldrb	r1, [r5, #0]
 8007de0:	f000 fa08 	bl	80081f4 <memchr>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d006      	beq.n	8007df6 <_svfiprintf_r+0x14e>
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	1b80      	subs	r0, r0, r6
 8007dec:	4083      	lsls	r3, r0
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	3501      	adds	r5, #1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	7829      	ldrb	r1, [r5, #0]
 8007df8:	2206      	movs	r2, #6
 8007dfa:	4828      	ldr	r0, [pc, #160]	; (8007e9c <_svfiprintf_r+0x1f4>)
 8007dfc:	1c6e      	adds	r6, r5, #1
 8007dfe:	7621      	strb	r1, [r4, #24]
 8007e00:	f000 f9f8 	bl	80081f4 <memchr>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d03c      	beq.n	8007e82 <_svfiprintf_r+0x1da>
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <_svfiprintf_r+0x1f8>)
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d125      	bne.n	8007e5a <_svfiprintf_r+0x1b2>
 8007e0e:	2207      	movs	r2, #7
 8007e10:	9b07      	ldr	r3, [sp, #28]
 8007e12:	3307      	adds	r3, #7
 8007e14:	4393      	bics	r3, r2
 8007e16:	3308      	adds	r3, #8
 8007e18:	9307      	str	r3, [sp, #28]
 8007e1a:	6963      	ldr	r3, [r4, #20]
 8007e1c:	9a04      	ldr	r2, [sp, #16]
 8007e1e:	189b      	adds	r3, r3, r2
 8007e20:	6163      	str	r3, [r4, #20]
 8007e22:	e764      	b.n	8007cee <_svfiprintf_r+0x46>
 8007e24:	4343      	muls	r3, r0
 8007e26:	0035      	movs	r5, r6
 8007e28:	2101      	movs	r1, #1
 8007e2a:	189b      	adds	r3, r3, r2
 8007e2c:	e7a6      	b.n	8007d7c <_svfiprintf_r+0xd4>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	425b      	negs	r3, r3
 8007e32:	e7d0      	b.n	8007dd6 <_svfiprintf_r+0x12e>
 8007e34:	2300      	movs	r3, #0
 8007e36:	200a      	movs	r0, #10
 8007e38:	001a      	movs	r2, r3
 8007e3a:	3501      	adds	r5, #1
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	7829      	ldrb	r1, [r5, #0]
 8007e40:	1c6e      	adds	r6, r5, #1
 8007e42:	3930      	subs	r1, #48	; 0x30
 8007e44:	2909      	cmp	r1, #9
 8007e46:	d903      	bls.n	8007e50 <_svfiprintf_r+0x1a8>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0c5      	beq.n	8007dd8 <_svfiprintf_r+0x130>
 8007e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e4e:	e7c3      	b.n	8007dd8 <_svfiprintf_r+0x130>
 8007e50:	4342      	muls	r2, r0
 8007e52:	0035      	movs	r5, r6
 8007e54:	2301      	movs	r3, #1
 8007e56:	1852      	adds	r2, r2, r1
 8007e58:	e7f1      	b.n	8007e3e <_svfiprintf_r+0x196>
 8007e5a:	aa07      	add	r2, sp, #28
 8007e5c:	9200      	str	r2, [sp, #0]
 8007e5e:	0021      	movs	r1, r4
 8007e60:	003a      	movs	r2, r7
 8007e62:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <_svfiprintf_r+0x1fc>)
 8007e64:	9803      	ldr	r0, [sp, #12]
 8007e66:	e000      	b.n	8007e6a <_svfiprintf_r+0x1c2>
 8007e68:	bf00      	nop
 8007e6a:	9004      	str	r0, [sp, #16]
 8007e6c:	9b04      	ldr	r3, [sp, #16]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	d1d3      	bne.n	8007e1a <_svfiprintf_r+0x172>
 8007e72:	89bb      	ldrh	r3, [r7, #12]
 8007e74:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007e76:	065b      	lsls	r3, r3, #25
 8007e78:	d400      	bmi.n	8007e7c <_svfiprintf_r+0x1d4>
 8007e7a:	e72c      	b.n	8007cd6 <_svfiprintf_r+0x2e>
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	4240      	negs	r0, r0
 8007e80:	e729      	b.n	8007cd6 <_svfiprintf_r+0x2e>
 8007e82:	aa07      	add	r2, sp, #28
 8007e84:	9200      	str	r2, [sp, #0]
 8007e86:	0021      	movs	r1, r4
 8007e88:	003a      	movs	r2, r7
 8007e8a:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <_svfiprintf_r+0x1fc>)
 8007e8c:	9803      	ldr	r0, [sp, #12]
 8007e8e:	f000 f87b 	bl	8007f88 <_printf_i>
 8007e92:	e7ea      	b.n	8007e6a <_svfiprintf_r+0x1c2>
 8007e94:	08008b9c 	.word	0x08008b9c
 8007e98:	08008ba2 	.word	0x08008ba2
 8007e9c:	08008ba6 	.word	0x08008ba6
 8007ea0:	00000000 	.word	0x00000000
 8007ea4:	08007be5 	.word	0x08007be5

08007ea8 <_printf_common>:
 8007ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eaa:	0016      	movs	r6, r2
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	688a      	ldr	r2, [r1, #8]
 8007eb0:	690b      	ldr	r3, [r1, #16]
 8007eb2:	000c      	movs	r4, r1
 8007eb4:	9000      	str	r0, [sp, #0]
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	da00      	bge.n	8007ebc <_printf_common+0x14>
 8007eba:	0013      	movs	r3, r2
 8007ebc:	0022      	movs	r2, r4
 8007ebe:	6033      	str	r3, [r6, #0]
 8007ec0:	3243      	adds	r2, #67	; 0x43
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	d001      	beq.n	8007ecc <_printf_common+0x24>
 8007ec8:	3301      	adds	r3, #1
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	069b      	lsls	r3, r3, #26
 8007ed0:	d502      	bpl.n	8007ed8 <_printf_common+0x30>
 8007ed2:	6833      	ldr	r3, [r6, #0]
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	6033      	str	r3, [r6, #0]
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	2306      	movs	r3, #6
 8007edc:	0015      	movs	r5, r2
 8007ede:	401d      	ands	r5, r3
 8007ee0:	421a      	tst	r2, r3
 8007ee2:	d027      	beq.n	8007f34 <_printf_common+0x8c>
 8007ee4:	0023      	movs	r3, r4
 8007ee6:	3343      	adds	r3, #67	; 0x43
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	1e5a      	subs	r2, r3, #1
 8007eec:	4193      	sbcs	r3, r2
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	0692      	lsls	r2, r2, #26
 8007ef2:	d430      	bmi.n	8007f56 <_printf_common+0xae>
 8007ef4:	0022      	movs	r2, r4
 8007ef6:	9901      	ldr	r1, [sp, #4]
 8007ef8:	9800      	ldr	r0, [sp, #0]
 8007efa:	9d08      	ldr	r5, [sp, #32]
 8007efc:	3243      	adds	r2, #67	; 0x43
 8007efe:	47a8      	blx	r5
 8007f00:	3001      	adds	r0, #1
 8007f02:	d025      	beq.n	8007f50 <_printf_common+0xa8>
 8007f04:	2206      	movs	r2, #6
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	2500      	movs	r5, #0
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d105      	bne.n	8007f1c <_printf_common+0x74>
 8007f10:	6833      	ldr	r3, [r6, #0]
 8007f12:	68e5      	ldr	r5, [r4, #12]
 8007f14:	1aed      	subs	r5, r5, r3
 8007f16:	43eb      	mvns	r3, r5
 8007f18:	17db      	asrs	r3, r3, #31
 8007f1a:	401d      	ands	r5, r3
 8007f1c:	68a3      	ldr	r3, [r4, #8]
 8007f1e:	6922      	ldr	r2, [r4, #16]
 8007f20:	4293      	cmp	r3, r2
 8007f22:	dd01      	ble.n	8007f28 <_printf_common+0x80>
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	18ed      	adds	r5, r5, r3
 8007f28:	2600      	movs	r6, #0
 8007f2a:	42b5      	cmp	r5, r6
 8007f2c:	d120      	bne.n	8007f70 <_printf_common+0xc8>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e010      	b.n	8007f54 <_printf_common+0xac>
 8007f32:	3501      	adds	r5, #1
 8007f34:	68e3      	ldr	r3, [r4, #12]
 8007f36:	6832      	ldr	r2, [r6, #0]
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	42ab      	cmp	r3, r5
 8007f3c:	ddd2      	ble.n	8007ee4 <_printf_common+0x3c>
 8007f3e:	0022      	movs	r2, r4
 8007f40:	2301      	movs	r3, #1
 8007f42:	9901      	ldr	r1, [sp, #4]
 8007f44:	9800      	ldr	r0, [sp, #0]
 8007f46:	9f08      	ldr	r7, [sp, #32]
 8007f48:	3219      	adds	r2, #25
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d1f0      	bne.n	8007f32 <_printf_common+0x8a>
 8007f50:	2001      	movs	r0, #1
 8007f52:	4240      	negs	r0, r0
 8007f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f56:	2030      	movs	r0, #48	; 0x30
 8007f58:	18e1      	adds	r1, r4, r3
 8007f5a:	3143      	adds	r1, #67	; 0x43
 8007f5c:	7008      	strb	r0, [r1, #0]
 8007f5e:	0021      	movs	r1, r4
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	3145      	adds	r1, #69	; 0x45
 8007f64:	7809      	ldrb	r1, [r1, #0]
 8007f66:	18a2      	adds	r2, r4, r2
 8007f68:	3243      	adds	r2, #67	; 0x43
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	7011      	strb	r1, [r2, #0]
 8007f6e:	e7c1      	b.n	8007ef4 <_printf_common+0x4c>
 8007f70:	0022      	movs	r2, r4
 8007f72:	2301      	movs	r3, #1
 8007f74:	9901      	ldr	r1, [sp, #4]
 8007f76:	9800      	ldr	r0, [sp, #0]
 8007f78:	9f08      	ldr	r7, [sp, #32]
 8007f7a:	321a      	adds	r2, #26
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d0e6      	beq.n	8007f50 <_printf_common+0xa8>
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7d1      	b.n	8007f2a <_printf_common+0x82>
	...

08007f88 <_printf_i>:
 8007f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8a:	b08b      	sub	sp, #44	; 0x2c
 8007f8c:	9206      	str	r2, [sp, #24]
 8007f8e:	000a      	movs	r2, r1
 8007f90:	3243      	adds	r2, #67	; 0x43
 8007f92:	9307      	str	r3, [sp, #28]
 8007f94:	9005      	str	r0, [sp, #20]
 8007f96:	9204      	str	r2, [sp, #16]
 8007f98:	7e0a      	ldrb	r2, [r1, #24]
 8007f9a:	000c      	movs	r4, r1
 8007f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f9e:	2a78      	cmp	r2, #120	; 0x78
 8007fa0:	d809      	bhi.n	8007fb6 <_printf_i+0x2e>
 8007fa2:	2a62      	cmp	r2, #98	; 0x62
 8007fa4:	d80b      	bhi.n	8007fbe <_printf_i+0x36>
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	d100      	bne.n	8007fac <_printf_i+0x24>
 8007faa:	e0be      	b.n	800812a <_printf_i+0x1a2>
 8007fac:	497c      	ldr	r1, [pc, #496]	; (80081a0 <_printf_i+0x218>)
 8007fae:	9103      	str	r1, [sp, #12]
 8007fb0:	2a58      	cmp	r2, #88	; 0x58
 8007fb2:	d100      	bne.n	8007fb6 <_printf_i+0x2e>
 8007fb4:	e093      	b.n	80080de <_printf_i+0x156>
 8007fb6:	0026      	movs	r6, r4
 8007fb8:	3642      	adds	r6, #66	; 0x42
 8007fba:	7032      	strb	r2, [r6, #0]
 8007fbc:	e022      	b.n	8008004 <_printf_i+0x7c>
 8007fbe:	0010      	movs	r0, r2
 8007fc0:	3863      	subs	r0, #99	; 0x63
 8007fc2:	2815      	cmp	r0, #21
 8007fc4:	d8f7      	bhi.n	8007fb6 <_printf_i+0x2e>
 8007fc6:	f7f8 f8bb 	bl	8000140 <__gnu_thumb1_case_shi>
 8007fca:	0016      	.short	0x0016
 8007fcc:	fff6001f 	.word	0xfff6001f
 8007fd0:	fff6fff6 	.word	0xfff6fff6
 8007fd4:	001ffff6 	.word	0x001ffff6
 8007fd8:	fff6fff6 	.word	0xfff6fff6
 8007fdc:	fff6fff6 	.word	0xfff6fff6
 8007fe0:	003600a3 	.word	0x003600a3
 8007fe4:	fff60083 	.word	0xfff60083
 8007fe8:	00b4fff6 	.word	0x00b4fff6
 8007fec:	0036fff6 	.word	0x0036fff6
 8007ff0:	fff6fff6 	.word	0xfff6fff6
 8007ff4:	0087      	.short	0x0087
 8007ff6:	0026      	movs	r6, r4
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	3642      	adds	r6, #66	; 0x42
 8007ffc:	1d11      	adds	r1, r2, #4
 8007ffe:	6019      	str	r1, [r3, #0]
 8008000:	6813      	ldr	r3, [r2, #0]
 8008002:	7033      	strb	r3, [r6, #0]
 8008004:	2301      	movs	r3, #1
 8008006:	e0a2      	b.n	800814e <_printf_i+0x1c6>
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	6809      	ldr	r1, [r1, #0]
 800800c:	1d02      	adds	r2, r0, #4
 800800e:	060d      	lsls	r5, r1, #24
 8008010:	d50b      	bpl.n	800802a <_printf_i+0xa2>
 8008012:	6805      	ldr	r5, [r0, #0]
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	2d00      	cmp	r5, #0
 8008018:	da03      	bge.n	8008022 <_printf_i+0x9a>
 800801a:	232d      	movs	r3, #45	; 0x2d
 800801c:	9a04      	ldr	r2, [sp, #16]
 800801e:	426d      	negs	r5, r5
 8008020:	7013      	strb	r3, [r2, #0]
 8008022:	4b5f      	ldr	r3, [pc, #380]	; (80081a0 <_printf_i+0x218>)
 8008024:	270a      	movs	r7, #10
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	e01b      	b.n	8008062 <_printf_i+0xda>
 800802a:	6805      	ldr	r5, [r0, #0]
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	0649      	lsls	r1, r1, #25
 8008030:	d5f1      	bpl.n	8008016 <_printf_i+0x8e>
 8008032:	b22d      	sxth	r5, r5
 8008034:	e7ef      	b.n	8008016 <_printf_i+0x8e>
 8008036:	680d      	ldr	r5, [r1, #0]
 8008038:	6819      	ldr	r1, [r3, #0]
 800803a:	1d08      	adds	r0, r1, #4
 800803c:	6018      	str	r0, [r3, #0]
 800803e:	062e      	lsls	r6, r5, #24
 8008040:	d501      	bpl.n	8008046 <_printf_i+0xbe>
 8008042:	680d      	ldr	r5, [r1, #0]
 8008044:	e003      	b.n	800804e <_printf_i+0xc6>
 8008046:	066d      	lsls	r5, r5, #25
 8008048:	d5fb      	bpl.n	8008042 <_printf_i+0xba>
 800804a:	680d      	ldr	r5, [r1, #0]
 800804c:	b2ad      	uxth	r5, r5
 800804e:	4b54      	ldr	r3, [pc, #336]	; (80081a0 <_printf_i+0x218>)
 8008050:	2708      	movs	r7, #8
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	2a6f      	cmp	r2, #111	; 0x6f
 8008056:	d000      	beq.n	800805a <_printf_i+0xd2>
 8008058:	3702      	adds	r7, #2
 800805a:	0023      	movs	r3, r4
 800805c:	2200      	movs	r2, #0
 800805e:	3343      	adds	r3, #67	; 0x43
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	60a3      	str	r3, [r4, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	db03      	blt.n	8008072 <_printf_i+0xea>
 800806a:	2104      	movs	r1, #4
 800806c:	6822      	ldr	r2, [r4, #0]
 800806e:	438a      	bics	r2, r1
 8008070:	6022      	str	r2, [r4, #0]
 8008072:	2d00      	cmp	r5, #0
 8008074:	d102      	bne.n	800807c <_printf_i+0xf4>
 8008076:	9e04      	ldr	r6, [sp, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <_printf_i+0x10e>
 800807c:	9e04      	ldr	r6, [sp, #16]
 800807e:	0028      	movs	r0, r5
 8008080:	0039      	movs	r1, r7
 8008082:	f7f8 f8ed 	bl	8000260 <__aeabi_uidivmod>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	3e01      	subs	r6, #1
 800808a:	5c5b      	ldrb	r3, [r3, r1]
 800808c:	7033      	strb	r3, [r6, #0]
 800808e:	002b      	movs	r3, r5
 8008090:	0005      	movs	r5, r0
 8008092:	429f      	cmp	r7, r3
 8008094:	d9f3      	bls.n	800807e <_printf_i+0xf6>
 8008096:	2f08      	cmp	r7, #8
 8008098:	d109      	bne.n	80080ae <_printf_i+0x126>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	07db      	lsls	r3, r3, #31
 800809e:	d506      	bpl.n	80080ae <_printf_i+0x126>
 80080a0:	6862      	ldr	r2, [r4, #4]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	dc02      	bgt.n	80080ae <_printf_i+0x126>
 80080a8:	2330      	movs	r3, #48	; 0x30
 80080aa:	3e01      	subs	r6, #1
 80080ac:	7033      	strb	r3, [r6, #0]
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	1b9b      	subs	r3, r3, r6
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	0021      	movs	r1, r4
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	9805      	ldr	r0, [sp, #20]
 80080bc:	9b06      	ldr	r3, [sp, #24]
 80080be:	aa09      	add	r2, sp, #36	; 0x24
 80080c0:	f7ff fef2 	bl	8007ea8 <_printf_common>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d147      	bne.n	8008158 <_printf_i+0x1d0>
 80080c8:	2001      	movs	r0, #1
 80080ca:	4240      	negs	r0, r0
 80080cc:	b00b      	add	sp, #44	; 0x2c
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	2220      	movs	r2, #32
 80080d2:	6809      	ldr	r1, [r1, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	6022      	str	r2, [r4, #0]
 80080d8:	2278      	movs	r2, #120	; 0x78
 80080da:	4932      	ldr	r1, [pc, #200]	; (80081a4 <_printf_i+0x21c>)
 80080dc:	9103      	str	r1, [sp, #12]
 80080de:	0021      	movs	r1, r4
 80080e0:	3145      	adds	r1, #69	; 0x45
 80080e2:	700a      	strb	r2, [r1, #0]
 80080e4:	6819      	ldr	r1, [r3, #0]
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	c920      	ldmia	r1!, {r5}
 80080ea:	0610      	lsls	r0, r2, #24
 80080ec:	d402      	bmi.n	80080f4 <_printf_i+0x16c>
 80080ee:	0650      	lsls	r0, r2, #25
 80080f0:	d500      	bpl.n	80080f4 <_printf_i+0x16c>
 80080f2:	b2ad      	uxth	r5, r5
 80080f4:	6019      	str	r1, [r3, #0]
 80080f6:	07d3      	lsls	r3, r2, #31
 80080f8:	d502      	bpl.n	8008100 <_printf_i+0x178>
 80080fa:	2320      	movs	r3, #32
 80080fc:	4313      	orrs	r3, r2
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	2710      	movs	r7, #16
 8008102:	2d00      	cmp	r5, #0
 8008104:	d1a9      	bne.n	800805a <_printf_i+0xd2>
 8008106:	2220      	movs	r2, #32
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	4393      	bics	r3, r2
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	e7a4      	b.n	800805a <_printf_i+0xd2>
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	680d      	ldr	r5, [r1, #0]
 8008114:	1d10      	adds	r0, r2, #4
 8008116:	6949      	ldr	r1, [r1, #20]
 8008118:	6018      	str	r0, [r3, #0]
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	062e      	lsls	r6, r5, #24
 800811e:	d501      	bpl.n	8008124 <_printf_i+0x19c>
 8008120:	6019      	str	r1, [r3, #0]
 8008122:	e002      	b.n	800812a <_printf_i+0x1a2>
 8008124:	066d      	lsls	r5, r5, #25
 8008126:	d5fb      	bpl.n	8008120 <_printf_i+0x198>
 8008128:	8019      	strh	r1, [r3, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	9e04      	ldr	r6, [sp, #16]
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	e7c0      	b.n	80080b4 <_printf_i+0x12c>
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	1d11      	adds	r1, r2, #4
 8008136:	6019      	str	r1, [r3, #0]
 8008138:	6816      	ldr	r6, [r2, #0]
 800813a:	2100      	movs	r1, #0
 800813c:	0030      	movs	r0, r6
 800813e:	6862      	ldr	r2, [r4, #4]
 8008140:	f000 f858 	bl	80081f4 <memchr>
 8008144:	2800      	cmp	r0, #0
 8008146:	d001      	beq.n	800814c <_printf_i+0x1c4>
 8008148:	1b80      	subs	r0, r0, r6
 800814a:	6060      	str	r0, [r4, #4]
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	2300      	movs	r3, #0
 8008152:	9a04      	ldr	r2, [sp, #16]
 8008154:	7013      	strb	r3, [r2, #0]
 8008156:	e7ad      	b.n	80080b4 <_printf_i+0x12c>
 8008158:	0032      	movs	r2, r6
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	9906      	ldr	r1, [sp, #24]
 800815e:	9805      	ldr	r0, [sp, #20]
 8008160:	9d07      	ldr	r5, [sp, #28]
 8008162:	47a8      	blx	r5
 8008164:	3001      	adds	r0, #1
 8008166:	d0af      	beq.n	80080c8 <_printf_i+0x140>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	079b      	lsls	r3, r3, #30
 800816c:	d415      	bmi.n	800819a <_printf_i+0x212>
 800816e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008170:	68e0      	ldr	r0, [r4, #12]
 8008172:	4298      	cmp	r0, r3
 8008174:	daaa      	bge.n	80080cc <_printf_i+0x144>
 8008176:	0018      	movs	r0, r3
 8008178:	e7a8      	b.n	80080cc <_printf_i+0x144>
 800817a:	0022      	movs	r2, r4
 800817c:	2301      	movs	r3, #1
 800817e:	9906      	ldr	r1, [sp, #24]
 8008180:	9805      	ldr	r0, [sp, #20]
 8008182:	9e07      	ldr	r6, [sp, #28]
 8008184:	3219      	adds	r2, #25
 8008186:	47b0      	blx	r6
 8008188:	3001      	adds	r0, #1
 800818a:	d09d      	beq.n	80080c8 <_printf_i+0x140>
 800818c:	3501      	adds	r5, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	42ab      	cmp	r3, r5
 8008196:	dcf0      	bgt.n	800817a <_printf_i+0x1f2>
 8008198:	e7e9      	b.n	800816e <_printf_i+0x1e6>
 800819a:	2500      	movs	r5, #0
 800819c:	e7f7      	b.n	800818e <_printf_i+0x206>
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	08008bad 	.word	0x08008bad
 80081a4:	08008bbe 	.word	0x08008bbe

080081a8 <memmove>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4288      	cmp	r0, r1
 80081ac:	d902      	bls.n	80081b4 <memmove+0xc>
 80081ae:	188b      	adds	r3, r1, r2
 80081b0:	4298      	cmp	r0, r3
 80081b2:	d303      	bcc.n	80081bc <memmove+0x14>
 80081b4:	2300      	movs	r3, #0
 80081b6:	e007      	b.n	80081c8 <memmove+0x20>
 80081b8:	5c8b      	ldrb	r3, [r1, r2]
 80081ba:	5483      	strb	r3, [r0, r2]
 80081bc:	3a01      	subs	r2, #1
 80081be:	d2fb      	bcs.n	80081b8 <memmove+0x10>
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	5ccc      	ldrb	r4, [r1, r3]
 80081c4:	54c4      	strb	r4, [r0, r3]
 80081c6:	3301      	adds	r3, #1
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d1fa      	bne.n	80081c2 <memmove+0x1a>
 80081cc:	e7f8      	b.n	80081c0 <memmove+0x18>
	...

080081d0 <_sbrk_r>:
 80081d0:	2300      	movs	r3, #0
 80081d2:	b570      	push	{r4, r5, r6, lr}
 80081d4:	4d06      	ldr	r5, [pc, #24]	; (80081f0 <_sbrk_r+0x20>)
 80081d6:	0004      	movs	r4, r0
 80081d8:	0008      	movs	r0, r1
 80081da:	602b      	str	r3, [r5, #0]
 80081dc:	f7f8 fd36 	bl	8000c4c <_sbrk>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d103      	bne.n	80081ec <_sbrk_r+0x1c>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d000      	beq.n	80081ec <_sbrk_r+0x1c>
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	200017d0 	.word	0x200017d0

080081f4 <memchr>:
 80081f4:	b2c9      	uxtb	r1, r1
 80081f6:	1882      	adds	r2, r0, r2
 80081f8:	4290      	cmp	r0, r2
 80081fa:	d101      	bne.n	8008200 <memchr+0xc>
 80081fc:	2000      	movs	r0, #0
 80081fe:	4770      	bx	lr
 8008200:	7803      	ldrb	r3, [r0, #0]
 8008202:	428b      	cmp	r3, r1
 8008204:	d0fb      	beq.n	80081fe <memchr+0xa>
 8008206:	3001      	adds	r0, #1
 8008208:	e7f6      	b.n	80081f8 <memchr+0x4>

0800820a <_realloc_r>:
 800820a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800820c:	0007      	movs	r7, r0
 800820e:	000e      	movs	r6, r1
 8008210:	0014      	movs	r4, r2
 8008212:	2900      	cmp	r1, #0
 8008214:	d105      	bne.n	8008222 <_realloc_r+0x18>
 8008216:	0011      	movs	r1, r2
 8008218:	f7ff fc52 	bl	8007ac0 <_malloc_r>
 800821c:	0005      	movs	r5, r0
 800821e:	0028      	movs	r0, r5
 8008220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008222:	2a00      	cmp	r2, #0
 8008224:	d103      	bne.n	800822e <_realloc_r+0x24>
 8008226:	f7ff fbdf 	bl	80079e8 <_free_r>
 800822a:	0025      	movs	r5, r4
 800822c:	e7f7      	b.n	800821e <_realloc_r+0x14>
 800822e:	f000 f81b 	bl	8008268 <_malloc_usable_size_r>
 8008232:	9001      	str	r0, [sp, #4]
 8008234:	4284      	cmp	r4, r0
 8008236:	d803      	bhi.n	8008240 <_realloc_r+0x36>
 8008238:	0035      	movs	r5, r6
 800823a:	0843      	lsrs	r3, r0, #1
 800823c:	42a3      	cmp	r3, r4
 800823e:	d3ee      	bcc.n	800821e <_realloc_r+0x14>
 8008240:	0021      	movs	r1, r4
 8008242:	0038      	movs	r0, r7
 8008244:	f7ff fc3c 	bl	8007ac0 <_malloc_r>
 8008248:	1e05      	subs	r5, r0, #0
 800824a:	d0e8      	beq.n	800821e <_realloc_r+0x14>
 800824c:	9b01      	ldr	r3, [sp, #4]
 800824e:	0022      	movs	r2, r4
 8008250:	429c      	cmp	r4, r3
 8008252:	d900      	bls.n	8008256 <_realloc_r+0x4c>
 8008254:	001a      	movs	r2, r3
 8008256:	0031      	movs	r1, r6
 8008258:	0028      	movs	r0, r5
 800825a:	f7ff fbbb 	bl	80079d4 <memcpy>
 800825e:	0031      	movs	r1, r6
 8008260:	0038      	movs	r0, r7
 8008262:	f7ff fbc1 	bl	80079e8 <_free_r>
 8008266:	e7da      	b.n	800821e <_realloc_r+0x14>

08008268 <_malloc_usable_size_r>:
 8008268:	1f0b      	subs	r3, r1, #4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	1f18      	subs	r0, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	da01      	bge.n	8008276 <_malloc_usable_size_r+0xe>
 8008272:	580b      	ldr	r3, [r1, r0]
 8008274:	18c0      	adds	r0, r0, r3
 8008276:	4770      	bx	lr

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
